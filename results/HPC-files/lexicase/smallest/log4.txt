Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-47 19 -47 -47] -47] [[-7 -7 -7 23] -7] [[35 -31 35 35] -31] [[48 -49 -49 -49] -49] [[95 95 95 -43] -43] [[-97 -97 -83 -97] -97] [[-28 -28 -28 80] -28] [[-93 -93 93 -93] -93] [[-63 -63 -63 -37] -63] [[87 6 6 6] 6] [(-44 -44 -44 -44) -44] [(21 21 21 21) 21] [(82 82 82 82) 82] [(-81 -81 -81 -81) -81] [(85 85 85 85) 85] [(95 51 96 71) 51] [(89 31 13 34) 13] [(44 10 10 80) 10] [(52 8 82 37) 8] [(80 51 74 57) 51] [(17 16 11 5) 5] [(36 87 32 4) 4] [(92 83 5 55) 5] [(63 34 89 13) 13] [(1 81 21 98) 1] [(24 76 31 96) 24] [(34 7 66 62) 7] [(24 51 63 54) 24] [(48 51 5 22) 5] [(21 82 38 93) 21] [(96 50 23 49) 23] [(67 11 2 1) 1] [(66 49 15 45) 15] [(69 13 60 0) 0] [(78 100 27 32) 27] [(91 5 -64 31) -64] [(-31 -3 -91 -15) -91] [(53 -58 -94 32) -94] [(31 61 -84 79) -84] [(-22 6 -23 76) -23] [(-36 -41 40 -57) -57] [(-30 -27 43 6) -30] [(-18 -88 -27 28) -88] [(11 -98 -45 60) -98] [(29 -100 -94 -82) -100] [(59 14 -14 94) -14] [(-49 92 -37 43) -49] [(-49 50 8 75) -49] [(0 36 90 10) 0] [(-52 17 -22 85) -52] [(-84 -87 -3 10) -87] [(-31 50 -4 -81) -81] [(-79 14 -37 7) -79] [(37 -67 -65 29) -67] [(50 -70 18 -16) -70] [(-68 53 37 -1) -68] [(-4 98 -9 -52) -52] [(13 -2 -52 0) -52] [(72 2 10 -16) -16] [(-23 -49 -46 35) -49] [(15 -79 1 5) -79] [(42 -31 -45 -69) -69] [(-77 -22 -37 74) -77] [(70 -82 46 0) -82] [(27 21 13 -53) -53] [(-96 87 48 -42) -96] [(-23 -1 -82 83) -82] [(-47 59 18 -10) -47] [(85 -87 45 -98) -98] [(59 -36 -4 41) -36] [(-14 96 -44 -5) -44] [(95 22 84 -59) -59] [(-46 33 -67 94) -67] [(-9 100 -15 -88) -88] [(-90 0 -44 92) -90] [(-40 3 -25 21) -40] [(0 -95 17 44) -95] [(-66 -12 10 -82) -82] [(-7 11 -52 -67) -67] [(72 -63 15 -22) -63] [(-37 -10 12 -49) -49] [(-81 -99 56 -100) -100] [(-54 -16 66 62) -54] [(23 -56 49 -39) -56] [(15 -43 90 -47) -47] [(-3 51 -64 20) -64] [(-97 7 -59 82) -97] [(-48 -48 92 -99) -99] [(-74 54 52 7) -74] [(20 11 -58 -29) -58] [(-24 -41 -18 -44) -44] [(-33 83 71 64) -33] [(-87 44 7 77) -87] [(-47 -100 -11 67) -100] [(-72 14 -3 69) -72])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-47 19 -47 -47] -47]
Train Case:   6 | Input/Output: [[-7 -7 -7 23] -7]
Train Case:   7 | Input/Output: [[35 -31 35 35] -31]
Train Case:   8 | Input/Output: [[48 -49 -49 -49] -49]
Train Case:   9 | Input/Output: [[95 95 95 -43] -43]
Train Case:  10 | Input/Output: [[-97 -97 -83 -97] -97]
Train Case:  11 | Input/Output: [[-28 -28 -28 80] -28]
Train Case:  12 | Input/Output: [[-93 -93 93 -93] -93]
Train Case:  13 | Input/Output: [[-63 -63 -63 -37] -63]
Train Case:  14 | Input/Output: [[87 6 6 6] 6]
Train Case:  15 | Input/Output: [(-44 -44 -44 -44) -44]
Train Case:  16 | Input/Output: [(21 21 21 21) 21]
Train Case:  17 | Input/Output: [(82 82 82 82) 82]
Train Case:  18 | Input/Output: [(-81 -81 -81 -81) -81]
Train Case:  19 | Input/Output: [(85 85 85 85) 85]
Train Case:  20 | Input/Output: [(95 51 96 71) 51]
Train Case:  21 | Input/Output: [(89 31 13 34) 13]
Train Case:  22 | Input/Output: [(44 10 10 80) 10]
Train Case:  23 | Input/Output: [(52 8 82 37) 8]
Train Case:  24 | Input/Output: [(80 51 74 57) 51]
Train Case:  25 | Input/Output: [(17 16 11 5) 5]
Train Case:  26 | Input/Output: [(36 87 32 4) 4]
Train Case:  27 | Input/Output: [(92 83 5 55) 5]
Train Case:  28 | Input/Output: [(63 34 89 13) 13]
Train Case:  29 | Input/Output: [(1 81 21 98) 1]
Train Case:  30 | Input/Output: [(24 76 31 96) 24]
Train Case:  31 | Input/Output: [(34 7 66 62) 7]
Train Case:  32 | Input/Output: [(24 51 63 54) 24]
Train Case:  33 | Input/Output: [(48 51 5 22) 5]
Train Case:  34 | Input/Output: [(21 82 38 93) 21]
Train Case:  35 | Input/Output: [(96 50 23 49) 23]
Train Case:  36 | Input/Output: [(67 11 2 1) 1]
Train Case:  37 | Input/Output: [(66 49 15 45) 15]
Train Case:  38 | Input/Output: [(69 13 60 0) 0]
Train Case:  39 | Input/Output: [(78 100 27 32) 27]
Train Case:  40 | Input/Output: [(91 5 -64 31) -64]
Train Case:  41 | Input/Output: [(-31 -3 -91 -15) -91]
Train Case:  42 | Input/Output: [(53 -58 -94 32) -94]
Train Case:  43 | Input/Output: [(31 61 -84 79) -84]
Train Case:  44 | Input/Output: [(-22 6 -23 76) -23]
Train Case:  45 | Input/Output: [(-36 -41 40 -57) -57]
Train Case:  46 | Input/Output: [(-30 -27 43 6) -30]
Train Case:  47 | Input/Output: [(-18 -88 -27 28) -88]
Train Case:  48 | Input/Output: [(11 -98 -45 60) -98]
Train Case:  49 | Input/Output: [(29 -100 -94 -82) -100]
Train Case:  50 | Input/Output: [(59 14 -14 94) -14]
Train Case:  51 | Input/Output: [(-49 92 -37 43) -49]
Train Case:  52 | Input/Output: [(-49 50 8 75) -49]
Train Case:  53 | Input/Output: [(0 36 90 10) 0]
Train Case:  54 | Input/Output: [(-52 17 -22 85) -52]
Train Case:  55 | Input/Output: [(-84 -87 -3 10) -87]
Train Case:  56 | Input/Output: [(-31 50 -4 -81) -81]
Train Case:  57 | Input/Output: [(-79 14 -37 7) -79]
Train Case:  58 | Input/Output: [(37 -67 -65 29) -67]
Train Case:  59 | Input/Output: [(50 -70 18 -16) -70]
Train Case:  60 | Input/Output: [(-68 53 37 -1) -68]
Train Case:  61 | Input/Output: [(-4 98 -9 -52) -52]
Train Case:  62 | Input/Output: [(13 -2 -52 0) -52]
Train Case:  63 | Input/Output: [(72 2 10 -16) -16]
Train Case:  64 | Input/Output: [(-23 -49 -46 35) -49]
Train Case:  65 | Input/Output: [(15 -79 1 5) -79]
Train Case:  66 | Input/Output: [(42 -31 -45 -69) -69]
Train Case:  67 | Input/Output: [(-77 -22 -37 74) -77]
Train Case:  68 | Input/Output: [(70 -82 46 0) -82]
Train Case:  69 | Input/Output: [(27 21 13 -53) -53]
Train Case:  70 | Input/Output: [(-96 87 48 -42) -96]
Train Case:  71 | Input/Output: [(-23 -1 -82 83) -82]
Train Case:  72 | Input/Output: [(-47 59 18 -10) -47]
Train Case:  73 | Input/Output: [(85 -87 45 -98) -98]
Train Case:  74 | Input/Output: [(59 -36 -4 41) -36]
Train Case:  75 | Input/Output: [(-14 96 -44 -5) -44]
Train Case:  76 | Input/Output: [(95 22 84 -59) -59]
Train Case:  77 | Input/Output: [(-46 33 -67 94) -67]
Train Case:  78 | Input/Output: [(-9 100 -15 -88) -88]
Train Case:  79 | Input/Output: [(-90 0 -44 92) -90]
Train Case:  80 | Input/Output: [(-40 3 -25 21) -40]
Train Case:  81 | Input/Output: [(0 -95 17 44) -95]
Train Case:  82 | Input/Output: [(-66 -12 10 -82) -82]
Train Case:  83 | Input/Output: [(-7 11 -52 -67) -67]
Train Case:  84 | Input/Output: [(72 -63 15 -22) -63]
Train Case:  85 | Input/Output: [(-37 -10 12 -49) -49]
Train Case:  86 | Input/Output: [(-81 -99 56 -100) -100]
Train Case:  87 | Input/Output: [(-54 -16 66 62) -54]
Train Case:  88 | Input/Output: [(23 -56 49 -39) -56]
Train Case:  89 | Input/Output: [(15 -43 90 -47) -47]
Train Case:  90 | Input/Output: [(-3 51 -64 20) -64]
Train Case:  91 | Input/Output: [(-97 7 -59 82) -97]
Train Case:  92 | Input/Output: [(-48 -48 92 -99) -99]
Train Case:  93 | Input/Output: [(-74 54 52 7) -74]
Train Case:  94 | Input/Output: [(20 11 -58 -29) -58]
Train Case:  95 | Input/Output: [(-24 -41 -18 -44) -44]
Train Case:  96 | Input/Output: [(-33 83 71 64) -33]
Train Case:  97 | Input/Output: [(-87 44 7 77) -87]
Train Case:  98 | Input/Output: [(-47 -100 -11 67) -100]
Train Case:  99 | Input/Output: [(-72 14 -3 69) -72]
Test Case:   0 | Input/Output: [[-17 -17 99 -17] -17]
Test Case:   1 | Input/Output: [[-83 -83 87 -83] -83]
Test Case:   2 | Input/Output: [[77 19 19 19] 19]
Test Case:   3 | Input/Output: [[60 60 60 -88] -88]
Test Case:   4 | Input/Output: [[-37 -77 -77 -77] -77]
Test Case:   5 | Input/Output: [[-49 -49 -49 51] -49]
Test Case:   6 | Input/Output: [[20 20 -70 20] -70]
Test Case:   7 | Input/Output: [[-1 -1 -64 -1] -64]
Test Case:   8 | Input/Output: [[68 68 -25 68] -25]
Test Case:   9 | Input/Output: [[-82 52 -82 -82] -82]
Test Case:  10 | Input/Output: [[-48 -48 97 -48] -48]
Test Case:  11 | Input/Output: [[71 62 71 71] 62]
Test Case:  12 | Input/Output: [[55 31 55 55] 31]
Test Case:  13 | Input/Output: [[-76 -76 -76 78] -76]
Test Case:  14 | Input/Output: [[-73 -98 -73 -73] -98]
Test Case:  15 | Input/Output: [[76 69 69 69] 69]
Test Case:  16 | Input/Output: [[-71 92 92 92] -71]
Test Case:  17 | Input/Output: [[-52 -52 -52 -88] -88]
Test Case:  18 | Input/Output: [[-13 -78 -13 -13] -78]
Test Case:  19 | Input/Output: [[0 12 12 12] 0]
Test Case:  20 | Input/Output: [[-54 -54 50 -54] -54]
Test Case:  21 | Input/Output: [[-62 -62 -17 -62] -62]
Test Case:  22 | Input/Output: [[-8 12 -8 -8] -8]
Test Case:  23 | Input/Output: [[82 82 50 82] 50]
Test Case:  24 | Input/Output: [[55 2 2 2] 2]
Test Case:  25 | Input/Output: [[-96 3 3 3] -96]
Test Case:  26 | Input/Output: [[-71 56 56 56] -71]
Test Case:  27 | Input/Output: [[35 -54 -54 -54] -54]
Test Case:  28 | Input/Output: [[-50 -50 -50 100] -50]
Test Case:  29 | Input/Output: [[-3 -3 -3 -2] -3]
Test Case:  30 | Input/Output: [[-40 -36 -36 -36] -40]
Test Case:  31 | Input/Output: [[34 34 -20 34] -20]
Test Case:  32 | Input/Output: [[88 88 -57 88] -57]
Test Case:  33 | Input/Output: [[73 7 73 73] 7]
Test Case:  34 | Input/Output: [[-76 -47 -47 -47] -76]
Test Case:  35 | Input/Output: [[-93 -93 -57 -93] -93]
Test Case:  36 | Input/Output: [[-74 -74 -74 87] -74]
Test Case:  37 | Input/Output: [[91 91 -4 91] -4]
Test Case:  38 | Input/Output: [[-37 -37 -37 28] -37]
Test Case:  39 | Input/Output: [[36 -18 36 36] -18]
Test Case:  40 | Input/Output: [[-7 -7 -12 -7] -12]
Test Case:  41 | Input/Output: [[45 45 45 70] 45]
Test Case:  42 | Input/Output: [[59 59 59 -17] -17]
Test Case:  43 | Input/Output: [[-19 -19 -19 -49] -49]
Test Case:  44 | Input/Output: [[-67 -42 -42 -42] -67]
Test Case:  45 | Input/Output: [[-33 -33 -79 -33] -79]
Test Case:  46 | Input/Output: [[34 -67 -67 -67] -67]
Test Case:  47 | Input/Output: [[1 1 51 1] 1]
Test Case:  48 | Input/Output: [[-32 53 -32 -32] -32]
Test Case:  49 | Input/Output: [[10 10 10 -76] -76]
Test Case:  50 | Input/Output: [[73 91 73 73] 73]
Test Case:  51 | Input/Output: [[-11 -19 -11 -11] -19]
Test Case:  52 | Input/Output: [[53 53 77 53] 53]
Test Case:  53 | Input/Output: [[96 96 33 96] 33]
Test Case:  54 | Input/Output: [[53 53 53 -33] -33]
Test Case:  55 | Input/Output: [[-27 49 49 49] -27]
Test Case:  56 | Input/Output: [[84 84 84 -38] -38]
Test Case:  57 | Input/Output: [[89 -69 -69 -69] -69]
Test Case:  58 | Input/Output: [[-90 -90 18 -90] -90]
Test Case:  59 | Input/Output: [[-12 -26 -12 -12] -26]
Test Case:  60 | Input/Output: [[-38 36 -38 -38] -38]
Test Case:  61 | Input/Output: [[28 -42 28 28] -42]
Test Case:  62 | Input/Output: [[73 44 73 73] 44]
Test Case:  63 | Input/Output: [[-8 85 85 85] -8]
Test Case:  64 | Input/Output: [[66 66 62 66] 62]
Test Case:  65 | Input/Output: [[-77 -77 -12 -77] -77]
Test Case:  66 | Input/Output: [[40 41 40 40] 40]
Test Case:  67 | Input/Output: [[-99 -99 -99 22] -99]
Test Case:  68 | Input/Output: [[-61 -61 -61 -55] -61]
Test Case:  69 | Input/Output: [[15 -39 -39 -39] -39]
Test Case:  70 | Input/Output: [[92 92 -58 92] -58]
Test Case:  71 | Input/Output: [[72 -11 -11 -11] -11]
Test Case:  72 | Input/Output: [[14 14 75 14] 14]
Test Case:  73 | Input/Output: [[-73 -73 91 -73] -73]
Test Case:  74 | Input/Output: [[68 18 68 68] 18]
Test Case:  75 | Input/Output: [[-83 -83 -71 -83] -83]
Test Case:  76 | Input/Output: [[80 65 80 80] 65]
Test Case:  77 | Input/Output: [[-41 -41 -41 -19] -41]
Test Case:  78 | Input/Output: [[-11 -91 -91 -91] -91]
Test Case:  79 | Input/Output: [[-95 -95 -67 -95] -95]
Test Case:  80 | Input/Output: [[75 58 58 58] 58]
Test Case:  81 | Input/Output: [[44 44 44 -15] -15]
Test Case:  82 | Input/Output: [[-38 -25 -25 -25] -38]
Test Case:  83 | Input/Output: [[-7 90 -7 -7] -7]
Test Case:  84 | Input/Output: [[-97 -97 -97 34] -97]
Test Case:  85 | Input/Output: [[32 32 -67 32] -67]
Test Case:  86 | Input/Output: [[-62 -62 -42 -62] -62]
Test Case:  87 | Input/Output: [[33 -78 -78 -78] -78]
Test Case:  88 | Input/Output: [[-91 22 -91 -91] -91]
Test Case:  89 | Input/Output: [[10 66 10 10] 10]
Test Case:  90 | Input/Output: [[97 97 -67 97] -67]
Test Case:  91 | Input/Output: [[40 40 -10 40] -10]
Test Case:  92 | Input/Output: [[-17 -17 -100 -17] -100]
Test Case:  93 | Input/Output: [[-100 -100 -89 -100] -100]
Test Case:  94 | Input/Output: [[100 67 100 100] 67]
Test Case:  95 | Input/Output: [[-81 -81 -27 -81] -81]
Test Case:  96 | Input/Output: [[25 80 80 80] 25]
Test Case:  97 | Input/Output: [[-55 -55 -55 81] -55]
Test Case:  98 | Input/Output: [[-7 -26 -26 -26] -26]
Test Case:  99 | Input/Output: [[-95 -95 -95 82] -95]
Test Case: 100 | Input/Output: [(90 90 90 90) 90]
Test Case: 101 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 102 | Input/Output: [(14 14 14 14) 14]
Test Case: 103 | Input/Output: [(38 38 38 38) 38]
Test Case: 104 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 105 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 106 | Input/Output: [(42 42 42 42) 42]
Test Case: 107 | Input/Output: [(88 88 88 88) 88]
Test Case: 108 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 109 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 110 | Input/Output: [(59 59 59 59) 59]
Test Case: 111 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 112 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 113 | Input/Output: [(58 58 58 58) 58]
Test Case: 114 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 115 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 116 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 117 | Input/Output: [(89 89 89 89) 89]
Test Case: 118 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 119 | Input/Output: [(21 21 21 21) 21]
Test Case: 120 | Input/Output: [(69 69 69 69) 69]
Test Case: 121 | Input/Output: [(94 94 94 94) 94]
Test Case: 122 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 123 | Input/Output: [(44 44 44 44) 44]
Test Case: 124 | Input/Output: [(25 25 25 25) 25]
Test Case: 125 | Input/Output: [(14 14 14 14) 14]
Test Case: 126 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 127 | Input/Output: [(35 35 35 35) 35]
Test Case: 128 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 129 | Input/Output: [(77 77 77 77) 77]
Test Case: 130 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 131 | Input/Output: [(11 11 11 11) 11]
Test Case: 132 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 133 | Input/Output: [(60 60 60 60) 60]
Test Case: 134 | Input/Output: [(54 54 54 54) 54]
Test Case: 135 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 136 | Input/Output: [(82 82 82 82) 82]
Test Case: 137 | Input/Output: [(57 57 57 57) 57]
Test Case: 138 | Input/Output: [(86 86 86 86) 86]
Test Case: 139 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 140 | Input/Output: [(23 23 23 23) 23]
Test Case: 141 | Input/Output: [(87 87 87 87) 87]
Test Case: 142 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 143 | Input/Output: [(25 25 25 25) 25]
Test Case: 144 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 145 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 146 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 147 | Input/Output: [(15 15 15 15) 15]
Test Case: 148 | Input/Output: [(8 8 8 8) 8]
Test Case: 149 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 150 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 151 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 152 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 153 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 154 | Input/Output: [(80 80 80 80) 80]
Test Case: 155 | Input/Output: [(82 82 82 82) 82]
Test Case: 156 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 157 | Input/Output: [(97 97 97 97) 97]
Test Case: 158 | Input/Output: [(14 14 14 14) 14]
Test Case: 159 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 160 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 161 | Input/Output: [(32 32 32 32) 32]
Test Case: 162 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 163 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 164 | Input/Output: [(33 33 33 33) 33]
Test Case: 165 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 166 | Input/Output: [(16 16 16 16) 16]
Test Case: 167 | Input/Output: [(6 6 6 6) 6]
Test Case: 168 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 169 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 170 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 171 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 172 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 173 | Input/Output: [(88 88 88 88) 88]
Test Case: 174 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 175 | Input/Output: [(32 32 32 32) 32]
Test Case: 176 | Input/Output: [(92 92 92 92) 92]
Test Case: 177 | Input/Output: [(7 7 7 7) 7]
Test Case: 178 | Input/Output: [(47 47 47 47) 47]
Test Case: 179 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 180 | Input/Output: [(59 59 59 59) 59]
Test Case: 181 | Input/Output: [(4 4 4 4) 4]
Test Case: 182 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 183 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 184 | Input/Output: [(1 1 1 1) 1]
Test Case: 185 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 186 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 187 | Input/Output: [(69 69 69 69) 69]
Test Case: 188 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 189 | Input/Output: [(70 70 70 70) 70]
Test Case: 190 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 191 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 192 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 193 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 194 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 195 | Input/Output: [(89 89 89 89) 89]
Test Case: 196 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 197 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 198 | Input/Output: [(88 88 88 88) 88]
Test Case: 199 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 200 | Input/Output: [(30 16 70 4) 4]
Test Case: 201 | Input/Output: [(57 6 59 45) 6]
Test Case: 202 | Input/Output: [(56 97 32 7) 7]
Test Case: 203 | Input/Output: [(14 1 61 21) 1]
Test Case: 204 | Input/Output: [(28 15 91 66) 15]
Test Case: 205 | Input/Output: [(79 83 81 94) 79]
Test Case: 206 | Input/Output: [(100 77 0 10) 0]
Test Case: 207 | Input/Output: [(21 13 73 62) 13]
Test Case: 208 | Input/Output: [(27 79 34 41) 27]
Test Case: 209 | Input/Output: [(27 47 27 91) 27]
Test Case: 210 | Input/Output: [(48 38 14 36) 14]
Test Case: 211 | Input/Output: [(76 16 40 19) 16]
Test Case: 212 | Input/Output: [(43 21 58 2) 2]
Test Case: 213 | Input/Output: [(53 4 63 26) 4]
Test Case: 214 | Input/Output: [(78 3 12 82) 3]
Test Case: 215 | Input/Output: [(39 90 62 27) 27]
Test Case: 216 | Input/Output: [(49 0 59 41) 0]
Test Case: 217 | Input/Output: [(81 20 7 28) 7]
Test Case: 218 | Input/Output: [(63 35 39 29) 29]
Test Case: 219 | Input/Output: [(75 39 42 87) 39]
Test Case: 220 | Input/Output: [(6 16 76 92) 6]
Test Case: 221 | Input/Output: [(4 59 40 72) 4]
Test Case: 222 | Input/Output: [(29 25 73 50) 25]
Test Case: 223 | Input/Output: [(7 82 22 12) 7]
Test Case: 224 | Input/Output: [(63 54 73 30) 30]
Test Case: 225 | Input/Output: [(37 70 62 8) 8]
Test Case: 226 | Input/Output: [(59 23 3 20) 3]
Test Case: 227 | Input/Output: [(55 8 96 96) 8]
Test Case: 228 | Input/Output: [(82 21 64 55) 21]
Test Case: 229 | Input/Output: [(14 88 32 48) 14]
Test Case: 230 | Input/Output: [(14 13 30 20) 13]
Test Case: 231 | Input/Output: [(93 16 27 5) 5]
Test Case: 232 | Input/Output: [(83 35 90 84) 35]
Test Case: 233 | Input/Output: [(44 44 45 83) 44]
Test Case: 234 | Input/Output: [(83 84 89 46) 46]
Test Case: 235 | Input/Output: [(24 35 97 53) 24]
Test Case: 236 | Input/Output: [(2 42 67 71) 2]
Test Case: 237 | Input/Output: [(50 47 74 13) 13]
Test Case: 238 | Input/Output: [(8 80 66 25) 8]
Test Case: 239 | Input/Output: [(29 35 87 21) 21]
Test Case: 240 | Input/Output: [(3 35 48 62) 3]
Test Case: 241 | Input/Output: [(59 42 18 46) 18]
Test Case: 242 | Input/Output: [(6 31 71 7) 6]
Test Case: 243 | Input/Output: [(66 62 39 25) 25]
Test Case: 244 | Input/Output: [(33 41 21 39) 21]
Test Case: 245 | Input/Output: [(92 94 7 10) 7]
Test Case: 246 | Input/Output: [(52 67 59 31) 31]
Test Case: 247 | Input/Output: [(56 17 98 11) 11]
Test Case: 248 | Input/Output: [(87 100 6 14) 6]
Test Case: 249 | Input/Output: [(4 74 58 96) 4]
Test Case: 250 | Input/Output: [(96 57 11 80) 11]
Test Case: 251 | Input/Output: [(92 53 59 17) 17]
Test Case: 252 | Input/Output: [(61 92 48 83) 48]
Test Case: 253 | Input/Output: [(70 51 4 2) 2]
Test Case: 254 | Input/Output: [(7 58 47 10) 7]
Test Case: 255 | Input/Output: [(47 80 55 50) 47]
Test Case: 256 | Input/Output: [(45 57 42 85) 42]
Test Case: 257 | Input/Output: [(23 4 54 83) 4]
Test Case: 258 | Input/Output: [(35 68 0 85) 0]
Test Case: 259 | Input/Output: [(18 61 50 65) 18]
Test Case: 260 | Input/Output: [(33 90 97 38) 33]
Test Case: 261 | Input/Output: [(55 2 84 26) 2]
Test Case: 262 | Input/Output: [(21 85 77 28) 21]
Test Case: 263 | Input/Output: [(87 58 98 55) 55]
Test Case: 264 | Input/Output: [(0 44 80 8) 0]
Test Case: 265 | Input/Output: [(26 88 16 37) 16]
Test Case: 266 | Input/Output: [(55 51 24 56) 24]
Test Case: 267 | Input/Output: [(54 62 75 75) 54]
Test Case: 268 | Input/Output: [(69 99 26 46) 26]
Test Case: 269 | Input/Output: [(38 12 100 42) 12]
Test Case: 270 | Input/Output: [(40 90 37 91) 37]
Test Case: 271 | Input/Output: [(23 19 92 75) 19]
Test Case: 272 | Input/Output: [(52 53 25 50) 25]
Test Case: 273 | Input/Output: [(53 31 52 58) 31]
Test Case: 274 | Input/Output: [(75 51 93 66) 51]
Test Case: 275 | Input/Output: [(35 52 52 29) 29]
Test Case: 276 | Input/Output: [(64 8 15 17) 8]
Test Case: 277 | Input/Output: [(18 8 47 96) 8]
Test Case: 278 | Input/Output: [(43 15 92 23) 15]
Test Case: 279 | Input/Output: [(78 6 93 37) 6]
Test Case: 280 | Input/Output: [(14 78 18 79) 14]
Test Case: 281 | Input/Output: [(58 52 96 74) 52]
Test Case: 282 | Input/Output: [(1 24 98 89) 1]
Test Case: 283 | Input/Output: [(47 57 41 22) 22]
Test Case: 284 | Input/Output: [(28 84 92 52) 28]
Test Case: 285 | Input/Output: [(50 83 24 41) 24]
Test Case: 286 | Input/Output: [(34 93 27 74) 27]
Test Case: 287 | Input/Output: [(30 2 4 84) 2]
Test Case: 288 | Input/Output: [(67 19 14 29) 14]
Test Case: 289 | Input/Output: [(68 44 99 72) 44]
Test Case: 290 | Input/Output: [(49 78 46 30) 30]
Test Case: 291 | Input/Output: [(2 51 26 14) 2]
Test Case: 292 | Input/Output: [(95 54 81 97) 54]
Test Case: 293 | Input/Output: [(12 82 64 81) 12]
Test Case: 294 | Input/Output: [(89 55 65 76) 55]
Test Case: 295 | Input/Output: [(54 73 59 14) 14]
Test Case: 296 | Input/Output: [(24 66 59 50) 24]
Test Case: 297 | Input/Output: [(61 76 83 26) 26]
Test Case: 298 | Input/Output: [(33 22 3 48) 3]
Test Case: 299 | Input/Output: [(26 17 55 74) 17]
Test Case: 300 | Input/Output: [(95 31 14 92) 14]
Test Case: 301 | Input/Output: [(51 30 38 100) 30]
Test Case: 302 | Input/Output: [(30 25 44 68) 25]
Test Case: 303 | Input/Output: [(71 24 67 71) 24]
Test Case: 304 | Input/Output: [(23 74 36 24) 23]
Test Case: 305 | Input/Output: [(58 1 85 39) 1]
Test Case: 306 | Input/Output: [(35 95 27 25) 25]
Test Case: 307 | Input/Output: [(77 66 88 12) 12]
Test Case: 308 | Input/Output: [(49 77 49 75) 49]
Test Case: 309 | Input/Output: [(76 7 29 80) 7]
Test Case: 310 | Input/Output: [(3 81 78 50) 3]
Test Case: 311 | Input/Output: [(61 99 6 79) 6]
Test Case: 312 | Input/Output: [(0 94 41 13) 0]
Test Case: 313 | Input/Output: [(86 90 83 68) 68]
Test Case: 314 | Input/Output: [(6 97 14 90) 6]
Test Case: 315 | Input/Output: [(3 39 60 50) 3]
Test Case: 316 | Input/Output: [(34 85 11 52) 11]
Test Case: 317 | Input/Output: [(16 86 0 68) 0]
Test Case: 318 | Input/Output: [(50 72 52 19) 19]
Test Case: 319 | Input/Output: [(75 96 4 93) 4]
Test Case: 320 | Input/Output: [(26 24 35 33) 24]
Test Case: 321 | Input/Output: [(79 39 35 68) 35]
Test Case: 322 | Input/Output: [(18 14 5 42) 5]
Test Case: 323 | Input/Output: [(31 53 68 47) 31]
Test Case: 324 | Input/Output: [(8 52 95 84) 8]
Test Case: 325 | Input/Output: [(62 21 76 43) 21]
Test Case: 326 | Input/Output: [(57 15 87 89) 15]
Test Case: 327 | Input/Output: [(82 77 68 6) 6]
Test Case: 328 | Input/Output: [(20 79 44 70) 20]
Test Case: 329 | Input/Output: [(77 25 5 88) 5]
Test Case: 330 | Input/Output: [(63 60 75 15) 15]
Test Case: 331 | Input/Output: [(36 83 60 30) 30]
Test Case: 332 | Input/Output: [(17 10 85 100) 10]
Test Case: 333 | Input/Output: [(71 5 30 29) 5]
Test Case: 334 | Input/Output: [(38 97 50 92) 38]
Test Case: 335 | Input/Output: [(92 72 72 83) 72]
Test Case: 336 | Input/Output: [(75 82 54 18) 18]
Test Case: 337 | Input/Output: [(64 14 66 20) 14]
Test Case: 338 | Input/Output: [(13 31 48 71) 13]
Test Case: 339 | Input/Output: [(76 28 38 70) 28]
Test Case: 340 | Input/Output: [(24 31 57 8) 8]
Test Case: 341 | Input/Output: [(97 99 74 51) 51]
Test Case: 342 | Input/Output: [(58 31 42 92) 31]
Test Case: 343 | Input/Output: [(93 70 88 17) 17]
Test Case: 344 | Input/Output: [(58 49 70 0) 0]
Test Case: 345 | Input/Output: [(64 68 43 52) 43]
Test Case: 346 | Input/Output: [(35 65 59 28) 28]
Test Case: 347 | Input/Output: [(25 94 94 4) 4]
Test Case: 348 | Input/Output: [(12 16 41 53) 12]
Test Case: 349 | Input/Output: [(24 3 99 88) 3]
Test Case: 350 | Input/Output: [(71 90 72 23) 23]
Test Case: 351 | Input/Output: [(46 70 78 47) 46]
Test Case: 352 | Input/Output: [(68 45 17 1) 1]
Test Case: 353 | Input/Output: [(90 16 78 0) 0]
Test Case: 354 | Input/Output: [(30 55 5 51) 5]
Test Case: 355 | Input/Output: [(79 66 47 70) 47]
Test Case: 356 | Input/Output: [(43 93 92 72) 43]
Test Case: 357 | Input/Output: [(31 89 13 8) 8]
Test Case: 358 | Input/Output: [(66 16 48 83) 16]
Test Case: 359 | Input/Output: [(98 34 70 42) 34]
Test Case: 360 | Input/Output: [(63 61 24 41) 24]
Test Case: 361 | Input/Output: [(35 36 26 100) 26]
Test Case: 362 | Input/Output: [(98 21 15 95) 15]
Test Case: 363 | Input/Output: [(86 75 50 36) 36]
Test Case: 364 | Input/Output: [(68 35 50 37) 35]
Test Case: 365 | Input/Output: [(41 73 39 46) 39]
Test Case: 366 | Input/Output: [(31 97 34 79) 31]
Test Case: 367 | Input/Output: [(6 66 18 76) 6]
Test Case: 368 | Input/Output: [(19 37 75 90) 19]
Test Case: 369 | Input/Output: [(0 20 83 83) 0]
Test Case: 370 | Input/Output: [(46 12 7 28) 7]
Test Case: 371 | Input/Output: [(43 79 46 60) 43]
Test Case: 372 | Input/Output: [(91 79 58 92) 58]
Test Case: 373 | Input/Output: [(66 60 99 86) 60]
Test Case: 374 | Input/Output: [(24 15 55 46) 15]
Test Case: 375 | Input/Output: [(33 34 80 60) 33]
Test Case: 376 | Input/Output: [(27 93 41 94) 27]
Test Case: 377 | Input/Output: [(72 61 87 37) 37]
Test Case: 378 | Input/Output: [(32 17 74 7) 7]
Test Case: 379 | Input/Output: [(75 6 75 71) 6]
Test Case: 380 | Input/Output: [(25 49 17 28) 17]
Test Case: 381 | Input/Output: [(82 0 73 4) 0]
Test Case: 382 | Input/Output: [(92 31 92 48) 31]
Test Case: 383 | Input/Output: [(62 6 6 36) 6]
Test Case: 384 | Input/Output: [(75 61 45 3) 3]
Test Case: 385 | Input/Output: [(56 58 20 5) 5]
Test Case: 386 | Input/Output: [(42 27 46 45) 27]
Test Case: 387 | Input/Output: [(74 67 79 98) 67]
Test Case: 388 | Input/Output: [(17 21 83 90) 17]
Test Case: 389 | Input/Output: [(65 9 32 50) 9]
Test Case: 390 | Input/Output: [(48 87 16 43) 16]
Test Case: 391 | Input/Output: [(72 11 92 96) 11]
Test Case: 392 | Input/Output: [(85 75 58 88) 58]
Test Case: 393 | Input/Output: [(36 77 10 8) 8]
Test Case: 394 | Input/Output: [(30 13 10 54) 10]
Test Case: 395 | Input/Output: [(53 22 99 6) 6]
Test Case: 396 | Input/Output: [(49 29 54 97) 29]
Test Case: 397 | Input/Output: [(19 65 91 15) 15]
Test Case: 398 | Input/Output: [(77 4 23 41) 4]
Test Case: 399 | Input/Output: [(53 35 17 32) 17]
Test Case: 400 | Input/Output: [(69 -47 58 15) -47]
Test Case: 401 | Input/Output: [(4 -18 6 -76) -76]
Test Case: 402 | Input/Output: [(16 -97 35 81) -97]
Test Case: 403 | Input/Output: [(55 7 -41 26) -41]
Test Case: 404 | Input/Output: [(-69 -20 53 -30) -69]
Test Case: 405 | Input/Output: [(-49 -75 -3 74) -75]
Test Case: 406 | Input/Output: [(-53 -92 -96 -48) -96]
Test Case: 407 | Input/Output: [(-23 90 4 51) -23]
Test Case: 408 | Input/Output: [(-36 41 -23 41) -36]
Test Case: 409 | Input/Output: [(65 29 22 -84) -84]
Test Case: 410 | Input/Output: [(-34 3 82 -86) -86]
Test Case: 411 | Input/Output: [(-99 83 52 43) -99]
Test Case: 412 | Input/Output: [(-83 -37 34 -22) -83]
Test Case: 413 | Input/Output: [(-99 61 44 -15) -99]
Test Case: 414 | Input/Output: [(33 50 -87 -42) -87]
Test Case: 415 | Input/Output: [(-58 -51 25 40) -58]
Test Case: 416 | Input/Output: [(52 -15 88 77) -15]
Test Case: 417 | Input/Output: [(52 -100 80 -82) -100]
Test Case: 418 | Input/Output: [(-15 -81 24 90) -81]
Test Case: 419 | Input/Output: [(-8 3 -44 -35) -44]
Test Case: 420 | Input/Output: [(-20 58 70 -7) -20]
Test Case: 421 | Input/Output: [(75 82 72 63) 63]
Test Case: 422 | Input/Output: [(87 47 -36 -23) -36]
Test Case: 423 | Input/Output: [(86 -1 -84 -16) -84]
Test Case: 424 | Input/Output: [(93 -91 75 -83) -91]
Test Case: 425 | Input/Output: [(-94 91 -31 -11) -94]
Test Case: 426 | Input/Output: [(39 52 21 -65) -65]
Test Case: 427 | Input/Output: [(19 77 -68 71) -68]
Test Case: 428 | Input/Output: [(-3 95 -13 93) -13]
Test Case: 429 | Input/Output: [(43 52 69 -94) -94]
Test Case: 430 | Input/Output: [(1 4 41 95) 1]
Test Case: 431 | Input/Output: [(-91 95 -6 -100) -100]
Test Case: 432 | Input/Output: [(3 -3 -42 -75) -75]
Test Case: 433 | Input/Output: [(-19 -57 -5 -66) -66]
Test Case: 434 | Input/Output: [(9 -86 -27 39) -86]
Test Case: 435 | Input/Output: [(-92 -80 -70 34) -92]
Test Case: 436 | Input/Output: [(-43 -52 91 -53) -53]
Test Case: 437 | Input/Output: [(-85 3 -74 25) -85]
Test Case: 438 | Input/Output: [(85 -29 52 63) -29]
Test Case: 439 | Input/Output: [(74 65 22 -39) -39]
Test Case: 440 | Input/Output: [(80 27 23 -64) -64]
Test Case: 441 | Input/Output: [(30 -48 72 97) -48]
Test Case: 442 | Input/Output: [(31 -59 69 35) -59]
Test Case: 443 | Input/Output: [(-24 -53 17 10) -53]
Test Case: 444 | Input/Output: [(-77 -82 34 44) -82]
Test Case: 445 | Input/Output: [(-38 -92 -17 -56) -92]
Test Case: 446 | Input/Output: [(-73 75 16 -81) -81]
Test Case: 447 | Input/Output: [(-12 -19 -36 -71) -71]
Test Case: 448 | Input/Output: [(-27 -97 4 -86) -97]
Test Case: 449 | Input/Output: [(1 34 75 -47) -47]
Test Case: 450 | Input/Output: [(-19 -65 14 9) -65]
Test Case: 451 | Input/Output: [(55 78 -31 94) -31]
Test Case: 452 | Input/Output: [(-28 47 42 78) -28]
Test Case: 453 | Input/Output: [(47 77 46 75) 46]
Test Case: 454 | Input/Output: [(68 -81 42 32) -81]
Test Case: 455 | Input/Output: [(-73 -77 52 -35) -77]
Test Case: 456 | Input/Output: [(93 -79 86 59) -79]
Test Case: 457 | Input/Output: [(45 -22 -18 -45) -45]
Test Case: 458 | Input/Output: [(100 -28 41 -70) -70]
Test Case: 459 | Input/Output: [(-31 72 33 -18) -31]
Test Case: 460 | Input/Output: [(-27 -39 35 -60) -60]
Test Case: 461 | Input/Output: [(-95 9 45 -60) -95]
Test Case: 462 | Input/Output: [(-12 -70 -33 67) -70]
Test Case: 463 | Input/Output: [(-58 34 21 83) -58]
Test Case: 464 | Input/Output: [(53 55 27 -61) -61]
Test Case: 465 | Input/Output: [(-11 28 -53 -58) -58]
Test Case: 466 | Input/Output: [(63 19 -63 30) -63]
Test Case: 467 | Input/Output: [(-15 87 -59 28) -59]
Test Case: 468 | Input/Output: [(-1 72 77 -65) -65]
Test Case: 469 | Input/Output: [(7 42 -76 -78) -78]
Test Case: 470 | Input/Output: [(83 60 60 -58) -58]
Test Case: 471 | Input/Output: [(-44 -23 -37 9) -44]
Test Case: 472 | Input/Output: [(-67 -49 54 42) -67]
Test Case: 473 | Input/Output: [(18 77 -50 69) -50]
Test Case: 474 | Input/Output: [(68 -26 -68 18) -68]
Test Case: 475 | Input/Output: [(39 21 22 -21) -21]
Test Case: 476 | Input/Output: [(-73 44 -26 -86) -86]
Test Case: 477 | Input/Output: [(-23 87 18 23) -23]
Test Case: 478 | Input/Output: [(15 -37 15 59) -37]
Test Case: 479 | Input/Output: [(6 21 -22 -31) -31]
Test Case: 480 | Input/Output: [(100 64 52 27) 27]
Test Case: 481 | Input/Output: [(-4 -87 0 -24) -87]
Test Case: 482 | Input/Output: [(47 -88 65 -18) -88]
Test Case: 483 | Input/Output: [(41 75 22 88) 22]
Test Case: 484 | Input/Output: [(-98 -20 -61 36) -98]
Test Case: 485 | Input/Output: [(38 -27 -6 -37) -37]
Test Case: 486 | Input/Output: [(44 3 -10 -14) -14]
Test Case: 487 | Input/Output: [(65 -48 64 10) -48]
Test Case: 488 | Input/Output: [(-29 93 -69 -39) -69]
Test Case: 489 | Input/Output: [(24 -47 -65 66) -65]
Test Case: 490 | Input/Output: [(15 10 -56 -24) -56]
Test Case: 491 | Input/Output: [(-8 97 26 75) -8]
Test Case: 492 | Input/Output: [(-72 5 5 -50) -72]
Test Case: 493 | Input/Output: [(-63 -66 -65 -39) -66]
Test Case: 494 | Input/Output: [(30 -13 -22 -21) -22]
Test Case: 495 | Input/Output: [(-100 -36 -31 90) -100]
Test Case: 496 | Input/Output: [(74 76 86 -3) -3]
Test Case: 497 | Input/Output: [(53 -92 -12 48) -92]
Test Case: 498 | Input/Output: [(10 19 -66 -10) -66]
Test Case: 499 | Input/Output: [(-91 38 -94 -77) -94]
Test Case: 500 | Input/Output: [(-52 9 97 -95) -95]
Test Case: 501 | Input/Output: [(-23 -29 1 -19) -29]
Test Case: 502 | Input/Output: [(32 39 83 -55) -55]
Test Case: 503 | Input/Output: [(15 3 49 -95) -95]
Test Case: 504 | Input/Output: [(-85 91 0 79) -85]
Test Case: 505 | Input/Output: [(-93 -66 90 -30) -93]
Test Case: 506 | Input/Output: [(15 86 -77 86) -77]
Test Case: 507 | Input/Output: [(31 -94 24 60) -94]
Test Case: 508 | Input/Output: [(77 -76 -53 76) -76]
Test Case: 509 | Input/Output: [(43 95 -24 -26) -26]
Test Case: 510 | Input/Output: [(68 29 -60 34) -60]
Test Case: 511 | Input/Output: [(90 96 86 77) 77]
Test Case: 512 | Input/Output: [(-44 -20 80 43) -44]
Test Case: 513 | Input/Output: [(-79 -27 -52 27) -79]
Test Case: 514 | Input/Output: [(27 63 69 -7) -7]
Test Case: 515 | Input/Output: [(-26 -82 -91 13) -91]
Test Case: 516 | Input/Output: [(-32 16 -33 -56) -56]
Test Case: 517 | Input/Output: [(-92 65 39 21) -92]
Test Case: 518 | Input/Output: [(30 -41 17 -88) -88]
Test Case: 519 | Input/Output: [(-15 8 -63 -9) -63]
Test Case: 520 | Input/Output: [(-76 -97 -66 -23) -97]
Test Case: 521 | Input/Output: [(-94 95 -85 -32) -94]
Test Case: 522 | Input/Output: [(54 -84 -86 24) -86]
Test Case: 523 | Input/Output: [(-54 -96 -57 6) -96]
Test Case: 524 | Input/Output: [(79 -8 -82 -4) -82]
Test Case: 525 | Input/Output: [(-14 41 -84 -40) -84]
Test Case: 526 | Input/Output: [(-25 9 12 -50) -50]
Test Case: 527 | Input/Output: [(-7 18 14 -47) -47]
Test Case: 528 | Input/Output: [(87 -46 13 -48) -48]
Test Case: 529 | Input/Output: [(-84 -79 94 55) -84]
Test Case: 530 | Input/Output: [(71 -20 66 -9) -20]
Test Case: 531 | Input/Output: [(71 -1 -38 -17) -38]
Test Case: 532 | Input/Output: [(-56 -62 85 -56) -62]
Test Case: 533 | Input/Output: [(-21 -60 -77 -12) -77]
Test Case: 534 | Input/Output: [(52 90 -92 17) -92]
Test Case: 535 | Input/Output: [(-43 -68 10 62) -68]
Test Case: 536 | Input/Output: [(37 87 -50 -86) -86]
Test Case: 537 | Input/Output: [(-85 -17 3 -42) -85]
Test Case: 538 | Input/Output: [(-64 17 85 68) -64]
Test Case: 539 | Input/Output: [(49 4 10 -74) -74]
Test Case: 540 | Input/Output: [(73 -24 43 -75) -75]
Test Case: 541 | Input/Output: [(-65 -43 20 16) -65]
Test Case: 542 | Input/Output: [(94 -19 81 48) -19]
Test Case: 543 | Input/Output: [(24 18 -82 23) -82]
Test Case: 544 | Input/Output: [(-49 -94 36 -34) -94]
Test Case: 545 | Input/Output: [(70 14 100 -25) -25]
Test Case: 546 | Input/Output: [(-4 48 -75 -18) -75]
Test Case: 547 | Input/Output: [(63 -32 54 29) -32]
Test Case: 548 | Input/Output: [(76 51 -63 -5) -63]
Test Case: 549 | Input/Output: [(46 -99 -82 -18) -99]
Test Case: 550 | Input/Output: [(81 94 -53 -12) -53]
Test Case: 551 | Input/Output: [(-1 -96 -28 -29) -96]
Test Case: 552 | Input/Output: [(93 73 -76 41) -76]
Test Case: 553 | Input/Output: [(-48 -72 51 88) -72]
Test Case: 554 | Input/Output: [(-22 5 41 54) -22]
Test Case: 555 | Input/Output: [(-24 -79 -37 53) -79]
Test Case: 556 | Input/Output: [(36 3 23 35) 3]
Test Case: 557 | Input/Output: [(-54 43 -100 89) -100]
Test Case: 558 | Input/Output: [(-26 36 -65 33) -65]
Test Case: 559 | Input/Output: [(-44 -19 -5 -96) -96]
Test Case: 560 | Input/Output: [(-91 -28 83 -68) -91]
Test Case: 561 | Input/Output: [(47 -32 -14 78) -32]
Test Case: 562 | Input/Output: [(4 -60 40 -23) -60]
Test Case: 563 | Input/Output: [(10 57 70 -48) -48]
Test Case: 564 | Input/Output: [(-29 4 26 18) -29]
Test Case: 565 | Input/Output: [(67 90 95 13) 13]
Test Case: 566 | Input/Output: [(-54 -56 -64 -17) -64]
Test Case: 567 | Input/Output: [(-28 82 44 100) -28]
Test Case: 568 | Input/Output: [(-100 14 19 7) -100]
Test Case: 569 | Input/Output: [(-2 -9 -50 28) -50]
Test Case: 570 | Input/Output: [(50 7 -29 52) -29]
Test Case: 571 | Input/Output: [(41 -62 -10 -20) -62]
Test Case: 572 | Input/Output: [(-49 -30 -28 -92) -92]
Test Case: 573 | Input/Output: [(56 -40 -61 -52) -61]
Test Case: 574 | Input/Output: [(97 47 25 -26) -26]
Test Case: 575 | Input/Output: [(-33 -94 78 -69) -94]
Test Case: 576 | Input/Output: [(-9 -57 -47 78) -57]
Test Case: 577 | Input/Output: [(-4 -84 8 -84) -84]
Test Case: 578 | Input/Output: [(0 -17 36 -92) -92]
Test Case: 579 | Input/Output: [(99 -38 -28 48) -38]
Test Case: 580 | Input/Output: [(-14 -67 -14 99) -67]
Test Case: 581 | Input/Output: [(50 -47 24 67) -47]
Test Case: 582 | Input/Output: [(81 -60 9 17) -60]
Test Case: 583 | Input/Output: [(-14 46 67 -27) -27]
Test Case: 584 | Input/Output: [(70 45 -89 -55) -89]
Test Case: 585 | Input/Output: [(52 -6 57 22) -6]
Test Case: 586 | Input/Output: [(-52 -24 -25 -76) -76]
Test Case: 587 | Input/Output: [(-54 5 -7 7) -54]
Test Case: 588 | Input/Output: [(1 -9 -46 2) -46]
Test Case: 589 | Input/Output: [(51 95 85 -50) -50]
Test Case: 590 | Input/Output: [(-47 -22 67 73) -47]
Test Case: 591 | Input/Output: [(-7 -75 -79 54) -79]
Test Case: 592 | Input/Output: [(-9 -35 12 -99) -99]
Test Case: 593 | Input/Output: [(59 43 31 -27) -27]
Test Case: 594 | Input/Output: [(66 100 59 74) 59]
Test Case: 595 | Input/Output: [(-71 62 18 73) -71]
Test Case: 596 | Input/Output: [(7 57 52 -92) -92]
Test Case: 597 | Input/Output: [(59 8 32 -86) -86]
Test Case: 598 | Input/Output: [(54 85 16 25) 16]
Test Case: 599 | Input/Output: [(96 -66 82 44) -66]
Test Case: 600 | Input/Output: [(61 39 74 -11) -11]
Test Case: 601 | Input/Output: [(-1 -80 48 66) -80]
Test Case: 602 | Input/Output: [(-17 -14 37 -28) -28]
Test Case: 603 | Input/Output: [(-30 96 84 19) -30]
Test Case: 604 | Input/Output: [(-83 -33 -67 27) -83]
Test Case: 605 | Input/Output: [(-44 57 -72 -41) -72]
Test Case: 606 | Input/Output: [(65 -41 39 -65) -65]
Test Case: 607 | Input/Output: [(-100 63 62 -89) -100]
Test Case: 608 | Input/Output: [(-96 33 -61 -41) -96]
Test Case: 609 | Input/Output: [(-14 -35 97 26) -35]
Test Case: 610 | Input/Output: [(59 -59 34 -20) -59]
Test Case: 611 | Input/Output: [(85 -58 -61 62) -61]
Test Case: 612 | Input/Output: [(52 60 16 -94) -94]
Test Case: 613 | Input/Output: [(-48 -30 -96 97) -96]
Test Case: 614 | Input/Output: [(-41 -7 18 100) -41]
Test Case: 615 | Input/Output: [(48 58 -100 19) -100]
Test Case: 616 | Input/Output: [(55 52 -18 99) -18]
Test Case: 617 | Input/Output: [(-5 -49 -35 4) -49]
Test Case: 618 | Input/Output: [(-10 99 30 70) -10]
Test Case: 619 | Input/Output: [(-87 21 -36 48) -87]
Test Case: 620 | Input/Output: [(-47 -96 -4 15) -96]
Test Case: 621 | Input/Output: [(64 2 -1 15) -1]
Test Case: 622 | Input/Output: [(-76 34 -30 49) -76]
Test Case: 623 | Input/Output: [(-60 -55 77 7) -60]
Test Case: 624 | Input/Output: [(24 -27 78 40) -27]
Test Case: 625 | Input/Output: [(-94 -40 97 39) -94]
Test Case: 626 | Input/Output: [(-95 20 30 15) -95]
Test Case: 627 | Input/Output: [(77 -73 85 -14) -73]
Test Case: 628 | Input/Output: [(38 4 93 -16) -16]
Test Case: 629 | Input/Output: [(84 -46 -3 -82) -82]
Test Case: 630 | Input/Output: [(-69 11 35 -81) -81]
Test Case: 631 | Input/Output: [(-67 -87 98 -4) -87]
Test Case: 632 | Input/Output: [(-48 -58 98 60) -58]
Test Case: 633 | Input/Output: [(-11 73 -6 23) -11]
Test Case: 634 | Input/Output: [(-60 -14 -80 15) -80]
Test Case: 635 | Input/Output: [(-73 -23 -12 -67) -73]
Test Case: 636 | Input/Output: [(-53 84 94 93) -53]
Test Case: 637 | Input/Output: [(66 -6 -2 79) -6]
Test Case: 638 | Input/Output: [(-26 -20 71 51) -26]
Test Case: 639 | Input/Output: [(4 18 1 -96) -96]
Test Case: 640 | Input/Output: [(-89 41 32 78) -89]
Test Case: 641 | Input/Output: [(-79 83 -37 -31) -79]
Test Case: 642 | Input/Output: [(-25 -13 85 -22) -25]
Test Case: 643 | Input/Output: [(-42 -8 95 29) -42]
Test Case: 644 | Input/Output: [(99 54 -21 -65) -65]
Test Case: 645 | Input/Output: [(42 4 -98 67) -98]
Test Case: 646 | Input/Output: [(61 10 -84 -54) -84]
Test Case: 647 | Input/Output: [(28 7 -69 85) -69]
Test Case: 648 | Input/Output: [(83 -37 -42 73) -42]
Test Case: 649 | Input/Output: [(32 6 -6 17) -6]
Test Case: 650 | Input/Output: [(-1 50 -76 -93) -93]
Test Case: 651 | Input/Output: [(28 -15 13 -11) -15]
Test Case: 652 | Input/Output: [(-87 -8 63 -10) -87]
Test Case: 653 | Input/Output: [(0 -26 45 -94) -94]
Test Case: 654 | Input/Output: [(-20 -89 -36 2) -89]
Test Case: 655 | Input/Output: [(26 -2 33 -79) -79]
Test Case: 656 | Input/Output: [(71 -1 -59 54) -59]
Test Case: 657 | Input/Output: [(-6 -82 -52 69) -82]
Test Case: 658 | Input/Output: [(-79 -30 -11 -54) -79]
Test Case: 659 | Input/Output: [(-62 -25 -24 -15) -62]
Test Case: 660 | Input/Output: [(-88 74 -13 -100) -100]
Test Case: 661 | Input/Output: [(-90 -72 -74 -42) -90]
Test Case: 662 | Input/Output: [(63 -49 -51 -71) -71]
Test Case: 663 | Input/Output: [(12 56 99 4) 4]
Test Case: 664 | Input/Output: [(-40 75 57 -15) -40]
Test Case: 665 | Input/Output: [(-60 25 83 12) -60]
Test Case: 666 | Input/Output: [(-2 48 -52 38) -52]
Test Case: 667 | Input/Output: [(-13 -89 -21 91) -89]
Test Case: 668 | Input/Output: [(-96 40 -12 -80) -96]
Test Case: 669 | Input/Output: [(60 81 51 -94) -94]
Test Case: 670 | Input/Output: [(-86 -62 76 94) -86]
Test Case: 671 | Input/Output: [(16 80 8 45) 8]
Test Case: 672 | Input/Output: [(86 -83 -34 -4) -83]
Test Case: 673 | Input/Output: [(-35 -16 -80 21) -80]
Test Case: 674 | Input/Output: [(-91 10 -51 76) -91]
Test Case: 675 | Input/Output: [(26 89 -41 -42) -42]
Test Case: 676 | Input/Output: [(96 -60 15 -91) -91]
Test Case: 677 | Input/Output: [(-78 3 -12 96) -78]
Test Case: 678 | Input/Output: [(93 15 -37 -84) -84]
Test Case: 679 | Input/Output: [(19 -50 -37 -99) -99]
Test Case: 680 | Input/Output: [(11 -88 76 22) -88]
Test Case: 681 | Input/Output: [(33 21 81 18) 18]
Test Case: 682 | Input/Output: [(-15 34 -22 53) -22]
Test Case: 683 | Input/Output: [(-51 45 1 -95) -95]
Test Case: 684 | Input/Output: [(-64 3 45 24) -64]
Test Case: 685 | Input/Output: [(-72 25 17 -39) -72]
Test Case: 686 | Input/Output: [(-89 68 3 -4) -89]
Test Case: 687 | Input/Output: [(21 13 84 38) 13]
Test Case: 688 | Input/Output: [(3 6 -72 98) -72]
Test Case: 689 | Input/Output: [(-93 -45 47 -68) -93]
Test Case: 690 | Input/Output: [(-62 45 93 -85) -85]
Test Case: 691 | Input/Output: [(22 -54 71 96) -54]
Test Case: 692 | Input/Output: [(65 83 98 76) 65]
Test Case: 693 | Input/Output: [(-6 27 26 2) -6]
Test Case: 694 | Input/Output: [(-95 7 43 -29) -95]
Test Case: 695 | Input/Output: [(70 49 55 19) 19]
Test Case: 696 | Input/Output: [(-27 79 45 -13) -27]
Test Case: 697 | Input/Output: [(85 86 62 -54) -54]
Test Case: 698 | Input/Output: [(-87 -15 -39 -77) -87]
Test Case: 699 | Input/Output: [(-25 29 87 -1) -25]
Test Case: 700 | Input/Output: [(36 12 64 74) 12]
Test Case: 701 | Input/Output: [(-82 -52 -73 -31) -82]
Test Case: 702 | Input/Output: [(-60 52 92 -20) -60]
Test Case: 703 | Input/Output: [(45 0 -42 28) -42]
Test Case: 704 | Input/Output: [(-72 -34 -79 29) -79]
Test Case: 705 | Input/Output: [(-64 -84 54 48) -84]
Test Case: 706 | Input/Output: [(62 -80 -82 54) -82]
Test Case: 707 | Input/Output: [(5 -65 35 43) -65]
Test Case: 708 | Input/Output: [(-10 -66 67 57) -66]
Test Case: 709 | Input/Output: [(-94 28 -56 66) -94]
Test Case: 710 | Input/Output: [(52 77 -4 -19) -19]
Test Case: 711 | Input/Output: [(-42 -51 -71 22) -71]
Test Case: 712 | Input/Output: [(41 35 18 16) 16]
Test Case: 713 | Input/Output: [(-56 -59 8 -3) -59]
Test Case: 714 | Input/Output: [(30 -82 -47 -48) -82]
Test Case: 715 | Input/Output: [(-95 -77 -51 -71) -95]
Test Case: 716 | Input/Output: [(-64 -2 31 95) -64]
Test Case: 717 | Input/Output: [(90 -37 3 28) -37]
Test Case: 718 | Input/Output: [(64 58 88 45) 45]
Test Case: 719 | Input/Output: [(100 71 4 82) 4]
Test Case: 720 | Input/Output: [(71 -14 54 -31) -31]
Test Case: 721 | Input/Output: [(8 75 -97 38) -97]
Test Case: 722 | Input/Output: [(53 13 85 27) 13]
Test Case: 723 | Input/Output: [(95 95 8 -11) -11]
Test Case: 724 | Input/Output: [(57 13 -9 81) -9]
Test Case: 725 | Input/Output: [(15 -62 -8 55) -62]
Test Case: 726 | Input/Output: [(17 28 0 31) 0]
Test Case: 727 | Input/Output: [(3 59 -55 34) -55]
Test Case: 728 | Input/Output: [(18 74 -40 47) -40]
Test Case: 729 | Input/Output: [(-79 -37 -55 43) -79]
Test Case: 730 | Input/Output: [(-97 70 55 -33) -97]
Test Case: 731 | Input/Output: [(96 12 -57 -37) -57]
Test Case: 732 | Input/Output: [(-44 -80 -93 83) -93]
Test Case: 733 | Input/Output: [(-14 18 -62 -46) -62]
Test Case: 734 | Input/Output: [(9 -59 67 12) -59]
Test Case: 735 | Input/Output: [(-13 -28 19 80) -28]
Test Case: 736 | Input/Output: [(-20 -28 -3 -24) -28]
Test Case: 737 | Input/Output: [(-78 -30 98 -48) -78]
Test Case: 738 | Input/Output: [(-97 -97 80 -67) -97]
Test Case: 739 | Input/Output: [(-7 66 38 -91) -91]
Test Case: 740 | Input/Output: [(-27 -74 54 -56) -74]
Test Case: 741 | Input/Output: [(36 0 18 37) 0]
Test Case: 742 | Input/Output: [(17 -72 -66 62) -72]
Test Case: 743 | Input/Output: [(41 -61 -2 48) -61]
Test Case: 744 | Input/Output: [(7 -74 7 -13) -74]
Test Case: 745 | Input/Output: [(13 1 -90 19) -90]
Test Case: 746 | Input/Output: [(-53 -60 94 99) -60]
Test Case: 747 | Input/Output: [(-53 68 -7 -39) -53]
Test Case: 748 | Input/Output: [(61 61 73 79) 61]
Test Case: 749 | Input/Output: [(-29 26 69 -40) -40]
Test Case: 750 | Input/Output: [(-94 -48 -85 30) -94]
Test Case: 751 | Input/Output: [(-63 -11 -55 72) -63]
Test Case: 752 | Input/Output: [(-13 -81 -11 47) -81]
Test Case: 753 | Input/Output: [(-73 -97 -70 84) -97]
Test Case: 754 | Input/Output: [(18 -91 15 17) -91]
Test Case: 755 | Input/Output: [(-11 -35 97 -46) -46]
Test Case: 756 | Input/Output: [(42 64 82 -9) -9]
Test Case: 757 | Input/Output: [(88 -54 93 22) -54]
Test Case: 758 | Input/Output: [(-70 66 9 45) -70]
Test Case: 759 | Input/Output: [(-8 -98 76 -2) -98]
Test Case: 760 | Input/Output: [(-73 57 81 92) -73]
Test Case: 761 | Input/Output: [(1 69 -53 -53) -53]
Test Case: 762 | Input/Output: [(69 12 80 -3) -3]
Test Case: 763 | Input/Output: [(46 13 -67 17) -67]
Test Case: 764 | Input/Output: [(31 1 -69 85) -69]
Test Case: 765 | Input/Output: [(-37 -30 -53 -16) -53]
Test Case: 766 | Input/Output: [(37 48 74 -25) -25]
Test Case: 767 | Input/Output: [(-75 44 -92 -28) -92]
Test Case: 768 | Input/Output: [(11 -17 53 -65) -65]
Test Case: 769 | Input/Output: [(8 -18 71 69) -18]
Test Case: 770 | Input/Output: [(-4 13 -36 46) -36]
Test Case: 771 | Input/Output: [(59 53 -4 -64) -64]
Test Case: 772 | Input/Output: [(98 -99 71 69) -99]
Test Case: 773 | Input/Output: [(88 49 -26 67) -26]
Test Case: 774 | Input/Output: [(-41 98 21 -75) -75]
Test Case: 775 | Input/Output: [(-33 12 -62 74) -62]
Test Case: 776 | Input/Output: [(-80 -28 -35 -73) -80]
Test Case: 777 | Input/Output: [(29 -89 83 -12) -89]
Test Case: 778 | Input/Output: [(-49 73 -26 -68) -68]
Test Case: 779 | Input/Output: [(-28 -62 -41 51) -62]
Test Case: 780 | Input/Output: [(-77 96 -92 -20) -92]
Test Case: 781 | Input/Output: [(90 92 63 -44) -44]
Test Case: 782 | Input/Output: [(-14 48 36 19) -14]
Test Case: 783 | Input/Output: [(-32 94 -24 -19) -32]
Test Case: 784 | Input/Output: [(50 15 -9 -80) -80]
Test Case: 785 | Input/Output: [(-87 63 2 -90) -90]
Test Case: 786 | Input/Output: [(21 -14 85 56) -14]
Test Case: 787 | Input/Output: [(-41 50 1 59) -41]
Test Case: 788 | Input/Output: [(-50 -95 -82 -8) -95]
Test Case: 789 | Input/Output: [(90 32 66 58) 32]
Test Case: 790 | Input/Output: [(-17 34 -57 41) -57]
Test Case: 791 | Input/Output: [(74 65 -18 -25) -25]
Test Case: 792 | Input/Output: [(-60 8 88 -72) -72]
Test Case: 793 | Input/Output: [(-35 26 -29 29) -35]
Test Case: 794 | Input/Output: [(-67 -16 -65 39) -67]
Test Case: 795 | Input/Output: [(54 91 -90 92) -90]
Test Case: 796 | Input/Output: [(34 90 76 -72) -72]
Test Case: 797 | Input/Output: [(5 -76 83 66) -76]
Test Case: 798 | Input/Output: [(-39 6 -53 -39) -53]
Test Case: 799 | Input/Output: [(53 -64 90 -85) -85]
Test Case: 800 | Input/Output: [(2 -20 18 -6) -20]
Test Case: 801 | Input/Output: [(-90 6 -62 12) -90]
Test Case: 802 | Input/Output: [(40 -72 -73 46) -73]
Test Case: 803 | Input/Output: [(17 -68 -36 60) -68]
Test Case: 804 | Input/Output: [(-63 -11 -78 -67) -78]
Test Case: 805 | Input/Output: [(-47 59 62 39) -47]
Test Case: 806 | Input/Output: [(56 -28 32 6) -28]
Test Case: 807 | Input/Output: [(-94 1 71 51) -94]
Test Case: 808 | Input/Output: [(16 20 57 -62) -62]
Test Case: 809 | Input/Output: [(-65 -78 -34 -8) -78]
Test Case: 810 | Input/Output: [(35 -42 66 -7) -42]
Test Case: 811 | Input/Output: [(-85 53 -62 73) -85]
Test Case: 812 | Input/Output: [(47 -47 -42 -18) -47]
Test Case: 813 | Input/Output: [(-44 52 69 42) -44]
Test Case: 814 | Input/Output: [(77 15 -96 43) -96]
Test Case: 815 | Input/Output: [(-37 4 -31 -34) -37]
Test Case: 816 | Input/Output: [(6 -44 20 -76) -76]
Test Case: 817 | Input/Output: [(70 71 43 -58) -58]
Test Case: 818 | Input/Output: [(79 70 -56 89) -56]
Test Case: 819 | Input/Output: [(-81 -11 -45 96) -81]
Test Case: 820 | Input/Output: [(-14 -79 24 87) -79]
Test Case: 821 | Input/Output: [(-58 -72 -33 -25) -72]
Test Case: 822 | Input/Output: [(-20 88 20 16) -20]
Test Case: 823 | Input/Output: [(-88 63 26 38) -88]
Test Case: 824 | Input/Output: [(25 79 75 -25) -25]
Test Case: 825 | Input/Output: [(56 -90 13 -77) -90]
Test Case: 826 | Input/Output: [(-26 -79 -77 -28) -79]
Test Case: 827 | Input/Output: [(-83 17 -49 25) -83]
Test Case: 828 | Input/Output: [(93 -32 81 17) -32]
Test Case: 829 | Input/Output: [(-17 -25 66 -37) -37]
Test Case: 830 | Input/Output: [(46 -62 97 -92) -92]
Test Case: 831 | Input/Output: [(-3 49 -34 -54) -54]
Test Case: 832 | Input/Output: [(23 23 -69 83) -69]
Test Case: 833 | Input/Output: [(17 7 -46 -81) -81]
Test Case: 834 | Input/Output: [(-97 60 62 -80) -97]
Test Case: 835 | Input/Output: [(-81 26 70 67) -81]
Test Case: 836 | Input/Output: [(-92 39 5 46) -92]
Test Case: 837 | Input/Output: [(3 1 -52 84) -52]
Test Case: 838 | Input/Output: [(46 49 -76 -53) -76]
Test Case: 839 | Input/Output: [(57 84 -10 -61) -61]
Test Case: 840 | Input/Output: [(-39 -86 -95 12) -95]
Test Case: 841 | Input/Output: [(-27 -48 67 62) -48]
Test Case: 842 | Input/Output: [(-62 -18 3 -68) -68]
Test Case: 843 | Input/Output: [(-24 49 37 23) -24]
Test Case: 844 | Input/Output: [(90 -69 -66 80) -69]
Test Case: 845 | Input/Output: [(58 -30 -53 -27) -53]
Test Case: 846 | Input/Output: [(68 13 -15 -69) -69]
Test Case: 847 | Input/Output: [(-97 37 -41 -62) -97]
Test Case: 848 | Input/Output: [(26 41 -15 83) -15]
Test Case: 849 | Input/Output: [(-95 16 -24 -32) -95]
Test Case: 850 | Input/Output: [(-14 9 74 44) -14]
Test Case: 851 | Input/Output: [(-65 -89 29 41) -89]
Test Case: 852 | Input/Output: [(-54 3 80 -6) -54]
Test Case: 853 | Input/Output: [(42 92 -30 -4) -30]
Test Case: 854 | Input/Output: [(-85 -79 90 87) -85]
Test Case: 855 | Input/Output: [(-37 -37 -73 -60) -73]
Test Case: 856 | Input/Output: [(100 -53 26 -73) -73]
Test Case: 857 | Input/Output: [(-95 -84 54 -46) -95]
Test Case: 858 | Input/Output: [(84 62 85 78) 62]
Test Case: 859 | Input/Output: [(-91 60 80 -39) -91]
Test Case: 860 | Input/Output: [(-93 50 -36 83) -93]
Test Case: 861 | Input/Output: [(-42 -32 -31 20) -42]
Test Case: 862 | Input/Output: [(-55 63 -90 -58) -90]
Test Case: 863 | Input/Output: [(23 90 10 -45) -45]
Test Case: 864 | Input/Output: [(-7 37 -90 12) -90]
Test Case: 865 | Input/Output: [(-38 43 -43 -2) -43]
Test Case: 866 | Input/Output: [(71 56 -70 91) -70]
Test Case: 867 | Input/Output: [(14 -92 -86 21) -92]
Test Case: 868 | Input/Output: [(21 26 32 -3) -3]
Test Case: 869 | Input/Output: [(-51 -55 55 -92) -92]
Test Case: 870 | Input/Output: [(-71 -6 -84 8) -84]
Test Case: 871 | Input/Output: [(73 35 79 -16) -16]
Test Case: 872 | Input/Output: [(54 -48 13 -40) -48]
Test Case: 873 | Input/Output: [(-69 -31 69 29) -69]
Test Case: 874 | Input/Output: [(44 46 22 -42) -42]
Test Case: 875 | Input/Output: [(77 96 58 46) 46]
Test Case: 876 | Input/Output: [(-42 -15 -22 54) -42]
Test Case: 877 | Input/Output: [(-12 27 77 87) -12]
Test Case: 878 | Input/Output: [(-62 -93 67 44) -93]
Test Case: 879 | Input/Output: [(-64 66 34 39) -64]
Test Case: 880 | Input/Output: [(53 11 73 81) 11]
Test Case: 881 | Input/Output: [(97 63 -22 -65) -65]
Test Case: 882 | Input/Output: [(-43 92 -5 -67) -67]
Test Case: 883 | Input/Output: [(-26 27 96 33) -26]
Test Case: 884 | Input/Output: [(32 88 -62 64) -62]
Test Case: 885 | Input/Output: [(11 -50 97 -82) -82]
Test Case: 886 | Input/Output: [(-28 91 -18 61) -28]
Test Case: 887 | Input/Output: [(88 26 -3 15) -3]
Test Case: 888 | Input/Output: [(-47 -15 -33 -49) -49]
Test Case: 889 | Input/Output: [(11 -4 69 -22) -22]
Test Case: 890 | Input/Output: [(31 36 -88 -35) -88]
Test Case: 891 | Input/Output: [(94 22 -72 87) -72]
Test Case: 892 | Input/Output: [(90 -8 -55 17) -55]
Test Case: 893 | Input/Output: [(68 13 -44 -29) -44]
Test Case: 894 | Input/Output: [(-78 66 4 -49) -78]
Test Case: 895 | Input/Output: [(41 -38 -65 -85) -85]
Test Case: 896 | Input/Output: [(47 -89 33 -78) -89]
Test Case: 897 | Input/Output: [(30 98 -39 37) -39]
Test Case: 898 | Input/Output: [(83 -43 -72 -20) -72]
Test Case: 899 | Input/Output: [(14 61 -74 -56) -74]
Test Case: 900 | Input/Output: [(53 -11 -5 -87) -87]
Test Case: 901 | Input/Output: [(-56 -18 -81 -63) -81]
Test Case: 902 | Input/Output: [(-2 -4 -70 -1) -70]
Test Case: 903 | Input/Output: [(-6 -70 7 -68) -70]
Test Case: 904 | Input/Output: [(-38 -41 -82 13) -82]
Test Case: 905 | Input/Output: [(88 5 -98 13) -98]
Test Case: 906 | Input/Output: [(22 51 5 76) 5]
Test Case: 907 | Input/Output: [(95 -78 -49 -70) -78]
Test Case: 908 | Input/Output: [(35 -14 19 57) -14]
Test Case: 909 | Input/Output: [(0 -7 11 -53) -53]
Test Case: 910 | Input/Output: [(-64 18 -92 -7) -92]
Test Case: 911 | Input/Output: [(46 79 65 96) 46]
Test Case: 912 | Input/Output: [(13 66 48 51) 13]
Test Case: 913 | Input/Output: [(-98 36 -54 71) -98]
Test Case: 914 | Input/Output: [(87 65 -82 7) -82]
Test Case: 915 | Input/Output: [(-14 49 27 -59) -59]
Test Case: 916 | Input/Output: [(96 58 -24 85) -24]
Test Case: 917 | Input/Output: [(73 44 63 -89) -89]
Test Case: 918 | Input/Output: [(-37 77 -73 -60) -73]
Test Case: 919 | Input/Output: [(62 0 63 -37) -37]
Test Case: 920 | Input/Output: [(-10 7 -22 -2) -22]
Test Case: 921 | Input/Output: [(10 -64 56 -99) -99]
Test Case: 922 | Input/Output: [(-60 71 -49 -59) -60]
Test Case: 923 | Input/Output: [(19 -3 1 41) -3]
Test Case: 924 | Input/Output: [(43 20 68 29) 20]
Test Case: 925 | Input/Output: [(5 1 53 -33) -33]
Test Case: 926 | Input/Output: [(-83 64 68 70) -83]
Test Case: 927 | Input/Output: [(51 62 63 37) 37]
Test Case: 928 | Input/Output: [(-7 24 81 8) -7]
Test Case: 929 | Input/Output: [(-69 4 -56 -78) -78]
Test Case: 930 | Input/Output: [(-75 -77 -12 44) -77]
Test Case: 931 | Input/Output: [(-95 67 34 34) -95]
Test Case: 932 | Input/Output: [(-70 -54 -22 63) -70]
Test Case: 933 | Input/Output: [(47 -63 -51 24) -63]
Test Case: 934 | Input/Output: [(56 22 46 57) 22]
Test Case: 935 | Input/Output: [(-17 -46 20 -42) -46]
Test Case: 936 | Input/Output: [(-17 -9 93 52) -17]
Test Case: 937 | Input/Output: [(18 17 -33 49) -33]
Test Case: 938 | Input/Output: [(-66 -85 -38 16) -85]
Test Case: 939 | Input/Output: [(-78 -23 78 -86) -86]
Test Case: 940 | Input/Output: [(64 45 29 -20) -20]
Test Case: 941 | Input/Output: [(-89 78 83 -63) -89]
Test Case: 942 | Input/Output: [(3 71 -87 -47) -87]
Test Case: 943 | Input/Output: [(26 68 67 -79) -79]
Test Case: 944 | Input/Output: [(-81 59 82 17) -81]
Test Case: 945 | Input/Output: [(79 67 -96 38) -96]
Test Case: 946 | Input/Output: [(-96 -68 22 -79) -96]
Test Case: 947 | Input/Output: [(-33 -14 65 36) -33]
Test Case: 948 | Input/Output: [(-45 -48 93 99) -48]
Test Case: 949 | Input/Output: [(28 29 -52 93) -52]
Test Case: 950 | Input/Output: [(-18 6 -69 3) -69]
Test Case: 951 | Input/Output: [(-15 -97 79 -73) -97]
Test Case: 952 | Input/Output: [(47 -8 70 70) -8]
Test Case: 953 | Input/Output: [(-4 61 -21 37) -21]
Test Case: 954 | Input/Output: [(-34 -28 31 -53) -53]
Test Case: 955 | Input/Output: [(-61 75 -60 -50) -61]
Test Case: 956 | Input/Output: [(87 67 -98 67) -98]
Test Case: 957 | Input/Output: [(-25 -35 -58 -14) -58]
Test Case: 958 | Input/Output: [(74 81 -98 10) -98]
Test Case: 959 | Input/Output: [(53 96 -53 -44) -53]
Test Case: 960 | Input/Output: [(61 -43 34 63) -43]
Test Case: 961 | Input/Output: [(12 52 87 -12) -12]
Test Case: 962 | Input/Output: [(65 30 -42 85) -42]
Test Case: 963 | Input/Output: [(97 -85 -37 50) -85]
Test Case: 964 | Input/Output: [(70 -16 96 -8) -16]
Test Case: 965 | Input/Output: [(-18 -28 3 -2) -28]
Test Case: 966 | Input/Output: [(-53 28 -32 6) -53]
Test Case: 967 | Input/Output: [(-95 -1 -94 -97) -97]
Test Case: 968 | Input/Output: [(-31 -36 -78 58) -78]
Test Case: 969 | Input/Output: [(4 -51 -52 20) -52]
Test Case: 970 | Input/Output: [(37 39 -88 4) -88]
Test Case: 971 | Input/Output: [(5 -78 31 -58) -78]
Test Case: 972 | Input/Output: [(-61 -43 -2 56) -61]
Test Case: 973 | Input/Output: [(100 78 -38 -22) -38]
Test Case: 974 | Input/Output: [(-87 23 14 -87) -87]
Test Case: 975 | Input/Output: [(-41 -55 97 55) -55]
Test Case: 976 | Input/Output: [(-10 22 -42 -50) -50]
Test Case: 977 | Input/Output: [(-97 -27 11 65) -97]
Test Case: 978 | Input/Output: [(-76 -98 -99 -24) -99]
Test Case: 979 | Input/Output: [(-5 97 -31 -11) -31]
Test Case: 980 | Input/Output: [(0 37 -65 -64) -65]
Test Case: 981 | Input/Output: [(-3 -96 65 -41) -96]
Test Case: 982 | Input/Output: [(45 -23 3 -87) -87]
Test Case: 983 | Input/Output: [(13 -83 52 70) -83]
Test Case: 984 | Input/Output: [(-3 -28 1 -45) -45]
Test Case: 985 | Input/Output: [(-42 38 -23 57) -42]
Test Case: 986 | Input/Output: [(15 12 -8 74) -8]
Test Case: 987 | Input/Output: [(-71 80 -11 -95) -95]
Test Case: 988 | Input/Output: [(1 78 31 -49) -49]
Test Case: 989 | Input/Output: [(84 -73 41 45) -73]
Test Case: 990 | Input/Output: [(8 81 83 -37) -37]
Test Case: 991 | Input/Output: [(6 24 -5 38) -5]
Test Case: 992 | Input/Output: [(91 40 -43 -64) -64]
Test Case: 993 | Input/Output: [(65 -28 -62 25) -62]
Test Case: 994 | Input/Output: [(41 -2 58 -73) -73]
Test Case: 995 | Input/Output: [(-56 58 6 -1) -56]
Test Case: 996 | Input/Output: [(57 18 -33 18) -33]
Test Case: 997 | Input/Output: [(64 21 -39 -45) -45]
Test Case: 998 | Input/Output: [(0 91 -16 -95) -95]
Test Case: 999 | Input/Output: [(-77 54 -38 -81) -81]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = -36 -36 -49 100 -127 17 52 116 17 125 -17 -20 -89 -111 14 1
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-47 19 -47 -47] -47] [[-7 -7 -7 23] -7] [[35 -31 35 35] -31] [[48 -49 -49 -49] -49] [[95 95 95 -43] -43] [[-97 -97 -83 -97] -97] [[-28 -28 -28 80] -28] [[-93 -93 93 -93] -93] [[-63 -63 -63 -37] -63] [[87 6 6 6] 6] [(-44 -44 -44 -44) -44] [(21 21 21 21) 21] [(82 82 82 82) 82] [(-81 -81 -81 -81) -81] [(85 85 85 85) 85] [(95 51 96 71) 51] [(89 31 13 34) 13] [(44 10 10 80) 10] [(52 8 82 37) 8] [(80 51 74 57) 51] [(17 16 11 5) 5] [(36 87 32 4) 4] [(92 83 5 55) 5] [(63 34 89 13) 13] [(1 81 21 98) 1] [(24 76 31 96) 24] [(34 7 66 62) 7] [(24 51 63 54) 24] [(48 51 5 22) 5] [(21 82 38 93) 21] [(96 50 23 49) 23] [(67 11 2 1) 1] [(66 49 15 45) 15] [(69 13 60 0) 0] [(78 100 27 32) 27] [(91 5 -64 31) -64] [(-31 -3 -91 -15) -91] [(53 -58 -94 32) -94] [(31 61 -84 79) -84] [(-22 6 -23 76) -23] [(-36 -41 40 -57) -57] [(-30 -27 43 6) -30] [(-18 -88 -27 28) -88] [(11 -98 -45 60) -98] [(29 -100 -94 -82) -100] [(59 14 -14 94) -14] [(-49 92 -37 43) -49] [(-49 50 8 75) -49] [(0 36 90 10) 0] [(-52 17 -22 85) -52] [(-84 -87 -3 10) -87] [(-31 50 -4 -81) -81] [(-79 14 -37 7) -79] [(37 -67 -65 29) -67] [(50 -70 18 -16) -70] [(-68 53 37 -1) -68] [(-4 98 -9 -52) -52] [(13 -2 -52 0) -52] [(72 2 10 -16) -16] [(-23 -49 -46 35) -49] [(15 -79 1 5) -79] [(42 -31 -45 -69) -69] [(-77 -22 -37 74) -77] [(70 -82 46 0) -82] [(27 21 13 -53) -53] [(-96 87 48 -42) -96] [(-23 -1 -82 83) -82] [(-47 59 18 -10) -47] [(85 -87 45 -98) -98] [(59 -36 -4 41) -36] [(-14 96 -44 -5) -44] [(95 22 84 -59) -59] [(-46 33 -67 94) -67] [(-9 100 -15 -88) -88] [(-90 0 -44 92) -90] [(-40 3 -25 21) -40] [(0 -95 17 44) -95] [(-66 -12 10 -82) -82] [(-7 11 -52 -67) -67] [(72 -63 15 -22) -63] [(-37 -10 12 -49) -49] [(-81 -99 56 -100) -100] [(-54 -16 66 62) -54] [(23 -56 49 -39) -56] [(15 -43 90 -47) -47] [(-3 51 -64 20) -64] [(-97 7 -59 82) -97] [(-48 -48 92 -99) -99] [(-74 54 52 7) -74] [(20 11 -58 -29) -58] [(-24 -41 -18 -44) -44] [(-33 83 71 64) -33] [(-87 44 7 77) -87] [(-47 -100 -11 67) -100] [(-72 14 -3 69) -72])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: 19                 
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 31                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 16                 
Correct output: 4                   | Program output: 87                 
Correct output: 5                   | Program output: 83                 
Correct output: 13                  | Program output: 34                 
Correct output: 1                   | Program output: 81                 
Correct output: 24                  | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 51                 
Correct output: 5                   | Program output: 51                 
Correct output: 21                  | Program output: 82                 
Correct output: 23                  | Program output: 50                 
Correct output: 1                   | Program output: 11                 
Correct output: 15                  | Program output: 49                 
Correct output: 0                   | Program output: 13                 
Correct output: 27                  | Program output: 100                
Correct output: -64                 | Program output: 5                  
Correct output: -91                 | Program output: -3                 
Correct output: -94                 | Program output: -58                
Correct output: -84                 | Program output: 61                 
Correct output: -23                 | Program output: 6                  
Correct output: -57                 | Program output: -41                
Correct output: -30                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: 14                 
Correct output: -49                 | Program output: 92                 
Correct output: -49                 | Program output: 50                 
Correct output: 0                   | Program output: 36                 
Correct output: -52                 | Program output: 17                 
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: 50                 
Correct output: -79                 | Program output: 14                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: 53                 
Correct output: -52                 | Program output: 98                 
Correct output: -52                 | Program output: -2                 
Correct output: -16                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -31                
Correct output: -77                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: 21                 
Correct output: -96                 | Program output: 87                 
Correct output: -82                 | Program output: -1                 
Correct output: -47                 | Program output: 59                 
Correct output: -98                 | Program output: -87                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: 96                 
Correct output: -59                 | Program output: 22                 
Correct output: -67                 | Program output: 33                 
Correct output: -88                 | Program output: 100                
Correct output: -90                 | Program output: 0                  
Correct output: -40                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -12                
Correct output: -67                 | Program output: 11                 
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -99                
Correct output: -54                 | Program output: -16                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -43                
Correct output: -64                 | Program output: 51                 
Correct output: -97                 | Program output: 7                  
Correct output: -99                 | Program output: -48                
Correct output: -74                 | Program output: 54                 
Correct output: -58                 | Program output: 11                 
Correct output: -44                 | Program output: -41                
Correct output: -33                 | Program output: 83                 
Correct output: -87                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_262} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_empty} {:close 2, :instruction tag_boolean_480} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction in3} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (in2 boolean_flush tag_exec_262 (integer_mod) exec_eq boolean_xor exec_s (in2 exec_stackdepth integer_lt boolean_invert_second_then_and boolean_and boolean_eq exec_do*times () exec_stackdepth) (integer_yank boolean_rot in2 print_integer boolean_flush exec_while (integer_rot) exec_empty) (tag_boolean_480) exec_rot (exec_yank integer_sub exec_noop in3 exec_yankdup boolean_not boolean_or exec_pop (boolean_xor) exec_dup_items exec_y () exec_yankdup integer_swap) (exec_do*times (integer_rot integer_stackdepth integer_sub in3) boolean_frominteger) () boolean_invert_first_then_and)
Lexicase best errors: [0 0 1 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 58
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_262} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_empty} {:close 2, :instruction tag_boolean_480} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction in3} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (in2 boolean_flush tag_exec_262 (integer_mod) exec_eq boolean_xor exec_s (in2 exec_stackdepth integer_lt boolean_invert_second_then_and boolean_and boolean_eq exec_do*times () exec_stackdepth) (integer_yank boolean_rot in2 print_integer boolean_flush exec_while (integer_rot) exec_empty) (tag_boolean_480) exec_rot (exec_yank integer_sub exec_noop in3 exec_yankdup boolean_not boolean_or exec_pop (boolean_xor) exec_dup_items exec_y () exec_yankdup integer_swap) (exec_do*times (integer_rot integer_stackdepth integer_sub in3) boolean_frominteger) () boolean_invert_first_then_and)
Zero cases best errors: [0 0 1 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 58
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 9 3 3 11 3 1 1 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 3 9 3 3 11 3 1 1 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_970} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 2, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tag_boolean_35} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction -23} {:close 2, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 56} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (boolean_xor print_integer boolean_rot integer_inc integer_yank exec_yankdup exec_while () boolean_and boolean_dup_times integer_dec boolean_dup_times integer_div integer_div in1 tag_boolean_970 in2 boolean_yank print_integer integer_dup exec_yankdup tag_boolean_35 integer_pop in1 integer_flush integer_gte exec_do*range (boolean_pop integer_shove exec_y () boolean_rot exec_do*count () exec_s () () (boolean_eq integer_dup -23 exec_when ()) exec_shove (integer_max boolean_not exec_shove (integer_fromboolean 56 exec_do*times (integer_shove exec_k () (integer_eq) integer_swap exec_k_when_autoconstructing () ())))))
Errors: [0 0 1 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 64
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 9.96
Median total errors in population: 10
Error averages by case: (0.997 0.997 0.991 0.997 0.997 0.989 0.997 0.999 0.999 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.708
Average program size in population (points): 69.897
Average percent parens in population: 0.283
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 491559
--- Timings ---
Current time: 1559314311037 milliseconds
Total Time:           2.9 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.8 seconds, 27.0%
Fitness Testing:      2.0 seconds, 69.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -83                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: 93                 
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 96                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 82                 
Correct output: 51                  | Program output: 74                 
Correct output: 5                   | Program output: 11                 
Correct output: 4                   | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 89                 
Correct output: 1                   | Program output: 21                 
Correct output: 24                  | Program output: 31                 
Correct output: 7                   | Program output: 66                 
Correct output: 24                  | Program output: 63                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 38                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 60                 
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: 40                 
Correct output: -30                 | Program output: 43                 
Correct output: -88                 | Program output: -27                
Correct output: -98                 | Program output: -45                
Correct output: -100                | Program output: -94                
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -37                
Correct output: -49                 | Program output: 8                  
Correct output: 0                   | Program output: 90                 
Correct output: -52                 | Program output: -22                
Correct output: -87                 | Program output: -3                 
Correct output: -81                 | Program output: -4                 
Correct output: -79                 | Program output: -37                
Correct output: -67                 | Program output: -65                
Correct output: -70                 | Program output: 18                 
Correct output: -68                 | Program output: 37                 
Correct output: -52                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: 10                 
Correct output: -49                 | Program output: -46                
Correct output: -79                 | Program output: 1                  
Correct output: -69                 | Program output: -45                
Correct output: -77                 | Program output: -37                
Correct output: -82                 | Program output: 46                 
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 48                 
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: 18                 
Correct output: -98                 | Program output: 45                 
Correct output: -36                 | Program output: -4                 
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: 84                 
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -15                
Correct output: -90                 | Program output: -44                
Correct output: -40                 | Program output: -25                
Correct output: -95                 | Program output: 17                 
Correct output: -82                 | Program output: 10                 
Correct output: -67                 | Program output: -52                
Correct output: -63                 | Program output: 15                 
Correct output: -49                 | Program output: 12                 
Correct output: -100                | Program output: 56                 
Correct output: -54                 | Program output: 66                 
Correct output: -56                 | Program output: 49                 
Correct output: -47                 | Program output: 90                 
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -59                
Correct output: -99                 | Program output: 92                 
Correct output: -74                 | Program output: 52                 
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -18                
Correct output: -33                 | Program output: 71                 
Correct output: -87                 | Program output: 7                  
Correct output: -100                | Program output: -11                
Correct output: -72                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dec} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_311} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_do*times (boolean_invert_second_then_and exec_shove (boolean_dup_times exec_do*range (integer_rot boolean_rot boolean_frominteger) boolean_eq) boolean_rot) boolean_rot boolean_stackdepth integer_lte in4 print_integer integer_dec in4 boolean_dup_items integer_yankdup boolean_frominteger integer_shove in1 exec_flush in2 exec_flush boolean_dup_times print_boolean exec_swap (integer_dup tag_boolean_466 exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_empty) () print_boolean exec_y () boolean_frominteger integer_add exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean integer_max exec_do*range () exec_do*times (integer_lte boolean_or exec_k (integer_dup) (tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) ())))
Lexicase best errors: [0 1 1 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 73
Percent parens: 0.178
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dec} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_311} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_do*times (boolean_invert_second_then_and exec_shove (boolean_dup_times exec_do*range (integer_rot boolean_rot boolean_frominteger) boolean_eq) boolean_rot) boolean_rot boolean_stackdepth integer_lte in4 print_integer integer_dec in4 boolean_dup_items integer_yankdup boolean_frominteger integer_shove in1 exec_flush in2 exec_flush boolean_dup_times print_boolean exec_swap (integer_dup tag_boolean_466 exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_empty) () print_boolean exec_y () boolean_frominteger integer_add exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean integer_max exec_do*range () exec_do*times (integer_lte boolean_or exec_k (integer_dup) (tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) ())))
Zero cases best errors: [0 1 1 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 73
Percent parens: 0.178
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 389 616 109 283 109 283 117 284 108)
Population mean number of elite cases: 2.58
Count of perfect (error zero) individuals by case: (283 389 616 109 283 109 283 117 284 108)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction 28} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction -57} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction -65} {:close 2, :instruction tagged_126} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction 59} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction in2})
Best program: (exec_do*times (boolean_invert_second_then_and exec_shove (boolean_dup_times exec_do*range (integer_rot boolean_or integer_rot in1 integer_rot exec_while (integer_sub boolean_swap integer_stackdepth exec_dup_items exec_noop integer_yankdup in3 exec_yank exec_do*while (exec_when (boolean_and exec_s_when_autoconstructing () (exec_yank exec_yank) (boolean_invert_first_then_and boolean_shove boolean_eq) in3 exec_pop (exec_yankdup boolean_xor boolean_yankdup integer_gte) 28) boolean_dup_times integer_gt) print_integer integer_lt exec_do*range () integer_gt print_exec (exec_s_when_autoconstructing () (exec_y_when_autoconstructing (boolean_empty)) (integer_pop) -57 integer_lt integer_rot boolean_invert_first_then_and -65) tagged_126)) integer_yank) exec_eq in3) integer_rot exec_k () () exec_shove (boolean_dup_times in3 exec_y_when_autoconstructing (integer_shove exec_s_when_autoconstructing () (print_integer boolean_empty 59 exec_while (boolean_dup) integer_fromboolean integer_swap boolean_swap integer_empty exec_when (integer_dup_times boolean_swap integer_max boolean_pop) boolean_rot integer_yank integer_mod) (boolean_not integer_rot exec_s (in3 boolean_dup_items integer_eq exec_dup_times (boolean_frominteger integer_mult) integer_sub integer_max in2 in2) () ()))))
Errors: [1 1 0 0 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 93
Size: 123
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 7.419
Median total errors in population: 8
Error averages by case: (0.717 0.611 0.384 0.891 0.717 0.891 0.717 0.883 0.716 0.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.283
Average program size in population (points): 71.115
Average percent parens in population: 0.218
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.501
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 124
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1021919
--- Timings ---
Current time: 1559314313816 milliseconds
Total Time:           6.0 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.5 seconds, 40.8%
Fitness Testing:      2.8 seconds, 45.7%
Report:               0.7 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 52                 
Correct output: 51                  | Program output: 74                 
Correct output: 5                   | Program output: 11                 
Correct output: 4                   | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 34                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 60                 
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -36                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -27                
Correct output: -98                 | Program output: -45                
Correct output: -100                | Program output: -94                
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -84                
Correct output: -81                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: -65                
Correct output: -70                 | Program output: 18                 
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: 10                 
Correct output: -49                 | Program output: -46                
Correct output: -79                 | Program output: 1                  
Correct output: -69                 | Program output: -45                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 46                 
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: 45                 
Correct output: -36                 | Program output: -4                 
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: 84                 
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: 0                  
Correct output: -82                 | Program output: -66                
Correct output: -67                 | Program output: -52                
Correct output: -63                 | Program output: 15                 
Correct output: -49                 | Program output: -37                
Correct output: -100                | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: 23                 
Correct output: -47                 | Program output: 15                 
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -47                
Correct output: -72                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_min boolean_flush exec_eq print_boolean)) boolean_xor integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer) exec_yank exec_shove (exec_y (integer_gt integer_shove))) ())) ())))
Lexicase best errors: [0 1 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 68
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_min boolean_flush exec_eq print_boolean)) boolean_xor integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer) exec_yank exec_shove (exec_y (integer_gt integer_shove))) ())) ())))
Zero cases best errors: [0 1 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 68
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (328 335 101 109 109 330 99 101 334 101)
Population mean number of elite cases: 1.95
Count of perfect (error zero) individuals by case: (328 335 101 109 109 330 99 101 334 101)
Population mean number of perfect (error zero) cases: 1.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_min boolean_flush exec_eq print_boolean)) boolean_xor integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer) exec_yank exec_shove (exec_y (integer_gt integer_shove))) ())) ())))
Errors: [0 1 0 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 51
Size: 68
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.053
Median total errors in population: 8
Error averages by case: (0.672 0.665 0.899 0.891 0.891 0.67 0.901 0.899 0.666 0.899)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.734
Average program size in population (points): 84.553
Average percent parens in population: 0.215
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9825
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1513043
--- Timings ---
Current time: 1559314317452 milliseconds
Total Time:           9.3 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.8 seconds, 51.4%
Fitness Testing:      3.4 seconds, 36.0%
Report:               1.1 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 52                 
Correct output: 51                  | Program output: 74                 
Correct output: 5                   | Program output: 11                 
Correct output: 4                   | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 34                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 60                 
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -36                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -27                
Correct output: -98                 | Program output: -45                
Correct output: -100                | Program output: -94                
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -84                
Correct output: -81                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: -65                
Correct output: -70                 | Program output: 18                 
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: 10                 
Correct output: -49                 | Program output: -46                
Correct output: -79                 | Program output: 1                  
Correct output: -69                 | Program output: -45                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 46                 
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: 45                 
Correct output: -36                 | Program output: -4                 
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: 84                 
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: 0                  
Correct output: -82                 | Program output: -66                
Correct output: -67                 | Program output: -52                
Correct output: -63                 | Program output: 15                 
Correct output: -49                 | Program output: -37                
Correct output: -100                | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: 23                 
Correct output: -47                 | Program output: 15                 
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -47                
Correct output: -72                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_min boolean_flush exec_eq print_boolean)) boolean_xor integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer) exec_yank exec_shove (exec_y (integer_gt integer_shove))) ())) ())))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 68
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_min boolean_flush exec_eq print_boolean)) boolean_xor integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer) exec_yank exec_shove (exec_y (integer_gt integer_shove))) ())) ())))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 68
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (480 730 734 476 934 731 725 189 733 253)
Population mean number of elite cases: 5.99
Count of perfect (error zero) individuals by case: (480 730 734 476 934 731 725 189 733 253)
Population mean number of perfect (error zero) cases: 5.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_min boolean_flush exec_eq print_boolean)) boolean_xor integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer) exec_yank exec_shove (exec_y (integer_gt integer_shove))) ())) ())))
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 51
Size: 68
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.015
Median total errors in population: 3
Error averages by case: (0.52 0.27 0.266 0.524 0.066 0.269 0.275 0.811 0.267 0.747)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.561
Average program size in population (points): 65.859
Average percent parens in population: 0.237
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 5.0755
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 249
Genome diversity (% unique genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 260
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.009
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2387700
--- Timings ---
Current time: 1559314320981 milliseconds
Total Time:          12.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.8 seconds, 52.4%
Fitness Testing:      4.3 seconds, 33.1%
Report:               1.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 52                 
Correct output: 51                  | Program output: 74                 
Correct output: 5                   | Program output: 11                 
Correct output: 4                   | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 34                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 60                 
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -36                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -27                
Correct output: -98                 | Program output: -45                
Correct output: -100                | Program output: -94                
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -84                
Correct output: -81                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: -65                
Correct output: -70                 | Program output: 18                 
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: 10                 
Correct output: -49                 | Program output: -46                
Correct output: -79                 | Program output: 1                  
Correct output: -69                 | Program output: -45                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 46                 
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: 45                 
Correct output: -36                 | Program output: -4                 
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: 84                 
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: 0                  
Correct output: -82                 | Program output: -66                
Correct output: -67                 | Program output: -52                
Correct output: -63                 | Program output: 15                 
Correct output: -49                 | Program output: -37                
Correct output: -100                | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: 23                 
Correct output: -47                 | Program output: 15                 
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -47                
Correct output: -72                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_yank boolean_flush exec_eq print_boolean)) boolean_xor integer_yankdup exec_dup_items exec_k (exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer) exec_yank exec_shove (exec_y (integer_gt integer_shove))) ())) ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 73
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_yank boolean_flush exec_eq print_boolean)) boolean_xor integer_yankdup exec_dup_items exec_k (exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer) exec_yank exec_shove (exec_y (integer_gt integer_shove))) ())) ()))) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 73
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (814 535 905 535 533 819 813 93 818 278)
Population mean number of elite cases: 6.14
Count of perfect (error zero) individuals by case: (814 535 905 535 533 819 813 93 818 278)
Population mean number of perfect (error zero) cases: 6.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq integer_inc exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (exec_do*range (integer_flush boolean_dup_times boolean_eq exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer) exec_yank exec_shove (exec_y (integer_gt integer_shove))) ())) ()))))))
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 44
Size: 62
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 3.857
Median total errors in population: 2
Error averages by case: (0.186 0.465 0.095 0.465 0.467 0.181 0.187 0.907 0.182 0.722)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.054
Average program size in population (points): 67.838
Average percent parens in population: 0.235
Minimum age in population: 4.0
Maximum age in population: 8.0
Average age in population: 6.6145
Median age in population: 6.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 138
Genome diversity (% unique genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3285182
--- Timings ---
Current time: 1559314324056 milliseconds
Total Time:          16.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.7 seconds, 53.1%
Fitness Testing:      5.2 seconds, 31.5%
Report:               2.4 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 52                 
Correct output: 51                  | Program output: 74                 
Correct output: 5                   | Program output: 11                 
Correct output: 4                   | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 34                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 60                 
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -36                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -27                
Correct output: -98                 | Program output: -45                
Correct output: -100                | Program output: -94                
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -84                
Correct output: -81                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: -65                
Correct output: -70                 | Program output: 18                 
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: 10                 
Correct output: -49                 | Program output: -46                
Correct output: -79                 | Program output: 1                  
Correct output: -69                 | Program output: -45                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 46                 
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: 45                 
Correct output: -36                 | Program output: -4                 
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: 84                 
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: 0                  
Correct output: -82                 | Program output: -66                
Correct output: -67                 | Program output: -52                
Correct output: -63                 | Program output: 15                 
Correct output: -49                 | Program output: -37                
Correct output: -100                | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: 23                 
Correct output: -47                 | Program output: 15                 
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -47                
Correct output: -72                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min print_integer exec_s (exec_pop (boolean_flush exec_eq print_boolean)) (boolean_xor) () integer_yankdup exec_dup_items) boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer) exec_yank exec_shove (exec_y (integer_gt integer_shove))) ())) ())))
Lexicase best errors: [0 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 69
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min print_integer exec_s (exec_pop (boolean_flush exec_eq print_boolean)) (boolean_xor) () integer_yankdup exec_dup_items) boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer) exec_yank exec_shove (exec_y (integer_gt integer_shove))) ())) ())))
Zero cases best errors: [0 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 69
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (576 127 579 948 774 948 766 227 193 766)
Population mean number of elite cases: 5.90
Count of perfect (error zero) individuals by case: (576 127 579 948 774 948 766 227 193 766)
Population mean number of perfect (error zero) cases: 5.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_shove})
Best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_min boolean_flush exec_eq print_boolean)) boolean_xor integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_eq exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer) exec_yank exec_shove (exec_y (integer_gt) integer_shove)) ())) ()))))
Errors: [0 1 0 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 51
Size: 68
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.096
Median total errors in population: 3
Error averages by case: (0.424 0.873 0.421 0.052 0.226 0.052 0.234 0.773 0.807 0.234)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.733
Average program size in population (points): 66.089
Average percent parens in population: 0.234
Minimum age in population: 5.5
Maximum age in population: 9.875
Average age in population: 8.1126875
Median age in population: 8.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4172631
--- Timings ---
Current time: 1559314327546 milliseconds
Total Time:          19.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.6 seconds, 54.7%
Fitness Testing:      6.1 seconds, 31.1%
Report:               2.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 52                 
Correct output: 51                  | Program output: 74                 
Correct output: 5                   | Program output: 11                 
Correct output: 4                   | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 34                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 60                 
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -36                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -27                
Correct output: -98                 | Program output: -45                
Correct output: -100                | Program output: -94                
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -84                
Correct output: -81                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: -65                
Correct output: -70                 | Program output: 18                 
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: 10                 
Correct output: -49                 | Program output: -46                
Correct output: -79                 | Program output: 1                  
Correct output: -69                 | Program output: -45                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 46                 
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: 45                 
Correct output: -36                 | Program output: -4                 
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: 84                 
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: 0                  
Correct output: -82                 | Program output: -66                
Correct output: -67                 | Program output: -52                
Correct output: -63                 | Program output: 15                 
Correct output: -49                 | Program output: -37                
Correct output: -100                | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: 23                 
Correct output: -47                 | Program output: 15                 
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -47                
Correct output: -72                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_311} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup})
Lexicase best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min boolean_shove tagged_109 integer_min print_integer exec_pop (exec_yank integer_min boolean_flush exec_eq print_boolean)) boolean_xor integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (exec_while (exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup in4 integer_fromboolean integer_max exec_do*range () exec_do*times (integer_lte boolean_or exec_k (integer_dup) (tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup))))) ())) ())))))
Lexicase best errors: [0 0 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 87
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_311} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup})
Zero cases best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min boolean_shove tagged_109 integer_min print_integer exec_pop (exec_yank integer_min boolean_flush exec_eq print_boolean)) boolean_xor integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (exec_while (exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup in4 integer_fromboolean integer_max exec_do*range () exec_do*times (integer_lte boolean_or exec_k (integer_dup) (tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup))))) ())) ())))))
Zero cases best errors: [0 0 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 87
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (791 912 381 423 902 103 103 102 378 782)
Population mean number of elite cases: 4.88
Count of perfect (error zero) individuals by case: (791 912 381 423 902 103 103 102 378 782)
Population mean number of perfect (error zero) cases: 4.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_min boolean_flush integer_dup tag_boolean_466 exec_eq integer_div boolean_rot boolean_dup_times integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer) exec_yank exec_shove (exec_y (integer_gt integer_shove))) ())) ()))))
Errors: [0 0 0 1 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 47
Size: 63
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 5.123
Median total errors in population: 5
Error averages by case: (0.209 0.088 0.619 0.577 0.098 0.897 0.897 0.898 0.622 0.218)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.162
Average program size in population (points): 66.395
Average percent parens in population: 0.232
Minimum age in population: 7.0
Maximum age in population: 11.40625
Average age in population: 9.53490625
Median age in population: 9.59375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.797
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4978402
--- Timings ---
Current time: 1559314330601 milliseconds
Total Time:          22.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.7 seconds, 55.2%
Fitness Testing:      6.9 seconds, 29.9%
Report:               3.3 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 52                 
Correct output: 51                  | Program output: 74                 
Correct output: 5                   | Program output: 11                 
Correct output: 4                   | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 34                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 60                 
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -36                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -27                
Correct output: -98                 | Program output: -45                
Correct output: -100                | Program output: -94                
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -84                
Correct output: -81                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: -65                
Correct output: -70                 | Program output: 18                 
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: 10                 
Correct output: -49                 | Program output: -46                
Correct output: -79                 | Program output: 1                  
Correct output: -69                 | Program output: -45                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 46                 
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: 45                 
Correct output: -36                 | Program output: -4                 
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: 84                 
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: 0                  
Correct output: -82                 | Program output: -66                
Correct output: -67                 | Program output: -52                
Correct output: -63                 | Program output: 15                 
Correct output: -49                 | Program output: -37                
Correct output: -100                | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: 23                 
Correct output: -47                 | Program output: 15                 
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -47                
Correct output: -72                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction exec_eq} {:close 0, :instruction tag_integer_311} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 51} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_dup_items})
Lexicase best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot boolean_stackdepth integer_lte in4 in3 boolean_shove tagged_109 integer_min print_integer in2 exec_flush boolean_dup_times print_boolean exec_swap (integer_dup integer_rot) (exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_empty) print_boolean exec_y () boolean_frominteger exec_when (exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or exec_k (exec_eq) (tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) () boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_shove) boolean_rot integer_dec in2 integer_max integer_dup integer_mod boolean_and integer_dup_items))))
Lexicase best errors: [0 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 84
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction exec_eq} {:close 0, :instruction tag_integer_311} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 51} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_dup_items})
Zero cases best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot boolean_stackdepth integer_lte in4 in3 boolean_shove tagged_109 integer_min print_integer in2 exec_flush boolean_dup_times print_boolean exec_swap (integer_dup integer_rot) (exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_empty) print_boolean exec_y () boolean_frominteger exec_when (exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or exec_k (exec_eq) (tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) () boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_shove) boolean_rot integer_dec in2 integer_max integer_dup integer_mod boolean_and integer_dup_items))))
Zero cases best errors: [0 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 84
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (412 409 232 411 411 233 411 414 912 232)
Population mean number of elite cases: 4.08
Count of perfect (error zero) individuals by case: (412 409 232 411 411 233 411 414 912 232)
Population mean number of perfect (error zero) cases: 4.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_684} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 3, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_684 exec_yankdup integer_gt integer_dec integer_eq boolean_frominteger exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_min boolean_flush exec_eq print_boolean)) boolean_xor integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_dup_times exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer) exec_yank exec_shove (exec_y (integer_gt integer_shove))) ())) ())))
Errors: [0 0 1 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 51
Size: 68
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.923
Median total errors in population: 3
Error averages by case: (0.588 0.591 0.768 0.589 0.589 0.767 0.589 0.586 0.088 0.768)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.413
Average program size in population (points): 58.705
Average percent parens in population: 0.234
Minimum age in population: 8.25
Maximum age in population: 13.015625
Average age in population: 11.01034375
Median age in population: 11.0703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5675277
--- Timings ---
Current time: 1559314333817 milliseconds
Total Time:          25.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.5 seconds, 56.4%
Fitness Testing:      7.6 seconds, 29.4%
Report:               3.5 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 71                 
Correct output: 13                  | Program output: 34                 
Correct output: 10                  | Program output: 44                 
Correct output: 8                   | Program output: 37                 
Correct output: 51                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 34                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 32                 
Correct output: -64                 | Program output: 31                 
Correct output: -91                 | Program output: -31                
Correct output: -94                 | Program output: 32                 
Correct output: -84                 | Program output: 31                 
Correct output: -23                 | Program output: -22                
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -18                
Correct output: -98                 | Program output: 11                 
Correct output: -100                | Program output: -82                
Correct output: -14                 | Program output: 59                 
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -84                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: 29                 
Correct output: -70                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 0                  
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -23                
Correct output: -79                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 0                  
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -23                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: 41                 
Correct output: -44                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -46                
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -22                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -3                 
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -29                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -47                
Correct output: -72                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_swap () (in1 tag_integer_278) exec_k_when_autoconstructing (in4) (tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 boolean_rot boolean_stackdepth integer_lte in4 in3 boolean_shove tagged_109 integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup tag_boolean_466 exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_empty) () print_boolean exec_y () boolean_frominteger integer_add exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 exec_empty) print_boolean exec_yank exec_shove (exec_y (integer_gt integer_shove)))
Lexicase best errors: [0 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.164
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_swap () (in1 tag_integer_278) exec_k_when_autoconstructing (in4) (tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 boolean_rot boolean_stackdepth integer_lte in4 in3 boolean_shove tagged_109 integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup tag_boolean_466 exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_empty) () print_boolean exec_y () boolean_frominteger integer_add exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 exec_empty) print_boolean exec_yank exec_shove (exec_y (integer_gt integer_shove)))
Zero cases best errors: [0 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.164
--- Lexicase Population Statistics ---
Count of elite individuals by case: (928 594 1000 911 604 595 610 1000 604 610)
Population mean number of elite cases: 7.46
Count of perfect (error zero) individuals by case: (928 594 0 911 604 595 610 0 604 610)
Population mean number of perfect (error zero) cases: 5.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup})
Best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 boolean_rot boolean_stackdepth integer_lte in4 in3 boolean_shove tagged_109 integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup tag_boolean_466 integer_dup_items in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_empty) () print_boolean exec_y () integer_dup)
Errors: [0 0 1 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 4.544
Median total errors in population: 4
Error averages by case: (0.072 0.406 1.0 0.089 0.396 0.405 0.39 1.0 0.396 0.39)
Error minima by case: (0 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 55.636
Average program size in population (points): 70.663
Average percent parens in population: 0.213
Minimum age in population: 10.46875
Maximum age in population: 14.5078125
Average age in population: 12.5147265625
Median age in population: 12.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6271601
--- Timings ---
Current time: 1559314336874 milliseconds
Total Time:          29.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.7 seconds, 57.2%
Fitness Testing:      8.2 seconds, 28.1%
Report:               4.2 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 71                 
Correct output: 13                  | Program output: 34                 
Correct output: 10                  | Program output: 44                 
Correct output: 8                   | Program output: 37                 
Correct output: 51                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 34                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 32                 
Correct output: -64                 | Program output: 31                 
Correct output: -91                 | Program output: -31                
Correct output: -94                 | Program output: 32                 
Correct output: -84                 | Program output: 31                 
Correct output: -23                 | Program output: -22                
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -18                
Correct output: -98                 | Program output: 11                 
Correct output: -100                | Program output: -82                
Correct output: -14                 | Program output: 59                 
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -84                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: 29                 
Correct output: -70                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 0                  
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -23                
Correct output: -79                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 0                  
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -23                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: 41                 
Correct output: -44                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -46                
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -22                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -3                 
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -29                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -47                
Correct output: -72                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_311} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 51} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 51} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_dup_items})
Lexicase best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) boolean_rot boolean_frominteger integer_lte in4 in3 boolean_shove tagged_109 integer_min print_integer in2 exec_flush boolean_dup_times print_boolean exec_swap (integer_dup tag_boolean_466 exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not exec_do*times (exec_empty)) (print_boolean exec_y () boolean_frominteger integer_add exec_stackdepth boolean_invert_second_then_and boolean_flush exec_y (exec_dup_times (integer_fromboolean integer_max exec_do*range () exec_do*times (integer_lte boolean_or exec_k (integer_dup) (tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_shove) boolean_rot integer_dec in2 integer_max integer_dup integer_mod integer_empty integer_dup_items)) exec_yankdup 51 boolean_eq boolean_pop boolean_shove) boolean_rot integer_dec exec_s_when_autoconstructing (integer_max integer_dup integer_mod boolean_and integer_dup_items) () ())))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 97
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_311} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 51} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 51} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_dup_items})
Zero cases best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) boolean_rot boolean_frominteger integer_lte in4 in3 boolean_shove tagged_109 integer_min print_integer in2 exec_flush boolean_dup_times print_boolean exec_swap (integer_dup tag_boolean_466 exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not exec_do*times (exec_empty)) (print_boolean exec_y () boolean_frominteger integer_add exec_stackdepth boolean_invert_second_then_and boolean_flush exec_y (exec_dup_times (integer_fromboolean integer_max exec_do*range () exec_do*times (integer_lte boolean_or exec_k (integer_dup) (tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_shove) boolean_rot integer_dec in2 integer_max integer_dup integer_mod integer_empty integer_dup_items)) exec_yankdup 51 boolean_eq boolean_pop boolean_shove) boolean_rot integer_dec exec_s_when_autoconstructing (integer_max integer_dup integer_mod boolean_and integer_dup_items) () ())))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 97
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 671 744 671 750 750 351 878 925 668)
Population mean number of elite cases: 6.76
Count of perfect (error zero) individuals by case: (350 671 744 671 750 750 351 878 925 668)
Population mean number of perfect (error zero) cases: 6.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_311} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 51} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush})
Best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) boolean_shove tagged_109 integer_min print_integer in2 exec_flush exec_do*range (print_boolean exec_swap (integer_dup tag_boolean_466 exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_empty) () print_boolean exec_y () boolean_frominteger integer_add exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean integer_max exec_do*range () exec_do*times (integer_lte boolean_or exec_k (integer_dup) (tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_shove) boolean_rot integer_dec in2 integer_max integer_dup integer_mod integer_empty integer_dup_items)) integer_sub exec_while (boolean_flush boolean_dup_items exec_swap (integer_dup_times integer_sub) (exec_flush))))
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 68
Size: 85
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3.242
Median total errors in population: 2
Error averages by case: (0.65 0.329 0.256 0.329 0.25 0.25 0.649 0.122 0.075 0.332)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.631
Average program size in population (points): 72.281
Average percent parens in population: 0.203
Minimum age in population: 11.75
Maximum age in population: 15.875
Average age in population: 14.01428125
Median age in population: 14.064453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6712760
--- Timings ---
Current time: 1559314339618 milliseconds
Total Time:          32.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.8 seconds, 58.7%
Fitness Testing:      8.7 seconds, 27.1%
Report:               4.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 71                 
Correct output: 13                  | Program output: 34                 
Correct output: 10                  | Program output: 44                 
Correct output: 8                   | Program output: 37                 
Correct output: 51                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 34                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 32                 
Correct output: -64                 | Program output: 31                 
Correct output: -91                 | Program output: -31                
Correct output: -94                 | Program output: 32                 
Correct output: -84                 | Program output: 31                 
Correct output: -23                 | Program output: -22                
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -18                
Correct output: -98                 | Program output: 11                 
Correct output: -100                | Program output: -82                
Correct output: -14                 | Program output: 59                 
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -84                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: 29                 
Correct output: -70                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 0                  
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -23                
Correct output: -79                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 0                  
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -23                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: 41                 
Correct output: -44                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -46                
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -22                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -3                 
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -29                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -47                
Correct output: -72                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_311} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 51} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) boolean_shove tagged_109 integer_min print_integer in2 exec_flush exec_do*range (print_boolean exec_swap (integer_dup tag_boolean_466 exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_empty) () print_boolean exec_y () boolean_frominteger integer_add exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean integer_max exec_do*range () exec_do*times (integer_lte boolean_or exec_k (integer_dup) (tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_shove) boolean_rot integer_dec in2 integer_max integer_dup boolean_xor integer_empty integer_dup_items)) integer_sub exec_while (boolean_flush boolean_dup_items exec_swap (integer_dup_times integer_sub) (exec_flush))))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 85
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_311} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 51} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) boolean_shove tagged_109 integer_min print_integer in2 exec_flush exec_do*range (print_boolean exec_swap (integer_dup tag_boolean_466 exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_empty) () print_boolean exec_y () boolean_frominteger integer_add exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean integer_max exec_do*range () exec_do*times (integer_lte boolean_or exec_k (integer_dup) (tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_shove) boolean_rot integer_dec in2 integer_max integer_dup boolean_xor integer_empty integer_dup_items)) integer_sub exec_while (boolean_flush boolean_dup_items exec_swap (integer_dup_times integer_sub) (exec_flush))))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 85
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (663 491 927 669 669 665 664 668 665 934)
Population mean number of elite cases: 7.01
Count of perfect (error zero) individuals by case: (663 491 927 669 669 665 664 668 665 934)
Population mean number of perfect (error zero) cases: 7.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_311} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 51} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush})
Best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) boolean_shove tagged_109 integer_min print_integer in2 exec_flush boolean_dup_times print_boolean exec_swap (integer_dup tag_boolean_466 exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_empty) () print_boolean exec_y () boolean_frominteger integer_add exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean integer_max exec_do*range () exec_do*times (integer_lte boolean_or exec_k (exec_stackdepth) (tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq integer_flush boolean_shove) boolean_rot integer_dec in2 integer_max integer_dup integer_mod integer_empty integer_dup_items)) integer_sub exec_while (boolean_flush exec_s (exec_swap (integer_dup_times integer_sub) (exec_flush)) () ()))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 68
Size: 87
Percent parens: 0.218
--- Population Statistics ---
Average total errors in population: 2.985
Median total errors in population: 3
Error averages by case: (0.337 0.509 0.073 0.331 0.331 0.335 0.336 0.332 0.335 0.066)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.368
Average program size in population (points): 71.258
Average percent parens in population: 0.208
Minimum age in population: 12.75
Maximum age in population: 17.158203125
Average age in population: 15.46881640625
Median age in population: 15.4921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.836
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7227286
--- Timings ---
Current time: 1559314342304 milliseconds
Total Time:          34.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.7 seconds, 59.7%
Fitness Testing:      9.2 seconds, 26.5%
Report:               4.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 52                 
Correct output: 51                  | Program output: 74                 
Correct output: 5                   | Program output: 11                 
Correct output: 4                   | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 34                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 60                 
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -36                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -27                
Correct output: -98                 | Program output: -45                
Correct output: -100                | Program output: -94                
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -84                
Correct output: -81                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: -65                
Correct output: -70                 | Program output: 18                 
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: 10                 
Correct output: -49                 | Program output: -46                
Correct output: -79                 | Program output: 1                  
Correct output: -69                 | Program output: -45                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 46                 
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: 45                 
Correct output: -36                 | Program output: -4                 
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: 84                 
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: 0                  
Correct output: -82                 | Program output: -66                
Correct output: -67                 | Program output: -52                
Correct output: -63                 | Program output: 15                 
Correct output: -49                 | Program output: -37                
Correct output: -100                | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: 23                 
Correct output: -47                 | Program output: 15                 
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -47                
Correct output: -72                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_add} {:close 3, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_xor exec_pop (exec_yank integer_min boolean_flush exec_eq integer_add)) boolean_xor integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq integer_shove integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer) exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_max) exec_if (boolean_invert_second_then_and boolean_flush integer_dup_times in4 exec_empty) () print_boolean exec_y () exec_yank exec_shove (exec_y (integer_gt integer_shove)))) ())) ()))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 86
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_add} {:close 3, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_xor exec_pop (exec_yank integer_min boolean_flush exec_eq integer_add)) boolean_xor integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq integer_shove integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer) exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_max) exec_if (boolean_invert_second_then_and boolean_flush integer_dup_times in4 exec_empty) () print_boolean exec_y () exec_yank exec_shove (exec_y (integer_gt integer_shove)))) ())) ()))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 86
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (711 1 305 898 763 712 305 714 307 1)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (711 1 305 898 763 712 305 714 307 1)
Population mean number of perfect (error zero) cases: 4.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 1, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 1, :instruction tagged_109} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction tag_boolean_466} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in4} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Best program: (exec_swap () (in1 tag_integer_278) exec_do*while () in4 tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove) tagged_109 boolean_rot boolean_and boolean_stackdepth in4 in3 boolean_shove tagged_109 integer_min print_integer in2 exec_flush boolean_dup_times print_boolean exec_swap (integer_dup tag_boolean_466) (exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_empty) print_boolean exec_y (boolean_frominteger integer_add exec_stackdepth integer_inc boolean_flush integer_dup_times in4) exec_empty print_boolean exec_y () exec_yank exec_shove (exec_y (integer_gt integer_shove)))
Errors: [0 1 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 57
Size: 68
Percent parens: 0.162
--- Population Statistics ---
Average total errors in population: 5.283
Median total errors in population: 5
Error averages by case: (0.289 0.999 0.695 0.102 0.237 0.288 0.695 0.286 0.693 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.31
Average program size in population (points): 71.979
Average percent parens in population: 0.204
Minimum age in population: 13.875
Maximum age in population: 18.916015625
Average age in population: 16.9668076171875
Median age in population: 17.04541015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7639268
--- Timings ---
Current time: 1559314344959 milliseconds
Total Time:          37.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.6 seconds, 60.8%
Fitness Testing:      9.6 seconds, 25.9%
Report:               4.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 52                 
Correct output: 51                  | Program output: 74                 
Correct output: 5                   | Program output: 11                 
Correct output: 4                   | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 34                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 60                 
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -36                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -27                
Correct output: -98                 | Program output: -45                
Correct output: -100                | Program output: -94                
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -84                
Correct output: -81                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: -65                
Correct output: -70                 | Program output: 18                 
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: 10                 
Correct output: -49                 | Program output: -46                
Correct output: -79                 | Program output: 1                  
Correct output: -69                 | Program output: -45                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 46                 
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: 45                 
Correct output: -36                 | Program output: -4                 
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: 84                 
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: 0                  
Correct output: -82                 | Program output: -66                
Correct output: -67                 | Program output: -52                
Correct output: -63                 | Program output: 15                 
Correct output: -49                 | Program output: -37                
Correct output: -100                | Program output: -81                
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: 23                 
Correct output: -47                 | Program output: 15                 
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -47                
Correct output: -72                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_swap () (in1 tag_integer_278 exec_do*while (in4) tag_integer_657 boolean_dup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_min boolean_flush exec_eq print_boolean)) boolean_xor) integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_eq)) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer exec_yank integer_shove integer_dup print_integer)) (exec_yank exec_shove (integer_shove)))) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 69
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_swap () (in1 tag_integer_278 exec_do*while (in4) tag_integer_657 boolean_dup integer_gt integer_dec integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_min boolean_flush exec_eq print_boolean)) boolean_xor) integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_eq)) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer exec_yank integer_shove integer_dup print_integer)) (exec_yank exec_shove (integer_shove)))) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 69
Percent parens: 0.232
--- Lexicase Population Statistics ---
Count of elite individuals by case: (917 751 756 751 515 515 751 928 263 928)
Population mean number of elite cases: 7.07
Count of perfect (error zero) individuals by case: (917 751 756 751 515 515 751 928 263 928)
Population mean number of perfect (error zero) cases: 7.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction -23} {:close 2, :instruction exec_when})
Best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_max boolean_not exec_shove (in3 in4 in3 boolean_shove tagged_109 integer_min print_integer in2 exec_flush boolean_dup_times print_boolean exec_swap (integer_dup exec_do*range (boolean_pop integer_shove exec_y () boolean_rot exec_do*count () exec_s () () (boolean_eq integer_dup -23) exec_when ())) ()))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 36
Size: 50
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 2.925
Median total errors in population: 3
Error averages by case: (0.083 0.249 0.244 0.249 0.485 0.485 0.249 0.072 0.737 0.072)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.927
Average program size in population (points): 73.867
Average percent parens in population: 0.228
Minimum age in population: 14.875
Maximum age in population: 20.52490234375
Average age in population: 18.459162109375
Median age in population: 18.465087890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.01
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 8406986
--- Timings ---
Current time: 1559314348111 milliseconds
Total Time:          40.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.8 seconds, 61.3%
Fitness Testing:     10.4 seconds, 25.7%
Report:               5.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 71                 
Correct output: 13                  | Program output: 34                 
Correct output: 10                  | Program output: 44                 
Correct output: 8                   | Program output: 37                 
Correct output: 51                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 34                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 32                 
Correct output: -64                 | Program output: 31                 
Correct output: -91                 | Program output: -31                
Correct output: -94                 | Program output: 32                 
Correct output: -84                 | Program output: 31                 
Correct output: -23                 | Program output: -22                
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -18                
Correct output: -98                 | Program output: 11                 
Correct output: -100                | Program output: -82                
Correct output: -14                 | Program output: 59                 
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -84                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: 29                 
Correct output: -70                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 0                  
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -23                
Correct output: -79                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 0                  
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -23                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: 41                 
Correct output: -44                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -46                
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -22                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -3                 
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -29                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -47                
Correct output: -72                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Lexicase best program: (in4 tag_integer_657 integer_fromboolean boolean_yankdup exec_s (integer_rot exec_yank integer_lt exec_yankdup integer_eq integer_dec integer_eq boolean_not exec_shove (in3 tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_min boolean_flush exec_eq in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup tag_boolean_466 integer_gte integer_yank integer_mod exec_do*range () integer_flush boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (integer_dup boolean_invert_second_then_and exec_empty)) (print_boolean exec_y () boolean_frominteger integer_add exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 exec_empty)) (print_boolean exec_y () exec_yank exec_shove (exec_y (integer_gt integer_shove))))) () ())
Lexicase best errors: [0 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 79
Percent parens: 0.215
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Zero cases best program: (in4 tag_integer_657 integer_fromboolean boolean_yankdup exec_s (integer_rot exec_yank integer_lt exec_yankdup integer_eq integer_dec integer_eq boolean_not exec_shove (in3 tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_min boolean_flush exec_eq in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup tag_boolean_466 integer_gte integer_yank integer_mod exec_do*range () integer_flush boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (integer_dup boolean_invert_second_then_and exec_empty)) (print_boolean exec_y () boolean_frominteger integer_add exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 exec_empty)) (print_boolean exec_y () exec_yank exec_shove (exec_y (integer_gt integer_shove))))) () ())
Zero cases best errors: [0 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 79
Percent parens: 0.215
--- Lexicase Population Statistics ---
Count of elite individuals by case: (360 785 1 359 359 362 663 915 659 771)
Population mean number of elite cases: 5.23
Count of perfect (error zero) individuals by case: (360 785 1 359 359 362 663 915 659 771)
Population mean number of perfect (error zero) cases: 5.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_311} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 51} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush})
Best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) boolean_shove tagged_109 integer_min print_integer in2 exec_flush boolean_dup_times print_boolean exec_swap (integer_dup tag_boolean_466 exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_y ()) (print_boolean exec_y () boolean_frominteger integer_add exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean integer_max exec_do*range () exec_do*times (boolean_pop boolean_frominteger exec_k (integer_dup) (tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_or exec_yankdup 51 boolean_eq boolean_pop boolean_shove) boolean_rot integer_dec in2 integer_max integer_dup integer_mod integer_empty integer_dup_items)) integer_sub exec_while (boolean_flush boolean_dup_items exec_swap (integer_dup_times integer_sub) (exec_flush))))
Errors: [0 1 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 68
Size: 85
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4.766
Median total errors in population: 5
Error averages by case: (0.64 0.215 0.999 0.641 0.641 0.638 0.337 0.085 0.341 0.229)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.424
Average program size in population (points): 67.477
Average percent parens in population: 0.222
Minimum age in population: 17.09375
Maximum age in population: 21.852783203125
Average age in population: 19.92350610351562
Median age in population: 20.01220703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 9020636
--- Timings ---
Current time: 1559314350944 milliseconds
Total Time:          43.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.8 seconds, 61.8%
Fitness Testing:     11.0 seconds, 25.4%
Report:               5.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 11                 
Correct output: 4                   | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 34                 
Correct output: 1                   | Program output: 21                 
Correct output: 24                  | Program output: 31                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 38                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 13                 
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -41                
Correct output: -30                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -37                
Correct output: -49                 | Program output: 8                  
Correct output: 0                   | Program output: 36                 
Correct output: -52                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -4                 
Correct output: -79                 | Program output: -37                
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: 37                 
Correct output: -52                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -45                
Correct output: -77                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 48                 
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: 18                 
Correct output: -98                 | Program output: -87                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: 22                 
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -15                
Correct output: -90                 | Program output: -44                
Correct output: -40                 | Program output: -25                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -12                
Correct output: -67                 | Program output: -52                
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -99                
Correct output: -54                 | Program output: -16                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -59                
Correct output: -99                 | Program output: -48                
Correct output: -74                 | Program output: 52                 
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -41                
Correct output: -33                 | Program output: 71                 
Correct output: -87                 | Program output: 7                  
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 3, :instruction print_boolean} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty})
Lexicase best program: (exec_do*times (boolean_invert_second_then_and exec_shove (integer_dup_items integer_gt integer_dec boolean_eq) boolean_rot) boolean_rot boolean_stackdepth integer_lte in2 in3 boolean_shove tagged_109 integer_min print_integer in2 exec_flush boolean_dup_times exec_eq print_boolean integer_mult integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty)))
Lexicase best errors: [0 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.128
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 3, :instruction print_boolean} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty})
Zero cases best program: (exec_do*times (boolean_invert_second_then_and exec_shove (integer_dup_items integer_gt integer_dec boolean_eq) boolean_rot) boolean_rot boolean_stackdepth integer_lte in2 in3 boolean_shove tagged_109 integer_min print_integer in2 exec_flush boolean_dup_times exec_eq print_boolean integer_mult integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty)))
Zero cases best errors: [0 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.128
--- Lexicase Population Statistics ---
Count of elite individuals by case: (112 112 112 439 438 472 439 918 899 112)
Population mean number of elite cases: 4.05
Count of perfect (error zero) individuals by case: (112 112 112 439 438 472 439 918 899 112)
Population mean number of perfect (error zero) cases: 4.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 3, :instruction print_boolean} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty})
Best program: (exec_do*times (boolean_invert_second_then_and exec_shove (integer_dup_items integer_gt integer_dec boolean_eq) boolean_rot) boolean_rot boolean_stackdepth integer_lte in2 in3 boolean_shove tagged_109 integer_min print_integer in2 exec_flush boolean_dup_times exec_eq print_boolean integer_mult integer_yankdup exec_dup_items boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty)))
Errors: [0 0 0 1 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 34
Size: 39
Percent parens: 0.128
--- Population Statistics ---
Average total errors in population: 5.947
Median total errors in population: 5
Error averages by case: (0.888 0.888 0.888 0.561 0.562 0.528 0.561 0.082 0.101 0.888)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.425
Average program size in population (points): 72.287
Average percent parens in population: 0.208
Minimum age in population: 18.525390625
Maximum age in population: 23.2080078125
Average age in population: 21.400296875
Median age in population: 21.4205322265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 9462928
--- Timings ---
Current time: 1559314353684 milliseconds
Total Time:          46.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.9 seconds, 62.7%
Fitness Testing:     11.5 seconds, 24.9%
Report:               5.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: true21             
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 71                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 37                 
Correct output: 51                  | Program output: 57                 
Correct output: 5                   | Program output:                    
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: 24                  | Program output:                    
Correct output: 7                   | Program output: 62                 
Correct output: 24                  | Program output:                    
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: true93             
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: 6                  
Correct output: -88                 | Program output: -27                
Correct output: -98                 | Program output: -45                
Correct output: -100                | Program output: -94                
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -37                
Correct output: -49                 | Program output: 8                  
Correct output: 0                   | Program output: 10                 
Correct output: -52                 | Program output: -22                
Correct output: -87                 | Program output: -3                 
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -37                
Correct output: -67                 | Program output: -65                
Correct output: -70                 | Program output: -16                
Correct output: -68                 | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -46                
Correct output: -79                 | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -37                
Correct output: -82                 | Program output: 0                  
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -42                
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -4                 
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: -44                
Correct output: -40                 | Program output: -25                
Correct output: -95                 | Program output: 17                 
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -22                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: 62                 
Correct output: -56                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 7                  
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: 64                 
Correct output: -87                 | Program output: 7                  
Correct output: -100                | Program output: -11                
Correct output: -72                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction print_integer} {:close 0, :instruction exec_yank})
Lexicase best program: (exec_swap (in1 tag_integer_278) (exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt exec_s (integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_min boolean_flush exec_eq print_boolean)) boolean_xor) () (integer_yankdup exec_dup_items) boolean_and exec_do*while (exec_eq integer_gte boolean_yank integer_mod exec_do*range (boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer)) (exec_yank))) ()))))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 64
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction print_integer} {:close 0, :instruction exec_yank})
Zero cases best program: (exec_swap (in1 tag_integer_278) (exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt exec_s (integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank integer_min boolean_flush exec_eq print_boolean)) boolean_xor) () (integer_yankdup exec_dup_items) boolean_and exec_do*while (exec_eq integer_gte boolean_yank integer_mod exec_do*range (boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (exec_swap (exec_do*times (integer_shove integer_dup print_integer)) (exec_yank))) ()))))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 64
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (413 910 16 16 912 14 14 906 905 14)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (413 910 16 16 912 14 14 906 905 14)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction tag_boolean_466} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Best program: (exec_swap () (in1 exec_empty) exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt integer_dec integer_eq exec_dup_times () boolean_eq boolean_rot boolean_rot boolean_stackdepth integer_lte in4 in3 boolean_shove tagged_109 integer_min print_integer in2 exec_flush boolean_dup_times print_boolean exec_swap (integer_gte tag_boolean_466 exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_empty) () print_boolean exec_y () boolean_frominteger integer_add exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times boolean_dup integer_fromboolean integer_max exec_do*range () exec_do*times (integer_lte boolean_or exec_k (integer_dup) (integer_shove exec_s_when_autoconstructing (print_integer) (exec_yank exec_shove (exec_y (integer_gt integer_shove))) ())))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 63
Size: 80
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 5.88
Median total errors in population: 6
Error averages by case: (0.587 0.09 0.984 0.984 0.088 0.986 0.986 0.094 0.095 0.986)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.535
Average program size in population (points): 49.858
Average percent parens in population: 0.174
Minimum age in population: 20.74237060546875
Maximum age in population: 24.4227294921875
Average age in population: 23.00400256347656
Median age in population: 22.9969482421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 322
Genome diversity (% unique genomes):	 0.565
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 337
Syntactic diversity (% unique Push programs):	 0.547
Total error diversity:				 0.009
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 9838809
--- Timings ---
Current time: 1559314356206 milliseconds
Total Time:          48.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.7 seconds, 63.3%
Fitness Testing:     11.9 seconds, 24.5%
Report:               5.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 31                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 16                 
Correct output: 4                   | Program output: 36                 
Correct output: 5                   | Program output: 83                 
Correct output: 13                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 50                 
Correct output: 1                   | Program output: 11                 
Correct output: 15                  | Program output: 49                 
Correct output: 0                   | Program output: 13                 
Correct output: 27                  | Program output: 78                 
Correct output: -64                 | Program output: 5                  
Correct output: -91                 | Program output: -31                
Correct output: -94                 | Program output: -58                
Correct output: -84                 | Program output: 31                 
Correct output: -23                 | Program output: -22                
Correct output: -57                 | Program output: -41                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -4                 
Correct output: -52                 | Program output: -2                 
Correct output: -16                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: 21                 
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -23                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -87                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: -14                
Correct output: -59                 | Program output: 22                 
Correct output: -67                 | Program output: -46                
Correct output: -88                 | Program output: -9                 
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -66                
Correct output: -67                 | Program output: -7                 
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -37                
Correct output: -100                | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -43                
Correct output: -64                 | Program output: -3                 
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: 11                 
Correct output: -44                 | Program output: -41                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min print_integer in2) exec_flush boolean_dup_times exec_shove (exec_swap (integer_dup integer_rot exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_empty) () print_boolean exec_y () boolean_frominteger exec_when (exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean)))
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 54
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min print_integer in2) exec_flush boolean_dup_times exec_shove (exec_swap (integer_dup integer_rot exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_empty) () print_boolean exec_y () boolean_frominteger exec_when (exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean)))
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 54
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 918 364 824 363 649 913 363 942 1)
Population mean number of elite cases: 5.34
Count of perfect (error zero) individuals by case: (1 918 364 824 363 649 913 363 942 1)
Population mean number of perfect (error zero) cases: 5.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean})
Best program: (exec_swap () (in1 tag_integer_278) exec_do*while (in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min print_integer in2) exec_flush boolean_dup_times exec_shove (exec_swap (integer_dup integer_rot exec_eq in4 boolean_rot boolean_dup_times integer_empty print_boolean boolean_not boolean_invert_second_then_and exec_empty) () print_boolean exec_y () boolean_frominteger exec_when (exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean)))
Errors: [0 0 0 1 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 44
Size: 54
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 4.662
Median total errors in population: 5
Error averages by case: (0.999 0.082 0.636 0.176 0.637 0.351 0.087 0.637 0.058 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.829
Average program size in population (points): 66.211
Average percent parens in population: 0.229
Minimum age in population: 22.652587890625
Maximum age in population: 26.14068603515625
Average age in population: 24.43629122924805
Median age in population: 24.4732666015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.543
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 10282984
--- Timings ---
Current time: 1559314358830 milliseconds
Total Time:          51.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.6 seconds, 63.8%
Fitness Testing:     12.4 seconds, 24.2%
Report:               6.1 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 361
Test mean error for best: 0.36100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 95                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 52                 
Correct output: 51                  | Program output: 74                 
Correct output: 5                   | Program output: 11                 
Correct output: 4                   | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 34                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -27                
Correct output: -98                 | Program output: -45                
Correct output: -100                | Program output: -94                
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -37                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -22                
Correct output: -87                 | Program output: -3                 
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -37                
Correct output: -67                 | Program output: -65                
Correct output: -70                 | Program output: -16                
Correct output: -68                 | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -46                
Correct output: -79                 | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -37                
Correct output: -82                 | Program output: 0                  
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -42                
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -4                 
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: -44                
Correct output: -40                 | Program output: -25                
Correct output: -95                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -22                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -11                
Correct output: -72                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_swap (in1 tag_integer_278) (exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt exec_s (integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min integer_eq exec_yank exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank exec_rot (boolean_flush exec_eq print_boolean) () (print_boolean boolean_not boolean_invert_second_then_and exec_empty)) print_boolean exec_y () boolean_frominteger exec_when (exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean)))) () ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 60
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_swap (in1 tag_integer_278) (exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt exec_s (integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min integer_eq exec_yank exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank exec_rot (boolean_flush exec_eq print_boolean) () (print_boolean boolean_not boolean_invert_second_then_and exec_empty)) print_boolean exec_y () boolean_frominteger exec_when (exec_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean)))) () ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 60
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 928 259 290 260 818 901 294 463 464)
Population mean number of elite cases: 4.97
Count of perfect (error zero) individuals by case: (296 928 259 290 260 818 901 294 463 464)
Population mean number of perfect (error zero) cases: 4.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_278} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_657} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction print_boolean} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove})
Best program: (exec_swap (in1 tag_integer_278) (exec_do*while (in4) tag_integer_657 exec_yankdup integer_gt exec_s (integer_eq boolean_not exec_shove (in3 boolean_shove tagged_109 integer_min integer_eq exec_yank exec_shove (in3 boolean_shove tagged_109 integer_min print_integer boolean_pop exec_pop (exec_yank exec_rot (boolean_flush exec_eq print_boolean) () (exec_s_when_autoconstructing () () (integer_yankdup exec_dup_items) boolean_and exec_do*while (exec_eq integer_gte boolean_xor integer_mod exec_do*range (integer_flush boolean_empty boolean_eq exec_y (integer_eq) exec_if (exec_do*count (print_newline exec_do*times (integer_shove integer_dup integer_eq) exec_yank exec_shove (exec_y (integer_gt integer_shove)))) ()))))))) () ()))
Errors: [0 0 0 0 0 1 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 58
Size: 83
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 5.027
Median total errors in population: 5
Error averages by case: (0.704 0.072 0.741 0.71 0.74 0.182 0.099 0.706 0.537 0.536)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.732
Average program size in population (points): 62.662
Average percent parens in population: 0.215
Minimum age in population: 23.652587890625
Maximum age in population: 27.42799377441406
Average age in population: 25.50077514648438
Median age in population: 25.65196228027344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 240
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 244
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 10595140
--- Timings ---
Current time: 1559314361362 milliseconds
Total Time:          53.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.5 seconds, 64.4%
Fitness Testing:     12.7 seconds, 23.7%
Report:               6.3 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_311} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 51} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec})
Lexicase best program: (exec_swap () (in1 in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min integer_min integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup boolean_and exec_if (boolean_flush exec_swap (exec_do*times (integer_shove exec_do*range (exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty) () (print_boolean exec_y () boolean_frominteger exec_when (boolean_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or integer_shove) integer_dup print_integer) exec_yank exec_shove (integer_dup) tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_flush) boolean_rot integer_dec))))) ()) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 90
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_311} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 51} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec})
Zero cases best program: (exec_swap () (in1 in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min integer_min integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup boolean_and exec_if (boolean_flush exec_swap (exec_do*times (integer_shove exec_do*range (exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty) () (print_boolean exec_y () boolean_frominteger exec_when (boolean_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or integer_shove) integer_dup print_integer) exec_yank exec_shove (integer_dup) tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_flush) boolean_rot integer_dec))))) ()) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 90
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (672 921 435 505 563 575 566 522 435 563)
Population mean number of elite cases: 5.76
Count of perfect (error zero) individuals by case: (672 921 435 505 563 575 566 522 435 563)
Population mean number of perfect (error zero) cases: 5.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction tagged_109} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_311} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 51} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec})
Best program: (exec_swap () (in1 in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min integer_min integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup boolean_and exec_if (boolean_flush exec_swap (exec_do*times (integer_shove exec_do*range (exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty) () (print_boolean exec_y () boolean_frominteger exec_when (boolean_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or integer_shove) integer_dup print_integer) exec_yank exec_shove (integer_dup) tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_flush) boolean_rot integer_dec))))) ()) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 67
Size: 90
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 4.243
Median total errors in population: 4
Error averages by case: (0.328 0.079 0.565 0.495 0.437 0.425 0.434 0.478 0.565 0.437)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.481
Average program size in population (points): 62.921
Average percent parens in population: 0.219
Minimum age in population: 24.652587890625
Maximum age in population: 28.61824035644531
Average age in population: 27.04394554901123
Median age in population: 27.06893157958984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 164
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.011
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 10901154
--- Timings ---
Current time: 1559314363861 milliseconds
Total Time:          56.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.5 seconds, 64.9%
Fitness Testing:     13.0 seconds, 23.2%
Report:               6.6 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 18
Successful program: (exec_swap () (in1 in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min integer_min integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup boolean_and exec_if (boolean_flush exec_swap (exec_do*times (integer_shove exec_do*range (exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty) () (print_boolean exec_y () boolean_frominteger exec_when (boolean_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or integer_shove) integer_dup print_integer) exec_yank exec_shove (integer_dup) tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_flush) boolean_rot integer_dec))))) ()) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 90


Auto-simplifying with starting size: 90
step: 0
program: (exec_swap () (in1 in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min integer_min integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup boolean_and exec_if (boolean_flush exec_swap (exec_do*times (integer_shove exec_do*range (exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty) () (print_boolean exec_y () boolean_frominteger exec_when (boolean_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or integer_shove) integer_dup print_integer) exec_yank exec_shove (integer_dup) tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_flush) boolean_rot integer_dec))))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 500
program: (exec_swap () (in1 in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min integer_min integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup boolean_and exec_if (boolean_flush exec_swap (exec_do*times (integer_shove exec_do*range (exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty) () (print_boolean exec_y () boolean_frominteger exec_when (boolean_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or integer_shove) integer_dup print_integer) exec_yank exec_shove (integer_dup) tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_flush) boolean_rot integer_dec))))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 1000
program: (exec_swap () (in1 in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min integer_min integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup boolean_and exec_if (boolean_flush exec_swap (exec_do*times (integer_shove exec_do*range (exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty) () (print_boolean exec_y () boolean_frominteger exec_when (boolean_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or integer_shove) integer_dup print_integer) exec_yank exec_shove (integer_dup) tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_flush) boolean_rot integer_dec))))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 1500
program: (exec_swap () (in1 in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min integer_min integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup boolean_and exec_if (boolean_flush exec_swap (exec_do*times (integer_shove exec_do*range (exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty) () (print_boolean exec_y () boolean_frominteger exec_when (boolean_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or integer_shove) integer_dup print_integer) exec_yank exec_shove (integer_dup) tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_flush) boolean_rot integer_dec))))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 2000
program: (exec_swap () (in1 in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min integer_min integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup boolean_and exec_if (boolean_flush exec_swap (exec_do*times (integer_shove exec_do*range (exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty) () (print_boolean exec_y () boolean_frominteger exec_when (boolean_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or integer_shove) integer_dup print_integer) exec_yank exec_shove (integer_dup) tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_flush) boolean_rot integer_dec))))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 2500
program: (exec_swap () (in1 in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min integer_min integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup boolean_and exec_if (boolean_flush exec_swap (exec_do*times (integer_shove exec_do*range (exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty) () (print_boolean exec_y () boolean_frominteger exec_when (boolean_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or integer_shove) integer_dup print_integer) exec_yank exec_shove (integer_dup) tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_flush) boolean_rot integer_dec))))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 3000
program: (exec_swap () (in1 in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min integer_min integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup boolean_and exec_if (boolean_flush exec_swap (exec_do*times (integer_shove exec_do*range (exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty) () (print_boolean exec_y () boolean_frominteger exec_when (boolean_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or integer_shove) integer_dup print_integer) exec_yank exec_shove (integer_dup) tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_flush) boolean_rot integer_dec))))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 3500
program: (exec_swap () (in1 in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min integer_min integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup boolean_and exec_if (boolean_flush exec_swap (exec_do*times (integer_shove exec_do*range (exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty) () (print_boolean exec_y () boolean_frominteger exec_when (boolean_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or integer_shove) integer_dup print_integer) exec_yank exec_shove (integer_dup) tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_flush) boolean_rot integer_dec))))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 4000
program: (exec_swap () (in1 in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min integer_min integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup boolean_and exec_if (boolean_flush exec_swap (exec_do*times (integer_shove exec_do*range (exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty) () (print_boolean exec_y () boolean_frominteger exec_when (boolean_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or integer_shove) integer_dup print_integer) exec_yank exec_shove (integer_dup) tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_flush) boolean_rot integer_dec))))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 4500
program: (exec_swap () (in1 in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min integer_min integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup boolean_and exec_if (boolean_flush exec_swap (exec_do*times (integer_shove exec_do*range (exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty) () (print_boolean exec_y () boolean_frominteger exec_when (boolean_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or integer_shove) integer_dup print_integer) exec_yank exec_shove (integer_dup) tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_flush) boolean_rot integer_dec))))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 5000
program: (exec_swap () (in1 in4) boolean_rot boolean_frominteger boolean_eq boolean_rot boolean_rot exec_do*range (integer_lte in4 in3 in2 tagged_109 integer_min integer_min integer_min print_integer in2) exec_flush boolean_dup_times print_boolean exec_swap (integer_dup boolean_and exec_if (boolean_flush exec_swap (exec_do*times (integer_shove exec_do*range (exec_s_when_autoconstructing (boolean_invert_second_then_and exec_empty) () (print_boolean exec_y () boolean_frominteger exec_when (boolean_stackdepth boolean_invert_second_then_and boolean_flush integer_dup_times in4 integer_fromboolean exec_when (exec_do*range () exec_do*times (integer_lte boolean_or integer_shove) integer_dup print_integer) exec_yank exec_shove (integer_dup) tag_integer_311 exec_swap (boolean_dup_times boolean_invert_first_then_and) (boolean_dup exec_yankdup 51 boolean_eq boolean_pop boolean_flush) boolean_rot integer_dec))))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
;;******************************
