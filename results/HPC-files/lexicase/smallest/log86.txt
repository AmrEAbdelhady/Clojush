Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[91 -90 91 91] -90] [[44 86 86 86] 44] [[-68 -68 34 -68] -68] [[-25 -46 -25 -25] -46] [[62 -54 62 62] -54] [[26 26 5 26] 5] [[-8 -8 -8 -13] -13] [[57 57 33 57] 33] [[31 31 -10 31] -10] [[-95 -95 -95 74] -95] [(47 47 47 47) 47] [(26 26 26 26) 26] [(50 50 50 50) 50] [(35 35 35 35) 35] [(-43 -43 -43 -43) -43] [(87 64 23 83) 23] [(29 0 6 83) 0] [(90 73 42 78) 42] [(23 88 50 60) 23] [(31 87 31 97) 31] [(20 48 30 47) 20] [(86 9 67 26) 9] [(33 59 16 78) 16] [(15 57 75 22) 15] [(43 3 2 73) 2] [(46 29 23 95) 23] [(10 16 37 16) 10] [(52 30 1 91) 1] [(34 78 97 97) 34] [(20 41 60 82) 20] [(70 15 9 100) 9] [(42 72 3 78) 3] [(39 28 76 81) 28] [(14 18 42 62) 14] [(46 51 50 47) 46] [(-96 82 50 36) -96] [(-61 -53 93 -25) -61] [(-19 86 -78 -71) -78] [(-19 0 55 -91) -91] [(55 -95 21 34) -95] [(28 -73 -84 -65) -84] [(-51 -71 -66 -50) -71] [(-74 98 40 12) -74] [(-60 10 18 42) -60] [(100 -12 20 -55) -55] [(-42 97 14 -41) -42] [(47 -75 -76 47) -76] [(27 -95 -86 -93) -95] [(87 0 85 -96) -96] [(-43 22 35 -38) -43] [(-45 97 20 98) -45] [(-56 10 16 81) -56] [(-75 -1 30 -46) -75] [(-87 -55 27 -23) -87] [(-81 44 55 41) -81] [(-82 -90 -20 79) -90] [(-64 -19 61 -33) -64] [(-41 -75 -43 -62) -75] [(35 -3 -97 -46) -97] [(59 -47 -41 -54) -54] [(56 3 -95 -10) -95] [(35 -21 -97 52) -97] [(-52 73 -85 -40) -85] [(-81 61 51 77) -81] [(10 -19 65 -19) -19] [(95 24 -58 82) -58] [(29 -46 67 -42) -46] [(-78 96 -15 -42) -78] [(-93 59 56 25) -93] [(18 -8 -35 -62) -62] [(-90 -1 -47 -82) -90] [(85 -70 74 100) -70] [(-9 61 -28 32) -28] [(-20 -82 15 -25) -82] [(74 -5 17 19) -5] [(-45 87 6 68) -45] [(83 -11 -23 -20) -23] [(92 92 -61 -30) -61] [(-26 23 -55 79) -55] [(-4 33 -95 63) -95] [(-82 88 94 -6) -82] [(-65 4 57 7) -65] [(-36 10 23 29) -36] [(60 -4 -53 41) -53] [(79 63 -34 72) -34] [(97 54 -17 86) -17] [(-82 -70 47 75) -82] [(-49 -16 90 -12) -49] [(8 -36 71 -54) -54] [(78 -71 76 -54) -71] [(18 -15 3 36) -15] [(44 55 28 -73) -73] [(-22 38 13 -83) -83] [(13 80 62 -63) -63] [(-53 -87 -9 -33) -87])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[91 -90 91 91] -90]
Train Case:   6 | Input/Output: [[44 86 86 86] 44]
Train Case:   7 | Input/Output: [[-68 -68 34 -68] -68]
Train Case:   8 | Input/Output: [[-25 -46 -25 -25] -46]
Train Case:   9 | Input/Output: [[62 -54 62 62] -54]
Train Case:  10 | Input/Output: [[26 26 5 26] 5]
Train Case:  11 | Input/Output: [[-8 -8 -8 -13] -13]
Train Case:  12 | Input/Output: [[57 57 33 57] 33]
Train Case:  13 | Input/Output: [[31 31 -10 31] -10]
Train Case:  14 | Input/Output: [[-95 -95 -95 74] -95]
Train Case:  15 | Input/Output: [(47 47 47 47) 47]
Train Case:  16 | Input/Output: [(26 26 26 26) 26]
Train Case:  17 | Input/Output: [(50 50 50 50) 50]
Train Case:  18 | Input/Output: [(35 35 35 35) 35]
Train Case:  19 | Input/Output: [(-43 -43 -43 -43) -43]
Train Case:  20 | Input/Output: [(87 64 23 83) 23]
Train Case:  21 | Input/Output: [(29 0 6 83) 0]
Train Case:  22 | Input/Output: [(90 73 42 78) 42]
Train Case:  23 | Input/Output: [(23 88 50 60) 23]
Train Case:  24 | Input/Output: [(31 87 31 97) 31]
Train Case:  25 | Input/Output: [(20 48 30 47) 20]
Train Case:  26 | Input/Output: [(86 9 67 26) 9]
Train Case:  27 | Input/Output: [(33 59 16 78) 16]
Train Case:  28 | Input/Output: [(15 57 75 22) 15]
Train Case:  29 | Input/Output: [(43 3 2 73) 2]
Train Case:  30 | Input/Output: [(46 29 23 95) 23]
Train Case:  31 | Input/Output: [(10 16 37 16) 10]
Train Case:  32 | Input/Output: [(52 30 1 91) 1]
Train Case:  33 | Input/Output: [(34 78 97 97) 34]
Train Case:  34 | Input/Output: [(20 41 60 82) 20]
Train Case:  35 | Input/Output: [(70 15 9 100) 9]
Train Case:  36 | Input/Output: [(42 72 3 78) 3]
Train Case:  37 | Input/Output: [(39 28 76 81) 28]
Train Case:  38 | Input/Output: [(14 18 42 62) 14]
Train Case:  39 | Input/Output: [(46 51 50 47) 46]
Train Case:  40 | Input/Output: [(-96 82 50 36) -96]
Train Case:  41 | Input/Output: [(-61 -53 93 -25) -61]
Train Case:  42 | Input/Output: [(-19 86 -78 -71) -78]
Train Case:  43 | Input/Output: [(-19 0 55 -91) -91]
Train Case:  44 | Input/Output: [(55 -95 21 34) -95]
Train Case:  45 | Input/Output: [(28 -73 -84 -65) -84]
Train Case:  46 | Input/Output: [(-51 -71 -66 -50) -71]
Train Case:  47 | Input/Output: [(-74 98 40 12) -74]
Train Case:  48 | Input/Output: [(-60 10 18 42) -60]
Train Case:  49 | Input/Output: [(100 -12 20 -55) -55]
Train Case:  50 | Input/Output: [(-42 97 14 -41) -42]
Train Case:  51 | Input/Output: [(47 -75 -76 47) -76]
Train Case:  52 | Input/Output: [(27 -95 -86 -93) -95]
Train Case:  53 | Input/Output: [(87 0 85 -96) -96]
Train Case:  54 | Input/Output: [(-43 22 35 -38) -43]
Train Case:  55 | Input/Output: [(-45 97 20 98) -45]
Train Case:  56 | Input/Output: [(-56 10 16 81) -56]
Train Case:  57 | Input/Output: [(-75 -1 30 -46) -75]
Train Case:  58 | Input/Output: [(-87 -55 27 -23) -87]
Train Case:  59 | Input/Output: [(-81 44 55 41) -81]
Train Case:  60 | Input/Output: [(-82 -90 -20 79) -90]
Train Case:  61 | Input/Output: [(-64 -19 61 -33) -64]
Train Case:  62 | Input/Output: [(-41 -75 -43 -62) -75]
Train Case:  63 | Input/Output: [(35 -3 -97 -46) -97]
Train Case:  64 | Input/Output: [(59 -47 -41 -54) -54]
Train Case:  65 | Input/Output: [(56 3 -95 -10) -95]
Train Case:  66 | Input/Output: [(35 -21 -97 52) -97]
Train Case:  67 | Input/Output: [(-52 73 -85 -40) -85]
Train Case:  68 | Input/Output: [(-81 61 51 77) -81]
Train Case:  69 | Input/Output: [(10 -19 65 -19) -19]
Train Case:  70 | Input/Output: [(95 24 -58 82) -58]
Train Case:  71 | Input/Output: [(29 -46 67 -42) -46]
Train Case:  72 | Input/Output: [(-78 96 -15 -42) -78]
Train Case:  73 | Input/Output: [(-93 59 56 25) -93]
Train Case:  74 | Input/Output: [(18 -8 -35 -62) -62]
Train Case:  75 | Input/Output: [(-90 -1 -47 -82) -90]
Train Case:  76 | Input/Output: [(85 -70 74 100) -70]
Train Case:  77 | Input/Output: [(-9 61 -28 32) -28]
Train Case:  78 | Input/Output: [(-20 -82 15 -25) -82]
Train Case:  79 | Input/Output: [(74 -5 17 19) -5]
Train Case:  80 | Input/Output: [(-45 87 6 68) -45]
Train Case:  81 | Input/Output: [(83 -11 -23 -20) -23]
Train Case:  82 | Input/Output: [(92 92 -61 -30) -61]
Train Case:  83 | Input/Output: [(-26 23 -55 79) -55]
Train Case:  84 | Input/Output: [(-4 33 -95 63) -95]
Train Case:  85 | Input/Output: [(-82 88 94 -6) -82]
Train Case:  86 | Input/Output: [(-65 4 57 7) -65]
Train Case:  87 | Input/Output: [(-36 10 23 29) -36]
Train Case:  88 | Input/Output: [(60 -4 -53 41) -53]
Train Case:  89 | Input/Output: [(79 63 -34 72) -34]
Train Case:  90 | Input/Output: [(97 54 -17 86) -17]
Train Case:  91 | Input/Output: [(-82 -70 47 75) -82]
Train Case:  92 | Input/Output: [(-49 -16 90 -12) -49]
Train Case:  93 | Input/Output: [(8 -36 71 -54) -54]
Train Case:  94 | Input/Output: [(78 -71 76 -54) -71]
Train Case:  95 | Input/Output: [(18 -15 3 36) -15]
Train Case:  96 | Input/Output: [(44 55 28 -73) -73]
Train Case:  97 | Input/Output: [(-22 38 13 -83) -83]
Train Case:  98 | Input/Output: [(13 80 62 -63) -63]
Train Case:  99 | Input/Output: [(-53 -87 -9 -33) -87]
Test Case:   0 | Input/Output: [[60 -62 60 60] -62]
Test Case:   1 | Input/Output: [[19 19 -95 19] -95]
Test Case:   2 | Input/Output: [[4 4 4 15] 4]
Test Case:   3 | Input/Output: [[-11 -11 -18 -11] -18]
Test Case:   4 | Input/Output: [[71 71 71 96] 71]
Test Case:   5 | Input/Output: [[9 9 -95 9] -95]
Test Case:   6 | Input/Output: [[-95 -95 -95 -81] -95]
Test Case:   7 | Input/Output: [[74 74 -66 74] -66]
Test Case:   8 | Input/Output: [[-63 -84 -63 -63] -84]
Test Case:   9 | Input/Output: [[-66 -66 88 -66] -66]
Test Case:  10 | Input/Output: [[47 42 42 42] 42]
Test Case:  11 | Input/Output: [[77 77 88 77] 77]
Test Case:  12 | Input/Output: [[-76 8 8 8] -76]
Test Case:  13 | Input/Output: [[77 -38 77 77] -38]
Test Case:  14 | Input/Output: [[-70 62 62 62] -70]
Test Case:  15 | Input/Output: [[18 37 18 18] 18]
Test Case:  16 | Input/Output: [[80 -57 80 80] -57]
Test Case:  17 | Input/Output: [[-73 84 84 84] -73]
Test Case:  18 | Input/Output: [[-61 -61 -15 -61] -61]
Test Case:  19 | Input/Output: [[1 -22 1 1] -22]
Test Case:  20 | Input/Output: [[-31 -31 -31 69] -31]
Test Case:  21 | Input/Output: [[-21 -21 -59 -21] -59]
Test Case:  22 | Input/Output: [[-41 -10 -41 -41] -41]
Test Case:  23 | Input/Output: [[52 -42 52 52] -42]
Test Case:  24 | Input/Output: [[34 34 34 78] 34]
Test Case:  25 | Input/Output: [[-29 -29 11 -29] -29]
Test Case:  26 | Input/Output: [[-52 22 -52 -52] -52]
Test Case:  27 | Input/Output: [[-61 -29 -29 -29] -61]
Test Case:  28 | Input/Output: [[17 17 -91 17] -91]
Test Case:  29 | Input/Output: [[79 -30 -30 -30] -30]
Test Case:  30 | Input/Output: [[-17 35 -17 -17] -17]
Test Case:  31 | Input/Output: [[57 79 79 79] 57]
Test Case:  32 | Input/Output: [[-46 63 -46 -46] -46]
Test Case:  33 | Input/Output: [[61 61 -57 61] -57]
Test Case:  34 | Input/Output: [[4 13 4 4] 4]
Test Case:  35 | Input/Output: [[-90 -70 -90 -90] -90]
Test Case:  36 | Input/Output: [[-29 -39 -39 -39] -39]
Test Case:  37 | Input/Output: [[80 80 -22 80] -22]
Test Case:  38 | Input/Output: [[95 95 -59 95] -59]
Test Case:  39 | Input/Output: [[-66 -66 -66 30] -66]
Test Case:  40 | Input/Output: [[-20 -51 -51 -51] -51]
Test Case:  41 | Input/Output: [[51 51 -3 51] -3]
Test Case:  42 | Input/Output: [[-17 16 -17 -17] -17]
Test Case:  43 | Input/Output: [[40 -6 -6 -6] -6]
Test Case:  44 | Input/Output: [[-57 -57 -57 -29] -57]
Test Case:  45 | Input/Output: [[-30 40 40 40] -30]
Test Case:  46 | Input/Output: [[0 54 54 54] 0]
Test Case:  47 | Input/Output: [[-21 -77 -77 -77] -77]
Test Case:  48 | Input/Output: [[1 1 -60 1] -60]
Test Case:  49 | Input/Output: [[37 37 6 37] 6]
Test Case:  50 | Input/Output: [[-91 -91 -91 -56] -91]
Test Case:  51 | Input/Output: [[-20 -39 -20 -20] -39]
Test Case:  52 | Input/Output: [[-65 -65 30 -65] -65]
Test Case:  53 | Input/Output: [[17 33 17 17] 17]
Test Case:  54 | Input/Output: [[78 78 78 38] 38]
Test Case:  55 | Input/Output: [[50 50 -10 50] -10]
Test Case:  56 | Input/Output: [[-100 15 15 15] -100]
Test Case:  57 | Input/Output: [[87 87 1 87] 1]
Test Case:  58 | Input/Output: [[71 71 71 -53] -53]
Test Case:  59 | Input/Output: [[96 -100 -100 -100] -100]
Test Case:  60 | Input/Output: [[-25 42 42 42] -25]
Test Case:  61 | Input/Output: [[8 31 8 8] 8]
Test Case:  62 | Input/Output: [[79 79 73 79] 73]
Test Case:  63 | Input/Output: [[99 99 -54 99] -54]
Test Case:  64 | Input/Output: [[82 -77 82 82] -77]
Test Case:  65 | Input/Output: [[-34 -34 52 -34] -34]
Test Case:  66 | Input/Output: [[-96 -15 -96 -96] -96]
Test Case:  67 | Input/Output: [[36 36 36 -77] -77]
Test Case:  68 | Input/Output: [[-12 57 -12 -12] -12]
Test Case:  69 | Input/Output: [[-64 1 1 1] -64]
Test Case:  70 | Input/Output: [[48 48 52 48] 48]
Test Case:  71 | Input/Output: [[-51 -86 -51 -51] -86]
Test Case:  72 | Input/Output: [[-88 -22 -88 -88] -88]
Test Case:  73 | Input/Output: [[20 53 20 20] 20]
Test Case:  74 | Input/Output: [[-56 20 -56 -56] -56]
Test Case:  75 | Input/Output: [[-67 -67 -67 -4] -67]
Test Case:  76 | Input/Output: [[-76 59 59 59] -76]
Test Case:  77 | Input/Output: [[30 53 30 30] 30]
Test Case:  78 | Input/Output: [[19 19 19 -46] -46]
Test Case:  79 | Input/Output: [[-59 23 -59 -59] -59]
Test Case:  80 | Input/Output: [[100 -59 -59 -59] -59]
Test Case:  81 | Input/Output: [[-11 -11 -11 -52] -52]
Test Case:  82 | Input/Output: [[-13 -13 -13 -16] -16]
Test Case:  83 | Input/Output: [[43 23 23 23] 23]
Test Case:  84 | Input/Output: [[-42 -42 33 -42] -42]
Test Case:  85 | Input/Output: [[42 42 -55 42] -55]
Test Case:  86 | Input/Output: [[15 15 15 24] 15]
Test Case:  87 | Input/Output: [[-46 -46 -65 -46] -65]
Test Case:  88 | Input/Output: [[37 37 44 37] 37]
Test Case:  89 | Input/Output: [[-96 -96 70 -96] -96]
Test Case:  90 | Input/Output: [[-74 25 -74 -74] -74]
Test Case:  91 | Input/Output: [[-92 -92 -92 -29] -92]
Test Case:  92 | Input/Output: [[-22 -22 -22 0] -22]
Test Case:  93 | Input/Output: [[28 41 41 41] 28]
Test Case:  94 | Input/Output: [[38 38 -72 38] -72]
Test Case:  95 | Input/Output: [[-19 -19 -19 -11] -19]
Test Case:  96 | Input/Output: [[-81 -81 -17 -81] -81]
Test Case:  97 | Input/Output: [[15 65 65 65] 15]
Test Case:  98 | Input/Output: [[-78 -78 22 -78] -78]
Test Case:  99 | Input/Output: [[-92 -92 -78 -92] -92]
Test Case: 100 | Input/Output: [(16 16 16 16) 16]
Test Case: 101 | Input/Output: [(71 71 71 71) 71]
Test Case: 102 | Input/Output: [(44 44 44 44) 44]
Test Case: 103 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 104 | Input/Output: [(4 4 4 4) 4]
Test Case: 105 | Input/Output: [(11 11 11 11) 11]
Test Case: 106 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 107 | Input/Output: [(58 58 58 58) 58]
Test Case: 108 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 109 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 110 | Input/Output: [(35 35 35 35) 35]
Test Case: 111 | Input/Output: [(27 27 27 27) 27]
Test Case: 112 | Input/Output: [(12 12 12 12) 12]
Test Case: 113 | Input/Output: [(64 64 64 64) 64]
Test Case: 114 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 115 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 116 | Input/Output: [(97 97 97 97) 97]
Test Case: 117 | Input/Output: [(29 29 29 29) 29]
Test Case: 118 | Input/Output: [(90 90 90 90) 90]
Test Case: 119 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 120 | Input/Output: [(82 82 82 82) 82]
Test Case: 121 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 122 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 123 | Input/Output: [(6 6 6 6) 6]
Test Case: 124 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 125 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 126 | Input/Output: [(75 75 75 75) 75]
Test Case: 127 | Input/Output: [(27 27 27 27) 27]
Test Case: 128 | Input/Output: [(23 23 23 23) 23]
Test Case: 129 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 130 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 131 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 132 | Input/Output: [(96 96 96 96) 96]
Test Case: 133 | Input/Output: [(47 47 47 47) 47]
Test Case: 134 | Input/Output: [(41 41 41 41) 41]
Test Case: 135 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 136 | Input/Output: [(13 13 13 13) 13]
Test Case: 137 | Input/Output: [(85 85 85 85) 85]
Test Case: 138 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 139 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 140 | Input/Output: [(67 67 67 67) 67]
Test Case: 141 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 142 | Input/Output: [(59 59 59 59) 59]
Test Case: 143 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 144 | Input/Output: [(71 71 71 71) 71]
Test Case: 145 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 146 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 147 | Input/Output: [(22 22 22 22) 22]
Test Case: 148 | Input/Output: [(62 62 62 62) 62]
Test Case: 149 | Input/Output: [(89 89 89 89) 89]
Test Case: 150 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 151 | Input/Output: [(88 88 88 88) 88]
Test Case: 152 | Input/Output: [(15 15 15 15) 15]
Test Case: 153 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 154 | Input/Output: [(64 64 64 64) 64]
Test Case: 155 | Input/Output: [(78 78 78 78) 78]
Test Case: 156 | Input/Output: [(69 69 69 69) 69]
Test Case: 157 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 158 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 159 | Input/Output: [(22 22 22 22) 22]
Test Case: 160 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 161 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 162 | Input/Output: [(85 85 85 85) 85]
Test Case: 163 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 164 | Input/Output: [(25 25 25 25) 25]
Test Case: 165 | Input/Output: [(14 14 14 14) 14]
Test Case: 166 | Input/Output: [(73 73 73 73) 73]
Test Case: 167 | Input/Output: [(24 24 24 24) 24]
Test Case: 168 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 169 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 170 | Input/Output: [(64 64 64 64) 64]
Test Case: 171 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 172 | Input/Output: [(65 65 65 65) 65]
Test Case: 173 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 174 | Input/Output: [(86 86 86 86) 86]
Test Case: 175 | Input/Output: [(51 51 51 51) 51]
Test Case: 176 | Input/Output: [(30 30 30 30) 30]
Test Case: 177 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 178 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 179 | Input/Output: [(52 52 52 52) 52]
Test Case: 180 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 181 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 182 | Input/Output: [(75 75 75 75) 75]
Test Case: 183 | Input/Output: [(99 99 99 99) 99]
Test Case: 184 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 185 | Input/Output: [(27 27 27 27) 27]
Test Case: 186 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 187 | Input/Output: [(27 27 27 27) 27]
Test Case: 188 | Input/Output: [(82 82 82 82) 82]
Test Case: 189 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 190 | Input/Output: [(43 43 43 43) 43]
Test Case: 191 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 192 | Input/Output: [(5 5 5 5) 5]
Test Case: 193 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 194 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 195 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 196 | Input/Output: [(13 13 13 13) 13]
Test Case: 197 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 198 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 199 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 200 | Input/Output: [(74 15 38 43) 15]
Test Case: 201 | Input/Output: [(29 14 73 89) 14]
Test Case: 202 | Input/Output: [(86 9 24 37) 9]
Test Case: 203 | Input/Output: [(21 28 79 10) 10]
Test Case: 204 | Input/Output: [(3 47 58 59) 3]
Test Case: 205 | Input/Output: [(50 73 5 18) 5]
Test Case: 206 | Input/Output: [(29 82 15 20) 15]
Test Case: 207 | Input/Output: [(0 11 98 90) 0]
Test Case: 208 | Input/Output: [(66 70 79 71) 66]
Test Case: 209 | Input/Output: [(36 23 57 99) 23]
Test Case: 210 | Input/Output: [(46 35 74 16) 16]
Test Case: 211 | Input/Output: [(41 14 0 33) 0]
Test Case: 212 | Input/Output: [(23 76 3 1) 1]
Test Case: 213 | Input/Output: [(0 81 63 44) 0]
Test Case: 214 | Input/Output: [(30 46 53 61) 30]
Test Case: 215 | Input/Output: [(42 9 49 48) 9]
Test Case: 216 | Input/Output: [(68 95 94 93) 68]
Test Case: 217 | Input/Output: [(37 16 65 87) 16]
Test Case: 218 | Input/Output: [(85 70 84 54) 54]
Test Case: 219 | Input/Output: [(98 94 11 65) 11]
Test Case: 220 | Input/Output: [(46 11 38 74) 11]
Test Case: 221 | Input/Output: [(28 26 93 85) 26]
Test Case: 222 | Input/Output: [(15 48 19 100) 15]
Test Case: 223 | Input/Output: [(48 81 45 93) 45]
Test Case: 224 | Input/Output: [(100 4 59 78) 4]
Test Case: 225 | Input/Output: [(20 49 49 3) 3]
Test Case: 226 | Input/Output: [(73 78 11 64) 11]
Test Case: 227 | Input/Output: [(73 18 39 1) 1]
Test Case: 228 | Input/Output: [(10 16 61 95) 10]
Test Case: 229 | Input/Output: [(78 98 8 70) 8]
Test Case: 230 | Input/Output: [(29 100 57 65) 29]
Test Case: 231 | Input/Output: [(96 55 95 27) 27]
Test Case: 232 | Input/Output: [(91 21 44 33) 21]
Test Case: 233 | Input/Output: [(17 30 68 57) 17]
Test Case: 234 | Input/Output: [(20 75 76 55) 20]
Test Case: 235 | Input/Output: [(30 60 43 56) 30]
Test Case: 236 | Input/Output: [(11 66 7 36) 7]
Test Case: 237 | Input/Output: [(29 58 22 18) 18]
Test Case: 238 | Input/Output: [(42 32 33 78) 32]
Test Case: 239 | Input/Output: [(32 93 51 82) 32]
Test Case: 240 | Input/Output: [(83 74 64 20) 20]
Test Case: 241 | Input/Output: [(12 45 52 98) 12]
Test Case: 242 | Input/Output: [(92 38 14 54) 14]
Test Case: 243 | Input/Output: [(48 15 10 41) 10]
Test Case: 244 | Input/Output: [(76 72 15 48) 15]
Test Case: 245 | Input/Output: [(11 0 17 34) 0]
Test Case: 246 | Input/Output: [(86 75 45 90) 45]
Test Case: 247 | Input/Output: [(5 28 58 31) 5]
Test Case: 248 | Input/Output: [(86 52 66 56) 52]
Test Case: 249 | Input/Output: [(21 95 77 50) 21]
Test Case: 250 | Input/Output: [(30 87 49 100) 30]
Test Case: 251 | Input/Output: [(30 26 92 14) 14]
Test Case: 252 | Input/Output: [(59 11 71 27) 11]
Test Case: 253 | Input/Output: [(94 96 1 16) 1]
Test Case: 254 | Input/Output: [(46 32 9 6) 6]
Test Case: 255 | Input/Output: [(64 69 28 14) 14]
Test Case: 256 | Input/Output: [(98 26 38 94) 26]
Test Case: 257 | Input/Output: [(43 25 97 7) 7]
Test Case: 258 | Input/Output: [(86 30 14 57) 14]
Test Case: 259 | Input/Output: [(29 12 5 53) 5]
Test Case: 260 | Input/Output: [(27 68 24 2) 2]
Test Case: 261 | Input/Output: [(10 84 18 59) 10]
Test Case: 262 | Input/Output: [(55 77 30 25) 25]
Test Case: 263 | Input/Output: [(100 45 79 80) 45]
Test Case: 264 | Input/Output: [(69 92 30 39) 30]
Test Case: 265 | Input/Output: [(91 94 4 99) 4]
Test Case: 266 | Input/Output: [(56 53 43 32) 32]
Test Case: 267 | Input/Output: [(33 24 48 8) 8]
Test Case: 268 | Input/Output: [(70 38 82 78) 38]
Test Case: 269 | Input/Output: [(38 6 13 97) 6]
Test Case: 270 | Input/Output: [(78 100 87 47) 47]
Test Case: 271 | Input/Output: [(32 37 65 96) 32]
Test Case: 272 | Input/Output: [(73 45 56 91) 45]
Test Case: 273 | Input/Output: [(35 60 28 60) 28]
Test Case: 274 | Input/Output: [(84 13 85 79) 13]
Test Case: 275 | Input/Output: [(73 68 54 19) 19]
Test Case: 276 | Input/Output: [(15 97 15 84) 15]
Test Case: 277 | Input/Output: [(24 75 41 97) 24]
Test Case: 278 | Input/Output: [(68 11 49 59) 11]
Test Case: 279 | Input/Output: [(28 25 91 81) 25]
Test Case: 280 | Input/Output: [(32 9 98 98) 9]
Test Case: 281 | Input/Output: [(79 70 93 36) 36]
Test Case: 282 | Input/Output: [(49 21 50 30) 21]
Test Case: 283 | Input/Output: [(16 35 3 2) 2]
Test Case: 284 | Input/Output: [(3 13 2 3) 2]
Test Case: 285 | Input/Output: [(55 99 61 24) 24]
Test Case: 286 | Input/Output: [(64 73 54 4) 4]
Test Case: 287 | Input/Output: [(48 81 96 74) 48]
Test Case: 288 | Input/Output: [(84 55 86 37) 37]
Test Case: 289 | Input/Output: [(25 27 59 65) 25]
Test Case: 290 | Input/Output: [(78 91 90 77) 77]
Test Case: 291 | Input/Output: [(76 85 2 10) 2]
Test Case: 292 | Input/Output: [(6 15 89 5) 5]
Test Case: 293 | Input/Output: [(33 87 77 54) 33]
Test Case: 294 | Input/Output: [(22 85 85 35) 22]
Test Case: 295 | Input/Output: [(63 88 98 50) 50]
Test Case: 296 | Input/Output: [(78 39 24 47) 24]
Test Case: 297 | Input/Output: [(79 70 28 78) 28]
Test Case: 298 | Input/Output: [(18 72 20 16) 16]
Test Case: 299 | Input/Output: [(4 82 34 27) 4]
Test Case: 300 | Input/Output: [(76 76 28 91) 28]
Test Case: 301 | Input/Output: [(21 43 0 73) 0]
Test Case: 302 | Input/Output: [(45 30 96 4) 4]
Test Case: 303 | Input/Output: [(73 70 17 88) 17]
Test Case: 304 | Input/Output: [(41 83 36 70) 36]
Test Case: 305 | Input/Output: [(92 16 39 62) 16]
Test Case: 306 | Input/Output: [(16 43 43 15) 15]
Test Case: 307 | Input/Output: [(71 24 12 6) 6]
Test Case: 308 | Input/Output: [(98 95 37 52) 37]
Test Case: 309 | Input/Output: [(15 93 24 19) 15]
Test Case: 310 | Input/Output: [(71 73 27 7) 7]
Test Case: 311 | Input/Output: [(73 78 2 57) 2]
Test Case: 312 | Input/Output: [(30 7 26 47) 7]
Test Case: 313 | Input/Output: [(84 20 79 93) 20]
Test Case: 314 | Input/Output: [(14 64 83 11) 11]
Test Case: 315 | Input/Output: [(66 70 63 25) 25]
Test Case: 316 | Input/Output: [(91 96 95 73) 73]
Test Case: 317 | Input/Output: [(3 98 15 61) 3]
Test Case: 318 | Input/Output: [(54 13 35 21) 13]
Test Case: 319 | Input/Output: [(89 50 43 75) 43]
Test Case: 320 | Input/Output: [(15 27 92 69) 15]
Test Case: 321 | Input/Output: [(92 31 20 65) 20]
Test Case: 322 | Input/Output: [(44 45 38 96) 38]
Test Case: 323 | Input/Output: [(26 88 29 13) 13]
Test Case: 324 | Input/Output: [(25 54 89 49) 25]
Test Case: 325 | Input/Output: [(89 92 93 91) 89]
Test Case: 326 | Input/Output: [(36 6 81 17) 6]
Test Case: 327 | Input/Output: [(68 52 0 21) 0]
Test Case: 328 | Input/Output: [(20 86 44 84) 20]
Test Case: 329 | Input/Output: [(3 14 100 13) 3]
Test Case: 330 | Input/Output: [(65 95 19 64) 19]
Test Case: 331 | Input/Output: [(60 8 83 88) 8]
Test Case: 332 | Input/Output: [(61 65 53 98) 53]
Test Case: 333 | Input/Output: [(3 78 70 92) 3]
Test Case: 334 | Input/Output: [(9 87 16 41) 9]
Test Case: 335 | Input/Output: [(65 95 96 19) 19]
Test Case: 336 | Input/Output: [(51 93 67 76) 51]
Test Case: 337 | Input/Output: [(91 4 70 49) 4]
Test Case: 338 | Input/Output: [(62 55 56 13) 13]
Test Case: 339 | Input/Output: [(27 94 11 96) 11]
Test Case: 340 | Input/Output: [(59 61 2 34) 2]
Test Case: 341 | Input/Output: [(48 24 87 55) 24]
Test Case: 342 | Input/Output: [(98 0 97 77) 0]
Test Case: 343 | Input/Output: [(14 14 74 96) 14]
Test Case: 344 | Input/Output: [(100 81 4 46) 4]
Test Case: 345 | Input/Output: [(17 62 73 3) 3]
Test Case: 346 | Input/Output: [(77 83 32 63) 32]
Test Case: 347 | Input/Output: [(38 75 27 85) 27]
Test Case: 348 | Input/Output: [(84 16 71 7) 7]
Test Case: 349 | Input/Output: [(42 71 30 87) 30]
Test Case: 350 | Input/Output: [(61 99 63 23) 23]
Test Case: 351 | Input/Output: [(54 86 34 37) 34]
Test Case: 352 | Input/Output: [(26 18 63 39) 18]
Test Case: 353 | Input/Output: [(79 15 11 60) 11]
Test Case: 354 | Input/Output: [(33 48 74 85) 33]
Test Case: 355 | Input/Output: [(9 2 72 64) 2]
Test Case: 356 | Input/Output: [(40 16 92 30) 16]
Test Case: 357 | Input/Output: [(31 36 74 94) 31]
Test Case: 358 | Input/Output: [(93 67 85 8) 8]
Test Case: 359 | Input/Output: [(54 71 66 96) 54]
Test Case: 360 | Input/Output: [(98 70 96 94) 70]
Test Case: 361 | Input/Output: [(81 63 40 51) 40]
Test Case: 362 | Input/Output: [(41 26 17 21) 17]
Test Case: 363 | Input/Output: [(77 99 74 75) 74]
Test Case: 364 | Input/Output: [(15 59 0 89) 0]
Test Case: 365 | Input/Output: [(67 94 58 88) 58]
Test Case: 366 | Input/Output: [(66 74 2 8) 2]
Test Case: 367 | Input/Output: [(33 59 46 26) 26]
Test Case: 368 | Input/Output: [(27 29 100 20) 20]
Test Case: 369 | Input/Output: [(46 36 16 44) 16]
Test Case: 370 | Input/Output: [(39 81 21 70) 21]
Test Case: 371 | Input/Output: [(100 54 0 88) 0]
Test Case: 372 | Input/Output: [(32 23 0 21) 0]
Test Case: 373 | Input/Output: [(17 40 72 33) 17]
Test Case: 374 | Input/Output: [(29 53 55 33) 29]
Test Case: 375 | Input/Output: [(33 72 98 44) 33]
Test Case: 376 | Input/Output: [(87 94 82 96) 82]
Test Case: 377 | Input/Output: [(73 90 43 29) 29]
Test Case: 378 | Input/Output: [(51 39 88 55) 39]
Test Case: 379 | Input/Output: [(70 78 33 65) 33]
Test Case: 380 | Input/Output: [(7 78 77 76) 7]
Test Case: 381 | Input/Output: [(50 24 31 54) 24]
Test Case: 382 | Input/Output: [(30 17 45 100) 17]
Test Case: 383 | Input/Output: [(95 9 90 49) 9]
Test Case: 384 | Input/Output: [(23 32 0 20) 0]
Test Case: 385 | Input/Output: [(20 44 17 57) 17]
Test Case: 386 | Input/Output: [(77 98 87 3) 3]
Test Case: 387 | Input/Output: [(50 23 88 55) 23]
Test Case: 388 | Input/Output: [(85 74 23 48) 23]
Test Case: 389 | Input/Output: [(82 63 5 20) 5]
Test Case: 390 | Input/Output: [(57 58 0 32) 0]
Test Case: 391 | Input/Output: [(75 64 57 24) 24]
Test Case: 392 | Input/Output: [(52 40 27 59) 27]
Test Case: 393 | Input/Output: [(48 53 54 7) 7]
Test Case: 394 | Input/Output: [(38 29 69 53) 29]
Test Case: 395 | Input/Output: [(66 5 39 59) 5]
Test Case: 396 | Input/Output: [(72 47 57 93) 47]
Test Case: 397 | Input/Output: [(100 5 3 25) 3]
Test Case: 398 | Input/Output: [(66 41 28 76) 28]
Test Case: 399 | Input/Output: [(94 24 13 48) 13]
Test Case: 400 | Input/Output: [(47 32 62 -79) -79]
Test Case: 401 | Input/Output: [(-39 -5 -61 -32) -61]
Test Case: 402 | Input/Output: [(-3 45 -66 56) -66]
Test Case: 403 | Input/Output: [(15 65 -90 39) -90]
Test Case: 404 | Input/Output: [(90 100 99 46) 46]
Test Case: 405 | Input/Output: [(-41 -54 49 -30) -54]
Test Case: 406 | Input/Output: [(5 5 50 39) 5]
Test Case: 407 | Input/Output: [(-68 -83 -12 -12) -83]
Test Case: 408 | Input/Output: [(28 22 -49 36) -49]
Test Case: 409 | Input/Output: [(58 37 -12 -4) -12]
Test Case: 410 | Input/Output: [(94 52 -56 43) -56]
Test Case: 411 | Input/Output: [(-54 -27 82 -17) -54]
Test Case: 412 | Input/Output: [(-97 1 -67 56) -97]
Test Case: 413 | Input/Output: [(78 -39 -91 -93) -93]
Test Case: 414 | Input/Output: [(-22 -66 -53 -91) -91]
Test Case: 415 | Input/Output: [(-69 -97 -74 -21) -97]
Test Case: 416 | Input/Output: [(74 -98 28 -31) -98]
Test Case: 417 | Input/Output: [(55 38 96 100) 38]
Test Case: 418 | Input/Output: [(-30 11 -3 80) -30]
Test Case: 419 | Input/Output: [(43 -96 58 -36) -96]
Test Case: 420 | Input/Output: [(17 -62 -94 -68) -94]
Test Case: 421 | Input/Output: [(-95 58 69 -88) -95]
Test Case: 422 | Input/Output: [(-46 24 -5 -57) -57]
Test Case: 423 | Input/Output: [(19 56 44 -95) -95]
Test Case: 424 | Input/Output: [(95 -77 -45 24) -77]
Test Case: 425 | Input/Output: [(-36 -53 -82 84) -82]
Test Case: 426 | Input/Output: [(96 -51 -34 38) -51]
Test Case: 427 | Input/Output: [(-56 27 -100 -44) -100]
Test Case: 428 | Input/Output: [(53 -79 -62 -31) -79]
Test Case: 429 | Input/Output: [(24 3 28 55) 3]
Test Case: 430 | Input/Output: [(-11 20 13 -22) -22]
Test Case: 431 | Input/Output: [(-40 51 82 -8) -40]
Test Case: 432 | Input/Output: [(32 -60 -6 -17) -60]
Test Case: 433 | Input/Output: [(-65 -51 -80 -10) -80]
Test Case: 434 | Input/Output: [(49 47 -61 -94) -94]
Test Case: 435 | Input/Output: [(84 -70 67 -86) -86]
Test Case: 436 | Input/Output: [(-5 -7 -10 34) -10]
Test Case: 437 | Input/Output: [(91 -71 -67 -97) -97]
Test Case: 438 | Input/Output: [(-6 -71 -15 66) -71]
Test Case: 439 | Input/Output: [(-6 -17 65 -46) -46]
Test Case: 440 | Input/Output: [(44 -74 -92 -20) -92]
Test Case: 441 | Input/Output: [(-54 85 98 65) -54]
Test Case: 442 | Input/Output: [(-94 57 21 1) -94]
Test Case: 443 | Input/Output: [(52 -75 74 -89) -89]
Test Case: 444 | Input/Output: [(-60 11 95 -43) -60]
Test Case: 445 | Input/Output: [(-20 91 55 23) -20]
Test Case: 446 | Input/Output: [(-15 -63 4 -34) -63]
Test Case: 447 | Input/Output: [(-23 -78 -43 18) -78]
Test Case: 448 | Input/Output: [(-13 -94 31 64) -94]
Test Case: 449 | Input/Output: [(11 85 -52 -25) -52]
Test Case: 450 | Input/Output: [(56 41 26 86) 26]
Test Case: 451 | Input/Output: [(-71 74 -29 51) -71]
Test Case: 452 | Input/Output: [(14 -25 56 -5) -25]
Test Case: 453 | Input/Output: [(13 98 81 33) 13]
Test Case: 454 | Input/Output: [(61 -75 97 -61) -75]
Test Case: 455 | Input/Output: [(32 14 17 41) 14]
Test Case: 456 | Input/Output: [(-99 49 12 -3) -99]
Test Case: 457 | Input/Output: [(-33 -27 -33 -89) -89]
Test Case: 458 | Input/Output: [(-34 -90 61 -6) -90]
Test Case: 459 | Input/Output: [(-59 96 60 -20) -59]
Test Case: 460 | Input/Output: [(29 -93 16 -86) -93]
Test Case: 461 | Input/Output: [(18 96 24 30) 18]
Test Case: 462 | Input/Output: [(-47 61 -5 -57) -57]
Test Case: 463 | Input/Output: [(25 -6 18 -73) -73]
Test Case: 464 | Input/Output: [(22 -26 14 29) -26]
Test Case: 465 | Input/Output: [(40 -67 -24 18) -67]
Test Case: 466 | Input/Output: [(92 -7 65 60) -7]
Test Case: 467 | Input/Output: [(38 9 76 51) 9]
Test Case: 468 | Input/Output: [(84 -93 -69 -77) -93]
Test Case: 469 | Input/Output: [(-58 -28 -18 -37) -58]
Test Case: 470 | Input/Output: [(85 96 21 -53) -53]
Test Case: 471 | Input/Output: [(67 81 -25 -43) -43]
Test Case: 472 | Input/Output: [(68 -30 100 -32) -32]
Test Case: 473 | Input/Output: [(-74 46 -96 -64) -96]
Test Case: 474 | Input/Output: [(79 25 -89 -83) -89]
Test Case: 475 | Input/Output: [(-29 61 15 52) -29]
Test Case: 476 | Input/Output: [(-5 61 -10 -88) -88]
Test Case: 477 | Input/Output: [(-57 -21 84 84) -57]
Test Case: 478 | Input/Output: [(-10 -8 -33 17) -33]
Test Case: 479 | Input/Output: [(86 46 -22 40) -22]
Test Case: 480 | Input/Output: [(-33 37 -55 18) -55]
Test Case: 481 | Input/Output: [(-81 -17 50 24) -81]
Test Case: 482 | Input/Output: [(26 28 -28 4) -28]
Test Case: 483 | Input/Output: [(10 39 9 -75) -75]
Test Case: 484 | Input/Output: [(-95 -27 -25 91) -95]
Test Case: 485 | Input/Output: [(2 -8 -6 -40) -40]
Test Case: 486 | Input/Output: [(-21 -87 -40 90) -87]
Test Case: 487 | Input/Output: [(7 -96 41 84) -96]
Test Case: 488 | Input/Output: [(48 86 -87 76) -87]
Test Case: 489 | Input/Output: [(27 84 90 -40) -40]
Test Case: 490 | Input/Output: [(-89 61 90 79) -89]
Test Case: 491 | Input/Output: [(-8 6 -92 -4) -92]
Test Case: 492 | Input/Output: [(-62 6 -65 -83) -83]
Test Case: 493 | Input/Output: [(91 -27 -41 -41) -41]
Test Case: 494 | Input/Output: [(26 -11 -82 89) -82]
Test Case: 495 | Input/Output: [(-25 -94 -43 4) -94]
Test Case: 496 | Input/Output: [(27 -3 93 -42) -42]
Test Case: 497 | Input/Output: [(-46 -8 95 33) -46]
Test Case: 498 | Input/Output: [(-25 -94 -83 38) -94]
Test Case: 499 | Input/Output: [(43 38 -97 -87) -97]
Test Case: 500 | Input/Output: [(-60 -45 70 100) -60]
Test Case: 501 | Input/Output: [(-27 -47 -58 -24) -58]
Test Case: 502 | Input/Output: [(82 12 -74 -13) -74]
Test Case: 503 | Input/Output: [(-4 -43 60 72) -43]
Test Case: 504 | Input/Output: [(74 82 65 59) 59]
Test Case: 505 | Input/Output: [(68 -78 -51 69) -78]
Test Case: 506 | Input/Output: [(32 -98 -82 74) -98]
Test Case: 507 | Input/Output: [(-87 44 13 49) -87]
Test Case: 508 | Input/Output: [(-43 24 30 59) -43]
Test Case: 509 | Input/Output: [(-37 33 91 7) -37]
Test Case: 510 | Input/Output: [(-90 20 87 -50) -90]
Test Case: 511 | Input/Output: [(52 -38 43 -14) -38]
Test Case: 512 | Input/Output: [(-24 10 -6 9) -24]
Test Case: 513 | Input/Output: [(-69 -66 69 35) -69]
Test Case: 514 | Input/Output: [(9 -34 68 2) -34]
Test Case: 515 | Input/Output: [(-56 -96 22 -5) -96]
Test Case: 516 | Input/Output: [(-91 -45 -24 42) -91]
Test Case: 517 | Input/Output: [(52 -49 -9 85) -49]
Test Case: 518 | Input/Output: [(30 62 -36 87) -36]
Test Case: 519 | Input/Output: [(35 -98 98 62) -98]
Test Case: 520 | Input/Output: [(-76 12 -54 73) -76]
Test Case: 521 | Input/Output: [(87 68 70 0) 0]
Test Case: 522 | Input/Output: [(21 11 -67 5) -67]
Test Case: 523 | Input/Output: [(26 -26 80 -40) -40]
Test Case: 524 | Input/Output: [(29 -4 45 -62) -62]
Test Case: 525 | Input/Output: [(-48 -76 -78 -69) -78]
Test Case: 526 | Input/Output: [(21 -18 45 55) -18]
Test Case: 527 | Input/Output: [(40 47 30 33) 30]
Test Case: 528 | Input/Output: [(-81 -14 -50 -88) -88]
Test Case: 529 | Input/Output: [(-22 -92 -13 14) -92]
Test Case: 530 | Input/Output: [(50 24 97 27) 24]
Test Case: 531 | Input/Output: [(66 -13 -69 91) -69]
Test Case: 532 | Input/Output: [(81 -16 51 -26) -26]
Test Case: 533 | Input/Output: [(-55 81 12 62) -55]
Test Case: 534 | Input/Output: [(-77 -71 -79 7) -79]
Test Case: 535 | Input/Output: [(-54 -49 45 62) -54]
Test Case: 536 | Input/Output: [(-37 -75 66 31) -75]
Test Case: 537 | Input/Output: [(-66 46 -1 -45) -66]
Test Case: 538 | Input/Output: [(49 -99 86 -28) -99]
Test Case: 539 | Input/Output: [(-84 68 53 95) -84]
Test Case: 540 | Input/Output: [(6 -76 -21 -3) -76]
Test Case: 541 | Input/Output: [(88 -25 -14 0) -25]
Test Case: 542 | Input/Output: [(-40 79 -68 58) -68]
Test Case: 543 | Input/Output: [(-94 69 9 28) -94]
Test Case: 544 | Input/Output: [(-73 70 -32 -45) -73]
Test Case: 545 | Input/Output: [(-43 -73 -46 39) -73]
Test Case: 546 | Input/Output: [(92 -87 85 97) -87]
Test Case: 547 | Input/Output: [(74 -93 -44 76) -93]
Test Case: 548 | Input/Output: [(67 49 -62 -23) -62]
Test Case: 549 | Input/Output: [(-11 96 -73 -78) -78]
Test Case: 550 | Input/Output: [(-89 69 -17 35) -89]
Test Case: 551 | Input/Output: [(40 -5 -47 -17) -47]
Test Case: 552 | Input/Output: [(-7 -22 -25 16) -25]
Test Case: 553 | Input/Output: [(48 78 -76 100) -76]
Test Case: 554 | Input/Output: [(9 56 64 72) 9]
Test Case: 555 | Input/Output: [(94 1 8 5) 1]
Test Case: 556 | Input/Output: [(16 77 -16 -28) -28]
Test Case: 557 | Input/Output: [(-66 -46 57 29) -66]
Test Case: 558 | Input/Output: [(-57 -72 -32 76) -72]
Test Case: 559 | Input/Output: [(34 -77 -67 88) -77]
Test Case: 560 | Input/Output: [(-53 -91 -47 -68) -91]
Test Case: 561 | Input/Output: [(80 -44 16 100) -44]
Test Case: 562 | Input/Output: [(31 -100 9 -76) -100]
Test Case: 563 | Input/Output: [(-73 22 50 67) -73]
Test Case: 564 | Input/Output: [(81 -1 -30 -78) -78]
Test Case: 565 | Input/Output: [(64 -26 -25 -89) -89]
Test Case: 566 | Input/Output: [(98 23 -8 61) -8]
Test Case: 567 | Input/Output: [(-89 1 -20 -43) -89]
Test Case: 568 | Input/Output: [(-12 39 30 -20) -20]
Test Case: 569 | Input/Output: [(88 97 -87 58) -87]
Test Case: 570 | Input/Output: [(47 1 -80 -54) -80]
Test Case: 571 | Input/Output: [(-2 -40 -97 90) -97]
Test Case: 572 | Input/Output: [(73 32 27 -20) -20]
Test Case: 573 | Input/Output: [(18 40 97 71) 18]
Test Case: 574 | Input/Output: [(27 -18 -37 52) -37]
Test Case: 575 | Input/Output: [(81 -38 -22 -79) -79]
Test Case: 576 | Input/Output: [(-2 -46 54 0) -46]
Test Case: 577 | Input/Output: [(47 -69 -92 42) -92]
Test Case: 578 | Input/Output: [(60 -83 8 39) -83]
Test Case: 579 | Input/Output: [(-59 55 -84 -55) -84]
Test Case: 580 | Input/Output: [(90 -34 -94 18) -94]
Test Case: 581 | Input/Output: [(91 -11 -71 42) -71]
Test Case: 582 | Input/Output: [(-14 -93 -29 5) -93]
Test Case: 583 | Input/Output: [(-95 92 -55 -100) -100]
Test Case: 584 | Input/Output: [(-54 43 36 15) -54]
Test Case: 585 | Input/Output: [(-83 61 17 62) -83]
Test Case: 586 | Input/Output: [(52 49 21 1) 1]
Test Case: 587 | Input/Output: [(60 39 -93 83) -93]
Test Case: 588 | Input/Output: [(-70 -61 -61 99) -70]
Test Case: 589 | Input/Output: [(-76 44 39 35) -76]
Test Case: 590 | Input/Output: [(31 -21 10 95) -21]
Test Case: 591 | Input/Output: [(82 10 -97 -92) -97]
Test Case: 592 | Input/Output: [(-78 -8 -5 32) -78]
Test Case: 593 | Input/Output: [(49 -20 11 100) -20]
Test Case: 594 | Input/Output: [(51 -99 85 -96) -99]
Test Case: 595 | Input/Output: [(3 91 77 -28) -28]
Test Case: 596 | Input/Output: [(53 43 59 88) 43]
Test Case: 597 | Input/Output: [(-93 66 -46 15) -93]
Test Case: 598 | Input/Output: [(-92 81 52 -76) -92]
Test Case: 599 | Input/Output: [(-72 -80 -14 -7) -80]
Test Case: 600 | Input/Output: [(99 -50 -85 -16) -85]
Test Case: 601 | Input/Output: [(67 29 -43 23) -43]
Test Case: 602 | Input/Output: [(-78 -59 -13 -61) -78]
Test Case: 603 | Input/Output: [(-29 23 -61 -66) -66]
Test Case: 604 | Input/Output: [(95 38 -75 -48) -75]
Test Case: 605 | Input/Output: [(-18 -80 -32 81) -80]
Test Case: 606 | Input/Output: [(51 -100 6 63) -100]
Test Case: 607 | Input/Output: [(-12 66 -29 52) -29]
Test Case: 608 | Input/Output: [(33 -38 28 -51) -51]
Test Case: 609 | Input/Output: [(-72 55 -97 47) -97]
Test Case: 610 | Input/Output: [(-42 12 82 -15) -42]
Test Case: 611 | Input/Output: [(1 55 77 5) 1]
Test Case: 612 | Input/Output: [(51 -21 -6 24) -21]
Test Case: 613 | Input/Output: [(44 -64 7 -53) -64]
Test Case: 614 | Input/Output: [(83 -54 -3 -74) -74]
Test Case: 615 | Input/Output: [(30 70 -15 49) -15]
Test Case: 616 | Input/Output: [(-77 -62 -19 -26) -77]
Test Case: 617 | Input/Output: [(25 37 -44 -49) -49]
Test Case: 618 | Input/Output: [(-46 75 -77 -49) -77]
Test Case: 619 | Input/Output: [(47 78 -40 -94) -94]
Test Case: 620 | Input/Output: [(94 -47 71 39) -47]
Test Case: 621 | Input/Output: [(65 83 4 -92) -92]
Test Case: 622 | Input/Output: [(-42 94 93 -6) -42]
Test Case: 623 | Input/Output: [(-76 40 73 -48) -76]
Test Case: 624 | Input/Output: [(-98 4 34 87) -98]
Test Case: 625 | Input/Output: [(90 38 33 -3) -3]
Test Case: 626 | Input/Output: [(55 -96 56 -47) -96]
Test Case: 627 | Input/Output: [(-69 -14 47 -1) -69]
Test Case: 628 | Input/Output: [(19 57 -29 -21) -29]
Test Case: 629 | Input/Output: [(-1 -12 -9 86) -12]
Test Case: 630 | Input/Output: [(94 25 93 -27) -27]
Test Case: 631 | Input/Output: [(-64 80 15 21) -64]
Test Case: 632 | Input/Output: [(-94 6 8 82) -94]
Test Case: 633 | Input/Output: [(21 46 -8 80) -8]
Test Case: 634 | Input/Output: [(-88 -82 -37 -71) -88]
Test Case: 635 | Input/Output: [(-11 37 -47 -62) -62]
Test Case: 636 | Input/Output: [(54 94 -11 -22) -22]
Test Case: 637 | Input/Output: [(9 -9 -45 -61) -61]
Test Case: 638 | Input/Output: [(25 96 14 -28) -28]
Test Case: 639 | Input/Output: [(-21 87 -64 28) -64]
Test Case: 640 | Input/Output: [(-55 -91 -60 44) -91]
Test Case: 641 | Input/Output: [(-46 -31 88 -51) -51]
Test Case: 642 | Input/Output: [(15 -82 99 55) -82]
Test Case: 643 | Input/Output: [(-86 74 -99 16) -99]
Test Case: 644 | Input/Output: [(53 -67 -5 66) -67]
Test Case: 645 | Input/Output: [(5 23 20 96) 5]
Test Case: 646 | Input/Output: [(-85 -88 49 -46) -88]
Test Case: 647 | Input/Output: [(-56 -37 15 -55) -56]
Test Case: 648 | Input/Output: [(22 -41 -63 63) -63]
Test Case: 649 | Input/Output: [(66 -33 33 -47) -47]
Test Case: 650 | Input/Output: [(-66 42 4 -90) -90]
Test Case: 651 | Input/Output: [(-90 -57 -2 -16) -90]
Test Case: 652 | Input/Output: [(-14 79 -56 47) -56]
Test Case: 653 | Input/Output: [(-28 36 -88 20) -88]
Test Case: 654 | Input/Output: [(30 -4 60 68) -4]
Test Case: 655 | Input/Output: [(63 -87 7 25) -87]
Test Case: 656 | Input/Output: [(-72 -84 -96 60) -96]
Test Case: 657 | Input/Output: [(-24 86 -55 -41) -55]
Test Case: 658 | Input/Output: [(16 18 64 26) 16]
Test Case: 659 | Input/Output: [(-74 -24 -47 27) -74]
Test Case: 660 | Input/Output: [(76 -46 -32 -50) -50]
Test Case: 661 | Input/Output: [(-55 -14 -23 -39) -55]
Test Case: 662 | Input/Output: [(-88 -46 -51 -28) -88]
Test Case: 663 | Input/Output: [(-10 -91 2 67) -91]
Test Case: 664 | Input/Output: [(-87 5 98 -33) -87]
Test Case: 665 | Input/Output: [(5 34 50 69) 5]
Test Case: 666 | Input/Output: [(74 30 -55 34) -55]
Test Case: 667 | Input/Output: [(-34 87 -31 -65) -65]
Test Case: 668 | Input/Output: [(-92 -3 44 -4) -92]
Test Case: 669 | Input/Output: [(-64 -43 -28 -66) -66]
Test Case: 670 | Input/Output: [(56 -78 76 -18) -78]
Test Case: 671 | Input/Output: [(-87 -75 96 -48) -87]
Test Case: 672 | Input/Output: [(41 -69 11 -40) -69]
Test Case: 673 | Input/Output: [(55 96 -54 -72) -72]
Test Case: 674 | Input/Output: [(-76 20 -48 -75) -76]
Test Case: 675 | Input/Output: [(84 -58 -72 -24) -72]
Test Case: 676 | Input/Output: [(-73 71 -64 -56) -73]
Test Case: 677 | Input/Output: [(-81 -63 -35 78) -81]
Test Case: 678 | Input/Output: [(-18 98 0 96) -18]
Test Case: 679 | Input/Output: [(-6 -36 -32 -78) -78]
Test Case: 680 | Input/Output: [(-98 35 -27 27) -98]
Test Case: 681 | Input/Output: [(47 -25 -90 -11) -90]
Test Case: 682 | Input/Output: [(-24 51 70 28) -24]
Test Case: 683 | Input/Output: [(-57 62 85 -45) -57]
Test Case: 684 | Input/Output: [(-18 3 -91 -74) -91]
Test Case: 685 | Input/Output: [(1 62 7 -75) -75]
Test Case: 686 | Input/Output: [(63 -61 50 -18) -61]
Test Case: 687 | Input/Output: [(-2 -24 -73 94) -73]
Test Case: 688 | Input/Output: [(-76 -5 98 93) -76]
Test Case: 689 | Input/Output: [(-67 -6 -90 -73) -90]
Test Case: 690 | Input/Output: [(68 98 84 29) 29]
Test Case: 691 | Input/Output: [(-54 87 84 -86) -86]
Test Case: 692 | Input/Output: [(-6 70 -66 1) -66]
Test Case: 693 | Input/Output: [(34 83 -4 -74) -74]
Test Case: 694 | Input/Output: [(29 92 99 34) 29]
Test Case: 695 | Input/Output: [(-35 45 18 -52) -52]
Test Case: 696 | Input/Output: [(52 27 -39 42) -39]
Test Case: 697 | Input/Output: [(5 21 34 -31) -31]
Test Case: 698 | Input/Output: [(10 28 29 -12) -12]
Test Case: 699 | Input/Output: [(-90 65 -6 -69) -90]
Test Case: 700 | Input/Output: [(-51 -74 -81 89) -81]
Test Case: 701 | Input/Output: [(86 -79 27 -93) -93]
Test Case: 702 | Input/Output: [(10 51 87 -97) -97]
Test Case: 703 | Input/Output: [(-21 -83 -55 34) -83]
Test Case: 704 | Input/Output: [(25 -33 55 18) -33]
Test Case: 705 | Input/Output: [(76 -30 -8 17) -30]
Test Case: 706 | Input/Output: [(-31 -15 -18 19) -31]
Test Case: 707 | Input/Output: [(-82 16 -32 44) -82]
Test Case: 708 | Input/Output: [(-60 -30 40 -58) -60]
Test Case: 709 | Input/Output: [(-9 57 -47 53) -47]
Test Case: 710 | Input/Output: [(-2 -76 -81 -1) -81]
Test Case: 711 | Input/Output: [(-8 100 86 -11) -11]
Test Case: 712 | Input/Output: [(24 -90 60 54) -90]
Test Case: 713 | Input/Output: [(-88 52 16 38) -88]
Test Case: 714 | Input/Output: [(-62 -31 -93 82) -93]
Test Case: 715 | Input/Output: [(-71 -86 53 0) -86]
Test Case: 716 | Input/Output: [(-50 83 87 -49) -50]
Test Case: 717 | Input/Output: [(55 -6 53 -54) -54]
Test Case: 718 | Input/Output: [(93 -49 -100 54) -100]
Test Case: 719 | Input/Output: [(-5 -23 61 92) -23]
Test Case: 720 | Input/Output: [(81 71 -56 -96) -96]
Test Case: 721 | Input/Output: [(-37 -36 -58 -94) -94]
Test Case: 722 | Input/Output: [(-64 55 -3 61) -64]
Test Case: 723 | Input/Output: [(-27 -74 -27 -16) -74]
Test Case: 724 | Input/Output: [(84 88 -3 -93) -93]
Test Case: 725 | Input/Output: [(61 25 74 96) 25]
Test Case: 726 | Input/Output: [(70 -74 68 -32) -74]
Test Case: 727 | Input/Output: [(90 21 33 28) 21]
Test Case: 728 | Input/Output: [(59 23 92 -10) -10]
Test Case: 729 | Input/Output: [(-93 55 -35 -59) -93]
Test Case: 730 | Input/Output: [(-64 17 78 -100) -100]
Test Case: 731 | Input/Output: [(-57 6 11 41) -57]
Test Case: 732 | Input/Output: [(53 -45 45 98) -45]
Test Case: 733 | Input/Output: [(81 71 54 49) 49]
Test Case: 734 | Input/Output: [(40 78 -83 -67) -83]
Test Case: 735 | Input/Output: [(-48 16 78 -92) -92]
Test Case: 736 | Input/Output: [(24 -33 -97 41) -97]
Test Case: 737 | Input/Output: [(-26 74 -5 -60) -60]
Test Case: 738 | Input/Output: [(11 38 -91 -84) -91]
Test Case: 739 | Input/Output: [(-22 92 -3 -67) -67]
Test Case: 740 | Input/Output: [(-57 100 -91 -81) -91]
Test Case: 741 | Input/Output: [(-12 91 96 -1) -12]
Test Case: 742 | Input/Output: [(-38 -49 -77 -27) -77]
Test Case: 743 | Input/Output: [(-70 66 -49 50) -70]
Test Case: 744 | Input/Output: [(-15 -78 -84 -44) -84]
Test Case: 745 | Input/Output: [(-74 24 -9 -46) -74]
Test Case: 746 | Input/Output: [(87 77 -17 -50) -50]
Test Case: 747 | Input/Output: [(-52 -69 14 -27) -69]
Test Case: 748 | Input/Output: [(23 -63 98 29) -63]
Test Case: 749 | Input/Output: [(82 37 -62 51) -62]
Test Case: 750 | Input/Output: [(-95 -46 78 79) -95]
Test Case: 751 | Input/Output: [(-26 69 33 -35) -35]
Test Case: 752 | Input/Output: [(80 -96 -62 70) -96]
Test Case: 753 | Input/Output: [(-33 40 -15 -13) -33]
Test Case: 754 | Input/Output: [(67 -9 -4 61) -9]
Test Case: 755 | Input/Output: [(-59 -10 95 -41) -59]
Test Case: 756 | Input/Output: [(-29 -13 14 14) -29]
Test Case: 757 | Input/Output: [(-49 -95 94 79) -95]
Test Case: 758 | Input/Output: [(-59 75 -64 100) -64]
Test Case: 759 | Input/Output: [(-35 -8 -82 -47) -82]
Test Case: 760 | Input/Output: [(1 -89 -71 -100) -100]
Test Case: 761 | Input/Output: [(34 96 55 -21) -21]
Test Case: 762 | Input/Output: [(-89 68 89 -68) -89]
Test Case: 763 | Input/Output: [(29 100 46 60) 29]
Test Case: 764 | Input/Output: [(-33 96 -88 88) -88]
Test Case: 765 | Input/Output: [(-91 -98 100 78) -98]
Test Case: 766 | Input/Output: [(-93 11 -38 18) -93]
Test Case: 767 | Input/Output: [(15 50 70 -85) -85]
Test Case: 768 | Input/Output: [(47 -31 80 -45) -45]
Test Case: 769 | Input/Output: [(-95 -11 92 87) -95]
Test Case: 770 | Input/Output: [(-32 -4 39 95) -32]
Test Case: 771 | Input/Output: [(55 -14 63 88) -14]
Test Case: 772 | Input/Output: [(-90 58 -56 40) -90]
Test Case: 773 | Input/Output: [(89 -31 40 -17) -31]
Test Case: 774 | Input/Output: [(-52 1 -60 -35) -60]
Test Case: 775 | Input/Output: [(-70 -56 -97 -39) -97]
Test Case: 776 | Input/Output: [(58 -66 28 75) -66]
Test Case: 777 | Input/Output: [(-21 -48 9 -64) -64]
Test Case: 778 | Input/Output: [(-25 -65 -46 -12) -65]
Test Case: 779 | Input/Output: [(-10 10 -16 -95) -95]
Test Case: 780 | Input/Output: [(83 -50 -94 -1) -94]
Test Case: 781 | Input/Output: [(-51 -34 86 69) -51]
Test Case: 782 | Input/Output: [(34 -44 -53 68) -53]
Test Case: 783 | Input/Output: [(-83 85 -79 -89) -89]
Test Case: 784 | Input/Output: [(94 -90 31 -23) -90]
Test Case: 785 | Input/Output: [(-71 74 26 78) -71]
Test Case: 786 | Input/Output: [(-27 77 0 5) -27]
Test Case: 787 | Input/Output: [(-38 -16 51 72) -38]
Test Case: 788 | Input/Output: [(-1 -45 29 -41) -45]
Test Case: 789 | Input/Output: [(-22 -98 -53 20) -98]
Test Case: 790 | Input/Output: [(46 30 53 72) 30]
Test Case: 791 | Input/Output: [(-18 100 6 -75) -75]
Test Case: 792 | Input/Output: [(-3 -21 52 -69) -69]
Test Case: 793 | Input/Output: [(19 -58 25 -74) -74]
Test Case: 794 | Input/Output: [(-2 74 -27 -80) -80]
Test Case: 795 | Input/Output: [(-17 93 100 -32) -32]
Test Case: 796 | Input/Output: [(-25 -19 50 67) -25]
Test Case: 797 | Input/Output: [(-47 38 97 -8) -47]
Test Case: 798 | Input/Output: [(-56 49 -68 33) -68]
Test Case: 799 | Input/Output: [(52 -74 -17 -74) -74]
Test Case: 800 | Input/Output: [(89 90 -20 4) -20]
Test Case: 801 | Input/Output: [(8 84 -18 85) -18]
Test Case: 802 | Input/Output: [(11 98 70 70) 11]
Test Case: 803 | Input/Output: [(61 96 56 31) 31]
Test Case: 804 | Input/Output: [(51 32 -57 15) -57]
Test Case: 805 | Input/Output: [(-3 26 68 -70) -70]
Test Case: 806 | Input/Output: [(-15 -25 -53 -85) -85]
Test Case: 807 | Input/Output: [(27 62 -69 72) -69]
Test Case: 808 | Input/Output: [(-28 14 -24 18) -28]
Test Case: 809 | Input/Output: [(-99 -91 -25 87) -99]
Test Case: 810 | Input/Output: [(-45 -83 -3 -84) -84]
Test Case: 811 | Input/Output: [(63 1 21 -47) -47]
Test Case: 812 | Input/Output: [(78 -62 12 -24) -62]
Test Case: 813 | Input/Output: [(-61 38 68 20) -61]
Test Case: 814 | Input/Output: [(-17 28 98 23) -17]
Test Case: 815 | Input/Output: [(29 4 69 41) 4]
Test Case: 816 | Input/Output: [(-49 3 -14 58) -49]
Test Case: 817 | Input/Output: [(-39 -97 -13 64) -97]
Test Case: 818 | Input/Output: [(34 -62 -34 93) -62]
Test Case: 819 | Input/Output: [(-78 76 -16 -73) -78]
Test Case: 820 | Input/Output: [(32 -97 74 77) -97]
Test Case: 821 | Input/Output: [(-62 12 15 -76) -76]
Test Case: 822 | Input/Output: [(-61 20 59 -62) -62]
Test Case: 823 | Input/Output: [(23 77 -12 64) -12]
Test Case: 824 | Input/Output: [(99 84 1 -52) -52]
Test Case: 825 | Input/Output: [(80 -67 -76 -63) -76]
Test Case: 826 | Input/Output: [(-76 80 50 -82) -82]
Test Case: 827 | Input/Output: [(-12 89 61 51) -12]
Test Case: 828 | Input/Output: [(-57 -8 1 60) -57]
Test Case: 829 | Input/Output: [(-12 59 28 -28) -28]
Test Case: 830 | Input/Output: [(-74 -30 -71 5) -74]
Test Case: 831 | Input/Output: [(17 -70 61 21) -70]
Test Case: 832 | Input/Output: [(-97 -6 -96 14) -97]
Test Case: 833 | Input/Output: [(99 27 -11 -5) -11]
Test Case: 834 | Input/Output: [(-58 59 47 22) -58]
Test Case: 835 | Input/Output: [(-13 -85 61 -46) -85]
Test Case: 836 | Input/Output: [(-34 99 -41 -5) -41]
Test Case: 837 | Input/Output: [(38 25 21 -46) -46]
Test Case: 838 | Input/Output: [(68 -14 10 -78) -78]
Test Case: 839 | Input/Output: [(65 -30 46 95) -30]
Test Case: 840 | Input/Output: [(-93 -4 -75 -10) -93]
Test Case: 841 | Input/Output: [(-7 -43 -57 -75) -75]
Test Case: 842 | Input/Output: [(-55 -59 -53 -30) -59]
Test Case: 843 | Input/Output: [(-94 -84 21 48) -94]
Test Case: 844 | Input/Output: [(59 -78 -57 -23) -78]
Test Case: 845 | Input/Output: [(-4 18 48 33) -4]
Test Case: 846 | Input/Output: [(-38 47 15 -38) -38]
Test Case: 847 | Input/Output: [(45 69 34 100) 34]
Test Case: 848 | Input/Output: [(-59 40 -82 94) -82]
Test Case: 849 | Input/Output: [(10 3 -28 73) -28]
Test Case: 850 | Input/Output: [(7 1 26 98) 1]
Test Case: 851 | Input/Output: [(44 15 68 -89) -89]
Test Case: 852 | Input/Output: [(-68 89 -64 60) -68]
Test Case: 853 | Input/Output: [(29 -26 11 14) -26]
Test Case: 854 | Input/Output: [(17 -8 15 -92) -92]
Test Case: 855 | Input/Output: [(7 53 19 46) 7]
Test Case: 856 | Input/Output: [(-95 -15 67 -26) -95]
Test Case: 857 | Input/Output: [(100 -42 -93 23) -93]
Test Case: 858 | Input/Output: [(-6 23 67 44) -6]
Test Case: 859 | Input/Output: [(1 91 -9 -67) -67]
Test Case: 860 | Input/Output: [(16 13 78 -25) -25]
Test Case: 861 | Input/Output: [(-20 5 76 -37) -37]
Test Case: 862 | Input/Output: [(-66 94 -41 -66) -66]
Test Case: 863 | Input/Output: [(-52 -88 59 84) -88]
Test Case: 864 | Input/Output: [(-56 13 88 97) -56]
Test Case: 865 | Input/Output: [(17 39 -64 0) -64]
Test Case: 866 | Input/Output: [(-59 50 -79 52) -79]
Test Case: 867 | Input/Output: [(31 -28 25 99) -28]
Test Case: 868 | Input/Output: [(12 -36 -29 -35) -36]
Test Case: 869 | Input/Output: [(4 -4 49 47) -4]
Test Case: 870 | Input/Output: [(-14 29 -83 -46) -83]
Test Case: 871 | Input/Output: [(-17 -5 -27 -35) -35]
Test Case: 872 | Input/Output: [(38 76 37 36) 36]
Test Case: 873 | Input/Output: [(18 -40 -37 -13) -40]
Test Case: 874 | Input/Output: [(37 -97 -96 -4) -97]
Test Case: 875 | Input/Output: [(85 46 -78 74) -78]
Test Case: 876 | Input/Output: [(-86 96 -16 -45) -86]
Test Case: 877 | Input/Output: [(13 -81 -33 -65) -81]
Test Case: 878 | Input/Output: [(-100 58 84 -35) -100]
Test Case: 879 | Input/Output: [(-6 65 92 9) -6]
Test Case: 880 | Input/Output: [(-14 -41 12 97) -41]
Test Case: 881 | Input/Output: [(-11 -48 -9 -98) -98]
Test Case: 882 | Input/Output: [(15 -55 23 65) -55]
Test Case: 883 | Input/Output: [(-8 -10 41 69) -10]
Test Case: 884 | Input/Output: [(-88 3 29 -17) -88]
Test Case: 885 | Input/Output: [(59 -80 27 49) -80]
Test Case: 886 | Input/Output: [(-62 19 92 55) -62]
Test Case: 887 | Input/Output: [(41 48 -95 -20) -95]
Test Case: 888 | Input/Output: [(-49 -12 83 62) -49]
Test Case: 889 | Input/Output: [(-81 31 -58 -47) -81]
Test Case: 890 | Input/Output: [(91 33 -11 -15) -15]
Test Case: 891 | Input/Output: [(-8 5 67 29) -8]
Test Case: 892 | Input/Output: [(-66 92 -6 71) -66]
Test Case: 893 | Input/Output: [(-83 -57 -47 62) -83]
Test Case: 894 | Input/Output: [(-73 26 -65 68) -73]
Test Case: 895 | Input/Output: [(61 32 -48 -6) -48]
Test Case: 896 | Input/Output: [(-7 95 -55 -56) -56]
Test Case: 897 | Input/Output: [(-91 72 36 -82) -91]
Test Case: 898 | Input/Output: [(-97 7 79 89) -97]
Test Case: 899 | Input/Output: [(-23 99 87 -47) -47]
Test Case: 900 | Input/Output: [(27 -32 23 77) -32]
Test Case: 901 | Input/Output: [(-75 -88 -2 -70) -88]
Test Case: 902 | Input/Output: [(-37 48 -49 65) -49]
Test Case: 903 | Input/Output: [(0 -46 100 38) -46]
Test Case: 904 | Input/Output: [(31 -55 -55 39) -55]
Test Case: 905 | Input/Output: [(-50 85 2 14) -50]
Test Case: 906 | Input/Output: [(56 66 -20 77) -20]
Test Case: 907 | Input/Output: [(3 -68 -19 -59) -68]
Test Case: 908 | Input/Output: [(-70 -74 100 97) -74]
Test Case: 909 | Input/Output: [(51 -18 -1 -82) -82]
Test Case: 910 | Input/Output: [(58 41 -81 70) -81]
Test Case: 911 | Input/Output: [(51 -6 -5 -43) -43]
Test Case: 912 | Input/Output: [(-38 -81 6 -47) -81]
Test Case: 913 | Input/Output: [(18 22 -24 83) -24]
Test Case: 914 | Input/Output: [(64 19 12 98) 12]
Test Case: 915 | Input/Output: [(9 -51 -65 81) -65]
Test Case: 916 | Input/Output: [(-83 33 94 -37) -83]
Test Case: 917 | Input/Output: [(85 40 55 51) 40]
Test Case: 918 | Input/Output: [(-23 90 -73 -89) -89]
Test Case: 919 | Input/Output: [(-37 -95 -28 -55) -95]
Test Case: 920 | Input/Output: [(64 -81 -50 2) -81]
Test Case: 921 | Input/Output: [(13 60 42 -29) -29]
Test Case: 922 | Input/Output: [(70 -100 -84 20) -100]
Test Case: 923 | Input/Output: [(-75 67 -64 85) -75]
Test Case: 924 | Input/Output: [(-86 -78 -93 5) -93]
Test Case: 925 | Input/Output: [(-90 -53 -55 70) -90]
Test Case: 926 | Input/Output: [(-29 71 95 6) -29]
Test Case: 927 | Input/Output: [(82 61 33 18) 18]
Test Case: 928 | Input/Output: [(41 -96 85 -77) -96]
Test Case: 929 | Input/Output: [(-31 93 -9 97) -31]
Test Case: 930 | Input/Output: [(14 28 3 75) 3]
Test Case: 931 | Input/Output: [(-39 31 -63 50) -63]
Test Case: 932 | Input/Output: [(37 39 -81 -74) -81]
Test Case: 933 | Input/Output: [(86 -41 89 62) -41]
Test Case: 934 | Input/Output: [(-70 25 17 6) -70]
Test Case: 935 | Input/Output: [(-39 -13 23 -33) -39]
Test Case: 936 | Input/Output: [(69 -99 -54 -56) -99]
Test Case: 937 | Input/Output: [(-11 35 -25 82) -25]
Test Case: 938 | Input/Output: [(-66 75 34 -80) -80]
Test Case: 939 | Input/Output: [(-35 25 -13 -38) -38]
Test Case: 940 | Input/Output: [(95 -65 19 -77) -77]
Test Case: 941 | Input/Output: [(51 -87 99 42) -87]
Test Case: 942 | Input/Output: [(85 59 -73 -33) -73]
Test Case: 943 | Input/Output: [(-40 -82 82 13) -82]
Test Case: 944 | Input/Output: [(45 4 -53 -46) -53]
Test Case: 945 | Input/Output: [(58 -68 92 -97) -97]
Test Case: 946 | Input/Output: [(-78 -5 -40 -12) -78]
Test Case: 947 | Input/Output: [(-58 -63 91 44) -63]
Test Case: 948 | Input/Output: [(-10 -27 78 -69) -69]
Test Case: 949 | Input/Output: [(-57 9 99 87) -57]
Test Case: 950 | Input/Output: [(-43 -64 -60 -84) -84]
Test Case: 951 | Input/Output: [(-12 40 -36 37) -36]
Test Case: 952 | Input/Output: [(-24 -81 100 -35) -81]
Test Case: 953 | Input/Output: [(86 48 -37 70) -37]
Test Case: 954 | Input/Output: [(-42 10 57 -23) -42]
Test Case: 955 | Input/Output: [(35 26 32 59) 26]
Test Case: 956 | Input/Output: [(-89 -98 -78 -82) -98]
Test Case: 957 | Input/Output: [(42 -46 -16 45) -46]
Test Case: 958 | Input/Output: [(-36 68 52 -88) -88]
Test Case: 959 | Input/Output: [(-83 -80 -3 -4) -83]
Test Case: 960 | Input/Output: [(-57 0 -81 -71) -81]
Test Case: 961 | Input/Output: [(93 -83 52 -75) -83]
Test Case: 962 | Input/Output: [(-86 69 -18 -12) -86]
Test Case: 963 | Input/Output: [(54 -2 92 16) -2]
Test Case: 964 | Input/Output: [(2 -74 50 -47) -74]
Test Case: 965 | Input/Output: [(-21 50 45 -75) -75]
Test Case: 966 | Input/Output: [(-12 -88 -15 16) -88]
Test Case: 967 | Input/Output: [(89 55 47 -97) -97]
Test Case: 968 | Input/Output: [(-59 -65 -59 32) -65]
Test Case: 969 | Input/Output: [(-99 47 -37 20) -99]
Test Case: 970 | Input/Output: [(-62 -53 -30 4) -62]
Test Case: 971 | Input/Output: [(-78 8 100 -52) -78]
Test Case: 972 | Input/Output: [(-36 -3 6 -35) -36]
Test Case: 973 | Input/Output: [(45 23 -9 -38) -38]
Test Case: 974 | Input/Output: [(-56 35 -91 -21) -91]
Test Case: 975 | Input/Output: [(62 -97 64 -67) -97]
Test Case: 976 | Input/Output: [(91 -42 -77 -37) -77]
Test Case: 977 | Input/Output: [(93 -31 -34 35) -34]
Test Case: 978 | Input/Output: [(-60 -66 -87 1) -87]
Test Case: 979 | Input/Output: [(88 49 46 -76) -76]
Test Case: 980 | Input/Output: [(69 -85 -6 -71) -85]
Test Case: 981 | Input/Output: [(48 -38 17 -5) -38]
Test Case: 982 | Input/Output: [(-1 22 -100 -41) -100]
Test Case: 983 | Input/Output: [(51 14 77 5) 5]
Test Case: 984 | Input/Output: [(46 63 -35 51) -35]
Test Case: 985 | Input/Output: [(-47 -16 20 86) -47]
Test Case: 986 | Input/Output: [(-90 44 -50 -17) -90]
Test Case: 987 | Input/Output: [(29 -6 -38 -34) -38]
Test Case: 988 | Input/Output: [(41 -33 -67 -85) -85]
Test Case: 989 | Input/Output: [(74 -10 0 23) -10]
Test Case: 990 | Input/Output: [(-61 -34 -46 -82) -82]
Test Case: 991 | Input/Output: [(26 93 17 -36) -36]
Test Case: 992 | Input/Output: [(-73 6 38 12) -73]
Test Case: 993 | Input/Output: [(-42 -76 66 -10) -76]
Test Case: 994 | Input/Output: [(11 -53 21 -18) -53]
Test Case: 995 | Input/Output: [(22 -16 -13 9) -16]
Test Case: 996 | Input/Output: [(25 -88 -94 36) -94]
Test Case: 997 | Input/Output: [(-70 66 25 31) -70]
Test Case: 998 | Input/Output: [(1 62 -54 -83) -83]
Test Case: 999 | Input/Output: [(-81 -73 71 6) -81]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = -113 -10 -99 -30 66 95 -25 -103 40 59 63 -109 60 -109 -10 -82
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[91 -90 91 91] -90] [[44 86 86 86] 44] [[-68 -68 34 -68] -68] [[-25 -46 -25 -25] -46] [[62 -54 62 62] -54] [[26 26 5 26] 5] [[-8 -8 -8 -13] -13] [[57 57 33 57] 33] [[31 31 -10 31] -10] [[-95 -95 -95 74] -95] [(47 47 47 47) 47] [(26 26 26 26) 26] [(50 50 50 50) 50] [(35 35 35 35) 35] [(-43 -43 -43 -43) -43] [(87 64 23 83) 23] [(29 0 6 83) 0] [(90 73 42 78) 42] [(23 88 50 60) 23] [(31 87 31 97) 31] [(20 48 30 47) 20] [(86 9 67 26) 9] [(33 59 16 78) 16] [(15 57 75 22) 15] [(43 3 2 73) 2] [(46 29 23 95) 23] [(10 16 37 16) 10] [(52 30 1 91) 1] [(34 78 97 97) 34] [(20 41 60 82) 20] [(70 15 9 100) 9] [(42 72 3 78) 3] [(39 28 76 81) 28] [(14 18 42 62) 14] [(46 51 50 47) 46] [(-96 82 50 36) -96] [(-61 -53 93 -25) -61] [(-19 86 -78 -71) -78] [(-19 0 55 -91) -91] [(55 -95 21 34) -95] [(28 -73 -84 -65) -84] [(-51 -71 -66 -50) -71] [(-74 98 40 12) -74] [(-60 10 18 42) -60] [(100 -12 20 -55) -55] [(-42 97 14 -41) -42] [(47 -75 -76 47) -76] [(27 -95 -86 -93) -95] [(87 0 85 -96) -96] [(-43 22 35 -38) -43] [(-45 97 20 98) -45] [(-56 10 16 81) -56] [(-75 -1 30 -46) -75] [(-87 -55 27 -23) -87] [(-81 44 55 41) -81] [(-82 -90 -20 79) -90] [(-64 -19 61 -33) -64] [(-41 -75 -43 -62) -75] [(35 -3 -97 -46) -97] [(59 -47 -41 -54) -54] [(56 3 -95 -10) -95] [(35 -21 -97 52) -97] [(-52 73 -85 -40) -85] [(-81 61 51 77) -81] [(10 -19 65 -19) -19] [(95 24 -58 82) -58] [(29 -46 67 -42) -46] [(-78 96 -15 -42) -78] [(-93 59 56 25) -93] [(18 -8 -35 -62) -62] [(-90 -1 -47 -82) -90] [(85 -70 74 100) -70] [(-9 61 -28 32) -28] [(-20 -82 15 -25) -82] [(74 -5 17 19) -5] [(-45 87 6 68) -45] [(83 -11 -23 -20) -23] [(92 92 -61 -30) -61] [(-26 23 -55 79) -55] [(-4 33 -95 63) -95] [(-82 88 94 -6) -82] [(-65 4 57 7) -65] [(-36 10 23 29) -36] [(60 -4 -53 41) -53] [(79 63 -34 72) -34] [(97 54 -17 86) -17] [(-82 -70 47 75) -82] [(-49 -16 90 -12) -49] [(8 -36 71 -54) -54] [(78 -71 76 -54) -71] [(18 -15 3 36) -15] [(44 55 28 -73) -73] [(-22 38 13 -83) -83] [(13 80 62 -63) -63] [(-53 -87 -9 -33) -87])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 2, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction tag_exec_824} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when})
Lexicase best program: (exec_noop integer_gt print_boolean in1 tag_exec_824 (exec_do*range (integer_swap) boolean_yankdup) boolean_yankdup integer_yank integer_eq print_integer exec_stackdepth integer_div exec_y (integer_div integer_sub integer_shove integer_dup_items exec_swap (exec_eq) (exec_dup () integer_mult) exec_when ()))
Lexicase best errors: [1 0 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 2, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction tag_exec_824} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when})
Zero cases best program: (exec_noop integer_gt print_boolean in1 tag_exec_824 (exec_do*range (integer_swap) boolean_yankdup) boolean_yankdup integer_yank integer_eq print_integer exec_stackdepth integer_div exec_y (integer_div integer_sub integer_shove integer_dup_items exec_swap (exec_eq) (exec_dup () integer_mult) exec_when ()))
Zero cases best errors: [1 0 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 5 3 2 1 4 7 2 3 5)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 5 3 2 1 4 7 2 3 5)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction in3} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (integer_dup boolean_dup_items boolean_and exec_s (integer_swap boolean_flush) (exec_empty) (exec_eq) in3 integer_gt boolean_flush boolean_dup_items exec_s_when_autoconstructing (integer_dup_times in1 print_integer integer_dup integer_shove exec_yank in2 exec_rot (integer_empty boolean_eq exec_eq) (exec_stackdepth) (integer_inc exec_stackdepth integer_pop boolean_empty integer_dup_items print_integer exec_k (integer_lte in1 boolean_flush integer_max integer_dup boolean_yankdup exec_do*times (exec_k_when_autoconstructing () (exec_do*times (exec_k_when_autoconstructing (boolean_invert_second_then_and integer_empty) (boolean_invert_first_then_and))))) ())) () ())
Errors: [1 0 0 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 45
Size: 63
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 9.965
Median total errors in population: 10
Error averages by case: (0.997 0.995 0.997 0.998 0.999 0.996 0.993 0.998 0.997 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.679
Average program size in population (points): 70.595
Average percent parens in population: 0.276
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 481127
--- Timings ---
Current time: 1559314711519 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.8 seconds, 29.8%
Fitness Testing:      1.8 seconds, 66.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_434} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction 81} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_boolean_697} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k})
Lexicase best program: (boolean_pop integer_lte boolean_and integer_sub exec_do*while (integer_eq exec_k (integer_gt) (boolean_swap exec_yankdup integer_sub integer_fromboolean tag_boolean_434 exec_do*count () in4 boolean_frominteger exec_when (boolean_stackdepth integer_stackdepth exec_do*range (integer_mult integer_swap) exec_if () (integer_add) integer_div integer_inc exec_shove (exec_yank)) integer_lte exec_k_when_autoconstructing () (integer_empty integer_flush integer_div boolean_dup integer_dup) boolean_xor in1 integer_pop)) integer_dup_times integer_stackdepth boolean_empty 81 boolean_yank tag_boolean_697 boolean_invert_second_then_and boolean_stackdepth integer_flush integer_sub exec_s_when_autoconstructing (exec_dup (print_integer boolean_pop in3 integer_shove) boolean_pop) (exec_k (exec_do*times () boolean_invert_first_then_and exec_k (exec_y_when_autoconstructing (exec_flush) exec_empty) (integer_stackdepth) exec_k (integer_flush) (exec_s (exec_noop integer_mod exec_k () ()) () ())) ()) ())
Lexicase best errors: [0 0 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 98
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_434} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction 81} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_boolean_697} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k})
Zero cases best program: (boolean_pop integer_lte boolean_and integer_sub exec_do*while (integer_eq exec_k (integer_gt) (boolean_swap exec_yankdup integer_sub integer_fromboolean tag_boolean_434 exec_do*count () in4 boolean_frominteger exec_when (boolean_stackdepth integer_stackdepth exec_do*range (integer_mult integer_swap) exec_if () (integer_add) integer_div integer_inc exec_shove (exec_yank)) integer_lte exec_k_when_autoconstructing () (integer_empty integer_flush integer_div boolean_dup integer_dup) boolean_xor in1 integer_pop)) integer_dup_times integer_stackdepth boolean_empty 81 boolean_yank tag_boolean_697 boolean_invert_second_then_and boolean_stackdepth integer_flush integer_sub exec_s_when_autoconstructing (exec_dup (print_integer boolean_pop in3 integer_shove) boolean_pop) (exec_k (exec_do*times () boolean_invert_first_then_and exec_k (exec_y_when_autoconstructing (exec_flush) exec_empty) (integer_stackdepth) exec_k (integer_flush) (exec_s (exec_noop integer_mod exec_k () ()) () ())) ()) ())
Zero cases best errors: [0 0 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 98
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 594 216 372 216 585 216 1000 6 369)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (215 594 216 372 216 585 216 0 6 369)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction -68} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -77} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_50} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 1, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction tagged_276} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_289} {:close 0, :instruction exec_k})
Best program: (integer_lte boolean_shove -68 exec_do*range (exec_stackdepth integer_flush integer_fromboolean exec_dup_items in3) boolean_not boolean_eq integer_sub exec_yank integer_swap exec_dup_times (integer_flush) integer_yank exec_yankdup integer_max integer_empty exec_when (exec_do*times (integer_max integer_yank exec_rot (integer_yank print_integer) (exec_dup_items) (in3 boolean_yankdup print_boolean boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) exec_dup_times (exec_when (exec_do*times (exec_dup_items) exec_k_when_autoconstructing (-77 boolean_stackdepth boolean_or exec_when (boolean_or integer_flush exec_y_when_autoconstructing (boolean_flush integer_shove integer_div exec_stackdepth)) boolean_pop exec_s (exec_do*times (tagged_50 exec_yank exec_rot (print_newline) (exec_k_when_autoconstructing (integer_mod boolean_or boolean_flush in4) (integer_mod) integer_shove integer_sub boolean_dup_times) (boolean_shove exec_swap () (tagged_276 integer_yankdup exec_eq boolean_empty integer_flush integer_min boolean_yankdup exec_k (boolean_not exec_stackdepth tag_boolean_289 exec_k () ()) ())))) () ()) ())))))
Errors: [0 0 0 1 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 88
Size: 120
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 7.211
Median total errors in population: 6
Error averages by case: (0.785 0.406 0.784 0.628 0.784 0.415 0.784 1.0 0.994 0.631)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 53.409
Average program size in population (points): 71.744
Average percent parens in population: 0.254
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.522
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1444531
--- Timings ---
Current time: 1559314714943 milliseconds
Total Time:           6.0 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         2.4 seconds, 40.5%
Fitness Testing:      2.8 seconds, 47.3%
Report:               0.6 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_434} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_boolean_697} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k})
Lexicase best program: (boolean_pop integer_lte boolean_and integer_sub exec_do*while (integer_eq exec_k (integer_gt) (boolean_swap exec_yankdup integer_sub integer_fromboolean tag_boolean_434 exec_do*count () in4 boolean_frominteger exec_when (boolean_stackdepth integer_stackdepth exec_do*range (integer_mult integer_swap) exec_if () (integer_add) integer_div integer_inc exec_shove (exec_yank)) integer_lte exec_k_when_autoconstructing () (integer_empty integer_flush integer_div boolean_dup integer_dup) boolean_xor in1 integer_pop)) integer_dup_times integer_stackdepth boolean_empty boolean_and boolean_yank tag_boolean_697 boolean_invert_second_then_and boolean_stackdepth integer_flush integer_sub exec_s_when_autoconstructing (exec_dup (print_integer boolean_pop in3 integer_shove) boolean_pop) (exec_k (exec_do*times () boolean_invert_first_then_and exec_k (exec_y_when_autoconstructing (exec_flush) exec_empty) (integer_stackdepth) exec_k (integer_flush) (exec_s (exec_noop integer_mod exec_k () ()) () ())) ()) ())
Lexicase best errors: [0 1 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 98
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_434} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_boolean_697} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k})
Zero cases best program: (boolean_pop integer_lte boolean_and integer_sub exec_do*while (integer_eq exec_k (integer_gt) (boolean_swap exec_yankdup integer_sub integer_fromboolean tag_boolean_434 exec_do*count () in4 boolean_frominteger exec_when (boolean_stackdepth integer_stackdepth exec_do*range (integer_mult integer_swap) exec_if () (integer_add) integer_div integer_inc exec_shove (exec_yank)) integer_lte exec_k_when_autoconstructing () (integer_empty integer_flush integer_div boolean_dup integer_dup) boolean_xor in1 integer_pop)) integer_dup_times integer_stackdepth boolean_empty boolean_and boolean_yank tag_boolean_697 boolean_invert_second_then_and boolean_stackdepth integer_flush integer_sub exec_s_when_autoconstructing (exec_dup (print_integer boolean_pop in3 integer_shove) boolean_pop) (exec_k (exec_do*times () boolean_invert_first_then_and exec_k (exec_y_when_autoconstructing (exec_flush) exec_empty) (integer_stackdepth) exec_k (integer_flush) (exec_s (exec_noop integer_mod exec_k () ()) () ())) ()) ())
Zero cases best errors: [0 1 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 98
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (466 294 90 467 90 467 90 467 465 90)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (466 294 90 467 90 467 90 467 465 90)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_434} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_697} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k})
Best program: (boolean_pop integer_lte boolean_and integer_sub exec_do*while (integer_eq exec_k (integer_gt) (boolean_swap exec_yankdup integer_sub integer_fromboolean tag_boolean_434 exec_do*count () in4 boolean_frominteger exec_when (boolean_stackdepth integer_stackdepth exec_do*range (integer_mult integer_swap) exec_if () (integer_add) integer_div integer_inc exec_shove (exec_yank)) integer_lte exec_k_when_autoconstructing () (integer_empty integer_flush integer_div boolean_dup integer_dup) boolean_xor in1 integer_pop)) integer_dup_times integer_stackdepth boolean_empty boolean_and boolean_empty tag_boolean_697 boolean_invert_second_then_and boolean_stackdepth integer_flush integer_sub exec_s_when_autoconstructing (exec_dup (print_integer boolean_pop in3 integer_shove) boolean_pop) (exec_k (exec_do*times () boolean_invert_first_then_and exec_k (exec_y_when_autoconstructing (exec_flush) exec_empty) (integer_stackdepth) exec_k (integer_flush) (exec_s (exec_noop integer_mod exec_k () ()) () ())) ()) ())
Errors: [0 1 1 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 69
Size: 98
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 7.014
Median total errors in population: 6
Error averages by case: (0.534 0.706 0.91 0.533 0.91 0.533 0.91 0.533 0.535 0.91)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.044
Average program size in population (points): 78.068
Average percent parens in population: 0.263
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9715
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2384702
--- Timings ---
Current time: 1559314718341 milliseconds
Total Time:           9.6 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.4 seconds, 45.3%
Fitness Testing:      3.8 seconds, 39.9%
Report:               1.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_697} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k})
Lexicase best program: (boolean_pop integer_lte boolean_and integer_sub exec_do*while (integer_eq exec_k (integer_gt) (boolean_swap exec_yankdup integer_max integer_fromboolean integer_mod exec_do*count () in4 boolean_frominteger exec_when (boolean_stackdepth integer_stackdepth exec_do*range (integer_mult integer_swap) exec_if () (integer_add) integer_div integer_inc exec_shove (exec_yank)) integer_lte exec_k_when_autoconstructing () (integer_empty integer_flush integer_div boolean_dup integer_dup) boolean_xor in1 integer_pop)) integer_dup_times integer_stackdepth boolean_empty boolean_and boolean_empty tag_boolean_697 boolean_invert_second_then_and boolean_stackdepth integer_flush integer_sub exec_s_when_autoconstructing (exec_dup (print_integer boolean_pop in3 integer_shove) boolean_pop) (exec_k (exec_do*times () boolean_invert_first_then_and exec_k (exec_y_when_autoconstructing (exec_flush) exec_empty) (integer_stackdepth) exec_k (integer_flush) (exec_s (exec_noop integer_mod exec_k () ()) () ())) ()) ())
Lexicase best errors: [0 0 1 1 1 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 98
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_697} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k})
Zero cases best program: (boolean_pop integer_lte boolean_and integer_sub exec_do*while (integer_eq exec_k (integer_gt) (boolean_swap exec_yankdup integer_max integer_fromboolean integer_mod exec_do*count () in4 boolean_frominteger exec_when (boolean_stackdepth integer_stackdepth exec_do*range (integer_mult integer_swap) exec_if () (integer_add) integer_div integer_inc exec_shove (exec_yank)) integer_lte exec_k_when_autoconstructing () (integer_empty integer_flush integer_div boolean_dup integer_dup) boolean_xor in1 integer_pop)) integer_dup_times integer_stackdepth boolean_empty boolean_and boolean_empty tag_boolean_697 boolean_invert_second_then_and boolean_stackdepth integer_flush integer_sub exec_s_when_autoconstructing (exec_dup (print_integer boolean_pop in3 integer_shove) boolean_pop) (exec_k (exec_do*times () boolean_invert_first_then_and exec_k (exec_y_when_autoconstructing (exec_flush) exec_empty) (integer_stackdepth) exec_k (integer_flush) (exec_s (exec_noop integer_mod exec_k () ()) () ())) ()) ())
Zero cases best errors: [0 0 1 1 1 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 98
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (365 365 407 1000 407 1000 98 98 364 99)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (365 365 407 0 407 0 98 98 364 99)
Population mean number of perfect (error zero) cases: 2.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_434} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_boolean_697} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k})
Best program: (boolean_pop integer_lte boolean_and integer_sub exec_do*while (integer_eq exec_k (integer_gt) (boolean_swap exec_yankdup integer_sub integer_fromboolean tag_boolean_434 exec_do*count () in4 boolean_frominteger exec_when (boolean_stackdepth integer_stackdepth exec_do*range (integer_mult integer_swap) exec_if (integer_add) (integer_div integer_inc exec_shove (exec_yank)) integer_lte exec_k_when_autoconstructing () (integer_empty integer_flush) integer_div boolean_dup integer_dup) boolean_xor in1 integer_pop)) integer_dup_times integer_stackdepth boolean_empty boolean_and boolean_yank tag_boolean_697 boolean_invert_second_then_and boolean_stackdepth integer_flush integer_sub exec_s_when_autoconstructing (exec_dup (print_integer boolean_pop in3 integer_shove) boolean_pop) () (exec_k (exec_do*times () boolean_invert_first_then_and exec_k (exec_y_when_autoconstructing (exec_flush) exec_empty) (integer_stackdepth) exec_k (integer_flush) (exec_s (exec_noop integer_mod exec_k () ()) () ())) ()))
Errors: [0 0 1 1 1 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 69
Size: 98
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 7.797
Median total errors in population: 8
Error averages by case: (0.635 0.635 0.593 1.0 0.593 1.0 0.902 0.902 0.636 0.901)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 54.947
Average program size in population (points): 74.33
Average percent parens in population: 0.255
Minimum age in population: 3.0
Maximum age in population: 5.75
Average age in population: 4.00225
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 217
Genome diversity (% unique genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 217
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3058861
--- Timings ---
Current time: 1559314721470 milliseconds
Total Time:          12.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.3 seconds, 49.7%
Fitness Testing:      4.5 seconds, 35.3%
Report:               1.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 2, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction tag_exec_824} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (exec_noop integer_gt print_boolean in1 tag_exec_824 (exec_do*range (integer_swap) boolean_yankdup) boolean_yankdup integer_yank integer_eq print_integer exec_stackdepth integer_div exec_y (integer_div integer_sub integer_shove integer_dup_items exec_swap (exec_eq) (exec_dup () exec_y_when_autoconstructing () exec_when ())))
Lexicase best errors: [1 1 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 2, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction tag_exec_824} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (exec_noop integer_gt print_boolean in1 tag_exec_824 (exec_do*range (integer_swap) boolean_yankdup) boolean_yankdup integer_yank integer_eq print_integer exec_stackdepth integer_div exec_y (integer_div integer_sub integer_shove integer_dup_items exec_swap (exec_eq) (exec_dup () exec_y_when_autoconstructing () exec_when ())))
Zero cases best errors: [1 1 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (242 1 325 326 325 325 276 277 277 277)
Population mean number of elite cases: 2.65
Count of perfect (error zero) individuals by case: (242 1 325 326 325 325 276 277 277 277)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_434} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_boolean_697} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k})
Best program: (boolean_pop integer_lte boolean_and integer_sub exec_do*while (integer_eq exec_k () (integer_gt) boolean_swap exec_yankdup integer_sub integer_fromboolean tag_boolean_434 exec_do*count (in4 boolean_frominteger exec_when () boolean_stackdepth integer_stackdepth exec_do*range () integer_mult integer_swap) exec_if () (integer_add) integer_div integer_inc exec_shove (exec_yank)) integer_lte exec_k_when_autoconstructing () (integer_empty integer_flush integer_div boolean_dup integer_dup boolean_xor in1 integer_pop) integer_dup_times integer_stackdepth boolean_empty boolean_and boolean_yank tag_boolean_697 boolean_invert_second_then_and boolean_stackdepth integer_flush integer_sub exec_s_when_autoconstructing (exec_dup (print_integer boolean_pop in3 integer_shove boolean_pop) exec_k (exec_do*times () boolean_invert_first_then_and exec_k (exec_y_when_autoconstructing (exec_flush) exec_empty) (integer_stackdepth exec_k (integer_flush) (exec_s (exec_noop integer_mod exec_k () ()) () ()))) ()) () ())
Errors: [1 1 1 1 1 1 0 0 0 0]
Total: 6
Mean: 0.6
Genome size: 69
Size: 98
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 7.349
Median total errors in population: 6
Error averages by case: (0.758 0.999 0.675 0.674 0.675 0.675 0.724 0.723 0.723 0.723)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.571
Average program size in population (points): 68.38
Average percent parens in population: 0.253
Minimum age in population: 4.0
Maximum age in population: 7.375
Average age in population: 5.577125
Median age in population: 5.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3738372
--- Timings ---
Current time: 1559314724799 milliseconds
Total Time:          15.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.2 seconds, 51.8%
Fitness Testing:      5.2 seconds, 32.9%
Report:               2.3 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (exec_eq in2 integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove (boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_pop boolean_dup_times integer_mult) boolean_flush exec_shove (16 integer_mod) in2 exec_swap (integer_min) (print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank) integer_add integer_eq integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ()))
Lexicase best errors: [1 1 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (exec_eq in2 integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove (boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_pop boolean_dup_times integer_mult) boolean_flush exec_shove (16 integer_mod) in2 exec_swap (integer_min) (print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank) integer_add integer_eq integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ()))
Zero cases best errors: [1 1 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (371 370 317 72 9 319 81 79 81 768)
Population mean number of elite cases: 2.47
Count of perfect (error zero) individuals by case: (371 370 317 72 9 319 81 79 81 768)
Population mean number of perfect (error zero) cases: 2.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Best program: (exec_eq in2 integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove () boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_pop boolean_dup_times integer_mult) boolean_flush exec_shove (16 integer_mod) in2 exec_swap (integer_min) (print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (in1) boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap boolean_yank integer_add integer_eq integer_sub integer_inc boolean_eq integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Errors: [1 1 1 1 0 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 45
Size: 56
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 7.533
Median total errors in population: 7
Error averages by case: (0.629 0.63 0.683 0.928 0.991 0.681 0.919 0.921 0.919 0.232)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.155
Average program size in population (points): 71.9
Average percent parens in population: 0.253
Minimum age in population: 5.0
Maximum age in population: 8.9375
Average age in population: 7.16325
Median age in population: 7.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4507816
--- Timings ---
Current time: 1559314728166 milliseconds
Total Time:          19.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.4 seconds, 53.4%
Fitness Testing:      5.9 seconds, 30.3%
Report:               3.1 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove (boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 exec_swap () (integer_min) print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Lexicase best errors: [1 0 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 72
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove (boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 exec_swap () (integer_min) print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Zero cases best errors: [1 0 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 72
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (173 402 173 93 402 92 403 92 213 403)
Population mean number of elite cases: 2.45
Count of perfect (error zero) individuals by case: (173 402 173 93 402 92 403 92 213 403)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove (boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 exec_swap () (integer_min) print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Errors: [1 0 1 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 56
Size: 72
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.554
Median total errors in population: 8
Error averages by case: (0.827 0.598 0.827 0.907 0.598 0.908 0.597 0.908 0.787 0.597)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.551
Average program size in population (points): 68.653
Average percent parens in population: 0.243
Minimum age in population: 6.0
Maximum age in population: 10.46875
Average age in population: 8.42559375
Median age in population: 8.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5218014
--- Timings ---
Current time: 1559314731503 milliseconds
Total Time:          22.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.3 seconds, 54.9%
Fitness Testing:      6.6 seconds, 29.3%
Report:               3.5 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 413
Test mean error for best: 0.41300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction -68} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_lte boolean_shove -68 exec_do*range (exec_stackdepth integer_flush integer_fromboolean exec_dup_items in3) boolean_not boolean_eq integer_sub exec_pop (16 integer_mod) in2 exec_swap () (integer_min) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_div boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Lexicase best errors: [1 0 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 64
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction -68} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_lte boolean_shove -68 exec_do*range (exec_stackdepth integer_flush integer_fromboolean exec_dup_items in3) boolean_not boolean_eq integer_sub exec_pop (16 integer_mod) in2 exec_swap () (integer_min) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_div boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Zero cases best errors: [1 0 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 64
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (429 154 432 451 434 153 228 226 154 154)
Population mean number of elite cases: 2.82
Count of perfect (error zero) individuals by case: (429 154 432 451 434 153 228 226 154 154)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction -68} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Best program: (integer_lte boolean_shove -68 exec_do*range (exec_stackdepth integer_flush integer_fromboolean exec_dup_items in3) boolean_not boolean_eq integer_sub exec_pop (16 integer_mod) in2 exec_swap () (integer_min) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_div boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Errors: [1 0 1 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 50
Size: 64
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 7.185
Median total errors in population: 6
Error averages by case: (0.571 0.846 0.568 0.549 0.566 0.847 0.772 0.774 0.846 0.846)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.398
Average program size in population (points): 82.517
Average percent parens in population: 0.239
Minimum age in population: 7.75
Maximum age in population: 12.0
Average age in population: 10.282125
Median age in population: 10.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 185
Genome diversity (% unique genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 192
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6256731
--- Timings ---
Current time: 1559314735416 milliseconds
Total Time:          26.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.5 seconds, 54.8%
Fitness Testing:      7.6 seconds, 28.8%
Report:               4.2 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 413
Test mean error for best: 0.41300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction -68} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_lte boolean_shove -68 exec_do*range (exec_stackdepth integer_flush integer_fromboolean exec_dup_items in3) boolean_not boolean_eq integer_sub exec_pop (16 integer_mod) in2 exec_swap () (integer_min) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth boolean_yank integer_add integer_dec integer_sub integer_div boolean_eq integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())))
Lexicase best errors: [1 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 64
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction -68} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_lte boolean_shove -68 exec_do*range (exec_stackdepth integer_flush integer_fromboolean exec_dup_items in3) boolean_not boolean_eq integer_sub exec_pop (16 integer_mod) in2 exec_swap () (integer_min) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth boolean_yank integer_add integer_dec integer_sub integer_div boolean_eq integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())))
Zero cases best errors: [1 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 64
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 909 296 730 416 417 737 908 732 737)
Population mean number of elite cases: 6.05
Count of perfect (error zero) individuals by case: (165 909 296 730 416 417 737 908 732 737)
Population mean number of perfect (error zero) cases: 6.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction -68} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Best program: (integer_lte boolean_shove -68 exec_do*range (exec_stackdepth integer_flush integer_fromboolean exec_dup_items in3) boolean_not boolean_eq integer_sub exec_pop (16 integer_mod) in2 exec_swap () (integer_min) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Errors: [1 0 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 62
Size: 79
Percent parens: 0.215
--- Population Statistics ---
Average total errors in population: 3.953
Median total errors in population: 3
Error averages by case: (0.835 0.091 0.704 0.27 0.584 0.583 0.263 0.092 0.268 0.263)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.514
Average program size in population (points): 71.988
Average percent parens in population: 0.226
Minimum age in population: 9.1875
Maximum age in population: 13.359375
Average age in population: 11.77109375
Median age in population: 11.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 222
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 223
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7344339
--- Timings ---
Current time: 1559314738972 milliseconds
Total Time:          30.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.3 seconds, 54.3%
Fitness Testing:      8.7 seconds, 29.1%
Report:               4.9 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove (integer_flush boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 exec_swap () (integer_min) print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Lexicase best errors: [1 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 74
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove (integer_flush boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 exec_swap () (integer_min) print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Zero cases best errors: [1 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 74
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (103 503 799 515 911 239 240 911 240 240)
Population mean number of elite cases: 4.70
Count of perfect (error zero) individuals by case: (103 503 799 515 911 239 240 911 240 240)
Population mean number of perfect (error zero) cases: 4.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Best program: (exec_eq exec_yankdup exec_dup_items exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove (boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 exec_swap () (integer_min) print_integer boolean_stackdepth boolean_yankdup boolean_swap) boolean_yank exec_noop boolean_or integer_sub exec_flush integer_add boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Errors: [1 1 0 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 53
Size: 66
Percent parens: 0.197
--- Population Statistics ---
Average total errors in population: 5.299
Median total errors in population: 5
Error averages by case: (0.897 0.497 0.201 0.485 0.089 0.761 0.76 0.089 0.76 0.76)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.803
Average program size in population (points): 69.543
Average percent parens in population: 0.224
Minimum age in population: 10.625
Maximum age in population: 15.03125
Average age in population: 13.27394921875
Median age in population: 13.30078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8428377
--- Timings ---
Current time: 1559314742154 milliseconds
Total Time:          33.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.2 seconds, 53.9%
Fitness Testing:      9.9 seconds, 29.3%
Report:               5.6 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 413
Test mean error for best: 0.41300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction -68} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when})
Lexicase best program: (integer_lte boolean_shove -68 exec_do*range (exec_stackdepth integer_flush integer_fromboolean exec_dup_items in3) boolean_not boolean_eq integer_sub exec_pop (16 integer_mod) in2 exec_swap () (integer_min) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_div boolean_eq) integer_dup_times exec_swap (exec_when ()) ())
Lexicase best errors: [1 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction -68} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when})
Zero cases best program: (integer_lte boolean_shove -68 exec_do*range (exec_stackdepth integer_flush integer_fromboolean exec_dup_items in3) boolean_not boolean_eq integer_sub exec_pop (16 integer_mod) in2 exec_swap () (integer_min) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_div boolean_eq) integer_dup_times exec_swap (exec_when ()) ())
Zero cases best errors: [1 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (103 250 248 757 788 809 511 250 101 515)
Population mean number of elite cases: 4.33
Count of perfect (error zero) individuals by case: (103 250 248 757 788 809 511 250 101 515)
Population mean number of perfect (error zero) cases: 4.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction -68} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Best program: (integer_lte boolean_shove -68 exec_do*range (exec_stackdepth integer_flush integer_fromboolean exec_dup_items in3) boolean_not boolean_eq integer_sub exec_pop (16 integer_mod) in2 exec_swap () (integer_min) integer_mod in2 boolean_frominteger integer_min print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_div boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Errors: [1 0 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 54
Size: 68
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 5.668
Median total errors in population: 5
Error averages by case: (0.897 0.75 0.752 0.243 0.212 0.191 0.489 0.75 0.899 0.485)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.52
Average program size in population (points): 70.555
Average percent parens in population: 0.225
Minimum age in population: 12.75
Maximum age in population: 16.42578125
Average age in population: 14.8299140625
Median age in population: 14.8642578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 9487437
--- Timings ---
Current time: 1559314745790 milliseconds
Total Time:          36.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.0 seconds, 54.4%
Fitness Testing:     10.9 seconds, 29.6%
Report:               5.8 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when})
Lexicase best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove (boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in3 exec_swap () (integer_min) print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when ()) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 70
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when})
Zero cases best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove (boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in3 exec_swap () (integer_min) print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when ()) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 70
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (527 527 455 424 526 455 528 710 901 165)
Population mean number of elite cases: 5.22
Count of perfect (error zero) individuals by case: (527 527 455 424 526 455 528 710 901 165)
Population mean number of perfect (error zero) cases: 5.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when})
Best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove (boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in3 exec_swap () (integer_min) print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when ()) ())
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 54
Size: 70
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 4.782
Median total errors in population: 3
Error averages by case: (0.473 0.473 0.545 0.576 0.474 0.545 0.472 0.29 0.099 0.835)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.038
Average program size in population (points): 70.057
Average percent parens in population: 0.226
Minimum age in population: 14.0
Maximum age in population: 18.1162109375
Average age in population: 16.551927734375
Median age in population: 16.57421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 10545648
--- Timings ---
Current time: 1559314749310 milliseconds
Total Time:          40.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.8 seconds, 54.0%
Fitness Testing:     12.0 seconds, 29.7%
Report:               6.5 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 413
Test mean error for best: 0.41300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when})
Lexicase best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove (boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in3 exec_swap () (integer_min) print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_k_when_autoconstructing (boolean_or) (integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when ()) ())))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 72
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when})
Zero cases best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove (boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in3 exec_swap () (integer_min) print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_k_when_autoconstructing (boolean_or) (integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when ()) ())))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 72
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (284 899 696 881 101 697 552 690 881 696)
Population mean number of elite cases: 6.38
Count of perfect (error zero) individuals by case: (284 899 696 881 101 697 552 690 881 696)
Population mean number of perfect (error zero) cases: 6.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction -68} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Best program: (integer_lte boolean_shove -68 exec_do*range (exec_stackdepth integer_flush integer_fromboolean exec_dup_items in3) boolean_not boolean_eq integer_sub exec_pop (16 integer_mod) in2 exec_swap () (integer_min) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add) boolean_dup exec_shove (integer_eq exec_y (boolean_frominteger) integer_sub integer_div boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 47
Size: 61
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 3.623
Median total errors in population: 2
Error averages by case: (0.716 0.101 0.304 0.119 0.899 0.303 0.448 0.31 0.119 0.304)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.635
Average program size in population (points): 69.495
Average percent parens in population: 0.226
Minimum age in population: 15.48828125
Maximum age in population: 19.7158203125
Average age in population: 18.097822265625
Median age in population: 18.189453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 11615042
--- Timings ---
Current time: 1559314752852 milliseconds
Total Time:          44.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.7 seconds, 53.8%
Fitness Testing:     13.1 seconds, 29.7%
Report:               7.2 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove (boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_dup_times in1)) boolean_flush exec_pop (16 integer_mod) in3 exec_swap () (integer_min) print_integer boolean_eq boolean_or boolean_stackdepth boolean_yankdup boolean_swap boolean_yank exec_noop boolean_or integer_sub boolean_rot integer_add boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_div boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 64
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove (boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_dup_times in1)) boolean_flush exec_pop (16 integer_mod) in3 exec_swap () (integer_min) print_integer boolean_eq boolean_or boolean_stackdepth boolean_yankdup boolean_swap boolean_yank exec_noop boolean_or integer_sub boolean_rot integer_add boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_div boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 64
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (391 387 390 698 698 529 733 698 891 532)
Population mean number of elite cases: 5.95
Count of perfect (error zero) individuals by case: (391 387 390 698 698 529 733 698 891 532)
Population mean number of perfect (error zero) cases: 5.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty exec_shove (boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in3 exec_swap () (integer_min) print_integer boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap boolean_yank exec_noop boolean_or) integer_sub boolean_rot integer_add boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 52
Size: 64
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 4.053
Median total errors in population: 3
Error averages by case: (0.609 0.613 0.61 0.302 0.302 0.471 0.267 0.302 0.109 0.468)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.636
Average program size in population (points): 67.798
Average percent parens in population: 0.223
Minimum age in population: 17.07421875
Maximum age in population: 21.325927734375
Average age in population: 19.6649736328125
Median age in population: 19.6788330078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 12700240
--- Timings ---
Current time: 1559314756469 milliseconds
Total Time:          47.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.5 seconds, 53.6%
Fitness Testing:     14.2 seconds, 29.8%
Report:               7.8 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 193
Test mean error for best: 0.19300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 80
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 80
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (641 641 627 925 632 1 625 625 641 523)
Population mean number of elite cases: 5.88
Count of perfect (error zero) individuals by case: (641 641 627 925 632 1 625 625 641 523)
Population mean number of perfect (error zero) cases: 5.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 62
Size: 80
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 4.119
Median total errors in population: 4
Error averages by case: (0.359 0.359 0.373 0.075 0.368 0.999 0.375 0.375 0.359 0.477)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.99
Average program size in population (points): 68.423
Average percent parens in population: 0.225
Minimum age in population: 18.447265625
Maximum age in population: 22.946533203125
Average age in population: 21.11305004882812
Median age in population: 21.19775390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 13747245
--- Timings ---
Current time: 1559314759976 milliseconds
Total Time:          51.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.3 seconds, 53.5%
Fitness Testing:     15.2 seconds, 29.8%
Report:               8.4 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 193
Test mean error for best: 0.19300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Lexicase best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 80
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Zero cases best program: (exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 80
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (769 769 797 908 767 769 798 769 788 769)
Population mean number of elite cases: 7.90
Count of perfect (error zero) individuals by case: (769 769 797 908 767 769 798 769 788 769)
Population mean number of perfect (error zero) cases: 7.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction 16} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap})
Best program: (exec_eq exec_yankdup integer_rot exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 67
Size: 85
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 2.097
Median total errors in population: 0
Error averages by case: (0.231 0.231 0.203 0.092 0.233 0.231 0.202 0.231 0.212 0.231)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.157
Average program size in population (points): 78.683
Average percent parens in population: 0.222
Minimum age in population: 20.9619140625
Maximum age in population: 24.204833984375
Average age in population: 21.73427905273438
Median age in population: 21.9619140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 308
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 314
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.009
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 14890713
--- Timings ---
Current time: 1559314763632 milliseconds
Total Time:          54.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.1 seconds, 53.2%
Fitness Testing:     16.4 seconds, 29.9%
Report:               9.1 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 15
Successful program: (exec_eq exec_yankdup integer_rot exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 85


Auto-simplifying with starting size: 85
step: 0
program: (exec_eq exec_yankdup integer_rot exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 85

step: 500
program: (exec_eq exec_yankdup integer_rot exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 85

step: 1000
program: (exec_eq exec_yankdup integer_rot exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 85

step: 1500
program: (exec_eq exec_yankdup integer_rot exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 85

step: 2000
program: (exec_eq exec_yankdup integer_rot exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 85

step: 2500
program: (exec_eq exec_yankdup integer_rot exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 85

step: 3000
program: (exec_eq exec_yankdup integer_rot exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 85

step: 3500
program: (exec_eq exec_yankdup integer_rot exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 85

step: 4000
program: (exec_eq exec_yankdup integer_rot exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 85

step: 4500
program: (exec_eq exec_yankdup integer_rot exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 85

step: 5000
program: (exec_eq exec_yankdup integer_rot exec_eq exec_yankdup integer_rot exec_y_when_autoconstructing () boolean_dup_items boolean_empty integer_eq boolean_pop boolean_xor integer_gt boolean_invert_second_then_and boolean_rot boolean_not exec_shove (boolean_flush boolean_not exec_shove (boolean_flush boolean_dup_times in1) boolean_flush exec_pop (16 integer_mod) in2 in3 exec_swap () (integer_min) exec_swap () (integer_min) print_integer boolean_eq) print_integer boolean_eq integer_shove exec_y_when_autoconstructing (exec_s_when_autoconstructing () (boolean_yankdup boolean_or boolean_stackdepth boolean_yankdup boolean_swap) (boolean_yank exec_noop boolean_or) integer_sub boolean_rot boolean_eq) boolean_dup exec_shove (integer_eq exec_y (integer_stackdepth) boolean_yank integer_add integer_dec integer_sub integer_inc boolean_eq) integer_dup_times exec_swap (exec_when () integer_yankdup boolean_swap) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 85

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 193
Test mean error for best: 0.19300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
;;******************************
