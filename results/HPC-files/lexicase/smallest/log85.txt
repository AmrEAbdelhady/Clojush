Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[31 31 31 64] 31] [[83 83 83 99] 83] [[-26 -26 -26 64] -26] [[-35 -35 -32 -35] -35] [[-41 3 3 3] -41] [[35 35 35 -25] -25] [[74 74 74 -33] -33] [[95 95 95 62] 62] [[-63 59 -63 -63] -63] [[89 -37 -37 -37] -37] [(-56 -56 -56 -56) -56] [(38 38 38 38) 38] [(79 79 79 79) 79] [(87 87 87 87) 87] [(-53 -53 -53 -53) -53] [(47 88 77 9) 9] [(16 55 50 57) 16] [(6 58 53 57) 6] [(3 29 29 77) 3] [(16 89 86 22) 16] [(55 55 35 34) 34] [(12 24 48 62) 12] [(52 96 51 77) 51] [(0 56 71 83) 0] [(54 24 93 95) 24] [(25 89 88 11) 11] [(10 71 2 16) 2] [(36 51 12 16) 12] [(71 62 34 81) 34] [(79 9 99 64) 9] [(18 75 30 18) 18] [(57 44 100 60) 44] [(34 36 30 18) 18] [(23 62 98 62) 23] [(26 84 69 32) 26] [(61 82 82 -84) -84] [(-33 96 30 91) -33] [(46 9 99 71) 9] [(38 -45 90 84) -45] [(67 -9 15 -60) -60] [(-67 -75 -33 -18) -75] [(12 -16 3 -73) -73] [(-86 -40 -21 -34) -86] [(74 49 57 60) 49] [(41 -61 -75 -59) -75] [(74 16 -3 -33) -33] [(77 -64 22 -8) -64] [(7 39 45 -53) -53] [(-53 58 -30 66) -53] [(24 24 -60 -46) -60] [(58 50 25 -93) -93] [(-47 92 72 24) -47] [(99 75 -48 -13) -48] [(-59 -9 -84 68) -84] [(-60 36 39 38) -60] [(-76 -72 10 -7) -76] [(93 -93 -87 32) -93] [(67 0 -83 -1) -83] [(-67 75 15 -93) -93] [(65 1 81 34) 1] [(100 -3 76 14) -3] [(-79 49 -25 -82) -82] [(-18 42 28 28) -18] [(-65 36 -71 21) -71] [(-82 -24 57 -65) -82] [(14 7 10 -40) -40] [(81 -59 79 55) -59] [(87 1 -79 -97) -97] [(6 -29 -71 21) -71] [(50 -73 -77 28) -77] [(49 98 -15 -33) -33] [(95 -76 42 20) -76] [(6 65 -8 76) -8] [(-85 -49 -75 78) -85] [(95 4 -42 10) -42] [(24 3 -8 -47) -47] [(-24 -72 -10 20) -72] [(-24 13 -64 -57) -64] [(84 15 21 -100) -100] [(25 -88 -2 -3) -88] [(23 -78 -26 -32) -78] [(43 96 95 54) 43] [(98 68 75 31) 31] [(73 -69 37 92) -69] [(-33 81 -22 -24) -33] [(45 19 75 -12) -12] [(51 -76 68 -97) -97] [(98 61 -68 31) -68] [(14 84 -35 58) -35] [(30 -10 -23 63) -23] [(-32 -74 57 -16) -74] [(12 -18 -9 88) -18] [(40 80 94 59) 40] [(22 -81 -80 45) -81] [(6 56 -44 46) -44])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[31 31 31 64] 31]
Train Case:   6 | Input/Output: [[83 83 83 99] 83]
Train Case:   7 | Input/Output: [[-26 -26 -26 64] -26]
Train Case:   8 | Input/Output: [[-35 -35 -32 -35] -35]
Train Case:   9 | Input/Output: [[-41 3 3 3] -41]
Train Case:  10 | Input/Output: [[35 35 35 -25] -25]
Train Case:  11 | Input/Output: [[74 74 74 -33] -33]
Train Case:  12 | Input/Output: [[95 95 95 62] 62]
Train Case:  13 | Input/Output: [[-63 59 -63 -63] -63]
Train Case:  14 | Input/Output: [[89 -37 -37 -37] -37]
Train Case:  15 | Input/Output: [(-56 -56 -56 -56) -56]
Train Case:  16 | Input/Output: [(38 38 38 38) 38]
Train Case:  17 | Input/Output: [(79 79 79 79) 79]
Train Case:  18 | Input/Output: [(87 87 87 87) 87]
Train Case:  19 | Input/Output: [(-53 -53 -53 -53) -53]
Train Case:  20 | Input/Output: [(47 88 77 9) 9]
Train Case:  21 | Input/Output: [(16 55 50 57) 16]
Train Case:  22 | Input/Output: [(6 58 53 57) 6]
Train Case:  23 | Input/Output: [(3 29 29 77) 3]
Train Case:  24 | Input/Output: [(16 89 86 22) 16]
Train Case:  25 | Input/Output: [(55 55 35 34) 34]
Train Case:  26 | Input/Output: [(12 24 48 62) 12]
Train Case:  27 | Input/Output: [(52 96 51 77) 51]
Train Case:  28 | Input/Output: [(0 56 71 83) 0]
Train Case:  29 | Input/Output: [(54 24 93 95) 24]
Train Case:  30 | Input/Output: [(25 89 88 11) 11]
Train Case:  31 | Input/Output: [(10 71 2 16) 2]
Train Case:  32 | Input/Output: [(36 51 12 16) 12]
Train Case:  33 | Input/Output: [(71 62 34 81) 34]
Train Case:  34 | Input/Output: [(79 9 99 64) 9]
Train Case:  35 | Input/Output: [(18 75 30 18) 18]
Train Case:  36 | Input/Output: [(57 44 100 60) 44]
Train Case:  37 | Input/Output: [(34 36 30 18) 18]
Train Case:  38 | Input/Output: [(23 62 98 62) 23]
Train Case:  39 | Input/Output: [(26 84 69 32) 26]
Train Case:  40 | Input/Output: [(61 82 82 -84) -84]
Train Case:  41 | Input/Output: [(-33 96 30 91) -33]
Train Case:  42 | Input/Output: [(46 9 99 71) 9]
Train Case:  43 | Input/Output: [(38 -45 90 84) -45]
Train Case:  44 | Input/Output: [(67 -9 15 -60) -60]
Train Case:  45 | Input/Output: [(-67 -75 -33 -18) -75]
Train Case:  46 | Input/Output: [(12 -16 3 -73) -73]
Train Case:  47 | Input/Output: [(-86 -40 -21 -34) -86]
Train Case:  48 | Input/Output: [(74 49 57 60) 49]
Train Case:  49 | Input/Output: [(41 -61 -75 -59) -75]
Train Case:  50 | Input/Output: [(74 16 -3 -33) -33]
Train Case:  51 | Input/Output: [(77 -64 22 -8) -64]
Train Case:  52 | Input/Output: [(7 39 45 -53) -53]
Train Case:  53 | Input/Output: [(-53 58 -30 66) -53]
Train Case:  54 | Input/Output: [(24 24 -60 -46) -60]
Train Case:  55 | Input/Output: [(58 50 25 -93) -93]
Train Case:  56 | Input/Output: [(-47 92 72 24) -47]
Train Case:  57 | Input/Output: [(99 75 -48 -13) -48]
Train Case:  58 | Input/Output: [(-59 -9 -84 68) -84]
Train Case:  59 | Input/Output: [(-60 36 39 38) -60]
Train Case:  60 | Input/Output: [(-76 -72 10 -7) -76]
Train Case:  61 | Input/Output: [(93 -93 -87 32) -93]
Train Case:  62 | Input/Output: [(67 0 -83 -1) -83]
Train Case:  63 | Input/Output: [(-67 75 15 -93) -93]
Train Case:  64 | Input/Output: [(65 1 81 34) 1]
Train Case:  65 | Input/Output: [(100 -3 76 14) -3]
Train Case:  66 | Input/Output: [(-79 49 -25 -82) -82]
Train Case:  67 | Input/Output: [(-18 42 28 28) -18]
Train Case:  68 | Input/Output: [(-65 36 -71 21) -71]
Train Case:  69 | Input/Output: [(-82 -24 57 -65) -82]
Train Case:  70 | Input/Output: [(14 7 10 -40) -40]
Train Case:  71 | Input/Output: [(81 -59 79 55) -59]
Train Case:  72 | Input/Output: [(87 1 -79 -97) -97]
Train Case:  73 | Input/Output: [(6 -29 -71 21) -71]
Train Case:  74 | Input/Output: [(50 -73 -77 28) -77]
Train Case:  75 | Input/Output: [(49 98 -15 -33) -33]
Train Case:  76 | Input/Output: [(95 -76 42 20) -76]
Train Case:  77 | Input/Output: [(6 65 -8 76) -8]
Train Case:  78 | Input/Output: [(-85 -49 -75 78) -85]
Train Case:  79 | Input/Output: [(95 4 -42 10) -42]
Train Case:  80 | Input/Output: [(24 3 -8 -47) -47]
Train Case:  81 | Input/Output: [(-24 -72 -10 20) -72]
Train Case:  82 | Input/Output: [(-24 13 -64 -57) -64]
Train Case:  83 | Input/Output: [(84 15 21 -100) -100]
Train Case:  84 | Input/Output: [(25 -88 -2 -3) -88]
Train Case:  85 | Input/Output: [(23 -78 -26 -32) -78]
Train Case:  86 | Input/Output: [(43 96 95 54) 43]
Train Case:  87 | Input/Output: [(98 68 75 31) 31]
Train Case:  88 | Input/Output: [(73 -69 37 92) -69]
Train Case:  89 | Input/Output: [(-33 81 -22 -24) -33]
Train Case:  90 | Input/Output: [(45 19 75 -12) -12]
Train Case:  91 | Input/Output: [(51 -76 68 -97) -97]
Train Case:  92 | Input/Output: [(98 61 -68 31) -68]
Train Case:  93 | Input/Output: [(14 84 -35 58) -35]
Train Case:  94 | Input/Output: [(30 -10 -23 63) -23]
Train Case:  95 | Input/Output: [(-32 -74 57 -16) -74]
Train Case:  96 | Input/Output: [(12 -18 -9 88) -18]
Train Case:  97 | Input/Output: [(40 80 94 59) 40]
Train Case:  98 | Input/Output: [(22 -81 -80 45) -81]
Train Case:  99 | Input/Output: [(6 56 -44 46) -44]
Test Case:   0 | Input/Output: [[-56 -56 -56 -80] -80]
Test Case:   1 | Input/Output: [[-4 -4 49 -4] -4]
Test Case:   2 | Input/Output: [[-97 -97 -23 -97] -97]
Test Case:   3 | Input/Output: [[-87 39 39 39] -87]
Test Case:   4 | Input/Output: [[-9 7 -9 -9] -9]
Test Case:   5 | Input/Output: [[-17 -17 -17 -60] -60]
Test Case:   6 | Input/Output: [[28 28 -71 28] -71]
Test Case:   7 | Input/Output: [[87 87 87 54] 54]
Test Case:   8 | Input/Output: [[-29 -64 -29 -29] -64]
Test Case:   9 | Input/Output: [[-45 98 98 98] -45]
Test Case:  10 | Input/Output: [[-47 -47 -94 -47] -94]
Test Case:  11 | Input/Output: [[44 44 49 44] 44]
Test Case:  12 | Input/Output: [[39 -47 39 39] -47]
Test Case:  13 | Input/Output: [[-45 -45 -45 26] -45]
Test Case:  14 | Input/Output: [[85 76 76 76] 76]
Test Case:  15 | Input/Output: [[-82 11 11 11] -82]
Test Case:  16 | Input/Output: [[-61 91 91 91] -61]
Test Case:  17 | Input/Output: [[82 82 -30 82] -30]
Test Case:  18 | Input/Output: [[-13 88 -13 -13] -13]
Test Case:  19 | Input/Output: [[-70 -70 -70 7] -70]
Test Case:  20 | Input/Output: [[-30 -30 -21 -30] -30]
Test Case:  21 | Input/Output: [[54 54 92 54] 54]
Test Case:  22 | Input/Output: [[57 58 58 58] 57]
Test Case:  23 | Input/Output: [[-12 8 8 8] -12]
Test Case:  24 | Input/Output: [[-75 3 3 3] -75]
Test Case:  25 | Input/Output: [[26 26 26 -76] -76]
Test Case:  26 | Input/Output: [[0 99 0 0] 0]
Test Case:  27 | Input/Output: [[25 25 25 -55] -55]
Test Case:  28 | Input/Output: [[100 100 100 -32] -32]
Test Case:  29 | Input/Output: [[-80 35 35 35] -80]
Test Case:  30 | Input/Output: [[55 5 5 5] 5]
Test Case:  31 | Input/Output: [[18 18 18 -62] -62]
Test Case:  32 | Input/Output: [[31 44 44 44] 31]
Test Case:  33 | Input/Output: [[85 85 85 18] 18]
Test Case:  34 | Input/Output: [[84 84 84 -46] -46]
Test Case:  35 | Input/Output: [[7 66 7 7] 7]
Test Case:  36 | Input/Output: [[-51 -51 -51 -43] -51]
Test Case:  37 | Input/Output: [[-18 -18 -29 -18] -29]
Test Case:  38 | Input/Output: [[100 -19 100 100] -19]
Test Case:  39 | Input/Output: [[-47 -44 -44 -44] -47]
Test Case:  40 | Input/Output: [[67 67 -24 67] -24]
Test Case:  41 | Input/Output: [[-62 86 -62 -62] -62]
Test Case:  42 | Input/Output: [[-1 -1 -17 -1] -17]
Test Case:  43 | Input/Output: [[36 -71 -71 -71] -71]
Test Case:  44 | Input/Output: [[48 48 15 48] 15]
Test Case:  45 | Input/Output: [[70 70 70 70] 70]
Test Case:  46 | Input/Output: [[12 22 12 12] 12]
Test Case:  47 | Input/Output: [[40 40 40 -63] -63]
Test Case:  48 | Input/Output: [[-56 -56 -85 -56] -85]
Test Case:  49 | Input/Output: [[64 64 64 -47] -47]
Test Case:  50 | Input/Output: [[91 -52 -52 -52] -52]
Test Case:  51 | Input/Output: [[-49 20 20 20] -49]
Test Case:  52 | Input/Output: [[63 82 63 63] 63]
Test Case:  53 | Input/Output: [[-93 -93 -93 76] -93]
Test Case:  54 | Input/Output: [[81 81 -38 81] -38]
Test Case:  55 | Input/Output: [[-26 -26 -26 63] -26]
Test Case:  56 | Input/Output: [[36 36 36 23] 23]
Test Case:  57 | Input/Output: [[71 71 71 -66] -66]
Test Case:  58 | Input/Output: [[48 48 -4 48] -4]
Test Case:  59 | Input/Output: [[-66 -92 -66 -66] -92]
Test Case:  60 | Input/Output: [[28 28 -79 28] -79]
Test Case:  61 | Input/Output: [[-30 -30 -30 1] -30]
Test Case:  62 | Input/Output: [[95 28 28 28] 28]
Test Case:  63 | Input/Output: [[17 17 17 17] 17]
Test Case:  64 | Input/Output: [[-89 -89 -89 10] -89]
Test Case:  65 | Input/Output: [[-91 -91 -54 -91] -91]
Test Case:  66 | Input/Output: [[54 -4 -4 -4] -4]
Test Case:  67 | Input/Output: [[81 81 -4 81] -4]
Test Case:  68 | Input/Output: [[-28 96 -28 -28] -28]
Test Case:  69 | Input/Output: [[31 41 31 31] 31]
Test Case:  70 | Input/Output: [[-86 -26 -86 -86] -86]
Test Case:  71 | Input/Output: [[15 -67 -67 -67] -67]
Test Case:  72 | Input/Output: [[-60 -60 -60 -97] -97]
Test Case:  73 | Input/Output: [[40 -4 40 40] -4]
Test Case:  74 | Input/Output: [[-2 -2 -2 52] -2]
Test Case:  75 | Input/Output: [[-12 -12 -12 -44] -44]
Test Case:  76 | Input/Output: [[-65 -85 -65 -65] -85]
Test Case:  77 | Input/Output: [[-100 -82 -100 -100] -100]
Test Case:  78 | Input/Output: [[-35 -35 -35 -28] -35]
Test Case:  79 | Input/Output: [[84 84 84 64] 64]
Test Case:  80 | Input/Output: [[-17 -17 56 -17] -17]
Test Case:  81 | Input/Output: [[-41 93 -41 -41] -41]
Test Case:  82 | Input/Output: [[18 81 18 18] 18]
Test Case:  83 | Input/Output: [[55 55 55 -95] -95]
Test Case:  84 | Input/Output: [[55 55 85 55] 55]
Test Case:  85 | Input/Output: [[21 21 26 21] 21]
Test Case:  86 | Input/Output: [[-34 -34 -34 -64] -64]
Test Case:  87 | Input/Output: [[18 18 -93 18] -93]
Test Case:  88 | Input/Output: [[-84 -84 -14 -84] -84]
Test Case:  89 | Input/Output: [[-72 -19 -19 -19] -72]
Test Case:  90 | Input/Output: [[-70 -63 -70 -70] -70]
Test Case:  91 | Input/Output: [[-17 -17 -17 -85] -85]
Test Case:  92 | Input/Output: [[-37 74 74 74] -37]
Test Case:  93 | Input/Output: [[-36 -36 -36 23] -36]
Test Case:  94 | Input/Output: [[-32 40 40 40] -32]
Test Case:  95 | Input/Output: [[-68 -68 62 -68] -68]
Test Case:  96 | Input/Output: [[72 29 72 72] 29]
Test Case:  97 | Input/Output: [[71 -56 -56 -56] -56]
Test Case:  98 | Input/Output: [[-85 96 -85 -85] -85]
Test Case:  99 | Input/Output: [[-63 -26 -26 -26] -63]
Test Case: 100 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 101 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 102 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 103 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 104 | Input/Output: [(67 67 67 67) 67]
Test Case: 105 | Input/Output: [(12 12 12 12) 12]
Test Case: 106 | Input/Output: [(12 12 12 12) 12]
Test Case: 107 | Input/Output: [(1 1 1 1) 1]
Test Case: 108 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 109 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 110 | Input/Output: [(49 49 49 49) 49]
Test Case: 111 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 112 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 113 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 114 | Input/Output: [(18 18 18 18) 18]
Test Case: 115 | Input/Output: [(75 75 75 75) 75]
Test Case: 116 | Input/Output: [(71 71 71 71) 71]
Test Case: 117 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 118 | Input/Output: [(100 100 100 100) 100]
Test Case: 119 | Input/Output: [(17 17 17 17) 17]
Test Case: 120 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 121 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 122 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 123 | Input/Output: [(64 64 64 64) 64]
Test Case: 124 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 125 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 126 | Input/Output: [(21 21 21 21) 21]
Test Case: 127 | Input/Output: [(58 58 58 58) 58]
Test Case: 128 | Input/Output: [(31 31 31 31) 31]
Test Case: 129 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 130 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 131 | Input/Output: [(57 57 57 57) 57]
Test Case: 132 | Input/Output: [(60 60 60 60) 60]
Test Case: 133 | Input/Output: [(89 89 89 89) 89]
Test Case: 134 | Input/Output: [(55 55 55 55) 55]
Test Case: 135 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 136 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 137 | Input/Output: [(80 80 80 80) 80]
Test Case: 138 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 139 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 140 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 141 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 142 | Input/Output: [(23 23 23 23) 23]
Test Case: 143 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 144 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 145 | Input/Output: [(45 45 45 45) 45]
Test Case: 146 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 147 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 148 | Input/Output: [(50 50 50 50) 50]
Test Case: 149 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 150 | Input/Output: [(98 98 98 98) 98]
Test Case: 151 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 152 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 153 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 154 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 155 | Input/Output: [(5 5 5 5) 5]
Test Case: 156 | Input/Output: [(73 73 73 73) 73]
Test Case: 157 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 158 | Input/Output: [(1 1 1 1) 1]
Test Case: 159 | Input/Output: [(92 92 92 92) 92]
Test Case: 160 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 161 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 162 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 163 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 164 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 165 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 166 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 167 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 168 | Input/Output: [(62 62 62 62) 62]
Test Case: 169 | Input/Output: [(31 31 31 31) 31]
Test Case: 170 | Input/Output: [(59 59 59 59) 59]
Test Case: 171 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 172 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 173 | Input/Output: [(35 35 35 35) 35]
Test Case: 174 | Input/Output: [(49 49 49 49) 49]
Test Case: 175 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 176 | Input/Output: [(4 4 4 4) 4]
Test Case: 177 | Input/Output: [(49 49 49 49) 49]
Test Case: 178 | Input/Output: [(6 6 6 6) 6]
Test Case: 179 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 180 | Input/Output: [(82 82 82 82) 82]
Test Case: 181 | Input/Output: [(86 86 86 86) 86]
Test Case: 182 | Input/Output: [(93 93 93 93) 93]
Test Case: 183 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 184 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 185 | Input/Output: [(6 6 6 6) 6]
Test Case: 186 | Input/Output: [(91 91 91 91) 91]
Test Case: 187 | Input/Output: [(90 90 90 90) 90]
Test Case: 188 | Input/Output: [(100 100 100 100) 100]
Test Case: 189 | Input/Output: [(84 84 84 84) 84]
Test Case: 190 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 191 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 192 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 193 | Input/Output: [(48 48 48 48) 48]
Test Case: 194 | Input/Output: [(76 76 76 76) 76]
Test Case: 195 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 196 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 197 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 198 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 199 | Input/Output: [(54 54 54 54) 54]
Test Case: 200 | Input/Output: [(43 55 93 85) 43]
Test Case: 201 | Input/Output: [(32 3 54 0) 0]
Test Case: 202 | Input/Output: [(10 8 15 59) 8]
Test Case: 203 | Input/Output: [(49 26 81 3) 3]
Test Case: 204 | Input/Output: [(35 5 18 61) 5]
Test Case: 205 | Input/Output: [(6 25 74 8) 6]
Test Case: 206 | Input/Output: [(81 53 45 95) 45]
Test Case: 207 | Input/Output: [(11 69 6 17) 6]
Test Case: 208 | Input/Output: [(80 69 77 97) 69]
Test Case: 209 | Input/Output: [(17 18 19 82) 17]
Test Case: 210 | Input/Output: [(100 89 7 41) 7]
Test Case: 211 | Input/Output: [(40 52 83 19) 19]
Test Case: 212 | Input/Output: [(16 53 79 54) 16]
Test Case: 213 | Input/Output: [(30 42 76 65) 30]
Test Case: 214 | Input/Output: [(69 50 73 83) 50]
Test Case: 215 | Input/Output: [(87 64 27 86) 27]
Test Case: 216 | Input/Output: [(8 21 74 18) 8]
Test Case: 217 | Input/Output: [(19 72 58 98) 19]
Test Case: 218 | Input/Output: [(26 15 70 90) 15]
Test Case: 219 | Input/Output: [(41 58 70 95) 41]
Test Case: 220 | Input/Output: [(84 73 72 55) 55]
Test Case: 221 | Input/Output: [(93 3 83 23) 3]
Test Case: 222 | Input/Output: [(46 86 1 29) 1]
Test Case: 223 | Input/Output: [(21 28 74 51) 21]
Test Case: 224 | Input/Output: [(38 54 31 36) 31]
Test Case: 225 | Input/Output: [(90 9 46 67) 9]
Test Case: 226 | Input/Output: [(13 91 9 47) 9]
Test Case: 227 | Input/Output: [(97 6 69 56) 6]
Test Case: 228 | Input/Output: [(97 48 29 1) 1]
Test Case: 229 | Input/Output: [(71 70 70 21) 21]
Test Case: 230 | Input/Output: [(47 96 59 66) 47]
Test Case: 231 | Input/Output: [(95 85 29 84) 29]
Test Case: 232 | Input/Output: [(35 97 14 77) 14]
Test Case: 233 | Input/Output: [(73 4 35 86) 4]
Test Case: 234 | Input/Output: [(39 17 66 48) 17]
Test Case: 235 | Input/Output: [(0 66 56 62) 0]
Test Case: 236 | Input/Output: [(71 24 25 82) 24]
Test Case: 237 | Input/Output: [(59 16 83 20) 16]
Test Case: 238 | Input/Output: [(52 50 63 82) 50]
Test Case: 239 | Input/Output: [(2 37 28 12) 2]
Test Case: 240 | Input/Output: [(0 32 8 47) 0]
Test Case: 241 | Input/Output: [(5 38 60 73) 5]
Test Case: 242 | Input/Output: [(7 69 32 25) 7]
Test Case: 243 | Input/Output: [(53 89 14 23) 14]
Test Case: 244 | Input/Output: [(88 79 94 10) 10]
Test Case: 245 | Input/Output: [(35 70 1 10) 1]
Test Case: 246 | Input/Output: [(6 62 89 7) 6]
Test Case: 247 | Input/Output: [(31 1 92 84) 1]
Test Case: 248 | Input/Output: [(10 57 17 92) 10]
Test Case: 249 | Input/Output: [(55 72 20 40) 20]
Test Case: 250 | Input/Output: [(76 97 50 31) 31]
Test Case: 251 | Input/Output: [(40 70 97 45) 40]
Test Case: 252 | Input/Output: [(8 34 66 18) 8]
Test Case: 253 | Input/Output: [(86 45 44 67) 44]
Test Case: 254 | Input/Output: [(9 61 14 85) 9]
Test Case: 255 | Input/Output: [(1 33 5 82) 1]
Test Case: 256 | Input/Output: [(63 49 24 62) 24]
Test Case: 257 | Input/Output: [(25 15 6 30) 6]
Test Case: 258 | Input/Output: [(86 86 60 87) 60]
Test Case: 259 | Input/Output: [(55 3 18 35) 3]
Test Case: 260 | Input/Output: [(49 89 59 91) 49]
Test Case: 261 | Input/Output: [(28 78 75 86) 28]
Test Case: 262 | Input/Output: [(59 22 21 97) 21]
Test Case: 263 | Input/Output: [(74 55 38 95) 38]
Test Case: 264 | Input/Output: [(59 0 19 22) 0]
Test Case: 265 | Input/Output: [(71 41 58 10) 10]
Test Case: 266 | Input/Output: [(90 65 84 23) 23]
Test Case: 267 | Input/Output: [(23 72 20 48) 20]
Test Case: 268 | Input/Output: [(58 90 69 73) 58]
Test Case: 269 | Input/Output: [(15 21 92 91) 15]
Test Case: 270 | Input/Output: [(49 96 6 91) 6]
Test Case: 271 | Input/Output: [(20 41 18 71) 18]
Test Case: 272 | Input/Output: [(56 76 31 17) 17]
Test Case: 273 | Input/Output: [(71 23 73 39) 23]
Test Case: 274 | Input/Output: [(83 65 68 39) 39]
Test Case: 275 | Input/Output: [(31 67 0 2) 0]
Test Case: 276 | Input/Output: [(81 28 27 27) 27]
Test Case: 277 | Input/Output: [(88 33 73 33) 33]
Test Case: 278 | Input/Output: [(81 47 62 69) 47]
Test Case: 279 | Input/Output: [(62 32 9 28) 9]
Test Case: 280 | Input/Output: [(8 34 94 62) 8]
Test Case: 281 | Input/Output: [(90 0 79 100) 0]
Test Case: 282 | Input/Output: [(90 99 1 49) 1]
Test Case: 283 | Input/Output: [(80 70 43 18) 18]
Test Case: 284 | Input/Output: [(98 58 55 55) 55]
Test Case: 285 | Input/Output: [(59 65 77 70) 59]
Test Case: 286 | Input/Output: [(97 32 30 28) 28]
Test Case: 287 | Input/Output: [(75 37 9 40) 9]
Test Case: 288 | Input/Output: [(9 63 78 46) 9]
Test Case: 289 | Input/Output: [(87 73 96 87) 73]
Test Case: 290 | Input/Output: [(20 98 56 27) 20]
Test Case: 291 | Input/Output: [(50 40 34 37) 34]
Test Case: 292 | Input/Output: [(16 19 76 60) 16]
Test Case: 293 | Input/Output: [(45 22 21 84) 21]
Test Case: 294 | Input/Output: [(80 92 28 90) 28]
Test Case: 295 | Input/Output: [(25 25 86 63) 25]
Test Case: 296 | Input/Output: [(91 13 11 68) 11]
Test Case: 297 | Input/Output: [(63 7 32 19) 7]
Test Case: 298 | Input/Output: [(53 100 36 40) 36]
Test Case: 299 | Input/Output: [(30 10 43 88) 10]
Test Case: 300 | Input/Output: [(98 71 79 83) 71]
Test Case: 301 | Input/Output: [(79 73 43 45) 43]
Test Case: 302 | Input/Output: [(47 10 17 17) 10]
Test Case: 303 | Input/Output: [(95 35 55 17) 17]
Test Case: 304 | Input/Output: [(31 92 86 95) 31]
Test Case: 305 | Input/Output: [(75 2 51 78) 2]
Test Case: 306 | Input/Output: [(41 62 10 42) 10]
Test Case: 307 | Input/Output: [(26 56 99 0) 0]
Test Case: 308 | Input/Output: [(30 73 12 82) 12]
Test Case: 309 | Input/Output: [(79 74 65 82) 65]
Test Case: 310 | Input/Output: [(68 82 71 94) 68]
Test Case: 311 | Input/Output: [(95 41 53 64) 41]
Test Case: 312 | Input/Output: [(3 26 96 99) 3]
Test Case: 313 | Input/Output: [(44 61 0 30) 0]
Test Case: 314 | Input/Output: [(20 69 0 4) 0]
Test Case: 315 | Input/Output: [(17 80 75 70) 17]
Test Case: 316 | Input/Output: [(98 77 31 5) 5]
Test Case: 317 | Input/Output: [(34 35 25 45) 25]
Test Case: 318 | Input/Output: [(8 50 76 63) 8]
Test Case: 319 | Input/Output: [(98 6 74 27) 6]
Test Case: 320 | Input/Output: [(99 25 85 87) 25]
Test Case: 321 | Input/Output: [(50 75 45 31) 31]
Test Case: 322 | Input/Output: [(45 78 61 74) 45]
Test Case: 323 | Input/Output: [(4 21 96 86) 4]
Test Case: 324 | Input/Output: [(53 75 23 94) 23]
Test Case: 325 | Input/Output: [(68 53 86 95) 53]
Test Case: 326 | Input/Output: [(36 45 14 39) 14]
Test Case: 327 | Input/Output: [(10 50 56 83) 10]
Test Case: 328 | Input/Output: [(20 88 12 49) 12]
Test Case: 329 | Input/Output: [(77 76 85 27) 27]
Test Case: 330 | Input/Output: [(46 56 78 78) 46]
Test Case: 331 | Input/Output: [(31 59 94 58) 31]
Test Case: 332 | Input/Output: [(43 65 3 26) 3]
Test Case: 333 | Input/Output: [(54 20 79 27) 20]
Test Case: 334 | Input/Output: [(32 32 55 93) 32]
Test Case: 335 | Input/Output: [(11 25 8 54) 8]
Test Case: 336 | Input/Output: [(12 0 73 70) 0]
Test Case: 337 | Input/Output: [(9 1 91 66) 1]
Test Case: 338 | Input/Output: [(81 40 38 45) 38]
Test Case: 339 | Input/Output: [(23 48 49 70) 23]
Test Case: 340 | Input/Output: [(35 45 10 93) 10]
Test Case: 341 | Input/Output: [(24 76 35 23) 23]
Test Case: 342 | Input/Output: [(73 86 77 29) 29]
Test Case: 343 | Input/Output: [(81 55 26 5) 5]
Test Case: 344 | Input/Output: [(3 65 96 0) 0]
Test Case: 345 | Input/Output: [(37 33 52 54) 33]
Test Case: 346 | Input/Output: [(41 41 90 61) 41]
Test Case: 347 | Input/Output: [(20 64 31 77) 20]
Test Case: 348 | Input/Output: [(40 0 25 15) 0]
Test Case: 349 | Input/Output: [(3 51 90 90) 3]
Test Case: 350 | Input/Output: [(69 6 2 12) 2]
Test Case: 351 | Input/Output: [(32 2 87 38) 2]
Test Case: 352 | Input/Output: [(66 11 91 58) 11]
Test Case: 353 | Input/Output: [(15 79 17 53) 15]
Test Case: 354 | Input/Output: [(100 57 13 86) 13]
Test Case: 355 | Input/Output: [(95 83 96 40) 40]
Test Case: 356 | Input/Output: [(93 9 95 5) 5]
Test Case: 357 | Input/Output: [(66 41 9 33) 9]
Test Case: 358 | Input/Output: [(18 79 71 97) 18]
Test Case: 359 | Input/Output: [(44 61 87 59) 44]
Test Case: 360 | Input/Output: [(61 41 49 58) 41]
Test Case: 361 | Input/Output: [(83 14 95 35) 14]
Test Case: 362 | Input/Output: [(15 40 86 59) 15]
Test Case: 363 | Input/Output: [(34 29 50 4) 4]
Test Case: 364 | Input/Output: [(87 80 72 36) 36]
Test Case: 365 | Input/Output: [(81 84 11 55) 11]
Test Case: 366 | Input/Output: [(76 42 89 87) 42]
Test Case: 367 | Input/Output: [(19 61 32 66) 19]
Test Case: 368 | Input/Output: [(96 92 25 56) 25]
Test Case: 369 | Input/Output: [(1 21 87 25) 1]
Test Case: 370 | Input/Output: [(12 84 34 74) 12]
Test Case: 371 | Input/Output: [(84 2 91 92) 2]
Test Case: 372 | Input/Output: [(8 77 37 19) 8]
Test Case: 373 | Input/Output: [(68 67 98 14) 14]
Test Case: 374 | Input/Output: [(22 38 83 46) 22]
Test Case: 375 | Input/Output: [(25 94 35 3) 3]
Test Case: 376 | Input/Output: [(97 4 47 8) 4]
Test Case: 377 | Input/Output: [(44 93 29 90) 29]
Test Case: 378 | Input/Output: [(71 56 36 82) 36]
Test Case: 379 | Input/Output: [(25 31 9 1) 1]
Test Case: 380 | Input/Output: [(66 18 22 57) 18]
Test Case: 381 | Input/Output: [(45 35 99 66) 35]
Test Case: 382 | Input/Output: [(73 41 97 67) 41]
Test Case: 383 | Input/Output: [(61 35 62 61) 35]
Test Case: 384 | Input/Output: [(98 86 95 15) 15]
Test Case: 385 | Input/Output: [(74 97 49 43) 43]
Test Case: 386 | Input/Output: [(57 3 89 82) 3]
Test Case: 387 | Input/Output: [(12 69 63 100) 12]
Test Case: 388 | Input/Output: [(71 85 63 26) 26]
Test Case: 389 | Input/Output: [(49 19 6 32) 6]
Test Case: 390 | Input/Output: [(53 7 85 79) 7]
Test Case: 391 | Input/Output: [(68 24 40 85) 24]
Test Case: 392 | Input/Output: [(21 0 10 31) 0]
Test Case: 393 | Input/Output: [(13 48 61 31) 13]
Test Case: 394 | Input/Output: [(90 10 61 3) 3]
Test Case: 395 | Input/Output: [(26 100 85 73) 26]
Test Case: 396 | Input/Output: [(52 6 14 78) 6]
Test Case: 397 | Input/Output: [(2 82 3 18) 2]
Test Case: 398 | Input/Output: [(27 0 68 15) 0]
Test Case: 399 | Input/Output: [(52 5 28 87) 5]
Test Case: 400 | Input/Output: [(-46 -29 57 11) -46]
Test Case: 401 | Input/Output: [(89 -72 38 -49) -72]
Test Case: 402 | Input/Output: [(88 -77 -48 -70) -77]
Test Case: 403 | Input/Output: [(18 -84 65 92) -84]
Test Case: 404 | Input/Output: [(-23 79 97 -75) -75]
Test Case: 405 | Input/Output: [(-93 8 -79 83) -93]
Test Case: 406 | Input/Output: [(81 -37 42 70) -37]
Test Case: 407 | Input/Output: [(44 63 -35 60) -35]
Test Case: 408 | Input/Output: [(19 -92 74 29) -92]
Test Case: 409 | Input/Output: [(-4 21 57 -26) -26]
Test Case: 410 | Input/Output: [(91 -62 -2 -78) -78]
Test Case: 411 | Input/Output: [(-95 -16 80 -39) -95]
Test Case: 412 | Input/Output: [(98 -68 -40 35) -68]
Test Case: 413 | Input/Output: [(65 -73 84 -27) -73]
Test Case: 414 | Input/Output: [(-37 -26 20 -25) -37]
Test Case: 415 | Input/Output: [(-11 90 -12 -61) -61]
Test Case: 416 | Input/Output: [(24 33 49 51) 24]
Test Case: 417 | Input/Output: [(-25 47 -97 -80) -97]
Test Case: 418 | Input/Output: [(67 -80 -17 51) -80]
Test Case: 419 | Input/Output: [(-87 5 25 -29) -87]
Test Case: 420 | Input/Output: [(-59 71 70 -36) -59]
Test Case: 421 | Input/Output: [(46 3 -90 -70) -90]
Test Case: 422 | Input/Output: [(75 89 -8 -61) -61]
Test Case: 423 | Input/Output: [(48 24 -100 5) -100]
Test Case: 424 | Input/Output: [(-87 4 -54 -37) -87]
Test Case: 425 | Input/Output: [(-16 50 -5 51) -16]
Test Case: 426 | Input/Output: [(17 45 9 43) 9]
Test Case: 427 | Input/Output: [(50 -94 89 85) -94]
Test Case: 428 | Input/Output: [(99 88 -78 73) -78]
Test Case: 429 | Input/Output: [(98 -16 -79 65) -79]
Test Case: 430 | Input/Output: [(-85 -25 -69 -76) -85]
Test Case: 431 | Input/Output: [(-49 -46 -59 4) -59]
Test Case: 432 | Input/Output: [(87 -13 -57 81) -57]
Test Case: 433 | Input/Output: [(-25 -17 37 51) -25]
Test Case: 434 | Input/Output: [(-38 60 64 -19) -38]
Test Case: 435 | Input/Output: [(-56 62 44 -99) -99]
Test Case: 436 | Input/Output: [(-25 -11 -33 65) -33]
Test Case: 437 | Input/Output: [(38 93 1 51) 1]
Test Case: 438 | Input/Output: [(34 -24 -44 51) -44]
Test Case: 439 | Input/Output: [(-82 35 -54 -87) -87]
Test Case: 440 | Input/Output: [(66 14 -15 -18) -18]
Test Case: 441 | Input/Output: [(-5 99 -19 19) -19]
Test Case: 442 | Input/Output: [(-79 -63 29 16) -79]
Test Case: 443 | Input/Output: [(48 68 9 32) 9]
Test Case: 444 | Input/Output: [(7 -30 79 -92) -92]
Test Case: 445 | Input/Output: [(51 -63 71 -65) -65]
Test Case: 446 | Input/Output: [(-54 -84 -25 -84) -84]
Test Case: 447 | Input/Output: [(-99 19 35 1) -99]
Test Case: 448 | Input/Output: [(86 83 9 -76) -76]
Test Case: 449 | Input/Output: [(84 94 79 -84) -84]
Test Case: 450 | Input/Output: [(60 -55 15 -27) -55]
Test Case: 451 | Input/Output: [(-73 -97 67 74) -97]
Test Case: 452 | Input/Output: [(-5 -21 -82 70) -82]
Test Case: 453 | Input/Output: [(-46 -16 -35 46) -46]
Test Case: 454 | Input/Output: [(32 -37 14 -15) -37]
Test Case: 455 | Input/Output: [(15 64 94 -17) -17]
Test Case: 456 | Input/Output: [(-69 83 24 15) -69]
Test Case: 457 | Input/Output: [(49 -84 -37 90) -84]
Test Case: 458 | Input/Output: [(10 -23 -21 0) -23]
Test Case: 459 | Input/Output: [(34 70 -98 -55) -98]
Test Case: 460 | Input/Output: [(-73 89 70 -76) -76]
Test Case: 461 | Input/Output: [(-100 -33 78 -73) -100]
Test Case: 462 | Input/Output: [(40 -24 -39 -75) -75]
Test Case: 463 | Input/Output: [(92 -57 59 4) -57]
Test Case: 464 | Input/Output: [(-49 -45 -27 78) -49]
Test Case: 465 | Input/Output: [(84 -31 -37 79) -37]
Test Case: 466 | Input/Output: [(-50 98 -45 -23) -50]
Test Case: 467 | Input/Output: [(-31 51 -85 24) -85]
Test Case: 468 | Input/Output: [(49 -92 16 -72) -92]
Test Case: 469 | Input/Output: [(7 -95 17 -99) -99]
Test Case: 470 | Input/Output: [(13 -68 17 21) -68]
Test Case: 471 | Input/Output: [(-16 -69 -98 78) -98]
Test Case: 472 | Input/Output: [(-23 67 37 26) -23]
Test Case: 473 | Input/Output: [(-69 97 27 -84) -84]
Test Case: 474 | Input/Output: [(-91 88 -14 -1) -91]
Test Case: 475 | Input/Output: [(88 35 48 12) 12]
Test Case: 476 | Input/Output: [(-58 -34 -33 36) -58]
Test Case: 477 | Input/Output: [(-49 63 92 61) -49]
Test Case: 478 | Input/Output: [(-89 -21 -85 21) -89]
Test Case: 479 | Input/Output: [(-22 -56 -60 86) -60]
Test Case: 480 | Input/Output: [(-31 -11 41 77) -31]
Test Case: 481 | Input/Output: [(26 -86 -97 43) -97]
Test Case: 482 | Input/Output: [(-72 -98 40 -96) -98]
Test Case: 483 | Input/Output: [(10 40 -94 89) -94]
Test Case: 484 | Input/Output: [(-51 61 99 51) -51]
Test Case: 485 | Input/Output: [(67 48 -35 5) -35]
Test Case: 486 | Input/Output: [(40 3 78 21) 3]
Test Case: 487 | Input/Output: [(89 -59 43 75) -59]
Test Case: 488 | Input/Output: [(-71 -96 -23 20) -96]
Test Case: 489 | Input/Output: [(88 52 11 33) 11]
Test Case: 490 | Input/Output: [(51 0 95 70) 0]
Test Case: 491 | Input/Output: [(-48 98 -91 -73) -91]
Test Case: 492 | Input/Output: [(-39 -35 -77 7) -77]
Test Case: 493 | Input/Output: [(0 -37 34 78) -37]
Test Case: 494 | Input/Output: [(-51 -81 -30 -49) -81]
Test Case: 495 | Input/Output: [(-89 -54 -72 52) -89]
Test Case: 496 | Input/Output: [(56 -17 97 24) -17]
Test Case: 497 | Input/Output: [(-46 -19 -88 -45) -88]
Test Case: 498 | Input/Output: [(72 22 -67 8) -67]
Test Case: 499 | Input/Output: [(84 81 -49 -6) -49]
Test Case: 500 | Input/Output: [(43 36 9 29) 9]
Test Case: 501 | Input/Output: [(84 -74 31 26) -74]
Test Case: 502 | Input/Output: [(44 -11 -36 18) -36]
Test Case: 503 | Input/Output: [(10 47 -79 98) -79]
Test Case: 504 | Input/Output: [(43 -44 49 76) -44]
Test Case: 505 | Input/Output: [(4 -15 -38 78) -38]
Test Case: 506 | Input/Output: [(-85 32 -82 70) -85]
Test Case: 507 | Input/Output: [(-56 34 40 95) -56]
Test Case: 508 | Input/Output: [(-61 -29 50 52) -61]
Test Case: 509 | Input/Output: [(50 -25 -67 34) -67]
Test Case: 510 | Input/Output: [(61 27 2 18) 2]
Test Case: 511 | Input/Output: [(72 -62 85 95) -62]
Test Case: 512 | Input/Output: [(14 -60 -76 -36) -76]
Test Case: 513 | Input/Output: [(9 -77 62 -54) -77]
Test Case: 514 | Input/Output: [(53 65 63 -26) -26]
Test Case: 515 | Input/Output: [(99 -98 32 9) -98]
Test Case: 516 | Input/Output: [(-71 63 -72 56) -72]
Test Case: 517 | Input/Output: [(-84 -79 -8 -51) -84]
Test Case: 518 | Input/Output: [(16 9 93 -10) -10]
Test Case: 519 | Input/Output: [(42 -31 10 28) -31]
Test Case: 520 | Input/Output: [(-86 -6 -50 100) -86]
Test Case: 521 | Input/Output: [(-48 -2 90 -17) -48]
Test Case: 522 | Input/Output: [(23 -84 9 -15) -84]
Test Case: 523 | Input/Output: [(-33 -21 45 -16) -33]
Test Case: 524 | Input/Output: [(92 61 86 66) 61]
Test Case: 525 | Input/Output: [(-21 -66 -5 92) -66]
Test Case: 526 | Input/Output: [(81 66 33 53) 33]
Test Case: 527 | Input/Output: [(72 35 22 -29) -29]
Test Case: 528 | Input/Output: [(83 96 20 13) 13]
Test Case: 529 | Input/Output: [(-43 13 -80 -17) -80]
Test Case: 530 | Input/Output: [(-96 40 -38 -100) -100]
Test Case: 531 | Input/Output: [(43 89 87 12) 12]
Test Case: 532 | Input/Output: [(-62 20 81 -66) -66]
Test Case: 533 | Input/Output: [(-22 -3 -16 -74) -74]
Test Case: 534 | Input/Output: [(-64 68 -99 87) -99]
Test Case: 535 | Input/Output: [(-62 97 -30 -73) -73]
Test Case: 536 | Input/Output: [(-67 5 -61 7) -67]
Test Case: 537 | Input/Output: [(-28 -37 18 15) -37]
Test Case: 538 | Input/Output: [(-76 88 -88 31) -88]
Test Case: 539 | Input/Output: [(89 -18 -1 49) -18]
Test Case: 540 | Input/Output: [(-44 81 52 -80) -80]
Test Case: 541 | Input/Output: [(24 -44 -94 -59) -94]
Test Case: 542 | Input/Output: [(52 80 21 -55) -55]
Test Case: 543 | Input/Output: [(43 -30 -35 40) -35]
Test Case: 544 | Input/Output: [(57 11 45 -71) -71]
Test Case: 545 | Input/Output: [(-98 -75 46 60) -98]
Test Case: 546 | Input/Output: [(75 83 -51 -52) -52]
Test Case: 547 | Input/Output: [(25 59 67 -62) -62]
Test Case: 548 | Input/Output: [(-21 -94 -3 -85) -94]
Test Case: 549 | Input/Output: [(34 1 -59 -98) -98]
Test Case: 550 | Input/Output: [(54 57 -7 22) -7]
Test Case: 551 | Input/Output: [(2 -27 19 -23) -27]
Test Case: 552 | Input/Output: [(-15 -26 -24 -45) -45]
Test Case: 553 | Input/Output: [(-19 60 31 64) -19]
Test Case: 554 | Input/Output: [(55 -89 10 -64) -89]
Test Case: 555 | Input/Output: [(-35 -67 88 -38) -67]
Test Case: 556 | Input/Output: [(63 -55 23 38) -55]
Test Case: 557 | Input/Output: [(28 93 -88 -31) -88]
Test Case: 558 | Input/Output: [(-45 -81 -24 -27) -81]
Test Case: 559 | Input/Output: [(31 39 -17 -57) -57]
Test Case: 560 | Input/Output: [(2 70 65 -77) -77]
Test Case: 561 | Input/Output: [(85 -4 98 66) -4]
Test Case: 562 | Input/Output: [(-54 -14 95 -49) -54]
Test Case: 563 | Input/Output: [(16 -55 -8 19) -55]
Test Case: 564 | Input/Output: [(-54 -52 -78 -45) -78]
Test Case: 565 | Input/Output: [(21 -2 25 -72) -72]
Test Case: 566 | Input/Output: [(-35 82 79 -52) -52]
Test Case: 567 | Input/Output: [(-88 -51 40 -33) -88]
Test Case: 568 | Input/Output: [(87 13 62 20) 13]
Test Case: 569 | Input/Output: [(-83 18 43 5) -83]
Test Case: 570 | Input/Output: [(41 -39 -72 70) -72]
Test Case: 571 | Input/Output: [(24 -2 96 -57) -57]
Test Case: 572 | Input/Output: [(16 85 -86 50) -86]
Test Case: 573 | Input/Output: [(-60 23 97 72) -60]
Test Case: 574 | Input/Output: [(-32 -81 16 -54) -81]
Test Case: 575 | Input/Output: [(-63 -45 -89 58) -89]
Test Case: 576 | Input/Output: [(1 -68 6 -36) -68]
Test Case: 577 | Input/Output: [(-88 -65 79 85) -88]
Test Case: 578 | Input/Output: [(15 -20 -85 -100) -100]
Test Case: 579 | Input/Output: [(-86 18 -71 46) -86]
Test Case: 580 | Input/Output: [(26 -61 -70 54) -70]
Test Case: 581 | Input/Output: [(94 46 -63 41) -63]
Test Case: 582 | Input/Output: [(57 -64 65 45) -64]
Test Case: 583 | Input/Output: [(4 82 -14 -26) -26]
Test Case: 584 | Input/Output: [(13 45 14 -23) -23]
Test Case: 585 | Input/Output: [(5 3 48 53) 3]
Test Case: 586 | Input/Output: [(56 49 59 23) 23]
Test Case: 587 | Input/Output: [(-45 -28 81 65) -45]
Test Case: 588 | Input/Output: [(56 35 15 -97) -97]
Test Case: 589 | Input/Output: [(15 71 -54 -71) -71]
Test Case: 590 | Input/Output: [(-83 -44 -61 11) -83]
Test Case: 591 | Input/Output: [(61 -100 16 13) -100]
Test Case: 592 | Input/Output: [(85 69 -32 -75) -75]
Test Case: 593 | Input/Output: [(-32 73 -61 -45) -61]
Test Case: 594 | Input/Output: [(-30 52 94 12) -30]
Test Case: 595 | Input/Output: [(48 -26 -48 -20) -48]
Test Case: 596 | Input/Output: [(-70 67 1 79) -70]
Test Case: 597 | Input/Output: [(-49 0 64 59) -49]
Test Case: 598 | Input/Output: [(96 -52 -29 23) -52]
Test Case: 599 | Input/Output: [(-33 62 -69 -49) -69]
Test Case: 600 | Input/Output: [(56 -100 -89 -83) -100]
Test Case: 601 | Input/Output: [(42 48 47 35) 35]
Test Case: 602 | Input/Output: [(73 48 92 55) 48]
Test Case: 603 | Input/Output: [(4 40 -31 32) -31]
Test Case: 604 | Input/Output: [(15 49 -4 33) -4]
Test Case: 605 | Input/Output: [(82 78 -2 13) -2]
Test Case: 606 | Input/Output: [(78 -39 2 -71) -71]
Test Case: 607 | Input/Output: [(41 57 -95 99) -95]
Test Case: 608 | Input/Output: [(86 -21 77 -81) -81]
Test Case: 609 | Input/Output: [(-43 76 43 83) -43]
Test Case: 610 | Input/Output: [(-54 93 1 85) -54]
Test Case: 611 | Input/Output: [(-4 50 -25 97) -25]
Test Case: 612 | Input/Output: [(30 -78 -38 83) -78]
Test Case: 613 | Input/Output: [(48 98 75 -79) -79]
Test Case: 614 | Input/Output: [(-99 69 36 85) -99]
Test Case: 615 | Input/Output: [(58 -93 91 -24) -93]
Test Case: 616 | Input/Output: [(-22 -45 27 9) -45]
Test Case: 617 | Input/Output: [(-37 -87 16 -99) -99]
Test Case: 618 | Input/Output: [(-7 -75 33 10) -75]
Test Case: 619 | Input/Output: [(5 -44 83 7) -44]
Test Case: 620 | Input/Output: [(-39 87 -61 4) -61]
Test Case: 621 | Input/Output: [(-34 -79 78 7) -79]
Test Case: 622 | Input/Output: [(14 99 -65 88) -65]
Test Case: 623 | Input/Output: [(55 1 21 -77) -77]
Test Case: 624 | Input/Output: [(46 51 -36 49) -36]
Test Case: 625 | Input/Output: [(86 51 -75 32) -75]
Test Case: 626 | Input/Output: [(6 -77 61 -78) -78]
Test Case: 627 | Input/Output: [(52 29 -99 -11) -99]
Test Case: 628 | Input/Output: [(-27 90 -85 -1) -85]
Test Case: 629 | Input/Output: [(49 83 38 12) 12]
Test Case: 630 | Input/Output: [(-94 -19 24 61) -94]
Test Case: 631 | Input/Output: [(-97 43 69 -33) -97]
Test Case: 632 | Input/Output: [(43 37 61 -90) -90]
Test Case: 633 | Input/Output: [(-67 -36 99 27) -67]
Test Case: 634 | Input/Output: [(36 97 50 -32) -32]
Test Case: 635 | Input/Output: [(-11 -14 -42 -67) -67]
Test Case: 636 | Input/Output: [(20 -94 -86 -92) -94]
Test Case: 637 | Input/Output: [(-57 -69 -79 -35) -79]
Test Case: 638 | Input/Output: [(-20 87 -44 -97) -97]
Test Case: 639 | Input/Output: [(100 -38 23 71) -38]
Test Case: 640 | Input/Output: [(-16 88 21 -45) -45]
Test Case: 641 | Input/Output: [(10 -67 75 -75) -75]
Test Case: 642 | Input/Output: [(15 -66 -26 -87) -87]
Test Case: 643 | Input/Output: [(-46 -1 -58 50) -58]
Test Case: 644 | Input/Output: [(-18 -55 38 -83) -83]
Test Case: 645 | Input/Output: [(-87 -86 -4 -8) -87]
Test Case: 646 | Input/Output: [(-99 76 41 -91) -99]
Test Case: 647 | Input/Output: [(12 -59 -11 -97) -97]
Test Case: 648 | Input/Output: [(93 -79 -19 -87) -87]
Test Case: 649 | Input/Output: [(-85 -67 -4 -40) -85]
Test Case: 650 | Input/Output: [(26 29 33 -45) -45]
Test Case: 651 | Input/Output: [(100 -64 -100 -65) -100]
Test Case: 652 | Input/Output: [(-30 90 6 10) -30]
Test Case: 653 | Input/Output: [(-63 65 -91 31) -91]
Test Case: 654 | Input/Output: [(-13 -90 -86 -71) -90]
Test Case: 655 | Input/Output: [(79 -19 72 56) -19]
Test Case: 656 | Input/Output: [(57 -89 30 24) -89]
Test Case: 657 | Input/Output: [(5 -51 7 43) -51]
Test Case: 658 | Input/Output: [(-2 -39 -53 -59) -59]
Test Case: 659 | Input/Output: [(77 12 -32 38) -32]
Test Case: 660 | Input/Output: [(86 14 -99 -71) -99]
Test Case: 661 | Input/Output: [(-71 38 28 -85) -85]
Test Case: 662 | Input/Output: [(-6 25 -43 30) -43]
Test Case: 663 | Input/Output: [(8 32 -30 -67) -67]
Test Case: 664 | Input/Output: [(47 78 -1 -30) -30]
Test Case: 665 | Input/Output: [(78 89 -79 -73) -79]
Test Case: 666 | Input/Output: [(6 -8 -3 95) -8]
Test Case: 667 | Input/Output: [(15 98 22 57) 15]
Test Case: 668 | Input/Output: [(94 -64 -49 -72) -72]
Test Case: 669 | Input/Output: [(31 -100 -39 7) -100]
Test Case: 670 | Input/Output: [(44 44 40 0) 0]
Test Case: 671 | Input/Output: [(51 62 -14 27) -14]
Test Case: 672 | Input/Output: [(83 4 -7 78) -7]
Test Case: 673 | Input/Output: [(14 -43 -27 55) -43]
Test Case: 674 | Input/Output: [(64 -5 32 34) -5]
Test Case: 675 | Input/Output: [(-56 10 -54 -14) -56]
Test Case: 676 | Input/Output: [(42 18 -36 93) -36]
Test Case: 677 | Input/Output: [(12 -19 94 25) -19]
Test Case: 678 | Input/Output: [(-97 37 93 70) -97]
Test Case: 679 | Input/Output: [(46 40 -14 -8) -14]
Test Case: 680 | Input/Output: [(50 -3 -75 -96) -96]
Test Case: 681 | Input/Output: [(-10 20 -92 46) -92]
Test Case: 682 | Input/Output: [(-17 13 -100 -45) -100]
Test Case: 683 | Input/Output: [(-30 -6 -100 -5) -100]
Test Case: 684 | Input/Output: [(-81 70 -32 -74) -81]
Test Case: 685 | Input/Output: [(-90 84 -47 97) -90]
Test Case: 686 | Input/Output: [(-51 78 -9 -15) -51]
Test Case: 687 | Input/Output: [(58 2 47 -92) -92]
Test Case: 688 | Input/Output: [(39 99 -11 14) -11]
Test Case: 689 | Input/Output: [(-26 89 -55 -100) -100]
Test Case: 690 | Input/Output: [(44 75 -27 -57) -57]
Test Case: 691 | Input/Output: [(52 -19 -5 7) -19]
Test Case: 692 | Input/Output: [(11 87 74 -81) -81]
Test Case: 693 | Input/Output: [(22 72 9 -84) -84]
Test Case: 694 | Input/Output: [(-37 42 16 -13) -37]
Test Case: 695 | Input/Output: [(-15 -20 9 97) -20]
Test Case: 696 | Input/Output: [(65 20 -97 -26) -97]
Test Case: 697 | Input/Output: [(46 8 -31 54) -31]
Test Case: 698 | Input/Output: [(29 -45 73 33) -45]
Test Case: 699 | Input/Output: [(-57 36 -70 -94) -94]
Test Case: 700 | Input/Output: [(-84 6 99 -42) -84]
Test Case: 701 | Input/Output: [(-11 74 78 -80) -80]
Test Case: 702 | Input/Output: [(93 21 -10 57) -10]
Test Case: 703 | Input/Output: [(47 -59 16 -52) -59]
Test Case: 704 | Input/Output: [(-38 -79 62 67) -79]
Test Case: 705 | Input/Output: [(-59 14 -50 -73) -73]
Test Case: 706 | Input/Output: [(-18 33 11 37) -18]
Test Case: 707 | Input/Output: [(-45 -3 -79 -37) -79]
Test Case: 708 | Input/Output: [(49 -82 100 84) -82]
Test Case: 709 | Input/Output: [(23 -55 -86 7) -86]
Test Case: 710 | Input/Output: [(-10 -41 -54 12) -54]
Test Case: 711 | Input/Output: [(57 -67 33 -60) -67]
Test Case: 712 | Input/Output: [(99 46 -77 -19) -77]
Test Case: 713 | Input/Output: [(29 9 16 -18) -18]
Test Case: 714 | Input/Output: [(60 -13 24 38) -13]
Test Case: 715 | Input/Output: [(-33 13 72 -80) -80]
Test Case: 716 | Input/Output: [(-94 6 -44 11) -94]
Test Case: 717 | Input/Output: [(47 33 -24 78) -24]
Test Case: 718 | Input/Output: [(35 -97 73 57) -97]
Test Case: 719 | Input/Output: [(78 25 -37 99) -37]
Test Case: 720 | Input/Output: [(-32 31 85 15) -32]
Test Case: 721 | Input/Output: [(-26 -11 38 -50) -50]
Test Case: 722 | Input/Output: [(-71 75 14 43) -71]
Test Case: 723 | Input/Output: [(54 55 26 12) 12]
Test Case: 724 | Input/Output: [(-27 -100 62 33) -100]
Test Case: 725 | Input/Output: [(-39 -20 -65 68) -65]
Test Case: 726 | Input/Output: [(81 73 73 -83) -83]
Test Case: 727 | Input/Output: [(-60 37 15 -88) -88]
Test Case: 728 | Input/Output: [(-44 -42 27 38) -44]
Test Case: 729 | Input/Output: [(24 -96 -55 43) -96]
Test Case: 730 | Input/Output: [(18 -62 40 -12) -62]
Test Case: 731 | Input/Output: [(-8 -49 -72 -77) -77]
Test Case: 732 | Input/Output: [(18 85 -100 27) -100]
Test Case: 733 | Input/Output: [(-41 -50 -49 7) -50]
Test Case: 734 | Input/Output: [(44 22 57 -22) -22]
Test Case: 735 | Input/Output: [(-71 -82 -76 96) -82]
Test Case: 736 | Input/Output: [(100 78 -84 99) -84]
Test Case: 737 | Input/Output: [(-23 62 -89 -96) -96]
Test Case: 738 | Input/Output: [(-61 -7 -55 -85) -85]
Test Case: 739 | Input/Output: [(28 78 97 94) 28]
Test Case: 740 | Input/Output: [(20 -85 14 -2) -85]
Test Case: 741 | Input/Output: [(-11 85 14 -91) -91]
Test Case: 742 | Input/Output: [(74 72 48 91) 48]
Test Case: 743 | Input/Output: [(-1 -29 -7 26) -29]
Test Case: 744 | Input/Output: [(-15 66 -34 61) -34]
Test Case: 745 | Input/Output: [(46 46 -87 33) -87]
Test Case: 746 | Input/Output: [(35 -34 -87 -82) -87]
Test Case: 747 | Input/Output: [(37 -12 -59 -27) -59]
Test Case: 748 | Input/Output: [(31 -32 60 78) -32]
Test Case: 749 | Input/Output: [(52 2 -16 45) -16]
Test Case: 750 | Input/Output: [(32 84 -96 -89) -96]
Test Case: 751 | Input/Output: [(-28 -68 -33 -27) -68]
Test Case: 752 | Input/Output: [(73 0 73 -63) -63]
Test Case: 753 | Input/Output: [(-70 56 9 85) -70]
Test Case: 754 | Input/Output: [(45 3 -58 48) -58]
Test Case: 755 | Input/Output: [(-34 -44 -47 -15) -47]
Test Case: 756 | Input/Output: [(-49 -32 -56 -67) -67]
Test Case: 757 | Input/Output: [(-57 -66 79 -41) -66]
Test Case: 758 | Input/Output: [(-89 -32 37 69) -89]
Test Case: 759 | Input/Output: [(-89 -94 71 63) -94]
Test Case: 760 | Input/Output: [(83 6 -9 60) -9]
Test Case: 761 | Input/Output: [(-42 -70 -51 -57) -70]
Test Case: 762 | Input/Output: [(33 -55 -61 98) -61]
Test Case: 763 | Input/Output: [(-30 9 -1 -9) -30]
Test Case: 764 | Input/Output: [(-43 -74 -97 97) -97]
Test Case: 765 | Input/Output: [(72 -29 64 51) -29]
Test Case: 766 | Input/Output: [(18 -34 -20 0) -34]
Test Case: 767 | Input/Output: [(20 -35 80 -8) -35]
Test Case: 768 | Input/Output: [(3 78 -35 -51) -51]
Test Case: 769 | Input/Output: [(15 -1 84 61) -1]
Test Case: 770 | Input/Output: [(-10 -98 5 -27) -98]
Test Case: 771 | Input/Output: [(57 86 -27 -11) -27]
Test Case: 772 | Input/Output: [(-15 64 -22 47) -22]
Test Case: 773 | Input/Output: [(69 55 4 98) 4]
Test Case: 774 | Input/Output: [(-23 -48 79 -80) -80]
Test Case: 775 | Input/Output: [(17 -95 -100 68) -100]
Test Case: 776 | Input/Output: [(3 66 -46 -91) -91]
Test Case: 777 | Input/Output: [(-32 -17 -14 -72) -72]
Test Case: 778 | Input/Output: [(-19 -84 36 -36) -84]
Test Case: 779 | Input/Output: [(95 21 -39 -55) -55]
Test Case: 780 | Input/Output: [(85 94 -12 -63) -63]
Test Case: 781 | Input/Output: [(92 -67 -11 -24) -67]
Test Case: 782 | Input/Output: [(15 -88 51 -48) -88]
Test Case: 783 | Input/Output: [(59 -94 -44 96) -94]
Test Case: 784 | Input/Output: [(16 -42 -88 -44) -88]
Test Case: 785 | Input/Output: [(-70 6 44 58) -70]
Test Case: 786 | Input/Output: [(-29 7 -93 40) -93]
Test Case: 787 | Input/Output: [(-85 56 61 -51) -85]
Test Case: 788 | Input/Output: [(62 17 44 61) 17]
Test Case: 789 | Input/Output: [(66 -62 67 26) -62]
Test Case: 790 | Input/Output: [(44 89 -28 -20) -28]
Test Case: 791 | Input/Output: [(-51 99 -58 93) -58]
Test Case: 792 | Input/Output: [(45 4 -69 60) -69]
Test Case: 793 | Input/Output: [(-41 14 -68 -85) -85]
Test Case: 794 | Input/Output: [(-88 57 86 -84) -88]
Test Case: 795 | Input/Output: [(33 -77 -85 9) -85]
Test Case: 796 | Input/Output: [(14 -74 -53 -80) -80]
Test Case: 797 | Input/Output: [(75 88 93 -22) -22]
Test Case: 798 | Input/Output: [(-63 77 -34 2) -63]
Test Case: 799 | Input/Output: [(-42 26 -93 -56) -93]
Test Case: 800 | Input/Output: [(-81 -73 -78 -95) -95]
Test Case: 801 | Input/Output: [(-98 44 77 29) -98]
Test Case: 802 | Input/Output: [(60 -90 -79 14) -90]
Test Case: 803 | Input/Output: [(17 51 47 -51) -51]
Test Case: 804 | Input/Output: [(-43 -19 -29 14) -43]
Test Case: 805 | Input/Output: [(-63 75 -37 -11) -63]
Test Case: 806 | Input/Output: [(44 -71 25 96) -71]
Test Case: 807 | Input/Output: [(92 -75 -95 24) -95]
Test Case: 808 | Input/Output: [(6 13 -5 -54) -54]
Test Case: 809 | Input/Output: [(29 56 -20 32) -20]
Test Case: 810 | Input/Output: [(-60 -35 -15 -2) -60]
Test Case: 811 | Input/Output: [(51 57 84 -7) -7]
Test Case: 812 | Input/Output: [(-9 90 89 26) -9]
Test Case: 813 | Input/Output: [(-81 80 -27 -11) -81]
Test Case: 814 | Input/Output: [(80 -81 -7 66) -81]
Test Case: 815 | Input/Output: [(-16 -22 49 -79) -79]
Test Case: 816 | Input/Output: [(55 -64 -28 10) -64]
Test Case: 817 | Input/Output: [(-63 -31 -86 -86) -86]
Test Case: 818 | Input/Output: [(74 -84 62 29) -84]
Test Case: 819 | Input/Output: [(91 66 -80 93) -80]
Test Case: 820 | Input/Output: [(36 38 73 -2) -2]
Test Case: 821 | Input/Output: [(94 42 68 86) 42]
Test Case: 822 | Input/Output: [(-86 36 51 21) -86]
Test Case: 823 | Input/Output: [(-64 -64 -21 45) -64]
Test Case: 824 | Input/Output: [(56 -5 -94 41) -94]
Test Case: 825 | Input/Output: [(68 -34 -81 73) -81]
Test Case: 826 | Input/Output: [(-3 -51 -6 -68) -68]
Test Case: 827 | Input/Output: [(87 -98 -67 92) -98]
Test Case: 828 | Input/Output: [(24 26 51 59) 24]
Test Case: 829 | Input/Output: [(-82 -3 -99 95) -99]
Test Case: 830 | Input/Output: [(-78 -22 79 68) -78]
Test Case: 831 | Input/Output: [(-36 90 -2 -44) -44]
Test Case: 832 | Input/Output: [(-31 53 14 -33) -33]
Test Case: 833 | Input/Output: [(86 -2 -33 64) -33]
Test Case: 834 | Input/Output: [(70 98 76 18) 18]
Test Case: 835 | Input/Output: [(71 46 -57 -21) -57]
Test Case: 836 | Input/Output: [(-60 -73 33 -94) -94]
Test Case: 837 | Input/Output: [(84 75 84 -90) -90]
Test Case: 838 | Input/Output: [(50 99 69 -20) -20]
Test Case: 839 | Input/Output: [(-33 -91 98 62) -91]
Test Case: 840 | Input/Output: [(-26 -77 89 36) -77]
Test Case: 841 | Input/Output: [(16 21 33 9) 9]
Test Case: 842 | Input/Output: [(70 63 -92 -77) -92]
Test Case: 843 | Input/Output: [(-19 12 72 1) -19]
Test Case: 844 | Input/Output: [(-58 -30 -35 -81) -81]
Test Case: 845 | Input/Output: [(-47 -11 17 100) -47]
Test Case: 846 | Input/Output: [(-89 -86 -21 -62) -89]
Test Case: 847 | Input/Output: [(-28 -76 -33 -57) -76]
Test Case: 848 | Input/Output: [(5 30 42 89) 5]
Test Case: 849 | Input/Output: [(-98 -72 60 -28) -98]
Test Case: 850 | Input/Output: [(37 94 96 10) 10]
Test Case: 851 | Input/Output: [(9 -86 43 50) -86]
Test Case: 852 | Input/Output: [(51 37 61 -88) -88]
Test Case: 853 | Input/Output: [(-79 63 90 50) -79]
Test Case: 854 | Input/Output: [(-21 61 63 56) -21]
Test Case: 855 | Input/Output: [(32 -75 -64 -20) -75]
Test Case: 856 | Input/Output: [(70 56 67 -99) -99]
Test Case: 857 | Input/Output: [(93 -7 40 -8) -8]
Test Case: 858 | Input/Output: [(73 42 69 -96) -96]
Test Case: 859 | Input/Output: [(61 18 77 59) 18]
Test Case: 860 | Input/Output: [(-55 -27 -26 30) -55]
Test Case: 861 | Input/Output: [(-92 -8 -65 70) -92]
Test Case: 862 | Input/Output: [(-83 66 -70 41) -83]
Test Case: 863 | Input/Output: [(59 61 -76 -86) -86]
Test Case: 864 | Input/Output: [(-67 -87 -43 52) -87]
Test Case: 865 | Input/Output: [(78 6 -58 73) -58]
Test Case: 866 | Input/Output: [(20 20 -29 97) -29]
Test Case: 867 | Input/Output: [(-64 -43 -55 51) -64]
Test Case: 868 | Input/Output: [(-27 67 -40 65) -40]
Test Case: 869 | Input/Output: [(1 99 30 35) 1]
Test Case: 870 | Input/Output: [(-55 18 -62 46) -62]
Test Case: 871 | Input/Output: [(89 20 -24 -79) -79]
Test Case: 872 | Input/Output: [(-93 23 -10 61) -93]
Test Case: 873 | Input/Output: [(91 -77 51 57) -77]
Test Case: 874 | Input/Output: [(-6 -72 38 -87) -87]
Test Case: 875 | Input/Output: [(35 33 -34 22) -34]
Test Case: 876 | Input/Output: [(-11 -43 91 74) -43]
Test Case: 877 | Input/Output: [(56 -67 37 -3) -67]
Test Case: 878 | Input/Output: [(-24 69 59 -3) -24]
Test Case: 879 | Input/Output: [(62 -23 -97 16) -97]
Test Case: 880 | Input/Output: [(12 85 47 85) 12]
Test Case: 881 | Input/Output: [(76 -35 -89 85) -89]
Test Case: 882 | Input/Output: [(64 -83 55 -48) -83]
Test Case: 883 | Input/Output: [(61 -1 100 -86) -86]
Test Case: 884 | Input/Output: [(-8 81 -62 8) -62]
Test Case: 885 | Input/Output: [(86 -87 -85 75) -87]
Test Case: 886 | Input/Output: [(-64 55 -32 7) -64]
Test Case: 887 | Input/Output: [(-77 -97 10 -79) -97]
Test Case: 888 | Input/Output: [(38 -7 75 -74) -74]
Test Case: 889 | Input/Output: [(-28 15 -1 52) -28]
Test Case: 890 | Input/Output: [(-16 -26 -10 -50) -50]
Test Case: 891 | Input/Output: [(-34 -37 30 88) -37]
Test Case: 892 | Input/Output: [(14 -42 22 -5) -42]
Test Case: 893 | Input/Output: [(-37 21 89 -5) -37]
Test Case: 894 | Input/Output: [(-79 -1 23 69) -79]
Test Case: 895 | Input/Output: [(-58 -12 -70 -42) -70]
Test Case: 896 | Input/Output: [(-85 50 90 -21) -85]
Test Case: 897 | Input/Output: [(28 0 100 -90) -90]
Test Case: 898 | Input/Output: [(54 -94 94 -55) -94]
Test Case: 899 | Input/Output: [(-47 7 4 -5) -47]
Test Case: 900 | Input/Output: [(43 82 -19 -4) -19]
Test Case: 901 | Input/Output: [(-39 -90 -94 89) -94]
Test Case: 902 | Input/Output: [(-35 19 69 -67) -67]
Test Case: 903 | Input/Output: [(-53 -65 -71 -78) -78]
Test Case: 904 | Input/Output: [(44 -54 -100 43) -100]
Test Case: 905 | Input/Output: [(-68 -13 -89 98) -89]
Test Case: 906 | Input/Output: [(14 84 -63 -14) -63]
Test Case: 907 | Input/Output: [(-98 56 85 -58) -98]
Test Case: 908 | Input/Output: [(-77 -59 -40 -68) -77]
Test Case: 909 | Input/Output: [(-17 0 -10 -60) -60]
Test Case: 910 | Input/Output: [(-9 85 -37 99) -37]
Test Case: 911 | Input/Output: [(87 88 -17 87) -17]
Test Case: 912 | Input/Output: [(44 29 -60 -1) -60]
Test Case: 913 | Input/Output: [(58 -88 19 -100) -100]
Test Case: 914 | Input/Output: [(-9 -1 81 10) -9]
Test Case: 915 | Input/Output: [(89 -41 98 -3) -41]
Test Case: 916 | Input/Output: [(-52 -68 17 83) -68]
Test Case: 917 | Input/Output: [(95 42 31 6) 6]
Test Case: 918 | Input/Output: [(-23 -29 84 -9) -29]
Test Case: 919 | Input/Output: [(2 -94 -10 42) -94]
Test Case: 920 | Input/Output: [(-12 -47 -80 52) -80]
Test Case: 921 | Input/Output: [(47 85 27 -98) -98]
Test Case: 922 | Input/Output: [(-55 -20 14 -33) -55]
Test Case: 923 | Input/Output: [(46 -28 -19 8) -28]
Test Case: 924 | Input/Output: [(-16 90 92 -56) -56]
Test Case: 925 | Input/Output: [(30 -69 86 90) -69]
Test Case: 926 | Input/Output: [(54 33 24 -62) -62]
Test Case: 927 | Input/Output: [(94 -90 74 100) -90]
Test Case: 928 | Input/Output: [(16 -6 35 -78) -78]
Test Case: 929 | Input/Output: [(5 2 -11 9) -11]
Test Case: 930 | Input/Output: [(-82 14 -47 91) -82]
Test Case: 931 | Input/Output: [(-49 -95 39 -15) -95]
Test Case: 932 | Input/Output: [(24 84 -9 -27) -27]
Test Case: 933 | Input/Output: [(20 -22 89 -51) -51]
Test Case: 934 | Input/Output: [(34 -32 77 -62) -62]
Test Case: 935 | Input/Output: [(-68 -67 91 16) -68]
Test Case: 936 | Input/Output: [(-66 -5 51 -46) -66]
Test Case: 937 | Input/Output: [(-25 82 -75 83) -75]
Test Case: 938 | Input/Output: [(88 -2 -19 99) -19]
Test Case: 939 | Input/Output: [(-20 94 97 -57) -57]
Test Case: 940 | Input/Output: [(76 57 -51 -18) -51]
Test Case: 941 | Input/Output: [(48 25 -35 66) -35]
Test Case: 942 | Input/Output: [(81 24 -2 70) -2]
Test Case: 943 | Input/Output: [(-49 -80 92 -67) -80]
Test Case: 944 | Input/Output: [(-23 -34 96 -70) -70]
Test Case: 945 | Input/Output: [(76 -11 -37 -53) -53]
Test Case: 946 | Input/Output: [(63 63 -75 -58) -75]
Test Case: 947 | Input/Output: [(-58 85 -90 52) -90]
Test Case: 948 | Input/Output: [(86 -23 4 2) -23]
Test Case: 949 | Input/Output: [(33 -42 -2 -1) -42]
Test Case: 950 | Input/Output: [(-83 -29 -81 42) -83]
Test Case: 951 | Input/Output: [(18 -16 65 10) -16]
Test Case: 952 | Input/Output: [(-45 -74 -36 24) -74]
Test Case: 953 | Input/Output: [(47 -5 -33 45) -33]
Test Case: 954 | Input/Output: [(86 35 -83 -5) -83]
Test Case: 955 | Input/Output: [(72 -52 66 -75) -75]
Test Case: 956 | Input/Output: [(-52 -13 4 -74) -74]
Test Case: 957 | Input/Output: [(68 87 -45 64) -45]
Test Case: 958 | Input/Output: [(27 94 -85 19) -85]
Test Case: 959 | Input/Output: [(-37 -28 -55 -84) -84]
Test Case: 960 | Input/Output: [(-24 -71 -59 -97) -97]
Test Case: 961 | Input/Output: [(50 -67 87 -25) -67]
Test Case: 962 | Input/Output: [(93 -96 30 8) -96]
Test Case: 963 | Input/Output: [(69 -49 9 10) -49]
Test Case: 964 | Input/Output: [(-5 -73 71 32) -73]
Test Case: 965 | Input/Output: [(39 13 -29 79) -29]
Test Case: 966 | Input/Output: [(-31 -32 24 -59) -59]
Test Case: 967 | Input/Output: [(-39 -50 -98 -41) -98]
Test Case: 968 | Input/Output: [(-67 92 -98 66) -98]
Test Case: 969 | Input/Output: [(-89 36 -28 64) -89]
Test Case: 970 | Input/Output: [(42 -59 -72 -18) -72]
Test Case: 971 | Input/Output: [(-48 -70 -83 5) -83]
Test Case: 972 | Input/Output: [(89 -65 -25 74) -65]
Test Case: 973 | Input/Output: [(-65 88 -63 -27) -65]
Test Case: 974 | Input/Output: [(79 68 58 -45) -45]
Test Case: 975 | Input/Output: [(-99 -38 -80 -66) -99]
Test Case: 976 | Input/Output: [(33 -47 2 30) -47]
Test Case: 977 | Input/Output: [(-82 3 26 3) -82]
Test Case: 978 | Input/Output: [(47 7 87 -16) -16]
Test Case: 979 | Input/Output: [(-52 51 -26 9) -52]
Test Case: 980 | Input/Output: [(-34 -49 38 -8) -49]
Test Case: 981 | Input/Output: [(93 64 -82 47) -82]
Test Case: 982 | Input/Output: [(94 41 85 -51) -51]
Test Case: 983 | Input/Output: [(-90 9 -62 -23) -90]
Test Case: 984 | Input/Output: [(-42 51 -30 -32) -42]
Test Case: 985 | Input/Output: [(-9 84 -9 31) -9]
Test Case: 986 | Input/Output: [(64 -94 -44 -12) -94]
Test Case: 987 | Input/Output: [(-94 -60 75 2) -94]
Test Case: 988 | Input/Output: [(37 97 78 37) 37]
Test Case: 989 | Input/Output: [(-33 -61 -87 -18) -87]
Test Case: 990 | Input/Output: [(-46 -11 -62 -22) -62]
Test Case: 991 | Input/Output: [(80 -31 25 -12) -31]
Test Case: 992 | Input/Output: [(-63 58 -59 64) -63]
Test Case: 993 | Input/Output: [(-34 18 3 -2) -34]
Test Case: 994 | Input/Output: [(-68 88 -86 57) -86]
Test Case: 995 | Input/Output: [(-66 19 81 -71) -71]
Test Case: 996 | Input/Output: [(40 91 -70 43) -70]
Test Case: 997 | Input/Output: [(-14 -46 6 30) -46]
Test Case: 998 | Input/Output: [(-92 -77 -80 71) -92]
Test Case: 999 | Input/Output: [(-21 88 12 88) -21]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 125 70 -4 61 -11 103 -38 78 78 -108 -33 105 104 17 39 90
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[31 31 31 64] 31] [[83 83 83 99] 83] [[-26 -26 -26 64] -26] [[-35 -35 -32 -35] -35] [[-41 3 3 3] -41] [[35 35 35 -25] -25] [[74 74 74 -33] -33] [[95 95 95 62] 62] [[-63 59 -63 -63] -63] [[89 -37 -37 -37] -37] [(-56 -56 -56 -56) -56] [(38 38 38 38) 38] [(79 79 79 79) 79] [(87 87 87 87) 87] [(-53 -53 -53 -53) -53] [(47 88 77 9) 9] [(16 55 50 57) 16] [(6 58 53 57) 6] [(3 29 29 77) 3] [(16 89 86 22) 16] [(55 55 35 34) 34] [(12 24 48 62) 12] [(52 96 51 77) 51] [(0 56 71 83) 0] [(54 24 93 95) 24] [(25 89 88 11) 11] [(10 71 2 16) 2] [(36 51 12 16) 12] [(71 62 34 81) 34] [(79 9 99 64) 9] [(18 75 30 18) 18] [(57 44 100 60) 44] [(34 36 30 18) 18] [(23 62 98 62) 23] [(26 84 69 32) 26] [(61 82 82 -84) -84] [(-33 96 30 91) -33] [(46 9 99 71) 9] [(38 -45 90 84) -45] [(67 -9 15 -60) -60] [(-67 -75 -33 -18) -75] [(12 -16 3 -73) -73] [(-86 -40 -21 -34) -86] [(74 49 57 60) 49] [(41 -61 -75 -59) -75] [(74 16 -3 -33) -33] [(77 -64 22 -8) -64] [(7 39 45 -53) -53] [(-53 58 -30 66) -53] [(24 24 -60 -46) -60] [(58 50 25 -93) -93] [(-47 92 72 24) -47] [(99 75 -48 -13) -48] [(-59 -9 -84 68) -84] [(-60 36 39 38) -60] [(-76 -72 10 -7) -76] [(93 -93 -87 32) -93] [(67 0 -83 -1) -83] [(-67 75 15 -93) -93] [(65 1 81 34) 1] [(100 -3 76 14) -3] [(-79 49 -25 -82) -82] [(-18 42 28 28) -18] [(-65 36 -71 21) -71] [(-82 -24 57 -65) -82] [(14 7 10 -40) -40] [(81 -59 79 55) -59] [(87 1 -79 -97) -97] [(6 -29 -71 21) -71] [(50 -73 -77 28) -77] [(49 98 -15 -33) -33] [(95 -76 42 20) -76] [(6 65 -8 76) -8] [(-85 -49 -75 78) -85] [(95 4 -42 10) -42] [(24 3 -8 -47) -47] [(-24 -72 -10 20) -72] [(-24 13 -64 -57) -64] [(84 15 21 -100) -100] [(25 -88 -2 -3) -88] [(23 -78 -26 -32) -78] [(43 96 95 54) 43] [(98 68 75 31) 31] [(73 -69 37 92) -69] [(-33 81 -22 -24) -33] [(45 19 75 -12) -12] [(51 -76 68 -97) -97] [(98 61 -68 31) -68] [(14 84 -35 58) -35] [(30 -10 -23 63) -23] [(-32 -74 57 -16) -74] [(12 -18 -9 88) -18] [(40 80 94 59) 40] [(22 -81 -80 45) -81] [(6 56 -44 46) -44])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 31                  | Program output: 64                 
Correct output: 83                  | Program output: 99                 
Correct output: -26                 | Program output: 64                 
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: 3                  
Correct output: -25                 | Program output: -25                
Correct output: -33                 | Program output: -33                
Correct output: 62                  | Program output: 62                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: 38                  | Program output: 38                 
Correct output: 79                  | Program output: 79                 
Correct output: 87                  | Program output: 87                 
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 57                 
Correct output: 6                   | Program output: 57                 
Correct output: 3                   | Program output: 77                 
Correct output: 16                  | Program output: 22                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 62                 
Correct output: 51                  | Program output: 77                 
Correct output: 0                   | Program output: 83                 
Correct output: 24                  | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 16                 
Correct output: 12                  | Program output: 16                 
Correct output: 34                  | Program output: 81                 
Correct output: 9                   | Program output: 64                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 60                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 62                 
Correct output: 26                  | Program output: 32                 
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 91                 
Correct output: 9                   | Program output: 71                 
Correct output: -45                 | Program output: 84                 
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -18                
Correct output: -73                 | Program output: -73                
Correct output: -86                 | Program output: -34                
Correct output: 49                  | Program output: 60                 
Correct output: -75                 | Program output: -59                
Correct output: -33                 | Program output: -33                
Correct output: -64                 | Program output: -8                 
Correct output: -53                 | Program output: -53                
Correct output: -53                 | Program output: 66                 
Correct output: -60                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 24                 
Correct output: -48                 | Program output: -13                
Correct output: -84                 | Program output: 68                 
Correct output: -60                 | Program output: 38                 
Correct output: -76                 | Program output: -7                 
Correct output: -93                 | Program output: 32                 
Correct output: -83                 | Program output: -1                 
Correct output: -93                 | Program output: -93                
Correct output: 1                   | Program output: 34                 
Correct output: -3                  | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 28                 
Correct output: -71                 | Program output: 21                 
Correct output: -82                 | Program output: -65                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 21                 
Correct output: -77                 | Program output: 28                 
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: 20                 
Correct output: -8                  | Program output: 76                 
Correct output: -85                 | Program output: 78                 
Correct output: -42                 | Program output: 10                 
Correct output: -47                 | Program output: -47                
Correct output: -72                 | Program output: 20                 
Correct output: -64                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -3                 
Correct output: -78                 | Program output: -32                
Correct output: 43                  | Program output: 54                 
Correct output: 31                  | Program output: 31                 
Correct output: -69                 | Program output: 92                 
Correct output: -33                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: 31                 
Correct output: -35                 | Program output: 58                 
Correct output: -23                 | Program output: 63                 
Correct output: -74                 | Program output: -16                
Correct output: -18                 | Program output: 88                 
Correct output: 40                  | Program output: 59                 
Correct output: -81                 | Program output: 45                 
Correct output: -44                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tag_boolean_13} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_if} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 0, :instruction 26} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s} {:close 2, :instruction in3})
Lexicase best program: (integer_mod exec_while (integer_mod exec_eq exec_swap (boolean_and boolean_dup_times integer_shove integer_yankdup boolean_pop exec_dup_times (tag_boolean_13 integer_inc boolean_shove integer_swap) integer_inc boolean_dup_items exec_yankdup integer_swap integer_dup_times) (boolean_pop integer_dup) integer_gt integer_dup) boolean_and boolean_invert_first_then_and integer_yankdup boolean_shove integer_inc integer_yankdup boolean_dup print_boolean integer_lt exec_s (in4 print_integer) (integer_yank) (exec_yank boolean_invert_second_then_and) integer_add boolean_invert_first_then_and exec_if () (exec_y () boolean_yankdup boolean_dup_items boolean_flush integer_lt) exec_dup (integer_lt integer_max exec_swap (exec_do*times (exec_while (boolean_yankdup integer_lt exec_dup_items exec_flush exec_when (integer_dup boolean_and boolean_yankdup exec_k_when_autoconstructing (exec_flush exec_dup_items exec_pop () exec_while (exec_pop (boolean_xor in2 integer_swap boolean_rot) boolean_stackdepth boolean_yank boolean_dup exec_yank boolean_and boolean_xor integer_flush boolean_and) exec_eq exec_do*while (integer_mod boolean_stackdepth integer_flush) boolean_empty boolean_eq in2 boolean_yank print_integer) (boolean_invert_first_then_and integer_stackdepth) integer_shove integer_inc integer_add) 26 boolean_rot exec_noop integer_rot exec_s () (in3) ()))) ()))
Lexicase best errors: [1 0 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 126
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tag_boolean_13} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_if} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 0, :instruction 26} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s} {:close 2, :instruction in3})
Zero cases best program: (integer_mod exec_while (integer_mod exec_eq exec_swap (boolean_and boolean_dup_times integer_shove integer_yankdup boolean_pop exec_dup_times (tag_boolean_13 integer_inc boolean_shove integer_swap) integer_inc boolean_dup_items exec_yankdup integer_swap integer_dup_times) (boolean_pop integer_dup) integer_gt integer_dup) boolean_and boolean_invert_first_then_and integer_yankdup boolean_shove integer_inc integer_yankdup boolean_dup print_boolean integer_lt exec_s (in4 print_integer) (integer_yank) (exec_yank boolean_invert_second_then_and) integer_add boolean_invert_first_then_and exec_if () (exec_y () boolean_yankdup boolean_dup_items boolean_flush integer_lt) exec_dup (integer_lt integer_max exec_swap (exec_do*times (exec_while (boolean_yankdup integer_lt exec_dup_items exec_flush exec_when (integer_dup boolean_and boolean_yankdup exec_k_when_autoconstructing (exec_flush exec_dup_items exec_pop () exec_while (exec_pop (boolean_xor in2 integer_swap boolean_rot) boolean_stackdepth boolean_yank boolean_dup exec_yank boolean_and boolean_xor integer_flush boolean_and) exec_eq exec_do*while (integer_mod boolean_stackdepth integer_flush) boolean_empty boolean_eq in2 boolean_yank print_integer) (boolean_invert_first_then_and integer_stackdepth) integer_shove integer_inc integer_add) 26 boolean_rot exec_noop integer_rot exec_s () (in3) ()))) ()))
Zero cases best errors: [1 0 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 126
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 2 5 2 4 5 5 3 4)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 3 2 5 2 4 5 5 3 4)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_exec_407} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_if})
Best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in3)) (exec_swap (exec_do*range () integer_min) (print_integer) boolean_swap) boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup print_newline boolean_shove) integer_gt integer_yankdup print_boolean boolean_empty tag_exec_407 () boolean_flush boolean_pop exec_swap (exec_while (exec_do*while (integer_dup_times) print_boolean integer_yank) exec_empty) (integer_max integer_lte exec_noop) integer_yankdup integer_stackdepth exec_noop integer_inc integer_max integer_rot exec_do*range (in1 exec_when (integer_lte exec_s_when_autoconstructing (boolean_rot boolean_yankdup boolean_or) (in4 exec_y_when_autoconstructing () boolean_flush boolean_not exec_if () ()) ()))))) () ()))
Errors: [1 0 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 90
Size: 127
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 9.964
Median total errors in population: 10
Error averages by case: (0.997 0.997 0.998 0.995 0.998 0.996 0.995 0.995 0.997 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.054
Average program size in population (points): 68.909
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 460091
--- Timings ---
Current time: 1559314705156 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.8 seconds, 29.4%
Fitness Testing:      1.7 seconds, 66.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: 83                  | Program output: 83                 
Correct output: -26                 | Program output: -26                
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: 3                  
Correct output: -25                 | Program output: -25                
Correct output: -33                 | Program output: -33                
Correct output: 62                  | Program output: 62                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: 38                  | Program output: 38                 
Correct output: 79                  | Program output: 79                 
Correct output: 87                  | Program output: 87                 
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 50                 
Correct output: 6                   | Program output: 53                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 22                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 48                 
Correct output: 51                  | Program output: 51                 
Correct output: 0                   | Program output: 71                 
Correct output: 24                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 12                 
Correct output: 34                  | Program output: 34                 
Correct output: 9                   | Program output: 64                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 60                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 62                 
Correct output: 26                  | Program output: 32                 
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 30                 
Correct output: 9                   | Program output: 71                 
Correct output: -45                 | Program output: 84                 
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -33                
Correct output: -73                 | Program output: -73                
Correct output: -86                 | Program output: -34                
Correct output: 49                  | Program output: 57                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -33                
Correct output: -64                 | Program output: -8                 
Correct output: -53                 | Program output: -53                
Correct output: -53                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 24                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: 38                 
Correct output: -76                 | Program output: -7                 
Correct output: -93                 | Program output: -87                
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: 1                   | Program output: 34                 
Correct output: -3                  | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 28                 
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -65                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: 20                 
Correct output: -8                  | Program output: -8                 
Correct output: -85                 | Program output: -75                
Correct output: -42                 | Program output: -42                
Correct output: -47                 | Program output: -47                
Correct output: -72                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -3                 
Correct output: -78                 | Program output: -32                
Correct output: 43                  | Program output: 54                 
Correct output: 31                  | Program output: 31                 
Correct output: -69                 | Program output: 37                 
Correct output: -33                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -23                 | Program output: -23                
Correct output: -74                 | Program output: -16                
Correct output: -18                 | Program output: -9                 
Correct output: 40                  | Program output: 59                 
Correct output: -81                 | Program output: -80                
Correct output: -44                 | Program output: -44                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in3} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in3)) (exec_eq exec_do*range () integer_min) print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup print_newline boolean_shove)))) () ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 76
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in3} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in3)) (exec_eq exec_do*range () integer_min) print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup print_newline boolean_shove)))) () ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 76
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (404 404 404 593 893 89 404 793 89 300)
Population mean number of elite cases: 4.37
Count of perfect (error zero) individuals by case: (404 404 404 593 893 89 404 793 89 300)
Population mean number of perfect (error zero) cases: 4.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in3} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove})
Best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in3)) (exec_eq exec_do*range () integer_min) print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup print_newline boolean_shove)))) () ()))
Errors: [0 0 0 0 0 1 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 54
Size: 76
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 5.627
Median total errors in population: 7
Error averages by case: (0.596 0.596 0.596 0.407 0.107 0.911 0.596 0.207 0.911 0.7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.206
Average program size in population (points): 61.296
Average percent parens in population: 0.274
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.491
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 165
Genome diversity (% unique genomes):	 0.47
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 169
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1064219
--- Timings ---
Current time: 1559314708031 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.5 seconds, 44.4%
Fitness Testing:      2.5 seconds, 45.4%
Report:               0.5 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 83                  | Program output: 83                 
Correct output: -26                 | Program output: -26                
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: 3                  
Correct output: -25                 | Program output: -25                
Correct output: -33                 | Program output: -33                
Correct output: 62                  | Program output: 62                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: 38                  | Program output: 38                 
Correct output: 79                  | Program output: 79                 
Correct output: 87                  | Program output: 87                 
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 55                 
Correct output: 6                   | Program output: 57                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 22                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 24                 
Correct output: 51                  | Program output: 77                 
Correct output: 0                   | Program output: 56                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 16                 
Correct output: 12                  | Program output: 16                 
Correct output: 34                  | Program output: 62                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 44                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 62                 
Correct output: 26                  | Program output: 32                 
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 91                 
Correct output: 9                   | Program output: 9                  
Correct output: -45                 | Program output: -45                
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -86                 | Program output: -40                
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -61                
Correct output: -33                 | Program output: -33                
Correct output: -64                 | Program output: -64                
Correct output: -53                 | Program output: -53                
Correct output: -53                 | Program output: 58                 
Correct output: -60                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 24                 
Correct output: -48                 | Program output: -13                
Correct output: -84                 | Program output: -9                 
Correct output: -60                 | Program output: 36                 
Correct output: -76                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -1                 
Correct output: -93                 | Program output: -93                
Correct output: 1                   | Program output: 1                  
Correct output: -3                  | Program output: -3                 
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 28                 
Correct output: -71                 | Program output: 21                 
Correct output: -82                 | Program output: -65                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -29                
Correct output: -77                 | Program output: -73                
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -76                
Correct output: -8                  | Program output: 65                 
Correct output: -85                 | Program output: -49                
Correct output: -42                 | Program output: 4                  
Correct output: -47                 | Program output: -47                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: 43                  | Program output: 54                 
Correct output: 31                  | Program output: 31                 
Correct output: -69                 | Program output: -69                
Correct output: -33                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: 31                 
Correct output: -35                 | Program output: 58                 
Correct output: -23                 | Program output: -10                
Correct output: -74                 | Program output: -74                
Correct output: -18                 | Program output: -18                
Correct output: 40                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -44                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup print_newline boolean_shove)))) () ()))
Lexicase best errors: [0 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 76
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup print_newline boolean_shove)))) () ()))
Zero cases best errors: [0 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 76
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (541 556 299 544 544 1000 544 844 300 299)
Population mean number of elite cases: 5.47
Count of perfect (error zero) individuals by case: (541 556 299 544 544 0 544 844 300 299)
Population mean number of perfect (error zero) cases: 4.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove})
Best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup print_newline boolean_shove)))) () ()))
Errors: [0 1 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 54
Size: 76
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 5.529
Median total errors in population: 4
Error averages by case: (0.459 0.444 0.701 0.456 0.456 1.0 0.456 0.156 0.7 0.701)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 55.895
Average program size in population (points): 77.305
Average percent parens in population: 0.278
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.3445
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 264
Genome diversity (% unique genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 270
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.008
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1657006
--- Timings ---
Current time: 1559314711878 milliseconds
Total Time:           9.4 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         5.3 seconds, 55.7%
Fitness Testing:      3.2 seconds, 34.4%
Report:               0.8 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 83                  | Program output: 83                 
Correct output: -26                 | Program output: -26                
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: 3                  
Correct output: -25                 | Program output: -25                
Correct output: -33                 | Program output: -33                
Correct output: 62                  | Program output: 62                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: 38                  | Program output: 38                 
Correct output: 79                  | Program output: 79                 
Correct output: 87                  | Program output: 87                 
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 55                 
Correct output: 6                   | Program output: 57                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 22                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 24                 
Correct output: 51                  | Program output: 77                 
Correct output: 0                   | Program output: 56                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 16                 
Correct output: 12                  | Program output: 16                 
Correct output: 34                  | Program output: 62                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 44                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 62                 
Correct output: 26                  | Program output: 32                 
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 91                 
Correct output: 9                   | Program output: 9                  
Correct output: -45                 | Program output: -45                
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -86                 | Program output: -40                
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -61                
Correct output: -33                 | Program output: -33                
Correct output: -64                 | Program output: -64                
Correct output: -53                 | Program output: -53                
Correct output: -53                 | Program output: 58                 
Correct output: -60                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 24                 
Correct output: -48                 | Program output: -13                
Correct output: -84                 | Program output: -9                 
Correct output: -60                 | Program output: 36                 
Correct output: -76                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -1                 
Correct output: -93                 | Program output: -93                
Correct output: 1                   | Program output: 1                  
Correct output: -3                  | Program output: -3                 
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 28                 
Correct output: -71                 | Program output: 21                 
Correct output: -82                 | Program output: -65                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -29                
Correct output: -77                 | Program output: -73                
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -76                
Correct output: -8                  | Program output: 65                 
Correct output: -85                 | Program output: -49                
Correct output: -42                 | Program output: 4                  
Correct output: -47                 | Program output: -47                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: 43                  | Program output: 54                 
Correct output: 31                  | Program output: 31                 
Correct output: -69                 | Program output: -69                
Correct output: -33                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: 31                 
Correct output: -35                 | Program output: 58                 
Correct output: -23                 | Program output: -10                
Correct output: -74                 | Program output: -74                
Correct output: -18                 | Program output: -18                
Correct output: 40                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -44                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () integer_rot) exec_dup_items boolean_yank integer_eq boolean_dup print_newline boolean_shove))) () ()))
Lexicase best errors: [0 0 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () integer_rot) exec_dup_items boolean_yank integer_eq boolean_dup print_newline boolean_shove))) () ()))
Zero cases best errors: [0 0 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (814 816 858 227 1000 658 883 610 1000 1000)
Population mean number of elite cases: 7.87
Count of perfect (error zero) individuals by case: (814 816 858 227 0 658 883 610 0 0)
Population mean number of perfect (error zero) cases: 4.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove})
Best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_dup_times tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup print_newline boolean_shove)))) () ()))
Errors: [0 0 0 1 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 54
Size: 76
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 5.134
Median total errors in population: 4
Error averages by case: (0.186 0.184 0.142 0.773 1.0 0.342 0.117 0.39 1.0 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 1 1)
Average genome size in population (length): 54.045
Average program size in population (points): 75.98
Average percent parens in population: 0.289
Minimum age in population: 3.5
Maximum age in population: 6.0
Average age in population: 4.9855
Median age in population: 5.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 309
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 316
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2062900
--- Timings ---
Current time: 1559314714882 milliseconds
Total Time:          12.5 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.5 seconds, 59.9%
Fitness Testing:      3.7 seconds, 29.8%
Report:               1.2 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 83                  | Program output: 83                 
Correct output: -26                 | Program output: -26                
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: 3                  
Correct output: -25                 | Program output: -25                
Correct output: -33                 | Program output: -33                
Correct output: 62                  | Program output: 62                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: 38                  | Program output: 38                 
Correct output: 79                  | Program output: 79                 
Correct output: 87                  | Program output: 87                 
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 55                 
Correct output: 6                   | Program output: 57                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 22                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 24                 
Correct output: 51                  | Program output: 77                 
Correct output: 0                   | Program output: 56                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 16                 
Correct output: 12                  | Program output: 16                 
Correct output: 34                  | Program output: 62                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 44                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 62                 
Correct output: 26                  | Program output: 32                 
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 91                 
Correct output: 9                   | Program output: 9                  
Correct output: -45                 | Program output: -45                
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -86                 | Program output: -40                
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -61                
Correct output: -33                 | Program output: -33                
Correct output: -64                 | Program output: -64                
Correct output: -53                 | Program output: -53                
Correct output: -53                 | Program output: 58                 
Correct output: -60                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 24                 
Correct output: -48                 | Program output: -13                
Correct output: -84                 | Program output: -9                 
Correct output: -60                 | Program output: 36                 
Correct output: -76                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -1                 
Correct output: -93                 | Program output: -93                
Correct output: 1                   | Program output: 1                  
Correct output: -3                  | Program output: -3                 
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 28                 
Correct output: -71                 | Program output: 21                 
Correct output: -82                 | Program output: -65                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -29                
Correct output: -77                 | Program output: -73                
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -76                
Correct output: -8                  | Program output: 65                 
Correct output: -85                 | Program output: -49                
Correct output: -42                 | Program output: 4                  
Correct output: -47                 | Program output: -47                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: 43                  | Program output: 54                 
Correct output: 31                  | Program output: 31                 
Correct output: -69                 | Program output: -69                
Correct output: -33                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: 31                 
Correct output: -35                 | Program output: 58                 
Correct output: -23                 | Program output: -10                
Correct output: -74                 | Program output: -74                
Correct output: -18                 | Program output: -18                
Correct output: 40                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -44                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items integer_pop integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup integer_flush boolean_shove)))) () ()))
Lexicase best errors: [0 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 76
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items integer_pop integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup integer_flush boolean_shove)))) () ()))
Zero cases best errors: [0 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 76
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (888 321 1000 550 750 551 316 754 630 754)
Population mean number of elite cases: 6.51
Count of perfect (error zero) individuals by case: (888 321 0 550 750 551 316 754 630 754)
Population mean number of perfect (error zero) cases: 5.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove})
Best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup print_newline boolean_shove)))) () ()))
Errors: [0 1 1 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 54
Size: 76
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 4.486
Median total errors in population: 3
Error averages by case: (0.112 0.679 1.0 0.45 0.25 0.449 0.684 0.246 0.37 0.246)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 54.542
Average program size in population (points): 76.499
Average percent parens in population: 0.287
Minimum age in population: 4.5
Maximum age in population: 7.75
Average age in population: 6.418375
Median age in population: 6.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2502875
--- Timings ---
Current time: 1559314717548 milliseconds
Total Time:          15.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.4 seconds, 61.8%
Fitness Testing:      4.1 seconds, 27.3%
Report:               1.5 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 200
Test mean error for best: 0.20000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: 83                  | Program output: 83                 
Correct output: -26                 | Program output: -26                
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: 3                  
Correct output: -25                 | Program output: -25                
Correct output: -33                 | Program output: -33                
Correct output: 62                  | Program output: 62                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: 38                  | Program output: 38                 
Correct output: 79                  | Program output: 79                 
Correct output: 87                  | Program output: 87                 
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 50                 
Correct output: 6                   | Program output: 53                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 22                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 24                 
Correct output: 51                  | Program output: 51                 
Correct output: 0                   | Program output: 56                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 12                 
Correct output: 34                  | Program output: 34                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 44                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 62                 
Correct output: 26                  | Program output: 32                 
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: -45                 | Program output: -45                
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -86                 | Program output: -40                
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -33                
Correct output: -64                 | Program output: -64                
Correct output: -53                 | Program output: -53                
Correct output: -53                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 24                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: 36                 
Correct output: -76                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: 1                   | Program output: 1                  
Correct output: -3                  | Program output: -3                 
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 28                 
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -65                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -76                
Correct output: -8                  | Program output: -8                 
Correct output: -85                 | Program output: -75                
Correct output: -42                 | Program output: -42                
Correct output: -47                 | Program output: -47                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: 43                  | Program output: 54                 
Correct output: 31                  | Program output: 31                 
Correct output: -69                 | Program output: -69                
Correct output: -33                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -23                 | Program output: -23                
Correct output: -74                 | Program output: -74                
Correct output: -18                 | Program output: -18                
Correct output: 40                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -44                 | Program output: -44                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 2, :instruction in3} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 81
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 2, :instruction in3} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 81
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (750 363 748 748 747 1 748 586 1000 1000)
Population mean number of elite cases: 6.69
Count of perfect (error zero) individuals by case: (750 363 748 748 747 1 748 586 0 0)
Population mean number of perfect (error zero) cases: 4.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 2, :instruction in3} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove})
Best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
Errors: [0 0 0 0 0 1 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 58
Size: 81
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 5.309
Median total errors in population: 4
Error averages by case: (0.25 0.637 0.252 0.252 0.253 0.999 0.252 0.414 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 54.495
Average program size in population (points): 76.461
Average percent parens in population: 0.287
Minimum age in population: 5.5
Maximum age in population: 9.625
Average age in population: 7.886
Median age in population: 7.96875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2914049
--- Timings ---
Current time: 1559314720156 milliseconds
Total Time:          17.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.2 seconds, 63.2%
Fitness Testing:      4.5 seconds, 25.7%
Report:               1.9 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 200
Test mean error for best: 0.20000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 1
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: 83                  | Program output: 83                 
Correct output: -26                 | Program output: -26                
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: 3                  
Correct output: -25                 | Program output: -25                
Correct output: -33                 | Program output: -33                
Correct output: 62                  | Program output: 62                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: 38                  | Program output: 38                 
Correct output: 79                  | Program output: 79                 
Correct output: 87                  | Program output: 87                 
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 50                 
Correct output: 6                   | Program output: 53                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 22                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 24                 
Correct output: 51                  | Program output: 51                 
Correct output: 0                   | Program output: 56                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 12                 
Correct output: 34                  | Program output: 34                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 44                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 62                 
Correct output: 26                  | Program output: 32                 
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: -45                 | Program output: -45                
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -86                 | Program output: -40                
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -33                
Correct output: -64                 | Program output: -64                
Correct output: -53                 | Program output: -53                
Correct output: -53                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 24                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: 36                 
Correct output: -76                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: 1                   | Program output: 1                  
Correct output: -3                  | Program output: -3                 
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 28                 
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -65                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -76                
Correct output: -8                  | Program output: -8                 
Correct output: -85                 | Program output: -75                
Correct output: -42                 | Program output: -42                
Correct output: -47                 | Program output: -47                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: 43                  | Program output: 54                 
Correct output: 31                  | Program output: 31                 
Correct output: -69                 | Program output: -69                
Correct output: -33                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -23                 | Program output: -23                
Correct output: -74                 | Program output: -74                
Correct output: -18                 | Program output: -18                
Correct output: 40                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -44                 | Program output: -44                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 2, :instruction in3} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 81
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 2, :instruction in3} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 81
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (705 667 668 669 669 726 670 669 666 850)
Population mean number of elite cases: 6.96
Count of perfect (error zero) individuals by case: (705 667 668 669 669 726 670 669 666 850)
Population mean number of perfect (error zero) cases: 6.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 2, :instruction in3} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove})
Best program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 58
Size: 81
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 3.041
Median total errors in population: 0
Error averages by case: (0.295 0.333 0.332 0.331 0.331 0.274 0.33 0.331 0.334 0.15)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.794
Average program size in population (points): 78.951
Average percent parens in population: 0.280
Minimum age in population: 9.375
Maximum age in population: 10.5
Average age in population: 9.866125
Median age in population: 9.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 341
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 347
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.011
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3378566
--- Timings ---
Current time: 1559314722862 milliseconds
Total Time:          20.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.1 seconds, 64.1%
Fitness Testing:      5.0 seconds, 24.5%
Report:               2.2 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 6
Successful program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 81


Auto-simplifying with starting size: 81
step: 0
program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 500
program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 1000
program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 1500
program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 2000
program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 2500
program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 3000
program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 3500
program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 4000
program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 4500
program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 5000
program: (exec_eq exec_dup_items exec_if (integer_lte boolean_stackdepth integer_dup_times exec_swap (in4 boolean_eq) (exec_dup_times (integer_inc) in2)) (exec_eq exec_do*range () integer_min) in3 exec_eq exec_do*range () integer_min print_integer boolean_swap boolean_stackdepth exec_dup_items exec_while (integer_min in1) integer_dup_items boolean_dup_times integer_mod exec_s_when_autoconstructing (boolean_rot) (boolean_invert_first_then_and) (exec_empty integer_empty tagged_395 exec_swap (boolean_xor integer_div integer_min integer_dec integer_fromboolean) () integer_swap exec_s (exec_shove (exec_while (boolean_dup_items exec_do*count () integer_eq boolean_yankdup exec_dup (exec_pop () exec_shove () exec_dup_items boolean_yank integer_eq boolean_dup_items print_newline boolean_shove)))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 200
Test mean error for best: 0.20000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 1
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: 83                  | Program output: 83                 
Correct output: -26                 | Program output: -26                
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: 3                  
Correct output: -25                 | Program output: -25                
Correct output: -33                 | Program output: -33                
Correct output: 62                  | Program output: 62                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: 38                  | Program output: 38                 
Correct output: 79                  | Program output: 79                 
Correct output: 87                  | Program output: 87                 
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 50                 
Correct output: 6                   | Program output: 53                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 22                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 24                 
Correct output: 51                  | Program output: 51                 
Correct output: 0                   | Program output: 56                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 12                 
Correct output: 34                  | Program output: 34                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 44                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 62                 
Correct output: 26                  | Program output: 32                 
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: -45                 | Program output: -45                
Correct output: -60                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -86                 | Program output: -40                
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -33                
Correct output: -64                 | Program output: -64                
Correct output: -53                 | Program output: -53                
Correct output: -53                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 24                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: 36                 
Correct output: -76                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: 1                   | Program output: 1                  
Correct output: -3                  | Program output: -3                 
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 28                 
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -65                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -76                
Correct output: -8                  | Program output: -8                 
Correct output: -85                 | Program output: -75                
Correct output: -42                 | Program output: -42                
Correct output: -47                 | Program output: -47                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: 43                  | Program output: 54                 
Correct output: 31                  | Program output: 31                 
Correct output: -69                 | Program output: -69                
Correct output: -33                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -23                 | Program output: -23                
Correct output: -74                 | Program output: -74                
Correct output: -18                 | Program output: -18                
Correct output: 40                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -44                 | Program output: -44                
;;******************************
