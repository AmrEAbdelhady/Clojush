Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-83 -83 94 -83] -83] [[52 52 53 52] 52] [[-62 15 -62 -62] -62] [[-100 -100 -73 -100] -100] [[-36 -36 -36 16] -36] [[29 29 29 80] 29] [[-19 52 -19 -19] -19] [[-26 76 -26 -26] -26] [[71 71 -65 71] -65] [[-85 65 65 65] -85] [(55 55 55 55) 55] [(66 66 66 66) 66] [(-37 -37 -37 -37) -37] [(-55 -55 -55 -55) -55] [(-5 -5 -5 -5) -5] [(63 48 32 80) 32] [(9 31 91 78) 9] [(33 29 86 61) 29] [(40 39 58 83) 39] [(86 9 46 12) 9] [(51 19 40 10) 10] [(87 59 22 73) 22] [(55 16 91 17) 16] [(57 78 72 74) 57] [(5 16 48 18) 5] [(49 44 100 54) 44] [(53 16 38 50) 16] [(90 59 42 50) 42] [(39 49 49 78) 39] [(55 84 65 13) 13] [(71 50 89 10) 10] [(15 60 45 75) 15] [(45 23 91 6) 6] [(98 47 51 9) 9] [(50 77 47 74) 47] [(82 58 -28 3) -28] [(-98 -84 42 -81) -98] [(15 -78 77 -82) -82] [(73 -41 -51 63) -51] [(-78 -74 58 85) -78] [(-22 35 21 -64) -64] [(83 -46 58 -90) -90] [(-92 25 30 -61) -92] [(-91 -3 55 -10) -91] [(100 -82 -100 52) -100] [(-7 57 -15 -3) -15] [(44 10 45 -95) -95] [(5 -81 80 -26) -81] [(32 35 -42 82) -42] [(26 -35 41 94) -35] [(33 61 95 78) 33] [(6 -50 -40 -77) -77] [(-72 59 74 -9) -72] [(5 88 -26 57) -26] [(20 -11 32 21) -11] [(42 -78 91 -25) -78] [(-42 47 38 -94) -94] [(-12 -35 -75 89) -75] [(27 100 83 -100) -100] [(74 -56 60 -58) -58] [(3 -32 38 18) -32] [(27 -73 88 70) -73] [(-96 58 -100 63) -100] [(-40 38 -62 -92) -92] [(-98 -73 89 68) -98] [(24 -15 -94 -4) -94] [(49 20 -58 -28) -58] [(30 69 -67 59) -67] [(-10 88 -46 -72) -72] [(-69 39 90 28) -69] [(4 54 95 -100) -100] [(57 33 39 41) 33] [(23 -71 4 58) -71] [(98 11 -63 27) -63] [(-3 39 24 -72) -72] [(-92 53 -48 0) -92] [(-79 11 16 -79) -79] [(85 -31 -48 -12) -48] [(86 6 -4 -30) -30] [(92 -44 70 99) -44] [(-64 -81 43 -89) -89] [(34 -42 61 39) -42] [(-57 -63 -29 11) -63] [(71 -86 -2 -59) -86] [(-41 10 45 -88) -88] [(75 46 -23 -74) -74] [(46 2 39 11) 2] [(83 0 -33 91) -33] [(55 -1 66 97) -1] [(30 -82 -23 -10) -82] [(-59 -79 74 53) -79] [(-71 -42 82 31) -71] [(-64 -21 84 30) -64] [(95 54 26 -78) -78] [(62 71 -49 -58) -58])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-83 -83 94 -83] -83]
Train Case:   6 | Input/Output: [[52 52 53 52] 52]
Train Case:   7 | Input/Output: [[-62 15 -62 -62] -62]
Train Case:   8 | Input/Output: [[-100 -100 -73 -100] -100]
Train Case:   9 | Input/Output: [[-36 -36 -36 16] -36]
Train Case:  10 | Input/Output: [[29 29 29 80] 29]
Train Case:  11 | Input/Output: [[-19 52 -19 -19] -19]
Train Case:  12 | Input/Output: [[-26 76 -26 -26] -26]
Train Case:  13 | Input/Output: [[71 71 -65 71] -65]
Train Case:  14 | Input/Output: [[-85 65 65 65] -85]
Train Case:  15 | Input/Output: [(55 55 55 55) 55]
Train Case:  16 | Input/Output: [(66 66 66 66) 66]
Train Case:  17 | Input/Output: [(-37 -37 -37 -37) -37]
Train Case:  18 | Input/Output: [(-55 -55 -55 -55) -55]
Train Case:  19 | Input/Output: [(-5 -5 -5 -5) -5]
Train Case:  20 | Input/Output: [(63 48 32 80) 32]
Train Case:  21 | Input/Output: [(9 31 91 78) 9]
Train Case:  22 | Input/Output: [(33 29 86 61) 29]
Train Case:  23 | Input/Output: [(40 39 58 83) 39]
Train Case:  24 | Input/Output: [(86 9 46 12) 9]
Train Case:  25 | Input/Output: [(51 19 40 10) 10]
Train Case:  26 | Input/Output: [(87 59 22 73) 22]
Train Case:  27 | Input/Output: [(55 16 91 17) 16]
Train Case:  28 | Input/Output: [(57 78 72 74) 57]
Train Case:  29 | Input/Output: [(5 16 48 18) 5]
Train Case:  30 | Input/Output: [(49 44 100 54) 44]
Train Case:  31 | Input/Output: [(53 16 38 50) 16]
Train Case:  32 | Input/Output: [(90 59 42 50) 42]
Train Case:  33 | Input/Output: [(39 49 49 78) 39]
Train Case:  34 | Input/Output: [(55 84 65 13) 13]
Train Case:  35 | Input/Output: [(71 50 89 10) 10]
Train Case:  36 | Input/Output: [(15 60 45 75) 15]
Train Case:  37 | Input/Output: [(45 23 91 6) 6]
Train Case:  38 | Input/Output: [(98 47 51 9) 9]
Train Case:  39 | Input/Output: [(50 77 47 74) 47]
Train Case:  40 | Input/Output: [(82 58 -28 3) -28]
Train Case:  41 | Input/Output: [(-98 -84 42 -81) -98]
Train Case:  42 | Input/Output: [(15 -78 77 -82) -82]
Train Case:  43 | Input/Output: [(73 -41 -51 63) -51]
Train Case:  44 | Input/Output: [(-78 -74 58 85) -78]
Train Case:  45 | Input/Output: [(-22 35 21 -64) -64]
Train Case:  46 | Input/Output: [(83 -46 58 -90) -90]
Train Case:  47 | Input/Output: [(-92 25 30 -61) -92]
Train Case:  48 | Input/Output: [(-91 -3 55 -10) -91]
Train Case:  49 | Input/Output: [(100 -82 -100 52) -100]
Train Case:  50 | Input/Output: [(-7 57 -15 -3) -15]
Train Case:  51 | Input/Output: [(44 10 45 -95) -95]
Train Case:  52 | Input/Output: [(5 -81 80 -26) -81]
Train Case:  53 | Input/Output: [(32 35 -42 82) -42]
Train Case:  54 | Input/Output: [(26 -35 41 94) -35]
Train Case:  55 | Input/Output: [(33 61 95 78) 33]
Train Case:  56 | Input/Output: [(6 -50 -40 -77) -77]
Train Case:  57 | Input/Output: [(-72 59 74 -9) -72]
Train Case:  58 | Input/Output: [(5 88 -26 57) -26]
Train Case:  59 | Input/Output: [(20 -11 32 21) -11]
Train Case:  60 | Input/Output: [(42 -78 91 -25) -78]
Train Case:  61 | Input/Output: [(-42 47 38 -94) -94]
Train Case:  62 | Input/Output: [(-12 -35 -75 89) -75]
Train Case:  63 | Input/Output: [(27 100 83 -100) -100]
Train Case:  64 | Input/Output: [(74 -56 60 -58) -58]
Train Case:  65 | Input/Output: [(3 -32 38 18) -32]
Train Case:  66 | Input/Output: [(27 -73 88 70) -73]
Train Case:  67 | Input/Output: [(-96 58 -100 63) -100]
Train Case:  68 | Input/Output: [(-40 38 -62 -92) -92]
Train Case:  69 | Input/Output: [(-98 -73 89 68) -98]
Train Case:  70 | Input/Output: [(24 -15 -94 -4) -94]
Train Case:  71 | Input/Output: [(49 20 -58 -28) -58]
Train Case:  72 | Input/Output: [(30 69 -67 59) -67]
Train Case:  73 | Input/Output: [(-10 88 -46 -72) -72]
Train Case:  74 | Input/Output: [(-69 39 90 28) -69]
Train Case:  75 | Input/Output: [(4 54 95 -100) -100]
Train Case:  76 | Input/Output: [(57 33 39 41) 33]
Train Case:  77 | Input/Output: [(23 -71 4 58) -71]
Train Case:  78 | Input/Output: [(98 11 -63 27) -63]
Train Case:  79 | Input/Output: [(-3 39 24 -72) -72]
Train Case:  80 | Input/Output: [(-92 53 -48 0) -92]
Train Case:  81 | Input/Output: [(-79 11 16 -79) -79]
Train Case:  82 | Input/Output: [(85 -31 -48 -12) -48]
Train Case:  83 | Input/Output: [(86 6 -4 -30) -30]
Train Case:  84 | Input/Output: [(92 -44 70 99) -44]
Train Case:  85 | Input/Output: [(-64 -81 43 -89) -89]
Train Case:  86 | Input/Output: [(34 -42 61 39) -42]
Train Case:  87 | Input/Output: [(-57 -63 -29 11) -63]
Train Case:  88 | Input/Output: [(71 -86 -2 -59) -86]
Train Case:  89 | Input/Output: [(-41 10 45 -88) -88]
Train Case:  90 | Input/Output: [(75 46 -23 -74) -74]
Train Case:  91 | Input/Output: [(46 2 39 11) 2]
Train Case:  92 | Input/Output: [(83 0 -33 91) -33]
Train Case:  93 | Input/Output: [(55 -1 66 97) -1]
Train Case:  94 | Input/Output: [(30 -82 -23 -10) -82]
Train Case:  95 | Input/Output: [(-59 -79 74 53) -79]
Train Case:  96 | Input/Output: [(-71 -42 82 31) -71]
Train Case:  97 | Input/Output: [(-64 -21 84 30) -64]
Train Case:  98 | Input/Output: [(95 54 26 -78) -78]
Train Case:  99 | Input/Output: [(62 71 -49 -58) -58]
Test Case:   0 | Input/Output: [[53 53 53 -40] -40]
Test Case:   1 | Input/Output: [[-72 -72 -3 -72] -72]
Test Case:   2 | Input/Output: [[82 82 82 69] 69]
Test Case:   3 | Input/Output: [[23 -51 23 23] -51]
Test Case:   4 | Input/Output: [[-52 -9 -52 -52] -52]
Test Case:   5 | Input/Output: [[-92 84 84 84] -92]
Test Case:   6 | Input/Output: [[-16 -16 92 -16] -16]
Test Case:   7 | Input/Output: [[-61 79 -61 -61] -61]
Test Case:   8 | Input/Output: [[-74 -74 -74 7] -74]
Test Case:   9 | Input/Output: [[-33 -33 -53 -33] -53]
Test Case:  10 | Input/Output: [[26 26 26 -64] -64]
Test Case:  11 | Input/Output: [[50 -67 50 50] -67]
Test Case:  12 | Input/Output: [[-76 -76 61 -76] -76]
Test Case:  13 | Input/Output: [[38 18 38 38] 18]
Test Case:  14 | Input/Output: [[41 8 41 41] 8]
Test Case:  15 | Input/Output: [[62 62 -91 62] -91]
Test Case:  16 | Input/Output: [[-100 13 13 13] -100]
Test Case:  17 | Input/Output: [[-17 -17 -17 20] -17]
Test Case:  18 | Input/Output: [[56 -43 -43 -43] -43]
Test Case:  19 | Input/Output: [[-10 -10 55 -10] -10]
Test Case:  20 | Input/Output: [[44 -28 44 44] -28]
Test Case:  21 | Input/Output: [[-43 -43 100 -43] -43]
Test Case:  22 | Input/Output: [[-29 81 81 81] -29]
Test Case:  23 | Input/Output: [[-30 -76 -76 -76] -76]
Test Case:  24 | Input/Output: [[0 87 0 0] 0]
Test Case:  25 | Input/Output: [[33 -72 -72 -72] -72]
Test Case:  26 | Input/Output: [[-1 -1 -68 -1] -68]
Test Case:  27 | Input/Output: [[44 44 44 58] 44]
Test Case:  28 | Input/Output: [[-1 -1 -1 13] -1]
Test Case:  29 | Input/Output: [[53 53 53 3] 3]
Test Case:  30 | Input/Output: [[-89 -89 24 -89] -89]
Test Case:  31 | Input/Output: [[-11 -11 -11 -82] -82]
Test Case:  32 | Input/Output: [[58 58 58 35] 35]
Test Case:  33 | Input/Output: [[-68 39 39 39] -68]
Test Case:  34 | Input/Output: [[87 93 87 87] 87]
Test Case:  35 | Input/Output: [[78 100 100 100] 78]
Test Case:  36 | Input/Output: [[-8 97 97 97] -8]
Test Case:  37 | Input/Output: [[8 3 3 3] 3]
Test Case:  38 | Input/Output: [[44 20 44 44] 20]
Test Case:  39 | Input/Output: [[3 3 3 -37] -37]
Test Case:  40 | Input/Output: [[-47 -47 -47 60] -47]
Test Case:  41 | Input/Output: [[-21 -21 -87 -21] -87]
Test Case:  42 | Input/Output: [[-56 -36 -36 -36] -56]
Test Case:  43 | Input/Output: [[95 80 80 80] 80]
Test Case:  44 | Input/Output: [[-1 7 -1 -1] -1]
Test Case:  45 | Input/Output: [[-55 -55 -55 -8] -55]
Test Case:  46 | Input/Output: [[-54 -54 -48 -54] -54]
Test Case:  47 | Input/Output: [[-61 -61 39 -61] -61]
Test Case:  48 | Input/Output: [[10 10 55 10] 10]
Test Case:  49 | Input/Output: [[-26 56 56 56] -26]
Test Case:  50 | Input/Output: [[-72 93 -72 -72] -72]
Test Case:  51 | Input/Output: [[-47 -47 -47 38] -47]
Test Case:  52 | Input/Output: [[-81 -81 32 -81] -81]
Test Case:  53 | Input/Output: [[85 85 85 97] 85]
Test Case:  54 | Input/Output: [[-3 -10 -3 -3] -10]
Test Case:  55 | Input/Output: [[-98 -98 -98 47] -98]
Test Case:  56 | Input/Output: [[23 23 -60 23] -60]
Test Case:  57 | Input/Output: [[-93 51 -93 -93] -93]
Test Case:  58 | Input/Output: [[66 66 -75 66] -75]
Test Case:  59 | Input/Output: [[9 9 9 52] 9]
Test Case:  60 | Input/Output: [[-93 3 -93 -93] -93]
Test Case:  61 | Input/Output: [[51 29 51 51] 29]
Test Case:  62 | Input/Output: [[-3 -96 -3 -3] -96]
Test Case:  63 | Input/Output: [[-5 -5 -38 -5] -38]
Test Case:  64 | Input/Output: [[26 -5 26 26] -5]
Test Case:  65 | Input/Output: [[-29 15 -29 -29] -29]
Test Case:  66 | Input/Output: [[42 -7 -7 -7] -7]
Test Case:  67 | Input/Output: [[60 60 60 6] 6]
Test Case:  68 | Input/Output: [[-17 -17 -17 13] -17]
Test Case:  69 | Input/Output: [[22 22 22 76] 22]
Test Case:  70 | Input/Output: [[77 77 59 77] 59]
Test Case:  71 | Input/Output: [[12 20 12 12] 12]
Test Case:  72 | Input/Output: [[-89 -89 -49 -89] -89]
Test Case:  73 | Input/Output: [[-43 -49 -43 -43] -49]
Test Case:  74 | Input/Output: [[-51 1 1 1] -51]
Test Case:  75 | Input/Output: [[-93 -93 27 -93] -93]
Test Case:  76 | Input/Output: [[-12 -12 -12 12] -12]
Test Case:  77 | Input/Output: [[-72 9 9 9] -72]
Test Case:  78 | Input/Output: [[-32 89 -32 -32] -32]
Test Case:  79 | Input/Output: [[91 91 39 91] 39]
Test Case:  80 | Input/Output: [[48 -37 -37 -37] -37]
Test Case:  81 | Input/Output: [[23 23 -45 23] -45]
Test Case:  82 | Input/Output: [[-4 -4 -4 -37] -37]
Test Case:  83 | Input/Output: [[28 76 28 28] 28]
Test Case:  84 | Input/Output: [[-89 -59 -89 -89] -89]
Test Case:  85 | Input/Output: [[35 35 35 -66] -66]
Test Case:  86 | Input/Output: [[9 9 74 9] 9]
Test Case:  87 | Input/Output: [[-41 62 62 62] -41]
Test Case:  88 | Input/Output: [[-99 99 99 99] -99]
Test Case:  89 | Input/Output: [[45 45 45 70] 45]
Test Case:  90 | Input/Output: [[-42 -42 -90 -42] -90]
Test Case:  91 | Input/Output: [[-42 -56 -56 -56] -56]
Test Case:  92 | Input/Output: [[-6 74 74 74] -6]
Test Case:  93 | Input/Output: [[62 62 8 62] 8]
Test Case:  94 | Input/Output: [[45 45 45 -99] -99]
Test Case:  95 | Input/Output: [[11 11 11 -18] -18]
Test Case:  96 | Input/Output: [[-51 -51 66 -51] -51]
Test Case:  97 | Input/Output: [[78 78 48 78] 48]
Test Case:  98 | Input/Output: [[0 0 0 90] 0]
Test Case:  99 | Input/Output: [[10 10 10 17] 10]
Test Case: 100 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 101 | Input/Output: [(67 67 67 67) 67]
Test Case: 102 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 103 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 104 | Input/Output: [(60 60 60 60) 60]
Test Case: 105 | Input/Output: [(29 29 29 29) 29]
Test Case: 106 | Input/Output: [(88 88 88 88) 88]
Test Case: 107 | Input/Output: [(65 65 65 65) 65]
Test Case: 108 | Input/Output: [(89 89 89 89) 89]
Test Case: 109 | Input/Output: [(75 75 75 75) 75]
Test Case: 110 | Input/Output: [(80 80 80 80) 80]
Test Case: 111 | Input/Output: [(96 96 96 96) 96]
Test Case: 112 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 113 | Input/Output: [(1 1 1 1) 1]
Test Case: 114 | Input/Output: [(51 51 51 51) 51]
Test Case: 115 | Input/Output: [(79 79 79 79) 79]
Test Case: 116 | Input/Output: [(24 24 24 24) 24]
Test Case: 117 | Input/Output: [(79 79 79 79) 79]
Test Case: 118 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 119 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 120 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 121 | Input/Output: [(0 0 0 0) 0]
Test Case: 122 | Input/Output: [(61 61 61 61) 61]
Test Case: 123 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 124 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 125 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 126 | Input/Output: [(41 41 41 41) 41]
Test Case: 127 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 128 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 129 | Input/Output: [(91 91 91 91) 91]
Test Case: 130 | Input/Output: [(88 88 88 88) 88]
Test Case: 131 | Input/Output: [(95 95 95 95) 95]
Test Case: 132 | Input/Output: [(51 51 51 51) 51]
Test Case: 133 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 134 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 135 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 136 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 137 | Input/Output: [(43 43 43 43) 43]
Test Case: 138 | Input/Output: [(79 79 79 79) 79]
Test Case: 139 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 140 | Input/Output: [(84 84 84 84) 84]
Test Case: 141 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 142 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 143 | Input/Output: [(40 40 40 40) 40]
Test Case: 144 | Input/Output: [(51 51 51 51) 51]
Test Case: 145 | Input/Output: [(63 63 63 63) 63]
Test Case: 146 | Input/Output: [(40 40 40 40) 40]
Test Case: 147 | Input/Output: [(95 95 95 95) 95]
Test Case: 148 | Input/Output: [(94 94 94 94) 94]
Test Case: 149 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 150 | Input/Output: [(2 2 2 2) 2]
Test Case: 151 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 152 | Input/Output: [(84 84 84 84) 84]
Test Case: 153 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 154 | Input/Output: [(37 37 37 37) 37]
Test Case: 155 | Input/Output: [(12 12 12 12) 12]
Test Case: 156 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 157 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 158 | Input/Output: [(99 99 99 99) 99]
Test Case: 159 | Input/Output: [(32 32 32 32) 32]
Test Case: 160 | Input/Output: [(82 82 82 82) 82]
Test Case: 161 | Input/Output: [(51 51 51 51) 51]
Test Case: 162 | Input/Output: [(49 49 49 49) 49]
Test Case: 163 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 164 | Input/Output: [(31 31 31 31) 31]
Test Case: 165 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 166 | Input/Output: [(25 25 25 25) 25]
Test Case: 167 | Input/Output: [(7 7 7 7) 7]
Test Case: 168 | Input/Output: [(79 79 79 79) 79]
Test Case: 169 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 170 | Input/Output: [(2 2 2 2) 2]
Test Case: 171 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 172 | Input/Output: [(10 10 10 10) 10]
Test Case: 173 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 174 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 175 | Input/Output: [(85 85 85 85) 85]
Test Case: 176 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 177 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 178 | Input/Output: [(29 29 29 29) 29]
Test Case: 179 | Input/Output: [(2 2 2 2) 2]
Test Case: 180 | Input/Output: [(81 81 81 81) 81]
Test Case: 181 | Input/Output: [(99 99 99 99) 99]
Test Case: 182 | Input/Output: [(0 0 0 0) 0]
Test Case: 183 | Input/Output: [(66 66 66 66) 66]
Test Case: 184 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 185 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 186 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 187 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 188 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 189 | Input/Output: [(57 57 57 57) 57]
Test Case: 190 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 191 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 192 | Input/Output: [(57 57 57 57) 57]
Test Case: 193 | Input/Output: [(70 70 70 70) 70]
Test Case: 194 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 195 | Input/Output: [(11 11 11 11) 11]
Test Case: 196 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 197 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 198 | Input/Output: [(21 21 21 21) 21]
Test Case: 199 | Input/Output: [(10 10 10 10) 10]
Test Case: 200 | Input/Output: [(84 69 90 88) 69]
Test Case: 201 | Input/Output: [(25 38 76 34) 25]
Test Case: 202 | Input/Output: [(31 11 72 32) 11]
Test Case: 203 | Input/Output: [(3 52 62 45) 3]
Test Case: 204 | Input/Output: [(29 76 22 11) 11]
Test Case: 205 | Input/Output: [(54 28 18 39) 18]
Test Case: 206 | Input/Output: [(52 89 44 75) 44]
Test Case: 207 | Input/Output: [(40 73 64 89) 40]
Test Case: 208 | Input/Output: [(45 78 93 58) 45]
Test Case: 209 | Input/Output: [(1 2 29 1) 1]
Test Case: 210 | Input/Output: [(84 71 77 85) 71]
Test Case: 211 | Input/Output: [(49 28 71 69) 28]
Test Case: 212 | Input/Output: [(2 47 77 68) 2]
Test Case: 213 | Input/Output: [(90 5 9 85) 5]
Test Case: 214 | Input/Output: [(60 68 32 73) 32]
Test Case: 215 | Input/Output: [(32 62 91 8) 8]
Test Case: 216 | Input/Output: [(24 94 38 27) 24]
Test Case: 217 | Input/Output: [(65 7 100 3) 3]
Test Case: 218 | Input/Output: [(94 32 17 1) 1]
Test Case: 219 | Input/Output: [(46 81 15 34) 15]
Test Case: 220 | Input/Output: [(86 65 31 78) 31]
Test Case: 221 | Input/Output: [(50 82 87 70) 50]
Test Case: 222 | Input/Output: [(54 55 49 36) 36]
Test Case: 223 | Input/Output: [(84 28 90 42) 28]
Test Case: 224 | Input/Output: [(87 89 20 70) 20]
Test Case: 225 | Input/Output: [(46 15 99 95) 15]
Test Case: 226 | Input/Output: [(29 0 56 39) 0]
Test Case: 227 | Input/Output: [(83 59 9 52) 9]
Test Case: 228 | Input/Output: [(56 56 31 75) 31]
Test Case: 229 | Input/Output: [(74 3 56 58) 3]
Test Case: 230 | Input/Output: [(92 94 9 79) 9]
Test Case: 231 | Input/Output: [(55 37 94 37) 37]
Test Case: 232 | Input/Output: [(25 50 21 47) 21]
Test Case: 233 | Input/Output: [(90 8 20 87) 8]
Test Case: 234 | Input/Output: [(38 29 76 22) 22]
Test Case: 235 | Input/Output: [(33 42 39 57) 33]
Test Case: 236 | Input/Output: [(30 18 16 74) 16]
Test Case: 237 | Input/Output: [(2 64 4 26) 2]
Test Case: 238 | Input/Output: [(64 82 47 54) 47]
Test Case: 239 | Input/Output: [(90 39 96 37) 37]
Test Case: 240 | Input/Output: [(74 78 67 47) 47]
Test Case: 241 | Input/Output: [(43 24 96 28) 24]
Test Case: 242 | Input/Output: [(12 58 11 26) 11]
Test Case: 243 | Input/Output: [(9 76 35 71) 9]
Test Case: 244 | Input/Output: [(13 50 84 3) 3]
Test Case: 245 | Input/Output: [(95 96 26 88) 26]
Test Case: 246 | Input/Output: [(14 45 73 26) 14]
Test Case: 247 | Input/Output: [(34 51 93 2) 2]
Test Case: 248 | Input/Output: [(21 50 15 34) 15]
Test Case: 249 | Input/Output: [(31 66 73 72) 31]
Test Case: 250 | Input/Output: [(32 39 91 91) 32]
Test Case: 251 | Input/Output: [(91 29 94 5) 5]
Test Case: 252 | Input/Output: [(44 90 91 97) 44]
Test Case: 253 | Input/Output: [(78 20 91 62) 20]
Test Case: 254 | Input/Output: [(99 34 20 39) 20]
Test Case: 255 | Input/Output: [(66 81 91 10) 10]
Test Case: 256 | Input/Output: [(14 100 87 18) 14]
Test Case: 257 | Input/Output: [(81 32 76 58) 32]
Test Case: 258 | Input/Output: [(71 64 93 72) 64]
Test Case: 259 | Input/Output: [(63 14 68 69) 14]
Test Case: 260 | Input/Output: [(97 70 99 66) 66]
Test Case: 261 | Input/Output: [(12 47 78 58) 12]
Test Case: 262 | Input/Output: [(17 77 50 31) 17]
Test Case: 263 | Input/Output: [(56 7 41 79) 7]
Test Case: 264 | Input/Output: [(10 61 3 38) 3]
Test Case: 265 | Input/Output: [(38 20 42 82) 20]
Test Case: 266 | Input/Output: [(27 14 56 86) 14]
Test Case: 267 | Input/Output: [(27 63 55 27) 27]
Test Case: 268 | Input/Output: [(3 18 8 43) 3]
Test Case: 269 | Input/Output: [(62 46 91 57) 46]
Test Case: 270 | Input/Output: [(13 23 1 95) 1]
Test Case: 271 | Input/Output: [(46 20 66 59) 20]
Test Case: 272 | Input/Output: [(64 12 68 71) 12]
Test Case: 273 | Input/Output: [(59 60 25 65) 25]
Test Case: 274 | Input/Output: [(34 70 52 53) 34]
Test Case: 275 | Input/Output: [(9 29 17 61) 9]
Test Case: 276 | Input/Output: [(86 11 19 15) 11]
Test Case: 277 | Input/Output: [(20 16 99 91) 16]
Test Case: 278 | Input/Output: [(1 26 56 89) 1]
Test Case: 279 | Input/Output: [(3 17 33 2) 2]
Test Case: 280 | Input/Output: [(81 18 51 98) 18]
Test Case: 281 | Input/Output: [(4 62 71 22) 4]
Test Case: 282 | Input/Output: [(56 13 4 22) 4]
Test Case: 283 | Input/Output: [(82 87 66 81) 66]
Test Case: 284 | Input/Output: [(67 58 14 21) 14]
Test Case: 285 | Input/Output: [(45 10 88 77) 10]
Test Case: 286 | Input/Output: [(77 5 57 9) 5]
Test Case: 287 | Input/Output: [(37 73 19 15) 15]
Test Case: 288 | Input/Output: [(100 52 83 14) 14]
Test Case: 289 | Input/Output: [(12 97 71 81) 12]
Test Case: 290 | Input/Output: [(0 92 49 33) 0]
Test Case: 291 | Input/Output: [(9 13 48 56) 9]
Test Case: 292 | Input/Output: [(72 98 10 17) 10]
Test Case: 293 | Input/Output: [(58 24 99 63) 24]
Test Case: 294 | Input/Output: [(29 87 63 86) 29]
Test Case: 295 | Input/Output: [(97 35 100 57) 35]
Test Case: 296 | Input/Output: [(1 46 67 5) 1]
Test Case: 297 | Input/Output: [(56 74 4 95) 4]
Test Case: 298 | Input/Output: [(31 78 32 88) 31]
Test Case: 299 | Input/Output: [(24 99 85 29) 24]
Test Case: 300 | Input/Output: [(76 33 37 97) 33]
Test Case: 301 | Input/Output: [(9 17 85 11) 9]
Test Case: 302 | Input/Output: [(65 22 78 2) 2]
Test Case: 303 | Input/Output: [(24 74 61 79) 24]
Test Case: 304 | Input/Output: [(62 2 40 79) 2]
Test Case: 305 | Input/Output: [(3 57 94 65) 3]
Test Case: 306 | Input/Output: [(64 48 76 53) 48]
Test Case: 307 | Input/Output: [(32 97 47 41) 32]
Test Case: 308 | Input/Output: [(83 37 55 32) 32]
Test Case: 309 | Input/Output: [(17 52 10 38) 10]
Test Case: 310 | Input/Output: [(63 70 14 63) 14]
Test Case: 311 | Input/Output: [(33 3 19 45) 3]
Test Case: 312 | Input/Output: [(94 70 9 5) 5]
Test Case: 313 | Input/Output: [(39 65 61 1) 1]
Test Case: 314 | Input/Output: [(36 95 72 1) 1]
Test Case: 315 | Input/Output: [(60 13 88 87) 13]
Test Case: 316 | Input/Output: [(66 35 63 72) 35]
Test Case: 317 | Input/Output: [(100 67 70 51) 51]
Test Case: 318 | Input/Output: [(19 16 89 49) 16]
Test Case: 319 | Input/Output: [(95 28 14 65) 14]
Test Case: 320 | Input/Output: [(87 26 94 23) 23]
Test Case: 321 | Input/Output: [(19 74 51 30) 19]
Test Case: 322 | Input/Output: [(67 45 95 6) 6]
Test Case: 323 | Input/Output: [(38 65 45 31) 31]
Test Case: 324 | Input/Output: [(95 95 10 86) 10]
Test Case: 325 | Input/Output: [(20 31 43 51) 20]
Test Case: 326 | Input/Output: [(25 31 35 100) 25]
Test Case: 327 | Input/Output: [(84 81 71 2) 2]
Test Case: 328 | Input/Output: [(12 29 8 7) 7]
Test Case: 329 | Input/Output: [(41 100 71 36) 36]
Test Case: 330 | Input/Output: [(36 42 82 51) 36]
Test Case: 331 | Input/Output: [(95 8 100 30) 8]
Test Case: 332 | Input/Output: [(0 49 71 44) 0]
Test Case: 333 | Input/Output: [(9 83 47 42) 9]
Test Case: 334 | Input/Output: [(70 35 84 63) 35]
Test Case: 335 | Input/Output: [(2 57 54 39) 2]
Test Case: 336 | Input/Output: [(98 22 32 95) 22]
Test Case: 337 | Input/Output: [(15 33 95 10) 10]
Test Case: 338 | Input/Output: [(14 21 10 61) 10]
Test Case: 339 | Input/Output: [(47 78 81 54) 47]
Test Case: 340 | Input/Output: [(55 42 19 24) 19]
Test Case: 341 | Input/Output: [(100 95 97 17) 17]
Test Case: 342 | Input/Output: [(40 58 1 53) 1]
Test Case: 343 | Input/Output: [(2 47 50 58) 2]
Test Case: 344 | Input/Output: [(83 8 16 19) 8]
Test Case: 345 | Input/Output: [(59 11 50 42) 11]
Test Case: 346 | Input/Output: [(76 66 51 18) 18]
Test Case: 347 | Input/Output: [(28 62 45 5) 5]
Test Case: 348 | Input/Output: [(72 1 81 62) 1]
Test Case: 349 | Input/Output: [(60 69 18 39) 18]
Test Case: 350 | Input/Output: [(18 62 73 42) 18]
Test Case: 351 | Input/Output: [(38 66 70 44) 38]
Test Case: 352 | Input/Output: [(63 68 68 3) 3]
Test Case: 353 | Input/Output: [(4 16 57 7) 4]
Test Case: 354 | Input/Output: [(18 36 89 6) 6]
Test Case: 355 | Input/Output: [(3 24 77 65) 3]
Test Case: 356 | Input/Output: [(99 80 76 68) 68]
Test Case: 357 | Input/Output: [(76 28 15 50) 15]
Test Case: 358 | Input/Output: [(89 26 5 97) 5]
Test Case: 359 | Input/Output: [(57 42 37 10) 10]
Test Case: 360 | Input/Output: [(85 32 73 8) 8]
Test Case: 361 | Input/Output: [(44 83 0 79) 0]
Test Case: 362 | Input/Output: [(20 68 9 7) 7]
Test Case: 363 | Input/Output: [(25 30 76 6) 6]
Test Case: 364 | Input/Output: [(96 79 31 63) 31]
Test Case: 365 | Input/Output: [(43 75 32 39) 32]
Test Case: 366 | Input/Output: [(58 8 97 38) 8]
Test Case: 367 | Input/Output: [(74 96 90 48) 48]
Test Case: 368 | Input/Output: [(87 46 20 59) 20]
Test Case: 369 | Input/Output: [(16 81 12 54) 12]
Test Case: 370 | Input/Output: [(71 100 6 93) 6]
Test Case: 371 | Input/Output: [(23 83 30 86) 23]
Test Case: 372 | Input/Output: [(94 59 66 52) 52]
Test Case: 373 | Input/Output: [(8 1 99 48) 1]
Test Case: 374 | Input/Output: [(65 61 78 78) 61]
Test Case: 375 | Input/Output: [(13 35 100 36) 13]
Test Case: 376 | Input/Output: [(26 69 61 77) 26]
Test Case: 377 | Input/Output: [(12 4 34 38) 4]
Test Case: 378 | Input/Output: [(1 89 96 15) 1]
Test Case: 379 | Input/Output: [(78 78 54 56) 54]
Test Case: 380 | Input/Output: [(0 95 44 33) 0]
Test Case: 381 | Input/Output: [(2 73 76 0) 0]
Test Case: 382 | Input/Output: [(63 73 15 17) 15]
Test Case: 383 | Input/Output: [(89 85 74 51) 51]
Test Case: 384 | Input/Output: [(15 42 47 78) 15]
Test Case: 385 | Input/Output: [(2 55 93 30) 2]
Test Case: 386 | Input/Output: [(24 43 84 48) 24]
Test Case: 387 | Input/Output: [(25 62 77 13) 13]
Test Case: 388 | Input/Output: [(7 42 4 76) 4]
Test Case: 389 | Input/Output: [(44 2 33 32) 2]
Test Case: 390 | Input/Output: [(71 8 60 54) 8]
Test Case: 391 | Input/Output: [(55 64 56 76) 55]
Test Case: 392 | Input/Output: [(96 75 66 31) 31]
Test Case: 393 | Input/Output: [(79 46 62 19) 19]
Test Case: 394 | Input/Output: [(45 85 76 46) 45]
Test Case: 395 | Input/Output: [(67 95 88 59) 59]
Test Case: 396 | Input/Output: [(50 72 8 31) 8]
Test Case: 397 | Input/Output: [(8 19 96 42) 8]
Test Case: 398 | Input/Output: [(11 56 78 20) 11]
Test Case: 399 | Input/Output: [(31 47 39 65) 31]
Test Case: 400 | Input/Output: [(-26 84 25 81) -26]
Test Case: 401 | Input/Output: [(21 65 -95 -42) -95]
Test Case: 402 | Input/Output: [(-100 56 21 47) -100]
Test Case: 403 | Input/Output: [(-6 97 -90 -11) -90]
Test Case: 404 | Input/Output: [(-82 -41 86 -85) -85]
Test Case: 405 | Input/Output: [(-83 -53 -86 97) -86]
Test Case: 406 | Input/Output: [(-63 79 -2 50) -63]
Test Case: 407 | Input/Output: [(-83 80 -94 -35) -94]
Test Case: 408 | Input/Output: [(97 31 63 -58) -58]
Test Case: 409 | Input/Output: [(-3 -11 34 32) -11]
Test Case: 410 | Input/Output: [(91 -47 60 -46) -47]
Test Case: 411 | Input/Output: [(12 48 15 65) 12]
Test Case: 412 | Input/Output: [(54 93 -80 -24) -80]
Test Case: 413 | Input/Output: [(-52 20 -26 88) -52]
Test Case: 414 | Input/Output: [(85 8 11 -5) -5]
Test Case: 415 | Input/Output: [(21 78 -30 -29) -30]
Test Case: 416 | Input/Output: [(-98 40 -38 -34) -98]
Test Case: 417 | Input/Output: [(57 -94 71 81) -94]
Test Case: 418 | Input/Output: [(37 -96 97 -56) -96]
Test Case: 419 | Input/Output: [(-18 -69 -72 51) -72]
Test Case: 420 | Input/Output: [(-47 -13 -29 53) -47]
Test Case: 421 | Input/Output: [(-45 85 61 -67) -67]
Test Case: 422 | Input/Output: [(-21 99 5 -78) -78]
Test Case: 423 | Input/Output: [(-58 94 -53 31) -58]
Test Case: 424 | Input/Output: [(-21 -78 90 -42) -78]
Test Case: 425 | Input/Output: [(-28 -86 28 16) -86]
Test Case: 426 | Input/Output: [(-58 81 9 -62) -62]
Test Case: 427 | Input/Output: [(28 -5 -71 -1) -71]
Test Case: 428 | Input/Output: [(82 46 -27 -41) -41]
Test Case: 429 | Input/Output: [(-12 -13 -38 14) -38]
Test Case: 430 | Input/Output: [(-23 44 -30 28) -30]
Test Case: 431 | Input/Output: [(-1 69 12 55) -1]
Test Case: 432 | Input/Output: [(50 -61 62 -28) -61]
Test Case: 433 | Input/Output: [(75 7 -53 1) -53]
Test Case: 434 | Input/Output: [(-78 -97 89 62) -97]
Test Case: 435 | Input/Output: [(-69 -77 -65 -84) -84]
Test Case: 436 | Input/Output: [(-40 -27 17 -36) -40]
Test Case: 437 | Input/Output: [(-56 -54 -68 -61) -68]
Test Case: 438 | Input/Output: [(20 37 -95 -17) -95]
Test Case: 439 | Input/Output: [(-8 99 -12 -77) -77]
Test Case: 440 | Input/Output: [(-28 93 -91 -63) -91]
Test Case: 441 | Input/Output: [(-85 30 28 90) -85]
Test Case: 442 | Input/Output: [(-47 -67 53 -70) -70]
Test Case: 443 | Input/Output: [(78 80 -68 -48) -68]
Test Case: 444 | Input/Output: [(87 94 -70 -21) -70]
Test Case: 445 | Input/Output: [(75 62 73 16) 16]
Test Case: 446 | Input/Output: [(22 65 55 -78) -78]
Test Case: 447 | Input/Output: [(34 -71 33 -91) -91]
Test Case: 448 | Input/Output: [(93 -25 -97 17) -97]
Test Case: 449 | Input/Output: [(94 -43 41 27) -43]
Test Case: 450 | Input/Output: [(-56 9 85 -40) -56]
Test Case: 451 | Input/Output: [(-23 -26 -92 8) -92]
Test Case: 452 | Input/Output: [(87 -100 -87 -91) -100]
Test Case: 453 | Input/Output: [(-4 -72 42 27) -72]
Test Case: 454 | Input/Output: [(-79 -4 99 3) -79]
Test Case: 455 | Input/Output: [(-82 10 96 90) -82]
Test Case: 456 | Input/Output: [(-73 70 4 -12) -73]
Test Case: 457 | Input/Output: [(20 -31 -70 -73) -73]
Test Case: 458 | Input/Output: [(-28 -12 78 -86) -86]
Test Case: 459 | Input/Output: [(76 53 -49 53) -49]
Test Case: 460 | Input/Output: [(-64 86 -16 75) -64]
Test Case: 461 | Input/Output: [(51 30 87 -32) -32]
Test Case: 462 | Input/Output: [(52 25 -49 50) -49]
Test Case: 463 | Input/Output: [(16 -16 -27 -75) -75]
Test Case: 464 | Input/Output: [(46 87 67 7) 7]
Test Case: 465 | Input/Output: [(31 8 11 -13) -13]
Test Case: 466 | Input/Output: [(81 64 -62 -36) -62]
Test Case: 467 | Input/Output: [(-37 -77 -42 19) -77]
Test Case: 468 | Input/Output: [(65 96 84 90) 65]
Test Case: 469 | Input/Output: [(-67 93 46 -77) -77]
Test Case: 470 | Input/Output: [(-85 18 64 4) -85]
Test Case: 471 | Input/Output: [(66 34 -11 26) -11]
Test Case: 472 | Input/Output: [(11 87 59 79) 11]
Test Case: 473 | Input/Output: [(19 50 58 -97) -97]
Test Case: 474 | Input/Output: [(65 83 83 61) 61]
Test Case: 475 | Input/Output: [(40 96 -8 -42) -42]
Test Case: 476 | Input/Output: [(18 -18 36 -57) -57]
Test Case: 477 | Input/Output: [(-4 -43 -43 28) -43]
Test Case: 478 | Input/Output: [(-68 18 100 -30) -68]
Test Case: 479 | Input/Output: [(-46 -63 44 100) -63]
Test Case: 480 | Input/Output: [(67 86 0 97) 0]
Test Case: 481 | Input/Output: [(-66 -68 -59 -58) -68]
Test Case: 482 | Input/Output: [(-5 91 -91 -15) -91]
Test Case: 483 | Input/Output: [(84 87 -25 0) -25]
Test Case: 484 | Input/Output: [(12 38 -65 68) -65]
Test Case: 485 | Input/Output: [(-100 91 -5 90) -100]
Test Case: 486 | Input/Output: [(-52 -93 98 -25) -93]
Test Case: 487 | Input/Output: [(-44 3 -77 -23) -77]
Test Case: 488 | Input/Output: [(-92 -51 -64 79) -92]
Test Case: 489 | Input/Output: [(-66 -84 -86 35) -86]
Test Case: 490 | Input/Output: [(30 -31 -61 -62) -62]
Test Case: 491 | Input/Output: [(22 36 87 -66) -66]
Test Case: 492 | Input/Output: [(-2 47 28 48) -2]
Test Case: 493 | Input/Output: [(-64 -92 33 -36) -92]
Test Case: 494 | Input/Output: [(-78 -12 17 -58) -78]
Test Case: 495 | Input/Output: [(25 44 -26 -4) -26]
Test Case: 496 | Input/Output: [(55 94 -14 100) -14]
Test Case: 497 | Input/Output: [(-33 -52 79 73) -52]
Test Case: 498 | Input/Output: [(-35 -54 12 -92) -92]
Test Case: 499 | Input/Output: [(86 -16 -76 -68) -76]
Test Case: 500 | Input/Output: [(-75 21 -99 88) -99]
Test Case: 501 | Input/Output: [(-31 -93 -60 -86) -93]
Test Case: 502 | Input/Output: [(22 67 71 -32) -32]
Test Case: 503 | Input/Output: [(-8 87 84 84) -8]
Test Case: 504 | Input/Output: [(59 -36 -55 -6) -55]
Test Case: 505 | Input/Output: [(76 -27 -79 27) -79]
Test Case: 506 | Input/Output: [(71 55 -69 -36) -69]
Test Case: 507 | Input/Output: [(-38 -14 -38 20) -38]
Test Case: 508 | Input/Output: [(35 72 -62 23) -62]
Test Case: 509 | Input/Output: [(-86 8 30 -8) -86]
Test Case: 510 | Input/Output: [(-7 -7 -94 -62) -94]
Test Case: 511 | Input/Output: [(-49 -2 -96 75) -96]
Test Case: 512 | Input/Output: [(79 -77 79 28) -77]
Test Case: 513 | Input/Output: [(0 38 -88 -12) -88]
Test Case: 514 | Input/Output: [(70 89 39 -89) -89]
Test Case: 515 | Input/Output: [(-7 98 8 -49) -49]
Test Case: 516 | Input/Output: [(-92 13 -56 -53) -92]
Test Case: 517 | Input/Output: [(92 46 60 31) 31]
Test Case: 518 | Input/Output: [(-16 -4 -94 -43) -94]
Test Case: 519 | Input/Output: [(-6 -36 8 -94) -94]
Test Case: 520 | Input/Output: [(-29 -17 -15 -29) -29]
Test Case: 521 | Input/Output: [(-98 92 83 -22) -98]
Test Case: 522 | Input/Output: [(69 37 62 0) 0]
Test Case: 523 | Input/Output: [(-88 -24 -28 -42) -88]
Test Case: 524 | Input/Output: [(69 -62 14 -58) -62]
Test Case: 525 | Input/Output: [(-26 72 -98 -15) -98]
Test Case: 526 | Input/Output: [(65 60 -13 -97) -97]
Test Case: 527 | Input/Output: [(-37 66 -28 -62) -62]
Test Case: 528 | Input/Output: [(-99 -13 75 52) -99]
Test Case: 529 | Input/Output: [(2 5 79 -17) -17]
Test Case: 530 | Input/Output: [(78 0 51 86) 0]
Test Case: 531 | Input/Output: [(13 89 19 66) 13]
Test Case: 532 | Input/Output: [(96 32 47 29) 29]
Test Case: 533 | Input/Output: [(42 -88 10 93) -88]
Test Case: 534 | Input/Output: [(-59 82 -19 -33) -59]
Test Case: 535 | Input/Output: [(-13 32 90 36) -13]
Test Case: 536 | Input/Output: [(24 -45 -29 49) -45]
Test Case: 537 | Input/Output: [(30 89 -58 -89) -89]
Test Case: 538 | Input/Output: [(9 57 5 -95) -95]
Test Case: 539 | Input/Output: [(-31 -70 -11 -5) -70]
Test Case: 540 | Input/Output: [(27 86 60 43) 27]
Test Case: 541 | Input/Output: [(10 53 -72 -85) -85]
Test Case: 542 | Input/Output: [(-81 52 63 -46) -81]
Test Case: 543 | Input/Output: [(-80 19 70 -73) -80]
Test Case: 544 | Input/Output: [(74 48 53 -10) -10]
Test Case: 545 | Input/Output: [(-23 -4 -59 -26) -59]
Test Case: 546 | Input/Output: [(-48 64 26 13) -48]
Test Case: 547 | Input/Output: [(32 36 -58 -38) -58]
Test Case: 548 | Input/Output: [(44 -66 -45 8) -66]
Test Case: 549 | Input/Output: [(41 -96 34 -82) -96]
Test Case: 550 | Input/Output: [(79 -28 65 42) -28]
Test Case: 551 | Input/Output: [(53 -54 -12 -59) -59]
Test Case: 552 | Input/Output: [(-66 -87 18 -7) -87]
Test Case: 553 | Input/Output: [(-45 42 41 44) -45]
Test Case: 554 | Input/Output: [(-27 76 79 -2) -27]
Test Case: 555 | Input/Output: [(-17 68 -5 35) -17]
Test Case: 556 | Input/Output: [(2 3 -20 7) -20]
Test Case: 557 | Input/Output: [(96 -62 -42 12) -62]
Test Case: 558 | Input/Output: [(75 -94 18 -10) -94]
Test Case: 559 | Input/Output: [(-8 -23 91 92) -23]
Test Case: 560 | Input/Output: [(-44 85 43 -12) -44]
Test Case: 561 | Input/Output: [(-96 4 -95 -44) -96]
Test Case: 562 | Input/Output: [(-93 75 90 96) -93]
Test Case: 563 | Input/Output: [(72 78 94 3) 3]
Test Case: 564 | Input/Output: [(-19 -99 -79 -2) -99]
Test Case: 565 | Input/Output: [(32 67 -72 91) -72]
Test Case: 566 | Input/Output: [(8 -46 40 -43) -46]
Test Case: 567 | Input/Output: [(66 92 88 96) 66]
Test Case: 568 | Input/Output: [(-77 39 37 -11) -77]
Test Case: 569 | Input/Output: [(-27 -82 0 18) -82]
Test Case: 570 | Input/Output: [(-90 3 -82 37) -90]
Test Case: 571 | Input/Output: [(-49 -26 23 56) -49]
Test Case: 572 | Input/Output: [(-88 -18 -42 -89) -89]
Test Case: 573 | Input/Output: [(13 22 -9 -6) -9]
Test Case: 574 | Input/Output: [(16 -69 -80 64) -80]
Test Case: 575 | Input/Output: [(33 -54 -18 45) -54]
Test Case: 576 | Input/Output: [(-13 27 -27 -66) -66]
Test Case: 577 | Input/Output: [(9 60 -73 -22) -73]
Test Case: 578 | Input/Output: [(-52 -10 -68 -52) -68]
Test Case: 579 | Input/Output: [(86 -36 -99 -92) -99]
Test Case: 580 | Input/Output: [(44 85 82 -94) -94]
Test Case: 581 | Input/Output: [(-98 -23 72 31) -98]
Test Case: 582 | Input/Output: [(78 -46 26 -72) -72]
Test Case: 583 | Input/Output: [(80 16 1 52) 1]
Test Case: 584 | Input/Output: [(91 44 69 -41) -41]
Test Case: 585 | Input/Output: [(9 41 42 18) 9]
Test Case: 586 | Input/Output: [(57 10 -32 47) -32]
Test Case: 587 | Input/Output: [(25 -79 48 -49) -79]
Test Case: 588 | Input/Output: [(90 -67 -44 65) -67]
Test Case: 589 | Input/Output: [(-24 -8 40 -80) -80]
Test Case: 590 | Input/Output: [(-90 41 -18 4) -90]
Test Case: 591 | Input/Output: [(-80 -61 -76 -91) -91]
Test Case: 592 | Input/Output: [(74 -86 71 -28) -86]
Test Case: 593 | Input/Output: [(64 -54 -93 -59) -93]
Test Case: 594 | Input/Output: [(68 -26 -66 62) -66]
Test Case: 595 | Input/Output: [(-94 -1 -50 -45) -94]
Test Case: 596 | Input/Output: [(-18 -29 4 -58) -58]
Test Case: 597 | Input/Output: [(-85 -44 -70 61) -85]
Test Case: 598 | Input/Output: [(93 73 -58 -59) -59]
Test Case: 599 | Input/Output: [(67 -62 -88 -47) -88]
Test Case: 600 | Input/Output: [(37 73 31 93) 31]
Test Case: 601 | Input/Output: [(40 23 -32 55) -32]
Test Case: 602 | Input/Output: [(0 18 -40 -93) -93]
Test Case: 603 | Input/Output: [(26 -72 -44 12) -72]
Test Case: 604 | Input/Output: [(-35 -22 62 -53) -53]
Test Case: 605 | Input/Output: [(-54 0 -2 -45) -54]
Test Case: 606 | Input/Output: [(-94 -82 15 40) -94]
Test Case: 607 | Input/Output: [(-13 71 12 63) -13]
Test Case: 608 | Input/Output: [(-94 89 27 60) -94]
Test Case: 609 | Input/Output: [(72 58 -22 45) -22]
Test Case: 610 | Input/Output: [(83 -41 67 73) -41]
Test Case: 611 | Input/Output: [(88 2 14 16) 2]
Test Case: 612 | Input/Output: [(-16 -32 91 28) -32]
Test Case: 613 | Input/Output: [(63 39 -86 33) -86]
Test Case: 614 | Input/Output: [(36 -14 -21 -37) -37]
Test Case: 615 | Input/Output: [(-37 -45 -68 -81) -81]
Test Case: 616 | Input/Output: [(-76 -99 -58 3) -99]
Test Case: 617 | Input/Output: [(-59 -87 -46 -97) -97]
Test Case: 618 | Input/Output: [(90 -69 -78 4) -78]
Test Case: 619 | Input/Output: [(68 47 -67 25) -67]
Test Case: 620 | Input/Output: [(18 59 -11 14) -11]
Test Case: 621 | Input/Output: [(39 28 73 49) 28]
Test Case: 622 | Input/Output: [(-98 -89 -76 -48) -98]
Test Case: 623 | Input/Output: [(15 68 -53 -96) -96]
Test Case: 624 | Input/Output: [(78 -63 63 -79) -79]
Test Case: 625 | Input/Output: [(17 -21 -80 25) -80]
Test Case: 626 | Input/Output: [(-49 0 79 86) -49]
Test Case: 627 | Input/Output: [(-44 1 -81 -72) -81]
Test Case: 628 | Input/Output: [(-16 31 -75 -35) -75]
Test Case: 629 | Input/Output: [(18 -67 39 -89) -89]
Test Case: 630 | Input/Output: [(-52 -68 -40 77) -68]
Test Case: 631 | Input/Output: [(38 -69 42 18) -69]
Test Case: 632 | Input/Output: [(42 -81 -37 40) -81]
Test Case: 633 | Input/Output: [(67 66 90 -88) -88]
Test Case: 634 | Input/Output: [(-84 28 49 7) -84]
Test Case: 635 | Input/Output: [(88 29 -65 -24) -65]
Test Case: 636 | Input/Output: [(65 55 -67 59) -67]
Test Case: 637 | Input/Output: [(60 -52 23 -7) -52]
Test Case: 638 | Input/Output: [(59 -35 -85 25) -85]
Test Case: 639 | Input/Output: [(66 72 77 -87) -87]
Test Case: 640 | Input/Output: [(83 -32 80 49) -32]
Test Case: 641 | Input/Output: [(48 46 93 42) 42]
Test Case: 642 | Input/Output: [(-9 -43 30 29) -43]
Test Case: 643 | Input/Output: [(48 13 -52 59) -52]
Test Case: 644 | Input/Output: [(61 -53 -4 -65) -65]
Test Case: 645 | Input/Output: [(-39 -29 -18 32) -39]
Test Case: 646 | Input/Output: [(46 -27 45 -36) -36]
Test Case: 647 | Input/Output: [(88 29 57 62) 29]
Test Case: 648 | Input/Output: [(-76 -64 47 0) -76]
Test Case: 649 | Input/Output: [(-64 52 -78 93) -78]
Test Case: 650 | Input/Output: [(40 1 -57 -67) -67]
Test Case: 651 | Input/Output: [(-33 44 -13 -52) -52]
Test Case: 652 | Input/Output: [(-48 36 -50 60) -50]
Test Case: 653 | Input/Output: [(53 59 75 100) 53]
Test Case: 654 | Input/Output: [(82 -19 -58 38) -58]
Test Case: 655 | Input/Output: [(-26 29 21 35) -26]
Test Case: 656 | Input/Output: [(-30 -68 -18 -78) -78]
Test Case: 657 | Input/Output: [(22 42 33 -97) -97]
Test Case: 658 | Input/Output: [(-46 95 -40 -92) -92]
Test Case: 659 | Input/Output: [(99 -28 0 82) -28]
Test Case: 660 | Input/Output: [(51 45 36 97) 36]
Test Case: 661 | Input/Output: [(-77 -92 -78 92) -92]
Test Case: 662 | Input/Output: [(-37 -37 31 70) -37]
Test Case: 663 | Input/Output: [(84 -32 -10 23) -32]
Test Case: 664 | Input/Output: [(-63 -92 -14 19) -92]
Test Case: 665 | Input/Output: [(-57 -32 -84 -43) -84]
Test Case: 666 | Input/Output: [(-73 25 -96 -75) -96]
Test Case: 667 | Input/Output: [(-91 70 67 32) -91]
Test Case: 668 | Input/Output: [(-52 53 -23 -89) -89]
Test Case: 669 | Input/Output: [(-4 -76 22 75) -76]
Test Case: 670 | Input/Output: [(50 -49 49 17) -49]
Test Case: 671 | Input/Output: [(80 51 -11 -96) -96]
Test Case: 672 | Input/Output: [(-58 75 -49 34) -58]
Test Case: 673 | Input/Output: [(-95 10 87 -29) -95]
Test Case: 674 | Input/Output: [(80 47 36 33) 33]
Test Case: 675 | Input/Output: [(-27 60 94 -27) -27]
Test Case: 676 | Input/Output: [(-94 86 59 35) -94]
Test Case: 677 | Input/Output: [(9 -90 -70 99) -90]
Test Case: 678 | Input/Output: [(-37 -72 13 -26) -72]
Test Case: 679 | Input/Output: [(12 20 -100 -27) -100]
Test Case: 680 | Input/Output: [(100 6 -16 -89) -89]
Test Case: 681 | Input/Output: [(98 80 -10 94) -10]
Test Case: 682 | Input/Output: [(11 -77 -6 -92) -92]
Test Case: 683 | Input/Output: [(-45 89 26 31) -45]
Test Case: 684 | Input/Output: [(-20 82 21 59) -20]
Test Case: 685 | Input/Output: [(-60 -66 -89 -47) -89]
Test Case: 686 | Input/Output: [(82 11 60 -70) -70]
Test Case: 687 | Input/Output: [(-1 89 58 -31) -31]
Test Case: 688 | Input/Output: [(-42 20 -12 -1) -42]
Test Case: 689 | Input/Output: [(-79 -3 59 -23) -79]
Test Case: 690 | Input/Output: [(86 4 -51 42) -51]
Test Case: 691 | Input/Output: [(16 62 10 10) 10]
Test Case: 692 | Input/Output: [(33 -77 32 18) -77]
Test Case: 693 | Input/Output: [(82 -32 -13 57) -32]
Test Case: 694 | Input/Output: [(-66 1 39 -28) -66]
Test Case: 695 | Input/Output: [(13 89 62 -2) -2]
Test Case: 696 | Input/Output: [(92 -73 21 0) -73]
Test Case: 697 | Input/Output: [(94 7 -51 100) -51]
Test Case: 698 | Input/Output: [(-75 100 -72 -84) -84]
Test Case: 699 | Input/Output: [(-88 -32 -1 20) -88]
Test Case: 700 | Input/Output: [(22 33 41 -64) -64]
Test Case: 701 | Input/Output: [(88 -72 22 82) -72]
Test Case: 702 | Input/Output: [(-34 23 1 -7) -34]
Test Case: 703 | Input/Output: [(68 28 90 -80) -80]
Test Case: 704 | Input/Output: [(-1 12 31 -1) -1]
Test Case: 705 | Input/Output: [(-8 57 -100 75) -100]
Test Case: 706 | Input/Output: [(-50 -27 46 66) -50]
Test Case: 707 | Input/Output: [(32 -19 87 55) -19]
Test Case: 708 | Input/Output: [(-85 20 39 -73) -85]
Test Case: 709 | Input/Output: [(-26 -61 16 20) -61]
Test Case: 710 | Input/Output: [(-78 -54 21 90) -78]
Test Case: 711 | Input/Output: [(55 -38 8 14) -38]
Test Case: 712 | Input/Output: [(-59 77 34 56) -59]
Test Case: 713 | Input/Output: [(-6 97 62 83) -6]
Test Case: 714 | Input/Output: [(-53 24 -80 48) -80]
Test Case: 715 | Input/Output: [(90 22 55 -12) -12]
Test Case: 716 | Input/Output: [(-80 -48 13 17) -80]
Test Case: 717 | Input/Output: [(33 64 30 -64) -64]
Test Case: 718 | Input/Output: [(-58 43 -3 -20) -58]
Test Case: 719 | Input/Output: [(86 -16 -41 -75) -75]
Test Case: 720 | Input/Output: [(-85 65 -37 22) -85]
Test Case: 721 | Input/Output: [(-22 33 -29 -93) -93]
Test Case: 722 | Input/Output: [(11 26 53 55) 11]
Test Case: 723 | Input/Output: [(22 -91 33 -37) -91]
Test Case: 724 | Input/Output: [(-24 -85 -61 -18) -85]
Test Case: 725 | Input/Output: [(-61 18 -91 81) -91]
Test Case: 726 | Input/Output: [(22 52 80 77) 22]
Test Case: 727 | Input/Output: [(-98 -17 -22 41) -98]
Test Case: 728 | Input/Output: [(-7 -43 55 -54) -54]
Test Case: 729 | Input/Output: [(-23 59 -97 -1) -97]
Test Case: 730 | Input/Output: [(47 -84 21 18) -84]
Test Case: 731 | Input/Output: [(58 94 83 48) 48]
Test Case: 732 | Input/Output: [(66 -95 -22 77) -95]
Test Case: 733 | Input/Output: [(-50 23 -88 -28) -88]
Test Case: 734 | Input/Output: [(-46 93 45 -12) -46]
Test Case: 735 | Input/Output: [(3 100 -47 -54) -54]
Test Case: 736 | Input/Output: [(36 -3 -23 34) -23]
Test Case: 737 | Input/Output: [(78 -26 32 -15) -26]
Test Case: 738 | Input/Output: [(-78 5 72 94) -78]
Test Case: 739 | Input/Output: [(-67 -41 -52 -32) -67]
Test Case: 740 | Input/Output: [(79 40 67 91) 40]
Test Case: 741 | Input/Output: [(-85 -41 -78 -29) -85]
Test Case: 742 | Input/Output: [(-45 52 58 -86) -86]
Test Case: 743 | Input/Output: [(8 6 -31 56) -31]
Test Case: 744 | Input/Output: [(32 77 -87 -23) -87]
Test Case: 745 | Input/Output: [(-8 -24 30 -14) -24]
Test Case: 746 | Input/Output: [(-56 98 56 93) -56]
Test Case: 747 | Input/Output: [(74 17 -70 100) -70]
Test Case: 748 | Input/Output: [(63 38 -53 41) -53]
Test Case: 749 | Input/Output: [(-7 44 -63 -97) -97]
Test Case: 750 | Input/Output: [(-23 -67 -53 -38) -67]
Test Case: 751 | Input/Output: [(5 52 49 43) 5]
Test Case: 752 | Input/Output: [(-55 60 21 94) -55]
Test Case: 753 | Input/Output: [(27 97 -2 11) -2]
Test Case: 754 | Input/Output: [(-50 37 -89 -9) -89]
Test Case: 755 | Input/Output: [(71 -90 -78 93) -90]
Test Case: 756 | Input/Output: [(19 -87 93 67) -87]
Test Case: 757 | Input/Output: [(-32 -36 7 87) -36]
Test Case: 758 | Input/Output: [(53 -62 85 68) -62]
Test Case: 759 | Input/Output: [(24 82 27 -26) -26]
Test Case: 760 | Input/Output: [(-72 25 15 39) -72]
Test Case: 761 | Input/Output: [(-36 23 25 94) -36]
Test Case: 762 | Input/Output: [(13 -17 80 64) -17]
Test Case: 763 | Input/Output: [(-99 -96 -13 70) -99]
Test Case: 764 | Input/Output: [(-2 19 6 -27) -27]
Test Case: 765 | Input/Output: [(35 46 -40 4) -40]
Test Case: 766 | Input/Output: [(-87 62 -47 -24) -87]
Test Case: 767 | Input/Output: [(-66 74 -89 -27) -89]
Test Case: 768 | Input/Output: [(3 -37 -94 -68) -94]
Test Case: 769 | Input/Output: [(100 14 88 88) 14]
Test Case: 770 | Input/Output: [(-12 -75 -27 -62) -75]
Test Case: 771 | Input/Output: [(70 -99 -36 59) -99]
Test Case: 772 | Input/Output: [(38 -27 -16 59) -27]
Test Case: 773 | Input/Output: [(-32 -46 85 66) -46]
Test Case: 774 | Input/Output: [(16 65 -89 25) -89]
Test Case: 775 | Input/Output: [(70 -8 22 31) -8]
Test Case: 776 | Input/Output: [(-75 3 6 41) -75]
Test Case: 777 | Input/Output: [(-77 59 -7 -23) -77]
Test Case: 778 | Input/Output: [(16 -98 -78 96) -98]
Test Case: 779 | Input/Output: [(-3 -86 19 64) -86]
Test Case: 780 | Input/Output: [(-10 -12 -99 50) -99]
Test Case: 781 | Input/Output: [(-37 -83 -40 41) -83]
Test Case: 782 | Input/Output: [(63 60 0 -28) -28]
Test Case: 783 | Input/Output: [(-50 29 60 0) -50]
Test Case: 784 | Input/Output: [(58 -74 -39 15) -74]
Test Case: 785 | Input/Output: [(64 47 -1 45) -1]
Test Case: 786 | Input/Output: [(60 -39 71 65) -39]
Test Case: 787 | Input/Output: [(-1 18 -49 28) -49]
Test Case: 788 | Input/Output: [(-87 -75 -90 5) -90]
Test Case: 789 | Input/Output: [(11 2 76 -50) -50]
Test Case: 790 | Input/Output: [(-41 -94 11 51) -94]
Test Case: 791 | Input/Output: [(17 -43 -96 -7) -96]
Test Case: 792 | Input/Output: [(-28 -45 -97 -75) -97]
Test Case: 793 | Input/Output: [(80 -14 95 27) -14]
Test Case: 794 | Input/Output: [(92 44 -44 19) -44]
Test Case: 795 | Input/Output: [(-96 34 -86 -24) -96]
Test Case: 796 | Input/Output: [(4 12 -49 57) -49]
Test Case: 797 | Input/Output: [(28 45 41 15) 15]
Test Case: 798 | Input/Output: [(34 23 22 -12) -12]
Test Case: 799 | Input/Output: [(68 -48 48 82) -48]
Test Case: 800 | Input/Output: [(19 55 -87 -77) -87]
Test Case: 801 | Input/Output: [(89 -52 30 -83) -83]
Test Case: 802 | Input/Output: [(3 -39 48 -55) -55]
Test Case: 803 | Input/Output: [(-9 30 82 -79) -79]
Test Case: 804 | Input/Output: [(32 7 66 25) 7]
Test Case: 805 | Input/Output: [(19 -69 74 -55) -69]
Test Case: 806 | Input/Output: [(-22 36 40 -90) -90]
Test Case: 807 | Input/Output: [(98 67 30 53) 30]
Test Case: 808 | Input/Output: [(41 3 -93 -98) -98]
Test Case: 809 | Input/Output: [(5 -32 67 3) -32]
Test Case: 810 | Input/Output: [(-7 11 92 85) -7]
Test Case: 811 | Input/Output: [(-27 42 -74 0) -74]
Test Case: 812 | Input/Output: [(-37 86 54 95) -37]
Test Case: 813 | Input/Output: [(-87 59 30 95) -87]
Test Case: 814 | Input/Output: [(3 -87 -71 73) -87]
Test Case: 815 | Input/Output: [(8 -46 92 -12) -46]
Test Case: 816 | Input/Output: [(-80 55 4 -80) -80]
Test Case: 817 | Input/Output: [(-30 22 80 -99) -99]
Test Case: 818 | Input/Output: [(-37 32 -62 71) -62]
Test Case: 819 | Input/Output: [(-8 -99 38 -93) -99]
Test Case: 820 | Input/Output: [(-72 17 -81 13) -81]
Test Case: 821 | Input/Output: [(-80 91 -60 53) -80]
Test Case: 822 | Input/Output: [(56 -21 -58 44) -58]
Test Case: 823 | Input/Output: [(-9 2 -79 6) -79]
Test Case: 824 | Input/Output: [(-53 74 -39 -40) -53]
Test Case: 825 | Input/Output: [(-42 19 -91 12) -91]
Test Case: 826 | Input/Output: [(-51 67 60 -5) -51]
Test Case: 827 | Input/Output: [(-36 -76 17 83) -76]
Test Case: 828 | Input/Output: [(94 -50 16 75) -50]
Test Case: 829 | Input/Output: [(-69 -29 27 -34) -69]
Test Case: 830 | Input/Output: [(69 27 -41 39) -41]
Test Case: 831 | Input/Output: [(0 -1 46 61) -1]
Test Case: 832 | Input/Output: [(89 -16 -75 -36) -75]
Test Case: 833 | Input/Output: [(96 42 -22 -28) -28]
Test Case: 834 | Input/Output: [(-79 -17 -81 -41) -81]
Test Case: 835 | Input/Output: [(-69 4 -77 65) -77]
Test Case: 836 | Input/Output: [(-3 55 29 -34) -34]
Test Case: 837 | Input/Output: [(-63 100 99 -54) -63]
Test Case: 838 | Input/Output: [(86 -57 11 -63) -63]
Test Case: 839 | Input/Output: [(62 82 -13 -52) -52]
Test Case: 840 | Input/Output: [(-52 73 -41 54) -52]
Test Case: 841 | Input/Output: [(91 -30 -93 -95) -95]
Test Case: 842 | Input/Output: [(-31 -70 12 -38) -70]
Test Case: 843 | Input/Output: [(21 87 72 53) 21]
Test Case: 844 | Input/Output: [(93 74 40 -35) -35]
Test Case: 845 | Input/Output: [(-30 3 -30 -69) -69]
Test Case: 846 | Input/Output: [(-60 -12 -79 -44) -79]
Test Case: 847 | Input/Output: [(5 -27 51 -85) -85]
Test Case: 848 | Input/Output: [(55 -88 1 -72) -88]
Test Case: 849 | Input/Output: [(9 18 39 -42) -42]
Test Case: 850 | Input/Output: [(-86 -75 87 97) -86]
Test Case: 851 | Input/Output: [(2 -92 -64 60) -92]
Test Case: 852 | Input/Output: [(66 -84 -5 61) -84]
Test Case: 853 | Input/Output: [(-39 85 97 77) -39]
Test Case: 854 | Input/Output: [(14 95 71 68) 14]
Test Case: 855 | Input/Output: [(6 19 53 -3) -3]
Test Case: 856 | Input/Output: [(15 84 81 -24) -24]
Test Case: 857 | Input/Output: [(9 -93 -54 88) -93]
Test Case: 858 | Input/Output: [(92 26 54 -11) -11]
Test Case: 859 | Input/Output: [(-46 -81 52 -13) -81]
Test Case: 860 | Input/Output: [(-38 6 10 -64) -64]
Test Case: 861 | Input/Output: [(-16 47 83 -61) -61]
Test Case: 862 | Input/Output: [(-44 -65 77 -17) -65]
Test Case: 863 | Input/Output: [(-42 48 -48 -63) -63]
Test Case: 864 | Input/Output: [(60 10 -17 69) -17]
Test Case: 865 | Input/Output: [(-31 30 12 11) -31]
Test Case: 866 | Input/Output: [(39 29 -30 -13) -30]
Test Case: 867 | Input/Output: [(-88 92 -45 -28) -88]
Test Case: 868 | Input/Output: [(-31 -31 -39 -96) -96]
Test Case: 869 | Input/Output: [(-65 73 -28 -62) -65]
Test Case: 870 | Input/Output: [(80 60 61 59) 59]
Test Case: 871 | Input/Output: [(-47 -59 -78 -45) -78]
Test Case: 872 | Input/Output: [(-99 25 -58 97) -99]
Test Case: 873 | Input/Output: [(0 -25 92 -80) -80]
Test Case: 874 | Input/Output: [(-50 25 53 32) -50]
Test Case: 875 | Input/Output: [(74 -99 -32 81) -99]
Test Case: 876 | Input/Output: [(-77 54 -96 87) -96]
Test Case: 877 | Input/Output: [(-42 -80 -11 1) -80]
Test Case: 878 | Input/Output: [(14 -22 55 -14) -22]
Test Case: 879 | Input/Output: [(-50 58 -81 40) -81]
Test Case: 880 | Input/Output: [(42 83 -81 -66) -81]
Test Case: 881 | Input/Output: [(83 51 1 47) 1]
Test Case: 882 | Input/Output: [(-30 -80 -28 45) -80]
Test Case: 883 | Input/Output: [(89 81 -77 26) -77]
Test Case: 884 | Input/Output: [(17 38 -31 -3) -31]
Test Case: 885 | Input/Output: [(-47 79 -31 -78) -78]
Test Case: 886 | Input/Output: [(-70 -98 -60 -97) -98]
Test Case: 887 | Input/Output: [(64 54 -23 -44) -44]
Test Case: 888 | Input/Output: [(-20 -88 -21 19) -88]
Test Case: 889 | Input/Output: [(44 -39 -37 -60) -60]
Test Case: 890 | Input/Output: [(21 19 -68 79) -68]
Test Case: 891 | Input/Output: [(-39 91 38 -12) -39]
Test Case: 892 | Input/Output: [(-76 -64 56 78) -76]
Test Case: 893 | Input/Output: [(63 -83 29 -68) -83]
Test Case: 894 | Input/Output: [(-39 14 21 -63) -63]
Test Case: 895 | Input/Output: [(16 -93 -54 3) -93]
Test Case: 896 | Input/Output: [(-62 64 64 -14) -62]
Test Case: 897 | Input/Output: [(57 59 -12 -65) -65]
Test Case: 898 | Input/Output: [(-28 28 -79 -66) -79]
Test Case: 899 | Input/Output: [(-2 -84 99 -89) -89]
Test Case: 900 | Input/Output: [(73 67 67 95) 67]
Test Case: 901 | Input/Output: [(14 -100 14 67) -100]
Test Case: 902 | Input/Output: [(-27 -92 -44 -92) -92]
Test Case: 903 | Input/Output: [(-36 -6 -98 22) -98]
Test Case: 904 | Input/Output: [(-95 -90 7 10) -95]
Test Case: 905 | Input/Output: [(29 46 92 15) 15]
Test Case: 906 | Input/Output: [(-98 95 -65 44) -98]
Test Case: 907 | Input/Output: [(42 3 7 58) 3]
Test Case: 908 | Input/Output: [(49 -12 81 -73) -73]
Test Case: 909 | Input/Output: [(62 -59 59 79) -59]
Test Case: 910 | Input/Output: [(1 -14 -57 57) -57]
Test Case: 911 | Input/Output: [(99 -16 -66 -34) -66]
Test Case: 912 | Input/Output: [(-34 12 -5 -71) -71]
Test Case: 913 | Input/Output: [(19 -90 -65 -94) -94]
Test Case: 914 | Input/Output: [(99 -16 -39 24) -39]
Test Case: 915 | Input/Output: [(94 -63 -8 65) -63]
Test Case: 916 | Input/Output: [(-25 58 68 66) -25]
Test Case: 917 | Input/Output: [(-44 -81 -43 66) -81]
Test Case: 918 | Input/Output: [(58 16 -55 17) -55]
Test Case: 919 | Input/Output: [(88 84 57 -26) -26]
Test Case: 920 | Input/Output: [(-29 -31 -77 -84) -84]
Test Case: 921 | Input/Output: [(99 96 -97 41) -97]
Test Case: 922 | Input/Output: [(39 -8 -90 61) -90]
Test Case: 923 | Input/Output: [(50 1 -49 -8) -49]
Test Case: 924 | Input/Output: [(-73 98 -8 58) -73]
Test Case: 925 | Input/Output: [(-89 -35 32 -89) -89]
Test Case: 926 | Input/Output: [(-63 -38 -91 73) -91]
Test Case: 927 | Input/Output: [(-29 68 18 -64) -64]
Test Case: 928 | Input/Output: [(80 25 88 57) 25]
Test Case: 929 | Input/Output: [(-26 0 -25 43) -26]
Test Case: 930 | Input/Output: [(25 95 83 -21) -21]
Test Case: 931 | Input/Output: [(86 -76 -68 -4) -76]
Test Case: 932 | Input/Output: [(6 -51 57 -63) -63]
Test Case: 933 | Input/Output: [(17 34 59 42) 17]
Test Case: 934 | Input/Output: [(54 89 85 26) 26]
Test Case: 935 | Input/Output: [(-37 59 80 49) -37]
Test Case: 936 | Input/Output: [(-86 74 -100 15) -100]
Test Case: 937 | Input/Output: [(-76 3 31 48) -76]
Test Case: 938 | Input/Output: [(0 -41 93 4) -41]
Test Case: 939 | Input/Output: [(26 17 -18 -19) -19]
Test Case: 940 | Input/Output: [(32 -46 -57 25) -57]
Test Case: 941 | Input/Output: [(17 62 46 31) 17]
Test Case: 942 | Input/Output: [(26 100 12 71) 12]
Test Case: 943 | Input/Output: [(-4 12 -41 -9) -41]
Test Case: 944 | Input/Output: [(63 -40 -57 68) -57]
Test Case: 945 | Input/Output: [(11 48 90 -42) -42]
Test Case: 946 | Input/Output: [(18 -26 -46 46) -46]
Test Case: 947 | Input/Output: [(82 41 13 -49) -49]
Test Case: 948 | Input/Output: [(-18 -37 22 -33) -37]
Test Case: 949 | Input/Output: [(-42 -34 43 1) -42]
Test Case: 950 | Input/Output: [(96 -15 -96 -90) -96]
Test Case: 951 | Input/Output: [(-56 -39 65 6) -56]
Test Case: 952 | Input/Output: [(4 -57 -99 -25) -99]
Test Case: 953 | Input/Output: [(46 -49 -8 3) -49]
Test Case: 954 | Input/Output: [(95 -55 20 93) -55]
Test Case: 955 | Input/Output: [(43 92 47 79) 43]
Test Case: 956 | Input/Output: [(-30 -85 -6 79) -85]
Test Case: 957 | Input/Output: [(-12 20 21 47) -12]
Test Case: 958 | Input/Output: [(18 98 -59 91) -59]
Test Case: 959 | Input/Output: [(25 -95 -47 -79) -95]
Test Case: 960 | Input/Output: [(97 78 97 62) 62]
Test Case: 961 | Input/Output: [(92 -92 -73 -56) -92]
Test Case: 962 | Input/Output: [(17 13 56 91) 13]
Test Case: 963 | Input/Output: [(-80 38 96 -51) -80]
Test Case: 964 | Input/Output: [(32 -82 79 -97) -97]
Test Case: 965 | Input/Output: [(43 99 -33 76) -33]
Test Case: 966 | Input/Output: [(16 -3 -46 -21) -46]
Test Case: 967 | Input/Output: [(20 -95 -93 -90) -95]
Test Case: 968 | Input/Output: [(-15 9 -34 67) -34]
Test Case: 969 | Input/Output: [(57 -4 -80 73) -80]
Test Case: 970 | Input/Output: [(-92 -89 59 13) -92]
Test Case: 971 | Input/Output: [(-37 -18 17 100) -37]
Test Case: 972 | Input/Output: [(59 -63 -19 -4) -63]
Test Case: 973 | Input/Output: [(-30 -21 -85 83) -85]
Test Case: 974 | Input/Output: [(-72 21 -76 1) -76]
Test Case: 975 | Input/Output: [(1 67 78 -71) -71]
Test Case: 976 | Input/Output: [(-28 -21 81 -38) -38]
Test Case: 977 | Input/Output: [(18 -8 -91 -26) -91]
Test Case: 978 | Input/Output: [(7 10 34 85) 7]
Test Case: 979 | Input/Output: [(-8 80 13 -43) -43]
Test Case: 980 | Input/Output: [(91 -4 -40 73) -40]
Test Case: 981 | Input/Output: [(-73 -45 -25 -80) -80]
Test Case: 982 | Input/Output: [(87 46 -55 -34) -55]
Test Case: 983 | Input/Output: [(-68 -81 -1 48) -81]
Test Case: 984 | Input/Output: [(90 -9 9 49) -9]
Test Case: 985 | Input/Output: [(76 -37 48 86) -37]
Test Case: 986 | Input/Output: [(-47 43 34 -39) -47]
Test Case: 987 | Input/Output: [(37 8 8 -45) -45]
Test Case: 988 | Input/Output: [(72 26 -78 29) -78]
Test Case: 989 | Input/Output: [(36 22 79 48) 22]
Test Case: 990 | Input/Output: [(35 -92 -34 -52) -92]
Test Case: 991 | Input/Output: [(-41 -5 -96 77) -96]
Test Case: 992 | Input/Output: [(84 37 -93 -16) -93]
Test Case: 993 | Input/Output: [(77 -1 64 34) -1]
Test Case: 994 | Input/Output: [(-22 6 2 -70) -70]
Test Case: 995 | Input/Output: [(-66 64 36 -70) -70]
Test Case: 996 | Input/Output: [(94 -16 -42 -44) -44]
Test Case: 997 | Input/Output: [(-38 38 -28 1) -38]
Test Case: 998 | Input/Output: [(-27 -26 -30 -48) -48]
Test Case: 999 | Input/Output: [(0 -76 68 -51) -76]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -63 48 115 39 80 28 58 117 119 -28 -99 121 3 13 28 54
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-83 -83 94 -83] -83] [[52 52 53 52] 52] [[-62 15 -62 -62] -62] [[-100 -100 -73 -100] -100] [[-36 -36 -36 16] -36] [[29 29 29 80] 29] [[-19 52 -19 -19] -19] [[-26 76 -26 -26] -26] [[71 71 -65 71] -65] [[-85 65 65 65] -85] [(55 55 55 55) 55] [(66 66 66 66) 66] [(-37 -37 -37 -37) -37] [(-55 -55 -55 -55) -55] [(-5 -5 -5 -5) -5] [(63 48 32 80) 32] [(9 31 91 78) 9] [(33 29 86 61) 29] [(40 39 58 83) 39] [(86 9 46 12) 9] [(51 19 40 10) 10] [(87 59 22 73) 22] [(55 16 91 17) 16] [(57 78 72 74) 57] [(5 16 48 18) 5] [(49 44 100 54) 44] [(53 16 38 50) 16] [(90 59 42 50) 42] [(39 49 49 78) 39] [(55 84 65 13) 13] [(71 50 89 10) 10] [(15 60 45 75) 15] [(45 23 91 6) 6] [(98 47 51 9) 9] [(50 77 47 74) 47] [(82 58 -28 3) -28] [(-98 -84 42 -81) -98] [(15 -78 77 -82) -82] [(73 -41 -51 63) -51] [(-78 -74 58 85) -78] [(-22 35 21 -64) -64] [(83 -46 58 -90) -90] [(-92 25 30 -61) -92] [(-91 -3 55 -10) -91] [(100 -82 -100 52) -100] [(-7 57 -15 -3) -15] [(44 10 45 -95) -95] [(5 -81 80 -26) -81] [(32 35 -42 82) -42] [(26 -35 41 94) -35] [(33 61 95 78) 33] [(6 -50 -40 -77) -77] [(-72 59 74 -9) -72] [(5 88 -26 57) -26] [(20 -11 32 21) -11] [(42 -78 91 -25) -78] [(-42 47 38 -94) -94] [(-12 -35 -75 89) -75] [(27 100 83 -100) -100] [(74 -56 60 -58) -58] [(3 -32 38 18) -32] [(27 -73 88 70) -73] [(-96 58 -100 63) -100] [(-40 38 -62 -92) -92] [(-98 -73 89 68) -98] [(24 -15 -94 -4) -94] [(49 20 -58 -28) -58] [(30 69 -67 59) -67] [(-10 88 -46 -72) -72] [(-69 39 90 28) -69] [(4 54 95 -100) -100] [(57 33 39 41) 33] [(23 -71 4 58) -71] [(98 11 -63 27) -63] [(-3 39 24 -72) -72] [(-92 53 -48 0) -92] [(-79 11 16 -79) -79] [(85 -31 -48 -12) -48] [(86 6 -4 -30) -30] [(92 -44 70 99) -44] [(-64 -81 43 -89) -89] [(34 -42 61 39) -42] [(-57 -63 -29 11) -63] [(71 -86 -2 -59) -86] [(-41 10 45 -88) -88] [(75 46 -23 -74) -74] [(46 2 39 11) 2] [(83 0 -33 91) -33] [(55 -1 66 97) -1] [(30 -82 -23 -10) -82] [(-59 -79 74 53) -79] [(-71 -42 82 31) -71] [(-64 -21 84 30) -64] [(95 54 26 -78) -78] [(62 71 -49 -58) -58])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: 94                 
Correct output: 52                  | Program output: 53                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -73                
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 29                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: 65                 
Correct output: 55                  | Program output: 55                 
Correct output: 66                  | Program output: 66                 
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: -55                
Correct output: -5                  | Program output: -5                 
Correct output: 32                  | Program output: 32                 
Correct output: 9                   | Program output: 91                 
Correct output: 29                  | Program output: 86                 
Correct output: 39                  | Program output: 58                 
Correct output: 9                   | Program output: 46                 
Correct output: 10                  | Program output: 40                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 91                 
Correct output: 57                  | Program output: 72                 
Correct output: 5                   | Program output: 48                 
Correct output: 44                  | Program output: 100                
Correct output: 16                  | Program output: 38                 
Correct output: 42                  | Program output: 42                 
Correct output: 39                  | Program output: 49                 
Correct output: 13                  | Program output: 65                 
Correct output: 10                  | Program output: 89                 
Correct output: 15                  | Program output: 45                 
Correct output: 6                   | Program output: 91                 
Correct output: 9                   | Program output: 51                 
Correct output: 47                  | Program output: 47                 
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: 42                 
Correct output: -82                 | Program output: 77                 
Correct output: -51                 | Program output: -51                
Correct output: -78                 | Program output: 58                 
Correct output: -64                 | Program output: 21                 
Correct output: -90                 | Program output: 58                 
Correct output: -92                 | Program output: 30                 
Correct output: -91                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: 45                 
Correct output: -81                 | Program output: 80                 
Correct output: -42                 | Program output: -42                
Correct output: -35                 | Program output: 41                 
Correct output: 33                  | Program output: 95                 
Correct output: -77                 | Program output: -40                
Correct output: -72                 | Program output: 74                 
Correct output: -26                 | Program output: -26                
Correct output: -11                 | Program output: 32                 
Correct output: -78                 | Program output: 91                 
Correct output: -94                 | Program output: 38                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: 83                 
Correct output: -58                 | Program output: 60                 
Correct output: -32                 | Program output: 38                 
Correct output: -73                 | Program output: 88                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -62                
Correct output: -98                 | Program output: 89                 
Correct output: -94                 | Program output: -94                
Correct output: -58                 | Program output: -58                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -46                
Correct output: -69                 | Program output: 90                 
Correct output: -100                | Program output: 95                 
Correct output: 33                  | Program output: 39                 
Correct output: -71                 | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -72                 | Program output: 24                 
Correct output: -92                 | Program output: -48                
Correct output: -79                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: -4                 
Correct output: -44                 | Program output: 70                 
Correct output: -89                 | Program output: 43                 
Correct output: -42                 | Program output: 61                 
Correct output: -63                 | Program output: -29                
Correct output: -86                 | Program output: -2                 
Correct output: -88                 | Program output: 45                 
Correct output: -74                 | Program output: -23                
Correct output: 2                   | Program output: 39                 
Correct output: -33                 | Program output: -33                
Correct output: -1                  | Program output: 66                 
Correct output: -82                 | Program output: -23                
Correct output: -79                 | Program output: 74                 
Correct output: -71                 | Program output: 82                 
Correct output: -64                 | Program output: 84                 
Correct output: -78                 | Program output: 26                 
Correct output: -58                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_226} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction 15} {:close 1, :instruction exec_stackdepth} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_715} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_234} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction tag_boolean_918} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush})
Lexicase best program: (in2 exec_do*count (integer_empty integer_shove exec_shove (boolean_not boolean_pop boolean_invert_first_then_and exec_y_when_autoconstructing (in3 exec_s_when_autoconstructing () () (integer_yank boolean_not exec_when (integer_eq boolean_invert_second_then_and integer_dup_times print_integer exec_shove (exec_s_when_autoconstructing (exec_rot (exec_empty exec_yankdup exec_while () integer_shove integer_sub tagged_226 integer_gte boolean_invert_second_then_and exec_k (integer_flush exec_dup_items integer_swap integer_shove exec_do*while () integer_pop in2 integer_add integer_fromboolean exec_empty integer_rot integer_gt exec_pop (exec_do*count (boolean_invert_second_then_and exec_s () (integer_dup boolean_eq integer_pop) (in3 in4 integer_inc boolean_pop in4) exec_flush) exec_do*count () 15 exec_stackdepth) exec_do*count ()) (exec_eq integer_rot) exec_do*while () integer_rot boolean_empty tagged_715 exec_y_when_autoconstructing (integer_dec boolean_dup exec_do*times (exec_yank) integer_mult exec_if (boolean_empty integer_div tagged_234 exec_flush exec_dup_times (integer_lt) integer_dup_times exec_yankdup exec_s (exec_while (tag_boolean_918 integer_lte) exec_rot (in4 boolean_flush) () ()) () ()) ())) () ()) () ())))))))
Lexicase best errors: [0 1 1 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 126
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_226} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction 15} {:close 1, :instruction exec_stackdepth} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_715} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_234} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction tag_boolean_918} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush})
Zero cases best program: (in2 exec_do*count (integer_empty integer_shove exec_shove (boolean_not boolean_pop boolean_invert_first_then_and exec_y_when_autoconstructing (in3 exec_s_when_autoconstructing () () (integer_yank boolean_not exec_when (integer_eq boolean_invert_second_then_and integer_dup_times print_integer exec_shove (exec_s_when_autoconstructing (exec_rot (exec_empty exec_yankdup exec_while () integer_shove integer_sub tagged_226 integer_gte boolean_invert_second_then_and exec_k (integer_flush exec_dup_items integer_swap integer_shove exec_do*while () integer_pop in2 integer_add integer_fromboolean exec_empty integer_rot integer_gt exec_pop (exec_do*count (boolean_invert_second_then_and exec_s () (integer_dup boolean_eq integer_pop) (in3 in4 integer_inc boolean_pop in4) exec_flush) exec_do*count () 15 exec_stackdepth) exec_do*count ()) (exec_eq integer_rot) exec_do*while () integer_rot boolean_empty tagged_715 exec_y_when_autoconstructing (integer_dec boolean_dup exec_do*times (exec_yank) integer_mult exec_if (boolean_empty integer_div tagged_234 exec_flush exec_dup_times (integer_lt) integer_dup_times exec_yankdup exec_s (exec_while (tag_boolean_918 integer_lte) exec_rot (in4 boolean_flush) () ()) () ()) ())) () ()) () ())))))))
Zero cases best errors: [0 1 1 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 126
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 2 2 2 16 3 4 3 7 6)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (3 2 2 2 16 3 4 3 7 6)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_671} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap})
Best program: (integer_gte exec_swap (boolean_swap boolean_frominteger in3 exec_do*range (print_integer exec_s (exec_swap () (boolean_invert_first_then_and boolean_pop) exec_do*range () boolean_yankdup exec_when (integer_stackdepth boolean_and exec_eq) integer_flush exec_dup (exec_noop) exec_rot (boolean_flush) (boolean_swap) (integer_max boolean_xor integer_yankdup integer_lt tag_exec_671 (exec_flush boolean_xor boolean_dup_items boolean_swap))) () ())) ())
Errors: [0 1 1 1 0 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 32
Size: 48
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 9.952
Median total errors in population: 10
Error averages by case: (0.997 0.998 0.998 0.998 0.984 0.997 0.996 0.997 0.993 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.218
Average program size in population (points): 69.206
Average percent parens in population: 0.277
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 463957
--- Timings ---
Current time: 1559314329381 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.8 seconds, 32.1%
Fitness Testing:      1.5 seconds, 63.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: 94                 
Correct output: 52                  | Program output: 53                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -73                
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 29                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: 65                 
Correct output: 55                  | Program output: 55                 
Correct output: 66                  | Program output: 66                 
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: -55                
Correct output: -5                  | Program output: -5                 
Correct output: 32                  | Program output: 32                 
Correct output: 9                   | Program output: 91                 
Correct output: 29                  | Program output: 86                 
Correct output: 39                  | Program output: 58                 
Correct output: 9                   | Program output: 46                 
Correct output: 10                  | Program output: 40                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 91                 
Correct output: 57                  | Program output: 72                 
Correct output: 5                   | Program output: 48                 
Correct output: 44                  | Program output: 100                
Correct output: 16                  | Program output: 38                 
Correct output: 42                  | Program output: 42                 
Correct output: 39                  | Program output: 49                 
Correct output: 13                  | Program output: 65                 
Correct output: 10                  | Program output: 89                 
Correct output: 15                  | Program output: 45                 
Correct output: 6                   | Program output: 91                 
Correct output: 9                   | Program output: 51                 
Correct output: 47                  | Program output: 47                 
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: 42                 
Correct output: -82                 | Program output: 77                 
Correct output: -51                 | Program output: -51                
Correct output: -78                 | Program output: 58                 
Correct output: -64                 | Program output: 21                 
Correct output: -90                 | Program output: 58                 
Correct output: -92                 | Program output: 30                 
Correct output: -91                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: 45                 
Correct output: -81                 | Program output: 80                 
Correct output: -42                 | Program output: -42                
Correct output: -35                 | Program output: 41                 
Correct output: 33                  | Program output: 95                 
Correct output: -77                 | Program output: -40                
Correct output: -72                 | Program output: 74                 
Correct output: -26                 | Program output: -26                
Correct output: -11                 | Program output: 32                 
Correct output: -78                 | Program output: 91                 
Correct output: -94                 | Program output: 38                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: 83                 
Correct output: -58                 | Program output: 60                 
Correct output: -32                 | Program output: 38                 
Correct output: -73                 | Program output: 88                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -62                
Correct output: -98                 | Program output: 89                 
Correct output: -94                 | Program output: -94                
Correct output: -58                 | Program output: -58                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -46                
Correct output: -69                 | Program output: 90                 
Correct output: -100                | Program output: 95                 
Correct output: 33                  | Program output: 39                 
Correct output: -71                 | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -72                 | Program output: 24                 
Correct output: -92                 | Program output: -48                
Correct output: -79                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: -4                 
Correct output: -44                 | Program output: 70                 
Correct output: -89                 | Program output: 43                 
Correct output: -42                 | Program output: 61                 
Correct output: -63                 | Program output: -29                
Correct output: -86                 | Program output: -2                 
Correct output: -88                 | Program output: 45                 
Correct output: -74                 | Program output: -23                
Correct output: 2                   | Program output: 39                 
Correct output: -33                 | Program output: -33                
Correct output: -1                  | Program output: 66                 
Correct output: -82                 | Program output: -23                
Correct output: -79                 | Program output: 74                 
Correct output: -71                 | Program output: 82                 
Correct output: -64                 | Program output: 84                 
Correct output: -78                 | Program output: 26                 
Correct output: -58                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_min} {:close 1, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction -40} {:close 0, :instruction print_newline})
Lexicase best program: (exec_if (exec_k_when_autoconstructing (integer_yankdup in1 integer_yankdup integer_min) (print_boolean) print_integer) (boolean_dup_items integer_stackdepth) integer_yankdup exec_rot (boolean_swap exec_y (exec_dup_times () integer_gte -40)) (print_newline) ())
Lexicase best errors: [1 0 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_min} {:close 1, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction -40} {:close 0, :instruction print_newline})
Zero cases best program: (exec_if (exec_k_when_autoconstructing (integer_yankdup in1 integer_yankdup integer_min) (print_boolean) print_integer) (boolean_dup_items integer_stackdepth) integer_yankdup exec_rot (boolean_swap exec_y (exec_dup_times () integer_gte -40)) (print_newline) ())
Zero cases best errors: [1 0 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (324 137 175 834 91 226 781 325 280 327)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (324 137 175 834 91 226 781 325 280 327)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_671} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap})
Best program: (integer_gte exec_swap (boolean_swap boolean_frominteger in3 exec_do*range (print_integer exec_s (exec_swap () (boolean_invert_first_then_and boolean_pop) exec_do*range () boolean_yankdup exec_when (integer_stackdepth boolean_and exec_eq) integer_flush exec_dup (exec_noop) exec_rot (boolean_flush) (boolean_swap) (integer_max boolean_xor integer_yankdup integer_lt tag_exec_671 (exec_flush boolean_xor boolean_dup_items boolean_swap))) () ())) ())
Errors: [0 1 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 32
Size: 48
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.5
Median total errors in population: 7
Error averages by case: (0.676 0.863 0.825 0.166 0.909 0.774 0.219 0.675 0.72 0.673)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.38
Average program size in population (points): 72.395
Average percent parens in population: 0.269
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.485
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 172
Genome diversity (% unique genomes):	 0.505
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 173
Syntactic diversity (% unique Push programs):	 0.499
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 913674
--- Timings ---
Current time: 1559314331909 milliseconds
Total Time:           5.0 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.4 seconds, 49.1%
Fitness Testing:      2.0 seconds, 40.9%
Report:               0.4 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 516
Test mean error for best: 0.51600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: 52                  | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 29                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 71                 
Correct output: -85                 | Program output: 65                 
Correct output: 55                  | Program output: 55                 
Correct output: 66                  | Program output: 66                 
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: -55                
Correct output: -5                  | Program output: -5                 
Correct output: 32                  | Program output: 48                 
Correct output: 9                   | Program output: 31                 
Correct output: 29                  | Program output: 29                 
Correct output: 39                  | Program output: 39                 
Correct output: 9                   | Program output: 9
                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 59                 
Correct output: 16                  | Program output: 16                 
Correct output: 57                  | Program output: 74                 
Correct output: 5                   | Program output: 16                 
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 50                 
Correct output: 39                  | Program output: 49                 
Correct output: 13                  | Program output: 13
                
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 60                 
Correct output: 6                   | Program output:                    
Correct output: 9                   | Program output: 9                  
Correct output: 47                  | Program output: 74                 
Correct output: -28                 | Program output:                    
Correct output: -98                 | Program output: -81                
Correct output: -82                 | Program output: -82                
Correct output: -51                 | Program output: -41                
Correct output: -78                 | Program output: -74                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -61                
Correct output: -91                 | Program output: -10                
Correct output: -100                | Program output: -82                
Correct output: -15                 | Program output: -3                 
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -26                
Correct output: -42                 | Program output: 35                 
Correct output: -35                 | Program output: -35                
Correct output: 33                  | Program output: 61                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -9                 
Correct output: -26                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: 58                 
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -73                
Correct output: -94                 | Program output: -4                 
Correct output: -58                 | Program output: -28                
Correct output: -67                 | Program output: 59                 
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: 28                 
Correct output: -100                | Program output: -100               
Correct output: 33                  | Program output: 33                 
Correct output: -71                 | Program output: -71                
Correct output: -63                 | Program output: 11                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -48                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: -44                 | Program output: -44                
Correct output: -89                 | Program output: -89                
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -86                 | Program output: -59                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: 2                   | Program output: 2                  
Correct output: -33                 | Program output: 0                  
Correct output: -1                  | Program output: -1                 
Correct output: -82                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 2, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_324} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_do*while (boolean_not in2) integer_fromboolean exec_do*range () integer_rot in4 exec_shove (integer_flush exec_dup_items integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq boolean_stackdepth exec_yank boolean_pop)) exec_noop tagged_324 exec_shove (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush))))
Lexicase best errors: [0 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 96
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 2, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_324} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_do*while (boolean_not in2) integer_fromboolean exec_do*range () integer_rot in4 exec_shove (integer_flush exec_dup_items integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq boolean_stackdepth exec_yank boolean_pop)) exec_noop tagged_324 exec_shove (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush))))
Zero cases best errors: [0 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 96
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (169 114 340 171 289 116 815 167 116 171)
Population mean number of elite cases: 2.47
Count of perfect (error zero) individuals by case: (169 114 340 171 289 116 815 167 116 171)
Population mean number of perfect (error zero) cases: 2.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 2, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_324} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Best program: (exec_do*while (boolean_not in2) integer_fromboolean exec_do*range () integer_rot in4 exec_shove (integer_flush exec_dup_items integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) boolean_yank tagged_324 exec_shove (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush))))
Errors: [0 0 1 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 76
Size: 96
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 7.532
Median total errors in population: 8
Error averages by case: (0.831 0.886 0.66 0.829 0.711 0.884 0.185 0.833 0.884 0.829)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.579
Average program size in population (points): 83.14
Average percent parens in population: 0.275
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.083
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1546513
--- Timings ---
Current time: 1559314335495 milliseconds
Total Time:           8.0 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.5 seconds, 55.7%
Fitness Testing:      2.7 seconds, 34.1%
Report:               0.7 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 52                  | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 29                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 71                 
Correct output: -85                 | Program output: -85                
Correct output: 55                  | Program output: 55                 
Correct output: 66                  | Program output: 66                 
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: -55                
Correct output: -5                  | Program output: -5                 
Correct output: 32                  | Program output: 63                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 33                 
Correct output: 39                  | Program output: 40                 
Correct output: 9                   | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 73                 
Correct output: 16                  | Program output: 17                 
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 49                 
Correct output: 16                  | Program output: 50                 
Correct output: 42                  | Program output: 50                 
Correct output: 39                  | Program output: 39                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 47                  | Program output: 50                 
Correct output: -28                 | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -51                 | Program output: 63                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: 52                 
Correct output: -15                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -26                
Correct output: -42                 | Program output: 32                 
Correct output: -35                 | Program output: 26                 
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: 5                  
Correct output: -11                 | Program output: 20                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: 3                  
Correct output: -73                 | Program output: 27                 
Correct output: -100                | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -4                 
Correct output: -58                 | Program output: -28                
Correct output: -67                 | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: -100               
Correct output: 33                  | Program output: 41                 
Correct output: -71                 | Program output: 23                 
Correct output: -63                 | Program output: 27                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: -48                 | Program output: -12                
Correct output: -30                 | Program output: -30                
Correct output: -44                 | Program output: 92                 
Correct output: -89                 | Program output: -89                
Correct output: -42                 | Program output: 34                 
Correct output: -63                 | Program output: -57                
Correct output: -86                 | Program output: -59                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: 2                   | Program output: 11                 
Correct output: -33                 | Program output: 83                 
Correct output: -1                  | Program output: 55                 
Correct output: -82                 | Program output: -10                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_324} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_if (exec_k_when_autoconstructing (integer_yankdup in1 integer_yankdup integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_shove (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
Lexicase best errors: [1 0 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_324} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_if (exec_k_when_autoconstructing (integer_yankdup in1 integer_yankdup integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_shove (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
Zero cases best errors: [1 0 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (590 454 176 109 110 594 466 14 180 110)
Population mean number of elite cases: 2.80
Count of perfect (error zero) individuals by case: (590 454 176 109 110 594 466 14 180 110)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_324} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Best program: (exec_if (exec_k_when_autoconstructing (integer_yankdup in1 integer_yankdup integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_shove (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
Errors: [1 0 1 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 72
Size: 93
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 7.197
Median total errors in population: 6
Error averages by case: (0.41 0.546 0.824 0.891 0.89 0.406 0.534 0.986 0.82 0.89)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 79.194
Average program size in population (points): 104.098
Average percent parens in population: 0.237
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.7
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.763
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.006
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2462968
--- Timings ---
Current time: 1559314339194 milliseconds
Total Time:          11.7 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.4 seconds, 54.9%
Fitness Testing:      3.6 seconds, 30.7%
Report:               1.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 52                  | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 29                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: 65                 
Correct output: 55                  | Program output: 55                 
Correct output: 66                  | Program output: 66                 
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: -55                
Correct output: -5                  | Program output: -5                 
Correct output: 32                  | Program output: 32                 
Correct output: 9                   | Program output: 78                 
Correct output: 29                  | Program output: 61                 
Correct output: 39                  | Program output: 58                 
Correct output: 9                   | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 17                 
Correct output: 57                  | Program output: 72                 
Correct output: 5                   | Program output: 18                 
Correct output: 44                  | Program output: 54                 
Correct output: 16                  | Program output: 38                 
Correct output: 42                  | Program output: 42                 
Correct output: 39                  | Program output: 49                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 45                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 47                  | Program output: 47                 
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -81                
Correct output: -82                 | Program output: -82                
Correct output: -51                 | Program output: -51                
Correct output: -78                 | Program output: 58                 
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -61                
Correct output: -91                 | Program output: -10                
Correct output: -100                | Program output: -100               
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -35                 | Program output: 41                 
Correct output: 33                  | Program output: 78                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -11                 | Program output: 21                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: 18                 
Correct output: -73                 | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: 68                 
Correct output: -94                 | Program output: -94                
Correct output: -58                 | Program output: -58                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: 28                 
Correct output: -100                | Program output: -100               
Correct output: 33                  | Program output: 39                 
Correct output: -71                 | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: -30                
Correct output: -44                 | Program output: 70                 
Correct output: -89                 | Program output: -89                
Correct output: -42                 | Program output: 39                 
Correct output: -63                 | Program output: -29                
Correct output: -86                 | Program output: -59                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: 2                   | Program output: 11                 
Correct output: -33                 | Program output: -33                
Correct output: -1                  | Program output: 66                 
Correct output: -82                 | Program output: -23                
Correct output: -79                 | Program output: 53                 
Correct output: -71                 | Program output: 31                 
Correct output: -64                 | Program output: 30                 
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_324} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_if (exec_k_when_autoconstructing (in3 in1 integer_yankdup integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_shove (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
Lexicase best errors: [1 0 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_324} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_if (exec_k_when_autoconstructing (in3 in1 integer_yankdup integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_shove (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
Zero cases best errors: [1 0 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (262 346 157 265 314 266 157 314 397 353)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (262 346 157 265 314 266 157 314 397 353)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_324} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Best program: (exec_if (exec_k_when_autoconstructing (in3 in1 integer_yankdup integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_shove (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
Errors: [1 0 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 72
Size: 93
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 7.169
Median total errors in population: 6
Error averages by case: (0.738 0.654 0.843 0.735 0.686 0.734 0.843 0.686 0.603 0.647)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 82.844
Average program size in population (points): 111.514
Average percent parens in population: 0.251
Minimum age in population: 4.5
Maximum age in population: 7.5
Average age in population: 5.853125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3365046
--- Timings ---
Current time: 1559314342856 milliseconds
Total Time:          15.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.5 seconds, 54.9%
Fitness Testing:      4.4 seconds, 28.4%
Report:               2.5 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 199
Test mean error for best: 0.19900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 52                  | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 29                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: 55                  | Program output: 55                 
Correct output: 66                  | Program output: 66                 
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: -55                
Correct output: -5                  | Program output: -5                 
Correct output: 32                  | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 33                 
Correct output: 39                  | Program output: 40                 
Correct output: 9                   | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 17                 
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 49                 
Correct output: 16                  | Program output: 38                 
Correct output: 42                  | Program output: 42                 
Correct output: 39                  | Program output: 39                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 47                  | Program output: 47                 
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -51                 | Program output: -51                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -35                 | Program output: 26                 
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -11                 | Program output: 20                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: 3                  
Correct output: -73                 | Program output: 27                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -58                 | Program output: -58                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: -100               
Correct output: 33                  | Program output: 39                 
Correct output: -71                 | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: -30                
Correct output: -44                 | Program output: 70                 
Correct output: -89                 | Program output: -89                
Correct output: -42                 | Program output: 34                 
Correct output: -63                 | Program output: -57                
Correct output: -86                 | Program output: -59                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: 2                   | Program output: 11                 
Correct output: -33                 | Program output: -33                
Correct output: -1                  | Program output: 55                 
Correct output: -82                 | Program output: -23                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_324} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_eq integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_shove (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 93
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_324} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_eq integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_shove (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 93
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (542 260 221 433 543 542 222 260 222 243)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (542 260 221 433 543 542 222 260 222 243)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_324} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Best program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_xor integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_mult boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_shove (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 72
Size: 93
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 6.512
Median total errors in population: 6
Error averages by case: (0.458 0.74 0.779 0.567 0.457 0.458 0.778 0.74 0.778 0.757)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 77.225
Average program size in population (points): 101.96
Average percent parens in population: 0.239
Minimum age in population: 6.0
Maximum age in population: 8.8125
Average age in population: 7.012125
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4387446
--- Timings ---
Current time: 1559314346781 milliseconds
Total Time:          19.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.7 seconds, 55.1%
Fitness Testing:      5.3 seconds, 27.3%
Report:               3.3 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 199
Test mean error for best: 0.19900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 52                  | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 29                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: 55                  | Program output: 55                 
Correct output: 66                  | Program output: 66                 
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: -55                
Correct output: -5                  | Program output: -5                 
Correct output: 32                  | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 33                 
Correct output: 39                  | Program output: 40                 
Correct output: 9                   | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 17                 
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 49                 
Correct output: 16                  | Program output: 38                 
Correct output: 42                  | Program output: 42                 
Correct output: 39                  | Program output: 39                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 47                  | Program output: 47                 
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -51                 | Program output: -51                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -35                 | Program output: 26                 
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -11                 | Program output: 20                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: 3                  
Correct output: -73                 | Program output: 27                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -58                 | Program output: -58                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: -100               
Correct output: 33                  | Program output: 39                 
Correct output: -71                 | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: -30                
Correct output: -44                 | Program output: 70                 
Correct output: -89                 | Program output: -89                
Correct output: -42                 | Program output: 34                 
Correct output: -63                 | Program output: -57                
Correct output: -86                 | Program output: -59                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: 2                   | Program output: 11                 
Correct output: -33                 | Program output: -33                
Correct output: -1                  | Program output: 55                 
Correct output: -82                 | Program output: -23                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_324} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_eq integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte boolean_not print_integer exec_dup_items in2 in1 exec_when (integer_mod) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_shove (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
Lexicase best errors: [0 1 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 93
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_324} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_eq integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte boolean_not print_integer exec_dup_items in2 in1 exec_when (integer_mod) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_shove (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
Zero cases best errors: [0 1 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 93
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (663 97 97 695 552 552 553 19 564 697)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (663 97 97 695 552 552 553 19 564 697)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_324} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Best program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_xor integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_mult boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop boolean_xor boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_shove (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
Errors: [0 1 1 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 72
Size: 93
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 5.511
Median total errors in population: 3
Error averages by case: (0.337 0.903 0.903 0.305 0.448 0.448 0.447 0.981 0.436 0.303)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.008
Average program size in population (points): 94.455
Average percent parens in population: 0.226
Minimum age in population: 7.0
Maximum age in population: 10.21875
Average age in population: 8.8349375
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5494959
--- Timings ---
Current time: 1559314350555 milliseconds
Total Time:          23.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.7 seconds, 54.8%
Fitness Testing:      6.2 seconds, 26.9%
Report:               4.1 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 199
Test mean error for best: 0.19900
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 52                  | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 29                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: 55                  | Program output: 55                 
Correct output: 66                  | Program output: 66                 
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: -55                
Correct output: -5                  | Program output: -5                 
Correct output: 32                  | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 33                 
Correct output: 39                  | Program output: 40                 
Correct output: 9                   | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 17                 
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 49                 
Correct output: 16                  | Program output: 38                 
Correct output: 42                  | Program output: 42                 
Correct output: 39                  | Program output: 39                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 47                  | Program output: 47                 
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -51                 | Program output: -51                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -35                 | Program output: 26                 
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -11                 | Program output: 20                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: 3                  
Correct output: -73                 | Program output: 27                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -58                 | Program output: -58                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: -100               
Correct output: 33                  | Program output: 39                 
Correct output: -71                 | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: -30                
Correct output: -44                 | Program output: 70                 
Correct output: -89                 | Program output: -89                
Correct output: -42                 | Program output: 34                 
Correct output: -63                 | Program output: -57                
Correct output: -86                 | Program output: -59                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: 2                   | Program output: 11                 
Correct output: -33                 | Program output: -33                
Correct output: -1                  | Program output: 55                 
Correct output: -82                 | Program output: -23                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_eq integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 94
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_eq integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 94
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (466 343 674 673 705 343 344 348 348 343)
Population mean number of elite cases: 4.59
Count of perfect (error zero) individuals by case: (466 343 674 673 705 343 344 348 348 343)
Population mean number of perfect (error zero) cases: 4.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction 42} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_386} {:close 1, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_324} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Best program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_flush integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_dup (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 72
Size: 93
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 5.413
Median total errors in population: 7
Error averages by case: (0.534 0.657 0.326 0.327 0.295 0.657 0.656 0.652 0.652 0.657)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 75.074
Average program size in population (points): 96.313
Average percent parens in population: 0.220
Minimum age in population: 8.25
Maximum age in population: 11.9375
Average age in population: 10.48065625
Median age in population: 10.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.01
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6597231
--- Timings ---
Current time: 1559314354345 milliseconds
Total Time:          26.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.6 seconds, 54.5%
Fitness Testing:      7.2 seconds, 26.7%
Report:               5.0 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 7
Successful program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_flush integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_dup (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 93


Auto-simplifying with starting size: 93
step: 0
program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_flush integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_dup (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 93

step: 500
program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_flush integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_dup (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 93

step: 1000
program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_flush integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_dup (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 93

step: 1500
program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_flush integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_dup (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 93

step: 2000
program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_flush integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_dup (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 93

step: 2500
program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_flush integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_dup (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 93

step: 3000
program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_flush integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_dup (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 93

step: 3500
program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_flush integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_dup (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 93

step: 4000
program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_flush integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_dup (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 93

step: 4500
program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_flush integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_dup (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 93

step: 5000
program: (exec_if (exec_k_when_autoconstructing (in3 in1 boolean_flush integer_min) (integer_mod integer_max) in4 integer_dup exec_pop (exec_y (in4 boolean_invert_first_then_and integer_lt boolean_invert_second_then_and) exec_do*range (integer_gte integer_add print_integer exec_dup_items in2 in1 exec_when (boolean_invert_second_then_and) exec_stackdepth boolean_swap integer_eq integer_gte exec_swap (boolean_not) (boolean_empty integer_sub integer_dec) exec_do*while () integer_eq exec_do*count () 42 boolean_pop) integer_swap integer_div exec_eq exec_eq boolean_frominteger exec_flush) boolean_frominteger integer_min print_integer boolean_pop integer_empty boolean_frominteger integer_gt) (exec_k (tag_integer_386 integer_gte) (print_newline exec_do*times () exec_k_when_autoconstructing () (boolean_eq exec_yankdup exec_yank boolean_pop)) exec_noop tagged_324 exec_dup (boolean_dup_items exec_y_when_autoconstructing (exec_y (integer_dup_times integer_flush boolean_invert_second_then_and boolean_flush)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 93

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 199
Test mean error for best: 0.19900
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 52                  | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 29                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: 55                  | Program output: 55                 
Correct output: 66                  | Program output: 66                 
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: -55                
Correct output: -5                  | Program output: -5                 
Correct output: 32                  | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 33                 
Correct output: 39                  | Program output: 40                 
Correct output: 9                   | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 17                 
Correct output: 57                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 49                 
Correct output: 16                  | Program output: 38                 
Correct output: 42                  | Program output: 42                 
Correct output: 39                  | Program output: 39                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 47                  | Program output: 47                 
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -51                 | Program output: -51                
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -15                 | Program output: -15                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -35                 | Program output: 26                 
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -11                 | Program output: 20                 
Correct output: -78                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: 3                  
Correct output: -73                 | Program output: 27                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -58                 | Program output: -58                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: -100               
Correct output: 33                  | Program output: 39                 
Correct output: -71                 | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: -30                
Correct output: -44                 | Program output: 70                 
Correct output: -89                 | Program output: -89                
Correct output: -42                 | Program output: 34                 
Correct output: -63                 | Program output: -57                
Correct output: -86                 | Program output: -59                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: 2                   | Program output: 11                 
Correct output: -33                 | Program output: -33                
Correct output: -1                  | Program output: 55                 
Correct output: -82                 | Program output: -23                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: -58                
;;******************************
