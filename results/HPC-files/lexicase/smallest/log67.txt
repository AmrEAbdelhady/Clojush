Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[50 50 57 50] 50] [[42 8 42 42] 8] [[-69 73 73 73] -69] [[44 48 44 44] 44] [[-29 41 41 41] -29] [[-42 -42 -42 -84] -84] [[17 17 82 17] 17] [[37 -77 37 37] -77] [[53 53 53 56] 53] [[8 8 8 -19] -19] [(-48 -48 -48 -48) -48] [(-17 -17 -17 -17) -17] [(-32 -32 -32 -32) -32] [(77 77 77 77) 77] [(29 29 29 29) 29] [(86 30 73 50) 30] [(71 85 89 23) 23] [(61 64 6 37) 6] [(90 22 26 88) 22] [(81 75 100 29) 29] [(63 28 87 15) 15] [(43 39 80 64) 39] [(59 11 40 100) 11] [(99 51 81 72) 51] [(37 51 61 60) 37] [(90 53 16 27) 16] [(26 93 55 3) 3] [(54 62 22 1) 1] [(66 9 53 60) 9] [(7 36 86 49) 7] [(22 26 81 56) 22] [(14 27 57 90) 14] [(79 10 51 15) 10] [(30 90 52 12) 12] [(52 87 4 9) 4] [(66 99 -84 93) -84] [(71 69 19 -28) -28] [(-19 -77 -8 -9) -77] [(3 98 -40 -87) -87] [(-37 -33 66 76) -37] [(63 -42 -35 -55) -55] [(5 -7 -80 24) -80] [(-39 75 -6 -41) -41] [(-92 67 -67 -27) -92] [(33 71 -82 18) -82] [(28 -26 -30 4) -30] [(-78 12 37 82) -78] [(12 8 -7 86) -7] [(-88 -95 -16 -38) -95] [(56 -87 -29 -42) -87] [(-13 -29 -81 -94) -94] [(-11 8 -86 -5) -86] [(-70 77 -18 -79) -79] [(28 88 -12 -12) -12] [(31 60 -97 64) -97] [(6 -91 69 58) -91] [(-70 -54 2 -52) -70] [(-43 80 52 16) -43] [(-96 -53 -86 -8) -96] [(-93 -51 -94 12) -94] [(-98 -74 -61 86) -98] [(-38 68 -5 -83) -83] [(-43 -80 90 91) -80] [(68 -26 52 -46) -46] [(-25 99 -20 77) -25] [(83 -8 6 -26) -26] [(75 60 44 -71) -71] [(-58 -43 -26 38) -58] [(84 -45 -38 53) -45] [(82 -44 -35 -92) -92] [(-32 31 -85 56) -85] [(70 -99 -78 -98) -99] [(85 7 15 51) 7] [(61 59 -94 85) -94] [(38 52 -38 29) -38] [(-48 53 99 1) -48] [(-73 -73 -40 -58) -73] [(11 36 -67 -49) -67] [(64 50 100 -62) -62] [(-100 32 -68 0) -100] [(-88 -2 -35 -3) -88] [(96 -37 17 -51) -51] [(-24 -39 -32 -18) -39] [(44 -11 64 12) -11] [(13 -77 60 52) -77] [(17 62 -81 -48) -81] [(40 34 100 -38) -38] [(64 10 -39 -57) -57] [(34 -34 -84 -50) -84] [(-52 51 -98 -15) -98] [(-90 -70 48 -42) -90] [(31 -41 -85 -45) -85] [(3 79 -3 -66) -66] [(87 -76 -7 14) -76] [(45 18 82 23) 18])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[50 50 57 50] 50]
Train Case:   6 | Input/Output: [[42 8 42 42] 8]
Train Case:   7 | Input/Output: [[-69 73 73 73] -69]
Train Case:   8 | Input/Output: [[44 48 44 44] 44]
Train Case:   9 | Input/Output: [[-29 41 41 41] -29]
Train Case:  10 | Input/Output: [[-42 -42 -42 -84] -84]
Train Case:  11 | Input/Output: [[17 17 82 17] 17]
Train Case:  12 | Input/Output: [[37 -77 37 37] -77]
Train Case:  13 | Input/Output: [[53 53 53 56] 53]
Train Case:  14 | Input/Output: [[8 8 8 -19] -19]
Train Case:  15 | Input/Output: [(-48 -48 -48 -48) -48]
Train Case:  16 | Input/Output: [(-17 -17 -17 -17) -17]
Train Case:  17 | Input/Output: [(-32 -32 -32 -32) -32]
Train Case:  18 | Input/Output: [(77 77 77 77) 77]
Train Case:  19 | Input/Output: [(29 29 29 29) 29]
Train Case:  20 | Input/Output: [(86 30 73 50) 30]
Train Case:  21 | Input/Output: [(71 85 89 23) 23]
Train Case:  22 | Input/Output: [(61 64 6 37) 6]
Train Case:  23 | Input/Output: [(90 22 26 88) 22]
Train Case:  24 | Input/Output: [(81 75 100 29) 29]
Train Case:  25 | Input/Output: [(63 28 87 15) 15]
Train Case:  26 | Input/Output: [(43 39 80 64) 39]
Train Case:  27 | Input/Output: [(59 11 40 100) 11]
Train Case:  28 | Input/Output: [(99 51 81 72) 51]
Train Case:  29 | Input/Output: [(37 51 61 60) 37]
Train Case:  30 | Input/Output: [(90 53 16 27) 16]
Train Case:  31 | Input/Output: [(26 93 55 3) 3]
Train Case:  32 | Input/Output: [(54 62 22 1) 1]
Train Case:  33 | Input/Output: [(66 9 53 60) 9]
Train Case:  34 | Input/Output: [(7 36 86 49) 7]
Train Case:  35 | Input/Output: [(22 26 81 56) 22]
Train Case:  36 | Input/Output: [(14 27 57 90) 14]
Train Case:  37 | Input/Output: [(79 10 51 15) 10]
Train Case:  38 | Input/Output: [(30 90 52 12) 12]
Train Case:  39 | Input/Output: [(52 87 4 9) 4]
Train Case:  40 | Input/Output: [(66 99 -84 93) -84]
Train Case:  41 | Input/Output: [(71 69 19 -28) -28]
Train Case:  42 | Input/Output: [(-19 -77 -8 -9) -77]
Train Case:  43 | Input/Output: [(3 98 -40 -87) -87]
Train Case:  44 | Input/Output: [(-37 -33 66 76) -37]
Train Case:  45 | Input/Output: [(63 -42 -35 -55) -55]
Train Case:  46 | Input/Output: [(5 -7 -80 24) -80]
Train Case:  47 | Input/Output: [(-39 75 -6 -41) -41]
Train Case:  48 | Input/Output: [(-92 67 -67 -27) -92]
Train Case:  49 | Input/Output: [(33 71 -82 18) -82]
Train Case:  50 | Input/Output: [(28 -26 -30 4) -30]
Train Case:  51 | Input/Output: [(-78 12 37 82) -78]
Train Case:  52 | Input/Output: [(12 8 -7 86) -7]
Train Case:  53 | Input/Output: [(-88 -95 -16 -38) -95]
Train Case:  54 | Input/Output: [(56 -87 -29 -42) -87]
Train Case:  55 | Input/Output: [(-13 -29 -81 -94) -94]
Train Case:  56 | Input/Output: [(-11 8 -86 -5) -86]
Train Case:  57 | Input/Output: [(-70 77 -18 -79) -79]
Train Case:  58 | Input/Output: [(28 88 -12 -12) -12]
Train Case:  59 | Input/Output: [(31 60 -97 64) -97]
Train Case:  60 | Input/Output: [(6 -91 69 58) -91]
Train Case:  61 | Input/Output: [(-70 -54 2 -52) -70]
Train Case:  62 | Input/Output: [(-43 80 52 16) -43]
Train Case:  63 | Input/Output: [(-96 -53 -86 -8) -96]
Train Case:  64 | Input/Output: [(-93 -51 -94 12) -94]
Train Case:  65 | Input/Output: [(-98 -74 -61 86) -98]
Train Case:  66 | Input/Output: [(-38 68 -5 -83) -83]
Train Case:  67 | Input/Output: [(-43 -80 90 91) -80]
Train Case:  68 | Input/Output: [(68 -26 52 -46) -46]
Train Case:  69 | Input/Output: [(-25 99 -20 77) -25]
Train Case:  70 | Input/Output: [(83 -8 6 -26) -26]
Train Case:  71 | Input/Output: [(75 60 44 -71) -71]
Train Case:  72 | Input/Output: [(-58 -43 -26 38) -58]
Train Case:  73 | Input/Output: [(84 -45 -38 53) -45]
Train Case:  74 | Input/Output: [(82 -44 -35 -92) -92]
Train Case:  75 | Input/Output: [(-32 31 -85 56) -85]
Train Case:  76 | Input/Output: [(70 -99 -78 -98) -99]
Train Case:  77 | Input/Output: [(85 7 15 51) 7]
Train Case:  78 | Input/Output: [(61 59 -94 85) -94]
Train Case:  79 | Input/Output: [(38 52 -38 29) -38]
Train Case:  80 | Input/Output: [(-48 53 99 1) -48]
Train Case:  81 | Input/Output: [(-73 -73 -40 -58) -73]
Train Case:  82 | Input/Output: [(11 36 -67 -49) -67]
Train Case:  83 | Input/Output: [(64 50 100 -62) -62]
Train Case:  84 | Input/Output: [(-100 32 -68 0) -100]
Train Case:  85 | Input/Output: [(-88 -2 -35 -3) -88]
Train Case:  86 | Input/Output: [(96 -37 17 -51) -51]
Train Case:  87 | Input/Output: [(-24 -39 -32 -18) -39]
Train Case:  88 | Input/Output: [(44 -11 64 12) -11]
Train Case:  89 | Input/Output: [(13 -77 60 52) -77]
Train Case:  90 | Input/Output: [(17 62 -81 -48) -81]
Train Case:  91 | Input/Output: [(40 34 100 -38) -38]
Train Case:  92 | Input/Output: [(64 10 -39 -57) -57]
Train Case:  93 | Input/Output: [(34 -34 -84 -50) -84]
Train Case:  94 | Input/Output: [(-52 51 -98 -15) -98]
Train Case:  95 | Input/Output: [(-90 -70 48 -42) -90]
Train Case:  96 | Input/Output: [(31 -41 -85 -45) -85]
Train Case:  97 | Input/Output: [(3 79 -3 -66) -66]
Train Case:  98 | Input/Output: [(87 -76 -7 14) -76]
Train Case:  99 | Input/Output: [(45 18 82 23) 18]
Test Case:   0 | Input/Output: [[86 -10 -10 -10] -10]
Test Case:   1 | Input/Output: [[-44 -44 -35 -44] -44]
Test Case:   2 | Input/Output: [[-63 73 73 73] -63]
Test Case:   3 | Input/Output: [[-18 -18 -18 -21] -21]
Test Case:   4 | Input/Output: [[-2 -2 -2 -89] -89]
Test Case:   5 | Input/Output: [[41 -75 -75 -75] -75]
Test Case:   6 | Input/Output: [[-55 32 -55 -55] -55]
Test Case:   7 | Input/Output: [[62 62 19 62] 19]
Test Case:   8 | Input/Output: [[-24 -24 -24 3] -24]
Test Case:   9 | Input/Output: [[13 13 13 22] 13]
Test Case:  10 | Input/Output: [[2 2 86 2] 2]
Test Case:  11 | Input/Output: [[-22 14 14 14] -22]
Test Case:  12 | Input/Output: [[-5 -81 -5 -5] -81]
Test Case:  13 | Input/Output: [[33 -50 -50 -50] -50]
Test Case:  14 | Input/Output: [[-73 -73 -73 -77] -77]
Test Case:  15 | Input/Output: [[70 -21 70 70] -21]
Test Case:  16 | Input/Output: [[94 94 85 94] 85]
Test Case:  17 | Input/Output: [[-93 -93 -23 -93] -93]
Test Case:  18 | Input/Output: [[-56 -56 -56 0] -56]
Test Case:  19 | Input/Output: [[-28 -28 -28 60] -28]
Test Case:  20 | Input/Output: [[-38 39 39 39] -38]
Test Case:  21 | Input/Output: [[0 41 41 41] 0]
Test Case:  22 | Input/Output: [[-79 74 -79 -79] -79]
Test Case:  23 | Input/Output: [[1 -10 1 1] -10]
Test Case:  24 | Input/Output: [[-50 89 -50 -50] -50]
Test Case:  25 | Input/Output: [[49 57 57 57] 49]
Test Case:  26 | Input/Output: [[46 40 40 40] 40]
Test Case:  27 | Input/Output: [[87 48 48 48] 48]
Test Case:  28 | Input/Output: [[-77 -97 -97 -97] -97]
Test Case:  29 | Input/Output: [[89 -37 -37 -37] -37]
Test Case:  30 | Input/Output: [[-36 -36 27 -36] -36]
Test Case:  31 | Input/Output: [[-17 -17 -17 59] -17]
Test Case:  32 | Input/Output: [[-14 -14 -14 4] -14]
Test Case:  33 | Input/Output: [[56 72 56 56] 56]
Test Case:  34 | Input/Output: [[64 -77 64 64] -77]
Test Case:  35 | Input/Output: [[-85 -20 -85 -85] -85]
Test Case:  36 | Input/Output: [[-74 -74 -92 -74] -92]
Test Case:  37 | Input/Output: [[-86 -86 -86 64] -86]
Test Case:  38 | Input/Output: [[65 -10 65 65] -10]
Test Case:  39 | Input/Output: [[55 -12 55 55] -12]
Test Case:  40 | Input/Output: [[42 42 42 -7] -7]
Test Case:  41 | Input/Output: [[32 -40 -40 -40] -40]
Test Case:  42 | Input/Output: [[85 -79 -79 -79] -79]
Test Case:  43 | Input/Output: [[41 -78 41 41] -78]
Test Case:  44 | Input/Output: [[-39 -39 -39 -85] -85]
Test Case:  45 | Input/Output: [[4 4 4 91] 4]
Test Case:  46 | Input/Output: [[-16 -16 -16 31] -16]
Test Case:  47 | Input/Output: [[-77 -77 -77 55] -77]
Test Case:  48 | Input/Output: [[-45 -45 -45 9] -45]
Test Case:  49 | Input/Output: [[7 7 95 7] 7]
Test Case:  50 | Input/Output: [[85 -48 85 85] -48]
Test Case:  51 | Input/Output: [[40 -52 -52 -52] -52]
Test Case:  52 | Input/Output: [[6 81 6 6] 6]
Test Case:  53 | Input/Output: [[2 2 2 61] 2]
Test Case:  54 | Input/Output: [[-52 -55 -55 -55] -55]
Test Case:  55 | Input/Output: [[-36 71 -36 -36] -36]
Test Case:  56 | Input/Output: [[38 38 40 38] 38]
Test Case:  57 | Input/Output: [[-78 100 100 100] -78]
Test Case:  58 | Input/Output: [[-77 -77 -77 84] -77]
Test Case:  59 | Input/Output: [[-60 -26 -60 -60] -60]
Test Case:  60 | Input/Output: [[-90 -90 22 -90] -90]
Test Case:  61 | Input/Output: [[4 -72 4 4] -72]
Test Case:  62 | Input/Output: [[-57 -65 -57 -57] -65]
Test Case:  63 | Input/Output: [[2 2 2 -24] -24]
Test Case:  64 | Input/Output: [[-26 -76 -26 -26] -76]
Test Case:  65 | Input/Output: [[-83 -83 38 -83] -83]
Test Case:  66 | Input/Output: [[-10 -10 -25 -10] -25]
Test Case:  67 | Input/Output: [[59 59 59 39] 39]
Test Case:  68 | Input/Output: [[-48 -48 6 -48] -48]
Test Case:  69 | Input/Output: [[36 36 36 82] 36]
Test Case:  70 | Input/Output: [[-48 0 -48 -48] -48]
Test Case:  71 | Input/Output: [[-96 79 79 79] -96]
Test Case:  72 | Input/Output: [[-6 -6 100 -6] -6]
Test Case:  73 | Input/Output: [[70 70 81 70] 70]
Test Case:  74 | Input/Output: [[29 29 83 29] 29]
Test Case:  75 | Input/Output: [[-54 -9 -54 -54] -54]
Test Case:  76 | Input/Output: [[98 73 98 98] 73]
Test Case:  77 | Input/Output: [[-1 -1 -1 25] -1]
Test Case:  78 | Input/Output: [[100 -5 100 100] -5]
Test Case:  79 | Input/Output: [[-11 9 9 9] -11]
Test Case:  80 | Input/Output: [[-49 -49 49 -49] -49]
Test Case:  81 | Input/Output: [[-2 -2 26 -2] -2]
Test Case:  82 | Input/Output: [[-5 -46 -5 -5] -46]
Test Case:  83 | Input/Output: [[-88 -88 -88 64] -88]
Test Case:  84 | Input/Output: [[-63 -63 -63 -74] -74]
Test Case:  85 | Input/Output: [[24 24 24 14] 14]
Test Case:  86 | Input/Output: [[78 78 78 -52] -52]
Test Case:  87 | Input/Output: [[-65 -100 -100 -100] -100]
Test Case:  88 | Input/Output: [[-51 -51 -25 -51] -51]
Test Case:  89 | Input/Output: [[10 19 10 10] 10]
Test Case:  90 | Input/Output: [[38 38 38 97] 38]
Test Case:  91 | Input/Output: [[-79 -79 60 -79] -79]
Test Case:  92 | Input/Output: [[-71 -71 -71 -36] -71]
Test Case:  93 | Input/Output: [[56 53 56 56] 53]
Test Case:  94 | Input/Output: [[16 16 16 -36] -36]
Test Case:  95 | Input/Output: [[59 59 59 -100] -100]
Test Case:  96 | Input/Output: [[-83 -83 -83 -86] -86]
Test Case:  97 | Input/Output: [[89 57 89 89] 57]
Test Case:  98 | Input/Output: [[38 -78 38 38] -78]
Test Case:  99 | Input/Output: [[-56 -56 95 -56] -56]
Test Case: 100 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 101 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 102 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 103 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 104 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 105 | Input/Output: [(70 70 70 70) 70]
Test Case: 106 | Input/Output: [(17 17 17 17) 17]
Test Case: 107 | Input/Output: [(6 6 6 6) 6]
Test Case: 108 | Input/Output: [(54 54 54 54) 54]
Test Case: 109 | Input/Output: [(76 76 76 76) 76]
Test Case: 110 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 111 | Input/Output: [(26 26 26 26) 26]
Test Case: 112 | Input/Output: [(7 7 7 7) 7]
Test Case: 113 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 114 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 115 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 116 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 117 | Input/Output: [(83 83 83 83) 83]
Test Case: 118 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 119 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 120 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 121 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 122 | Input/Output: [(36 36 36 36) 36]
Test Case: 123 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 124 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 125 | Input/Output: [(12 12 12 12) 12]
Test Case: 126 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 127 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 128 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 129 | Input/Output: [(89 89 89 89) 89]
Test Case: 130 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 131 | Input/Output: [(77 77 77 77) 77]
Test Case: 132 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 133 | Input/Output: [(98 98 98 98) 98]
Test Case: 134 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 135 | Input/Output: [(15 15 15 15) 15]
Test Case: 136 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 137 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 138 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 139 | Input/Output: [(53 53 53 53) 53]
Test Case: 140 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 141 | Input/Output: [(36 36 36 36) 36]
Test Case: 142 | Input/Output: [(41 41 41 41) 41]
Test Case: 143 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 144 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 145 | Input/Output: [(42 42 42 42) 42]
Test Case: 146 | Input/Output: [(25 25 25 25) 25]
Test Case: 147 | Input/Output: [(75 75 75 75) 75]
Test Case: 148 | Input/Output: [(89 89 89 89) 89]
Test Case: 149 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 150 | Input/Output: [(86 86 86 86) 86]
Test Case: 151 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 152 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 153 | Input/Output: [(16 16 16 16) 16]
Test Case: 154 | Input/Output: [(13 13 13 13) 13]
Test Case: 155 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 156 | Input/Output: [(69 69 69 69) 69]
Test Case: 157 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 158 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 159 | Input/Output: [(32 32 32 32) 32]
Test Case: 160 | Input/Output: [(42 42 42 42) 42]
Test Case: 161 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 162 | Input/Output: [(27 27 27 27) 27]
Test Case: 163 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 164 | Input/Output: [(93 93 93 93) 93]
Test Case: 165 | Input/Output: [(60 60 60 60) 60]
Test Case: 166 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 167 | Input/Output: [(51 51 51 51) 51]
Test Case: 168 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 169 | Input/Output: [(59 59 59 59) 59]
Test Case: 170 | Input/Output: [(82 82 82 82) 82]
Test Case: 171 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 172 | Input/Output: [(60 60 60 60) 60]
Test Case: 173 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 174 | Input/Output: [(82 82 82 82) 82]
Test Case: 175 | Input/Output: [(63 63 63 63) 63]
Test Case: 176 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 177 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 178 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 179 | Input/Output: [(24 24 24 24) 24]
Test Case: 180 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 181 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 182 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 183 | Input/Output: [(34 34 34 34) 34]
Test Case: 184 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 185 | Input/Output: [(93 93 93 93) 93]
Test Case: 186 | Input/Output: [(48 48 48 48) 48]
Test Case: 187 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 188 | Input/Output: [(59 59 59 59) 59]
Test Case: 189 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 190 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 191 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 192 | Input/Output: [(95 95 95 95) 95]
Test Case: 193 | Input/Output: [(70 70 70 70) 70]
Test Case: 194 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 195 | Input/Output: [(4 4 4 4) 4]
Test Case: 196 | Input/Output: [(64 64 64 64) 64]
Test Case: 197 | Input/Output: [(16 16 16 16) 16]
Test Case: 198 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 199 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 200 | Input/Output: [(11 43 10 17) 10]
Test Case: 201 | Input/Output: [(39 10 43 85) 10]
Test Case: 202 | Input/Output: [(13 86 41 30) 13]
Test Case: 203 | Input/Output: [(39 59 99 14) 14]
Test Case: 204 | Input/Output: [(17 23 54 54) 17]
Test Case: 205 | Input/Output: [(71 57 84 70) 57]
Test Case: 206 | Input/Output: [(87 4 99 91) 4]
Test Case: 207 | Input/Output: [(50 33 77 72) 33]
Test Case: 208 | Input/Output: [(77 14 70 45) 14]
Test Case: 209 | Input/Output: [(80 42 90 59) 42]
Test Case: 210 | Input/Output: [(0 76 93 16) 0]
Test Case: 211 | Input/Output: [(0 0 32 34) 0]
Test Case: 212 | Input/Output: [(22 55 61 99) 22]
Test Case: 213 | Input/Output: [(1 42 89 49) 1]
Test Case: 214 | Input/Output: [(81 33 11 30) 11]
Test Case: 215 | Input/Output: [(62 7 1 57) 1]
Test Case: 216 | Input/Output: [(34 91 37 50) 34]
Test Case: 217 | Input/Output: [(89 30 56 47) 30]
Test Case: 218 | Input/Output: [(13 100 11 10) 10]
Test Case: 219 | Input/Output: [(98 20 98 94) 20]
Test Case: 220 | Input/Output: [(75 52 66 36) 36]
Test Case: 221 | Input/Output: [(88 88 46 41) 41]
Test Case: 222 | Input/Output: [(65 56 76 78) 56]
Test Case: 223 | Input/Output: [(10 93 3 76) 3]
Test Case: 224 | Input/Output: [(22 11 0 74) 0]
Test Case: 225 | Input/Output: [(40 99 38 28) 28]
Test Case: 226 | Input/Output: [(27 71 7 75) 7]
Test Case: 227 | Input/Output: [(0 94 99 95) 0]
Test Case: 228 | Input/Output: [(59 3 71 87) 3]
Test Case: 229 | Input/Output: [(12 35 16 10) 10]
Test Case: 230 | Input/Output: [(7 43 44 81) 7]
Test Case: 231 | Input/Output: [(61 27 35 32) 27]
Test Case: 232 | Input/Output: [(64 61 54 18) 18]
Test Case: 233 | Input/Output: [(19 53 82 7) 7]
Test Case: 234 | Input/Output: [(19 11 35 89) 11]
Test Case: 235 | Input/Output: [(12 16 48 70) 12]
Test Case: 236 | Input/Output: [(61 46 18 26) 18]
Test Case: 237 | Input/Output: [(16 39 99 38) 16]
Test Case: 238 | Input/Output: [(10 64 60 2) 2]
Test Case: 239 | Input/Output: [(33 74 25 48) 25]
Test Case: 240 | Input/Output: [(94 92 16 39) 16]
Test Case: 241 | Input/Output: [(18 78 89 25) 18]
Test Case: 242 | Input/Output: [(26 57 64 64) 26]
Test Case: 243 | Input/Output: [(71 85 98 5) 5]
Test Case: 244 | Input/Output: [(100 64 96 97) 64]
Test Case: 245 | Input/Output: [(44 76 87 55) 44]
Test Case: 246 | Input/Output: [(93 27 95 46) 27]
Test Case: 247 | Input/Output: [(58 16 38 72) 16]
Test Case: 248 | Input/Output: [(40 84 20 29) 20]
Test Case: 249 | Input/Output: [(79 33 100 48) 33]
Test Case: 250 | Input/Output: [(69 15 63 8) 8]
Test Case: 251 | Input/Output: [(68 78 93 72) 68]
Test Case: 252 | Input/Output: [(27 41 3 2) 2]
Test Case: 253 | Input/Output: [(60 81 46 77) 46]
Test Case: 254 | Input/Output: [(85 31 58 58) 31]
Test Case: 255 | Input/Output: [(85 33 17 17) 17]
Test Case: 256 | Input/Output: [(13 43 35 94) 13]
Test Case: 257 | Input/Output: [(56 1 78 28) 1]
Test Case: 258 | Input/Output: [(14 87 76 49) 14]
Test Case: 259 | Input/Output: [(54 86 16 43) 16]
Test Case: 260 | Input/Output: [(66 54 41 34) 34]
Test Case: 261 | Input/Output: [(92 54 51 57) 51]
Test Case: 262 | Input/Output: [(63 0 34 57) 0]
Test Case: 263 | Input/Output: [(59 56 100 68) 56]
Test Case: 264 | Input/Output: [(50 99 22 0) 0]
Test Case: 265 | Input/Output: [(17 23 82 75) 17]
Test Case: 266 | Input/Output: [(83 96 91 55) 55]
Test Case: 267 | Input/Output: [(57 40 75 45) 40]
Test Case: 268 | Input/Output: [(42 4 46 2) 2]
Test Case: 269 | Input/Output: [(65 68 41 95) 41]
Test Case: 270 | Input/Output: [(86 23 59 10) 10]
Test Case: 271 | Input/Output: [(77 92 81 78) 77]
Test Case: 272 | Input/Output: [(52 75 66 19) 19]
Test Case: 273 | Input/Output: [(26 23 12 65) 12]
Test Case: 274 | Input/Output: [(87 4 45 25) 4]
Test Case: 275 | Input/Output: [(16 94 95 72) 16]
Test Case: 276 | Input/Output: [(100 53 1 31) 1]
Test Case: 277 | Input/Output: [(90 8 46 23) 8]
Test Case: 278 | Input/Output: [(100 48 90 46) 46]
Test Case: 279 | Input/Output: [(25 57 97 14) 14]
Test Case: 280 | Input/Output: [(94 6 7 17) 6]
Test Case: 281 | Input/Output: [(52 89 46 22) 22]
Test Case: 282 | Input/Output: [(95 7 17 43) 7]
Test Case: 283 | Input/Output: [(26 96 22 77) 22]
Test Case: 284 | Input/Output: [(59 96 42 77) 42]
Test Case: 285 | Input/Output: [(30 92 29 41) 29]
Test Case: 286 | Input/Output: [(48 61 74 76) 48]
Test Case: 287 | Input/Output: [(11 84 57 72) 11]
Test Case: 288 | Input/Output: [(60 4 1 0) 0]
Test Case: 289 | Input/Output: [(22 31 42 54) 22]
Test Case: 290 | Input/Output: [(95 8 67 8) 8]
Test Case: 291 | Input/Output: [(74 69 89 78) 69]
Test Case: 292 | Input/Output: [(34 48 9 84) 9]
Test Case: 293 | Input/Output: [(47 90 85 54) 47]
Test Case: 294 | Input/Output: [(23 48 50 56) 23]
Test Case: 295 | Input/Output: [(45 30 71 100) 30]
Test Case: 296 | Input/Output: [(0 86 29 86) 0]
Test Case: 297 | Input/Output: [(30 61 79 29) 29]
Test Case: 298 | Input/Output: [(96 14 50 14) 14]
Test Case: 299 | Input/Output: [(47 17 99 60) 17]
Test Case: 300 | Input/Output: [(47 23 75 98) 23]
Test Case: 301 | Input/Output: [(45 25 42 91) 25]
Test Case: 302 | Input/Output: [(36 48 4 70) 4]
Test Case: 303 | Input/Output: [(18 13 43 19) 13]
Test Case: 304 | Input/Output: [(40 85 19 74) 19]
Test Case: 305 | Input/Output: [(31 80 100 81) 31]
Test Case: 306 | Input/Output: [(93 78 77 76) 76]
Test Case: 307 | Input/Output: [(79 68 16 38) 16]
Test Case: 308 | Input/Output: [(98 66 21 78) 21]
Test Case: 309 | Input/Output: [(64 40 69 28) 28]
Test Case: 310 | Input/Output: [(36 38 25 2) 2]
Test Case: 311 | Input/Output: [(73 62 8 19) 8]
Test Case: 312 | Input/Output: [(45 16 59 35) 16]
Test Case: 313 | Input/Output: [(25 66 51 42) 25]
Test Case: 314 | Input/Output: [(25 94 15 11) 11]
Test Case: 315 | Input/Output: [(70 3 31 69) 3]
Test Case: 316 | Input/Output: [(44 90 36 50) 36]
Test Case: 317 | Input/Output: [(13 11 53 89) 11]
Test Case: 318 | Input/Output: [(35 22 2 98) 2]
Test Case: 319 | Input/Output: [(39 9 93 83) 9]
Test Case: 320 | Input/Output: [(24 52 61 59) 24]
Test Case: 321 | Input/Output: [(12 88 84 19) 12]
Test Case: 322 | Input/Output: [(74 77 65 74) 65]
Test Case: 323 | Input/Output: [(29 61 76 42) 29]
Test Case: 324 | Input/Output: [(0 100 39 53) 0]
Test Case: 325 | Input/Output: [(42 20 44 61) 20]
Test Case: 326 | Input/Output: [(68 6 10 98) 6]
Test Case: 327 | Input/Output: [(80 84 66 50) 50]
Test Case: 328 | Input/Output: [(100 12 45 21) 12]
Test Case: 329 | Input/Output: [(98 41 87 57) 41]
Test Case: 330 | Input/Output: [(36 80 28 61) 28]
Test Case: 331 | Input/Output: [(86 64 69 36) 36]
Test Case: 332 | Input/Output: [(0 31 47 35) 0]
Test Case: 333 | Input/Output: [(56 96 12 69) 12]
Test Case: 334 | Input/Output: [(6 94 0 40) 0]
Test Case: 335 | Input/Output: [(11 22 75 18) 11]
Test Case: 336 | Input/Output: [(34 12 78 52) 12]
Test Case: 337 | Input/Output: [(22 29 81 58) 22]
Test Case: 338 | Input/Output: [(10 85 79 40) 10]
Test Case: 339 | Input/Output: [(27 47 84 71) 27]
Test Case: 340 | Input/Output: [(77 16 32 11) 11]
Test Case: 341 | Input/Output: [(99 80 59 66) 59]
Test Case: 342 | Input/Output: [(5 19 72 54) 5]
Test Case: 343 | Input/Output: [(26 17 27 61) 17]
Test Case: 344 | Input/Output: [(11 19 33 36) 11]
Test Case: 345 | Input/Output: [(70 64 75 68) 64]
Test Case: 346 | Input/Output: [(78 38 12 98) 12]
Test Case: 347 | Input/Output: [(53 7 42 23) 7]
Test Case: 348 | Input/Output: [(97 85 70 74) 70]
Test Case: 349 | Input/Output: [(67 20 44 0) 0]
Test Case: 350 | Input/Output: [(67 15 57 81) 15]
Test Case: 351 | Input/Output: [(48 38 54 2) 2]
Test Case: 352 | Input/Output: [(40 17 11 32) 11]
Test Case: 353 | Input/Output: [(27 16 18 82) 16]
Test Case: 354 | Input/Output: [(99 57 74 11) 11]
Test Case: 355 | Input/Output: [(65 14 67 78) 14]
Test Case: 356 | Input/Output: [(5 24 3 57) 3]
Test Case: 357 | Input/Output: [(81 65 8 69) 8]
Test Case: 358 | Input/Output: [(38 42 37 66) 37]
Test Case: 359 | Input/Output: [(80 28 41 61) 28]
Test Case: 360 | Input/Output: [(26 67 74 33) 26]
Test Case: 361 | Input/Output: [(44 90 66 99) 44]
Test Case: 362 | Input/Output: [(31 40 89 60) 31]
Test Case: 363 | Input/Output: [(36 28 92 7) 7]
Test Case: 364 | Input/Output: [(10 52 0 69) 0]
Test Case: 365 | Input/Output: [(47 43 17 95) 17]
Test Case: 366 | Input/Output: [(75 18 90 28) 18]
Test Case: 367 | Input/Output: [(6 1 11 94) 1]
Test Case: 368 | Input/Output: [(86 23 77 11) 11]
Test Case: 369 | Input/Output: [(64 48 85 5) 5]
Test Case: 370 | Input/Output: [(59 90 28 3) 3]
Test Case: 371 | Input/Output: [(20 58 21 51) 20]
Test Case: 372 | Input/Output: [(92 28 58 64) 28]
Test Case: 373 | Input/Output: [(15 21 94 32) 15]
Test Case: 374 | Input/Output: [(26 74 10 94) 10]
Test Case: 375 | Input/Output: [(61 23 71 86) 23]
Test Case: 376 | Input/Output: [(6 14 73 37) 6]
Test Case: 377 | Input/Output: [(25 43 92 63) 25]
Test Case: 378 | Input/Output: [(4 26 53 2) 2]
Test Case: 379 | Input/Output: [(4 39 13 88) 4]
Test Case: 380 | Input/Output: [(77 29 100 38) 29]
Test Case: 381 | Input/Output: [(19 81 41 78) 19]
Test Case: 382 | Input/Output: [(36 82 58 58) 36]
Test Case: 383 | Input/Output: [(21 86 66 6) 6]
Test Case: 384 | Input/Output: [(83 77 56 84) 56]
Test Case: 385 | Input/Output: [(67 47 53 4) 4]
Test Case: 386 | Input/Output: [(0 34 67 81) 0]
Test Case: 387 | Input/Output: [(89 74 63 98) 63]
Test Case: 388 | Input/Output: [(27 88 94 95) 27]
Test Case: 389 | Input/Output: [(68 79 20 16) 16]
Test Case: 390 | Input/Output: [(1 50 10 88) 1]
Test Case: 391 | Input/Output: [(39 85 49 39) 39]
Test Case: 392 | Input/Output: [(42 7 57 13) 7]
Test Case: 393 | Input/Output: [(2 98 50 94) 2]
Test Case: 394 | Input/Output: [(12 60 71 59) 12]
Test Case: 395 | Input/Output: [(41 25 77 68) 25]
Test Case: 396 | Input/Output: [(27 71 71 69) 27]
Test Case: 397 | Input/Output: [(83 45 63 6) 6]
Test Case: 398 | Input/Output: [(30 16 50 82) 16]
Test Case: 399 | Input/Output: [(52 38 80 14) 14]
Test Case: 400 | Input/Output: [(26 81 -14 74) -14]
Test Case: 401 | Input/Output: [(-5 -6 100 23) -6]
Test Case: 402 | Input/Output: [(1 -23 -97 -17) -97]
Test Case: 403 | Input/Output: [(1 -12 99 54) -12]
Test Case: 404 | Input/Output: [(33 48 41 -48) -48]
Test Case: 405 | Input/Output: [(98 -37 -63 54) -63]
Test Case: 406 | Input/Output: [(-5 41 -87 94) -87]
Test Case: 407 | Input/Output: [(-96 -86 69 67) -96]
Test Case: 408 | Input/Output: [(-6 -17 -47 -98) -98]
Test Case: 409 | Input/Output: [(-62 -5 -6 16) -62]
Test Case: 410 | Input/Output: [(58 -91 -4 -50) -91]
Test Case: 411 | Input/Output: [(-93 -67 54 -8) -93]
Test Case: 412 | Input/Output: [(-35 -92 31 -57) -92]
Test Case: 413 | Input/Output: [(-70 -6 60 97) -70]
Test Case: 414 | Input/Output: [(-78 -88 31 98) -88]
Test Case: 415 | Input/Output: [(-85 -37 33 -16) -85]
Test Case: 416 | Input/Output: [(95 -16 24 81) -16]
Test Case: 417 | Input/Output: [(36 64 -29 -57) -57]
Test Case: 418 | Input/Output: [(42 -31 39 -80) -80]
Test Case: 419 | Input/Output: [(-71 -49 26 -28) -71]
Test Case: 420 | Input/Output: [(-21 83 -22 -90) -90]
Test Case: 421 | Input/Output: [(83 31 14 -95) -95]
Test Case: 422 | Input/Output: [(63 34 77 -11) -11]
Test Case: 423 | Input/Output: [(-84 -46 -57 -35) -84]
Test Case: 424 | Input/Output: [(-28 -99 23 99) -99]
Test Case: 425 | Input/Output: [(-60 -4 88 47) -60]
Test Case: 426 | Input/Output: [(53 86 14 -75) -75]
Test Case: 427 | Input/Output: [(99 -31 21 98) -31]
Test Case: 428 | Input/Output: [(-85 94 96 26) -85]
Test Case: 429 | Input/Output: [(46 -2 -99 80) -99]
Test Case: 430 | Input/Output: [(5 -76 57 35) -76]
Test Case: 431 | Input/Output: [(-70 -60 49 -71) -71]
Test Case: 432 | Input/Output: [(-15 -5 -87 -88) -88]
Test Case: 433 | Input/Output: [(-2 -41 9 -71) -71]
Test Case: 434 | Input/Output: [(-39 -43 -63 -67) -67]
Test Case: 435 | Input/Output: [(46 42 -71 17) -71]
Test Case: 436 | Input/Output: [(24 -48 99 -29) -48]
Test Case: 437 | Input/Output: [(31 -51 -30 50) -51]
Test Case: 438 | Input/Output: [(4 73 -96 -45) -96]
Test Case: 439 | Input/Output: [(30 65 7 74) 7]
Test Case: 440 | Input/Output: [(-52 37 -83 43) -83]
Test Case: 441 | Input/Output: [(22 -83 96 -18) -83]
Test Case: 442 | Input/Output: [(-57 50 -68 -70) -70]
Test Case: 443 | Input/Output: [(-21 -68 -71 -19) -71]
Test Case: 444 | Input/Output: [(-59 -92 66 -50) -92]
Test Case: 445 | Input/Output: [(100 -56 -94 27) -94]
Test Case: 446 | Input/Output: [(-47 52 -84 53) -84]
Test Case: 447 | Input/Output: [(-60 83 -7 -24) -60]
Test Case: 448 | Input/Output: [(9 12 -22 49) -22]
Test Case: 449 | Input/Output: [(37 13 -91 21) -91]
Test Case: 450 | Input/Output: [(-74 -46 -32 5) -74]
Test Case: 451 | Input/Output: [(31 -78 -68 -35) -78]
Test Case: 452 | Input/Output: [(-18 -47 -73 -57) -73]
Test Case: 453 | Input/Output: [(58 -54 -39 38) -54]
Test Case: 454 | Input/Output: [(1 49 41 39) 1]
Test Case: 455 | Input/Output: [(29 -67 -29 -7) -67]
Test Case: 456 | Input/Output: [(-44 43 63 -36) -44]
Test Case: 457 | Input/Output: [(-22 -87 -89 -29) -89]
Test Case: 458 | Input/Output: [(-72 9 63 -1) -72]
Test Case: 459 | Input/Output: [(-72 -22 87 -57) -72]
Test Case: 460 | Input/Output: [(-41 -43 -74 97) -74]
Test Case: 461 | Input/Output: [(49 90 84 9) 9]
Test Case: 462 | Input/Output: [(17 -17 -82 100) -82]
Test Case: 463 | Input/Output: [(-47 25 -15 57) -47]
Test Case: 464 | Input/Output: [(88 96 33 28) 28]
Test Case: 465 | Input/Output: [(38 -82 16 26) -82]
Test Case: 466 | Input/Output: [(94 29 -35 65) -35]
Test Case: 467 | Input/Output: [(-67 -86 62 49) -86]
Test Case: 468 | Input/Output: [(46 -65 34 -46) -65]
Test Case: 469 | Input/Output: [(-77 61 -76 95) -77]
Test Case: 470 | Input/Output: [(49 -99 51 59) -99]
Test Case: 471 | Input/Output: [(53 15 55 45) 15]
Test Case: 472 | Input/Output: [(-87 52 85 -33) -87]
Test Case: 473 | Input/Output: [(-6 -68 -94 0) -94]
Test Case: 474 | Input/Output: [(-10 17 -80 0) -80]
Test Case: 475 | Input/Output: [(-62 19 59 81) -62]
Test Case: 476 | Input/Output: [(70 62 84 5) 5]
Test Case: 477 | Input/Output: [(-79 26 -73 49) -79]
Test Case: 478 | Input/Output: [(14 -3 -82 34) -82]
Test Case: 479 | Input/Output: [(63 94 50 -57) -57]
Test Case: 480 | Input/Output: [(60 87 -85 -37) -85]
Test Case: 481 | Input/Output: [(15 -45 30 77) -45]
Test Case: 482 | Input/Output: [(-51 -47 69 51) -51]
Test Case: 483 | Input/Output: [(65 57 77 73) 57]
Test Case: 484 | Input/Output: [(63 -85 -70 64) -85]
Test Case: 485 | Input/Output: [(98 17 -7 -69) -69]
Test Case: 486 | Input/Output: [(-74 86 11 -12) -74]
Test Case: 487 | Input/Output: [(14 14 55 55) 14]
Test Case: 488 | Input/Output: [(-100 -93 6 89) -100]
Test Case: 489 | Input/Output: [(18 91 53 -35) -35]
Test Case: 490 | Input/Output: [(-20 64 22 80) -20]
Test Case: 491 | Input/Output: [(-99 -80 -47 -53) -99]
Test Case: 492 | Input/Output: [(78 84 -38 89) -38]
Test Case: 493 | Input/Output: [(-97 53 -68 43) -97]
Test Case: 494 | Input/Output: [(-84 -70 -59 93) -84]
Test Case: 495 | Input/Output: [(16 38 1 46) 1]
Test Case: 496 | Input/Output: [(19 -84 11 -11) -84]
Test Case: 497 | Input/Output: [(30 79 -3 1) -3]
Test Case: 498 | Input/Output: [(-55 -50 86 -73) -73]
Test Case: 499 | Input/Output: [(-40 83 10 -34) -40]
Test Case: 500 | Input/Output: [(93 69 4 -48) -48]
Test Case: 501 | Input/Output: [(34 -21 68 66) -21]
Test Case: 502 | Input/Output: [(-91 -85 -33 8) -91]
Test Case: 503 | Input/Output: [(75 89 -77 81) -77]
Test Case: 504 | Input/Output: [(47 -57 -90 74) -90]
Test Case: 505 | Input/Output: [(-13 -91 45 -30) -91]
Test Case: 506 | Input/Output: [(63 21 47 -8) -8]
Test Case: 507 | Input/Output: [(51 -79 52 -97) -97]
Test Case: 508 | Input/Output: [(-73 -27 23 46) -73]
Test Case: 509 | Input/Output: [(86 -29 48 -19) -29]
Test Case: 510 | Input/Output: [(40 54 -58 -41) -58]
Test Case: 511 | Input/Output: [(-9 -21 12 -90) -90]
Test Case: 512 | Input/Output: [(-23 -22 80 -30) -30]
Test Case: 513 | Input/Output: [(-76 -34 0 57) -76]
Test Case: 514 | Input/Output: [(31 -100 38 31) -100]
Test Case: 515 | Input/Output: [(-69 43 -50 -97) -97]
Test Case: 516 | Input/Output: [(-29 -64 36 87) -64]
Test Case: 517 | Input/Output: [(9 86 -53 -38) -53]
Test Case: 518 | Input/Output: [(59 2 -41 55) -41]
Test Case: 519 | Input/Output: [(-17 41 -86 -8) -86]
Test Case: 520 | Input/Output: [(99 -95 59 -26) -95]
Test Case: 521 | Input/Output: [(-40 59 -97 77) -97]
Test Case: 522 | Input/Output: [(-89 -34 10 91) -89]
Test Case: 523 | Input/Output: [(-9 -42 -55 -79) -79]
Test Case: 524 | Input/Output: [(31 85 54 -82) -82]
Test Case: 525 | Input/Output: [(-72 89 -26 -87) -87]
Test Case: 526 | Input/Output: [(22 12 77 20) 12]
Test Case: 527 | Input/Output: [(18 2 -2 -43) -43]
Test Case: 528 | Input/Output: [(61 1 87 -73) -73]
Test Case: 529 | Input/Output: [(-92 26 -15 -76) -92]
Test Case: 530 | Input/Output: [(20 -71 -99 -83) -99]
Test Case: 531 | Input/Output: [(-42 -95 24 82) -95]
Test Case: 532 | Input/Output: [(77 -4 -32 -38) -38]
Test Case: 533 | Input/Output: [(-3 98 8 59) -3]
Test Case: 534 | Input/Output: [(99 73 -88 -2) -88]
Test Case: 535 | Input/Output: [(88 -23 -28 8) -28]
Test Case: 536 | Input/Output: [(-19 -40 17 43) -40]
Test Case: 537 | Input/Output: [(45 18 -89 -6) -89]
Test Case: 538 | Input/Output: [(-32 60 -91 -57) -91]
Test Case: 539 | Input/Output: [(-47 -95 19 -26) -95]
Test Case: 540 | Input/Output: [(-14 -61 -38 88) -61]
Test Case: 541 | Input/Output: [(-47 76 89 80) -47]
Test Case: 542 | Input/Output: [(-35 44 -86 -24) -86]
Test Case: 543 | Input/Output: [(98 -45 -27 -40) -45]
Test Case: 544 | Input/Output: [(63 89 -25 27) -25]
Test Case: 545 | Input/Output: [(-50 95 -62 -61) -62]
Test Case: 546 | Input/Output: [(-5 -89 -11 91) -89]
Test Case: 547 | Input/Output: [(-85 -50 100 -5) -85]
Test Case: 548 | Input/Output: [(16 -49 -64 14) -64]
Test Case: 549 | Input/Output: [(-81 84 -69 -43) -81]
Test Case: 550 | Input/Output: [(48 84 44 -59) -59]
Test Case: 551 | Input/Output: [(-31 40 52 58) -31]
Test Case: 552 | Input/Output: [(53 14 32 98) 14]
Test Case: 553 | Input/Output: [(-6 -49 67 59) -49]
Test Case: 554 | Input/Output: [(-50 -18 63 -29) -50]
Test Case: 555 | Input/Output: [(27 60 -38 -63) -63]
Test Case: 556 | Input/Output: [(11 94 -76 -25) -76]
Test Case: 557 | Input/Output: [(13 1 -37 52) -37]
Test Case: 558 | Input/Output: [(82 -11 -82 -11) -82]
Test Case: 559 | Input/Output: [(-72 -69 14 2) -72]
Test Case: 560 | Input/Output: [(38 1 -4 19) -4]
Test Case: 561 | Input/Output: [(98 -63 -90 80) -90]
Test Case: 562 | Input/Output: [(-54 -72 94 -62) -72]
Test Case: 563 | Input/Output: [(73 56 90 64) 56]
Test Case: 564 | Input/Output: [(35 99 -88 62) -88]
Test Case: 565 | Input/Output: [(-7 10 -92 86) -92]
Test Case: 566 | Input/Output: [(96 -23 76 78) -23]
Test Case: 567 | Input/Output: [(-87 -86 43 -80) -87]
Test Case: 568 | Input/Output: [(62 -6 -96 -15) -96]
Test Case: 569 | Input/Output: [(-20 -21 46 -45) -45]
Test Case: 570 | Input/Output: [(84 -88 47 -7) -88]
Test Case: 571 | Input/Output: [(87 -61 -51 39) -61]
Test Case: 572 | Input/Output: [(5 -51 -77 -88) -88]
Test Case: 573 | Input/Output: [(-62 16 27 -51) -62]
Test Case: 574 | Input/Output: [(-41 8 57 -59) -59]
Test Case: 575 | Input/Output: [(38 37 -24 21) -24]
Test Case: 576 | Input/Output: [(-97 75 -59 -93) -97]
Test Case: 577 | Input/Output: [(98 26 49 17) 17]
Test Case: 578 | Input/Output: [(-96 72 42 -36) -96]
Test Case: 579 | Input/Output: [(-53 -15 -92 -32) -92]
Test Case: 580 | Input/Output: [(12 -90 -82 94) -90]
Test Case: 581 | Input/Output: [(65 -8 48 56) -8]
Test Case: 582 | Input/Output: [(33 54 78 -35) -35]
Test Case: 583 | Input/Output: [(31 32 66 -12) -12]
Test Case: 584 | Input/Output: [(51 39 98 -14) -14]
Test Case: 585 | Input/Output: [(-67 12 47 -75) -75]
Test Case: 586 | Input/Output: [(-57 -81 54 -20) -81]
Test Case: 587 | Input/Output: [(99 -8 65 47) -8]
Test Case: 588 | Input/Output: [(50 -18 88 -48) -48]
Test Case: 589 | Input/Output: [(-17 85 -28 -41) -41]
Test Case: 590 | Input/Output: [(-71 67 -71 -1) -71]
Test Case: 591 | Input/Output: [(-37 17 16 48) -37]
Test Case: 592 | Input/Output: [(-75 32 32 74) -75]
Test Case: 593 | Input/Output: [(83 -27 -30 -40) -40]
Test Case: 594 | Input/Output: [(-91 -67 36 15) -91]
Test Case: 595 | Input/Output: [(-63 -21 33 -89) -89]
Test Case: 596 | Input/Output: [(-99 -45 -24 -4) -99]
Test Case: 597 | Input/Output: [(25 -90 -1 96) -90]
Test Case: 598 | Input/Output: [(48 -26 35 94) -26]
Test Case: 599 | Input/Output: [(69 66 -97 7) -97]
Test Case: 600 | Input/Output: [(-95 26 -72 -51) -95]
Test Case: 601 | Input/Output: [(-78 -13 75 65) -78]
Test Case: 602 | Input/Output: [(-99 -36 -8 -100) -100]
Test Case: 603 | Input/Output: [(56 69 -79 9) -79]
Test Case: 604 | Input/Output: [(41 -6 18 82) -6]
Test Case: 605 | Input/Output: [(42 -60 -52 -55) -60]
Test Case: 606 | Input/Output: [(-61 -95 -99 50) -99]
Test Case: 607 | Input/Output: [(22 -58 73 -31) -58]
Test Case: 608 | Input/Output: [(12 -75 -93 69) -93]
Test Case: 609 | Input/Output: [(-93 71 -68 -43) -93]
Test Case: 610 | Input/Output: [(-19 77 -81 60) -81]
Test Case: 611 | Input/Output: [(21 55 50 64) 21]
Test Case: 612 | Input/Output: [(-16 -61 -90 -98) -98]
Test Case: 613 | Input/Output: [(34 -74 -40 -62) -74]
Test Case: 614 | Input/Output: [(-32 -20 86 6) -32]
Test Case: 615 | Input/Output: [(-30 75 57 51) -30]
Test Case: 616 | Input/Output: [(57 40 8 26) 8]
Test Case: 617 | Input/Output: [(-21 49 39 97) -21]
Test Case: 618 | Input/Output: [(67 -33 37 -22) -33]
Test Case: 619 | Input/Output: [(-65 56 63 86) -65]
Test Case: 620 | Input/Output: [(-44 17 69 -87) -87]
Test Case: 621 | Input/Output: [(-14 -32 40 53) -32]
Test Case: 622 | Input/Output: [(73 23 -82 83) -82]
Test Case: 623 | Input/Output: [(93 -1 -46 -39) -46]
Test Case: 624 | Input/Output: [(-75 93 86 -30) -75]
Test Case: 625 | Input/Output: [(-11 40 54 38) -11]
Test Case: 626 | Input/Output: [(60 79 -14 69) -14]
Test Case: 627 | Input/Output: [(15 -44 -50 -26) -50]
Test Case: 628 | Input/Output: [(-32 78 2 -23) -32]
Test Case: 629 | Input/Output: [(-93 94 -61 64) -93]
Test Case: 630 | Input/Output: [(-47 61 15 93) -47]
Test Case: 631 | Input/Output: [(-75 -37 72 67) -75]
Test Case: 632 | Input/Output: [(17 -91 53 -22) -91]
Test Case: 633 | Input/Output: [(-38 87 51 3) -38]
Test Case: 634 | Input/Output: [(-89 -73 0 30) -89]
Test Case: 635 | Input/Output: [(-72 59 6 -18) -72]
Test Case: 636 | Input/Output: [(33 94 -31 25) -31]
Test Case: 637 | Input/Output: [(85 -64 -69 35) -69]
Test Case: 638 | Input/Output: [(5 -92 33 -89) -92]
Test Case: 639 | Input/Output: [(54 -14 -66 -30) -66]
Test Case: 640 | Input/Output: [(-30 -56 -26 49) -56]
Test Case: 641 | Input/Output: [(31 82 1 21) 1]
Test Case: 642 | Input/Output: [(-35 -56 91 -38) -56]
Test Case: 643 | Input/Output: [(-58 26 -36 70) -58]
Test Case: 644 | Input/Output: [(1 -18 -47 -90) -90]
Test Case: 645 | Input/Output: [(-89 92 45 -60) -89]
Test Case: 646 | Input/Output: [(-91 16 -32 22) -91]
Test Case: 647 | Input/Output: [(-99 90 -84 11) -99]
Test Case: 648 | Input/Output: [(-53 76 94 23) -53]
Test Case: 649 | Input/Output: [(-2 -20 -52 71) -52]
Test Case: 650 | Input/Output: [(62 -38 32 -69) -69]
Test Case: 651 | Input/Output: [(57 50 83 13) 13]
Test Case: 652 | Input/Output: [(91 -73 -82 91) -82]
Test Case: 653 | Input/Output: [(-67 29 79 77) -67]
Test Case: 654 | Input/Output: [(100 49 71 -23) -23]
Test Case: 655 | Input/Output: [(-20 -56 -24 26) -56]
Test Case: 656 | Input/Output: [(-18 -95 -39 -43) -95]
Test Case: 657 | Input/Output: [(-71 -2 -18 89) -71]
Test Case: 658 | Input/Output: [(-3 86 59 -63) -63]
Test Case: 659 | Input/Output: [(60 -80 67 82) -80]
Test Case: 660 | Input/Output: [(-61 -18 67 36) -61]
Test Case: 661 | Input/Output: [(-44 -65 -79 55) -79]
Test Case: 662 | Input/Output: [(93 99 -31 73) -31]
Test Case: 663 | Input/Output: [(-81 48 71 11) -81]
Test Case: 664 | Input/Output: [(16 6 100 -86) -86]
Test Case: 665 | Input/Output: [(-50 -65 13 -31) -65]
Test Case: 666 | Input/Output: [(-47 -28 90 97) -47]
Test Case: 667 | Input/Output: [(-33 -56 57 40) -56]
Test Case: 668 | Input/Output: [(4 -23 -13 4) -23]
Test Case: 669 | Input/Output: [(-37 -79 -40 2) -79]
Test Case: 670 | Input/Output: [(3 8 51 -12) -12]
Test Case: 671 | Input/Output: [(-81 21 14 -52) -81]
Test Case: 672 | Input/Output: [(9 94 83 -69) -69]
Test Case: 673 | Input/Output: [(-79 8 33 0) -79]
Test Case: 674 | Input/Output: [(16 -76 -15 -52) -76]
Test Case: 675 | Input/Output: [(57 -35 96 45) -35]
Test Case: 676 | Input/Output: [(70 -10 10 -18) -18]
Test Case: 677 | Input/Output: [(65 -16 -51 -45) -51]
Test Case: 678 | Input/Output: [(-75 -86 -73 97) -86]
Test Case: 679 | Input/Output: [(-38 -12 15 36) -38]
Test Case: 680 | Input/Output: [(95 43 -19 63) -19]
Test Case: 681 | Input/Output: [(7 -2 -52 -30) -52]
Test Case: 682 | Input/Output: [(33 98 -85 -60) -85]
Test Case: 683 | Input/Output: [(-29 -15 -26 36) -29]
Test Case: 684 | Input/Output: [(-40 -65 -77 85) -77]
Test Case: 685 | Input/Output: [(92 19 43 19) 19]
Test Case: 686 | Input/Output: [(-55 45 89 22) -55]
Test Case: 687 | Input/Output: [(58 38 -85 69) -85]
Test Case: 688 | Input/Output: [(-66 32 74 -69) -69]
Test Case: 689 | Input/Output: [(81 14 -36 11) -36]
Test Case: 690 | Input/Output: [(49 21 8 -55) -55]
Test Case: 691 | Input/Output: [(14 -64 38 13) -64]
Test Case: 692 | Input/Output: [(83 98 -69 23) -69]
Test Case: 693 | Input/Output: [(4 28 89 -46) -46]
Test Case: 694 | Input/Output: [(-93 2 98 -15) -93]
Test Case: 695 | Input/Output: [(88 -1 21 -71) -71]
Test Case: 696 | Input/Output: [(57 98 -97 16) -97]
Test Case: 697 | Input/Output: [(15 -85 52 -65) -85]
Test Case: 698 | Input/Output: [(69 -15 -24 58) -24]
Test Case: 699 | Input/Output: [(15 100 1 -7) -7]
Test Case: 700 | Input/Output: [(75 41 -28 -5) -28]
Test Case: 701 | Input/Output: [(-74 -37 -5 -97) -97]
Test Case: 702 | Input/Output: [(1 -44 -10 77) -44]
Test Case: 703 | Input/Output: [(-75 -79 14 -26) -79]
Test Case: 704 | Input/Output: [(-36 -21 33 -17) -36]
Test Case: 705 | Input/Output: [(72 -26 70 51) -26]
Test Case: 706 | Input/Output: [(-23 3 -52 -90) -90]
Test Case: 707 | Input/Output: [(-72 27 28 -97) -97]
Test Case: 708 | Input/Output: [(-88 -14 55 33) -88]
Test Case: 709 | Input/Output: [(-63 -37 -43 -63) -63]
Test Case: 710 | Input/Output: [(73 -80 10 61) -80]
Test Case: 711 | Input/Output: [(-97 -83 -43 94) -97]
Test Case: 712 | Input/Output: [(63 -1 28 -71) -71]
Test Case: 713 | Input/Output: [(-46 99 -32 3) -46]
Test Case: 714 | Input/Output: [(7 58 -23 88) -23]
Test Case: 715 | Input/Output: [(-55 55 68 30) -55]
Test Case: 716 | Input/Output: [(-84 -50 -27 45) -84]
Test Case: 717 | Input/Output: [(72 -95 -78 37) -95]
Test Case: 718 | Input/Output: [(-16 -95 -96 13) -96]
Test Case: 719 | Input/Output: [(-66 15 -18 18) -66]
Test Case: 720 | Input/Output: [(57 -6 -9 -40) -40]
Test Case: 721 | Input/Output: [(0 49 -77 50) -77]
Test Case: 722 | Input/Output: [(4 25 100 -76) -76]
Test Case: 723 | Input/Output: [(-25 33 63 -32) -32]
Test Case: 724 | Input/Output: [(85 17 -14 -4) -14]
Test Case: 725 | Input/Output: [(2 -64 92 -58) -64]
Test Case: 726 | Input/Output: [(-14 -78 86 2) -78]
Test Case: 727 | Input/Output: [(38 44 -65 16) -65]
Test Case: 728 | Input/Output: [(17 -13 62 -26) -26]
Test Case: 729 | Input/Output: [(-92 -57 -9 -81) -92]
Test Case: 730 | Input/Output: [(-45 -27 21 72) -45]
Test Case: 731 | Input/Output: [(-60 -96 75 100) -96]
Test Case: 732 | Input/Output: [(44 -74 94 -79) -79]
Test Case: 733 | Input/Output: [(62 64 75 25) 25]
Test Case: 734 | Input/Output: [(-97 -83 -85 -27) -97]
Test Case: 735 | Input/Output: [(-64 38 69 34) -64]
Test Case: 736 | Input/Output: [(-24 -61 -33 -20) -61]
Test Case: 737 | Input/Output: [(-40 -83 -9 -24) -83]
Test Case: 738 | Input/Output: [(-87 1 87 -90) -90]
Test Case: 739 | Input/Output: [(-2 53 50 58) -2]
Test Case: 740 | Input/Output: [(-81 -98 78 -23) -98]
Test Case: 741 | Input/Output: [(44 -11 7 -26) -26]
Test Case: 742 | Input/Output: [(-95 38 54 10) -95]
Test Case: 743 | Input/Output: [(-84 17 55 -63) -84]
Test Case: 744 | Input/Output: [(-6 94 -36 88) -36]
Test Case: 745 | Input/Output: [(-78 -65 64 8) -78]
Test Case: 746 | Input/Output: [(-95 83 35 -45) -95]
Test Case: 747 | Input/Output: [(-83 -17 13 -97) -97]
Test Case: 748 | Input/Output: [(-47 27 36 94) -47]
Test Case: 749 | Input/Output: [(73 -37 -86 -83) -86]
Test Case: 750 | Input/Output: [(-69 51 -53 -90) -90]
Test Case: 751 | Input/Output: [(-96 76 1 67) -96]
Test Case: 752 | Input/Output: [(-36 51 51 -41) -41]
Test Case: 753 | Input/Output: [(66 84 -48 -43) -48]
Test Case: 754 | Input/Output: [(-74 -61 96 17) -74]
Test Case: 755 | Input/Output: [(-50 9 27 42) -50]
Test Case: 756 | Input/Output: [(-23 69 -80 55) -80]
Test Case: 757 | Input/Output: [(5 -75 64 -12) -75]
Test Case: 758 | Input/Output: [(74 -71 -95 72) -95]
Test Case: 759 | Input/Output: [(27 41 71 -70) -70]
Test Case: 760 | Input/Output: [(-12 -84 -69 -24) -84]
Test Case: 761 | Input/Output: [(84 -13 -66 41) -66]
Test Case: 762 | Input/Output: [(-26 57 48 78) -26]
Test Case: 763 | Input/Output: [(-39 -73 51 51) -73]
Test Case: 764 | Input/Output: [(-69 -4 93 100) -69]
Test Case: 765 | Input/Output: [(-35 71 -98 -49) -98]
Test Case: 766 | Input/Output: [(-23 95 69 78) -23]
Test Case: 767 | Input/Output: [(23 -33 -61 19) -61]
Test Case: 768 | Input/Output: [(76 -73 -56 71) -73]
Test Case: 769 | Input/Output: [(-64 -73 -7 43) -73]
Test Case: 770 | Input/Output: [(46 79 14 -71) -71]
Test Case: 771 | Input/Output: [(37 -43 -10 69) -43]
Test Case: 772 | Input/Output: [(-48 61 31 -64) -64]
Test Case: 773 | Input/Output: [(94 88 -99 11) -99]
Test Case: 774 | Input/Output: [(-68 -19 -94 -14) -94]
Test Case: 775 | Input/Output: [(-81 -46 90 -5) -81]
Test Case: 776 | Input/Output: [(52 64 -64 98) -64]
Test Case: 777 | Input/Output: [(53 -12 79 50) -12]
Test Case: 778 | Input/Output: [(80 -7 5 -7) -7]
Test Case: 779 | Input/Output: [(47 98 10 -64) -64]
Test Case: 780 | Input/Output: [(65 -31 71 -8) -31]
Test Case: 781 | Input/Output: [(57 19 -73 38) -73]
Test Case: 782 | Input/Output: [(-100 -92 42 66) -100]
Test Case: 783 | Input/Output: [(-61 -25 -70 -35) -70]
Test Case: 784 | Input/Output: [(-33 82 60 -29) -33]
Test Case: 785 | Input/Output: [(38 -49 8 59) -49]
Test Case: 786 | Input/Output: [(52 -8 -76 -44) -76]
Test Case: 787 | Input/Output: [(-62 48 100 -1) -62]
Test Case: 788 | Input/Output: [(-63 -65 84 -24) -65]
Test Case: 789 | Input/Output: [(7 -22 62 79) -22]
Test Case: 790 | Input/Output: [(40 -46 -26 59) -46]
Test Case: 791 | Input/Output: [(41 -5 95 -78) -78]
Test Case: 792 | Input/Output: [(89 61 -53 9) -53]
Test Case: 793 | Input/Output: [(-91 50 -64 67) -91]
Test Case: 794 | Input/Output: [(66 40 61 44) 40]
Test Case: 795 | Input/Output: [(77 44 -57 -43) -57]
Test Case: 796 | Input/Output: [(-89 14 17 66) -89]
Test Case: 797 | Input/Output: [(-24 -39 -71 -59) -71]
Test Case: 798 | Input/Output: [(20 -42 29 55) -42]
Test Case: 799 | Input/Output: [(5 79 -47 -10) -47]
Test Case: 800 | Input/Output: [(-36 -26 29 -93) -93]
Test Case: 801 | Input/Output: [(-9 7 45 8) -9]
Test Case: 802 | Input/Output: [(-20 -29 44 64) -29]
Test Case: 803 | Input/Output: [(35 33 -80 -31) -80]
Test Case: 804 | Input/Output: [(44 -86 -1 -94) -94]
Test Case: 805 | Input/Output: [(-41 22 89 -72) -72]
Test Case: 806 | Input/Output: [(-25 -72 -39 -46) -72]
Test Case: 807 | Input/Output: [(49 40 69 0) 0]
Test Case: 808 | Input/Output: [(-89 69 -7 32) -89]
Test Case: 809 | Input/Output: [(-74 77 -96 10) -96]
Test Case: 810 | Input/Output: [(13 -15 -25 -41) -41]
Test Case: 811 | Input/Output: [(-33 1 73 -24) -33]
Test Case: 812 | Input/Output: [(80 65 100 -94) -94]
Test Case: 813 | Input/Output: [(70 -69 -62 -100) -100]
Test Case: 814 | Input/Output: [(13 30 24 -25) -25]
Test Case: 815 | Input/Output: [(41 19 32 -36) -36]
Test Case: 816 | Input/Output: [(35 -29 79 3) -29]
Test Case: 817 | Input/Output: [(-78 99 74 79) -78]
Test Case: 818 | Input/Output: [(-32 -98 -74 67) -98]
Test Case: 819 | Input/Output: [(-66 10 -21 -8) -66]
Test Case: 820 | Input/Output: [(-41 -27 -24 -91) -91]
Test Case: 821 | Input/Output: [(-81 0 55 69) -81]
Test Case: 822 | Input/Output: [(-34 -84 15 49) -84]
Test Case: 823 | Input/Output: [(-94 16 33 85) -94]
Test Case: 824 | Input/Output: [(-19 -74 88 24) -74]
Test Case: 825 | Input/Output: [(9 47 -55 13) -55]
Test Case: 826 | Input/Output: [(-34 -98 -64 -24) -98]
Test Case: 827 | Input/Output: [(-35 31 40 15) -35]
Test Case: 828 | Input/Output: [(-50 19 -76 57) -76]
Test Case: 829 | Input/Output: [(41 68 49 -64) -64]
Test Case: 830 | Input/Output: [(41 61 48 92) 41]
Test Case: 831 | Input/Output: [(-88 -4 58 63) -88]
Test Case: 832 | Input/Output: [(55 69 80 -65) -65]
Test Case: 833 | Input/Output: [(-95 -21 8 -44) -95]
Test Case: 834 | Input/Output: [(-42 -85 92 24) -85]
Test Case: 835 | Input/Output: [(28 -91 -58 0) -91]
Test Case: 836 | Input/Output: [(-16 79 -62 -25) -62]
Test Case: 837 | Input/Output: [(-56 22 98 91) -56]
Test Case: 838 | Input/Output: [(25 52 71 69) 25]
Test Case: 839 | Input/Output: [(-21 -50 -75 -7) -75]
Test Case: 840 | Input/Output: [(8 -4 -76 -32) -76]
Test Case: 841 | Input/Output: [(95 99 24 -59) -59]
Test Case: 842 | Input/Output: [(23 36 67 -85) -85]
Test Case: 843 | Input/Output: [(-46 24 -74 33) -74]
Test Case: 844 | Input/Output: [(-19 31 55 -31) -31]
Test Case: 845 | Input/Output: [(-66 47 3 9) -66]
Test Case: 846 | Input/Output: [(-74 47 15 -99) -99]
Test Case: 847 | Input/Output: [(-40 -8 60 -25) -40]
Test Case: 848 | Input/Output: [(33 38 -50 -37) -50]
Test Case: 849 | Input/Output: [(42 -88 -32 27) -88]
Test Case: 850 | Input/Output: [(-63 -73 80 52) -73]
Test Case: 851 | Input/Output: [(-62 -53 -36 -44) -62]
Test Case: 852 | Input/Output: [(-5 -89 37 19) -89]
Test Case: 853 | Input/Output: [(98 47 -8 75) -8]
Test Case: 854 | Input/Output: [(-72 15 -32 79) -72]
Test Case: 855 | Input/Output: [(3 73 12 41) 3]
Test Case: 856 | Input/Output: [(-70 -35 -13 23) -70]
Test Case: 857 | Input/Output: [(45 90 15 -64) -64]
Test Case: 858 | Input/Output: [(-92 -97 -71 -65) -97]
Test Case: 859 | Input/Output: [(26 6 -63 -66) -66]
Test Case: 860 | Input/Output: [(82 -16 -30 37) -30]
Test Case: 861 | Input/Output: [(87 -34 -75 -85) -85]
Test Case: 862 | Input/Output: [(75 -9 -5 -97) -97]
Test Case: 863 | Input/Output: [(-92 -12 2 -52) -92]
Test Case: 864 | Input/Output: [(-66 49 63 -26) -66]
Test Case: 865 | Input/Output: [(-89 65 -6 78) -89]
Test Case: 866 | Input/Output: [(16 -12 -77 -59) -77]
Test Case: 867 | Input/Output: [(1 51 -35 6) -35]
Test Case: 868 | Input/Output: [(58 -32 96 12) -32]
Test Case: 869 | Input/Output: [(83 88 -70 6) -70]
Test Case: 870 | Input/Output: [(-81 59 -25 45) -81]
Test Case: 871 | Input/Output: [(14 -66 93 99) -66]
Test Case: 872 | Input/Output: [(83 -42 -40 30) -42]
Test Case: 873 | Input/Output: [(54 -27 -35 65) -35]
Test Case: 874 | Input/Output: [(42 -26 -52 13) -52]
Test Case: 875 | Input/Output: [(95 -69 -88 -36) -88]
Test Case: 876 | Input/Output: [(-96 88 55 38) -96]
Test Case: 877 | Input/Output: [(-95 41 -98 -39) -98]
Test Case: 878 | Input/Output: [(63 -68 -39 -49) -68]
Test Case: 879 | Input/Output: [(53 -100 76 51) -100]
Test Case: 880 | Input/Output: [(-13 -64 -24 -17) -64]
Test Case: 881 | Input/Output: [(9 92 25 -9) -9]
Test Case: 882 | Input/Output: [(33 90 41 -67) -67]
Test Case: 883 | Input/Output: [(-33 -80 45 -72) -80]
Test Case: 884 | Input/Output: [(-21 -74 -10 55) -74]
Test Case: 885 | Input/Output: [(80 -91 -61 -99) -99]
Test Case: 886 | Input/Output: [(73 19 48 -44) -44]
Test Case: 887 | Input/Output: [(58 51 -54 71) -54]
Test Case: 888 | Input/Output: [(-60 0 -79 41) -79]
Test Case: 889 | Input/Output: [(-78 -61 -80 -64) -80]
Test Case: 890 | Input/Output: [(41 -18 63 53) -18]
Test Case: 891 | Input/Output: [(-71 -78 -62 -6) -78]
Test Case: 892 | Input/Output: [(35 33 77 62) 33]
Test Case: 893 | Input/Output: [(-66 -68 66 50) -68]
Test Case: 894 | Input/Output: [(23 1 24 -11) -11]
Test Case: 895 | Input/Output: [(60 -87 -8 80) -87]
Test Case: 896 | Input/Output: [(6 10 -51 -27) -51]
Test Case: 897 | Input/Output: [(0 61 -98 10) -98]
Test Case: 898 | Input/Output: [(-71 99 93 -6) -71]
Test Case: 899 | Input/Output: [(-30 -30 54 -45) -45]
Test Case: 900 | Input/Output: [(-62 92 14 80) -62]
Test Case: 901 | Input/Output: [(-17 -57 33 52) -57]
Test Case: 902 | Input/Output: [(32 -100 75 10) -100]
Test Case: 903 | Input/Output: [(-22 7 38 -7) -22]
Test Case: 904 | Input/Output: [(87 96 32 54) 32]
Test Case: 905 | Input/Output: [(5 35 -72 79) -72]
Test Case: 906 | Input/Output: [(-54 35 70 67) -54]
Test Case: 907 | Input/Output: [(-61 -12 -92 98) -92]
Test Case: 908 | Input/Output: [(15 -13 -51 74) -51]
Test Case: 909 | Input/Output: [(27 2 -33 51) -33]
Test Case: 910 | Input/Output: [(-17 64 -16 -88) -88]
Test Case: 911 | Input/Output: [(-24 -71 79 13) -71]
Test Case: 912 | Input/Output: [(-37 40 77 87) -37]
Test Case: 913 | Input/Output: [(-10 85 -17 87) -17]
Test Case: 914 | Input/Output: [(93 -66 -13 -72) -72]
Test Case: 915 | Input/Output: [(-87 3 -82 80) -87]
Test Case: 916 | Input/Output: [(36 12 -53 92) -53]
Test Case: 917 | Input/Output: [(15 -94 -30 -74) -94]
Test Case: 918 | Input/Output: [(59 -33 14 -90) -90]
Test Case: 919 | Input/Output: [(7 48 48 76) 7]
Test Case: 920 | Input/Output: [(94 -82 -35 78) -82]
Test Case: 921 | Input/Output: [(-97 -56 4 32) -97]
Test Case: 922 | Input/Output: [(-63 -68 46 -61) -68]
Test Case: 923 | Input/Output: [(72 -37 -28 -21) -37]
Test Case: 924 | Input/Output: [(10 -67 -59 -29) -67]
Test Case: 925 | Input/Output: [(35 -66 -54 -18) -66]
Test Case: 926 | Input/Output: [(-86 66 -51 -96) -96]
Test Case: 927 | Input/Output: [(-44 -47 56 -36) -47]
Test Case: 928 | Input/Output: [(-24 26 79 -16) -24]
Test Case: 929 | Input/Output: [(25 -10 68 45) -10]
Test Case: 930 | Input/Output: [(-41 27 -84 30) -84]
Test Case: 931 | Input/Output: [(-20 59 13 79) -20]
Test Case: 932 | Input/Output: [(93 8 33 -48) -48]
Test Case: 933 | Input/Output: [(90 -68 -14 74) -68]
Test Case: 934 | Input/Output: [(-4 64 -4 79) -4]
Test Case: 935 | Input/Output: [(36 29 -92 -99) -99]
Test Case: 936 | Input/Output: [(19 -45 -18 17) -45]
Test Case: 937 | Input/Output: [(-83 95 85 -29) -83]
Test Case: 938 | Input/Output: [(66 81 -6 7) -6]
Test Case: 939 | Input/Output: [(-85 67 4 -28) -85]
Test Case: 940 | Input/Output: [(-3 -48 53 79) -48]
Test Case: 941 | Input/Output: [(88 -2 70 71) -2]
Test Case: 942 | Input/Output: [(76 97 -31 38) -31]
Test Case: 943 | Input/Output: [(-41 -83 -17 65) -83]
Test Case: 944 | Input/Output: [(-73 -29 42 81) -73]
Test Case: 945 | Input/Output: [(18 77 -22 20) -22]
Test Case: 946 | Input/Output: [(-24 -56 -23 -6) -56]
Test Case: 947 | Input/Output: [(-84 11 -56 35) -84]
Test Case: 948 | Input/Output: [(49 -3 -41 26) -41]
Test Case: 949 | Input/Output: [(11 6 -6 92) -6]
Test Case: 950 | Input/Output: [(-90 92 66 -26) -90]
Test Case: 951 | Input/Output: [(-63 -41 -86 77) -86]
Test Case: 952 | Input/Output: [(-30 -47 -29 -7) -47]
Test Case: 953 | Input/Output: [(27 34 45 -99) -99]
Test Case: 954 | Input/Output: [(-5 60 -99 63) -99]
Test Case: 955 | Input/Output: [(-82 16 -42 -97) -97]
Test Case: 956 | Input/Output: [(-33 -94 -30 -31) -94]
Test Case: 957 | Input/Output: [(11 23 65 50) 11]
Test Case: 958 | Input/Output: [(-4 73 -34 -26) -34]
Test Case: 959 | Input/Output: [(-97 82 -30 -90) -97]
Test Case: 960 | Input/Output: [(-90 2 -77 16) -90]
Test Case: 961 | Input/Output: [(-100 -78 64 -40) -100]
Test Case: 962 | Input/Output: [(16 72 -85 -33) -85]
Test Case: 963 | Input/Output: [(-29 12 48 -92) -92]
Test Case: 964 | Input/Output: [(54 -47 34 26) -47]
Test Case: 965 | Input/Output: [(7 67 -72 17) -72]
Test Case: 966 | Input/Output: [(9 98 -46 4) -46]
Test Case: 967 | Input/Output: [(37 38 -13 69) -13]
Test Case: 968 | Input/Output: [(-32 39 -22 -57) -57]
Test Case: 969 | Input/Output: [(27 -58 65 14) -58]
Test Case: 970 | Input/Output: [(95 14 -49 -38) -49]
Test Case: 971 | Input/Output: [(16 38 -20 -3) -20]
Test Case: 972 | Input/Output: [(31 -24 84 58) -24]
Test Case: 973 | Input/Output: [(27 94 47 72) 27]
Test Case: 974 | Input/Output: [(76 34 0 -18) -18]
Test Case: 975 | Input/Output: [(-65 -50 -37 -43) -65]
Test Case: 976 | Input/Output: [(0 -6 -65 34) -65]
Test Case: 977 | Input/Output: [(-91 -30 6 -47) -91]
Test Case: 978 | Input/Output: [(-25 81 63 5) -25]
Test Case: 979 | Input/Output: [(40 100 -80 -72) -80]
Test Case: 980 | Input/Output: [(82 51 -22 -29) -29]
Test Case: 981 | Input/Output: [(71 -3 -8 -33) -33]
Test Case: 982 | Input/Output: [(18 59 75 -47) -47]
Test Case: 983 | Input/Output: [(-75 -90 66 -99) -99]
Test Case: 984 | Input/Output: [(83 96 53 -47) -47]
Test Case: 985 | Input/Output: [(48 -17 -9 94) -17]
Test Case: 986 | Input/Output: [(-6 -20 62 -95) -95]
Test Case: 987 | Input/Output: [(80 -50 43 100) -50]
Test Case: 988 | Input/Output: [(-20 -34 83 94) -34]
Test Case: 989 | Input/Output: [(-9 -6 6 -93) -93]
Test Case: 990 | Input/Output: [(-45 -61 -46 -73) -73]
Test Case: 991 | Input/Output: [(49 -33 -78 99) -78]
Test Case: 992 | Input/Output: [(54 33 68 68) 33]
Test Case: 993 | Input/Output: [(61 -26 -63 19) -63]
Test Case: 994 | Input/Output: [(-59 -87 85 -86) -87]
Test Case: 995 | Input/Output: [(73 -24 68 -47) -47]
Test Case: 996 | Input/Output: [(36 -2 -37 96) -37]
Test Case: 997 | Input/Output: [(-56 -73 7 68) -73]
Test Case: 998 | Input/Output: [(99 52 -48 14) -48]
Test Case: 999 | Input/Output: [(-34 -48 -31 1) -48]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 119 117 60 117 28 115 -60 51 -33 73 -100 -82 -119 89 -71 5
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[50 50 57 50] 50] [[42 8 42 42] 8] [[-69 73 73 73] -69] [[44 48 44 44] 44] [[-29 41 41 41] -29] [[-42 -42 -42 -84] -84] [[17 17 82 17] 17] [[37 -77 37 37] -77] [[53 53 53 56] 53] [[8 8 8 -19] -19] [(-48 -48 -48 -48) -48] [(-17 -17 -17 -17) -17] [(-32 -32 -32 -32) -32] [(77 77 77 77) 77] [(29 29 29 29) 29] [(86 30 73 50) 30] [(71 85 89 23) 23] [(61 64 6 37) 6] [(90 22 26 88) 22] [(81 75 100 29) 29] [(63 28 87 15) 15] [(43 39 80 64) 39] [(59 11 40 100) 11] [(99 51 81 72) 51] [(37 51 61 60) 37] [(90 53 16 27) 16] [(26 93 55 3) 3] [(54 62 22 1) 1] [(66 9 53 60) 9] [(7 36 86 49) 7] [(22 26 81 56) 22] [(14 27 57 90) 14] [(79 10 51 15) 10] [(30 90 52 12) 12] [(52 87 4 9) 4] [(66 99 -84 93) -84] [(71 69 19 -28) -28] [(-19 -77 -8 -9) -77] [(3 98 -40 -87) -87] [(-37 -33 66 76) -37] [(63 -42 -35 -55) -55] [(5 -7 -80 24) -80] [(-39 75 -6 -41) -41] [(-92 67 -67 -27) -92] [(33 71 -82 18) -82] [(28 -26 -30 4) -30] [(-78 12 37 82) -78] [(12 8 -7 86) -7] [(-88 -95 -16 -38) -95] [(56 -87 -29 -42) -87] [(-13 -29 -81 -94) -94] [(-11 8 -86 -5) -86] [(-70 77 -18 -79) -79] [(28 88 -12 -12) -12] [(31 60 -97 64) -97] [(6 -91 69 58) -91] [(-70 -54 2 -52) -70] [(-43 80 52 16) -43] [(-96 -53 -86 -8) -96] [(-93 -51 -94 12) -94] [(-98 -74 -61 86) -98] [(-38 68 -5 -83) -83] [(-43 -80 90 91) -80] [(68 -26 52 -46) -46] [(-25 99 -20 77) -25] [(83 -8 6 -26) -26] [(75 60 44 -71) -71] [(-58 -43 -26 38) -58] [(84 -45 -38 53) -45] [(82 -44 -35 -92) -92] [(-32 31 -85 56) -85] [(70 -99 -78 -98) -99] [(85 7 15 51) 7] [(61 59 -94 85) -94] [(38 52 -38 29) -38] [(-48 53 99 1) -48] [(-73 -73 -40 -58) -73] [(11 36 -67 -49) -67] [(64 50 100 -62) -62] [(-100 32 -68 0) -100] [(-88 -2 -35 -3) -88] [(96 -37 17 -51) -51] [(-24 -39 -32 -18) -39] [(44 -11 64 12) -11] [(13 -77 60 52) -77] [(17 62 -81 -48) -81] [(40 34 100 -38) -38] [(64 10 -39 -57) -57] [(34 -34 -84 -50) -84] [(-52 51 -98 -15) -98] [(-90 -70 48 -42) -90] [(31 -41 -85 -45) -85] [(3 79 -3 -66) -66] [(87 -76 -7 14) -76] [(45 18 82 23) 18])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 82                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 73                 
Correct output: 23                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 26                 
Correct output: 29                  | Program output: 100                
Correct output: 15                  | Program output: 87                 
Correct output: 39                  | Program output: 80                 
Correct output: 11                  | Program output: 40                 
Correct output: 51                  | Program output: 81                 
Correct output: 37                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 55                 
Correct output: 1                   | Program output: 22                 
Correct output: 9                   | Program output: 53                 
Correct output: 7                   | Program output: 86                 
Correct output: 22                  | Program output: 81                 
Correct output: 14                  | Program output: 57                 
Correct output: 10                  | Program output: 51                 
Correct output: 12                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: -84                 | Program output: -84                
Correct output: -28                 | Program output: 19                 
Correct output: -77                 | Program output: -8                 
Correct output: -87                 | Program output: -40                
Correct output: -37                 | Program output: 66                 
Correct output: -55                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: -6                 
Correct output: -92                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -16                
Correct output: -87                 | Program output: -29                
Correct output: -94                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 69                 
Correct output: -70                 | Program output: 2                  
Correct output: -43                 | Program output: 52                 
Correct output: -96                 | Program output: -86                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -61                
Correct output: -83                 | Program output: -5                 
Correct output: -80                 | Program output: 90                 
Correct output: -46                 | Program output: 52                 
Correct output: -25                 | Program output: -20                
Correct output: -26                 | Program output: 6                  
Correct output: -71                 | Program output: 44                 
Correct output: -58                 | Program output: -26                
Correct output: -45                 | Program output: -38                
Correct output: -92                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 15                 
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: 99                 
Correct output: -73                 | Program output: -40                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: 100                
Correct output: -100                | Program output: -68                
Correct output: -88                 | Program output: -35                
Correct output: -51                 | Program output: 17                 
Correct output: -39                 | Program output: -32                
Correct output: -11                 | Program output: 64                 
Correct output: -77                 | Program output: 60                 
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: 100                
Correct output: -57                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -3                 
Correct output: -76                 | Program output: -7                 
Correct output: 18                  | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_do*count} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_mult boolean_or exec_s (integer_pop exec_do*count ()) (exec_do*while () boolean_not boolean_shove integer_dup_items exec_stackdepth integer_eq boolean_frominteger exec_k (boolean_invert_first_then_and) (boolean_or integer_inc integer_dup_times) exec_dup (integer_inc boolean_or exec_yankdup integer_dup_times)) (boolean_dup boolean_dup exec_stackdepth boolean_dup_items) boolean_yankdup exec_s () (exec_noop boolean_shove integer_dec in3 print_integer integer_min print_integer) (in2))
Lexicase best errors: [0 1 1 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 48
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_do*count} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_mult boolean_or exec_s (integer_pop exec_do*count ()) (exec_do*while () boolean_not boolean_shove integer_dup_items exec_stackdepth integer_eq boolean_frominteger exec_k (boolean_invert_first_then_and) (boolean_or integer_inc integer_dup_times) exec_dup (integer_inc boolean_or exec_yankdup integer_dup_times)) (boolean_dup boolean_dup exec_stackdepth boolean_dup_items) boolean_yankdup exec_s () (exec_noop boolean_shove integer_dec in3 print_integer integer_min print_integer) (in2))
Zero cases best errors: [0 1 1 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 48
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 2 1000 3 3 1 1000 3 1000 1000)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (8 2 0 3 3 1 0 3 0 0)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in3) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank exec_dup_times () exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap (exec_empty exec_do*count (exec_rot () (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add exec_while (integer_swap in2) exec_dup_times (integer_mod boolean_yankdup boolean_eq) exec_pop (boolean_shove) boolean_not) exec_while (integer_mult exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ()))) ())) ()))))) ()) () ()))
Errors: [0 1 1 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 83
Size: 125
Percent parens: 0.336
--- Population Statistics ---
Average total errors in population: 9.98
Median total errors in population: 10
Error averages by case: (0.992 0.998 1.0 0.997 0.997 0.999 1.0 0.997 1.0 1.0)
Error minima by case: (0 0 1 0 0 0 1 0 1 1)
Average genome size in population (length): 50.633
Average program size in population (points): 69.832
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 478358
--- Timings ---
Current time: 1559314604036 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.7 seconds, 27.9%
Fitness Testing:      1.8 seconds, 68.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 82                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 73                 
Correct output: 23                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 26                 
Correct output: 29                  | Program output: 100                
Correct output: 15                  | Program output: 87                 
Correct output: 39                  | Program output: 80                 
Correct output: 11                  | Program output: 40                 
Correct output: 51                  | Program output: 81                 
Correct output: 37                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 55                 
Correct output: 1                   | Program output: 22                 
Correct output: 9                   | Program output: 53                 
Correct output: 7                   | Program output: 86                 
Correct output: 22                  | Program output: 81                 
Correct output: 14                  | Program output: 57                 
Correct output: 10                  | Program output: 51                 
Correct output: 12                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: -84                 | Program output: -84                
Correct output: -28                 | Program output: 19                 
Correct output: -77                 | Program output: -8                 
Correct output: -87                 | Program output: -40                
Correct output: -37                 | Program output: 66                 
Correct output: -55                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: -6                 
Correct output: -92                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -16                
Correct output: -87                 | Program output: -29                
Correct output: -94                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 69                 
Correct output: -70                 | Program output: 2                  
Correct output: -43                 | Program output: 52                 
Correct output: -96                 | Program output: -86                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -61                
Correct output: -83                 | Program output: -5                 
Correct output: -80                 | Program output: 90                 
Correct output: -46                 | Program output: 52                 
Correct output: -25                 | Program output: -20                
Correct output: -26                 | Program output: 6                  
Correct output: -71                 | Program output: 44                 
Correct output: -58                 | Program output: -26                
Correct output: -45                 | Program output: -38                
Correct output: -92                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 15                 
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: 99                 
Correct output: -73                 | Program output: -40                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: 100                
Correct output: -100                | Program output: -68                
Correct output: -88                 | Program output: -35                
Correct output: -51                 | Program output: 17                 
Correct output: -39                 | Program output: -32                
Correct output: -11                 | Program output: 64                 
Correct output: -77                 | Program output: 60                 
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: 100                
Correct output: -57                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -3                 
Correct output: -76                 | Program output: -7                 
Correct output: 18                  | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_do*count} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (integer_mult boolean_or exec_s (integer_pop exec_do*count ()) (exec_do*while () boolean_not boolean_shove integer_dup_items exec_stackdepth integer_eq boolean_frominteger exec_k (boolean_invert_first_then_and) (boolean_or integer_inc integer_dup_times) exec_dup (integer_inc boolean_or exec_yankdup integer_dup_times)) (boolean_dup boolean_dup exec_stackdepth boolean_dup_items) boolean_yankdup exec_s () (exec_noop boolean_shove integer_dec in3 print_integer integer_min print_integer) (in2))
Lexicase best errors: [0 1 1 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 48
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_do*count} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (integer_mult boolean_or exec_s (integer_pop exec_do*count ()) (exec_do*while () boolean_not boolean_shove integer_dup_items exec_stackdepth integer_eq boolean_frominteger exec_k (boolean_invert_first_then_and) (boolean_or integer_inc integer_dup_times) exec_dup (integer_inc boolean_or exec_yankdup integer_dup_times)) (boolean_dup boolean_dup exec_stackdepth boolean_dup_items) boolean_yankdup exec_s () (exec_noop boolean_shove integer_dec in3 print_integer integer_min print_integer) (in2))
Zero cases best errors: [0 1 1 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 48
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (527 1000 1000 527 527 158 157 1000 1000 1000)
Population mean number of elite cases: 6.90
Count of perfect (error zero) individuals by case: (527 0 0 527 527 158 157 0 0 0)
Population mean number of perfect (error zero) cases: 1.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times integer_flush) in3 print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank exec_dup_times () exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap (exec_empty exec_do*count (exec_rot () (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add exec_while (integer_swap in2) exec_dup_times (integer_mod boolean_yankdup boolean_eq) exec_pop (boolean_shove) boolean_not) exec_while (integer_mult exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ()))) ())) ()))))) ()) () ()))
Errors: [0 1 1 0 0 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 83
Size: 124
Percent parens: 0.331
--- Population Statistics ---
Average total errors in population: 8.104
Median total errors in population: 7
Error averages by case: (0.473 1.0 1.0 0.473 0.473 0.842 0.843 1.0 1.0 1.0)
Error minima by case: (0 1 1 0 0 0 0 1 1 1)
Average genome size in population (length): 60.983
Average program size in population (points): 85.685
Average percent parens in population: 0.274
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.49
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 853914
--- Timings ---
Current time: 1559314606565 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.4 seconds, 46.3%
Fitness Testing:      2.4 seconds, 45.3%
Report:               0.3 seconds,  6.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 82                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 73                 
Correct output: 23                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 26                 
Correct output: 29                  | Program output: 100                
Correct output: 15                  | Program output: 87                 
Correct output: 39                  | Program output: 80                 
Correct output: 11                  | Program output: 40                 
Correct output: 51                  | Program output: 81                 
Correct output: 37                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 55                 
Correct output: 1                   | Program output: 22                 
Correct output: 9                   | Program output: 53                 
Correct output: 7                   | Program output: 86                 
Correct output: 22                  | Program output: 81                 
Correct output: 14                  | Program output: 57                 
Correct output: 10                  | Program output: 51                 
Correct output: 12                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: -84                 | Program output: -84                
Correct output: -28                 | Program output: 19                 
Correct output: -77                 | Program output: -8                 
Correct output: -87                 | Program output: -40                
Correct output: -37                 | Program output: 66                 
Correct output: -55                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: -6                 
Correct output: -92                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -16                
Correct output: -87                 | Program output: -29                
Correct output: -94                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 69                 
Correct output: -70                 | Program output: 2                  
Correct output: -43                 | Program output: 52                 
Correct output: -96                 | Program output: -86                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -61                
Correct output: -83                 | Program output: -5                 
Correct output: -80                 | Program output: 90                 
Correct output: -46                 | Program output: 52                 
Correct output: -25                 | Program output: -20                
Correct output: -26                 | Program output: 6                  
Correct output: -71                 | Program output: 44                 
Correct output: -58                 | Program output: -26                
Correct output: -45                 | Program output: -38                
Correct output: -92                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 15                 
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: 99                 
Correct output: -73                 | Program output: -40                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: 100                
Correct output: -100                | Program output: -68                
Correct output: -88                 | Program output: -35                
Correct output: -51                 | Program output: 17                 
Correct output: -39                 | Program output: -32                
Correct output: -11                 | Program output: 64                 
Correct output: -77                 | Program output: 60                 
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: 100                
Correct output: -57                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -3                 
Correct output: -76                 | Program output: -7                 
Correct output: 18                  | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Lexicase best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in3) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank exec_dup_times () exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap (exec_empty exec_do*count (exec_rot () (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add exec_while (integer_swap in2) exec_dup_times (integer_mod boolean_yankdup boolean_eq) exec_pop (boolean_shove) boolean_not) exec_while (integer_mult exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ()))) ())) ()))))) ()) () ()))
Lexicase best errors: [0 0 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 125
Percent parens: 0.336
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Zero cases best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in3) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank exec_dup_times () exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap (exec_empty exec_do*count (exec_rot () (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add exec_while (integer_swap in2) exec_dup_times (integer_mod boolean_yankdup boolean_eq) exec_pop (boolean_shove) boolean_not) exec_while (integer_mult exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ()))) ())) ()))))) ()) () ()))
Zero cases best errors: [0 0 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 125
Percent parens: 0.336
--- Lexicase Population Statistics ---
Count of elite individuals by case: (490 489 1000 1 827 821 1 1000 331 1000)
Population mean number of elite cases: 5.96
Count of perfect (error zero) individuals by case: (490 489 0 1 827 821 1 0 331 0)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_do*count} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in2})
Best program: (integer_mult boolean_or exec_s (integer_pop exec_do*count ()) (exec_do*while () boolean_not boolean_shove integer_dup_items exec_stackdepth integer_eq boolean_frominteger exec_k (boolean_invert_first_then_and) (boolean_or integer_inc integer_dup_times) exec_dup (integer_inc boolean_or exec_yankdup integer_dup_times)) (boolean_dup boolean_dup exec_stackdepth boolean_dup_items) boolean_yankdup exec_s () (exec_noop boolean_shove integer_dec in3 print_integer integer_min print_integer) (in2))
Errors: [0 0 1 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 36
Size: 48
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.04
Median total errors in population: 7
Error averages by case: (0.51 0.511 1.0 0.999 0.173 0.179 0.999 1.0 0.669 1.0)
Error minima by case: (0 0 1 0 0 0 0 1 0 1)
Average genome size in population (length): 61.935
Average program size in population (points): 85.949
Average percent parens in population: 0.264
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.967
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1295425
--- Timings ---
Current time: 1559314609578 milliseconds
Total Time:           8.2 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.5 seconds, 55.1%
Fitness Testing:      3.0 seconds, 36.2%
Report:               0.6 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 82                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 73                 
Correct output: 23                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 26                 
Correct output: 29                  | Program output: 100                
Correct output: 15                  | Program output: 87                 
Correct output: 39                  | Program output: 80                 
Correct output: 11                  | Program output: 40                 
Correct output: 51                  | Program output: 81                 
Correct output: 37                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 55                 
Correct output: 1                   | Program output: 22                 
Correct output: 9                   | Program output: 53                 
Correct output: 7                   | Program output: 86                 
Correct output: 22                  | Program output: 81                 
Correct output: 14                  | Program output: 57                 
Correct output: 10                  | Program output: 51                 
Correct output: 12                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: -84                 | Program output: -84                
Correct output: -28                 | Program output: 19                 
Correct output: -77                 | Program output: -8                 
Correct output: -87                 | Program output: -40                
Correct output: -37                 | Program output: 66                 
Correct output: -55                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: -6                 
Correct output: -92                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -16                
Correct output: -87                 | Program output: -29                
Correct output: -94                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 69                 
Correct output: -70                 | Program output: 2                  
Correct output: -43                 | Program output: 52                 
Correct output: -96                 | Program output: -86                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -61                
Correct output: -83                 | Program output: -5                 
Correct output: -80                 | Program output: 90                 
Correct output: -46                 | Program output: 52                 
Correct output: -25                 | Program output: -20                
Correct output: -26                 | Program output: 6                  
Correct output: -71                 | Program output: 44                 
Correct output: -58                 | Program output: -26                
Correct output: -45                 | Program output: -38                
Correct output: -92                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 15                 
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: 99                 
Correct output: -73                 | Program output: -40                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: 100                
Correct output: -100                | Program output: -68                
Correct output: -88                 | Program output: -35                
Correct output: -51                 | Program output: 17                 
Correct output: -39                 | Program output: -32                
Correct output: -11                 | Program output: 64                 
Correct output: -77                 | Program output: 60                 
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: 100                
Correct output: -57                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -3                 
Correct output: -76                 | Program output: -7                 
Correct output: 18                  | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction tagged_187} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline})
Lexicase best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in3) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_gte exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (integer_pop exec_do*range (boolean_stackdepth print_newline) boolean_dup integer_flush integer_div exec_noop) (boolean_flush exec_dup_items) (integer_add tagged_187) boolean_frominteger) boolean_not exec_y ()) (boolean_yankdup boolean_dup_items boolean_shove boolean_or integer_yank boolean_eq exec_dup_items exec_empty boolean_yank exec_flush integer_inc integer_lt) (print_boolean boolean_dup_times integer_mult integer_dup_items) integer_mod exec_k (integer_shove exec_empty integer_eq integer_pop exec_y () integer_mod) (integer_stackdepth) exec_yankdup exec_flush) (exec_yank exec_shove (print_newline)) ())
Lexicase best errors: [1 0 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 100
Percent parens: 0.230
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction tagged_187} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline})
Zero cases best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in3) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_gte exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (integer_pop exec_do*range (boolean_stackdepth print_newline) boolean_dup integer_flush integer_div exec_noop) (boolean_flush exec_dup_items) (integer_add tagged_187) boolean_frominteger) boolean_not exec_y ()) (boolean_yankdup boolean_dup_items boolean_shove boolean_or integer_yank boolean_eq exec_dup_items exec_empty boolean_yank exec_flush integer_inc integer_lt) (print_boolean boolean_dup_times integer_mult integer_dup_items) integer_mod exec_k (integer_shove exec_empty integer_eq integer_pop exec_y () integer_mod) (integer_stackdepth) exec_yankdup exec_flush) (exec_yank exec_shove (print_newline)) ())
Zero cases best errors: [1 0 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 100
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (157 357 357 363 513 156 1 877 364 357)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (157 357 357 363 513 156 1 877 364 357)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in3) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 integer_shove exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank exec_dup_times () exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap (exec_empty exec_do*count (exec_rot () (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add exec_while (integer_swap in2) exec_dup_times (integer_mod boolean_yankdup boolean_eq) exec_pop (boolean_shove) boolean_not) exec_while (integer_mult exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ())))))) ())) ()))))) ()) () ()))
Errors: [1 0 0 1 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 89
Size: 135
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 6.498
Median total errors in population: 6
Error averages by case: (0.843 0.643 0.643 0.637 0.487 0.844 0.999 0.123 0.636 0.643)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.947
Average program size in population (points): 101.344
Average percent parens in population: 0.297
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4825
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1639660
--- Timings ---
Current time: 1559314612237 milliseconds
Total Time:          10.9 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.5 seconds, 59.1%
Fitness Testing:      3.4 seconds, 30.7%
Report:               1.0 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 56                 
Correct output: -19                 | Program output: -19                
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 37                 
Correct output: 22                  | Program output: 88                 
Correct output: 29                  | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 64                 
Correct output: 11                  | Program output: 100                
Correct output: 51                  | Program output: 72                 
Correct output: 37                  | Program output: 60                 
Correct output: 16                  | Program output: 27                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 22                  | Program output: 56                 
Correct output: 14                  | Program output: 90                 
Correct output: 10                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 4                   | Program output: 9                  
Correct output: -84                 | Program output: 93                 
Correct output: -28                 | Program output: -28                
Correct output: -77                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -37                 | Program output: 76                 
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: 24                 
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -27                
Correct output: -82                 | Program output: 18                 
Correct output: -30                 | Program output: 4                  
Correct output: -78                 | Program output: 82                 
Correct output: -7                  | Program output: 86                 
Correct output: -95                 | Program output: -38                
Correct output: -87                 | Program output: -42                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -5                 
Correct output: -79                 | Program output: -79                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: 64                 
Correct output: -91                 | Program output: 58                 
Correct output: -70                 | Program output: -52                
Correct output: -43                 | Program output: 16                 
Correct output: -96                 | Program output: -8                 
Correct output: -94                 | Program output: 12                 
Correct output: -98                 | Program output: 86                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: 91                 
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 77                 
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: 38                 
Correct output: -45                 | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: 56                 
Correct output: -99                 | Program output: -98                
Correct output: 7                   | Program output: 51                 
Correct output: -94                 | Program output: 85                 
Correct output: -38                 | Program output: 29                 
Correct output: -48                 | Program output: 1                  
Correct output: -73                 | Program output: -58                
Correct output: -67                 | Program output: -49                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 0                  
Correct output: -88                 | Program output: -3                 
Correct output: -51                 | Program output: -51                
Correct output: -39                 | Program output: -18                
Correct output: -11                 | Program output: 12                 
Correct output: -77                 | Program output: 52                 
Correct output: -81                 | Program output: -48                
Correct output: -38                 | Program output: -38                
Correct output: -57                 | Program output: -57                
Correct output: -84                 | Program output: -50                
Correct output: -98                 | Program output: -15                
Correct output: -90                 | Program output: -42                
Correct output: -85                 | Program output: -45                
Correct output: -66                 | Program output: -66                
Correct output: -76                 | Program output: 14                 
Correct output: 18                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_518} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_322} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_807} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank})
Lexicase best program: (boolean_frominteger in4 exec_y_when_autoconstructing (print_integer exec_dup (integer_swap integer_yank integer_gte) boolean_rot boolean_frominteger integer_add integer_fromboolean in2 integer_lte integer_fromboolean integer_mult) integer_dec integer_dec integer_min in2 integer_fromboolean tag_integer_518 boolean_invert_second_then_and boolean_rot tagged_322 integer_gte exec_if (boolean_dup print_boolean integer_empty boolean_empty integer_rot integer_div integer_swap integer_min boolean_yank) () integer_div integer_swap integer_min boolean_yank integer_div in4 exec_shove (integer_dup_items boolean_and) exec_rot (exec_yank integer_add exec_if (boolean_eq integer_sub in1 in2 integer_empty tag_integer_807 integer_gte integer_yank) ()) () ())
Lexicase best errors: [0 1 0 0 1 1 1 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 68
Percent parens: 0.162
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_518} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_322} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_807} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank})
Zero cases best program: (boolean_frominteger in4 exec_y_when_autoconstructing (print_integer exec_dup (integer_swap integer_yank integer_gte) boolean_rot boolean_frominteger integer_add integer_fromboolean in2 integer_lte integer_fromboolean integer_mult) integer_dec integer_dec integer_min in2 integer_fromboolean tag_integer_518 boolean_invert_second_then_and boolean_rot tagged_322 integer_gte exec_if (boolean_dup print_boolean integer_empty boolean_empty integer_rot integer_div integer_swap integer_min boolean_yank) () integer_div integer_swap integer_min boolean_yank integer_div in4 exec_shove (integer_dup_items boolean_and) exec_rot (exec_yank integer_add exec_if (boolean_eq integer_sub in1 in2 integer_empty tag_integer_807 integer_gte integer_yank) ()) () ())
Zero cases best errors: [0 1 0 0 1 1 1 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 68
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (229 98 229 230 182 98 182 376 376 98)
Population mean number of elite cases: 2.10
Count of perfect (error zero) individuals by case: (229 98 229 230 182 98 182 376 376 98)
Population mean number of perfect (error zero) cases: 2.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction tagged_187} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline})
Best program: (in4 boolean_invert_first_then_and boolean_dup_times exec_rot (integer_empty boolean_xor boolean_not integer_fromboolean exec_do*while () integer_pop print_integer integer_max integer_yankdup integer_swap boolean_yankdup exec_k (exec_swap (exec_k (exec_empty integer_max exec_y_when_autoconstructing () integer_flush) () boolean_dup_items print_newline exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean) (exec_rot (integer_gte exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (integer_pop exec_do*range (boolean_stackdepth print_newline) boolean_dup integer_flush integer_div exec_noop) (boolean_flush exec_dup_items) (integer_add tagged_187) boolean_frominteger) boolean_not exec_y ()) (boolean_yankdup boolean_dup_items boolean_shove boolean_or integer_yank boolean_eq exec_dup_items exec_empty integer_pop exec_flush boolean_or integer_lt) (print_boolean boolean_dup_times integer_mult integer_dup_items) integer_mod exec_k (boolean_dup_items exec_empty integer_eq integer_pop exec_y () integer_mod) (integer_stackdepth) exec_yankdup exec_flush) (exec_yank exec_shove (print_newline)) ())) ()) () ())
Errors: [0 1 0 0 1 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 85
Size: 115
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 7.902
Median total errors in population: 8
Error averages by case: (0.771 0.902 0.771 0.77 0.818 0.902 0.818 0.624 0.624 0.902)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.757
Average program size in population (points): 98.938
Average percent parens in population: 0.291
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 6.050875
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.003
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1995372
--- Timings ---
Current time: 1559314615649 milliseconds
Total Time:          14.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.9 seconds, 63.3%
Fitness Testing:      3.8 seconds, 26.8%
Report:               1.3 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 56                 
Correct output: -19                 | Program output: -19                
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 37                 
Correct output: 22                  | Program output: 88                 
Correct output: 29                  | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 64                 
Correct output: 11                  | Program output: 100                
Correct output: 51                  | Program output: 72                 
Correct output: 37                  | Program output: 60                 
Correct output: 16                  | Program output: 27                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 22                  | Program output: 56                 
Correct output: 14                  | Program output: 90                 
Correct output: 10                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 4                   | Program output: 9                  
Correct output: -84                 | Program output: 93                 
Correct output: -28                 | Program output: -28                
Correct output: -77                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -37                 | Program output: 76                 
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: 24                 
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -27                
Correct output: -82                 | Program output: 18                 
Correct output: -30                 | Program output: 4                  
Correct output: -78                 | Program output: 82                 
Correct output: -7                  | Program output: 86                 
Correct output: -95                 | Program output: -38                
Correct output: -87                 | Program output: -42                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -5                 
Correct output: -79                 | Program output: -79                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: 64                 
Correct output: -91                 | Program output: 58                 
Correct output: -70                 | Program output: -52                
Correct output: -43                 | Program output: 16                 
Correct output: -96                 | Program output: -8                 
Correct output: -94                 | Program output: 12                 
Correct output: -98                 | Program output: 86                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: 91                 
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 77                 
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: 38                 
Correct output: -45                 | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: 56                 
Correct output: -99                 | Program output: -98                
Correct output: 7                   | Program output: 51                 
Correct output: -94                 | Program output: 85                 
Correct output: -38                 | Program output: 29                 
Correct output: -48                 | Program output: 1                  
Correct output: -73                 | Program output: -58                
Correct output: -67                 | Program output: -49                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 0                  
Correct output: -88                 | Program output: -3                 
Correct output: -51                 | Program output: -51                
Correct output: -39                 | Program output: -18                
Correct output: -11                 | Program output: 12                 
Correct output: -77                 | Program output: 52                 
Correct output: -81                 | Program output: -48                
Correct output: -38                 | Program output: -38                
Correct output: -57                 | Program output: -57                
Correct output: -84                 | Program output: -50                
Correct output: -98                 | Program output: -15                
Correct output: -90                 | Program output: -42                
Correct output: -85                 | Program output: -45                
Correct output: -66                 | Program output: -66                
Correct output: -76                 | Program output: 14                 
Correct output: 18                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_518} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_322} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_807} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank})
Lexicase best program: (in3 in4 exec_y_when_autoconstructing (print_integer exec_flush integer_swap integer_yank integer_gte) boolean_rot boolean_frominteger integer_add integer_fromboolean in2 integer_lte integer_fromboolean integer_mult integer_dec integer_dec integer_min in2 integer_fromboolean tag_integer_518 boolean_invert_second_then_and boolean_rot tagged_322 integer_gte exec_if (boolean_dup boolean_stackdepth integer_empty boolean_empty integer_rot integer_div integer_swap integer_min boolean_yank) () integer_div in4 exec_shove (integer_dup_items) boolean_and exec_rot (exec_yank integer_add exec_if (boolean_eq integer_sub in1 in2 integer_empty tag_integer_807 integer_gte integer_yank) ()) () ())
Lexicase best errors: [1 1 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 63
Percent parens: 0.159
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_518} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_322} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_807} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank})
Zero cases best program: (in3 in4 exec_y_when_autoconstructing (print_integer exec_flush integer_swap integer_yank integer_gte) boolean_rot boolean_frominteger integer_add integer_fromboolean in2 integer_lte integer_fromboolean integer_mult integer_dec integer_dec integer_min in2 integer_fromboolean tag_integer_518 boolean_invert_second_then_and boolean_rot tagged_322 integer_gte exec_if (boolean_dup boolean_stackdepth integer_empty boolean_empty integer_rot integer_div integer_swap integer_min boolean_yank) () integer_div in4 exec_shove (integer_dup_items) boolean_and exec_rot (exec_yank integer_add exec_if (boolean_eq integer_sub in1 in2 integer_empty tag_integer_807 integer_gte integer_yank) ()) () ())
Zero cases best errors: [1 1 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 63
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (477 288 255 186 288 255 729 157 250 250)
Population mean number of elite cases: 3.13
Count of perfect (error zero) individuals by case: (477 288 255 186 288 255 729 157 250 250)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_518} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_316} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_807} {:close 0, :instruction integer_gte})
Best program: (in3 in4 exec_y_when_autoconstructing (print_integer exec_dup (integer_swap integer_yank integer_gte) boolean_rot boolean_frominteger integer_add integer_fromboolean in2 integer_lte integer_fromboolean integer_mult) integer_dec integer_dec integer_min in2 integer_fromboolean tag_integer_518 boolean_invert_second_then_and boolean_rot tagged_316 integer_gte exec_if (boolean_dup print_boolean integer_empty boolean_empty integer_rot integer_div integer_swap integer_min boolean_yank) () integer_div in4 exec_shove (integer_dup_items) boolean_and exec_rot (exec_yank integer_add exec_if (boolean_eq integer_sub in1 in2 integer_empty tag_integer_807 integer_gte) ()) () ())
Errors: [1 1 0 1 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 52
Size: 63
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 6.865
Median total errors in population: 6
Error averages by case: (0.523 0.712 0.745 0.814 0.712 0.745 0.271 0.843 0.75 0.75)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.292
Average program size in population (points): 101.811
Average percent parens in population: 0.297
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.6530625
Median age in population: 7.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2339586
--- Timings ---
Current time: 1559314619187 milliseconds
Total Time:          17.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.6 seconds, 65.6%
Fitness Testing:      4.1 seconds, 23.3%
Report:               1.9 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: -29                
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 86                 
Correct output: 23                  | Program output: 71                 
Correct output: 6                   | Program output: 61                 
Correct output: 22                  | Program output: 90                 
Correct output: 29                  | Program output: 81                 
Correct output: 15                  | Program output: 63                 
Correct output: 39                  | Program output: 43                 
Correct output: 11                  | Program output: 59                 
Correct output: 51                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: 16                  | Program output: 90                 
Correct output: 3                   | Program output: 26                 
Correct output: 1                   | Program output: 54                 
Correct output: 9                   | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 22                 
Correct output: 14                  | Program output: 14                 
Correct output: 10                  | Program output: 79                 
Correct output: 12                  | Program output: 30                 
Correct output: 4                   | Program output: 52                 
Correct output: -84                 | Program output: 66                 
Correct output: -28                 | Program output: 71                 
Correct output: -77                 | Program output: -19                
Correct output: -87                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: 63                 
Correct output: -80                 | Program output: 5                  
Correct output: -41                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: 33                 
Correct output: -30                 | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -7                  | Program output: 12                 
Correct output: -95                 | Program output: -88                
Correct output: -87                 | Program output: 56                 
Correct output: -94                 | Program output: -13                
Correct output: -86                 | Program output: -11                
Correct output: -79                 | Program output: -70                
Correct output: -12                 | Program output: 28                 
Correct output: -97                 | Program output: 31                 
Correct output: -91                 | Program output: 6                  
Correct output: -70                 | Program output: -70                
Correct output: -43                 | Program output: -43                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -38                
Correct output: -80                 | Program output: -43                
Correct output: -46                 | Program output: 68                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: 83                 
Correct output: -71                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -45                 | Program output: 84                 
Correct output: -92                 | Program output: 82                 
Correct output: -85                 | Program output: -32                
Correct output: -99                 | Program output: 70                 
Correct output: 7                   | Program output: 85                 
Correct output: -94                 | Program output: 61                 
Correct output: -38                 | Program output: 38                 
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: 11                 
Correct output: -62                 | Program output: 64                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -51                 | Program output: 96                 
Correct output: -39                 | Program output: -24                
Correct output: -11                 | Program output: 44                 
Correct output: -77                 | Program output: 13                 
Correct output: -81                 | Program output: 17                 
Correct output: -38                 | Program output: 40                 
Correct output: -57                 | Program output: 64                 
Correct output: -84                 | Program output: 34                 
Correct output: -98                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: 31                 
Correct output: -66                 | Program output: 3                  
Correct output: -76                 | Program output: 87                 
Correct output: 18                  | Program output: 45                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Lexicase best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in1) print_integer exec_eq exec_k_when_autoconstructing (print_exec (boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup) (integer_mult) integer_shove integer_pop 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank exec_dup_times () exec_s_when_autoconstructing (in1) () (integer_rot) exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub exec_swap (exec_swap (exec_empty exec_do*count (exec_rot () (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) exec_rot (exec_while (exec_while (integer_mult exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ())) () ())))) ())) ()) ())))))))) ()) () ()))
Lexicase best errors: [1 0 0 1 0 1 1 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 128
Percent parens: 0.383
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Zero cases best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in1) print_integer exec_eq exec_k_when_autoconstructing (print_exec (boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup) (integer_mult) integer_shove integer_pop 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank exec_dup_times () exec_s_when_autoconstructing (in1) () (integer_rot) exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub exec_swap (exec_swap (exec_empty exec_do*count (exec_rot () (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) exec_rot (exec_while (exec_while (integer_mult exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ())) () ())))) ())) ()) ())))))))) ()) () ()))
Zero cases best errors: [1 0 0 1 0 1 1 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 128
Percent parens: 0.383
--- Lexicase Population Statistics ---
Count of elite individuals by case: (368 300 300 363 300 2 99 363 134 99)
Population mean number of elite cases: 2.33
Count of perfect (error zero) individuals by case: (368 300 300 363 300 2 99 363 134 99)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in1) print_integer exec_eq exec_k_when_autoconstructing (print_exec (boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup) (integer_mult) integer_shove integer_pop 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank exec_dup_times () exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap () (exec_empty) integer_lt exec_rot (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add exec_while (integer_swap exec_dup_times (integer_mod boolean_yankdup boolean_eq) exec_pop (boolean_shove) boolean_not) exec_while (integer_mult exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ())))) () ()))))) ()) () ()))
Errors: [1 0 0 1 0 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 82
Size: 124
Percent parens: 0.339
--- Population Statistics ---
Average total errors in population: 7.672
Median total errors in population: 7
Error averages by case: (0.632 0.7 0.7 0.637 0.7 0.998 0.901 0.637 0.866 0.901)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.326
Average program size in population (points): 102.674
Average percent parens in population: 0.292
Minimum age in population: 6.0
Maximum age in population: 10.90625
Average age in population: 9.29859375
Median age in population: 9.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2696806
--- Timings ---
Current time: 1559314622507 milliseconds
Total Time:          21.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.3 seconds, 67.5%
Fitness Testing:      4.5 seconds, 21.2%
Report:               2.3 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 48                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: -77                
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 85                 
Correct output: 6                   | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 29                  | Program output: 75                 
Correct output: 15                  | Program output: 28                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 51                  | Program output: 51                 
Correct output: 37                  | Program output: 51                 
Correct output: 16                  | Program output: 53                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 36                 
Correct output: 22                  | Program output: 26                 
Correct output: 14                  | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 90                 
Correct output: 4                   | Program output: 87                 
Correct output: -84                 | Program output: 99                 
Correct output: -28                 | Program output: 69                 
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 98                 
Correct output: -37                 | Program output: -33                
Correct output: -55                 | Program output: -42                
Correct output: -80                 | Program output: -7                 
Correct output: -41                 | Program output: 75                 
Correct output: -92                 | Program output: 67                 
Correct output: -82                 | Program output: 71                 
Correct output: -30                 | Program output: -26                
Correct output: -78                 | Program output: 12                 
Correct output: -7                  | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -29                
Correct output: -86                 | Program output: 8                  
Correct output: -79                 | Program output: 77                 
Correct output: -12                 | Program output: 88                 
Correct output: -97                 | Program output: 60                 
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -54                
Correct output: -43                 | Program output: 80                 
Correct output: -96                 | Program output: -53                
Correct output: -94                 | Program output: -51                
Correct output: -98                 | Program output: -74                
Correct output: -83                 | Program output: 68                 
Correct output: -80                 | Program output: -80                
Correct output: -46                 | Program output: -26                
Correct output: -25                 | Program output: 99                 
Correct output: -26                 | Program output: -8                 
Correct output: -71                 | Program output: 60                 
Correct output: -58                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -44                
Correct output: -85                 | Program output: 31                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: 59                 
Correct output: -38                 | Program output: 52                 
Correct output: -48                 | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: 36                 
Correct output: -62                 | Program output: 50                 
Correct output: -100                | Program output: 32                 
Correct output: -88                 | Program output: -2                 
Correct output: -51                 | Program output: -37                
Correct output: -39                 | Program output: -39                
Correct output: -11                 | Program output: -11                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 62                 
Correct output: -38                 | Program output: 34                 
Correct output: -57                 | Program output: 10                 
Correct output: -84                 | Program output: -34                
Correct output: -98                 | Program output: 51                 
Correct output: -90                 | Program output: -70                
Correct output: -85                 | Program output: -41                
Correct output: -66                 | Program output: 79                 
Correct output: -76                 | Program output: -76                
Correct output: 18                  | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction in2})
Lexicase best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in2) print_integer integer_dup exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (print_boolean integer_empty boolean_empty integer_rot integer_div integer_swap integer_min boolean_yank)) (integer_dup_items integer_lt exec_do*range (exec_empty) exec_swap (exec_noop boolean_shove integer_dec in3 print_integer integer_min print_integer) (in2))) () ()))
Lexicase best errors: [0 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction in2})
Zero cases best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in2) print_integer integer_dup exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (print_boolean integer_empty boolean_empty integer_rot integer_div integer_swap integer_min boolean_yank)) (integer_dup_items integer_lt exec_do*range (exec_empty) exec_swap (exec_noop boolean_shove integer_dec in3 print_integer integer_min print_integer) (in2))) () ()))
Zero cases best errors: [0 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (919 904 274 272 272 84 275 360 277 83)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (919 904 274 272 272 84 275 360 277 83)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction integer_pop} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in2) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot integer_div) integer_mult integer_shove integer_add 72 exec_empty boolean_frominteger tagged_668 integer_pop 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () integer_eq print_newline boolean_dup exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank boolean_shove) exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap () (exec_empty) exec_do*count (exec_rot (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add exec_while (integer_swap exec_dup_times (integer_mod boolean_yankdup boolean_eq) exec_pop (boolean_shove) boolean_not) exec_while (integer_mult exec_do*times (integer_add integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ())))) () ()))))) () ()))
Errors: [0 0 1 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 88
Size: 127
Percent parens: 0.307
--- Population Statistics ---
Average total errors in population: 6.28
Median total errors in population: 6
Error averages by case: (0.081 0.096 0.726 0.728 0.728 0.916 0.725 0.64 0.723 0.917)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 75.172
Average program size in population (points): 108.503
Average percent parens in population: 0.297
Minimum age in population: 7.0
Maximum age in population: 12.609375
Average age in population: 10.80471875
Median age in population: 10.828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3030481
--- Timings ---
Current time: 1559314625435 milliseconds
Total Time:          24.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.6 seconds, 68.7%
Fitness Testing:      4.8 seconds, 20.1%
Report:               2.6 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: -29                
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 86                 
Correct output: 23                  | Program output: 71                 
Correct output: 6                   | Program output: 61                 
Correct output: 22                  | Program output: 90                 
Correct output: 29                  | Program output: 81                 
Correct output: 15                  | Program output: 63                 
Correct output: 39                  | Program output: 43                 
Correct output: 11                  | Program output: 59                 
Correct output: 51                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: 16                  | Program output: 90                 
Correct output: 3                   | Program output: 26                 
Correct output: 1                   | Program output: 54                 
Correct output: 9                   | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 22                 
Correct output: 14                  | Program output: 14                 
Correct output: 10                  | Program output: 79                 
Correct output: 12                  | Program output: 30                 
Correct output: 4                   | Program output: 52                 
Correct output: -84                 | Program output: 66                 
Correct output: -28                 | Program output: 71                 
Correct output: -77                 | Program output: -19                
Correct output: -87                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: 63                 
Correct output: -80                 | Program output: 5                  
Correct output: -41                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: 33                 
Correct output: -30                 | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -7                  | Program output: 12                 
Correct output: -95                 | Program output: -88                
Correct output: -87                 | Program output: 56                 
Correct output: -94                 | Program output: -13                
Correct output: -86                 | Program output: -11                
Correct output: -79                 | Program output: -70                
Correct output: -12                 | Program output: 28                 
Correct output: -97                 | Program output: 31                 
Correct output: -91                 | Program output: 6                  
Correct output: -70                 | Program output: -70                
Correct output: -43                 | Program output: -43                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -38                
Correct output: -80                 | Program output: -43                
Correct output: -46                 | Program output: 68                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: 83                 
Correct output: -71                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -45                 | Program output: 84                 
Correct output: -92                 | Program output: 82                 
Correct output: -85                 | Program output: -32                
Correct output: -99                 | Program output: 70                 
Correct output: 7                   | Program output: 85                 
Correct output: -94                 | Program output: 61                 
Correct output: -38                 | Program output: 38                 
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: 11                 
Correct output: -62                 | Program output: 64                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -51                 | Program output: 96                 
Correct output: -39                 | Program output: -24                
Correct output: -11                 | Program output: 44                 
Correct output: -77                 | Program output: 13                 
Correct output: -81                 | Program output: 17                 
Correct output: -38                 | Program output: 40                 
Correct output: -57                 | Program output: 64                 
Correct output: -84                 | Program output: 34                 
Correct output: -98                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: 31                 
Correct output: -66                 | Program output: 3                  
Correct output: -76                 | Program output: 87                 
Correct output: 18                  | Program output: 45                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340})
Lexicase best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in1) print_integer exec_eq exec_k_when_autoconstructing (print_exec (boolean_invert_second_then_and integer_inc) exec_s () (exec_noop boolean_shove integer_dec in3 print_integer integer_lt exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and exec_swap (in3 boolean_or) (integer_yankdup) exec_stackdepth boolean_yank exec_dup_times () exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank exec_dup_times () integer_yankdup exec_stackdepth boolean_yank integer_yankdup exec_stackdepth boolean_yank exec_dup_times (exec_s_when_autoconstructing (in1) (integer_rot) (boolean_or exec_swap (exec_empty exec_do*count (exec_rot () (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 ())))) ())) ())))))) ())) ()) ())
Lexicase best errors: [1 1 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 98
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340})
Zero cases best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in1) print_integer exec_eq exec_k_when_autoconstructing (print_exec (boolean_invert_second_then_and integer_inc) exec_s () (exec_noop boolean_shove integer_dec in3 print_integer integer_lt exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and exec_swap (in3 boolean_or) (integer_yankdup) exec_stackdepth boolean_yank exec_dup_times () exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank exec_dup_times () integer_yankdup exec_stackdepth boolean_yank integer_yankdup exec_stackdepth boolean_yank exec_dup_times (exec_s_when_autoconstructing (in1) (integer_rot) (boolean_or exec_swap (exec_empty exec_do*count (exec_rot () (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 ())))) ())) ())))))) ())) ()) ())
Zero cases best errors: [1 1 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 98
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (274 221 306 305 307 222 422 222 306 118)
Population mean number of elite cases: 2.70
Count of perfect (error zero) individuals by case: (274 221 306 305 307 222 422 222 306 118)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_712} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_div} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot})
Best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte boolean_yankdup exec_do*while () in1) print_integer exec_eq exec_k_when_autoconstructing (print_exec (boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup) (integer_mult) integer_shove integer_pop 72 integer_shove boolean_frominteger tagged_712 exec_pop (integer_swap exec_empty exec_rot () (boolean_shove) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_mod integer_dup_items integer_lt exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap (boolean_flush exec_do*count (exec_rot () (exec_pop (exec_dup (exec_k () (exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add exec_while (integer_swap in2) exec_dup_times (boolean_yankdup boolean_eq) exec_pop (integer_div) exec_dup () boolean_or integer_mult exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) exec_y (exec_rot () () ()))))) ())) ())) ()))
Errors: [1 1 0 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 71
Size: 108
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 7.297
Median total errors in population: 7
Error averages by case: (0.726 0.779 0.694 0.695 0.693 0.778 0.578 0.778 0.694 0.882)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.352
Average program size in population (points): 104.794
Average percent parens in population: 0.299
Minimum age in population: 9.875
Maximum age in population: 14.0859375
Average age in population: 12.2979921875
Median age in population: 12.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3335838
--- Timings ---
Current time: 1559314628511 milliseconds
Total Time:          27.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.0 seconds, 70.0%
Fitness Testing:      5.2 seconds, 19.0%
Report:               2.9 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: -29                
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 86                 
Correct output: 23                  | Program output: 71                 
Correct output: 6                   | Program output: 61                 
Correct output: 22                  | Program output: 90                 
Correct output: 29                  | Program output: 81                 
Correct output: 15                  | Program output: 63                 
Correct output: 39                  | Program output: 43                 
Correct output: 11                  | Program output: 59                 
Correct output: 51                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: 16                  | Program output: 90                 
Correct output: 3                   | Program output: 26                 
Correct output: 1                   | Program output: 54                 
Correct output: 9                   | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 22                 
Correct output: 14                  | Program output: 14                 
Correct output: 10                  | Program output: 79                 
Correct output: 12                  | Program output: 30                 
Correct output: 4                   | Program output: 52                 
Correct output: -84                 | Program output: 66                 
Correct output: -28                 | Program output: 71                 
Correct output: -77                 | Program output: -19                
Correct output: -87                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: 63                 
Correct output: -80                 | Program output: 5                  
Correct output: -41                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: 33                 
Correct output: -30                 | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -7                  | Program output: 12                 
Correct output: -95                 | Program output: -88                
Correct output: -87                 | Program output: 56                 
Correct output: -94                 | Program output: -13                
Correct output: -86                 | Program output: -11                
Correct output: -79                 | Program output: -70                
Correct output: -12                 | Program output: 28                 
Correct output: -97                 | Program output: 31                 
Correct output: -91                 | Program output: 6                  
Correct output: -70                 | Program output: -70                
Correct output: -43                 | Program output: -43                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -38                
Correct output: -80                 | Program output: -43                
Correct output: -46                 | Program output: 68                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: 83                 
Correct output: -71                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -45                 | Program output: 84                 
Correct output: -92                 | Program output: 82                 
Correct output: -85                 | Program output: -32                
Correct output: -99                 | Program output: 70                 
Correct output: 7                   | Program output: 85                 
Correct output: -94                 | Program output: 61                 
Correct output: -38                 | Program output: 38                 
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: 11                 
Correct output: -62                 | Program output: 64                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -51                 | Program output: 96                 
Correct output: -39                 | Program output: -24                
Correct output: -11                 | Program output: 44                 
Correct output: -77                 | Program output: 13                 
Correct output: -81                 | Program output: 17                 
Correct output: -38                 | Program output: 40                 
Correct output: -57                 | Program output: 64                 
Correct output: -84                 | Program output: 34                 
Correct output: -98                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: 31                 
Correct output: -66                 | Program output: 3                  
Correct output: -76                 | Program output: 87                 
Correct output: 18                  | Program output: 45                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 1, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Lexicase best program: (integer_eq in4 exec_y_when_autoconstructing (exec_shove (boolean_shove boolean_shove boolean_eq exec_s (integer_dup_times integer_shove in1) (print_integer exec_eq exec_k_when_autoconstructing (print_exec (boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup) (integer_mult) integer_shove integer_pop 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq print_boolean integer_dup_items integer_lt exec_do*range (boolean_yank exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or integer_yankdup exec_stackdepth boolean_yank boolean_or integer_yankdup exec_stackdepth exec_do*while (exec_dup_times () exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or integer_lte) exec_empty) (exec_do*count (exec_rot (exec_pop (exec_dup (boolean_invert_second_then_and) exec_shove (tag_exec_340 () integer_sub boolean_rot) exec_swap (exec_while (integer_lt exec_dup_times (integer_mod boolean_yankdup boolean_eq) exec_pop (boolean_shove) boolean_not) exec_while (integer_mult exec_do*times (integer_add integer_gt exec_stackdepth boolean_not) exec_while (exec_y_when_autoconstructing (exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ()))) ())) () ())))))) ()) () ())) ())))
Lexicase best errors: [1 1 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 147
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 1, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Zero cases best program: (integer_eq in4 exec_y_when_autoconstructing (exec_shove (boolean_shove boolean_shove boolean_eq exec_s (integer_dup_times integer_shove in1) (print_integer exec_eq exec_k_when_autoconstructing (print_exec (boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup) (integer_mult) integer_shove integer_pop 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq print_boolean integer_dup_items integer_lt exec_do*range (boolean_yank exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or integer_yankdup exec_stackdepth boolean_yank boolean_or integer_yankdup exec_stackdepth exec_do*while (exec_dup_times () exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or integer_lte) exec_empty) (exec_do*count (exec_rot (exec_pop (exec_dup (boolean_invert_second_then_and) exec_shove (tag_exec_340 () integer_sub boolean_rot) exec_swap (exec_while (integer_lt exec_dup_times (integer_mod boolean_yankdup boolean_eq) exec_pop (boolean_shove) boolean_not) exec_while (integer_mult exec_do*times (integer_add integer_gt exec_stackdepth boolean_not) exec_while (exec_y_when_autoconstructing (exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ()))) ())) () ())))))) ()) () ())) ())))
Zero cases best errors: [1 1 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 147
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (242 99 564 426 422 3 806 908 245 142)
Population mean number of elite cases: 3.86
Count of perfect (error zero) individuals by case: (242 99 564 426 422 3 806 908 245 142)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Best program: (boolean_shove boolean_shove boolean_eq integer_gte integer_flush exec_do*while () in1 print_integer exec_eq exec_k_when_autoconstructing (print_exec (boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup) (integer_mult) integer_shove integer_pop 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq boolean_dup exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank exec_dup_times () exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap () (in2) exec_dup_times (integer_mod boolean_yankdup boolean_eq) integer_add exec_while (integer_swap exec_dup_times (integer_mod boolean_yankdup boolean_eq) exec_pop (boolean_shove) boolean_not) exec_while (integer_mult exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_yank)) integer_dup exec_rot () () ())))))) ()) () ()))
Errors: [1 1 0 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 80
Size: 116
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 6.143
Median total errors in population: 6
Error averages by case: (0.758 0.901 0.436 0.574 0.578 0.997 0.194 0.092 0.755 0.858)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.962
Average program size in population (points): 107.405
Average percent parens in population: 0.302
Minimum age in population: 11.15625
Maximum age in population: 15.4921875
Average age in population: 13.83806640625
Median age in population: 13.826171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3646195
--- Timings ---
Current time: 1559314631163 milliseconds
Total Time:          29.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.1 seconds, 70.6%
Fitness Testing:      5.5 seconds, 18.3%
Report:               3.2 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 56                 
Correct output: -19                 | Program output: -19                
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 37                 
Correct output: 22                  | Program output: 88                 
Correct output: 29                  | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 64                 
Correct output: 11                  | Program output: 100                
Correct output: 51                  | Program output: 72                 
Correct output: 37                  | Program output: 60                 
Correct output: 16                  | Program output: 27                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 22                  | Program output: 56                 
Correct output: 14                  | Program output: 90                 
Correct output: 10                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 4                   | Program output: 9                  
Correct output: -84                 | Program output: 93                 
Correct output: -28                 | Program output: -28                
Correct output: -77                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -37                 | Program output: 76                 
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: 24                 
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -27                
Correct output: -82                 | Program output: 18                 
Correct output: -30                 | Program output: 4                  
Correct output: -78                 | Program output: 82                 
Correct output: -7                  | Program output: 86                 
Correct output: -95                 | Program output: -38                
Correct output: -87                 | Program output: -42                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -5                 
Correct output: -79                 | Program output: -79                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: 64                 
Correct output: -91                 | Program output: 58                 
Correct output: -70                 | Program output: -52                
Correct output: -43                 | Program output: 16                 
Correct output: -96                 | Program output: -8                 
Correct output: -94                 | Program output: 12                 
Correct output: -98                 | Program output: 86                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: 91                 
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 77                 
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: 38                 
Correct output: -45                 | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: 56                 
Correct output: -99                 | Program output: -98                
Correct output: 7                   | Program output: 51                 
Correct output: -94                 | Program output: 85                 
Correct output: -38                 | Program output: 29                 
Correct output: -48                 | Program output: 1                  
Correct output: -73                 | Program output: -58                
Correct output: -67                 | Program output: -49                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 0                  
Correct output: -88                 | Program output: -3                 
Correct output: -51                 | Program output: -51                
Correct output: -39                 | Program output: -18                
Correct output: -11                 | Program output: 12                 
Correct output: -77                 | Program output: 52                 
Correct output: -81                 | Program output: -48                
Correct output: -38                 | Program output: -38                
Correct output: -57                 | Program output: -57                
Correct output: -84                 | Program output: -50                
Correct output: -98                 | Program output: -15                
Correct output: -90                 | Program output: -42                
Correct output: -85                 | Program output: -45                
Correct output: -66                 | Program output: -66                
Correct output: -76                 | Program output: 14                 
Correct output: 18                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction tag_exec_340} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Lexicase best program: (in3 in4 exec_y_when_autoconstructing (print_integer exec_dup (integer_swap integer_yank integer_gte) boolean_rot boolean_frominteger integer_add integer_fromboolean in2 in2 integer_lte integer_fromboolean integer_mult) integer_dec integer_mult boolean_yankdup integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger in2 boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range () integer_shove integer_eq integer_dup_items exec_k_when_autoconstructing (integer_swap exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth integer_dup_items integer_lt integer_swap exec_empty exec_swap (boolean_invert_first_then_and exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank boolean_frominteger) exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap (exec_empty integer_inc exec_rot () (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add exec_while (integer_swap in2 tag_exec_340 (exec_yankdup boolean_rot)) integer_mod boolean_yankdup boolean_eq) exec_pop (boolean_shove) boolean_not) exec_while (exec_y_when_autoconstructing (exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ()))) ()) ()) ()))) ()) ()) () ()))
Lexicase best errors: [0 1 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 146
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction tag_exec_340} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Zero cases best program: (in3 in4 exec_y_when_autoconstructing (print_integer exec_dup (integer_swap integer_yank integer_gte) boolean_rot boolean_frominteger integer_add integer_fromboolean in2 in2 integer_lte integer_fromboolean integer_mult) integer_dec integer_mult boolean_yankdup integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger in2 boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range () integer_shove integer_eq integer_dup_items exec_k_when_autoconstructing (integer_swap exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth integer_dup_items integer_lt integer_swap exec_empty exec_swap (boolean_invert_first_then_and exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank boolean_frominteger) exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap (exec_empty integer_inc exec_rot () (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add exec_while (integer_swap in2 tag_exec_340 (exec_yankdup boolean_rot)) integer_mod boolean_yankdup boolean_eq) exec_pop (boolean_shove) boolean_not) exec_while (exec_y_when_autoconstructing (exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ()))) ()) ()) ()))) ()) ()) () ()))
Zero cases best errors: [0 1 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 146
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (147 310 147 147 386 117 799 147 116 147)
Population mean number of elite cases: 2.46
Count of perfect (error zero) individuals by case: (147 310 147 147 386 117 799 147 116 147)
Population mean number of perfect (error zero) cases: 2.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction 40} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_187} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_newline} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_mod})
Best program: (in4 boolean_invert_first_then_and boolean_dup_times exec_rot (integer_empty boolean_xor boolean_not integer_fromboolean exec_do*while () integer_pop print_integer integer_max boolean_flush integer_swap boolean_yankdup exec_k (print_integer integer_max integer_yankdup integer_swap boolean_yankdup exec_yankdup exec_swap (exec_k (exec_empty integer_max exec_y_when_autoconstructing () integer_flush) () boolean_dup_items print_newline exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt 40 integer_pop in2 boolean_stackdepth print_newline) boolean_dup integer_flush boolean_and exec_noop) (boolean_flush exec_dup_items) () integer_add tagged_187 exec_eq) (boolean_not exec_y ()) (boolean_yankdup boolean_dup_items boolean_shove boolean_or integer_yank boolean_eq exec_dup_items exec_empty exec_dup () exec_flush integer_inc integer_lt) boolean_dup_times print_newline integer_dup_items) integer_mod) ()) () ())
Errors: [0 1 0 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 77
Size: 100
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 7.537
Median total errors in population: 8
Error averages by case: (0.853 0.69 0.853 0.853 0.614 0.883 0.201 0.853 0.884 0.853)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.742
Average program size in population (points): 96.75
Average percent parens in population: 0.288
Minimum age in population: 12.6875
Maximum age in population: 17.314453125
Average age in population: 15.461421875
Median age in population: 15.509765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3979807
--- Timings ---
Current time: 1559314633836 milliseconds
Total Time:          32.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.1 seconds, 71.1%
Fitness Testing:      5.8 seconds, 17.9%
Report:               3.5 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 82                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 73                 
Correct output: 23                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 26                 
Correct output: 29                  | Program output: 100                
Correct output: 15                  | Program output: 87                 
Correct output: 39                  | Program output: 80                 
Correct output: 11                  | Program output: 40                 
Correct output: 51                  | Program output: 81                 
Correct output: 37                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 55                 
Correct output: 1                   | Program output: 22                 
Correct output: 9                   | Program output: 53                 
Correct output: 7                   | Program output: 86                 
Correct output: 22                  | Program output: 81                 
Correct output: 14                  | Program output: 57                 
Correct output: 10                  | Program output: 51                 
Correct output: 12                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: -84                 | Program output: -84                
Correct output: -28                 | Program output: 19                 
Correct output: -77                 | Program output: -8                 
Correct output: -87                 | Program output: -40                
Correct output: -37                 | Program output: 66                 
Correct output: -55                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: -6                 
Correct output: -92                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -16                
Correct output: -87                 | Program output: -29                
Correct output: -94                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 69                 
Correct output: -70                 | Program output: 2                  
Correct output: -43                 | Program output: 52                 
Correct output: -96                 | Program output: -86                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -61                
Correct output: -83                 | Program output: -5                 
Correct output: -80                 | Program output: 90                 
Correct output: -46                 | Program output: 52                 
Correct output: -25                 | Program output: -20                
Correct output: -26                 | Program output: 6                  
Correct output: -71                 | Program output: 44                 
Correct output: -58                 | Program output: -26                
Correct output: -45                 | Program output: -38                
Correct output: -92                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 15                 
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: 99                 
Correct output: -73                 | Program output: -40                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: 100                
Correct output: -100                | Program output: -68                
Correct output: -88                 | Program output: -35                
Correct output: -51                 | Program output: 17                 
Correct output: -39                 | Program output: -32                
Correct output: -11                 | Program output: 64                 
Correct output: -77                 | Program output: 60                 
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: 100                
Correct output: -57                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -3                 
Correct output: -76                 | Program output: -7                 
Correct output: 18                  | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_exec_603} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank})
Lexicase best program: (in3 integer_empty exec_y_when_autoconstructing (print_integer exec_dup (integer_swap integer_yank integer_gte) boolean_eq integer_swap integer_yank integer_gte) boolean_rot boolean_frominteger integer_add integer_fromboolean in2 integer_lte exec_if (boolean_dup print_boolean integer_empty boolean_empty integer_rot integer_div integer_swap integer_min boolean_yank) () integer_div in4 exec_shove (boolean_invert_second_then_and) boolean_and exec_rot (exec_yank integer_add exec_if (boolean_eq integer_sub in1 integer_empty integer_empty tag_exec_603 (integer_gte integer_yank)) ()) () ())
Lexicase best errors: [0 0 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 57
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_exec_603} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank})
Zero cases best program: (in3 integer_empty exec_y_when_autoconstructing (print_integer exec_dup (integer_swap integer_yank integer_gte) boolean_eq integer_swap integer_yank integer_gte) boolean_rot boolean_frominteger integer_add integer_fromboolean in2 integer_lte exec_if (boolean_dup print_boolean integer_empty boolean_empty integer_rot integer_div integer_swap integer_min boolean_yank) () integer_div in4 exec_shove (boolean_invert_second_then_and) boolean_and exec_rot (exec_yank integer_add exec_if (boolean_eq integer_sub in1 integer_empty integer_empty tag_exec_603 (integer_gte integer_yank)) ()) () ())
Zero cases best errors: [0 0 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 57
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (53 53 188 5 136 188 376 5 5 188)
Population mean number of elite cases: 1.20
Count of perfect (error zero) individuals by case: (53 53 188 5 136 188 376 5 5 188)
Population mean number of perfect (error zero) cases: 1.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_518} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_322} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_807} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank})
Best program: (in3 integer_div exec_y_when_autoconstructing (print_integer exec_dup (integer_swap integer_yank integer_gte) boolean_rot boolean_frominteger integer_add integer_fromboolean in2 integer_lte integer_empty integer_mult) integer_dec integer_dec integer_div in2 integer_fromboolean tag_integer_518 boolean_invert_second_then_and boolean_rot tagged_322 integer_gte exec_if (boolean_dup) (print_boolean integer_empty boolean_empty integer_rot integer_div integer_swap integer_min boolean_yank) integer_div in4 exec_shove (integer_dup_items) boolean_and exec_rot (exec_yank integer_add exec_if (boolean_eq integer_sub integer_lt in2 integer_empty tag_integer_807 integer_gte integer_yank) ()) () ())
Errors: [0 0 1 0 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 53
Size: 64
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 8.803
Median total errors in population: 10
Error averages by case: (0.947 0.947 0.812 0.995 0.864 0.812 0.624 0.995 0.995 0.812)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.069
Average program size in population (points): 96.563
Average percent parens in population: 0.283
Minimum age in population: 13.78125
Maximum age in population: 18.75
Average age in population: 16.785708984375
Median age in population: 16.83984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4371276
--- Timings ---
Current time: 1559314636672 milliseconds
Total Time:          35.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.1 seconds, 71.2%
Fitness Testing:      6.2 seconds, 17.6%
Report:               3.8 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 82                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 73                 
Correct output: 23                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 26                 
Correct output: 29                  | Program output: 100                
Correct output: 15                  | Program output: 87                 
Correct output: 39                  | Program output: 80                 
Correct output: 11                  | Program output: 40                 
Correct output: 51                  | Program output: 81                 
Correct output: 37                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 55                 
Correct output: 1                   | Program output: 22                 
Correct output: 9                   | Program output: 53                 
Correct output: 7                   | Program output: 86                 
Correct output: 22                  | Program output: 81                 
Correct output: 14                  | Program output: 57                 
Correct output: 10                  | Program output: 51                 
Correct output: 12                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: -84                 | Program output: -84                
Correct output: -28                 | Program output: 71                 
Correct output: -77                 | Program output: -19                
Correct output: -87                 | Program output: 3                  
Correct output: -37                 | Program output: 66                 
Correct output: -55                 | Program output: 63                 
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82
               
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -88                
Correct output: -87                 | Program output: 56                 
Correct output: -94                 | Program output: -13                
Correct output: -86                 | Program output: -11                
Correct output: -79                 | Program output: -70                
Correct output: -12                 | Program output: 28                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 69                 
Correct output: -70                 | Program output: -70                
Correct output: -43                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -61                
Correct output: -83                 | Program output: -38                
Correct output: -80                 | Program output: 90                 
Correct output: -46                 | Program output: 68                 
Correct output: -25                 | Program output: -20                
Correct output: -26                 | Program output: 83                 
Correct output: -71                 | Program output: 75                 
Correct output: -58                 | Program output: -26                
Correct output: -45                 | Program output: -38                
Correct output: -92                 | Program output: 82                 
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: 70                 
Correct output: 7                   | Program output: 15                 
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: 11                 
Correct output: -62                 | Program output: 64                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -51                 | Program output: 96                 
Correct output: -39                 | Program output: -24                
Correct output: -11                 | Program output: 64                 
Correct output: -77                 | Program output: 60                 
Correct output: -81                 | Program output: 17                 
Correct output: -38                 | Program output: 40                 
Correct output: -57                 | Program output: 64                 
Correct output: -84                 | Program output: 34                 
Correct output: -98                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: 31                 
Correct output: -66                 | Program output: 3                  
Correct output: -76                 | Program output: -7                 
Correct output: 18                  | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Lexicase best program: (in3 in4 exec_shove (boolean_shove boolean_shove boolean_dup boolean_shove integer_dup_times exec_do*while () in1) print_integer exec_eq exec_k_when_autoconstructing (integer_gte integer_dup_times exec_do*while () in1) (integer_mult) integer_dec integer_mult boolean_yankdup integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger in2 boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt integer_swap exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank boolean_frominteger) exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap (exec_empty exec_do*count (exec_rot () (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) exec_do*range (exec_while (integer_swap in2) tag_exec_340 (integer_sub boolean_rot) exec_while (integer_mult exec_dup_items integer_add integer_gt exec_stackdepth boolean_not) exec_while (exec_y_when_autoconstructing (exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ())))))) ())) ()))) ()) () ()))
Lexicase best errors: [0 1 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 136
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Zero cases best program: (in3 in4 exec_shove (boolean_shove boolean_shove boolean_dup boolean_shove integer_dup_times exec_do*while () in1) print_integer exec_eq exec_k_when_autoconstructing (integer_gte integer_dup_times exec_do*while () in1) (integer_mult) integer_dec integer_mult boolean_yankdup integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger in2 boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt integer_swap exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank boolean_frominteger) exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap (exec_empty exec_do*count (exec_rot () (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) exec_do*range (exec_while (integer_swap in2) tag_exec_340 (integer_sub boolean_rot) exec_while (integer_mult exec_dup_items integer_add integer_gt exec_stackdepth boolean_not) exec_while (exec_y_when_autoconstructing (exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ())))))) ())) ()))) ()) () ()))
Zero cases best errors: [0 1 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 136
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (713 189 607 187 391 108 607 1000 108 108)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (713 189 607 187 391 108 607 0 108 108)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Best program: (in3 in4 exec_shove (boolean_shove boolean_shove boolean_dup boolean_shove integer_dup_times exec_do*while () in1) print_integer exec_eq exec_k_when_autoconstructing (integer_gte integer_dup_times exec_do*while () in1) (integer_mult) integer_dec integer_mult boolean_yankdup integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger in2 boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt integer_swap exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank boolean_frominteger) exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap (exec_empty exec_do*count (exec_rot () (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) exec_do*range (exec_while (integer_swap in2) tag_exec_340 (integer_sub boolean_rot) exec_while (integer_mult exec_dup_items integer_add integer_gt exec_stackdepth boolean_not) exec_while (exec_y_when_autoconstructing (exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ())))))) ())) ()))) ()) () ()))
Errors: [0 1 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 93
Size: 136
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 6.982
Median total errors in population: 7
Error averages by case: (0.287 0.811 0.393 0.813 0.609 0.892 0.393 1.0 0.892 0.892)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 69.679
Average program size in population (points): 98.799
Average percent parens in population: 0.280
Minimum age in population: 15.40234375
Maximum age in population: 20.21826171875
Average age in population: 18.195021484375
Median age in population: 18.234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4669719
--- Timings ---
Current time: 1559314639221 milliseconds
Total Time:          37.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.0 seconds, 71.3%
Fitness Testing:      6.5 seconds, 17.2%
Report:               4.2 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 82                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 73                 
Correct output: 23                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 26                 
Correct output: 29                  | Program output: 100                
Correct output: 15                  | Program output: 87                 
Correct output: 39                  | Program output: 80                 
Correct output: 11                  | Program output: 40                 
Correct output: 51                  | Program output: 81                 
Correct output: 37                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 55                 
Correct output: 1                   | Program output: 22                 
Correct output: 9                   | Program output: 53                 
Correct output: 7                   | Program output: 86                 
Correct output: 22                  | Program output: 81                 
Correct output: 14                  | Program output: 57                 
Correct output: 10                  | Program output: 51                 
Correct output: 12                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: -84                 | Program output: -84                
Correct output: -28                 | Program output: 19                 
Correct output: -77                 | Program output: -8                 
Correct output: -87                 | Program output: -40                
Correct output: -37                 | Program output: 66                 
Correct output: -55                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: -6                 
Correct output: -92                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -16                
Correct output: -87                 | Program output: -29                
Correct output: -94                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 69                 
Correct output: -70                 | Program output: 2                  
Correct output: -43                 | Program output: 52                 
Correct output: -96                 | Program output: -86                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -61                
Correct output: -83                 | Program output: -5                 
Correct output: -80                 | Program output: 90                 
Correct output: -46                 | Program output: 52                 
Correct output: -25                 | Program output: -20                
Correct output: -26                 | Program output: 6                  
Correct output: -71                 | Program output: 44                 
Correct output: -58                 | Program output: -26                
Correct output: -45                 | Program output: -38                
Correct output: -92                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 15                 
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: 99                 
Correct output: -73                 | Program output: -40                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: 100                
Correct output: -100                | Program output: -68                
Correct output: -88                 | Program output: -35                
Correct output: -51                 | Program output: 17                 
Correct output: -39                 | Program output: -32                
Correct output: -11                 | Program output: 64                 
Correct output: -77                 | Program output: 60                 
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: 100                
Correct output: -57                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -3                 
Correct output: -76                 | Program output: -7                 
Correct output: 18                  | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_724} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 1, :instruction tagged_309} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Lexicase best program: (in3 integer_lte exec_y_when_autoconstructing (print_integer exec_eq exec_k_when_autoconstructing (print_exec (boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup) (integer_mult) integer_shove integer_pop 72 integer_shove boolean_frominteger tagged_724 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (integer_yank)) (exec_k_when_autoconstructing (print_newline in2 exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_empty) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank exec_dup_times () exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap () (tagged_309) exec_do*count (exec_rot (exec_pop (in2 boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add boolean_not) exec_while (integer_mult exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ())) () ())))))) ())) () ())))
Lexicase best errors: [1 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 115
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_724} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 1, :instruction tagged_309} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Zero cases best program: (in3 integer_lte exec_y_when_autoconstructing (print_integer exec_eq exec_k_when_autoconstructing (print_exec (boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup) (integer_mult) integer_shove integer_pop 72 integer_shove boolean_frominteger tagged_724 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (integer_yank)) (exec_k_when_autoconstructing (print_newline in2 exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_empty) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank exec_dup_times () exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap () (tagged_309) exec_do*count (exec_rot (exec_pop (in2 boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add boolean_not) exec_while (integer_mult exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ())) () ())))))) ())) () ())))
Zero cases best errors: [1 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 115
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 473 200 221 1000 1000 224 224 863 218)
Population mean number of elite cases: 5.42
Count of perfect (error zero) individuals by case: (0 473 200 221 0 0 224 224 863 218)
Population mean number of perfect (error zero) cases: 2.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Best program: (in3 integer_lte exec_y_when_autoconstructing (print_integer exec_eq exec_k_when_autoconstructing (print_exec (boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup) (integer_mult) integer_shove integer_pop 72 integer_shove boolean_frominteger integer_fromboolean exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (integer_yank)) (exec_k_when_autoconstructing (print_newline in2 exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_empty) (exec_swap (in3 boolean_or) (integer_yankdup exec_stackdepth boolean_yank exec_dup_times () exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or exec_swap () (exec_empty) exec_do*count (exec_rot (exec_pop (in2 boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add exec_while (print_boolean exec_dup_times (integer_mod boolean_yankdup boolean_eq) exec_pop (boolean_shove) boolean_not) exec_while (integer_mult exec_do*times (integer_add integer_gt boolean_shove integer_gt integer_div)) integer_dup exec_rot () () ()))) () ())))))) ())) () ())))
Errors: [1 1 1 0 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 82
Size: 126
Percent parens: 0.349
--- Population Statistics ---
Average total errors in population: 7.577
Median total errors in population: 8
Error averages by case: (1.0 0.527 0.8 0.779 1.0 1.0 0.776 0.776 0.137 0.782)
Error minima by case: (1 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 76.794
Average program size in population (points): 110.219
Average percent parens in population: 0.294
Minimum age in population: 16.8046875
Maximum age in population: 21.7734375
Average age in population: 19.69399072265625
Median age in population: 19.7401123046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5020748
--- Timings ---
Current time: 1559314642035 milliseconds
Total Time:          40.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.2 seconds, 71.7%
Fitness Testing:      6.9 seconds, 16.9%
Report:               4.5 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 48                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: -77                
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 85                 
Correct output: 6                   | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 29                  | Program output: 75                 
Correct output: 15                  | Program output: 28                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 51                  | Program output: 51                 
Correct output: 37                  | Program output: 51                 
Correct output: 16                  | Program output: 53                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 36                 
Correct output: 22                  | Program output: 26                 
Correct output: 14                  | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 90                 
Correct output: 4                   | Program output: 87                 
Correct output: -84                 | Program output: 99                 
Correct output: -28                 | Program output: 69                 
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 98                 
Correct output: -37                 | Program output: -33                
Correct output: -55                 | Program output: -42                
Correct output: -80                 | Program output: -7                 
Correct output: -41                 | Program output: 75                 
Correct output: -92                 | Program output: 67                 
Correct output: -82                 | Program output: 71                 
Correct output: -30                 | Program output: -26                
Correct output: -78                 | Program output: 12                 
Correct output: -7                  | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -29                
Correct output: -86                 | Program output: 8                  
Correct output: -79                 | Program output: 77                 
Correct output: -12                 | Program output: 88                 
Correct output: -97                 | Program output: 60                 
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -54                
Correct output: -43                 | Program output: 80                 
Correct output: -96                 | Program output: -53                
Correct output: -94                 | Program output: -51                
Correct output: -98                 | Program output: -74                
Correct output: -83                 | Program output: 68                 
Correct output: -80                 | Program output: -80                
Correct output: -46                 | Program output: -26                
Correct output: -25                 | Program output: 99                 
Correct output: -26                 | Program output: -8                 
Correct output: -71                 | Program output: 60                 
Correct output: -58                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -44                
Correct output: -85                 | Program output: 31                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: 59                 
Correct output: -38                 | Program output: 52                 
Correct output: -48                 | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: 36                 
Correct output: -62                 | Program output: 50                 
Correct output: -100                | Program output: 32                 
Correct output: -88                 | Program output: -2                 
Correct output: -51                 | Program output: -37                
Correct output: -39                 | Program output: -39                
Correct output: -11                 | Program output: -11                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 62                 
Correct output: -38                 | Program output: 34                 
Correct output: -57                 | Program output: 10                 
Correct output: -84                 | Program output: -34                
Correct output: -98                 | Program output: 51                 
Correct output: -90                 | Program output: -70                
Correct output: -85                 | Program output: -41                
Correct output: -66                 | Program output: 79                 
Correct output: -76                 | Program output: -76                
Correct output: 18                  | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_22} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Lexicase best program: (in3 in4 integer_gte tagged_22 integer_shove in2 print_integer exec_eq exec_k_when_autoconstructing (print_exec (boolean_invert_second_then_and integer_inc) boolean_rot exec_eq exec_k_when_autoconstructing (integer_gte integer_dup_times exec_do*while () in1) (integer_mult) integer_dec integer_mult) (boolean_yankdup) integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger in2 boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_yankdup exec_stackdepth boolean_yank boolean_or integer_yankdup exec_stackdepth boolean_yank exec_dup_times () exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or integer_lte) exec_empty) (exec_do*count (exec_rot (exec_pop (exec_dup (boolean_invert_second_then_and) integer_flush tag_exec_340 () integer_sub boolean_rot) exec_swap (exec_while (integer_lt exec_dup_times (integer_mod boolean_yankdup boolean_eq) exec_pop (boolean_shove) boolean_not) exec_while (integer_mult exec_dup_items integer_add integer_gt exec_stackdepth boolean_not) exec_while (exec_y_when_autoconstructing (exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ())) ()) () ()))) () ()))
Lexicase best errors: [1 1 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 132
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_22} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Zero cases best program: (in3 in4 integer_gte tagged_22 integer_shove in2 print_integer exec_eq exec_k_when_autoconstructing (print_exec (boolean_invert_second_then_and integer_inc) boolean_rot exec_eq exec_k_when_autoconstructing (integer_gte integer_dup_times exec_do*while () in1) (integer_mult) integer_dec integer_mult) (boolean_yankdup) integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger in2 boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_yankdup exec_stackdepth boolean_yank boolean_or integer_yankdup exec_stackdepth boolean_yank exec_dup_times () exec_s_when_autoconstructing (in1) () (integer_rot) boolean_or integer_lte) exec_empty) (exec_do*count (exec_rot (exec_pop (exec_dup (boolean_invert_second_then_and) integer_flush tag_exec_340 () integer_sub boolean_rot) exec_swap (exec_while (integer_lt exec_dup_times (integer_mod boolean_yankdup boolean_eq) exec_pop (boolean_shove) boolean_not) exec_while (integer_mult exec_dup_items integer_add integer_gt exec_stackdepth boolean_not) exec_while (exec_y_when_autoconstructing (exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ())) ()) () ()))) () ()))
Zero cases best errors: [1 1 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 132
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 138 1000 902 1000 290 1000 137)
Population mean number of elite cases: 7.47
Count of perfect (error zero) individuals by case: (0 0 0 138 0 902 0 290 0 137)
Population mean number of perfect (error zero) cases: 1.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte exec_k_when_autoconstructing (exec_do*while () in2) (print_integer integer_dup exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot exec_yank) integer_mult) integer_shove integer_add 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (print_boolean integer_empty boolean_empty integer_rot integer_div integer_swap in3 boolean_or) integer_yankdup exec_stackdepth boolean_yank exec_dup_times () exec_s_when_autoconstructing (in1) (integer_rot) (boolean_or exec_swap (exec_empty exec_do*count (boolean_dup_times) exec_pop (exec_when (exec_s (exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add exec_while (integer_swap integer_add exec_dup_times (integer_mod boolean_yankdup boolean_dup_items) exec_pop (integer_div boolean_not) exec_while (integer_mult exec_do*times (integer_add integer_gt integer_gt integer_gt integer_div) integer_dup exec_rot () () ())))) () ()))) ())) ()) () ())))
Errors: [1 1 1 0 1 0 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 80
Size: 119
Percent parens: 0.328
--- Population Statistics ---
Average total errors in population: 8.533
Median total errors in population: 9
Error averages by case: (1.0 1.0 1.0 0.862 1.0 0.098 1.0 0.71 1.0 0.863)
Error minima by case: (1 1 1 0 1 0 1 0 1 0)
Average genome size in population (length): 67.334
Average program size in population (points): 95.054
Average percent parens in population: 0.276
Minimum age in population: 17.8046875
Maximum age in population: 23.287841796875
Average age in population: 21.19023278808594
Median age in population: 21.30731201171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5372628
--- Timings ---
Current time: 1559314644582 milliseconds
Total Time:          43.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.1 seconds, 71.9%
Fitness Testing:      7.2 seconds, 16.7%
Report:               4.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 48                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: -77                
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 85                 
Correct output: 6                   | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 29                  | Program output: 75                 
Correct output: 15                  | Program output: 28                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 51                  | Program output: 51                 
Correct output: 37                  | Program output: 51                 
Correct output: 16                  | Program output: 53                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 36                 
Correct output: 22                  | Program output: 26                 
Correct output: 14                  | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 90                 
Correct output: 4                   | Program output: 87                 
Correct output: -84                 | Program output: 99                 
Correct output: -28                 | Program output: 69                 
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 98                 
Correct output: -37                 | Program output: -33                
Correct output: -55                 | Program output: -42                
Correct output: -80                 | Program output: -7                 
Correct output: -41                 | Program output: 75                 
Correct output: -92                 | Program output: 67                 
Correct output: -82                 | Program output: 71                 
Correct output: -30                 | Program output: -26                
Correct output: -78                 | Program output: 12                 
Correct output: -7                  | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -29                
Correct output: -86                 | Program output: 8                  
Correct output: -79                 | Program output: 77                 
Correct output: -12                 | Program output: 88                 
Correct output: -97                 | Program output: 60                 
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -54                
Correct output: -43                 | Program output: 80                 
Correct output: -96                 | Program output: -53                
Correct output: -94                 | Program output: -51                
Correct output: -98                 | Program output: -74                
Correct output: -83                 | Program output: 68                 
Correct output: -80                 | Program output: -80                
Correct output: -46                 | Program output: -26                
Correct output: -25                 | Program output: 99                 
Correct output: -26                 | Program output: -8                 
Correct output: -71                 | Program output: 60                 
Correct output: -58                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -44                
Correct output: -85                 | Program output: 31                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: 59                 
Correct output: -38                 | Program output: 52                 
Correct output: -48                 | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: 36                 
Correct output: -62                 | Program output: 50                 
Correct output: -100                | Program output: 32                 
Correct output: -88                 | Program output: -2                 
Correct output: -51                 | Program output: -37                
Correct output: -39                 | Program output: -39                
Correct output: -11                 | Program output: -11                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 62                 
Correct output: -38                 | Program output: 34                 
Correct output: -57                 | Program output: 10                 
Correct output: -84                 | Program output: -34                
Correct output: -98                 | Program output: 51                 
Correct output: -90                 | Program output: -70                
Correct output: -85                 | Program output: -41                
Correct output: -66                 | Program output: 79                 
Correct output: -76                 | Program output: -76                
Correct output: 18                  | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction tag_integer_807} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank})
Lexicase best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while (in2) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and boolean_flush integer_swap integer_inc exec_k (exec_swap (exec_shove (print_boolean integer_empty boolean_empty integer_rot integer_div integer_swap integer_min boolean_yank)) (integer_div in4 exec_shove (integer_dup_items) boolean_and) exec_rot () (exec_yank integer_add exec_if (boolean_eq integer_sub) (in1 in2 integer_min tag_integer_807 integer_gte integer_yank)) ()) ()) ()))
Lexicase best errors: [0 0 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 60
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction tag_integer_807} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank})
Zero cases best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while (in2) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and boolean_flush integer_swap integer_inc exec_k (exec_swap (exec_shove (print_boolean integer_empty boolean_empty integer_rot integer_div integer_swap integer_min boolean_yank)) (integer_div in4 exec_shove (integer_dup_items) boolean_and) exec_rot () (exec_yank integer_add exec_if (boolean_eq integer_sub) (in1 in2 integer_min tag_integer_807 integer_gte integer_yank)) ()) ()) ()))
Zero cases best errors: [0 0 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 60
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (927 607 1000 925 1000 925 2 926 607 607)
Population mean number of elite cases: 7.53
Count of perfect (error zero) individuals by case: (927 607 0 925 0 925 2 926 607 607)
Population mean number of perfect (error zero) cases: 5.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_322} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 2, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub})
Best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in2 print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq tagged_322 integer_gte) exec_if (boolean_dup) (print_boolean integer_empty boolean_empty integer_rot integer_div in1)) (integer_rot) integer_lte exec_swap () (integer_dup) exec_do*count (exec_rot (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub))))) () ())) () ()))))
Errors: [0 0 1 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 50
Size: 77
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 4.474
Median total errors in population: 3
Error averages by case: (0.073 0.393 1.0 0.075 1.0 0.075 0.998 0.074 0.393 0.393)
Error minima by case: (0 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 69.926
Average program size in population (points): 101.001
Average percent parens in population: 0.300
Minimum age in population: 19.8125
Maximum age in population: 24.53094482421875
Average age in population: 22.73260412597656
Median age in population: 22.84283447265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5651699
--- Timings ---
Current time: 1559314647328 milliseconds
Total Time:          46.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.3 seconds, 72.4%
Fitness Testing:      7.5 seconds, 16.4%
Report:               5.1 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 48                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: -77                
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 85                 
Correct output: 6                   | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 29                  | Program output: 75                 
Correct output: 15                  | Program output: 28                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 51                  | Program output: 51                 
Correct output: 37                  | Program output: 51                 
Correct output: 16                  | Program output: 53                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 36                 
Correct output: 22                  | Program output: 26                 
Correct output: 14                  | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 90                 
Correct output: 4                   | Program output: 87                 
Correct output: -84                 | Program output: 99                 
Correct output: -28                 | Program output: 69                 
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 98                 
Correct output: -37                 | Program output: -33                
Correct output: -55                 | Program output: -42                
Correct output: -80                 | Program output: -7                 
Correct output: -41                 | Program output: 75                 
Correct output: -92                 | Program output: 67                 
Correct output: -82                 | Program output: 71                 
Correct output: -30                 | Program output: -26                
Correct output: -78                 | Program output: 12                 
Correct output: -7                  | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -29                
Correct output: -86                 | Program output: 8                  
Correct output: -79                 | Program output: 77                 
Correct output: -12                 | Program output: 88                 
Correct output: -97                 | Program output: 60                 
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -54                
Correct output: -43                 | Program output: 80                 
Correct output: -96                 | Program output: -53                
Correct output: -94                 | Program output: -51                
Correct output: -98                 | Program output: -74                
Correct output: -83                 | Program output: 68                 
Correct output: -80                 | Program output: -80                
Correct output: -46                 | Program output: -26                
Correct output: -25                 | Program output: 99                 
Correct output: -26                 | Program output: -8                 
Correct output: -71                 | Program output: 60                 
Correct output: -58                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -44                
Correct output: -85                 | Program output: 31                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: 59                 
Correct output: -38                 | Program output: 52                 
Correct output: -48                 | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: 36                 
Correct output: -62                 | Program output: 50                 
Correct output: -100                | Program output: 32                 
Correct output: -88                 | Program output: -2                 
Correct output: -51                 | Program output: -37                
Correct output: -39                 | Program output: -39                
Correct output: -11                 | Program output: -11                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 62                 
Correct output: -38                 | Program output: 34                 
Correct output: -57                 | Program output: 10                 
Correct output: -84                 | Program output: -34                
Correct output: -98                 | Program output: 51                 
Correct output: -90                 | Program output: -70                
Correct output: -85                 | Program output: -41                
Correct output: -66                 | Program output: 79                 
Correct output: -76                 | Program output: -76                
Correct output: 18                  | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k})
Lexicase best program: (exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in2) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup) (integer_mult) exec_empty integer_add 72 integer_shove boolean_frominteger tagged_668 boolean_frominteger in2 boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () integer_yank) (exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq integer_dup_items integer_rot integer_div integer_swap integer_min boolean_yank)) (integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (exec_noop boolean_shove integer_dec in3) (boolean_rot integer_min print_integer) exec_k () ()))) ())))
Lexicase best errors: [1 1 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 80
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k})
Zero cases best program: (exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in2) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup) (integer_mult) exec_empty integer_add 72 integer_shove boolean_frominteger tagged_668 boolean_frominteger in2 boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_yank) () integer_yank) (exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq integer_eq integer_dup_items integer_rot integer_div integer_swap integer_min boolean_yank)) (integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (exec_noop boolean_shove integer_dec in3) (boolean_rot integer_min print_integer) exec_k () ()))) ())))
Zero cases best errors: [1 1 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 80
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 191 714 714 193 193 722 714 1000)
Population mean number of elite cases: 6.44
Count of perfect (error zero) individuals by case: (0 0 191 714 714 193 193 722 714 0)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_518} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction 10} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Best program: (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in2) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_flush integer_shove integer_min integer_sub integer_fromboolean tag_integer_518 boolean_invert_second_then_and boolean_rot boolean_dup exec_do*range (boolean_eq integer_eq integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and) (exec_swap (10 boolean_or) (integer_stackdepth exec_stackdepth boolean_yank exec_do*range (boolean_yank exec_swap (boolean_invert_first_then_and) (in3 in3 integer_rot) boolean_or exec_swap () (exec_empty) exec_do*count (exec_rot (exec_pop (in2 boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add exec_while (integer_swap exec_dup_times (integer_mod boolean_yankdup boolean_eq) exec_pop (boolean_shove) boolean_not) exec_while (integer_mult exec_do*times (integer_add integer_gt exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ()))) () ())))))))
Errors: [1 1 1 0 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 79
Size: 110
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 6.559
Median total errors in population: 6
Error averages by case: (1.0 1.0 0.809 0.286 0.286 0.807 0.807 0.278 0.286 1.0)
Error minima by case: (1 1 0 0 0 0 0 0 0 1)
Average genome size in population (length): 72.273
Average program size in population (points): 105.049
Average percent parens in population: 0.304
Minimum age in population: 20.8125
Maximum age in population: 25.94863891601562
Average age in population: 23.97815090942383
Median age in population: 24.08514404296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5907999
--- Timings ---
Current time: 1559314650098 milliseconds
Total Time:          48.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.3 seconds, 72.7%
Fitness Testing:      7.8 seconds, 16.1%
Report:               5.3 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 82                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 73                 
Correct output: 23                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 26                 
Correct output: 29                  | Program output: 100                
Correct output: 15                  | Program output: 87                 
Correct output: 39                  | Program output: 80                 
Correct output: 11                  | Program output: 40                 
Correct output: 51                  | Program output: 81                 
Correct output: 37                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 55                 
Correct output: 1                   | Program output: 22                 
Correct output: 9                   | Program output: 53                 
Correct output: 7                   | Program output: 86                 
Correct output: 22                  | Program output: 81                 
Correct output: 14                  | Program output: 57                 
Correct output: 10                  | Program output: 51                 
Correct output: 12                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: -84                 | Program output: -84                
Correct output: -28                 | Program output: 19                 
Correct output: -77                 | Program output: -8                 
Correct output: -87                 | Program output: -40                
Correct output: -37                 | Program output: 66                 
Correct output: -55                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: -6                 
Correct output: -92                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -16                
Correct output: -87                 | Program output: -29                
Correct output: -94                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -18                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 69                 
Correct output: -70                 | Program output: 2                  
Correct output: -43                 | Program output: 52                 
Correct output: -96                 | Program output: -86                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -61                
Correct output: -83                 | Program output: -5                 
Correct output: -80                 | Program output: 90                 
Correct output: -46                 | Program output: 52                 
Correct output: -25                 | Program output: -20                
Correct output: -26                 | Program output: 6                  
Correct output: -71                 | Program output: 44                 
Correct output: -58                 | Program output: -26                
Correct output: -45                 | Program output: -38                
Correct output: -92                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 15                 
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: 99                 
Correct output: -73                 | Program output: -40                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: 100                
Correct output: -100                | Program output: -68                
Correct output: -88                 | Program output: -35                
Correct output: -51                 | Program output: 17                 
Correct output: -39                 | Program output: -32                
Correct output: -11                 | Program output: 64                 
Correct output: -77                 | Program output: 60                 
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: 100                
Correct output: -57                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -3                 
Correct output: -76                 | Program output: -7                 
Correct output: 18                  | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction 72} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Lexicase best program: (in3 exec_eq exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times) exec_do*while () in2) print_integer exec_flush boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_pop 72 integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_dec integer_min boolean_frominteger tagged_668 exec_pop (exec_yankdup exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq boolean_xor integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and exec_swap (in3 boolean_or) (integer_add exec_if (boolean_eq exec_noop) (in1 exec_s_when_autoconstructing (in1) () (integer_rot boolean_or exec_swap (exec_empty exec_do*count (exec_rot (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add) exec_while (integer_swap in2 exec_dup_times (boolean_or boolean_yankdup boolean_eq) exec_pop (boolean_shove) exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ())) () ())) ())))) ()))) ()) () ())) ()) () ()))
Lexicase best errors: [1 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 140
Percent parens: 0.336
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction 72} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Zero cases best program: (in3 exec_eq exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times) exec_do*while () in2) print_integer exec_flush boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_pop 72 integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_dec integer_min boolean_frominteger tagged_668 exec_pop (exec_yankdup exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq boolean_xor integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and exec_swap (in3 boolean_or) (integer_add exec_if (boolean_eq exec_noop) (in1 exec_s_when_autoconstructing (in1) () (integer_rot boolean_or exec_swap (exec_empty exec_do*count (exec_rot (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add) exec_while (integer_swap in2 exec_dup_times (boolean_or boolean_yankdup boolean_eq) exec_pop (boolean_shove) exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ())) () ())) ())))) ()))) ()) () ())) ()) () ()))
Zero cases best errors: [1 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 140
Percent parens: 0.336
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 512 1 1000 1000 939 419 417 1000)
Population mean number of elite cases: 7.29
Count of perfect (error zero) individuals by case: (0 0 512 1 0 0 939 419 417 0)
Population mean number of perfect (error zero) cases: 2.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction 72} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_340} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot})
Best program: (in3 exec_eq exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times) exec_do*while () in2) print_integer exec_flush boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_pop 72 integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_dec integer_min boolean_frominteger tagged_668 exec_pop (exec_yankdup exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq boolean_xor integer_dup_items integer_lt exec_do*range (exec_empty exec_swap (boolean_invert_first_then_and exec_swap (in3 boolean_or) (integer_add exec_if (boolean_eq exec_noop) (in1 exec_s_when_autoconstructing (in1) () (integer_rot boolean_or exec_swap (exec_empty exec_do*count (exec_rot (exec_pop (exec_dup (boolean_invert_second_then_and exec_shove (tag_exec_340 (integer_sub boolean_rot) integer_add) exec_while (integer_swap in2 exec_dup_times (boolean_or boolean_yankdup boolean_eq) exec_pop (boolean_shove) exec_stackdepth integer_gt integer_div)) integer_dup exec_rot () () ())) () ())) ())))) ()))) ()) () ())) ()) () ()))
Errors: [1 1 1 0 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 93
Size: 140
Percent parens: 0.336
--- Population Statistics ---
Average total errors in population: 7.712
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.488 0.999 1.0 1.0 0.061 0.581 0.583 1.0)
Error minima by case: (1 1 0 0 1 1 0 0 0 1)
Average genome size in population (length): 79.528
Average program size in population (points): 117.806
Average percent parens in population: 0.319
Minimum age in population: 23.17245483398438
Maximum age in population: 27.37924194335938
Average age in population: 25.47054521179199
Median age in population: 25.48908233642578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 122
Genome diversity (% unique genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 127
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6086150
--- Timings ---
Current time: 1559314652455 milliseconds
Total Time:          51.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.1 seconds, 72.6%
Fitness Testing:      8.0 seconds, 15.7%
Report:               5.9 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 48                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: -77                
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output:                    
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 85                 
Correct output: 6                   | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 29                  | Program output: 75                 
Correct output: 15                  | Program output: 28                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 51                  | Program output: 51                 
Correct output: 37                  | Program output: 51                 
Correct output: 16                  | Program output: 53                 
Correct output: 3                   | Program output: 55                 
Correct output: 1                   | Program output:                    
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 36                 
Correct output: 22                  | Program output: 26                 
Correct output: 14                  | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 90                 
Correct output: 4                   | Program output: 87                 
Correct output: -84                 | Program output: 99                 
Correct output: -28                 | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 98                 
Correct output: -37                 | Program output: -33                
Correct output: -55                 | Program output: -42                
Correct output: -80                 | Program output: -7                 
Correct output: -41                 | Program output: 75                 
Correct output: -92                 | Program output: 67                 
Correct output: -82                 | Program output: 71                 
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: 12                 
Correct output: -7                  | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -29                
Correct output: -86                 | Program output: 8                  
Correct output: -79                 | Program output: 77                 
Correct output: -12                 | Program output: 88                 
Correct output: -97                 | Program output: 60                 
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output:                    
Correct output: -43                 | Program output: 80                 
Correct output: -96                 | Program output: -53                
Correct output: -94                 | Program output: -51                
Correct output: -98                 | Program output: -74                
Correct output: -83                 | Program output: 68                 
Correct output: -80                 | Program output: -80                
Correct output: -46                 | Program output:                    
Correct output: -25                 | Program output: 99                 
Correct output: -26                 | Program output:                    
Correct output: -71                 | Program output:                    
Correct output: -58                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -44                
Correct output: -85                 | Program output: 31                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: 59                 
Correct output: -38                 | Program output: 52                 
Correct output: -48                 | Program output:                    
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: 36                 
Correct output: -62                 | Program output:                    
Correct output: -100                | Program output: 32                 
Correct output: -88                 | Program output: -2                 
Correct output: -51                 | Program output:                    
Correct output: -39                 | Program output: -39                
Correct output: -11                 | Program output: -11                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 62                 
Correct output: -38                 | Program output:                    
Correct output: -57                 | Program output: 10                 
Correct output: -84                 | Program output: -34                
Correct output: -98                 | Program output: 51                 
Correct output: -90                 | Program output:                    
Correct output: -85                 | Program output: -41                
Correct output: -66                 | Program output: 79                 
Correct output: -76                 | Program output: -76                
Correct output: 18                  | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_187} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction print_newline})
Lexicase best program: (in3 in4 exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult) integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove boolean_or 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items boolean_not integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (integer_pop exec_do*range (boolean_stackdepth print_newline) boolean_dup integer_flush integer_div exec_noop) (boolean_flush exec_dup_items) (boolean_rot tagged_187) boolean_frominteger) boolean_not exec_y ()) (boolean_yankdup boolean_dup_items boolean_shove boolean_or integer_yank boolean_eq exec_dup_items integer_dup_items) (exec_while (integer_mult exec_do*times (integer_add integer_empty exec_empty integer_pop exec_flush integer_inc integer_lt print_boolean boolean_dup_times integer_mult integer_dup_items) integer_mod exec_k (integer_shove exec_empty integer_eq integer_pop exec_y () integer_mod integer_stackdepth) (exec_yankdup exec_flush) exec_yank integer_dec print_newline))) () ()))
Lexicase best errors: [1 1 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 119
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_187} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction print_newline})
Zero cases best program: (in3 in4 exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult) integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove boolean_or 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items boolean_not integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (integer_pop exec_do*range (boolean_stackdepth print_newline) boolean_dup integer_flush integer_div exec_noop) (boolean_flush exec_dup_items) (boolean_rot tagged_187) boolean_frominteger) boolean_not exec_y ()) (boolean_yankdup boolean_dup_items boolean_shove boolean_or integer_yank boolean_eq exec_dup_items integer_dup_items) (exec_while (integer_mult exec_do*times (integer_add integer_empty exec_empty integer_pop exec_flush integer_inc integer_lt print_boolean boolean_dup_times integer_mult integer_dup_items) integer_mod exec_k (integer_shove exec_empty integer_eq integer_pop exec_y () integer_mod integer_stackdepth) (exec_yankdup exec_flush) exec_yank integer_dec print_newline))) () ()))
Zero cases best errors: [1 1 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 119
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 605 1000 605 1 1000 270 269 1 269)
Population mean number of elite cases: 5.02
Count of perfect (error zero) individuals by case: (0 605 0 605 1 0 270 269 1 269)
Population mean number of perfect (error zero) cases: 2.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_187} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction print_newline})
Best program: (in3 in4 exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult) integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove boolean_or 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items boolean_not integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (integer_pop exec_do*range (boolean_stackdepth print_newline) boolean_dup integer_flush integer_div exec_noop) (boolean_flush exec_dup_items) (boolean_rot tagged_187) boolean_frominteger) boolean_not exec_y ()) (boolean_yankdup boolean_dup_items boolean_shove boolean_or integer_yank boolean_eq exec_dup_items integer_dup_items) (exec_while (integer_mult exec_do*times (integer_add integer_empty exec_empty integer_pop exec_flush integer_inc integer_lt print_boolean boolean_dup_times integer_mult integer_dup_items) integer_mod exec_k (integer_shove exec_empty integer_eq integer_pop exec_y () integer_mod integer_stackdepth) (exec_yankdup exec_flush) exec_yank integer_dec print_newline))) () ()))
Errors: [1 1 1 1 1 1 0 0 1 0]
Total: 7
Mean: 0.7
Genome size: 93
Size: 119
Percent parens: 0.218
--- Population Statistics ---
Average total errors in population: 7.98
Median total errors in population: 8
Error averages by case: (1.0 0.395 1.0 0.395 0.999 1.0 0.73 0.731 0.999 0.731)
Error minima by case: (1 0 1 0 0 1 0 0 0 0)
Average genome size in population (length): 85.462
Average program size in population (points): 124.568
Average percent parens in population: 0.310
Minimum age in population: 25.8653564453125
Maximum age in population: 27.64300537109375
Average age in population: 26.52942849731445
Median age in population: 26.8653564453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 154
Genome diversity (% unique genomes):	 0.727
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6223090
--- Timings ---
Current time: 1559314654931 milliseconds
Total Time:          53.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.1 seconds, 73.0%
Fitness Testing:      8.2 seconds, 15.3%
Report:               6.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 82                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 73                 
Correct output: 23                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 26                 
Correct output: 29                  | Program output: 100                
Correct output: 15                  | Program output: 87                 
Correct output: 39                  | Program output: 80                 
Correct output: 11                  | Program output: 40                 
Correct output: 51                  | Program output: 81                 
Correct output: 37                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 55                 
Correct output: 1                   | Program output: 22                 
Correct output: 9                   | Program output: 53                 
Correct output: 7                   | Program output: 86                 
Correct output: 22                  | Program output: 81                 
Correct output: 14                  | Program output: 57                 
Correct output: 10                  | Program output: 51                 
Correct output: 12                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: -84                 | Program output: -84                
Correct output: -28                 | Program output: 69                 
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 98                 
Correct output: -37                 | Program output: 66                 
Correct output: -55                 | Program output: -42                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: 75                 
Correct output: -92                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -29                
Correct output: -86                 | Program output: 8                  
Correct output: -79                 | Program output: 77                 
Correct output: -12                 | Program output: 88                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 69                 
Correct output: -70                 | Program output: -54                
Correct output: -43                 | Program output: 52                 
Correct output: -96                 | Program output: -53                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -61                
Correct output: -83                 | Program output: 68                 
Correct output: -80                 | Program output: 90                 
Correct output: -46                 | Program output: -26                
Correct output: -25                 | Program output: -20                
Correct output: -26                 | Program output: -8                 
Correct output: -71                 | Program output: 60                 
Correct output: -58                 | Program output: -26                
Correct output: -45                 | Program output: -38                
Correct output: -92                 | Program output: -44                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 15                 
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: 36                 
Correct output: -62                 | Program output: 50                 
Correct output: -100                | Program output: 32                 
Correct output: -88                 | Program output: -2                 
Correct output: -51                 | Program output: -37                
Correct output: -39                 | Program output: -39                
Correct output: -11                 | Program output: 64                 
Correct output: -77                 | Program output: 60                 
Correct output: -81                 | Program output: 62                 
Correct output: -38                 | Program output: 34                 
Correct output: -57                 | Program output: 10                 
Correct output: -84                 | Program output: -34                
Correct output: -98                 | Program output: 51                 
Correct output: -90                 | Program output: -70                
Correct output: -85                 | Program output: -41                
Correct output: -66                 | Program output: 79                 
Correct output: -76                 | Program output: -7false            
Correct output: 18                  | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop})
Lexicase best program: (in3 in4 exec_shove (exec_shove () boolean_shove boolean_shove boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in2) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (integer_pop) () ())) () ()) () ()))
Lexicase best errors: [1 0 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 68
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop})
Zero cases best program: (in3 in4 exec_shove (exec_shove () boolean_shove boolean_shove boolean_shove boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in2) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (integer_pop) () ())) () ()) () ()))
Zero cases best errors: [1 0 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 68
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 265 1000 1000 263 1000 309 340 1000 894)
Population mean number of elite cases: 6.37
Count of perfect (error zero) individuals by case: (296 265 0 0 263 0 309 340 0 894)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop})
Best program: (in3 in4 exec_shove (exec_shove (boolean_shove boolean_shove boolean_shove) boolean_shove boolean_eq integer_gte integer_dup_times exec_do*while () in2) print_integer exec_eq exec_k_when_autoconstructing (exec_flush) (boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean) (exec_while (boolean_not integer_gt exec_s_when_autoconstructing (integer_pop) () ())) ()) () ()))
Errors: [1 0 1 1 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 48
Size: 68
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.633
Median total errors in population: 7
Error averages by case: (0.704 0.735 1.0 1.0 0.737 1.0 0.691 0.66 1.0 0.106)
Error minima by case: (0 0 1 1 0 1 0 0 1 0)
Average genome size in population (length): 82.925
Average program size in population (points): 114.242
Average percent parens in population: 0.270
Minimum age in population: 26.8653564453125
Maximum age in population: 29.44859313964844
Average age in population: 28.26947973632812
Median age in population: 28.25418090820312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 6442964
--- Timings ---
Current time: 1559314657465 milliseconds
Total Time:          56.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.0 seconds, 73.1%
Fitness Testing:      8.5 seconds, 15.1%
Report:               6.5 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 50                  | Program output: 57                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 82                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 73                 
Correct output: 23                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 26                 
Correct output: 29                  | Program output: 100                
Correct output: 15                  | Program output: 87                 
Correct output: 39                  | Program output: 80                 
Correct output: 11                  | Program output: 40                 
Correct output: 51                  | Program output: 81                 
Correct output: 37                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 55                 
Correct output: 1                   | Program output: 22                 
Correct output: 9                   | Program output: 53                 
Correct output: 7                   | Program output: 86                 
Correct output: 22                  | Program output: 81                 
Correct output: 14                  | Program output: 57                 
Correct output: 10                  | Program output: 51                 
Correct output: 12                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: -84                 | Program output: -84                
Correct output: -28                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -40                
Correct output: -37                 | Program output: -33                
Correct output: -55                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: 75                 
Correct output: -92                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: 12                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -29                
Correct output: -94                 | Program output: -29                
Correct output: -86                 | Program output: 8                  
Correct output: -79                 | Program output: 77                 
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 69                 
Correct output: -70                 | Program output: -54                
Correct output: -43                 | Program output: 80                 
Correct output: -96                 | Program output: -53                
Correct output: -94                 | Program output: -51                
Correct output: -98                 | Program output: -74                
Correct output: -83                 | Program output: 68                 
Correct output: -80                 | Program output: -80                
Correct output: -46                 | Program output: 52                 
Correct output: -25                 | Program output: 99                 
Correct output: -26                 | Program output: 6                  
Correct output: -71                 | Program output: 44                 
Correct output: -58                 | Program output: -43                
Correct output: -45                 | Program output: -38                
Correct output: -92                 | Program output: -35                
Correct output: -85                 | Program output: 31                 
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 15                 
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: 100                
Correct output: -100                | Program output: 32                 
Correct output: -88                 | Program output: -2                 
Correct output: -51                 | Program output: 17                 
Correct output: -39                 | Program output: -39                
Correct output: -11                 | Program output: 64                 
Correct output: -77                 | Program output: 60                 
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: 100                
Correct output: -57                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: 51                 
Correct output: -90                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -3                 
Correct output: -76                 | Program output: -7                 
Correct output: 18                  | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop})
Lexicase best program: (in3 in1 exec_shove (integer_min boolean_shove boolean_shove boolean_eq in2) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove boolean_or 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_k (integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (integer_pop) () ())) () ()) () ())) ())
Lexicase best errors: [0 1 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 75
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop})
Zero cases best program: (in3 in1 exec_shove (integer_min boolean_shove boolean_shove boolean_eq in2) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove boolean_or 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_k (integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (integer_pop) () ())) () ()) () ())) ())
Zero cases best errors: [0 1 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 75
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (868 1000 333 333 336 200 1000 1000 336 200)
Population mean number of elite cases: 5.61
Count of perfect (error zero) individuals by case: (868 0 333 333 336 200 0 0 336 200)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop})
Best program: (in3 in1 exec_shove (integer_min boolean_shove boolean_shove boolean_eq in2) print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove boolean_or 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_k (integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (integer_pop) () ())) () ()) () ())) ())
Errors: [0 1 0 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 53
Size: 75
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 7.394
Median total errors in population: 7
Error averages by case: (0.132 1.0 0.667 0.667 0.664 0.8 1.0 1.0 0.664 0.8)
Error minima by case: (0 1 0 0 0 0 1 1 0 0)
Average genome size in population (length): 63.853
Average program size in population (points): 86.663
Average percent parens in population: 0.263
Minimum age in population: 28.11590576171875
Maximum age in population: 31.18504333496094
Average age in population: 29.47880128479004
Median age in population: 29.49063110351562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 167
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 175
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 6749875
--- Timings ---
Current time: 1559314660126 milliseconds
Total Time:          58.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.0 seconds, 73.1%
Fitness Testing:      8.8 seconds, 14.9%
Report:               6.9 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 56                 
Correct output: -19                 | Program output: -19                
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 37                 
Correct output: 22                  | Program output: 88                 
Correct output: 29                  | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 64                 
Correct output: 11                  | Program output: 100                
Correct output: 51                  | Program output: 72                 
Correct output: 37                  | Program output: 60                 
Correct output: 16                  | Program output: 27                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 60                 
Correct output: 7                   | Program output: 49                 
Correct output: 22                  | Program output: 56                 
Correct output: 14                  | Program output: 90                 
Correct output: 10                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 4                   | Program output: 9                  
Correct output: -84                 | Program output: 93                 
Correct output: -28                 | Program output: -28                
Correct output: -77                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -37                 | Program output: 76                 
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: 24                 
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -27                
Correct output: -82                 | Program output: 18                 
Correct output: -30                 | Program output: 4                  
Correct output: -78                 | Program output: 82                 
Correct output: -7                  | Program output: 86                 
Correct output: -95                 | Program output: -38                
Correct output: -87                 | Program output: -42                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -5                 
Correct output: -79                 | Program output: -79                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: 64                 
Correct output: -91                 | Program output: 58                 
Correct output: -70                 | Program output: -52                
Correct output: -43                 | Program output: 16                 
Correct output: -96                 | Program output: -8                 
Correct output: -94                 | Program output: 12                 
Correct output: -98                 | Program output: 86                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: 91                 
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 77                 
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: 38                 
Correct output: -45                 | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: 56                 
Correct output: -99                 | Program output: -98                
Correct output: 7                   | Program output: 51                 
Correct output: -94                 | Program output: 85                 
Correct output: -38                 | Program output: 29                 
Correct output: -48                 | Program output: 1                  
Correct output: -73                 | Program output: -58                
Correct output: -67                 | Program output: -49                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 0                  
Correct output: -88                 | Program output: -3                 
Correct output: -51                 | Program output: -51                
Correct output: -39                 | Program output: -18                
Correct output: -11                 | Program output: 12                 
Correct output: -77                 | Program output: 52                 
Correct output: -81                 | Program output: -48                
Correct output: -38                 | Program output: -38                
Correct output: -57                 | Program output: -57                
Correct output: -84                 | Program output: -50                
Correct output: -98                 | Program output: -15                
Correct output: -90                 | Program output: -42                
Correct output: -85                 | Program output: -45                
Correct output: -66                 | Program output: -66                
Correct output: -76                 | Program output: 14                 
Correct output: 18                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_187} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction -55})
Lexicase best program: (in3 in4 print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove boolean_or 72 integer_shove exec_k () (exec_eq boolean_frominteger) integer_empty boolean_dup_items boolean_not integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (integer_pop exec_do*range (boolean_stackdepth print_newline) boolean_dup boolean_rot integer_div exec_noop) (boolean_flush exec_dup_items) (boolean_rot tagged_187) boolean_frominteger) boolean_not exec_y ()) (boolean_yankdup boolean_dup_items boolean_shove boolean_or integer_yank boolean_eq exec_dup_items exec_s () (exec_while (integer_mult exec_do*times (integer_add integer_empty exec_empty integer_pop exec_flush integer_inc integer_lt print_boolean boolean_dup_times integer_mult integer_dup_items) integer_mod exec_k (integer_shove exec_empty integer_eq integer_pop exec_do*count () integer_mod integer_stackdepth) (exec_yankdup exec_flush) exec_yank integer_dec -55)) ()) ()) () ()))
Lexicase best errors: [1 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 114
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_187} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction -55})
Zero cases best program: (in3 in4 print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove boolean_or 72 integer_shove exec_k () (exec_eq boolean_frominteger) integer_empty boolean_dup_items boolean_not integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (integer_pop exec_do*range (boolean_stackdepth print_newline) boolean_dup boolean_rot integer_div exec_noop) (boolean_flush exec_dup_items) (boolean_rot tagged_187) boolean_frominteger) boolean_not exec_y ()) (boolean_yankdup boolean_dup_items boolean_shove boolean_or integer_yank boolean_eq exec_dup_items exec_s () (exec_while (integer_mult exec_do*times (integer_add integer_empty exec_empty integer_pop exec_flush integer_inc integer_lt print_boolean boolean_dup_times integer_mult integer_dup_items) integer_mod exec_k (integer_shove exec_empty integer_eq integer_pop exec_do*count () integer_mod integer_stackdepth) (exec_yankdup exec_flush) exec_yank integer_dec -55)) ()) ()) () ()))
Zero cases best errors: [1 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 114
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (192 314 897 316 193 316 690 374 314 191)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (192 314 897 316 193 316 690 374 314 191)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_187} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction -55})
Best program: (in3 in4 print_integer exec_eq exec_k_when_autoconstructing (exec_flush boolean_invert_second_then_and integer_inc) (boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove boolean_or 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items boolean_not integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (integer_pop exec_do*range (boolean_stackdepth print_newline) boolean_dup integer_flush integer_div integer_swap) (boolean_flush exec_dup_items) (boolean_rot tagged_187) boolean_frominteger) boolean_not exec_y ()) (boolean_yankdup boolean_dup_items boolean_shove boolean_or integer_yank boolean_eq exec_dup_items integer_dup_items) (exec_while (integer_mult exec_do*times (integer_add integer_empty integer_swap integer_pop exec_flush integer_inc integer_lt print_boolean boolean_dup_times integer_mult integer_dup_items) integer_mod exec_k (integer_max exec_empty integer_eq integer_pop exec_y () integer_mod integer_stackdepth) (exec_yankdup exec_flush) exec_yank integer_dec -55))) () ()))
Errors: [1 0 0 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 87
Size: 111
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 6.203
Median total errors in population: 7
Error averages by case: (0.808 0.686 0.103 0.684 0.807 0.684 0.31 0.626 0.686 0.809)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.51
Average program size in population (points): 83.767
Average percent parens in population: 0.269
Minimum age in population: 29.21636199951172
Maximum age in population: 32.68666839599609
Average age in population: 31.19138096618652
Median age in population: 31.11590576171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 197
Genome diversity (% unique genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 197
Syntactic diversity (% unique Push programs):	 0.709
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7076078
--- Timings ---
Current time: 1559314663010 milliseconds
Total Time:          61.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.3 seconds, 73.4%
Fitness Testing:      9.1 seconds, 14.8%
Report:               7.2 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 565
Test mean error for best: 0.56500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 48                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 5986               
Correct output: -77                 | Program output: -77                
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: -19                
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 85                 
Correct output: 6                   | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 29                  | Program output: 75                 
Correct output: 15                  | Program output: 6351               
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 51                  | Program output: 51                 
Correct output: 37                  | Program output: 51                 
Correct output: 16                  | Program output: 53                 
Correct output: 3                   | Program output: 55                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 36                 
Correct output: 22                  | Program output: 26                 
Correct output: 14                  | Program output: 27                 
Correct output: 10                  | Program output: 3723               
Correct output: 12                  | Program output:                    
Correct output: 4                   | Program output: 4                  
Correct output: -84                 | Program output: 99                 
Correct output: -28                 | Program output: -28                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 98                 
Correct output: -37                 | Program output: -33                
Correct output: -55                 | Program output: -42                
Correct output: -80                 | Program output: -7                 
Correct output: -41                 | Program output: 75                 
Correct output: -92                 | Program output: 67                 
Correct output: -82                 | Program output:                    
Correct output: -30                 | Program output: -26                
Correct output: -78                 | Program output: 12                 
Correct output: -7                  | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -29                
Correct output: -86                 | Program output: 8                  
Correct output: -79                 | Program output: 77                 
Correct output: -12                 | Program output: 88                 
Correct output: -97                 | Program output: 60                 
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -52                
Correct output: -43                 | Program output: 3796               
Correct output: -96                 | Program output: -53                
Correct output: -94                 | Program output: -51                
Correct output: -98                 | Program output: -74                
Correct output: -83                 | Program output: 68                 
Correct output: -80                 | Program output: -80                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -44                
Correct output: -85                 | Program output: 31                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: 59                 
Correct output: -38                 | Program output: 52                 
Correct output: -48                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: 36                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 32                 
Correct output: -88                 | Program output: -2                 
Correct output: -51                 | Program output: -51                
Correct output: -39                 | Program output: -39                
Correct output: -11                 | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 62                 
Correct output: -38                 | Program output: -38                
Correct output: -57                 | Program output: 10                 
Correct output: -84                 | Program output: -34                
Correct output: -98                 | Program output: 51                 
Correct output: -90                 | Program output: -42                
Correct output: -85                 | Program output: -41                
Correct output: -66                 | Program output: 79                 
Correct output: -76                 | Program output: -76                
Correct output: 18                  | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in3 in4 in3 in4 exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ()))
Lexicase best errors: [1 0 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 69
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in3 in4 in3 in4 exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ()))
Zero cases best errors: [1 0 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 69
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (133 401 268 1000 1000 307 471 149 471 471)
Population mean number of elite cases: 4.67
Count of perfect (error zero) individuals by case: (133 401 268 0 0 307 471 149 471 471)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (in3 in4 in3 in4 exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ()))
Errors: [1 0 0 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 52
Size: 69
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 7.329
Median total errors in population: 7
Error averages by case: (0.867 0.599 0.732 1.0 1.0 0.693 0.529 0.851 0.529 0.529)
Error minima by case: (0 0 0 1 1 0 0 0 0 0)
Average genome size in population (length): 65.195
Average program size in population (points): 87.602
Average percent parens in population: 0.259
Minimum age in population: 30.21636199951172
Maximum age in population: 34.36739349365234
Average age in population: 32.65237004089355
Median age in population: 32.74066352844238
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7388020
--- Timings ---
Current time: 1559314665643 milliseconds
Total Time:          64.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.3 seconds, 73.5%
Fitness Testing:      9.5 seconds, 14.7%
Report:               7.5 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 565
Test mean error for best: 0.56500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 48                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 5986               
Correct output: -77                 | Program output: -77                
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: -19                
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 85                 
Correct output: 6                   | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 29                  | Program output: 75                 
Correct output: 15                  | Program output: 6351               
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 51                  | Program output: 51                 
Correct output: 37                  | Program output: 51                 
Correct output: 16                  | Program output: 53                 
Correct output: 3                   | Program output: 55                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 36                 
Correct output: 22                  | Program output: 26                 
Correct output: 14                  | Program output: 27                 
Correct output: 10                  | Program output: 3723               
Correct output: 12                  | Program output:                    
Correct output: 4                   | Program output: 4                  
Correct output: -84                 | Program output: 99                 
Correct output: -28                 | Program output: -28                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 98                 
Correct output: -37                 | Program output: -33                
Correct output: -55                 | Program output: -42                
Correct output: -80                 | Program output: -7                 
Correct output: -41                 | Program output: 75                 
Correct output: -92                 | Program output: 67                 
Correct output: -82                 | Program output:                    
Correct output: -30                 | Program output: -26                
Correct output: -78                 | Program output: 12                 
Correct output: -7                  | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -29                
Correct output: -86                 | Program output: 8                  
Correct output: -79                 | Program output: 77                 
Correct output: -12                 | Program output: 88                 
Correct output: -97                 | Program output: 60                 
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -52                
Correct output: -43                 | Program output: 3796               
Correct output: -96                 | Program output: -53                
Correct output: -94                 | Program output: -51                
Correct output: -98                 | Program output: -74                
Correct output: -83                 | Program output: 68                 
Correct output: -80                 | Program output: -80                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -44                
Correct output: -85                 | Program output: 31                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: 59                 
Correct output: -38                 | Program output: 52                 
Correct output: -48                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: 36                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 32                 
Correct output: -88                 | Program output: -2                 
Correct output: -51                 | Program output: -51                
Correct output: -39                 | Program output: -39                
Correct output: -11                 | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 62                 
Correct output: -38                 | Program output: -38                
Correct output: -57                 | Program output: 10                 
Correct output: -84                 | Program output: -34                
Correct output: -98                 | Program output: 51                 
Correct output: -90                 | Program output: -42                
Correct output: -85                 | Program output: -41                
Correct output: -66                 | Program output: 79                 
Correct output: -76                 | Program output: -76                
Correct output: 18                  | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in3 in4 in3 in4 exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ()))
Lexicase best errors: [0 1 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 70
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in3 in4 in3 in4 exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ()))
Zero cases best errors: [0 1 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 70
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (922 1000 242 182 507 518 449 449 448 1000)
Population mean number of elite cases: 5.72
Count of perfect (error zero) individuals by case: (922 0 242 182 507 518 449 449 448 0)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (in3 in4 in3 in4 exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ()))
Errors: [0 1 1 1 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 52
Size: 69
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 6.283
Median total errors in population: 6
Error averages by case: (0.078 1.0 0.758 0.818 0.493 0.482 0.551 0.551 0.552 1.0)
Error minima by case: (0 1 0 0 0 0 0 0 0 1)
Average genome size in population (length): 56.39
Average program size in population (points): 75.659
Average percent parens in population: 0.255
Minimum age in population: 31.71636199951172
Maximum age in population: 35.58293628692627
Average age in population: 33.71874907970428
Median age in population: 33.81217765808105
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 173
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 7771416
--- Timings ---
Current time: 1559314668424 milliseconds
Total Time:          67.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.4 seconds, 73.6%
Fitness Testing:      9.8 seconds, 14.6%
Report:               7.8 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 48                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: -77                
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: -152               
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 85                 
Correct output: 6                   | Program output: 2257               
Correct output: 22                  | Program output: 22                 
Correct output: 29                  | Program output: 75                 
Correct output: 15                  | Program output: 28                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 51                  | Program output: 51                 
Correct output: 37                  | Program output: 51                 
Correct output: 16                  | Program output: 177390             
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output:                    
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 36                 
Correct output: 22                  | Program output: 26                 
Correct output: 14                  | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 90                 
Correct output: 4                   | Program output:                    
Correct output: -84                 | Program output: 66                 
Correct output: -28                 | Program output: 69                 
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 98                 
Correct output: -37                 | Program output: -33                
Correct output: -55                 | Program output: -42                
Correct output: -80                 | Program output: 5                  
Correct output: -41                 | Program output: 75                 
Correct output: -92                 | Program output: 67                 
Correct output: -82                 | Program output: 33                 
Correct output: -30                 | Program output: 28                 
Correct output: -78                 | Program output: 12                 
Correct output: -7                  | Program output: 12                 
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -29                
Correct output: -86                 | Program output: 8                  
Correct output: -79                 | Program output: 77                 
Correct output: -12                 | Program output: 88                 
Correct output: -97                 | Program output: 31                 
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -54                
Correct output: -43                 | Program output: 80                 
Correct output: -96                 | Program output: -53                
Correct output: -94                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: 68                 
Correct output: -80                 | Program output: -80                
Correct output: -46                 | Program output: -26                
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -2158              
Correct output: -71                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -45                 | Program output: 84                 
Correct output: -92                 | Program output: -44                
Correct output: -85                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 316455             
Correct output: -94                 | Program output: 61                 
Correct output: -38                 | Program output: 38                 
Correct output: -48                 | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: 36                 
Correct output: -62                 | Program output: 50                 
Correct output: -100                | Program output: 32                 
Correct output: -88                 | Program output: -2                 
Correct output: -51                 | Program output: -37                
Correct output: -39                 | Program output: -39                
Correct output: -11                 | Program output: -11                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 62                 
Correct output: -38                 | Program output: 34                 
Correct output: -57                 | Program output: 10                 
Correct output: -84                 | Program output: -34                
Correct output: -98                 | Program output: 51                 
Correct output: -90                 | Program output: -70                
Correct output: -85                 | Program output: -41                
Correct output: -66                 | Program output: 79                 
Correct output: -76                 | Program output: 87                 
Correct output: 18                  | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in1 in4 in3 boolean_pop exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())
Lexicase best errors: [0 0 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 67
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in1 in4 in3 boolean_pop exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())
Zero cases best errors: [0 0 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 67
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (582 714 413 4 188 1 1 4 909 1000)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (582 714 413 4 188 1 1 4 909 0)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (in1 in4 in3 boolean_pop exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())
Errors: [0 0 1 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 52
Size: 67
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 7.184
Median total errors in population: 7
Error averages by case: (0.418 0.286 0.587 0.996 0.812 0.999 0.999 0.996 0.091 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 54.838
Average program size in population (points): 73.233
Average percent parens in population: 0.251
Minimum age in population: 33.38108062744141
Maximum age in population: 37.04754209518433
Average age in population: 35.06867842483521
Median age in population: 35.07448983192444
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 133
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 8158704
--- Timings ---
Current time: 1559314671106 milliseconds
Total Time:          69.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.3 seconds, 73.6%
Fitness Testing:     10.2 seconds, 14.6%
Report:               8.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 48                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: -77                
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: -152               
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 85                 
Correct output: 6                   | Program output: 2257               
Correct output: 22                  | Program output: 22                 
Correct output: 29                  | Program output: 75                 
Correct output: 15                  | Program output: 28                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 51                  | Program output: 51                 
Correct output: 37                  | Program output: 51                 
Correct output: 16                  | Program output:                    
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output:                    
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 36                 
Correct output: 22                  | Program output: 26                 
Correct output: 14                  | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 90                 
Correct output: 4                   | Program output: 468                
Correct output: -84                 | Program output: 66                 
Correct output: -28                 | Program output: 69                 
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 98                 
Correct output: -37                 | Program output: -33                
Correct output: -55                 | Program output: -42                
Correct output: -80                 | Program output: 5                  
Correct output: -41                 | Program output: 75                 
Correct output: -92                 | Program output: 67                 
Correct output: -82                 | Program output: 33                 
Correct output: -30                 | Program output: 28                 
Correct output: -78                 | Program output: 12                 
Correct output: -7                  | Program output: 12                 
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -29                
Correct output: -86                 | Program output: 8                  
Correct output: -79                 | Program output: 77                 
Correct output: -12                 | Program output: 88                 
Correct output: -97                 | Program output: 31                 
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output:                    
Correct output: -43                 | Program output: 80                 
Correct output: -96                 | Program output: -53                
Correct output: -94                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: 68                 
Correct output: -80                 | Program output: -80                
Correct output: -46                 | Program output: -26                
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -2158              
Correct output: -71                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -45                 | Program output: 84                 
Correct output: -92                 | Program output: -44                
Correct output: -85                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output:                    
Correct output: -94                 | Program output: 61                 
Correct output: -38                 | Program output: 38                 
Correct output: -48                 | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: 36                 
Correct output: -62                 | Program output: 50                 
Correct output: -100                | Program output: 32                 
Correct output: -88                 | Program output: -2                 
Correct output: -51                 | Program output: -37                
Correct output: -39                 | Program output: -39                
Correct output: -11                 | Program output: -11                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 62                 
Correct output: -38                 | Program output: 34                 
Correct output: -57                 | Program output: 10                 
Correct output: -84                 | Program output: -34                
Correct output: -98                 | Program output: 51                 
Correct output: -90                 | Program output: -70                
Correct output: -85                 | Program output: -41                
Correct output: -66                 | Program output: 79                 
Correct output: -76                 | Program output: 87                 
Correct output: 18                  | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in1 in4 in3 boolean_pop exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())
Lexicase best errors: [0 1 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 67
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in1 in4 in3 boolean_pop exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc) boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())
Zero cases best errors: [0 1 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 67
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (352 1000 110 196 625 82 201 303 712 498)
Population mean number of elite cases: 4.08
Count of perfect (error zero) individuals by case: (352 0 110 196 625 82 201 303 712 498)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (in1 in4 in3 boolean_pop exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())
Errors: [0 1 1 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 52
Size: 67
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 6.921
Median total errors in population: 7
Error averages by case: (0.648 1.0 0.89 0.804 0.375 0.918 0.799 0.697 0.288 0.502)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.28
Average program size in population (points): 68.548
Average percent parens in population: 0.237
Minimum age in population: 34.47991180419922
Maximum age in population: 38.02381467819214
Average age in population: 36.849892608881
Median age in population: 36.78300309181213
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 177
Genome diversity (% unique genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 190
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.005
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 8584707
--- Timings ---
Current time: 1559314673821 milliseconds
Total Time:          72.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.3 seconds, 73.5%
Fitness Testing:     10.6 seconds, 14.7%
Report:               8.5 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 568
Test mean error for best: 0.56800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 48                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: -77                
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: -19                
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 85                 
Correct output: 6                   | Program output: 64                 
Correct output: 22                  | Program output: 22                 
Correct output: 29                  | Program output: 75                 
Correct output: 15                  | Program output:                    
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 51                  | Program output: 51                 
Correct output: 37                  | Program output: 51                 
Correct output: 16                  | Program output: 53                 
Correct output: 3                   | Program output:                    
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 36                 
Correct output: 22                  | Program output: 26                 
Correct output: 14                  | Program output: 27                 
Correct output: 10                  | Program output:                    
Correct output: 12                  | Program output:                    
Correct output: 4                   | Program output:                    
Correct output: -84                 | Program output: 99                 
Correct output: -28                 | Program output: -28                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: 98                 
Correct output: -37                 | Program output: -33                
Correct output: -55                 | Program output: -42                
Correct output: -80                 | Program output: -7                 
Correct output: -41                 | Program output: 75                 
Correct output: -92                 | Program output: 67                 
Correct output: -82                 | Program output: 71                 
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: 12                 
Correct output: -7                  | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -29                
Correct output: -86                 | Program output: 8                  
Correct output: -79                 | Program output: 77                 
Correct output: -12                 | Program output: 88                 
Correct output: -97                 | Program output: 60                 
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -52                
Correct output: -43                 | Program output: 80                 
Correct output: -96                 | Program output: -53                
Correct output: -94                 | Program output: -51                
Correct output: -98                 | Program output: -74                
Correct output: -83                 | Program output: 68                 
Correct output: -80                 | Program output: -80                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -44                
Correct output: -85                 | Program output: 31                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: 59                 
Correct output: -38                 | Program output: 52                 
Correct output: -48                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: 36                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 32                 
Correct output: -88                 | Program output: -2                 
Correct output: -51                 | Program output: -51                
Correct output: -39                 | Program output: -39                
Correct output: -11                 | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 62                 
Correct output: -38                 | Program output: -38                
Correct output: -57                 | Program output: 10                 
Correct output: -84                 | Program output: -34                
Correct output: -98                 | Program output: 51                 
Correct output: -90                 | Program output: -42                
Correct output: -85                 | Program output: -41                
Correct output: -66                 | Program output: 79                 
Correct output: -76                 | Program output: -76                
Correct output: 18                  | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in3 in4 in3 in4 exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean) (exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) ()) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 69
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in3 in4 in3 in4 exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup) integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup exec_k (integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean) (exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean) (exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) ()) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 69
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 507 923 468 284 868 667 1000 1000 2)
Population mean number of elite cases: 6.01
Count of perfect (error zero) individuals by case: (291 507 923 468 284 868 667 0 0 2)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction 72} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_668} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (in3 in4 in3 in4 exec_shove (exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and boolean_rot) boolean_yankdup integer_mult integer_pop 72 integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 integer_shove boolean_frominteger tagged_668 exec_pop (integer_swap exec_s (exec_rot () (integer_dec integer_min boolean_frominteger tagged_668 exec_pop (exec_yankdup exec_s (exec_rot () (integer_yank) () exec_k_when_autoconstructing (print_newline boolean_dup exec_do*range (boolean_eq boolean_xor integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) ()) () ())) ()) () ()))
Errors: [0 0 0 0 0 0 0 1 1 1]
Total: 3
Mean: 0.3
Genome size: 50
Size: 73
Percent parens: 0.315
--- Population Statistics ---
Average total errors in population: 5.99
Median total errors in population: 5
Error averages by case: (0.709 0.493 0.077 0.532 0.716 0.132 0.333 1.0 1.0 0.998)
Error minima by case: (0 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 51.867
Average program size in population (points): 68.053
Average percent parens in population: 0.237
Minimum age in population: 35.47991180419922
Maximum age in population: 39.89915454387665
Average age in population: 38.36856301653385
Median age in population: 38.50175309181213
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.008
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 8964812
--- Timings ---
Current time: 1559314676350 milliseconds
Total Time:          75.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.2 seconds, 73.5%
Fitness Testing:     11.0 seconds, 14.6%
Report:               8.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 575
Test mean error for best: 0.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: -29                
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: 37                 
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 86                 
Correct output: 23                  | Program output: 71                 
Correct output: 6                   | Program output: 61                 
Correct output: 22                  | Program output: 90                 
Correct output: 29                  | Program output: 81                 
Correct output: 15                  | Program output: 63                 
Correct output: 39                  | Program output: 43                 
Correct output: 11                  | Program output: 59                 
Correct output: 51                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: 16                  | Program output: 90                 
Correct output: 3                   | Program output: 26                 
Correct output: 1                   | Program output: 54false            
Correct output: 9                   | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 22                 
Correct output: 14                  | Program output: 14                 
Correct output: 10                  | Program output: 79                 
Correct output: 12                  | Program output: 30                 
Correct output: 4                   | Program output: 52                 
Correct output: -84                 | Program output: 66                 
Correct output: -28                 | Program output: 69                 
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -37                 | Program output: -37                
Correct output: -55                 | Program output: -42                
Correct output: -80                 | Program output: -7                 
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: 18                 
Correct output: -30                 | Program output: -26                
Correct output: -78                 | Program output: -78                
Correct output: -7                  | Program output: 12                 
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -29                
Correct output: -86                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: 31                 
Correct output: -91                 | Program output: 6                  
Correct output: -70                 | Program output: -54                
Correct output: -43                 | Program output: -43                
Correct output: -96                 | Program output: -53                
Correct output: -94                 | Program output: -51                
Correct output: -98                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -43                
Correct output: -46                 | Program output: -26                
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -8                 
Correct output: -71                 | Program output: 60                 
Correct output: -58                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -44                
Correct output: -85                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 85                 
Correct output: -94                 | Program output: 61                 
Correct output: -38                 | Program output: 29                 
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: -49                
Correct output: -62                 | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -2                 
Correct output: -51                 | Program output: -37                
Correct output: -39                 | Program output: -39                
Correct output: -11                 | Program output: 44                 
Correct output: -77                 | Program output: 13                 
Correct output: -81                 | Program output: -48                
Correct output: -38                 | Program output: 34                 
Correct output: -57                 | Program output: -57                
Correct output: -84                 | Program output: -34                
Correct output: -98                 | Program output: -52                
Correct output: -90                 | Program output: -70                
Correct output: -85                 | Program output: -41                
Correct output: -66                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: 18                  | Program output: 45                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in1 in4 in3 boolean_pop exec_shove (integer_min boolean_shove boolean_shove boolean_eq in2) exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
Lexicase best errors: [0 1 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 80
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in1 in4 in3 boolean_pop exec_shove (integer_min boolean_shove boolean_shove boolean_eq in2) exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
Zero cases best errors: [0 1 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 80
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (918 2 16 12 168 4 909 678 4 16)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (918 2 16 12 168 4 909 678 4 16)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (in1 in4 in3 boolean_pop exec_shove (integer_min boolean_shove boolean_shove boolean_eq in2) exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
Errors: [0 1 1 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 58
Size: 80
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 7.273
Median total errors in population: 7
Error averages by case: (0.082 0.998 0.984 0.988 0.832 0.996 0.091 0.322 0.996 0.984)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.274
Average program size in population (points): 67.475
Average percent parens in population: 0.254
Minimum age in population: 37.72991180419922
Maximum age in population: 41.51734697818756
Average age in population: 40.15283871626854
Median age in population: 40.2326448559761
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 9365928
--- Timings ---
Current time: 1559314679016 milliseconds
Total Time:          77.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.1 seconds, 73.6%
Fitness Testing:     11.4 seconds, 14.7%
Report:               9.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 407
Test mean error for best: 0.40700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 1
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: -77                
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: -19                
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 26                 
Correct output: 29                  | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 64                 
Correct output: 11                  | Program output: 40                 
Correct output: 51                  | Program output: 72                 
Correct output: 37                  | Program output: 60                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 53                 
Correct output: 7                   | Program output: 49                 
Correct output: 22                  | Program output: 56                 
Correct output: 14                  | Program output: 57                 
Correct output: 10                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 4                   | Program output: 4                  
Correct output: -84                 | Program output: -84                
Correct output: -28                 | Program output: -28                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -37                 | Program output: -33                
Correct output: -55                 | Program output: -42                
Correct output: -80                 | Program output: -7                 
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -30                 | Program output: -26                
Correct output: -78                 | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -79                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -54                
Correct output: -43                 | Program output: 16                 
Correct output: -96                 | Program output: -53                
Correct output: -94                 | Program output: -51                
Correct output: -98                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -80                
Correct output: -46                 | Program output: -26                
Correct output: -25                 | Program output: -20                
Correct output: -26                 | Program output: -8                 
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -44                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 15                 
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -68                
Correct output: -88                 | Program output: -2                 
Correct output: -51                 | Program output: -37                
Correct output: -39                 | Program output: -39                
Correct output: -11                 | Program output: -11                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: -38                
Correct output: -57                 | Program output: -57                
Correct output: -84                 | Program output: -34                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -70                
Correct output: -85                 | Program output: -41                
Correct output: -66                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: 18                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in1 in4 in3 boolean_pop boolean_shove integer_min boolean_shove boolean_shove boolean_eq in2 exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 79
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in1 in4 in3 boolean_pop boolean_shove integer_min boolean_shove boolean_shove boolean_eq in2 exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 79
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (266 456 394 894 15 799 456 13 266 225)
Population mean number of elite cases: 3.78
Count of perfect (error zero) individuals by case: (266 456 394 894 15 799 456 13 266 225)
Population mean number of perfect (error zero) cases: 3.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 72} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (in1 in4 in3 boolean_pop boolean_dup_times integer_min boolean_shove boolean_shove boolean_eq in2 exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 58
Size: 79
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 6.216
Median total errors in population: 6
Error averages by case: (0.734 0.544 0.606 0.106 0.985 0.201 0.544 0.987 0.734 0.775)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.51
Average program size in population (points): 73.29
Average percent parens in population: 0.268
Minimum age in population: 40.88588172197342
Maximum age in population: 43.27959930896759
Average age in population: 42.44143619945645
Median age in population: 42.27959930896759
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 205
Genome diversity (% unique genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 218
Syntactic diversity (% unique Push programs):	 0.535
Total error diversity:				 0.009
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.158
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 9789732
--- Timings ---
Current time: 1559314681666 milliseconds
Total Time:          80.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.0 seconds, 73.5%
Fitness Testing:     11.8 seconds, 14.7%
Report:               9.4 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 28
Successful program: (in1 in4 in3 boolean_pop boolean_dup_times integer_min boolean_shove boolean_shove boolean_eq in2 exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 79


Auto-simplifying with starting size: 79
step: 0
program: (in1 in4 in3 boolean_pop boolean_dup_times integer_min boolean_shove boolean_shove boolean_eq in2 exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 500
program: (in1 in4 in3 boolean_pop boolean_dup_times integer_min boolean_shove boolean_shove boolean_eq in2 exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 1000
program: (in1 in4 in3 boolean_pop boolean_dup_times integer_min boolean_shove boolean_shove boolean_eq in2 exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 1500
program: (in1 in4 in3 boolean_pop boolean_dup_times integer_min boolean_shove boolean_shove boolean_eq in2 exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 2000
program: (in1 in4 in3 boolean_pop boolean_dup_times integer_min boolean_shove boolean_shove boolean_eq in2 exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 2500
program: (in1 in4 in3 boolean_pop boolean_dup_times integer_min boolean_shove boolean_shove boolean_eq in2 exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 3000
program: (in1 in4 in3 boolean_pop boolean_dup_times integer_min boolean_shove boolean_shove boolean_eq in2 exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 3500
program: (in1 in4 in3 boolean_pop boolean_dup_times integer_min boolean_shove boolean_shove boolean_eq in2 exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 4000
program: (in1 in4 in3 boolean_pop boolean_dup_times integer_min boolean_shove boolean_shove boolean_eq in2 exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 4500
program: (in1 in4 in3 boolean_pop boolean_dup_times integer_min boolean_shove boolean_shove boolean_eq in2 exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 5000
program: (in1 in4 in3 boolean_pop boolean_dup_times integer_min boolean_shove boolean_shove boolean_eq in2 exec_shove (boolean_shove boolean_shove boolean_eq in2) print_integer boolean_invert_second_then_and boolean_invert_second_then_and integer_inc boolean_rot boolean_yankdup integer_mult integer_shove integer_add 72 boolean_yankdup boolean_invert_second_then_and 72 boolean_yankdup integer_sub integer_shove integer_add 72 integer_shove exec_k () (exec_eq boolean_frominteger) boolean_shove boolean_dup_items exec_dup_items integer_fromboolean exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not exec_rot (integer_sub exec_s_when_autoconstructing (integer_yank print_boolean exec_while (boolean_not integer_gt exec_s_when_autoconstructing (boolean_dup_items) () ())) () ()) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 407
Test mean error for best: 0.40700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 1
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 42                 
Correct output: -69                 | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: -29                 | Program output: 41                 
Correct output: -84                 | Program output: -42                
Correct output: 17                  | Program output: 17                 
Correct output: -77                 | Program output: -77                
Correct output: 53                  | Program output: 53                 
Correct output: -19                 | Program output: -19                
Correct output: -48                 | Program output: -48                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: 77                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 50                 
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 26                 
Correct output: 29                  | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 64                 
Correct output: 11                  | Program output: 40                 
Correct output: 51                  | Program output: 72                 
Correct output: 37                  | Program output: 60                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 53                 
Correct output: 7                   | Program output: 49                 
Correct output: 22                  | Program output: 56                 
Correct output: 14                  | Program output: 57                 
Correct output: 10                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 4                   | Program output: 4                  
Correct output: -84                 | Program output: -84                
Correct output: -28                 | Program output: -28                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -37                 | Program output: -33                
Correct output: -55                 | Program output: -42                
Correct output: -80                 | Program output: -7                 
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -30                 | Program output: -26                
Correct output: -78                 | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -79                
Correct output: -12                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -54                
Correct output: -43                 | Program output: 16                 
Correct output: -96                 | Program output: -53                
Correct output: -94                 | Program output: -51                
Correct output: -98                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -80                
Correct output: -46                 | Program output: -26                
Correct output: -25                 | Program output: -20                
Correct output: -26                 | Program output: -8                 
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -44                
Correct output: -85                 | Program output: -85                
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 15                 
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -68                
Correct output: -88                 | Program output: -2                 
Correct output: -51                 | Program output: -37                
Correct output: -39                 | Program output: -39                
Correct output: -11                 | Program output: -11                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: -38                
Correct output: -57                 | Program output: -57                
Correct output: -84                 | Program output: -34                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -70                
Correct output: -85                 | Program output: -41                
Correct output: -66                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: 18                  | Program output: 23                 
;;******************************
