Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[40 40 -73 40] -73] [[10 10 10 -82] -82] [[-68 80 -68 -68] -68] [[-62 -62 -62 -39] -62] [[-57 -27 -57 -57] -57] [[2 2 -45 2] -45] [[3 22 3 3] 3] [[-51 -51 -29 -51] -51] [[15 17 17 17] 15] [[26 26 26 -85] -85] [(53 53 53 53) 53] [(1 1 1 1) 1] [(-75 -75 -75 -75) -75] [(-35 -35 -35 -35) -35] [(41 41 41 41) 41] [(5 93 41 73) 5] [(65 66 89 3) 3] [(22 83 56 38) 22] [(94 50 44 93) 44] [(69 90 0 32) 0] [(35 31 23 91) 23] [(69 44 38 81) 38] [(63 37 68 34) 34] [(93 91 23 72) 23] [(87 58 82 75) 58] [(73 69 77 83) 69] [(63 24 33 11) 11] [(5 3 42 58) 3] [(96 82 63 66) 63] [(54 27 86 60) 27] [(11 32 84 61) 11] [(46 67 48 19) 19] [(63 52 75 65) 52] [(27 16 5 76) 5] [(59 3 46 69) 3] [(27 -84 51 -28) -84] [(88 -87 35 -87) -87] [(36 100 29 87) 29] [(9 -95 94 -23) -95] [(-31 -54 -42 -75) -75] [(65 5 -13 -33) -33] [(-97 -65 57 51) -97] [(-85 100 -21 -36) -85] [(-49 9 37 -90) -90] [(29 35 -59 65) -59] [(-34 -92 -100 -1) -100] [(-73 99 78 -87) -87] [(87 -83 25 17) -83] [(28 -56 -47 47) -56] [(90 -56 -76 -82) -82] [(-98 -19 35 -55) -98] [(38 -20 -1 -27) -27] [(-80 84 -59 -37) -80] [(16 -13 -90 -36) -90] [(-1 -93 80 -81) -93] [(72 -78 7 -100) -100] [(-40 -10 -98 79) -98] [(-51 -47 39 -50) -51] [(-100 76 46 36) -100] [(-30 -44 -97 12) -97] [(-35 -36 -91 16) -91] [(46 -30 -87 47) -87] [(-30 62 -29 98) -30] [(50 80 -99 -67) -99] [(-19 -28 -24 80) -28] [(-61 -19 -35 -49) -61] [(-58 -34 5 -24) -58] [(-76 72 -82 15) -82] [(44 99 -79 76) -79] [(-73 41 -41 -80) -80] [(39 -32 -15 4) -32] [(33 96 52 -29) -29] [(38 99 -58 -20) -58] [(8 29 -51 -38) -51] [(-26 -21 -73 -38) -73] [(-41 95 -48 56) -48] [(-20 -30 22 -2) -30] [(-12 -51 -97 35) -97] [(63 19 -27 -13) -27] [(74 26 33 -65) -65] [(30 100 -63 -7) -63] [(-30 49 54 -66) -66] [(82 -54 -33 -80) -80] [(67 85 -77 36) -77] [(50 -17 26 58) -17] [(-92 -21 65 -1) -92] [(-85 72 -29 -11) -85] [(-39 44 -22 -50) -50] [(3 -39 -46 82) -46] [(-32 -84 -33 -76) -84] [(14 -84 -78 48) -84] [(-1 -70 -82 -88) -88] [(9 -27 -79 96) -79] [(-88 -62 -94 -1) -94] [(71 36 17 -19) -19])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[40 40 -73 40] -73]
Train Case:   6 | Input/Output: [[10 10 10 -82] -82]
Train Case:   7 | Input/Output: [[-68 80 -68 -68] -68]
Train Case:   8 | Input/Output: [[-62 -62 -62 -39] -62]
Train Case:   9 | Input/Output: [[-57 -27 -57 -57] -57]
Train Case:  10 | Input/Output: [[2 2 -45 2] -45]
Train Case:  11 | Input/Output: [[3 22 3 3] 3]
Train Case:  12 | Input/Output: [[-51 -51 -29 -51] -51]
Train Case:  13 | Input/Output: [[15 17 17 17] 15]
Train Case:  14 | Input/Output: [[26 26 26 -85] -85]
Train Case:  15 | Input/Output: [(53 53 53 53) 53]
Train Case:  16 | Input/Output: [(1 1 1 1) 1]
Train Case:  17 | Input/Output: [(-75 -75 -75 -75) -75]
Train Case:  18 | Input/Output: [(-35 -35 -35 -35) -35]
Train Case:  19 | Input/Output: [(41 41 41 41) 41]
Train Case:  20 | Input/Output: [(5 93 41 73) 5]
Train Case:  21 | Input/Output: [(65 66 89 3) 3]
Train Case:  22 | Input/Output: [(22 83 56 38) 22]
Train Case:  23 | Input/Output: [(94 50 44 93) 44]
Train Case:  24 | Input/Output: [(69 90 0 32) 0]
Train Case:  25 | Input/Output: [(35 31 23 91) 23]
Train Case:  26 | Input/Output: [(69 44 38 81) 38]
Train Case:  27 | Input/Output: [(63 37 68 34) 34]
Train Case:  28 | Input/Output: [(93 91 23 72) 23]
Train Case:  29 | Input/Output: [(87 58 82 75) 58]
Train Case:  30 | Input/Output: [(73 69 77 83) 69]
Train Case:  31 | Input/Output: [(63 24 33 11) 11]
Train Case:  32 | Input/Output: [(5 3 42 58) 3]
Train Case:  33 | Input/Output: [(96 82 63 66) 63]
Train Case:  34 | Input/Output: [(54 27 86 60) 27]
Train Case:  35 | Input/Output: [(11 32 84 61) 11]
Train Case:  36 | Input/Output: [(46 67 48 19) 19]
Train Case:  37 | Input/Output: [(63 52 75 65) 52]
Train Case:  38 | Input/Output: [(27 16 5 76) 5]
Train Case:  39 | Input/Output: [(59 3 46 69) 3]
Train Case:  40 | Input/Output: [(27 -84 51 -28) -84]
Train Case:  41 | Input/Output: [(88 -87 35 -87) -87]
Train Case:  42 | Input/Output: [(36 100 29 87) 29]
Train Case:  43 | Input/Output: [(9 -95 94 -23) -95]
Train Case:  44 | Input/Output: [(-31 -54 -42 -75) -75]
Train Case:  45 | Input/Output: [(65 5 -13 -33) -33]
Train Case:  46 | Input/Output: [(-97 -65 57 51) -97]
Train Case:  47 | Input/Output: [(-85 100 -21 -36) -85]
Train Case:  48 | Input/Output: [(-49 9 37 -90) -90]
Train Case:  49 | Input/Output: [(29 35 -59 65) -59]
Train Case:  50 | Input/Output: [(-34 -92 -100 -1) -100]
Train Case:  51 | Input/Output: [(-73 99 78 -87) -87]
Train Case:  52 | Input/Output: [(87 -83 25 17) -83]
Train Case:  53 | Input/Output: [(28 -56 -47 47) -56]
Train Case:  54 | Input/Output: [(90 -56 -76 -82) -82]
Train Case:  55 | Input/Output: [(-98 -19 35 -55) -98]
Train Case:  56 | Input/Output: [(38 -20 -1 -27) -27]
Train Case:  57 | Input/Output: [(-80 84 -59 -37) -80]
Train Case:  58 | Input/Output: [(16 -13 -90 -36) -90]
Train Case:  59 | Input/Output: [(-1 -93 80 -81) -93]
Train Case:  60 | Input/Output: [(72 -78 7 -100) -100]
Train Case:  61 | Input/Output: [(-40 -10 -98 79) -98]
Train Case:  62 | Input/Output: [(-51 -47 39 -50) -51]
Train Case:  63 | Input/Output: [(-100 76 46 36) -100]
Train Case:  64 | Input/Output: [(-30 -44 -97 12) -97]
Train Case:  65 | Input/Output: [(-35 -36 -91 16) -91]
Train Case:  66 | Input/Output: [(46 -30 -87 47) -87]
Train Case:  67 | Input/Output: [(-30 62 -29 98) -30]
Train Case:  68 | Input/Output: [(50 80 -99 -67) -99]
Train Case:  69 | Input/Output: [(-19 -28 -24 80) -28]
Train Case:  70 | Input/Output: [(-61 -19 -35 -49) -61]
Train Case:  71 | Input/Output: [(-58 -34 5 -24) -58]
Train Case:  72 | Input/Output: [(-76 72 -82 15) -82]
Train Case:  73 | Input/Output: [(44 99 -79 76) -79]
Train Case:  74 | Input/Output: [(-73 41 -41 -80) -80]
Train Case:  75 | Input/Output: [(39 -32 -15 4) -32]
Train Case:  76 | Input/Output: [(33 96 52 -29) -29]
Train Case:  77 | Input/Output: [(38 99 -58 -20) -58]
Train Case:  78 | Input/Output: [(8 29 -51 -38) -51]
Train Case:  79 | Input/Output: [(-26 -21 -73 -38) -73]
Train Case:  80 | Input/Output: [(-41 95 -48 56) -48]
Train Case:  81 | Input/Output: [(-20 -30 22 -2) -30]
Train Case:  82 | Input/Output: [(-12 -51 -97 35) -97]
Train Case:  83 | Input/Output: [(63 19 -27 -13) -27]
Train Case:  84 | Input/Output: [(74 26 33 -65) -65]
Train Case:  85 | Input/Output: [(30 100 -63 -7) -63]
Train Case:  86 | Input/Output: [(-30 49 54 -66) -66]
Train Case:  87 | Input/Output: [(82 -54 -33 -80) -80]
Train Case:  88 | Input/Output: [(67 85 -77 36) -77]
Train Case:  89 | Input/Output: [(50 -17 26 58) -17]
Train Case:  90 | Input/Output: [(-92 -21 65 -1) -92]
Train Case:  91 | Input/Output: [(-85 72 -29 -11) -85]
Train Case:  92 | Input/Output: [(-39 44 -22 -50) -50]
Train Case:  93 | Input/Output: [(3 -39 -46 82) -46]
Train Case:  94 | Input/Output: [(-32 -84 -33 -76) -84]
Train Case:  95 | Input/Output: [(14 -84 -78 48) -84]
Train Case:  96 | Input/Output: [(-1 -70 -82 -88) -88]
Train Case:  97 | Input/Output: [(9 -27 -79 96) -79]
Train Case:  98 | Input/Output: [(-88 -62 -94 -1) -94]
Train Case:  99 | Input/Output: [(71 36 17 -19) -19]
Test Case:   0 | Input/Output: [[-93 39 -93 -93] -93]
Test Case:   1 | Input/Output: [[-62 62 -62 -62] -62]
Test Case:   2 | Input/Output: [[-43 -71 -43 -43] -71]
Test Case:   3 | Input/Output: [[87 91 91 91] 87]
Test Case:   4 | Input/Output: [[-81 -81 -30 -81] -81]
Test Case:   5 | Input/Output: [[35 -59 35 35] -59]
Test Case:   6 | Input/Output: [[-94 -94 -5 -94] -94]
Test Case:   7 | Input/Output: [[-35 -35 -35 90] -35]
Test Case:   8 | Input/Output: [[36 89 89 89] 36]
Test Case:   9 | Input/Output: [[37 37 37 89] 37]
Test Case:  10 | Input/Output: [[-62 -62 88 -62] -62]
Test Case:  11 | Input/Output: [[38 -23 -23 -23] -23]
Test Case:  12 | Input/Output: [[23 23 23 -87] -87]
Test Case:  13 | Input/Output: [[-72 -2 -2 -2] -72]
Test Case:  14 | Input/Output: [[14 -51 -51 -51] -51]
Test Case:  15 | Input/Output: [[-2 -2 86 -2] -2]
Test Case:  16 | Input/Output: [[45 80 80 80] 45]
Test Case:  17 | Input/Output: [[-1 -1 -1 -12] -12]
Test Case:  18 | Input/Output: [[-64 -64 -64 -56] -64]
Test Case:  19 | Input/Output: [[-7 -7 -7 7] -7]
Test Case:  20 | Input/Output: [[78 78 78 1] 1]
Test Case:  21 | Input/Output: [[93 93 -59 93] -59]
Test Case:  22 | Input/Output: [[45 0 45 45] 0]
Test Case:  23 | Input/Output: [[25 25 25 -57] -57]
Test Case:  24 | Input/Output: [[-41 -41 -44 -41] -44]
Test Case:  25 | Input/Output: [[-27 -27 2 -27] -27]
Test Case:  26 | Input/Output: [[71 23 23 23] 23]
Test Case:  27 | Input/Output: [[-30 32 32 32] -30]
Test Case:  28 | Input/Output: [[49 22 22 22] 22]
Test Case:  29 | Input/Output: [[91 91 -70 91] -70]
Test Case:  30 | Input/Output: [[-91 -91 -91 16] -91]
Test Case:  31 | Input/Output: [[40 40 -94 40] -94]
Test Case:  32 | Input/Output: [[-92 -92 94 -92] -92]
Test Case:  33 | Input/Output: [[-76 -76 -83 -76] -83]
Test Case:  34 | Input/Output: [[37 37 37 -25] -25]
Test Case:  35 | Input/Output: [[10 9 10 10] 9]
Test Case:  36 | Input/Output: [[-87 -87 -87 -91] -91]
Test Case:  37 | Input/Output: [[-40 -24 -40 -40] -40]
Test Case:  38 | Input/Output: [[-27 69 69 69] -27]
Test Case:  39 | Input/Output: [[41 41 23 41] 23]
Test Case:  40 | Input/Output: [[-93 -61 -61 -61] -93]
Test Case:  41 | Input/Output: [[48 42 48 48] 42]
Test Case:  42 | Input/Output: [[96 -88 -88 -88] -88]
Test Case:  43 | Input/Output: [[36 -2 -2 -2] -2]
Test Case:  44 | Input/Output: [[-10 -10 -10 -6] -10]
Test Case:  45 | Input/Output: [[60 60 41 60] 41]
Test Case:  46 | Input/Output: [[-29 -29 -29 -19] -29]
Test Case:  47 | Input/Output: [[-37 -4 -4 -4] -37]
Test Case:  48 | Input/Output: [[-97 -97 -83 -97] -97]
Test Case:  49 | Input/Output: [[47 47 43 47] 43]
Test Case:  50 | Input/Output: [[-94 -94 -94 -30] -94]
Test Case:  51 | Input/Output: [[17 17 -96 17] -96]
Test Case:  52 | Input/Output: [[93 -69 -69 -69] -69]
Test Case:  53 | Input/Output: [[77 71 71 71] 71]
Test Case:  54 | Input/Output: [[39 39 -28 39] -28]
Test Case:  55 | Input/Output: [[-61 55 -61 -61] -61]
Test Case:  56 | Input/Output: [[2 2 1 2] 1]
Test Case:  57 | Input/Output: [[40 -41 -41 -41] -41]
Test Case:  58 | Input/Output: [[80 6 80 80] 6]
Test Case:  59 | Input/Output: [[19 38 19 19] 19]
Test Case:  60 | Input/Output: [[34 -25 34 34] -25]
Test Case:  61 | Input/Output: [[63 -73 63 63] -73]
Test Case:  62 | Input/Output: [[55 55 55 -60] -60]
Test Case:  63 | Input/Output: [[-66 -20 -66 -66] -66]
Test Case:  64 | Input/Output: [[-24 -24 -24 -4] -24]
Test Case:  65 | Input/Output: [[-23 -83 -23 -23] -83]
Test Case:  66 | Input/Output: [[56 -42 56 56] -42]
Test Case:  67 | Input/Output: [[74 74 74 46] 46]
Test Case:  68 | Input/Output: [[-37 -56 -56 -56] -56]
Test Case:  69 | Input/Output: [[57 57 57 -86] -86]
Test Case:  70 | Input/Output: [[-85 -85 -85 -85] -85]
Test Case:  71 | Input/Output: [[-25 -25 75 -25] -25]
Test Case:  72 | Input/Output: [[-33 24 -33 -33] -33]
Test Case:  73 | Input/Output: [[-98 -46 -46 -46] -98]
Test Case:  74 | Input/Output: [[-77 45 45 45] -77]
Test Case:  75 | Input/Output: [[3 20 20 20] 3]
Test Case:  76 | Input/Output: [[-67 -67 84 -67] -67]
Test Case:  77 | Input/Output: [[68 -85 68 68] -85]
Test Case:  78 | Input/Output: [[0 50 50 50] 0]
Test Case:  79 | Input/Output: [[24 24 24 -20] -20]
Test Case:  80 | Input/Output: [[14 -66 -66 -66] -66]
Test Case:  81 | Input/Output: [[95 95 31 95] 31]
Test Case:  82 | Input/Output: [[-51 -51 -51 51] -51]
Test Case:  83 | Input/Output: [[-15 -15 -41 -15] -41]
Test Case:  84 | Input/Output: [[26 26 26 53] 26]
Test Case:  85 | Input/Output: [[38 -20 -20 -20] -20]
Test Case:  86 | Input/Output: [[-38 11 11 11] -38]
Test Case:  87 | Input/Output: [[-100 -53 -53 -53] -100]
Test Case:  88 | Input/Output: [[37 37 37 27] 27]
Test Case:  89 | Input/Output: [[91 68 68 68] 68]
Test Case:  90 | Input/Output: [[100 100 100 52] 52]
Test Case:  91 | Input/Output: [[44 82 44 44] 44]
Test Case:  92 | Input/Output: [[-68 -68 -68 4] -68]
Test Case:  93 | Input/Output: [[82 82 82 -16] -16]
Test Case:  94 | Input/Output: [[-34 -95 -34 -34] -95]
Test Case:  95 | Input/Output: [[-76 -76 -76 48] -76]
Test Case:  96 | Input/Output: [[-47 -47 28 -47] -47]
Test Case:  97 | Input/Output: [[20 20 -87 20] -87]
Test Case:  98 | Input/Output: [[32 32 32 70] 32]
Test Case:  99 | Input/Output: [[65 65 65 42] 42]
Test Case: 100 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 101 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 102 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 103 | Input/Output: [(27 27 27 27) 27]
Test Case: 104 | Input/Output: [(54 54 54 54) 54]
Test Case: 105 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 106 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 107 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 108 | Input/Output: [(96 96 96 96) 96]
Test Case: 109 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 110 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 111 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 112 | Input/Output: [(43 43 43 43) 43]
Test Case: 113 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 114 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 115 | Input/Output: [(16 16 16 16) 16]
Test Case: 116 | Input/Output: [(79 79 79 79) 79]
Test Case: 117 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 118 | Input/Output: [(93 93 93 93) 93]
Test Case: 119 | Input/Output: [(14 14 14 14) 14]
Test Case: 120 | Input/Output: [(3 3 3 3) 3]
Test Case: 121 | Input/Output: [(62 62 62 62) 62]
Test Case: 122 | Input/Output: [(39 39 39 39) 39]
Test Case: 123 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 124 | Input/Output: [(27 27 27 27) 27]
Test Case: 125 | Input/Output: [(100 100 100 100) 100]
Test Case: 126 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 127 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 128 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 129 | Input/Output: [(2 2 2 2) 2]
Test Case: 130 | Input/Output: [(53 53 53 53) 53]
Test Case: 131 | Input/Output: [(85 85 85 85) 85]
Test Case: 132 | Input/Output: [(13 13 13 13) 13]
Test Case: 133 | Input/Output: [(89 89 89 89) 89]
Test Case: 134 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 135 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 136 | Input/Output: [(57 57 57 57) 57]
Test Case: 137 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 138 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 139 | Input/Output: [(92 92 92 92) 92]
Test Case: 140 | Input/Output: [(67 67 67 67) 67]
Test Case: 141 | Input/Output: [(34 34 34 34) 34]
Test Case: 142 | Input/Output: [(100 100 100 100) 100]
Test Case: 143 | Input/Output: [(72 72 72 72) 72]
Test Case: 144 | Input/Output: [(60 60 60 60) 60]
Test Case: 145 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 146 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 147 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 148 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 149 | Input/Output: [(21 21 21 21) 21]
Test Case: 150 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 151 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 152 | Input/Output: [(56 56 56 56) 56]
Test Case: 153 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 154 | Input/Output: [(28 28 28 28) 28]
Test Case: 155 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 156 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 157 | Input/Output: [(13 13 13 13) 13]
Test Case: 158 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 159 | Input/Output: [(18 18 18 18) 18]
Test Case: 160 | Input/Output: [(87 87 87 87) 87]
Test Case: 161 | Input/Output: [(5 5 5 5) 5]
Test Case: 162 | Input/Output: [(51 51 51 51) 51]
Test Case: 163 | Input/Output: [(17 17 17 17) 17]
Test Case: 164 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 165 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 166 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 167 | Input/Output: [(16 16 16 16) 16]
Test Case: 168 | Input/Output: [(88 88 88 88) 88]
Test Case: 169 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 170 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 171 | Input/Output: [(65 65 65 65) 65]
Test Case: 172 | Input/Output: [(45 45 45 45) 45]
Test Case: 173 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 174 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 175 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 176 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 177 | Input/Output: [(70 70 70 70) 70]
Test Case: 178 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 179 | Input/Output: [(60 60 60 60) 60]
Test Case: 180 | Input/Output: [(63 63 63 63) 63]
Test Case: 181 | Input/Output: [(85 85 85 85) 85]
Test Case: 182 | Input/Output: [(74 74 74 74) 74]
Test Case: 183 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 184 | Input/Output: [(5 5 5 5) 5]
Test Case: 185 | Input/Output: [(81 81 81 81) 81]
Test Case: 186 | Input/Output: [(37 37 37 37) 37]
Test Case: 187 | Input/Output: [(35 35 35 35) 35]
Test Case: 188 | Input/Output: [(12 12 12 12) 12]
Test Case: 189 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 190 | Input/Output: [(49 49 49 49) 49]
Test Case: 191 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 192 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 193 | Input/Output: [(1 1 1 1) 1]
Test Case: 194 | Input/Output: [(68 68 68 68) 68]
Test Case: 195 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 196 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 197 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 198 | Input/Output: [(52 52 52 52) 52]
Test Case: 199 | Input/Output: [(90 90 90 90) 90]
Test Case: 200 | Input/Output: [(3 10 21 41) 3]
Test Case: 201 | Input/Output: [(54 84 70 89) 54]
Test Case: 202 | Input/Output: [(76 45 17 38) 17]
Test Case: 203 | Input/Output: [(79 76 97 22) 22]
Test Case: 204 | Input/Output: [(6 94 38 36) 6]
Test Case: 205 | Input/Output: [(53 28 20 51) 20]
Test Case: 206 | Input/Output: [(14 92 8 53) 8]
Test Case: 207 | Input/Output: [(3 47 79 79) 3]
Test Case: 208 | Input/Output: [(62 5 25 49) 5]
Test Case: 209 | Input/Output: [(21 84 57 84) 21]
Test Case: 210 | Input/Output: [(16 25 15 15) 15]
Test Case: 211 | Input/Output: [(17 67 42 85) 17]
Test Case: 212 | Input/Output: [(50 63 94 99) 50]
Test Case: 213 | Input/Output: [(16 93 74 46) 16]
Test Case: 214 | Input/Output: [(3 0 73 58) 0]
Test Case: 215 | Input/Output: [(1 84 97 45) 1]
Test Case: 216 | Input/Output: [(22 58 12 83) 12]
Test Case: 217 | Input/Output: [(11 71 76 99) 11]
Test Case: 218 | Input/Output: [(4 68 69 94) 4]
Test Case: 219 | Input/Output: [(44 7 0 23) 0]
Test Case: 220 | Input/Output: [(80 78 53 1) 1]
Test Case: 221 | Input/Output: [(41 32 29 83) 29]
Test Case: 222 | Input/Output: [(66 83 46 73) 46]
Test Case: 223 | Input/Output: [(94 71 89 51) 51]
Test Case: 224 | Input/Output: [(85 35 85 64) 35]
Test Case: 225 | Input/Output: [(32 44 55 88) 32]
Test Case: 226 | Input/Output: [(88 32 85 73) 32]
Test Case: 227 | Input/Output: [(82 32 80 17) 17]
Test Case: 228 | Input/Output: [(44 97 0 80) 0]
Test Case: 229 | Input/Output: [(87 82 40 63) 40]
Test Case: 230 | Input/Output: [(20 17 65 60) 17]
Test Case: 231 | Input/Output: [(15 28 38 2) 2]
Test Case: 232 | Input/Output: [(57 41 67 49) 41]
Test Case: 233 | Input/Output: [(94 5 41 24) 5]
Test Case: 234 | Input/Output: [(56 24 53 22) 22]
Test Case: 235 | Input/Output: [(52 5 99 39) 5]
Test Case: 236 | Input/Output: [(75 35 40 62) 35]
Test Case: 237 | Input/Output: [(97 57 1 67) 1]
Test Case: 238 | Input/Output: [(20 44 56 100) 20]
Test Case: 239 | Input/Output: [(55 100 53 86) 53]
Test Case: 240 | Input/Output: [(37 72 12 8) 8]
Test Case: 241 | Input/Output: [(88 18 17 63) 17]
Test Case: 242 | Input/Output: [(18 45 49 98) 18]
Test Case: 243 | Input/Output: [(11 55 26 59) 11]
Test Case: 244 | Input/Output: [(11 16 46 43) 11]
Test Case: 245 | Input/Output: [(75 45 37 54) 37]
Test Case: 246 | Input/Output: [(82 94 16 16) 16]
Test Case: 247 | Input/Output: [(15 39 19 45) 15]
Test Case: 248 | Input/Output: [(44 53 72 0) 0]
Test Case: 249 | Input/Output: [(36 89 86 0) 0]
Test Case: 250 | Input/Output: [(30 95 100 31) 30]
Test Case: 251 | Input/Output: [(74 92 85 7) 7]
Test Case: 252 | Input/Output: [(80 20 50 7) 7]
Test Case: 253 | Input/Output: [(93 82 21 4) 4]
Test Case: 254 | Input/Output: [(28 55 37 79) 28]
Test Case: 255 | Input/Output: [(25 23 83 37) 23]
Test Case: 256 | Input/Output: [(95 18 2 12) 2]
Test Case: 257 | Input/Output: [(73 44 13 14) 13]
Test Case: 258 | Input/Output: [(69 27 93 54) 27]
Test Case: 259 | Input/Output: [(4 77 43 2) 2]
Test Case: 260 | Input/Output: [(95 7 21 73) 7]
Test Case: 261 | Input/Output: [(92 38 72 4) 4]
Test Case: 262 | Input/Output: [(10 35 39 33) 10]
Test Case: 263 | Input/Output: [(43 70 75 22) 22]
Test Case: 264 | Input/Output: [(50 13 66 66) 13]
Test Case: 265 | Input/Output: [(48 93 29 43) 29]
Test Case: 266 | Input/Output: [(52 93 28 68) 28]
Test Case: 267 | Input/Output: [(19 71 93 34) 19]
Test Case: 268 | Input/Output: [(30 18 67 69) 18]
Test Case: 269 | Input/Output: [(15 43 2 11) 2]
Test Case: 270 | Input/Output: [(79 35 46 73) 35]
Test Case: 271 | Input/Output: [(83 84 23 2) 2]
Test Case: 272 | Input/Output: [(74 27 70 26) 26]
Test Case: 273 | Input/Output: [(46 4 69 87) 4]
Test Case: 274 | Input/Output: [(60 73 49 0) 0]
Test Case: 275 | Input/Output: [(68 90 24 5) 5]
Test Case: 276 | Input/Output: [(69 1 14 48) 1]
Test Case: 277 | Input/Output: [(31 56 93 93) 31]
Test Case: 278 | Input/Output: [(26 12 48 29) 12]
Test Case: 279 | Input/Output: [(96 47 12 95) 12]
Test Case: 280 | Input/Output: [(53 9 96 34) 9]
Test Case: 281 | Input/Output: [(27 33 30 22) 22]
Test Case: 282 | Input/Output: [(93 18 38 8) 8]
Test Case: 283 | Input/Output: [(40 1 95 30) 1]
Test Case: 284 | Input/Output: [(97 60 82 22) 22]
Test Case: 285 | Input/Output: [(88 73 54 5) 5]
Test Case: 286 | Input/Output: [(17 42 24 15) 15]
Test Case: 287 | Input/Output: [(37 18 78 72) 18]
Test Case: 288 | Input/Output: [(25 52 76 65) 25]
Test Case: 289 | Input/Output: [(82 30 19 72) 19]
Test Case: 290 | Input/Output: [(78 33 0 92) 0]
Test Case: 291 | Input/Output: [(88 36 35 92) 35]
Test Case: 292 | Input/Output: [(9 25 72 76) 9]
Test Case: 293 | Input/Output: [(80 38 6 60) 6]
Test Case: 294 | Input/Output: [(93 35 40 58) 35]
Test Case: 295 | Input/Output: [(84 83 57 22) 22]
Test Case: 296 | Input/Output: [(62 41 30 10) 10]
Test Case: 297 | Input/Output: [(96 54 43 39) 39]
Test Case: 298 | Input/Output: [(29 81 88 97) 29]
Test Case: 299 | Input/Output: [(47 96 24 44) 24]
Test Case: 300 | Input/Output: [(4 16 11 73) 4]
Test Case: 301 | Input/Output: [(91 45 52 33) 33]
Test Case: 302 | Input/Output: [(96 1 59 62) 1]
Test Case: 303 | Input/Output: [(13 39 71 76) 13]
Test Case: 304 | Input/Output: [(33 63 77 97) 33]
Test Case: 305 | Input/Output: [(3 60 80 67) 3]
Test Case: 306 | Input/Output: [(57 53 84 43) 43]
Test Case: 307 | Input/Output: [(16 73 93 20) 16]
Test Case: 308 | Input/Output: [(79 96 42 90) 42]
Test Case: 309 | Input/Output: [(100 44 12 37) 12]
Test Case: 310 | Input/Output: [(58 54 72 97) 54]
Test Case: 311 | Input/Output: [(59 75 23 78) 23]
Test Case: 312 | Input/Output: [(96 96 42 47) 42]
Test Case: 313 | Input/Output: [(67 32 84 37) 32]
Test Case: 314 | Input/Output: [(22 90 70 41) 22]
Test Case: 315 | Input/Output: [(0 12 69 26) 0]
Test Case: 316 | Input/Output: [(74 27 20 42) 20]
Test Case: 317 | Input/Output: [(37 62 27 5) 5]
Test Case: 318 | Input/Output: [(54 75 81 86) 54]
Test Case: 319 | Input/Output: [(50 39 84 14) 14]
Test Case: 320 | Input/Output: [(91 23 56 39) 23]
Test Case: 321 | Input/Output: [(29 15 12 30) 12]
Test Case: 322 | Input/Output: [(46 12 44 90) 12]
Test Case: 323 | Input/Output: [(17 39 5 11) 5]
Test Case: 324 | Input/Output: [(92 25 97 84) 25]
Test Case: 325 | Input/Output: [(17 29 12 55) 12]
Test Case: 326 | Input/Output: [(3 48 66 38) 3]
Test Case: 327 | Input/Output: [(23 55 81 12) 12]
Test Case: 328 | Input/Output: [(89 93 15 66) 15]
Test Case: 329 | Input/Output: [(66 55 1 11) 1]
Test Case: 330 | Input/Output: [(49 5 90 71) 5]
Test Case: 331 | Input/Output: [(37 72 8 61) 8]
Test Case: 332 | Input/Output: [(19 52 36 45) 19]
Test Case: 333 | Input/Output: [(13 1 68 52) 1]
Test Case: 334 | Input/Output: [(33 66 29 28) 28]
Test Case: 335 | Input/Output: [(30 73 55 31) 30]
Test Case: 336 | Input/Output: [(51 6 98 88) 6]
Test Case: 337 | Input/Output: [(30 57 60 1) 1]
Test Case: 338 | Input/Output: [(97 52 48 33) 33]
Test Case: 339 | Input/Output: [(25 71 20 93) 20]
Test Case: 340 | Input/Output: [(7 25 1 35) 1]
Test Case: 341 | Input/Output: [(35 55 90 97) 35]
Test Case: 342 | Input/Output: [(37 76 11 11) 11]
Test Case: 343 | Input/Output: [(23 82 50 88) 23]
Test Case: 344 | Input/Output: [(6 70 11 16) 6]
Test Case: 345 | Input/Output: [(98 97 32 30) 30]
Test Case: 346 | Input/Output: [(75 70 14 17) 14]
Test Case: 347 | Input/Output: [(87 42 82 37) 37]
Test Case: 348 | Input/Output: [(10 50 54 9) 9]
Test Case: 349 | Input/Output: [(35 53 18 69) 18]
Test Case: 350 | Input/Output: [(55 51 82 5) 5]
Test Case: 351 | Input/Output: [(22 13 68 10) 10]
Test Case: 352 | Input/Output: [(20 89 11 49) 11]
Test Case: 353 | Input/Output: [(1 37 88 81) 1]
Test Case: 354 | Input/Output: [(77 34 73 92) 34]
Test Case: 355 | Input/Output: [(76 51 98 83) 51]
Test Case: 356 | Input/Output: [(6 69 65 16) 6]
Test Case: 357 | Input/Output: [(20 52 67 7) 7]
Test Case: 358 | Input/Output: [(21 58 43 63) 21]
Test Case: 359 | Input/Output: [(76 84 80 77) 76]
Test Case: 360 | Input/Output: [(6 25 46 100) 6]
Test Case: 361 | Input/Output: [(71 46 12 27) 12]
Test Case: 362 | Input/Output: [(6 50 33 49) 6]
Test Case: 363 | Input/Output: [(87 32 24 78) 24]
Test Case: 364 | Input/Output: [(66 6 100 73) 6]
Test Case: 365 | Input/Output: [(56 98 66 24) 24]
Test Case: 366 | Input/Output: [(30 8 85 94) 8]
Test Case: 367 | Input/Output: [(11 26 15 66) 11]
Test Case: 368 | Input/Output: [(29 37 23 100) 23]
Test Case: 369 | Input/Output: [(13 93 8 53) 8]
Test Case: 370 | Input/Output: [(3 39 19 76) 3]
Test Case: 371 | Input/Output: [(27 24 12 86) 12]
Test Case: 372 | Input/Output: [(68 57 19 17) 17]
Test Case: 373 | Input/Output: [(19 11 78 90) 11]
Test Case: 374 | Input/Output: [(58 97 58 32) 32]
Test Case: 375 | Input/Output: [(46 45 95 26) 26]
Test Case: 376 | Input/Output: [(63 29 40 75) 29]
Test Case: 377 | Input/Output: [(50 22 66 34) 22]
Test Case: 378 | Input/Output: [(98 13 47 45) 13]
Test Case: 379 | Input/Output: [(0 63 34 66) 0]
Test Case: 380 | Input/Output: [(83 97 10 86) 10]
Test Case: 381 | Input/Output: [(92 27 70 46) 27]
Test Case: 382 | Input/Output: [(43 50 19 54) 19]
Test Case: 383 | Input/Output: [(65 10 71 74) 10]
Test Case: 384 | Input/Output: [(62 93 25 10) 10]
Test Case: 385 | Input/Output: [(1 98 53 30) 1]
Test Case: 386 | Input/Output: [(39 78 5 63) 5]
Test Case: 387 | Input/Output: [(18 57 67 92) 18]
Test Case: 388 | Input/Output: [(1 7 36 80) 1]
Test Case: 389 | Input/Output: [(99 82 48 9) 9]
Test Case: 390 | Input/Output: [(86 41 65 92) 41]
Test Case: 391 | Input/Output: [(33 18 94 96) 18]
Test Case: 392 | Input/Output: [(56 9 89 14) 9]
Test Case: 393 | Input/Output: [(19 23 75 98) 19]
Test Case: 394 | Input/Output: [(54 63 74 44) 44]
Test Case: 395 | Input/Output: [(21 84 85 9) 9]
Test Case: 396 | Input/Output: [(40 0 51 75) 0]
Test Case: 397 | Input/Output: [(41 92 67 42) 41]
Test Case: 398 | Input/Output: [(11 34 33 57) 11]
Test Case: 399 | Input/Output: [(65 94 66 87) 65]
Test Case: 400 | Input/Output: [(60 -94 18 67) -94]
Test Case: 401 | Input/Output: [(-94 35 -53 -83) -94]
Test Case: 402 | Input/Output: [(-84 -81 89 -3) -84]
Test Case: 403 | Input/Output: [(-79 13 71 66) -79]
Test Case: 404 | Input/Output: [(68 92 97 10) 10]
Test Case: 405 | Input/Output: [(-40 -75 -42 72) -75]
Test Case: 406 | Input/Output: [(-46 15 93 -77) -77]
Test Case: 407 | Input/Output: [(97 -32 -72 -76) -76]
Test Case: 408 | Input/Output: [(24 -89 15 -10) -89]
Test Case: 409 | Input/Output: [(-89 20 -14 -96) -96]
Test Case: 410 | Input/Output: [(-100 -5 -30 -88) -100]
Test Case: 411 | Input/Output: [(99 -12 44 -89) -89]
Test Case: 412 | Input/Output: [(89 -32 -40 -47) -47]
Test Case: 413 | Input/Output: [(36 -35 86 -60) -60]
Test Case: 414 | Input/Output: [(20 -98 -80 16) -98]
Test Case: 415 | Input/Output: [(-98 48 52 -74) -98]
Test Case: 416 | Input/Output: [(-3 51 70 -12) -12]
Test Case: 417 | Input/Output: [(-53 53 -29 34) -53]
Test Case: 418 | Input/Output: [(34 98 -31 -21) -31]
Test Case: 419 | Input/Output: [(-25 75 -87 -73) -87]
Test Case: 420 | Input/Output: [(1 72 -27 51) -27]
Test Case: 421 | Input/Output: [(-58 56 77 -90) -90]
Test Case: 422 | Input/Output: [(-15 -95 85 28) -95]
Test Case: 423 | Input/Output: [(99 40 51 -10) -10]
Test Case: 424 | Input/Output: [(-21 40 -1 -5) -21]
Test Case: 425 | Input/Output: [(12 -17 -24 -96) -96]
Test Case: 426 | Input/Output: [(-44 -78 -74 37) -78]
Test Case: 427 | Input/Output: [(99 -59 -33 65) -59]
Test Case: 428 | Input/Output: [(30 3 -54 84) -54]
Test Case: 429 | Input/Output: [(51 -38 23 90) -38]
Test Case: 430 | Input/Output: [(20 19 -47 -93) -93]
Test Case: 431 | Input/Output: [(61 68 -38 62) -38]
Test Case: 432 | Input/Output: [(54 -24 63 -76) -76]
Test Case: 433 | Input/Output: [(32 20 -91 -70) -91]
Test Case: 434 | Input/Output: [(-90 76 30 83) -90]
Test Case: 435 | Input/Output: [(100 -54 66 -14) -54]
Test Case: 436 | Input/Output: [(-42 6 -25 37) -42]
Test Case: 437 | Input/Output: [(3 -56 48 39) -56]
Test Case: 438 | Input/Output: [(54 -75 -79 -54) -79]
Test Case: 439 | Input/Output: [(20 68 -4 11) -4]
Test Case: 440 | Input/Output: [(18 -41 -83 98) -83]
Test Case: 441 | Input/Output: [(88 -23 -40 95) -40]
Test Case: 442 | Input/Output: [(14 55 -98 38) -98]
Test Case: 443 | Input/Output: [(-43 -3 0 15) -43]
Test Case: 444 | Input/Output: [(77 -9 -12 30) -12]
Test Case: 445 | Input/Output: [(77 0 -26 -6) -26]
Test Case: 446 | Input/Output: [(62 -73 -32 -53) -73]
Test Case: 447 | Input/Output: [(-25 28 -58 -81) -81]
Test Case: 448 | Input/Output: [(75 7 10 -2) -2]
Test Case: 449 | Input/Output: [(-33 -42 -45 38) -45]
Test Case: 450 | Input/Output: [(30 32 -14 65) -14]
Test Case: 451 | Input/Output: [(-81 49 -58 72) -81]
Test Case: 452 | Input/Output: [(-3 -29 -16 87) -29]
Test Case: 453 | Input/Output: [(-42 74 -54 -68) -68]
Test Case: 454 | Input/Output: [(95 60 -7 -39) -39]
Test Case: 455 | Input/Output: [(-99 -16 13 -91) -99]
Test Case: 456 | Input/Output: [(70 -55 96 72) -55]
Test Case: 457 | Input/Output: [(7 72 65 15) 7]
Test Case: 458 | Input/Output: [(80 5 96 64) 5]
Test Case: 459 | Input/Output: [(-95 79 -98 94) -98]
Test Case: 460 | Input/Output: [(-67 80 18 -14) -67]
Test Case: 461 | Input/Output: [(16 54 -78 98) -78]
Test Case: 462 | Input/Output: [(-81 56 -5 -1) -81]
Test Case: 463 | Input/Output: [(17 -37 -39 92) -39]
Test Case: 464 | Input/Output: [(-93 -50 -21 74) -93]
Test Case: 465 | Input/Output: [(-26 99 80 78) -26]
Test Case: 466 | Input/Output: [(-48 71 -49 92) -49]
Test Case: 467 | Input/Output: [(92 53 5 7) 5]
Test Case: 468 | Input/Output: [(-62 -33 53 -10) -62]
Test Case: 469 | Input/Output: [(-18 -98 39 -10) -98]
Test Case: 470 | Input/Output: [(-27 -72 -11 60) -72]
Test Case: 471 | Input/Output: [(11 15 -71 -21) -71]
Test Case: 472 | Input/Output: [(60 -27 66 20) -27]
Test Case: 473 | Input/Output: [(76 100 37 9) 9]
Test Case: 474 | Input/Output: [(-7 31 -11 -86) -86]
Test Case: 475 | Input/Output: [(24 -29 -97 8) -97]
Test Case: 476 | Input/Output: [(87 2 -21 -8) -21]
Test Case: 477 | Input/Output: [(59 95 4 55) 4]
Test Case: 478 | Input/Output: [(-43 44 52 49) -43]
Test Case: 479 | Input/Output: [(-6 -18 76 -64) -64]
Test Case: 480 | Input/Output: [(64 81 54 18) 18]
Test Case: 481 | Input/Output: [(-69 -37 -6 -41) -69]
Test Case: 482 | Input/Output: [(68 -14 -3 12) -14]
Test Case: 483 | Input/Output: [(76 -49 -72 48) -72]
Test Case: 484 | Input/Output: [(-61 -55 37 -63) -63]
Test Case: 485 | Input/Output: [(-66 -31 -99 22) -99]
Test Case: 486 | Input/Output: [(36 91 31 6) 6]
Test Case: 487 | Input/Output: [(88 -96 8 82) -96]
Test Case: 488 | Input/Output: [(-33 -60 76 0) -60]
Test Case: 489 | Input/Output: [(19 -72 -72 72) -72]
Test Case: 490 | Input/Output: [(-50 -50 -76 -59) -76]
Test Case: 491 | Input/Output: [(-85 -8 18 -47) -85]
Test Case: 492 | Input/Output: [(-8 68 -47 -74) -74]
Test Case: 493 | Input/Output: [(8 -54 1 -7) -54]
Test Case: 494 | Input/Output: [(-32 -90 -89 89) -90]
Test Case: 495 | Input/Output: [(9 -19 -56 -7) -56]
Test Case: 496 | Input/Output: [(20 -41 57 -95) -95]
Test Case: 497 | Input/Output: [(-95 2 21 36) -95]
Test Case: 498 | Input/Output: [(-15 -99 -1 86) -99]
Test Case: 499 | Input/Output: [(28 -76 -7 45) -76]
Test Case: 500 | Input/Output: [(36 15 59 -44) -44]
Test Case: 501 | Input/Output: [(-29 36 -37 -69) -69]
Test Case: 502 | Input/Output: [(-16 -26 80 -12) -26]
Test Case: 503 | Input/Output: [(95 -56 -26 -16) -56]
Test Case: 504 | Input/Output: [(-50 -65 28 100) -65]
Test Case: 505 | Input/Output: [(-89 -32 -5 63) -89]
Test Case: 506 | Input/Output: [(-80 -25 93 31) -80]
Test Case: 507 | Input/Output: [(-99 -12 -19 -44) -99]
Test Case: 508 | Input/Output: [(35 -73 67 -44) -73]
Test Case: 509 | Input/Output: [(-93 -63 -80 -55) -93]
Test Case: 510 | Input/Output: [(-23 37 45 21) -23]
Test Case: 511 | Input/Output: [(6 -53 71 33) -53]
Test Case: 512 | Input/Output: [(-60 87 97 2) -60]
Test Case: 513 | Input/Output: [(67 -62 -35 53) -62]
Test Case: 514 | Input/Output: [(59 -29 -60 -49) -60]
Test Case: 515 | Input/Output: [(12 -77 77 -60) -77]
Test Case: 516 | Input/Output: [(74 -83 54 -51) -83]
Test Case: 517 | Input/Output: [(-12 -64 -11 86) -64]
Test Case: 518 | Input/Output: [(-79 -59 13 -96) -96]
Test Case: 519 | Input/Output: [(2 96 34 19) 2]
Test Case: 520 | Input/Output: [(-100 -44 -51 52) -100]
Test Case: 521 | Input/Output: [(13 -49 68 81) -49]
Test Case: 522 | Input/Output: [(62 -38 -55 -79) -79]
Test Case: 523 | Input/Output: [(20 -38 74 -36) -38]
Test Case: 524 | Input/Output: [(-31 -6 62 97) -31]
Test Case: 525 | Input/Output: [(94 -69 56 4) -69]
Test Case: 526 | Input/Output: [(21 18 64 12) 12]
Test Case: 527 | Input/Output: [(-51 -40 57 46) -51]
Test Case: 528 | Input/Output: [(-78 14 -96 -58) -96]
Test Case: 529 | Input/Output: [(-6 41 23 95) -6]
Test Case: 530 | Input/Output: [(-94 -36 -42 70) -94]
Test Case: 531 | Input/Output: [(-55 26 56 -87) -87]
Test Case: 532 | Input/Output: [(36 69 47 -63) -63]
Test Case: 533 | Input/Output: [(-84 -43 -36 90) -84]
Test Case: 534 | Input/Output: [(70 13 -50 -7) -50]
Test Case: 535 | Input/Output: [(99 95 -70 -21) -70]
Test Case: 536 | Input/Output: [(47 -27 40 28) -27]
Test Case: 537 | Input/Output: [(79 -37 -44 -9) -44]
Test Case: 538 | Input/Output: [(36 -63 -32 33) -63]
Test Case: 539 | Input/Output: [(-48 -25 -91 -29) -91]
Test Case: 540 | Input/Output: [(23 -28 75 -5) -28]
Test Case: 541 | Input/Output: [(9 -25 -42 86) -42]
Test Case: 542 | Input/Output: [(-91 89 10 -80) -91]
Test Case: 543 | Input/Output: [(99 12 64 5) 5]
Test Case: 544 | Input/Output: [(72 -92 -60 -77) -92]
Test Case: 545 | Input/Output: [(-47 -47 -14 95) -47]
Test Case: 546 | Input/Output: [(-34 2 39 90) -34]
Test Case: 547 | Input/Output: [(-85 91 62 54) -85]
Test Case: 548 | Input/Output: [(22 -36 -67 -55) -67]
Test Case: 549 | Input/Output: [(-55 -58 -22 65) -58]
Test Case: 550 | Input/Output: [(74 58 -92 -12) -92]
Test Case: 551 | Input/Output: [(-93 96 -96 54) -96]
Test Case: 552 | Input/Output: [(-42 -78 26 -62) -78]
Test Case: 553 | Input/Output: [(67 -76 60 -54) -76]
Test Case: 554 | Input/Output: [(77 -6 -78 12) -78]
Test Case: 555 | Input/Output: [(-12 99 -84 -93) -93]
Test Case: 556 | Input/Output: [(76 -50 71 -92) -92]
Test Case: 557 | Input/Output: [(100 79 0 28) 0]
Test Case: 558 | Input/Output: [(42 -36 14 70) -36]
Test Case: 559 | Input/Output: [(1 -22 -18 12) -22]
Test Case: 560 | Input/Output: [(53 -41 84 20) -41]
Test Case: 561 | Input/Output: [(-50 -97 -70 39) -97]
Test Case: 562 | Input/Output: [(-51 -47 -59 -87) -87]
Test Case: 563 | Input/Output: [(82 -52 19 45) -52]
Test Case: 564 | Input/Output: [(-69 -5 -92 73) -92]
Test Case: 565 | Input/Output: [(-40 -42 24 -50) -50]
Test Case: 566 | Input/Output: [(-57 -56 64 95) -57]
Test Case: 567 | Input/Output: [(15 69 -31 -82) -82]
Test Case: 568 | Input/Output: [(-32 42 79 -65) -65]
Test Case: 569 | Input/Output: [(44 -61 -9 -53) -61]
Test Case: 570 | Input/Output: [(-44 -44 -68 -2) -68]
Test Case: 571 | Input/Output: [(-80 -3 89 -48) -80]
Test Case: 572 | Input/Output: [(-29 57 58 89) -29]
Test Case: 573 | Input/Output: [(-78 74 28 -49) -78]
Test Case: 574 | Input/Output: [(-19 -92 -83 -45) -92]
Test Case: 575 | Input/Output: [(11 72 25 43) 11]
Test Case: 576 | Input/Output: [(-96 -18 -61 -45) -96]
Test Case: 577 | Input/Output: [(10 -100 -71 75) -100]
Test Case: 578 | Input/Output: [(62 83 1 82) 1]
Test Case: 579 | Input/Output: [(-7 97 12 -25) -25]
Test Case: 580 | Input/Output: [(97 -48 69 -94) -94]
Test Case: 581 | Input/Output: [(-63 79 30 -3) -63]
Test Case: 582 | Input/Output: [(-61 -49 61 38) -61]
Test Case: 583 | Input/Output: [(-2 -17 99 -7) -17]
Test Case: 584 | Input/Output: [(91 8 -80 -22) -80]
Test Case: 585 | Input/Output: [(-14 -50 -21 8) -50]
Test Case: 586 | Input/Output: [(10 -62 48 44) -62]
Test Case: 587 | Input/Output: [(-10 -29 -65 55) -65]
Test Case: 588 | Input/Output: [(-77 -2 83 -37) -77]
Test Case: 589 | Input/Output: [(-70 18 -86 -28) -86]
Test Case: 590 | Input/Output: [(-57 7 -30 -83) -83]
Test Case: 591 | Input/Output: [(41 -54 16 83) -54]
Test Case: 592 | Input/Output: [(50 -61 -17 -15) -61]
Test Case: 593 | Input/Output: [(-94 -48 76 93) -94]
Test Case: 594 | Input/Output: [(-50 -35 71 43) -50]
Test Case: 595 | Input/Output: [(-69 -11 94 -92) -92]
Test Case: 596 | Input/Output: [(-98 -39 -31 -18) -98]
Test Case: 597 | Input/Output: [(-58 -40 -22 -100) -100]
Test Case: 598 | Input/Output: [(-79 45 91 2) -79]
Test Case: 599 | Input/Output: [(-8 98 -34 37) -34]
Test Case: 600 | Input/Output: [(36 40 -34 -33) -34]
Test Case: 601 | Input/Output: [(-15 88 -11 -94) -94]
Test Case: 602 | Input/Output: [(-31 67 -71 -22) -71]
Test Case: 603 | Input/Output: [(19 23 37 25) 19]
Test Case: 604 | Input/Output: [(25 49 -60 21) -60]
Test Case: 605 | Input/Output: [(18 -2 98 7) -2]
Test Case: 606 | Input/Output: [(-75 -53 -12 -16) -75]
Test Case: 607 | Input/Output: [(3 54 -14 -90) -90]
Test Case: 608 | Input/Output: [(-48 95 -22 -22) -48]
Test Case: 609 | Input/Output: [(83 25 29 53) 25]
Test Case: 610 | Input/Output: [(43 4 4 -98) -98]
Test Case: 611 | Input/Output: [(40 61 -77 54) -77]
Test Case: 612 | Input/Output: [(-69 35 50 -39) -69]
Test Case: 613 | Input/Output: [(13 1 -99 81) -99]
Test Case: 614 | Input/Output: [(-44 14 -32 -21) -44]
Test Case: 615 | Input/Output: [(-46 -48 -60 -77) -77]
Test Case: 616 | Input/Output: [(91 44 39 -70) -70]
Test Case: 617 | Input/Output: [(-20 -47 -21 -8) -47]
Test Case: 618 | Input/Output: [(58 -55 71 -41) -55]
Test Case: 619 | Input/Output: [(-93 32 -77 7) -93]
Test Case: 620 | Input/Output: [(-55 -74 41 27) -74]
Test Case: 621 | Input/Output: [(-3 83 93 -15) -15]
Test Case: 622 | Input/Output: [(-21 -95 -86 -7) -95]
Test Case: 623 | Input/Output: [(20 -50 -49 59) -50]
Test Case: 624 | Input/Output: [(-30 -74 37 41) -74]
Test Case: 625 | Input/Output: [(-22 36 72 76) -22]
Test Case: 626 | Input/Output: [(-80 -83 72 42) -83]
Test Case: 627 | Input/Output: [(-10 -71 65 -18) -71]
Test Case: 628 | Input/Output: [(-78 46 27 -28) -78]
Test Case: 629 | Input/Output: [(54 76 8 -32) -32]
Test Case: 630 | Input/Output: [(47 18 -10 68) -10]
Test Case: 631 | Input/Output: [(-38 -1 80 -84) -84]
Test Case: 632 | Input/Output: [(-36 99 62 -3) -36]
Test Case: 633 | Input/Output: [(20 25 98 66) 20]
Test Case: 634 | Input/Output: [(-57 -1 94 -60) -60]
Test Case: 635 | Input/Output: [(70 -43 -17 11) -43]
Test Case: 636 | Input/Output: [(38 90 -7 51) -7]
Test Case: 637 | Input/Output: [(68 -25 24 1) -25]
Test Case: 638 | Input/Output: [(95 28 -7 -93) -93]
Test Case: 639 | Input/Output: [(25 -27 77 -61) -61]
Test Case: 640 | Input/Output: [(-84 -29 -57 76) -84]
Test Case: 641 | Input/Output: [(74 53 67 83) 53]
Test Case: 642 | Input/Output: [(0 -53 15 90) -53]
Test Case: 643 | Input/Output: [(-15 38 96 81) -15]
Test Case: 644 | Input/Output: [(25 64 36 90) 25]
Test Case: 645 | Input/Output: [(26 -91 21 30) -91]
Test Case: 646 | Input/Output: [(-18 70 -53 31) -53]
Test Case: 647 | Input/Output: [(28 17 81 67) 17]
Test Case: 648 | Input/Output: [(4 -32 -41 -42) -42]
Test Case: 649 | Input/Output: [(9 -28 -69 28) -69]
Test Case: 650 | Input/Output: [(31 -81 34 -13) -81]
Test Case: 651 | Input/Output: [(45 7 -52 -55) -55]
Test Case: 652 | Input/Output: [(-10 74 -70 -81) -81]
Test Case: 653 | Input/Output: [(-77 -90 16 -89) -90]
Test Case: 654 | Input/Output: [(26 94 -20 -8) -20]
Test Case: 655 | Input/Output: [(16 -93 -25 -60) -93]
Test Case: 656 | Input/Output: [(-85 75 -81 -41) -85]
Test Case: 657 | Input/Output: [(12 1 96 84) 1]
Test Case: 658 | Input/Output: [(9 24 5 94) 5]
Test Case: 659 | Input/Output: [(-63 86 38 -32) -63]
Test Case: 660 | Input/Output: [(-49 -55 15 -50) -55]
Test Case: 661 | Input/Output: [(-100 -39 31 95) -100]
Test Case: 662 | Input/Output: [(-58 8 -53 -13) -58]
Test Case: 663 | Input/Output: [(-36 -15 -67 -42) -67]
Test Case: 664 | Input/Output: [(-89 43 86 -40) -89]
Test Case: 665 | Input/Output: [(71 36 -77 -8) -77]
Test Case: 666 | Input/Output: [(-86 41 8 3) -86]
Test Case: 667 | Input/Output: [(-58 -97 23 -26) -97]
Test Case: 668 | Input/Output: [(-44 -8 97 66) -44]
Test Case: 669 | Input/Output: [(-13 -60 -3 67) -60]
Test Case: 670 | Input/Output: [(55 -11 -19 -62) -62]
Test Case: 671 | Input/Output: [(-25 -50 55 -13) -50]
Test Case: 672 | Input/Output: [(-89 -38 -76 -4) -89]
Test Case: 673 | Input/Output: [(68 3 -32 77) -32]
Test Case: 674 | Input/Output: [(57 -91 29 21) -91]
Test Case: 675 | Input/Output: [(63 -13 -45 -72) -72]
Test Case: 676 | Input/Output: [(-50 -42 16 -18) -50]
Test Case: 677 | Input/Output: [(-59 -34 37 -55) -59]
Test Case: 678 | Input/Output: [(76 39 -22 27) -22]
Test Case: 679 | Input/Output: [(91 -27 62 45) -27]
Test Case: 680 | Input/Output: [(49 -42 43 -37) -42]
Test Case: 681 | Input/Output: [(-3 -81 68 93) -81]
Test Case: 682 | Input/Output: [(-8 63 63 12) -8]
Test Case: 683 | Input/Output: [(-33 -26 -56 100) -56]
Test Case: 684 | Input/Output: [(41 85 -28 72) -28]
Test Case: 685 | Input/Output: [(-84 98 0 57) -84]
Test Case: 686 | Input/Output: [(-88 -100 36 6) -100]
Test Case: 687 | Input/Output: [(61 39 43 -48) -48]
Test Case: 688 | Input/Output: [(65 -36 -84 0) -84]
Test Case: 689 | Input/Output: [(24 94 16 65) 16]
Test Case: 690 | Input/Output: [(66 4 83 81) 4]
Test Case: 691 | Input/Output: [(67 63 -27 63) -27]
Test Case: 692 | Input/Output: [(73 -8 -25 56) -25]
Test Case: 693 | Input/Output: [(-95 -87 75 -46) -95]
Test Case: 694 | Input/Output: [(-71 25 35 -8) -71]
Test Case: 695 | Input/Output: [(74 -80 92 35) -80]
Test Case: 696 | Input/Output: [(-66 58 -70 24) -70]
Test Case: 697 | Input/Output: [(26 46 60 -24) -24]
Test Case: 698 | Input/Output: [(76 -17 -86 95) -86]
Test Case: 699 | Input/Output: [(-63 51 -54 -24) -63]
Test Case: 700 | Input/Output: [(-33 -49 -68 61) -68]
Test Case: 701 | Input/Output: [(49 -31 53 36) -31]
Test Case: 702 | Input/Output: [(-47 -74 -6 -91) -91]
Test Case: 703 | Input/Output: [(63 -33 -81 50) -81]
Test Case: 704 | Input/Output: [(30 0 17 -95) -95]
Test Case: 705 | Input/Output: [(51 -82 97 -64) -82]
Test Case: 706 | Input/Output: [(17 47 36 -25) -25]
Test Case: 707 | Input/Output: [(-54 -55 100 30) -55]
Test Case: 708 | Input/Output: [(69 -50 27 -10) -50]
Test Case: 709 | Input/Output: [(-69 -12 -73 -43) -73]
Test Case: 710 | Input/Output: [(-51 1 54 -74) -74]
Test Case: 711 | Input/Output: [(8 7 -3 74) -3]
Test Case: 712 | Input/Output: [(64 40 -58 45) -58]
Test Case: 713 | Input/Output: [(-17 -50 60 -64) -64]
Test Case: 714 | Input/Output: [(84 -97 -55 9) -97]
Test Case: 715 | Input/Output: [(-12 -32 57 -32) -32]
Test Case: 716 | Input/Output: [(-51 96 -83 -78) -83]
Test Case: 717 | Input/Output: [(-5 -24 -33 98) -33]
Test Case: 718 | Input/Output: [(36 -56 70 94) -56]
Test Case: 719 | Input/Output: [(-88 -59 -17 30) -88]
Test Case: 720 | Input/Output: [(-22 -56 65 52) -56]
Test Case: 721 | Input/Output: [(-100 89 -11 14) -100]
Test Case: 722 | Input/Output: [(17 53 10 3) 3]
Test Case: 723 | Input/Output: [(96 -65 -74 40) -74]
Test Case: 724 | Input/Output: [(21 1 -30 94) -30]
Test Case: 725 | Input/Output: [(31 32 -61 -78) -78]
Test Case: 726 | Input/Output: [(-78 20 -80 17) -80]
Test Case: 727 | Input/Output: [(50 45 26 56) 26]
Test Case: 728 | Input/Output: [(-15 7 -50 83) -50]
Test Case: 729 | Input/Output: [(-90 -50 61 -72) -90]
Test Case: 730 | Input/Output: [(-66 -27 88 61) -66]
Test Case: 731 | Input/Output: [(-3 41 17 -7) -7]
Test Case: 732 | Input/Output: [(37 75 -15 76) -15]
Test Case: 733 | Input/Output: [(80 69 -57 100) -57]
Test Case: 734 | Input/Output: [(62 3 -76 37) -76]
Test Case: 735 | Input/Output: [(-28 83 40 68) -28]
Test Case: 736 | Input/Output: [(28 59 52 -29) -29]
Test Case: 737 | Input/Output: [(1 -52 -57 -60) -60]
Test Case: 738 | Input/Output: [(-76 38 72 98) -76]
Test Case: 739 | Input/Output: [(-72 24 -25 -18) -72]
Test Case: 740 | Input/Output: [(36 -76 -10 93) -76]
Test Case: 741 | Input/Output: [(-63 7 15 -19) -63]
Test Case: 742 | Input/Output: [(-50 -86 46 10) -86]
Test Case: 743 | Input/Output: [(-66 -26 -4 -83) -83]
Test Case: 744 | Input/Output: [(98 -32 25 -88) -88]
Test Case: 745 | Input/Output: [(-72 -67 -8 -36) -72]
Test Case: 746 | Input/Output: [(48 68 -34 -24) -34]
Test Case: 747 | Input/Output: [(-27 38 0 20) -27]
Test Case: 748 | Input/Output: [(17 -73 71 -88) -88]
Test Case: 749 | Input/Output: [(-20 99 78 -86) -86]
Test Case: 750 | Input/Output: [(-50 83 -46 4) -50]
Test Case: 751 | Input/Output: [(24 -77 38 87) -77]
Test Case: 752 | Input/Output: [(90 61 50 80) 50]
Test Case: 753 | Input/Output: [(50 68 52 22) 22]
Test Case: 754 | Input/Output: [(-29 72 -88 18) -88]
Test Case: 755 | Input/Output: [(-64 74 -52 -44) -64]
Test Case: 756 | Input/Output: [(-61 52 -36 54) -61]
Test Case: 757 | Input/Output: [(-67 26 60 -66) -67]
Test Case: 758 | Input/Output: [(-92 93 20 -95) -95]
Test Case: 759 | Input/Output: [(58 43 92 -36) -36]
Test Case: 760 | Input/Output: [(-71 100 -57 -61) -71]
Test Case: 761 | Input/Output: [(-21 -16 -17 69) -21]
Test Case: 762 | Input/Output: [(-29 -99 81 -78) -99]
Test Case: 763 | Input/Output: [(16 -63 -41 68) -63]
Test Case: 764 | Input/Output: [(28 -91 6 8) -91]
Test Case: 765 | Input/Output: [(-42 83 0 -90) -90]
Test Case: 766 | Input/Output: [(28 -18 47 -69) -69]
Test Case: 767 | Input/Output: [(7 -90 14 -81) -90]
Test Case: 768 | Input/Output: [(-88 -55 -83 -39) -88]
Test Case: 769 | Input/Output: [(-5 -62 -64 57) -64]
Test Case: 770 | Input/Output: [(68 70 38 47) 38]
Test Case: 771 | Input/Output: [(16 -2 -96 19) -96]
Test Case: 772 | Input/Output: [(-68 74 1 95) -68]
Test Case: 773 | Input/Output: [(89 -93 -43 -65) -93]
Test Case: 774 | Input/Output: [(-31 -8 41 40) -31]
Test Case: 775 | Input/Output: [(79 8 73 2) 2]
Test Case: 776 | Input/Output: [(87 13 41 -68) -68]
Test Case: 777 | Input/Output: [(32 29 31 82) 29]
Test Case: 778 | Input/Output: [(-10 -54 37 82) -54]
Test Case: 779 | Input/Output: [(94 80 32 95) 32]
Test Case: 780 | Input/Output: [(86 3 12 -96) -96]
Test Case: 781 | Input/Output: [(-13 18 69 -96) -96]
Test Case: 782 | Input/Output: [(-50 24 -42 82) -50]
Test Case: 783 | Input/Output: [(84 -58 20 44) -58]
Test Case: 784 | Input/Output: [(5 -79 83 28) -79]
Test Case: 785 | Input/Output: [(14 -6 83 -96) -96]
Test Case: 786 | Input/Output: [(65 -71 -78 -4) -78]
Test Case: 787 | Input/Output: [(91 15 -48 -83) -83]
Test Case: 788 | Input/Output: [(-58 29 59 -96) -96]
Test Case: 789 | Input/Output: [(-32 -51 0 33) -51]
Test Case: 790 | Input/Output: [(76 0 -43 85) -43]
Test Case: 791 | Input/Output: [(58 -83 -14 -44) -83]
Test Case: 792 | Input/Output: [(95 52 34 -33) -33]
Test Case: 793 | Input/Output: [(73 86 48 -14) -14]
Test Case: 794 | Input/Output: [(13 -29 -55 -23) -55]
Test Case: 795 | Input/Output: [(-40 -55 19 67) -55]
Test Case: 796 | Input/Output: [(-56 21 48 -81) -81]
Test Case: 797 | Input/Output: [(61 -6 -46 52) -46]
Test Case: 798 | Input/Output: [(-6 -33 86 -62) -62]
Test Case: 799 | Input/Output: [(37 -92 90 -89) -92]
Test Case: 800 | Input/Output: [(-66 -48 44 -23) -66]
Test Case: 801 | Input/Output: [(72 -96 -66 99) -96]
Test Case: 802 | Input/Output: [(-36 84 -51 -1) -51]
Test Case: 803 | Input/Output: [(-46 14 -17 88) -46]
Test Case: 804 | Input/Output: [(-50 67 -34 41) -50]
Test Case: 805 | Input/Output: [(-86 51 97 13) -86]
Test Case: 806 | Input/Output: [(-44 75 -16 52) -44]
Test Case: 807 | Input/Output: [(-71 6 85 100) -71]
Test Case: 808 | Input/Output: [(17 -34 -53 -25) -53]
Test Case: 809 | Input/Output: [(21 82 -41 -8) -41]
Test Case: 810 | Input/Output: [(-73 -4 -8 -86) -86]
Test Case: 811 | Input/Output: [(75 55 28 -81) -81]
Test Case: 812 | Input/Output: [(14 52 -84 -14) -84]
Test Case: 813 | Input/Output: [(22 14 76 -78) -78]
Test Case: 814 | Input/Output: [(14 67 10 64) 10]
Test Case: 815 | Input/Output: [(-45 11 51 33) -45]
Test Case: 816 | Input/Output: [(-72 53 -61 -95) -95]
Test Case: 817 | Input/Output: [(66 -24 51 -56) -56]
Test Case: 818 | Input/Output: [(81 -68 -19 66) -68]
Test Case: 819 | Input/Output: [(-43 -88 -85 95) -88]
Test Case: 820 | Input/Output: [(95 -73 -25 80) -73]
Test Case: 821 | Input/Output: [(-51 29 -21 4) -51]
Test Case: 822 | Input/Output: [(-59 61 32 100) -59]
Test Case: 823 | Input/Output: [(-52 -74 -81 34) -81]
Test Case: 824 | Input/Output: [(-35 -5 -60 -37) -60]
Test Case: 825 | Input/Output: [(80 54 -43 63) -43]
Test Case: 826 | Input/Output: [(28 -84 10 98) -84]
Test Case: 827 | Input/Output: [(-55 -51 21 -52) -55]
Test Case: 828 | Input/Output: [(31 -5 67 69) -5]
Test Case: 829 | Input/Output: [(29 -82 -37 68) -82]
Test Case: 830 | Input/Output: [(-90 -93 -11 -35) -93]
Test Case: 831 | Input/Output: [(-24 -77 -45 -25) -77]
Test Case: 832 | Input/Output: [(18 -45 22 -67) -67]
Test Case: 833 | Input/Output: [(87 41 -95 99) -95]
Test Case: 834 | Input/Output: [(-17 -99 -77 -25) -99]
Test Case: 835 | Input/Output: [(73 -10 -84 96) -84]
Test Case: 836 | Input/Output: [(-67 7 12 100) -67]
Test Case: 837 | Input/Output: [(34 -8 -30 -62) -62]
Test Case: 838 | Input/Output: [(30 70 -9 -33) -33]
Test Case: 839 | Input/Output: [(8 67 21 69) 8]
Test Case: 840 | Input/Output: [(-42 94 91 42) -42]
Test Case: 841 | Input/Output: [(39 -40 34 45) -40]
Test Case: 842 | Input/Output: [(87 -17 -73 -4) -73]
Test Case: 843 | Input/Output: [(36 63 -91 46) -91]
Test Case: 844 | Input/Output: [(9 53 70 23) 9]
Test Case: 845 | Input/Output: [(31 47 73 81) 31]
Test Case: 846 | Input/Output: [(76 -3 79 -57) -57]
Test Case: 847 | Input/Output: [(10 43 -82 58) -82]
Test Case: 848 | Input/Output: [(34 42 99 28) 28]
Test Case: 849 | Input/Output: [(46 86 56 52) 46]
Test Case: 850 | Input/Output: [(-62 67 53 61) -62]
Test Case: 851 | Input/Output: [(6 79 -89 21) -89]
Test Case: 852 | Input/Output: [(8 -3 -72 -91) -91]
Test Case: 853 | Input/Output: [(-17 -92 -51 17) -92]
Test Case: 854 | Input/Output: [(-6 -97 27 -73) -97]
Test Case: 855 | Input/Output: [(-62 57 54 -49) -62]
Test Case: 856 | Input/Output: [(44 82 17 -5) -5]
Test Case: 857 | Input/Output: [(-9 9 36 45) -9]
Test Case: 858 | Input/Output: [(-4 -73 -79 98) -79]
Test Case: 859 | Input/Output: [(62 31 -29 37) -29]
Test Case: 860 | Input/Output: [(-68 88 -30 4) -68]
Test Case: 861 | Input/Output: [(76 -34 56 -3) -34]
Test Case: 862 | Input/Output: [(-4 -4 62 38) -4]
Test Case: 863 | Input/Output: [(-1 50 -27 34) -27]
Test Case: 864 | Input/Output: [(-27 -21 73 -26) -27]
Test Case: 865 | Input/Output: [(-37 -11 73 0) -37]
Test Case: 866 | Input/Output: [(41 70 65 -60) -60]
Test Case: 867 | Input/Output: [(99 -44 -12 -3) -44]
Test Case: 868 | Input/Output: [(-68 53 94 -76) -76]
Test Case: 869 | Input/Output: [(-22 -75 84 54) -75]
Test Case: 870 | Input/Output: [(-58 -90 -77 -71) -90]
Test Case: 871 | Input/Output: [(-97 15 58 0) -97]
Test Case: 872 | Input/Output: [(43 42 -70 90) -70]
Test Case: 873 | Input/Output: [(64 12 -41 31) -41]
Test Case: 874 | Input/Output: [(-27 90 -9 78) -27]
Test Case: 875 | Input/Output: [(-63 -54 95 -65) -65]
Test Case: 876 | Input/Output: [(-10 21 -56 -69) -69]
Test Case: 877 | Input/Output: [(-74 -22 89 5) -74]
Test Case: 878 | Input/Output: [(88 56 66 96) 56]
Test Case: 879 | Input/Output: [(-99 -16 16 -68) -99]
Test Case: 880 | Input/Output: [(-3 2 42 -15) -15]
Test Case: 881 | Input/Output: [(26 -68 97 5) -68]
Test Case: 882 | Input/Output: [(-87 -24 30 -18) -87]
Test Case: 883 | Input/Output: [(-5 -36 -7 -78) -78]
Test Case: 884 | Input/Output: [(63 -80 -62 74) -80]
Test Case: 885 | Input/Output: [(29 54 -5 61) -5]
Test Case: 886 | Input/Output: [(-89 72 67 78) -89]
Test Case: 887 | Input/Output: [(3 89 17 37) 3]
Test Case: 888 | Input/Output: [(56 -52 -31 41) -52]
Test Case: 889 | Input/Output: [(65 -71 17 -61) -71]
Test Case: 890 | Input/Output: [(-85 27 -21 -65) -85]
Test Case: 891 | Input/Output: [(78 -1 7 25) -1]
Test Case: 892 | Input/Output: [(-12 52 12 24) -12]
Test Case: 893 | Input/Output: [(39 54 79 26) 26]
Test Case: 894 | Input/Output: [(-97 -48 -51 -77) -97]
Test Case: 895 | Input/Output: [(-45 95 36 -98) -98]
Test Case: 896 | Input/Output: [(-95 -86 -62 81) -95]
Test Case: 897 | Input/Output: [(5 -61 18 -94) -94]
Test Case: 898 | Input/Output: [(59 -82 23 -38) -82]
Test Case: 899 | Input/Output: [(-95 1 95 -33) -95]
Test Case: 900 | Input/Output: [(-80 -56 -64 -87) -87]
Test Case: 901 | Input/Output: [(42 -84 -51 72) -84]
Test Case: 902 | Input/Output: [(97 49 -31 -84) -84]
Test Case: 903 | Input/Output: [(-13 63 33 -69) -69]
Test Case: 904 | Input/Output: [(-92 -32 60 -63) -92]
Test Case: 905 | Input/Output: [(99 33 8 72) 8]
Test Case: 906 | Input/Output: [(-74 -65 53 -43) -74]
Test Case: 907 | Input/Output: [(-1 -46 33 -31) -46]
Test Case: 908 | Input/Output: [(31 62 -25 16) -25]
Test Case: 909 | Input/Output: [(47 81 60 61) 47]
Test Case: 910 | Input/Output: [(-96 32 -78 72) -96]
Test Case: 911 | Input/Output: [(-68 5 11 55) -68]
Test Case: 912 | Input/Output: [(81 -22 43 56) -22]
Test Case: 913 | Input/Output: [(-22 -57 81 22) -57]
Test Case: 914 | Input/Output: [(94 65 -1 -10) -10]
Test Case: 915 | Input/Output: [(60 68 4 20) 4]
Test Case: 916 | Input/Output: [(-52 27 -93 -63) -93]
Test Case: 917 | Input/Output: [(56 -20 -55 63) -55]
Test Case: 918 | Input/Output: [(-59 -22 -78 -46) -78]
Test Case: 919 | Input/Output: [(12 -37 -25 32) -37]
Test Case: 920 | Input/Output: [(-39 99 -95 32) -95]
Test Case: 921 | Input/Output: [(-19 -75 -34 -33) -75]
Test Case: 922 | Input/Output: [(-45 -46 6 -45) -46]
Test Case: 923 | Input/Output: [(-26 53 -79 31) -79]
Test Case: 924 | Input/Output: [(31 27 42 -68) -68]
Test Case: 925 | Input/Output: [(-37 -91 26 10) -91]
Test Case: 926 | Input/Output: [(90 -60 -90 -53) -90]
Test Case: 927 | Input/Output: [(-80 -49 22 -68) -80]
Test Case: 928 | Input/Output: [(-26 80 -12 59) -26]
Test Case: 929 | Input/Output: [(21 -74 -25 90) -74]
Test Case: 930 | Input/Output: [(63 -63 80 44) -63]
Test Case: 931 | Input/Output: [(-51 48 24 -13) -51]
Test Case: 932 | Input/Output: [(-18 -75 -93 -39) -93]
Test Case: 933 | Input/Output: [(-64 -18 -100 -69) -100]
Test Case: 934 | Input/Output: [(32 51 23 17) 17]
Test Case: 935 | Input/Output: [(17 3 -51 -68) -68]
Test Case: 936 | Input/Output: [(78 -14 -43 -57) -57]
Test Case: 937 | Input/Output: [(50 -3 3 99) -3]
Test Case: 938 | Input/Output: [(-56 99 -68 61) -68]
Test Case: 939 | Input/Output: [(-31 56 -26 -27) -31]
Test Case: 940 | Input/Output: [(-73 -64 -77 31) -77]
Test Case: 941 | Input/Output: [(0 -55 -40 -22) -55]
Test Case: 942 | Input/Output: [(-62 -94 55 -19) -94]
Test Case: 943 | Input/Output: [(-94 -22 67 78) -94]
Test Case: 944 | Input/Output: [(-66 65 82 50) -66]
Test Case: 945 | Input/Output: [(92 -7 97 96) -7]
Test Case: 946 | Input/Output: [(74 -12 -35 2) -35]
Test Case: 947 | Input/Output: [(-47 -81 87 -52) -81]
Test Case: 948 | Input/Output: [(-80 23 29 -28) -80]
Test Case: 949 | Input/Output: [(96 6 -21 -58) -58]
Test Case: 950 | Input/Output: [(-47 -15 40 36) -47]
Test Case: 951 | Input/Output: [(-46 -100 -64 21) -100]
Test Case: 952 | Input/Output: [(-31 -10 -21 4) -31]
Test Case: 953 | Input/Output: [(90 -41 -52 -76) -76]
Test Case: 954 | Input/Output: [(72 66 -50 -16) -50]
Test Case: 955 | Input/Output: [(-54 -30 69 93) -54]
Test Case: 956 | Input/Output: [(-87 7 6 -54) -87]
Test Case: 957 | Input/Output: [(79 -94 -25 -3) -94]
Test Case: 958 | Input/Output: [(7 -59 78 -49) -59]
Test Case: 959 | Input/Output: [(94 20 -44 55) -44]
Test Case: 960 | Input/Output: [(14 -75 -21 92) -75]
Test Case: 961 | Input/Output: [(-54 78 -10 -35) -54]
Test Case: 962 | Input/Output: [(43 -2 -60 -92) -92]
Test Case: 963 | Input/Output: [(54 14 -80 59) -80]
Test Case: 964 | Input/Output: [(-22 86 58 6) -22]
Test Case: 965 | Input/Output: [(63 39 90 22) 22]
Test Case: 966 | Input/Output: [(27 -7 -98 82) -98]
Test Case: 967 | Input/Output: [(5 -89 -18 -14) -89]
Test Case: 968 | Input/Output: [(-36 -2 12 99) -36]
Test Case: 969 | Input/Output: [(8 -97 98 42) -97]
Test Case: 970 | Input/Output: [(-50 16 36 72) -50]
Test Case: 971 | Input/Output: [(0 -2 -38 -69) -69]
Test Case: 972 | Input/Output: [(49 76 3 96) 3]
Test Case: 973 | Input/Output: [(-83 -51 -9 30) -83]
Test Case: 974 | Input/Output: [(-88 -85 64 -14) -88]
Test Case: 975 | Input/Output: [(6 -18 73 31) -18]
Test Case: 976 | Input/Output: [(67 -27 59 10) -27]
Test Case: 977 | Input/Output: [(63 -28 -70 1) -70]
Test Case: 978 | Input/Output: [(-98 -28 1 -14) -98]
Test Case: 979 | Input/Output: [(-23 40 100 -83) -83]
Test Case: 980 | Input/Output: [(89 45 -75 -97) -97]
Test Case: 981 | Input/Output: [(25 27 18 68) 18]
Test Case: 982 | Input/Output: [(76 -88 75 -27) -88]
Test Case: 983 | Input/Output: [(66 44 -15 -10) -15]
Test Case: 984 | Input/Output: [(7 -77 -61 90) -77]
Test Case: 985 | Input/Output: [(-23 78 -5 -30) -30]
Test Case: 986 | Input/Output: [(55 -6 -45 -57) -57]
Test Case: 987 | Input/Output: [(-21 -4 -10 19) -21]
Test Case: 988 | Input/Output: [(-98 21 23 -6) -98]
Test Case: 989 | Input/Output: [(74 -35 45 -81) -81]
Test Case: 990 | Input/Output: [(-12 -42 -75 -28) -75]
Test Case: 991 | Input/Output: [(-53 28 -17 14) -53]
Test Case: 992 | Input/Output: [(44 -20 -81 -86) -86]
Test Case: 993 | Input/Output: [(-57 -18 -18 49) -57]
Test Case: 994 | Input/Output: [(-24 65 13 28) -24]
Test Case: 995 | Input/Output: [(81 -94 76 -36) -94]
Test Case: 996 | Input/Output: [(-19 43 13 90) -19]
Test Case: 997 | Input/Output: [(-53 -13 -97 -69) -97]
Test Case: 998 | Input/Output: [(7 -98 56 -22) -98]
Test Case: 999 | Input/Output: [(-15 -100 22 44) -100]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 47 119 114 -15 43 20 -1 -93 -2 -102 -29 -42 108 -75 85 -120
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[40 40 -73 40] -73] [[10 10 10 -82] -82] [[-68 80 -68 -68] -68] [[-62 -62 -62 -39] -62] [[-57 -27 -57 -57] -57] [[2 2 -45 2] -45] [[3 22 3 3] 3] [[-51 -51 -29 -51] -51] [[15 17 17 17] 15] [[26 26 26 -85] -85] [(53 53 53 53) 53] [(1 1 1 1) 1] [(-75 -75 -75 -75) -75] [(-35 -35 -35 -35) -35] [(41 41 41 41) 41] [(5 93 41 73) 5] [(65 66 89 3) 3] [(22 83 56 38) 22] [(94 50 44 93) 44] [(69 90 0 32) 0] [(35 31 23 91) 23] [(69 44 38 81) 38] [(63 37 68 34) 34] [(93 91 23 72) 23] [(87 58 82 75) 58] [(73 69 77 83) 69] [(63 24 33 11) 11] [(5 3 42 58) 3] [(96 82 63 66) 63] [(54 27 86 60) 27] [(11 32 84 61) 11] [(46 67 48 19) 19] [(63 52 75 65) 52] [(27 16 5 76) 5] [(59 3 46 69) 3] [(27 -84 51 -28) -84] [(88 -87 35 -87) -87] [(36 100 29 87) 29] [(9 -95 94 -23) -95] [(-31 -54 -42 -75) -75] [(65 5 -13 -33) -33] [(-97 -65 57 51) -97] [(-85 100 -21 -36) -85] [(-49 9 37 -90) -90] [(29 35 -59 65) -59] [(-34 -92 -100 -1) -100] [(-73 99 78 -87) -87] [(87 -83 25 17) -83] [(28 -56 -47 47) -56] [(90 -56 -76 -82) -82] [(-98 -19 35 -55) -98] [(38 -20 -1 -27) -27] [(-80 84 -59 -37) -80] [(16 -13 -90 -36) -90] [(-1 -93 80 -81) -93] [(72 -78 7 -100) -100] [(-40 -10 -98 79) -98] [(-51 -47 39 -50) -51] [(-100 76 46 36) -100] [(-30 -44 -97 12) -97] [(-35 -36 -91 16) -91] [(46 -30 -87 47) -87] [(-30 62 -29 98) -30] [(50 80 -99 -67) -99] [(-19 -28 -24 80) -28] [(-61 -19 -35 -49) -61] [(-58 -34 5 -24) -58] [(-76 72 -82 15) -82] [(44 99 -79 76) -79] [(-73 41 -41 -80) -80] [(39 -32 -15 4) -32] [(33 96 52 -29) -29] [(38 99 -58 -20) -58] [(8 29 -51 -38) -51] [(-26 -21 -73 -38) -73] [(-41 95 -48 56) -48] [(-20 -30 22 -2) -30] [(-12 -51 -97 35) -97] [(63 19 -27 -13) -27] [(74 26 33 -65) -65] [(30 100 -63 -7) -63] [(-30 49 54 -66) -66] [(82 -54 -33 -80) -80] [(67 85 -77 36) -77] [(50 -17 26 58) -17] [(-92 -21 65 -1) -92] [(-85 72 -29 -11) -85] [(-39 44 -22 -50) -50] [(3 -39 -46 82) -46] [(-32 -84 -33 -76) -84] [(14 -84 -78 48) -84] [(-1 -70 -82 -88) -88] [(9 -27 -79 96) -79] [(-88 -62 -94 -1) -94] [(71 36 17 -19) -19])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -45                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -29                
Correct output: 15                  | Program output: 17                 
Correct output: -85                 | Program output: 26                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -35                 | Program output: -35                
Correct output: 41                  | Program output: 41                 
Correct output: 5                   | Program output: 41                 
Correct output: 3                   | Program output: 89                 
Correct output: 22                  | Program output: 56                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: 23                  | Program output: 23                 
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 68                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 82                 
Correct output: 69                  | Program output: 77                 
Correct output: 11                  | Program output: 33                 
Correct output: 3                   | Program output: 42                 
Correct output: 63                  | Program output: 63                 
Correct output: 27                  | Program output: 86                 
Correct output: 11                  | Program output: 84                 
Correct output: 19                  | Program output: 48                 
Correct output: 52                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 46                 
Correct output: -84                 | Program output: 51                 
Correct output: -87                 | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: 94                 
Correct output: -75                 | Program output: -42                
Correct output: -33                 | Program output: -13                
Correct output: -97                 | Program output: 57                 
Correct output: -85                 | Program output: -21                
Correct output: -90                 | Program output: 37                 
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 78                 
Correct output: -83                 | Program output: 25                 
Correct output: -56                 | Program output: -47                
Correct output: -82                 | Program output: -76                
Correct output: -98                 | Program output: 35                 
Correct output: -27                 | Program output: -1                 
Correct output: -80                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: 80                 
Correct output: -100                | Program output: 7                  
Correct output: -98                 | Program output: -98                
Correct output: -51                 | Program output: 39                 
Correct output: -100                | Program output: 46                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -30                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -24                
Correct output: -61                 | Program output: -35                
Correct output: -58                 | Program output: 5                  
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -41                
Correct output: -32                 | Program output: -15                
Correct output: -29                 | Program output: 52                 
Correct output: -58                 | Program output: -58                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: 22                 
Correct output: -97                 | Program output: -97                
Correct output: -27                 | Program output: -27                
Correct output: -65                 | Program output: 33                 
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: 54                 
Correct output: -80                 | Program output: -33                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: 26                 
Correct output: -92                 | Program output: 65                 
Correct output: -85                 | Program output: -29                
Correct output: -50                 | Program output: -22                
Correct output: -46                 | Program output: -46                
Correct output: -84                 | Program output: -33                
Correct output: -84                 | Program output: -78                
Correct output: -88                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction 86} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction 41} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 2, :instruction tag_integer_613} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_eq} {:close 0, :instruction tag_integer_688} {:close 0, :instruction in3} {:close 0, :instruction tagged_918} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap})
Lexicase best program: (boolean_eq integer_inc exec_rot (exec_if (exec_s (in2 boolean_or boolean_flush exec_do*while () integer_fromboolean exec_empty in2 print_integer exec_noop 86 integer_shove integer_gt) (exec_flush integer_dup_times integer_dup_times integer_eq exec_k (integer_swap boolean_xor exec_pop (exec_shove (exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot (in1 boolean_dup) (41 exec_when (in3 integer_min) integer_gte integer_mult) (boolean_empty boolean_or integer_rot integer_mult print_newline boolean_dup_items exec_y (exec_eq) tag_integer_613)) boolean_dup_items exec_empty exec_eq integer_add) boolean_eq integer_eq boolean_or integer_mult) integer_add exec_y_when_autoconstructing (boolean_shove) boolean_dup_times integer_flush print_newline exec_y_when_autoconstructing (exec_rot (boolean_and exec_do*times (exec_dup_items boolean_flush exec_y_when_autoconstructing () boolean_yankdup)) (exec_swap (boolean_frominteger exec_eq) (tag_integer_688 in3 tagged_918 integer_gt integer_dup) integer_div) (integer_shove) exec_s (boolean_rot integer_stackdepth exec_dup_times () exec_yankdup integer_dup_times integer_swap) () ()))) ()) ()) ()) () ())
Lexicase best errors: [0 1 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 129
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction 86} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction 41} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 2, :instruction tag_integer_613} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_eq} {:close 0, :instruction tag_integer_688} {:close 0, :instruction in3} {:close 0, :instruction tagged_918} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap})
Zero cases best program: (boolean_eq integer_inc exec_rot (exec_if (exec_s (in2 boolean_or boolean_flush exec_do*while () integer_fromboolean exec_empty in2 print_integer exec_noop 86 integer_shove integer_gt) (exec_flush integer_dup_times integer_dup_times integer_eq exec_k (integer_swap boolean_xor exec_pop (exec_shove (exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot (in1 boolean_dup) (41 exec_when (in3 integer_min) integer_gte integer_mult) (boolean_empty boolean_or integer_rot integer_mult print_newline boolean_dup_items exec_y (exec_eq) tag_integer_613)) boolean_dup_items exec_empty exec_eq integer_add) boolean_eq integer_eq boolean_or integer_mult) integer_add exec_y_when_autoconstructing (boolean_shove) boolean_dup_times integer_flush print_newline exec_y_when_autoconstructing (exec_rot (boolean_and exec_do*times (exec_dup_items boolean_flush exec_y_when_autoconstructing () boolean_yankdup)) (exec_swap (boolean_frominteger exec_eq) (tag_integer_688 in3 tagged_918 integer_gt integer_dup) integer_div) (integer_shove) exec_s (boolean_rot integer_stackdepth exec_dup_times () exec_yankdup integer_dup_times integer_swap) () ()))) ()) ()) ()) () ())
Zero cases best errors: [0 1 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 129
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 10 3 8 3 6 8 3 3 7)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (8 10 3 8 3 6 8 3 3 7)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction tag_boolean_187} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add})
Best program: (integer_mult tag_boolean_187 integer_mod integer_flush boolean_dup_times boolean_yank integer_sub integer_sub exec_swap (integer_gt print_integer integer_eq) (exec_when (exec_do*while (in3 exec_swap (exec_k () (print_boolean print_integer integer_min boolean_not integer_fromboolean exec_k () () in4 exec_dup_items integer_sub integer_dup_times print_newline boolean_or integer_inc print_exec (exec_while (boolean_eq exec_do*range (exec_while (exec_pop (exec_when (exec_y_when_autoconstructing (integer_lt exec_dup (integer_add)))))))))) ()))))
Errors: [1 0 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 41
Size: 60
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 9.941
Median total errors in population: 10
Error averages by case: (0.992 0.99 0.997 0.992 0.997 0.994 0.992 0.997 0.997 0.993)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.283
Average program size in population (points): 70.51
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 456939
--- Timings ---
Current time: 1559314307910 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 31.8%
Fitness Testing:      1.7 seconds, 64.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -45                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -29                
Correct output: 15                  | Program output: 17                 
Correct output: -85                 | Program output: 26                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -35                 | Program output: -35                
Correct output: 41                  | Program output: 41                 
Correct output: 5                   | Program output: 41                 
Correct output: 3                   | Program output: 89                 
Correct output: 22                  | Program output: 56                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: 23                  | Program output: 23                 
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 68                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 82                 
Correct output: 69                  | Program output: 77                 
Correct output: 11                  | Program output: 33                 
Correct output: 3                   | Program output: 42                 
Correct output: 63                  | Program output: 63                 
Correct output: 27                  | Program output: 86                 
Correct output: 11                  | Program output: 84                 
Correct output: 19                  | Program output: 48                 
Correct output: 52                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 46                 
Correct output: -84                 | Program output: 51                 
Correct output: -87                 | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: 94                 
Correct output: -75                 | Program output: -42                
Correct output: -33                 | Program output: -13                
Correct output: -97                 | Program output: 57                 
Correct output: -85                 | Program output: -21                
Correct output: -90                 | Program output: 37                 
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 78                 
Correct output: -83                 | Program output: 25                 
Correct output: -56                 | Program output: -47                
Correct output: -82                 | Program output: -76                
Correct output: -98                 | Program output: 35                 
Correct output: -27                 | Program output: -1                 
Correct output: -80                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: 80                 
Correct output: -100                | Program output: 7                  
Correct output: -98                 | Program output: -98                
Correct output: -51                 | Program output: 39                 
Correct output: -100                | Program output: 46                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -30                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -24                
Correct output: -61                 | Program output: -35                
Correct output: -58                 | Program output: 5                  
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -41                
Correct output: -32                 | Program output: -15                
Correct output: -29                 | Program output: 52                 
Correct output: -58                 | Program output: -58                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: 22                 
Correct output: -97                 | Program output: -97                
Correct output: -27                 | Program output: -27                
Correct output: -65                 | Program output: 33                 
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: 54                 
Correct output: -80                 | Program output: -33                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: 26                 
Correct output: -92                 | Program output: 65                 
Correct output: -85                 | Program output: -29                
Correct output: -50                 | Program output: -22                
Correct output: -46                 | Program output: -46                
Correct output: -84                 | Program output: -33                
Correct output: -84                 | Program output: -78                
Correct output: -88                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult})
Lexicase best program: (integer_eq in3 integer_mod integer_gte boolean_swap exec_do*range (integer_yankdup boolean_eq) integer_shove in3 exec_y (exec_pop () exec_if (boolean_dup_items boolean_pop) (boolean_and print_integer exec_dup_times (exec_eq in2 integer_gt) integer_fromboolean) integer_lt exec_y (integer_gte boolean_xor boolean_yank boolean_flush) exec_yank) boolean_pop exec_do*times () exec_shove (in2 boolean_yankdup) boolean_invert_first_then_and exec_k_when_autoconstructing (integer_gt) (exec_s (boolean_pop) (integer_dec boolean_dup exec_y_when_autoconstructing (exec_y (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) (exec_shove (exec_shove (exec_do*range (integer_mult))))))) ()))
Lexicase best errors: [1 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 75
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult})
Zero cases best program: (integer_eq in3 integer_mod integer_gte boolean_swap exec_do*range (integer_yankdup boolean_eq) integer_shove in3 exec_y (exec_pop () exec_if (boolean_dup_items boolean_pop) (boolean_and print_integer exec_dup_times (exec_eq in2 integer_gt) integer_fromboolean) integer_lt exec_y (integer_gte boolean_xor boolean_yank boolean_flush) exec_yank) boolean_pop exec_do*times () exec_shove (in2 boolean_yankdup) boolean_invert_first_then_and exec_k_when_autoconstructing (integer_gt) (exec_s (boolean_pop) (integer_dec boolean_dup exec_y_when_autoconstructing (exec_y (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) (exec_shove (exec_shove (exec_do*range (integer_mult))))))) ()))
Zero cases best errors: [1 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 75
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 495 752 424 423 1000 759 924 424 424)
Population mean number of elite cases: 6.63
Count of perfect (error zero) individuals by case: (0 495 752 424 423 0 759 924 424 424)
Population mean number of perfect (error zero) cases: 4.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_y})
Best program: (integer_eq in3 integer_mod integer_gte boolean_swap exec_do*range (integer_yankdup boolean_eq integer_shove in3 exec_y (exec_pop () exec_if (boolean_dup_items boolean_pop) (boolean_and print_integer exec_dup_times (exec_eq in2 integer_gt) integer_fromboolean) integer_lt exec_y (integer_gte) boolean_xor boolean_yank boolean_flush) exec_yank) boolean_pop exec_do*times () exec_shove (integer_fromboolean print_boolean) boolean_and in1 boolean_rot exec_yankdup exec_do*times (integer_flush integer_flush boolean_empty exec_do*while () integer_empty) exec_y ())
Errors: [1 1 0 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 45
Size: 58
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 5.375
Median total errors in population: 6
Error averages by case: (1.0 0.505 0.248 0.576 0.577 1.0 0.241 0.076 0.576 0.576)
Error minima by case: (1 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 52.801
Average program size in population (points): 71.356
Average percent parens in population: 0.257
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.497
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.543
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 963087
--- Timings ---
Current time: 1559314311407 milliseconds
Total Time:           5.8 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         3.0 seconds, 51.9%
Fitness Testing:      2.3 seconds, 40.2%
Report:               0.4 seconds,  6.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -45                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -29                
Correct output: 15                  | Program output: 17                 
Correct output: -85                 | Program output: 26                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -35                 | Program output: -35                
Correct output: 41                  | Program output: 41                 
Correct output: 5                   | Program output: 41                 
Correct output: 3                   | Program output: 89                 
Correct output: 22                  | Program output: 56                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: 23                  | Program output: 23                 
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 68                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 82                 
Correct output: 69                  | Program output: 77                 
Correct output: 11                  | Program output: 33                 
Correct output: 3                   | Program output: 42                 
Correct output: 63                  | Program output: 63                 
Correct output: 27                  | Program output: 86                 
Correct output: 11                  | Program output: 84                 
Correct output: 19                  | Program output: 48                 
Correct output: 52                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 46                 
Correct output: -84                 | Program output: 51                 
Correct output: -87                 | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: 94                 
Correct output: -75                 | Program output: -42                
Correct output: -33                 | Program output: -13                
Correct output: -97                 | Program output: 57                 
Correct output: -85                 | Program output: -21                
Correct output: -90                 | Program output: 37                 
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 78                 
Correct output: -83                 | Program output: 25                 
Correct output: -56                 | Program output: -47                
Correct output: -82                 | Program output: -76                
Correct output: -98                 | Program output: 35                 
Correct output: -27                 | Program output: -1                 
Correct output: -80                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: 80                 
Correct output: -100                | Program output: 7                  
Correct output: -98                 | Program output: -98                
Correct output: -51                 | Program output: 39                 
Correct output: -100                | Program output: 46                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -30                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -24                
Correct output: -61                 | Program output: -35                
Correct output: -58                 | Program output: 5                  
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -41                
Correct output: -32                 | Program output: -15                
Correct output: -29                 | Program output: 52                 
Correct output: -58                 | Program output: -58                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: 22                 
Correct output: -97                 | Program output: -97                
Correct output: -27                 | Program output: -27                
Correct output: -65                 | Program output: 33                 
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: 54                 
Correct output: -80                 | Program output: -33                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: 26                 
Correct output: -92                 | Program output: 65                 
Correct output: -85                 | Program output: -29                
Correct output: -50                 | Program output: -22                
Correct output: -46                 | Program output: -46                
Correct output: -84                 | Program output: -33                
Correct output: -84                 | Program output: -78                
Correct output: -88                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction tagged_543} {:close 1, :instruction integer_add} {:close 2, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction -60} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_y})
Lexicase best program: (in3 tagged_543 integer_add print_integer exec_s_when_autoconstructing () (integer_dup_times exec_yankdup boolean_dup_times in1 exec_s_when_autoconstructing (exec_yank boolean_frominteger) (integer_gt boolean_invert_first_then_and integer_stackdepth integer_pop -60 exec_s_when_autoconstructing () (exec_dup (boolean_yank integer_fromboolean) exec_do*while () integer_add exec_k_when_autoconstructing (boolean_or integer_gt) (integer_mod integer_empty exec_empty) boolean_or exec_pop () exec_while (exec_do*times () exec_flush exec_do*while (integer_stackdepth integer_yank integer_max boolean_or integer_dup integer_fromboolean print_boolean) boolean_and in1 boolean_rot) exec_yankdup exec_do*times (integer_flush integer_flush boolean_empty exec_do*while () integer_empty) exec_y ()) ()) ()) ())
Lexicase best errors: [1 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 74
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction tagged_543} {:close 1, :instruction integer_add} {:close 2, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction -60} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_y})
Zero cases best program: (in3 tagged_543 integer_add print_integer exec_s_when_autoconstructing () (integer_dup_times exec_yankdup boolean_dup_times in1 exec_s_when_autoconstructing (exec_yank boolean_frominteger) (integer_gt boolean_invert_first_then_and integer_stackdepth integer_pop -60 exec_s_when_autoconstructing () (exec_dup (boolean_yank integer_fromboolean) exec_do*while () integer_add exec_k_when_autoconstructing (boolean_or integer_gt) (integer_mod integer_empty exec_empty) boolean_or exec_pop () exec_while (exec_do*times () exec_flush exec_do*while (integer_stackdepth integer_yank integer_max boolean_or integer_dup integer_fromboolean print_boolean) boolean_and in1 boolean_rot) exec_yankdup exec_do*times (integer_flush integer_flush boolean_empty exec_do*while () integer_empty) exec_y ()) ()) ()) ())
Zero cases best errors: [1 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 74
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (179 733 179 912 733 733 1000 1000 180 733)
Population mean number of elite cases: 6.38
Count of perfect (error zero) individuals by case: (179 733 179 912 733 733 0 0 180 733)
Population mean number of perfect (error zero) cases: 4.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction tagged_543} {:close 1, :instruction integer_add} {:close 2, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction -60} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_y})
Best program: (in3 tagged_543 integer_add print_integer exec_s_when_autoconstructing () (integer_dup_times exec_while (boolean_dup_times in1 exec_s_when_autoconstructing (exec_yank boolean_invert_first_then_and) (integer_gt boolean_invert_first_then_and integer_stackdepth integer_pop -60 exec_s_when_autoconstructing () (exec_dup (boolean_yank integer_fromboolean) exec_do*while () integer_add exec_k_when_autoconstructing (boolean_or integer_gt) (boolean_empty integer_empty exec_empty) boolean_or exec_pop () exec_while (exec_do*times () exec_flush exec_do*while (integer_stackdepth integer_yank integer_max boolean_or integer_dup integer_fromboolean print_boolean) boolean_and in1 boolean_rot) exec_yankdup exec_do*times (integer_flush integer_flush boolean_empty exec_do*while () integer_empty) exec_y ()) ()) ())) ())
Errors: [1 0 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 53
Size: 75
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 5.618
Median total errors in population: 5
Error averages by case: (0.821 0.267 0.821 0.088 0.267 0.267 1.0 1.0 0.82 0.267)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 49.496
Average program size in population (points): 66.819
Average percent parens in population: 0.254
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.933
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1474886
--- Timings ---
Current time: 1559314314159 milliseconds
Total Time:           9.0 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         5.0 seconds, 55.3%
Fitness Testing:      2.9 seconds, 32.1%
Report:               1.0 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -45                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -29                
Correct output: 15                  | Program output: 17                 
Correct output: -85                 | Program output: 26                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -35                 | Program output: -35                
Correct output: 41                  | Program output: 41                 
Correct output: 5                   | Program output: 41                 
Correct output: 3                   | Program output: 89                 
Correct output: 22                  | Program output: 56                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: 23                  | Program output: 23                 
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 68                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 82                 
Correct output: 69                  | Program output: 77                 
Correct output: 11                  | Program output: 33                 
Correct output: 3                   | Program output: 42                 
Correct output: 63                  | Program output: 63                 
Correct output: 27                  | Program output: 86                 
Correct output: 11                  | Program output: 84                 
Correct output: 19                  | Program output: 48                 
Correct output: 52                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 46                 
Correct output: -84                 | Program output: 51                 
Correct output: -87                 | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: 94                 
Correct output: -75                 | Program output: -42                
Correct output: -33                 | Program output: -13                
Correct output: -97                 | Program output: 57                 
Correct output: -85                 | Program output: -21                
Correct output: -90                 | Program output: 37                 
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 78                 
Correct output: -83                 | Program output: 25                 
Correct output: -56                 | Program output: -47                
Correct output: -82                 | Program output: -76                
Correct output: -98                 | Program output: 35                 
Correct output: -27                 | Program output: -1                 
Correct output: -80                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: 80                 
Correct output: -100                | Program output: 7                  
Correct output: -98                 | Program output: -98                
Correct output: -51                 | Program output: 39                 
Correct output: -100                | Program output: 46                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -30                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -24                
Correct output: -61                 | Program output: -35                
Correct output: -58                 | Program output: 5                  
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -41                
Correct output: -32                 | Program output: -15                
Correct output: -29                 | Program output: 52                 
Correct output: -58                 | Program output: -58                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: 22                 
Correct output: -97                 | Program output: -97                
Correct output: -27                 | Program output: -27                
Correct output: -65                 | Program output: 33                 
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: 54                 
Correct output: -80                 | Program output: -33                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: 26                 
Correct output: -92                 | Program output: 65                 
Correct output: -85                 | Program output: -29                
Correct output: -50                 | Program output: -22                
Correct output: -46                 | Program output: -46                
Correct output: -84                 | Program output: -33                
Correct output: -84                 | Program output: -78                
Correct output: -88                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times})
Lexicase best program: (exec_y (boolean_yankdup exec_k_when_autoconstructing (in3 in3) (exec_y_when_autoconstructing (tag_boolean_882 print_integer exec_flush integer_gte exec_do*range (integer_pop boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_dup_times) integer_swap exec_do*while () exec_s_when_autoconstructing (integer_yankdup integer_dup_times) () ()))))
Lexicase best errors: [0 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 42
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times})
Zero cases best program: (exec_y (boolean_yankdup exec_k_when_autoconstructing (in3 in3) (exec_y_when_autoconstructing (tag_boolean_882 print_integer exec_flush integer_gte exec_do*range (integer_pop boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_dup_times) integer_swap exec_do*while () exec_s_when_autoconstructing (integer_yankdup integer_dup_times) () ()))))
Zero cases best errors: [0 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 42
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (519 519 519 914 521 519 1 519 1 1)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (519 519 519 914 521 519 1 519 1 1)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction tagged_543} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_y})
Best program: (in3 tagged_543 integer_add exec_do*range (integer_yankdup boolean_eq integer_shove in3 exec_y (exec_pop () exec_if (boolean_dup_items boolean_pop) (boolean_and print_integer exec_dup_times (exec_eq in2 exec_dup (boolean_yank integer_fromboolean) exec_do*while () integer_add exec_k_when_autoconstructing (boolean_or integer_gt) (boolean_empty integer_empty integer_min) boolean_or exec_pop () exec_while (exec_do*times () exec_flush exec_do*while (integer_stackdepth integer_yank integer_max boolean_or integer_dup integer_fromboolean print_boolean) boolean_and in1 boolean_rot) exec_yankdup exec_do*times (integer_flush integer_flush boolean_empty exec_do*while () integer_empty) exec_y ())))))
Errors: [0 0 0 0 0 0 1 0 1 1]
Total: 3
Mean: 0.3
Genome size: 53
Size: 71
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 5.967
Median total errors in population: 3
Error averages by case: (0.481 0.481 0.481 0.086 0.479 0.481 0.999 0.481 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.898
Average program size in population (points): 66.745
Average percent parens in population: 0.267
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.40575
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1912470
--- Timings ---
Current time: 1559314316597 milliseconds
Total Time:          11.3 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.6 seconds, 58.6%
Fitness Testing:      3.4 seconds, 29.7%
Report:               1.2 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -45                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -29                
Correct output: 15                  | Program output: 17                 
Correct output: -85                 | Program output: 26                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -35                 | Program output: -35                
Correct output: 41                  | Program output: 41                 
Correct output: 5                   | Program output: 41                 
Correct output: 3                   | Program output: 89                 
Correct output: 22                  | Program output: 56                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: 23                  | Program output: 23                 
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 68                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 82                 
Correct output: 69                  | Program output: 77                 
Correct output: 11                  | Program output: 33                 
Correct output: 3                   | Program output: 42                 
Correct output: 63                  | Program output: 63                 
Correct output: 27                  | Program output: 86                 
Correct output: 11                  | Program output: 84                 
Correct output: 19                  | Program output: 48                 
Correct output: 52                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 46                 
Correct output: -84                 | Program output: 51                 
Correct output: -87                 | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: 94                 
Correct output: -75                 | Program output: -42                
Correct output: -33                 | Program output: -13                
Correct output: -97                 | Program output: 57                 
Correct output: -85                 | Program output: -21                
Correct output: -90                 | Program output: 37                 
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: 78                 
Correct output: -83                 | Program output: 25                 
Correct output: -56                 | Program output: -47                
Correct output: -82                 | Program output: -76                
Correct output: -98                 | Program output: 35                 
Correct output: -27                 | Program output: -1                 
Correct output: -80                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: 80                 
Correct output: -100                | Program output: 7                  
Correct output: -98                 | Program output: -98                
Correct output: -51                 | Program output: 39                 
Correct output: -100                | Program output: 46                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -30                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -24                
Correct output: -61                 | Program output: -35                
Correct output: -58                 | Program output: 5                  
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -41                
Correct output: -32                 | Program output: -15                
Correct output: -29                 | Program output: 52                 
Correct output: -58                 | Program output: -58                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: 22                 
Correct output: -97                 | Program output: -97                
Correct output: -27                 | Program output: -27                
Correct output: -65                 | Program output: 33                 
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: 54                 
Correct output: -80                 | Program output: -33                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: 26                 
Correct output: -92                 | Program output: 65                 
Correct output: -85                 | Program output: -29                
Correct output: -50                 | Program output: -22                
Correct output: -46                 | Program output: -46                
Correct output: -84                 | Program output: -33                
Correct output: -84                 | Program output: -78                
Correct output: -88                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction tagged_543} {:close 1, :instruction integer_add} {:close 2, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction -60} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Lexicase best program: (in3 tagged_543 integer_add print_integer exec_s_when_autoconstructing () (integer_dup_times exec_while (boolean_dup_times in1 exec_s_when_autoconstructing (exec_yank boolean_frominteger) (integer_gt boolean_invert_first_then_and integer_stackdepth integer_pop -60 exec_s_when_autoconstructing (exec_dup (boolean_yank integer_fromboolean boolean_swap exec_eq integer_dup_times) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () (integer_rot) boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ()))) ())) ())
Lexicase best errors: [0 0 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 64
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction tagged_543} {:close 1, :instruction integer_add} {:close 2, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction -60} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Zero cases best program: (in3 tagged_543 integer_add print_integer exec_s_when_autoconstructing () (integer_dup_times exec_while (boolean_dup_times in1 exec_s_when_autoconstructing (exec_yank boolean_frominteger) (integer_gt boolean_invert_first_then_and integer_stackdepth integer_pop -60 exec_s_when_autoconstructing (exec_dup (boolean_yank integer_fromboolean boolean_swap exec_eq integer_dup_times) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () (integer_rot) boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ()))) ())) ())
Zero cases best errors: [0 0 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 64
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (575 575 107 107 575 573 921 919 1 238)
Population mean number of elite cases: 4.59
Count of perfect (error zero) individuals by case: (575 575 107 107 575 573 921 919 1 238)
Population mean number of perfect (error zero) cases: 4.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_485} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop})
Best program: (boolean_yankdup exec_shove () integer_pop integer_fromboolean in3 print_integer boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_dup_times) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and integer_rot boolean_eq boolean_rot integer_dec boolean_and boolean_pop integer_div print_boolean exec_stackdepth exec_dup_times (boolean_rot tagged_485) exec_do*times (integer_gte integer_rot) integer_mod integer_gt in1 exec_do*while (exec_swap (integer_gte boolean_empty) (exec_yankdup boolean_dup_items) exec_do*while () exec_yank exec_noop))
Errors: [0 0 1 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 51
Size: 60
Percent parens: 0.150
--- Population Statistics ---
Average total errors in population: 5.409
Median total errors in population: 4
Error averages by case: (0.425 0.425 0.893 0.893 0.425 0.427 0.079 0.081 0.999 0.762)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.884
Average program size in population (points): 61.115
Average percent parens in population: 0.244
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.23375
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2307319
--- Timings ---
Current time: 1559314319237 milliseconds
Total Time:          13.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.4 seconds, 60.9%
Fitness Testing:      3.8 seconds, 27.2%
Report:               1.5 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: 40                 
Correct output: -82                 | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -45                 | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: 15                  | Program output: 15                 
Correct output: -85                 | Program output: 26                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -35                 | Program output: -35                
Correct output: 41                  | Program output: 41                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 65                 
Correct output: 22                  | Program output: 22                 
Correct output: 44                  | Program output: 94                 
Correct output: 0                   | Program output: 69                 
Correct output: 23                  | Program output: 35                 
Correct output: 38                  | Program output: 69                 
Correct output: 34                  | Program output: 63                 
Correct output: 23                  | Program output: 93                 
Correct output: 58                  | Program output: 87                 
Correct output: 69                  | Program output: 73                 
Correct output: 11                  | Program output: 63                 
Correct output: 3                   | Program output: 5                  
Correct output: 63                  | Program output: 96                 
Correct output: 27                  | Program output: 54                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 46                 
Correct output: 52                  | Program output: 63                 
Correct output: 5                   | Program output: 27                 
Correct output: 3                   | Program output: 59                 
Correct output: -84                 | Program output: 27                 
Correct output: -87                 | Program output: 88                 
Correct output: 29                  | Program output: 36                 
Correct output: -95                 | Program output: 9                  
Correct output: -75                 | Program output: -31                
Correct output: -33                 | Program output: 65                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -90                 | Program output: -49                
Correct output: -59                 | Program output: 29                 
Correct output: -100                | Program output: -34                
Correct output: -87                 | Program output: -73                
Correct output: -83                 | Program output: 87                 
Correct output: -56                 | Program output: 28                 
Correct output: -82                 | Program output: 90                 
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 38                 
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: 16                 
Correct output: -93                 | Program output: -1                 
Correct output: -100                | Program output: 72                 
Correct output: -98                 | Program output: -40                
Correct output: -51                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -30                
Correct output: -91                 | Program output: -35                
Correct output: -87                 | Program output: 46                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: 50                 
Correct output: -28                 | Program output: -19                
Correct output: -61                 | Program output: -61                
Correct output: -58                 | Program output: -58                
Correct output: -82                 | Program output: -76                
Correct output: -79                 | Program output: 44                 
Correct output: -80                 | Program output: -73                
Correct output: -32                 | Program output: 39                 
Correct output: -29                 | Program output: 33                 
Correct output: -58                 | Program output: 38                 
Correct output: -51                 | Program output: 8                  
Correct output: -73                 | Program output: -26                
Correct output: -48                 | Program output: -41                
Correct output: -30                 | Program output: -20                
Correct output: -97                 | Program output: -12                
Correct output: -27                 | Program output: 63                 
Correct output: -65                 | Program output: 74                 
Correct output: -63                 | Program output: 30                 
Correct output: -66                 | Program output: -30                
Correct output: -80                 | Program output: 82                 
Correct output: -77                 | Program output: 67                 
Correct output: -17                 | Program output: 50                 
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -85                
Correct output: -50                 | Program output: -39                
Correct output: -46                 | Program output: 3                  
Correct output: -84                 | Program output: -32                
Correct output: -84                 | Program output: 14                 
Correct output: -88                 | Program output: -1                 
Correct output: -79                 | Program output: 9                  
Correct output: -94                 | Program output: -88                
Correct output: -19                 | Program output: 71                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction tagged_543} {:close 1, :instruction integer_add} {:close 2, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction -60} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_y})
Lexicase best program: (in3 tagged_543 integer_add print_integer exec_s_when_autoconstructing () (integer_dup_times exec_while (boolean_dup_times in1 exec_s_when_autoconstructing (exec_yank boolean_frominteger) (integer_gt boolean_invert_first_then_and integer_stackdepth integer_pop -60 exec_s_when_autoconstructing () (exec_dup (boolean_yank integer_fromboolean) exec_do*while () integer_add) (exec_k_when_autoconstructing (boolean_or integer_gt) (boolean_empty integer_empty exec_do*while () integer_add exec_k_when_autoconstructing (boolean_or integer_gt) (boolean_empty integer_empty exec_empty) boolean_or exec_pop () exec_while (exec_do*times () exec_flush exec_do*while (exec_dup_times (integer_yank integer_max boolean_or integer_dup integer_fromboolean print_boolean) boolean_and in1 boolean_rot) exec_yankdup exec_do*times (integer_flush integer_flush boolean_empty exec_do*while () integer_empty) exec_y ())))) ())) ())
Lexicase best errors: [1 0 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 86
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction tagged_543} {:close 1, :instruction integer_add} {:close 2, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction -60} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_y})
Zero cases best program: (in3 tagged_543 integer_add print_integer exec_s_when_autoconstructing () (integer_dup_times exec_while (boolean_dup_times in1 exec_s_when_autoconstructing (exec_yank boolean_frominteger) (integer_gt boolean_invert_first_then_and integer_stackdepth integer_pop -60 exec_s_when_autoconstructing () (exec_dup (boolean_yank integer_fromboolean) exec_do*while () integer_add) (exec_k_when_autoconstructing (boolean_or integer_gt) (boolean_empty integer_empty exec_do*while () integer_add exec_k_when_autoconstructing (boolean_or integer_gt) (boolean_empty integer_empty exec_empty) boolean_or exec_pop () exec_while (exec_do*times () exec_flush exec_do*while (exec_dup_times (integer_yank integer_max boolean_or integer_dup integer_fromboolean print_boolean) boolean_and in1 boolean_rot) exec_yankdup exec_do*times (integer_flush integer_flush boolean_empty exec_do*while () integer_empty) exec_y ())))) ())) ())
Zero cases best errors: [1 0 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 86
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (106 936 479 219 130 219 222 130 481 479)
Population mean number of elite cases: 3.40
Count of perfect (error zero) individuals by case: (106 936 479 219 130 219 222 130 481 479)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add})
Best program: (integer_mult in1 integer_mod integer_flush boolean_dup_times boolean_yank integer_sub integer_sub exec_swap (in1 print_integer integer_eq) (exec_when (exec_do*while (in3 exec_swap (exec_k () (print_boolean print_integer integer_min boolean_not integer_fromboolean exec_k () () in4 exec_dup_items exec_dup_times (integer_dup_times print_newline boolean_or integer_lte print_exec (exec_while (boolean_eq exec_do*range (exec_while (exec_pop (exec_when (exec_y_when_autoconstructing (integer_lt exec_dup (integer_add))))))))))) ()))))
Errors: [1 0 1 0 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 41
Size: 61
Percent parens: 0.328
--- Population Statistics ---
Average total errors in population: 6.599
Median total errors in population: 6
Error averages by case: (0.894 0.064 0.521 0.781 0.87 0.781 0.778 0.87 0.519 0.521)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.0
Average program size in population (points): 60.965
Average percent parens in population: 0.258
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.8575
Median age in population: 7.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2648345
--- Timings ---
Current time: 1559314321643 milliseconds
Total Time:          16.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.3 seconds, 62.4%
Fitness Testing:      4.1 seconds, 25.0%
Report:               2.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: 40                 
Correct output: -82                 | Program output: 10                 
Correct output: -68                 | Program output: 80                 
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -27                
Correct output: -45                 | Program output: 2                  
Correct output: 3                   | Program output: 22                 
Correct output: -51                 | Program output: -51                
Correct output: 15                  | Program output: 17                 
Correct output: -85                 | Program output: 26                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -35                 | Program output: -35                
Correct output: 41                  | Program output: 41                 
Correct output: 5                   | Program output: 93                 
Correct output: 3                   | Program output: 66                 
Correct output: 22                  | Program output: 83                 
Correct output: 44                  | Program output: 50                 
Correct output: 0                   | Program output: 90                 
Correct output: 23                  | Program output: 31                 
Correct output: 38                  | Program output: 44                 
Correct output: 34                  | Program output: 37                 
Correct output: 23                  | Program output: 91                 
Correct output: 58                  | Program output: 58                 
Correct output: 69                  | Program output: 69                 
Correct output: 11                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 63                  | Program output: 82                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 32                 
Correct output: 19                  | Program output: 67                 
Correct output: 52                  | Program output: 52                 
Correct output: 5                   | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: 29                  | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: -54                
Correct output: -33                 | Program output: 5                  
Correct output: -97                 | Program output: -65                
Correct output: -85                 | Program output: 100                
Correct output: -90                 | Program output: 9                  
Correct output: -59                 | Program output: 35                 
Correct output: -100                | Program output: -92                
Correct output: -87                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -56                
Correct output: -82                 | Program output: -56                
Correct output: -98                 | Program output: -19                
Correct output: -27                 | Program output: -20                
Correct output: -80                 | Program output: 84                 
Correct output: -90                 | Program output: -13                
Correct output: -93                 | Program output: -93                
Correct output: -100                | Program output: -78                
Correct output: -98                 | Program output: -10                
Correct output: -51                 | Program output: -47                
Correct output: -100                | Program output: 76                 
Correct output: -97                 | Program output: -44                
Correct output: -91                 | Program output: -36                
Correct output: -87                 | Program output: -30                
Correct output: -30                 | Program output: 62                 
Correct output: -99                 | Program output: 80                 
Correct output: -28                 | Program output: -28                
Correct output: -61                 | Program output: -19                
Correct output: -58                 | Program output: -34                
Correct output: -82                 | Program output: 72                 
Correct output: -79                 | Program output: 99                 
Correct output: -80                 | Program output: 41                 
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 96                 
Correct output: -58                 | Program output: 99                 
Correct output: -51                 | Program output: 29                 
Correct output: -73                 | Program output: -21                
Correct output: -48                 | Program output: 95                 
Correct output: -30                 | Program output: -30                
Correct output: -97                 | Program output: -51                
Correct output: -27                 | Program output: 19                 
Correct output: -65                 | Program output: 26                 
Correct output: -63                 | Program output: 100                
Correct output: -66                 | Program output: 49                 
Correct output: -80                 | Program output: -54                
Correct output: -77                 | Program output: 85                 
Correct output: -17                 | Program output: -17                
Correct output: -92                 | Program output: -21                
Correct output: -85                 | Program output: 72                 
Correct output: -50                 | Program output: 44                 
Correct output: -46                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -70                
Correct output: -79                 | Program output: -27                
Correct output: -94                 | Program output: -62                
Correct output: -19                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_851} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult})
Lexicase best program: (in4 in2 tag_boolean_851 print_integer exec_flush integer_gte print_integer exec_flush integer_gte exec_do*range (integer_pop boolean_not exec_dup_times (exec_eq in2 integer_gt) integer_fromboolean) integer_lt exec_y (integer_gte) boolean_xor boolean_yank boolean_flush exec_yank boolean_pop exec_do*times () boolean_yank in2 boolean_yankdup boolean_invert_first_then_and exec_k_when_autoconstructing (integer_gt) (exec_s (boolean_pop integer_dec boolean_invert_first_then_and exec_y_when_autoconstructing (exec_y (exec_k_when_autoconstructing (exec_yank exec_y (integer_mult boolean_invert_first_then_and boolean_pop) exec_shove (exec_shove (exec_do*range (integer_mult)))) ()))) () ()))
Lexicase best errors: [1 0 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 66
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_851} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult})
Zero cases best program: (in4 in2 tag_boolean_851 print_integer exec_flush integer_gte print_integer exec_flush integer_gte exec_do*range (integer_pop boolean_not exec_dup_times (exec_eq in2 integer_gt) integer_fromboolean) integer_lt exec_y (integer_gte) boolean_xor boolean_yank boolean_flush exec_yank boolean_pop exec_do*times () boolean_yank in2 boolean_yankdup boolean_invert_first_then_and exec_k_when_autoconstructing (integer_gt) (exec_s (boolean_pop integer_dec boolean_invert_first_then_and exec_y_when_autoconstructing (exec_y (exec_k_when_autoconstructing (exec_yank exec_y (integer_mult boolean_invert_first_then_and boolean_pop) exec_shove (exec_shove (exec_do*range (integer_mult)))) ()))) () ()))
Zero cases best errors: [1 0 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 66
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (306 109 306 306 273 109 109 225 109 226)
Population mean number of elite cases: 2.08
Count of perfect (error zero) individuals by case: (306 109 306 306 273 109 109 225 109 226)
Population mean number of perfect (error zero) cases: 2.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult})
Best program: (in4 in2 tag_boolean_882 print_integer exec_flush integer_gte print_integer exec_flush integer_gte exec_do*range (integer_pop boolean_not exec_dup_times (exec_eq in2 integer_gt) integer_fromboolean) integer_lt exec_y (integer_gte) boolean_xor boolean_yank boolean_flush exec_yank boolean_pop exec_do*times () boolean_yank in2 boolean_yankdup boolean_invert_first_then_and exec_k_when_autoconstructing (integer_gt) (exec_s (boolean_pop integer_dec boolean_invert_first_then_and exec_y_when_autoconstructing (exec_y (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) (exec_shove (exec_shove (exec_do*range (integer_mult))))))) () ()))
Errors: [1 0 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 48
Size: 65
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 7.922
Median total errors in population: 8
Error averages by case: (0.694 0.891 0.694 0.694 0.727 0.891 0.891 0.775 0.891 0.774)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.259
Average program size in population (points): 58.732
Average percent parens in population: 0.259
Minimum age in population: 6.75
Maximum age in population: 11.21875
Average age in population: 9.42521875
Median age in population: 9.46875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.756
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2940644
--- Timings ---
Current time: 1559314324569 milliseconds
Total Time:          19.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.7 seconds, 65.5%
Fitness Testing:      4.4 seconds, 22.8%
Report:               2.2 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 452
Test mean error for best: 0.45200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -45                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: 15                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -35                 | Program output: -35                
Correct output: 41                  | Program output: 41                 
Correct output: 5                   | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 38                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: 23                  | Program output: 23                 
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 75                 
Correct output: 69                  | Program output: 77                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 42                 
Correct output: 63                  | Program output: 63                 
Correct output: 27                  | Program output: 60                 
Correct output: 11                  | Program output: 61                 
Correct output: 19                  | Program output: 19                 
Correct output: 52                  | Program output: 65                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 46                 
Correct output: -84                 | Program output: -28                
Correct output: -87                 | Program output: -87                
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -23                
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: 51                 
Correct output: -85                 | Program output: -36                
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -83                 | Program output: 17                 
Correct output: -56                 | Program output: -47                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -55                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -51                 | Program output: -50                
Correct output: -100                | Program output: 36                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -30                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -24                
Correct output: -61                 | Program output: -49                
Correct output: -58                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -15                
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: -58                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: -2                 
Correct output: -97                 | Program output: -97                
Correct output: -27                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: 26                 
Correct output: -92                 | Program output: -1                 
Correct output: -85                 | Program output: -29                
Correct output: -50                 | Program output: -50                
Correct output: -46                 | Program output: -46                
Correct output: -84                 | Program output: -76                
Correct output: -84                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Lexicase best program: (in4 exec_y_when_autoconstructing (tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_dup_times) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and)) integer_rot) boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ()))))
Lexicase best errors: [1 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 62
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Zero cases best program: (in4 exec_y_when_autoconstructing (tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_dup_times) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and)) integer_rot) boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ()))))
Zero cases best errors: [1 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 62
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (381 314 314 17 97 435 132 380 132 921)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (381 314 314 17 97 435 132 380 132 921)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_pop})
Best program: (in4 integer_eq integer_div integer_mod integer_gte tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer boolean_not exec_dup_times (exec_eq in2 integer_gt) integer_fromboolean) (integer_lt exec_y (integer_gte) boolean_xor boolean_yank boolean_flush) exec_yank) boolean_pop exec_do*times ()) boolean_yank in2 boolean_yankdup boolean_invert_first_then_and exec_k_when_autoconstructing (integer_gt) (exec_s (boolean_pop integer_dec boolean_invert_first_then_and exec_y_when_autoconstructing (exec_y (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ()))) () ()))
Errors: [1 0 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 50
Size: 68
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 6.877
Median total errors in population: 7
Error averages by case: (0.619 0.686 0.686 0.983 0.903 0.565 0.868 0.62 0.868 0.079)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.195
Average program size in population (points): 60.936
Average percent parens in population: 0.241
Minimum age in population: 8.625
Maximum age in population: 12.828125
Average age in population: 10.80184375
Median age in population: 10.84375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 177
Genome diversity (% unique genomes):	 0.657
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3525872
--- Timings ---
Current time: 1559314328064 milliseconds
Total Time:          22.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.0 seconds, 66.9%
Fitness Testing:      5.0 seconds, 22.3%
Report:               2.3 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 452
Test mean error for best: 0.45200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -45                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: 15                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -35                 | Program output: -35                
Correct output: 41                  | Program output: 41                 
Correct output: 5                   | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 38                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: 23                  | Program output: 23                 
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 75                 
Correct output: 69                  | Program output: 77                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 42                 
Correct output: 63                  | Program output: 63                 
Correct output: 27                  | Program output: 60                 
Correct output: 11                  | Program output: 61                 
Correct output: 19                  | Program output: 19                 
Correct output: 52                  | Program output: 65                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 46                 
Correct output: -84                 | Program output: -28                
Correct output: -87                 | Program output: -87                
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -23                
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: 51                 
Correct output: -85                 | Program output: -36                
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -83                 | Program output: 17                 
Correct output: -56                 | Program output: -47                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -55                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -51                 | Program output: -50                
Correct output: -100                | Program output: 36                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -30                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -24                
Correct output: -61                 | Program output: -49                
Correct output: -58                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -15                
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: -58                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: -2                 
Correct output: -97                 | Program output: -97                
Correct output: -27                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: 26                 
Correct output: -92                 | Program output: -1                 
Correct output: -85                 | Program output: -29                
Correct output: -50                 | Program output: -50                
Correct output: -46                 | Program output: -46                
Correct output: -84                 | Program output: -76                
Correct output: -84                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Lexicase best program: (in4 exec_y_when_autoconstructing (tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank) (integer_swap boolean_invert_second_then_and boolean_flush) exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_dup_times) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and)) integer_rot) boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ())))
Lexicase best errors: [1 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 62
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Zero cases best program: (in4 exec_y_when_autoconstructing (tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank) (integer_swap boolean_invert_second_then_and boolean_flush) exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_dup_times) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and)) integer_rot) boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ())))
Zero cases best errors: [1 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 62
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 912 577 593 591 201 573 882 593 590)
Population mean number of elite cases: 5.71
Count of perfect (error zero) individuals by case: (201 912 577 593 591 201 573 882 593 590)
Population mean number of perfect (error zero) cases: 5.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Best program: (in4 exec_y_when_autoconstructing (tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank integer_dup_times boolean_invert_second_then_and boolean_flush) (exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_dup_times) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and)) integer_rot) boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (exec_noop boolean_swap exec_rot () () ()))))
Errors: [1 0 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 47
Size: 62
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 4.287
Median total errors in population: 2
Error averages by case: (0.799 0.088 0.423 0.407 0.409 0.799 0.427 0.118 0.407 0.41)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.877
Average program size in population (points): 62.65
Average percent parens in population: 0.251
Minimum age in population: 10.28125
Maximum age in population: 13.7890625
Average age in population: 12.356953125
Median age in population: 12.421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4474871
--- Timings ---
Current time: 1559314331723 milliseconds
Total Time:          26.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.0 seconds, 65.6%
Fitness Testing:      5.9 seconds, 22.7%
Report:               2.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 452
Test mean error for best: 0.45200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -45                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: 15                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -35                 | Program output: -35                
Correct output: 41                  | Program output: 41                 
Correct output: 5                   | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 38                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: 23                  | Program output: 23                 
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 75                 
Correct output: 69                  | Program output: 77                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 42                 
Correct output: 63                  | Program output: 63                 
Correct output: 27                  | Program output: 60                 
Correct output: 11                  | Program output: 61                 
Correct output: 19                  | Program output: 19                 
Correct output: 52                  | Program output: 65                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 46                 
Correct output: -84                 | Program output: -28                
Correct output: -87                 | Program output: -87                
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -23                
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: 51                 
Correct output: -85                 | Program output: -36                
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -83                 | Program output: 17                 
Correct output: -56                 | Program output: -47                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -55                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -51                 | Program output: -50                
Correct output: -100                | Program output: 36                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -30                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -24                
Correct output: -61                 | Program output: -49                
Correct output: -58                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -15                
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: -58                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: -2                 
Correct output: -97                 | Program output: -97                
Correct output: -27                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: 26                 
Correct output: -92                 | Program output: -1                 
Correct output: -85                 | Program output: -29                
Correct output: -50                 | Program output: -50                
Correct output: -46                 | Program output: -46                
Correct output: -84                 | Program output: -76                
Correct output: -84                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Lexicase best program: (in4 integer_eq boolean_and integer_mod integer_gte tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_dup_times) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and)) integer_rot) boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ())))
Lexicase best errors: [1 0 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 63
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Zero cases best program: (in4 integer_eq boolean_and integer_mod integer_gte tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_dup_times) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and)) integer_rot) boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ())))
Zero cases best errors: [1 0 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 63
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 917 221 666 680 919 679 1000 1000 1000)
Population mean number of elite cases: 8.08
Count of perfect (error zero) individuals by case: (0 917 221 666 680 919 679 0 0 0)
Population mean number of perfect (error zero) cases: 4.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Best program: (in4 integer_eq boolean_and integer_mod integer_gte tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_dup_times) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and)) integer_rot) boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ())))
Errors: [1 0 1 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 49
Size: 63
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.918
Median total errors in population: 5
Error averages by case: (1.0 0.083 0.779 0.334 0.32 0.081 0.321 1.0 1.0 1.0)
Error minima by case: (1 0 0 0 0 0 0 1 1 1)
Average genome size in population (length): 48.127
Average program size in population (points): 63.647
Average percent parens in population: 0.243
Minimum age in population: 11.5390625
Maximum age in population: 15.68359375
Average age in population: 13.81110546875
Median age in population: 13.861328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5532462
--- Timings ---
Current time: 1559314335388 milliseconds
Total Time:          29.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.9 seconds, 63.7%
Fitness Testing:      6.9 seconds, 23.3%
Report:               3.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 443
Test mean error for best: 0.44300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -45                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: 15                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -35                 | Program output: -35                
Correct output: 41                  | Program output: 41                 
Correct output: 5                   | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 38                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: 23                  | Program output: 23                 
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 75                 
Correct output: 69                  | Program output: 77                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 42                 
Correct output: 63                  | Program output: 63                 
Correct output: 27                  | Program output: 60                 
Correct output: 11                  | Program output: 61                 
Correct output: 19                  | Program output: 19                 
Correct output: 52                  | Program output: 65                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 46                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: -54                
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: 51                 
Correct output: -85                 | Program output: -36                
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -83                 | Program output: 17                 
Correct output: -56                 | Program output: -47                
Correct output: -82                 | Program output: -76                
Correct output: -98                 | Program output: -19                
Correct output: -27                 | Program output: -20                
Correct output: -80                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -93                
Correct output: -100                | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: -51                 | Program output: -47                
Correct output: -100                | Program output: 36                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -30                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -24                
Correct output: -61                 | Program output: -35                
Correct output: -58                 | Program output: -34                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -15                
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: -58                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: -30                
Correct output: -97                 | Program output: -97                
Correct output: -27                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -54                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: 26                 
Correct output: -92                 | Program output: -21                
Correct output: -85                 | Program output: -29                
Correct output: -50                 | Program output: -50                
Correct output: -46                 | Program output: -46                
Correct output: -84                 | Program output: -84                
Correct output: -84                 | Program output: -78                
Correct output: -88                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_851} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Lexicase best program: (in4 in2 tag_boolean_851 boolean_not exec_noop in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_dup_times) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and)) integer_rot boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ())))
Lexicase best errors: [1 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 57
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_851} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Zero cases best program: (in4 in2 tag_boolean_851 boolean_not exec_noop in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_dup_times) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and)) integer_rot boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ())))
Zero cases best errors: [1 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 57
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (880 1 611 279 906 279 1 610 277 1)
Population mean number of elite cases: 3.85
Count of perfect (error zero) individuals by case: (880 1 611 279 906 279 1 610 277 1)
Population mean number of perfect (error zero) cases: 3.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_851} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Best program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and)) integer_rot) boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ())))
Errors: [0 1 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 50
Size: 64
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 6.155
Median total errors in population: 6
Error averages by case: (0.12 0.999 0.389 0.721 0.094 0.721 0.999 0.39 0.723 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.327
Average program size in population (points): 58.985
Average percent parens in population: 0.228
Minimum age in population: 13.140625
Maximum age in population: 16.927734375
Average age in population: 15.4406015625
Median age in population: 15.421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6622315
--- Timings ---
Current time: 1559314339061 milliseconds
Total Time:          33.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.7 seconds, 62.2%
Fitness Testing:      7.9 seconds, 23.8%
Report:               4.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 443
Test mean error for best: 0.44300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -45                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: 15                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -35                 | Program output: -35                
Correct output: 41                  | Program output: 41                 
Correct output: 5                   | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 38                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: 23                  | Program output: 23                 
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 75                 
Correct output: 69                  | Program output: 77                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 42                 
Correct output: 63                  | Program output: 63                 
Correct output: 27                  | Program output: 60                 
Correct output: 11                  | Program output: 61                 
Correct output: 19                  | Program output: 19                 
Correct output: 52                  | Program output: 65                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 46                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: -54                
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: 51                 
Correct output: -85                 | Program output: -36                
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -83                 | Program output: 17                 
Correct output: -56                 | Program output: -47                
Correct output: -82                 | Program output: -76                
Correct output: -98                 | Program output: -19                
Correct output: -27                 | Program output: -20                
Correct output: -80                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -93                
Correct output: -100                | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: -51                 | Program output: -47                
Correct output: -100                | Program output: 36                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -30                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -24                
Correct output: -61                 | Program output: -35                
Correct output: -58                 | Program output: -34                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -15                
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: -58                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: -30                
Correct output: -97                 | Program output: -97                
Correct output: -27                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -54                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: 26                 
Correct output: -92                 | Program output: -21                
Correct output: -85                 | Program output: -29                
Correct output: -50                 | Program output: -50                
Correct output: -46                 | Program output: -46                
Correct output: -84                 | Program output: -84                
Correct output: -84                 | Program output: -78                
Correct output: -88                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_851} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction tag_boolean_664} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Lexicase best program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range () integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer) (integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) integer_rot boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ())))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 64
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_851} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction tag_boolean_664} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Zero cases best program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range () integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer) (integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) integer_rot boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ())))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 64
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (337 464 876 871 137 467 834 337 755 464)
Population mean number of elite cases: 5.54
Count of perfect (error zero) individuals by case: (337 464 876 871 137 467 834 337 755 464)
Population mean number of perfect (error zero) cases: 5.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_851} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Best program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and)) integer_rot) boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (integer_stackdepth boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ())))
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 50
Size: 64
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 4.458
Median total errors in population: 4
Error averages by case: (0.663 0.536 0.124 0.129 0.863 0.533 0.166 0.663 0.245 0.536)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.649
Average program size in population (points): 61.797
Average percent parens in population: 0.242
Minimum age in population: 15.576171875
Maximum age in population: 18.5068359375
Average age in population: 17.116185546875
Median age in population: 17.1796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.573
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.01
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7859136
--- Timings ---
Current time: 1559314342880 milliseconds
Total Time:          37.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.6 seconds, 60.9%
Fitness Testing:      9.1 seconds, 24.4%
Report:               5.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 231
Test mean error for best: 0.23100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -45                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: 15                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -35                 | Program output: -35                
Correct output: 41                  | Program output: 41                 
Correct output: 5                   | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 38                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: 23                  | Program output: 23                 
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 69                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 63                  | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 32                 
Correct output: 19                  | Program output: 19                 
Correct output: 52                  | Program output: 52                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -65                
Correct output: -85                 | Program output: -36                
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -56                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -55                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -51                 | Program output: -50                
Correct output: -100                | Program output: 36                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -30                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -28                
Correct output: -61                 | Program output: -49                
Correct output: -58                 | Program output: -34                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: -58                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: -30                
Correct output: -97                 | Program output: -97                
Correct output: -27                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -92                 | Program output: -21                
Correct output: -85                 | Program output: -29                
Correct output: -50                 | Program output: -50                
Correct output: -46                 | Program output: -46                
Correct output: -84                 | Program output: -84                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_851} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Lexicase best program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and)) integer_rot) (boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (boolean_frominteger boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ()))))))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 76
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_851} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot})
Zero cases best program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (exec_do*while (boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and)) integer_rot) (boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (integer_lt exec_s (boolean_frominteger boolean_swap integer_eq boolean_shove) (integer_mod) (boolean_xor boolean_swap exec_rot () () ()))))))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 76
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 870 785 782 877 784 777 432 98 777)
Population mean number of elite cases: 6.18
Count of perfect (error zero) individuals by case: (3 870 785 782 877 784 777 432 98 777)
Population mean number of perfect (error zero) cases: 6.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_851} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_pop})
Best program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (integer_stackdepth boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () integer_rot) boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ())))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 50
Size: 62
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 3.815
Median total errors in population: 3
Error averages by case: (0.997 0.13 0.215 0.218 0.123 0.216 0.223 0.568 0.902 0.223)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.358
Average program size in population (points): 62.082
Average percent parens in population: 0.220
Minimum age in population: 16.865234375
Maximum age in population: 20.412109375
Average age in population: 19.06878515625
Median age in population: 19.1640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.01
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 9269110
--- Timings ---
Current time: 1559314346982 milliseconds
Total Time:          41.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.5 seconds, 59.5%
Fitness Testing:     10.4 seconds, 25.2%
Report:               6.2 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 231
Test mean error for best: 0.23100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 1
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -45                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: 15                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -35                 | Program output: -35                
Correct output: 41                  | Program output: 41                 
Correct output: 5                   | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 38                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: 23                  | Program output: 23                 
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 69                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 63                  | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 32                 
Correct output: 19                  | Program output: 19                 
Correct output: 52                  | Program output: 52                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -65                
Correct output: -85                 | Program output: -36                
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -56                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -55                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -51                 | Program output: -50                
Correct output: -100                | Program output: 36                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -30                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -28                
Correct output: -61                 | Program output: -49                
Correct output: -58                 | Program output: -34                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: -58                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: -30                
Correct output: -97                 | Program output: -97                
Correct output: -27                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -92                 | Program output: -21                
Correct output: -85                 | Program output: -29                
Correct output: -50                 | Program output: -50                
Correct output: -46                 | Program output: -46                
Correct output: -84                 | Program output: -84                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_851} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_pop})
Lexicase best program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (integer_stackdepth boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () integer_rot) boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 62
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_851} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_pop})
Zero cases best program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min exec_pop () exec_if (boolean_not integer_min print_integer integer_rot integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (integer_stackdepth boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () integer_rot) boolean_eq boolean_rot integer_dec boolean_and boolean_pop exec_do*count (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 62
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (442 875 509 847 851 231 291 558 240 496)
Population mean number of elite cases: 5.34
Count of perfect (error zero) individuals by case: (442 875 509 847 851 231 291 558 240 496)
Population mean number of perfect (error zero) cases: 5.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_851} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_882} {:close 0, :instruction tag_boolean_664} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_pop})
Best program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min exec_pop () exec_if (boolean_not integer_min print_integer boolean_pop integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (integer_stackdepth boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () integer_rot) boolean_eq in2 integer_dec boolean_and boolean_pop exec_do*count (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 50
Size: 62
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 4.66
Median total errors in population: 4
Error averages by case: (0.558 0.125 0.491 0.153 0.149 0.769 0.709 0.442 0.76 0.504)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.368
Average program size in population (points): 67.266
Average percent parens in population: 0.235
Minimum age in population: 18.943359375
Maximum age in population: 22.185546875
Average age in population: 20.95980297851562
Median age in population: 20.943359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.011
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 10692508
--- Timings ---
Current time: 1559314351159 milliseconds
Total Time:          45.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.4 seconds, 58.3%
Fitness Testing:     11.7 seconds, 25.9%
Report:               7.1 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 13
Successful program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min exec_pop () exec_if (boolean_not integer_min print_integer boolean_pop integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (integer_stackdepth boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () integer_rot) boolean_eq in2 integer_dec boolean_and boolean_pop exec_do*count (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 62


Auto-simplifying with starting size: 62
step: 0
program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min exec_pop () exec_if (boolean_not integer_min print_integer boolean_pop integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (integer_stackdepth boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () integer_rot) boolean_eq in2 integer_dec boolean_and boolean_pop exec_do*count (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 500
program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min exec_pop () exec_if (boolean_not integer_min print_integer boolean_pop integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (integer_stackdepth boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () integer_rot) boolean_eq in2 integer_dec boolean_and boolean_pop exec_do*count (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 1000
program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min exec_pop () exec_if (boolean_not integer_min print_integer boolean_pop integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (integer_stackdepth boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () integer_rot) boolean_eq in2 integer_dec boolean_and boolean_pop exec_do*count (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 1500
program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min exec_pop () exec_if (boolean_not integer_min print_integer boolean_pop integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (integer_stackdepth boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () integer_rot) boolean_eq in2 integer_dec boolean_and boolean_pop exec_do*count (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 2000
program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min exec_pop () exec_if (boolean_not integer_min print_integer boolean_pop integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (integer_stackdepth boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () integer_rot) boolean_eq in2 integer_dec boolean_and boolean_pop exec_do*count (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 2500
program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min exec_pop () exec_if (boolean_not integer_min print_integer boolean_pop integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (integer_stackdepth boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () integer_rot) boolean_eq in2 integer_dec boolean_and boolean_pop exec_do*count (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 3000
program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min exec_pop () exec_if (boolean_not integer_min print_integer boolean_pop integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (integer_stackdepth boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () integer_rot) boolean_eq in2 integer_dec boolean_and boolean_pop exec_do*count (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 3500
program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min exec_pop () exec_if (boolean_not integer_min print_integer boolean_pop integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (integer_stackdepth boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () integer_rot) boolean_eq in2 integer_dec boolean_and boolean_pop exec_do*count (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 4000
program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min exec_pop () exec_if (boolean_not integer_min print_integer boolean_pop integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (integer_stackdepth boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () integer_rot) boolean_eq in2 integer_dec boolean_and boolean_pop exec_do*count (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 4500
program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min exec_pop () exec_if (boolean_not integer_min print_integer boolean_pop integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (integer_stackdepth boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () integer_rot) boolean_eq in2 integer_dec boolean_and boolean_pop exec_do*count (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 5000
program: (in4 in2 tag_boolean_851 in4 in4 tag_boolean_882 tag_boolean_664 exec_do*range (integer_yankdup boolean_dup_times integer_shove in3 exec_y (exec_pop () exec_if (boolean_not integer_min exec_pop () exec_if (boolean_not integer_min print_integer boolean_pop integer_yank integer_swap boolean_invert_second_then_and boolean_flush) (integer_stackdepth boolean_pop integer_gt boolean_swap exec_eq integer_inc) integer_swap integer_mod boolean_yankdup boolean_invert_first_then_and) () integer_rot) boolean_eq in2 integer_dec boolean_and boolean_pop exec_do*count (exec_k_when_autoconstructing (exec_yank integer_inc integer_mult boolean_invert_first_then_and boolean_pop) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 231
Test mean error for best: 0.23100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 1
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -62                 | Program output: -62                
Correct output: -57                 | Program output: -57                
Correct output: -45                 | Program output: -45                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: 15                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -35                 | Program output: -35                
Correct output: 41                  | Program output: 41                 
Correct output: 5                   | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 38                 
Correct output: 44                  | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: 23                  | Program output: 23                 
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 69                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 63                  | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 32                 
Correct output: 19                  | Program output: 19                 
Correct output: 52                  | Program output: 52                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -65                
Correct output: -85                 | Program output: -36                
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -87                 | Program output: -87                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -56                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -55                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -51                 | Program output: -50                
Correct output: -100                | Program output: 36                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -30                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -28                
Correct output: -61                 | Program output: -49                
Correct output: -58                 | Program output: -34                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: -58                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -30                 | Program output: -30                
Correct output: -97                 | Program output: -97                
Correct output: -27                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: -92                 | Program output: -21                
Correct output: -85                 | Program output: -29                
Correct output: -50                 | Program output: -50                
Correct output: -46                 | Program output: -46                
Correct output: -84                 | Program output: -84                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: -19                
;;******************************
