Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-46 -29 -46 -46] -46] [[-61 -61 -77 -61] -77] [[47 47 47 37] 37] [[34 34 -82 34] -82] [[-63 -15 -15 -15] -63] [[-79 -79 -79 -41] -79] [[46 95 46 46] 46] [[81 81 -81 81] -81] [[-65 -65 -65 -65] -65] [[47 47 -63 47] -63] [(45 45 45 45) 45] [(-23 -23 -23 -23) -23] [(23 23 23 23) 23] [(-82 -82 -82 -82) -82] [(13 13 13 13) 13] [(26 61 7 20) 7] [(98 13 18 1) 1] [(44 70 25 98) 25] [(47 93 69 38) 38] [(0 77 85 75) 0] [(40 10 42 27) 10] [(46 12 58 4) 4] [(28 77 73 95) 28] [(21 44 33 48) 21] [(87 32 39 58) 32] [(33 4 22 92) 4] [(21 51 84 17) 17] [(77 15 61 99) 15] [(83 2 64 5) 2] [(82 11 59 96) 11] [(53 92 27 81) 27] [(39 95 20 45) 20] [(90 60 97 87) 60] [(54 96 24 58) 24] [(89 63 25 83) 25] [(98 -60 -59 35) -60] [(71 40 22 55) 22] [(79 55 -84 86) -84] [(-50 -43 20 56) -50] [(-85 88 -50 -2) -85] [(-73 71 -2 -13) -73] [(-73 -49 71 78) -73] [(-47 -96 91 7) -96] [(94 -72 86 52) -72] [(-78 -80 33 23) -80] [(-41 -58 70 96) -58] [(31 43 8 -94) -94] [(20 -89 13 -54) -89] [(-38 7 91 -12) -38] [(-42 -76 22 17) -76] [(64 91 43 0) 0] [(-35 53 63 -98) -98] [(-70 -84 -77 -1) -84] [(50 99 -22 70) -22] [(-85 -15 92 22) -85] [(-97 -52 -56 -6) -97] [(-83 88 20 -34) -83] [(-17 35 12 79) -17] [(-70 40 -81 43) -81] [(36 -6 -4 -90) -90] [(87 -44 -36 -60) -60] [(10 -9 90 76) -9] [(8 35 45 -5) -5] [(58 -21 -53 -12) -53] [(42 -32 6 3) -32] [(-22 70 -84 -43) -84] [(56 -22 85 7) -22] [(55 1 99 30) 1] [(-4 -59 45 -3) -59] [(-35 -50 20 -21) -50] [(-60 60 -56 -64) -64] [(-92 75 -8 -24) -92] [(-82 62 -9 -91) -91] [(91 -36 -51 -55) -55] [(25 49 47 77) 25] [(-47 36 -4 78) -47] [(9 -32 -52 90) -52] [(48 -43 -34 -90) -90] [(97 83 90 -34) -34] [(85 -87 90 -90) -90] [(13 -65 50 -56) -65] [(-3 41 31 -26) -26] [(24 35 -37 -30) -37] [(-34 -46 17 2) -46] [(51 -16 11 0) -16] [(17 -42 -58 -35) -58] [(82 -32 -34 97) -34] [(30 58 -49 30) -49] [(91 -98 -36 18) -98] [(19 -22 97 12) -22] [(-67 1 69 28) -67] [(-45 9 -26 -4) -45] [(75 -58 8 65) -58] [(-22 25 12 76) -22] [(34 56 -15 -5) -15])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-46 -29 -46 -46] -46]
Train Case:   6 | Input/Output: [[-61 -61 -77 -61] -77]
Train Case:   7 | Input/Output: [[47 47 47 37] 37]
Train Case:   8 | Input/Output: [[34 34 -82 34] -82]
Train Case:   9 | Input/Output: [[-63 -15 -15 -15] -63]
Train Case:  10 | Input/Output: [[-79 -79 -79 -41] -79]
Train Case:  11 | Input/Output: [[46 95 46 46] 46]
Train Case:  12 | Input/Output: [[81 81 -81 81] -81]
Train Case:  13 | Input/Output: [[-65 -65 -65 -65] -65]
Train Case:  14 | Input/Output: [[47 47 -63 47] -63]
Train Case:  15 | Input/Output: [(45 45 45 45) 45]
Train Case:  16 | Input/Output: [(-23 -23 -23 -23) -23]
Train Case:  17 | Input/Output: [(23 23 23 23) 23]
Train Case:  18 | Input/Output: [(-82 -82 -82 -82) -82]
Train Case:  19 | Input/Output: [(13 13 13 13) 13]
Train Case:  20 | Input/Output: [(26 61 7 20) 7]
Train Case:  21 | Input/Output: [(98 13 18 1) 1]
Train Case:  22 | Input/Output: [(44 70 25 98) 25]
Train Case:  23 | Input/Output: [(47 93 69 38) 38]
Train Case:  24 | Input/Output: [(0 77 85 75) 0]
Train Case:  25 | Input/Output: [(40 10 42 27) 10]
Train Case:  26 | Input/Output: [(46 12 58 4) 4]
Train Case:  27 | Input/Output: [(28 77 73 95) 28]
Train Case:  28 | Input/Output: [(21 44 33 48) 21]
Train Case:  29 | Input/Output: [(87 32 39 58) 32]
Train Case:  30 | Input/Output: [(33 4 22 92) 4]
Train Case:  31 | Input/Output: [(21 51 84 17) 17]
Train Case:  32 | Input/Output: [(77 15 61 99) 15]
Train Case:  33 | Input/Output: [(83 2 64 5) 2]
Train Case:  34 | Input/Output: [(82 11 59 96) 11]
Train Case:  35 | Input/Output: [(53 92 27 81) 27]
Train Case:  36 | Input/Output: [(39 95 20 45) 20]
Train Case:  37 | Input/Output: [(90 60 97 87) 60]
Train Case:  38 | Input/Output: [(54 96 24 58) 24]
Train Case:  39 | Input/Output: [(89 63 25 83) 25]
Train Case:  40 | Input/Output: [(98 -60 -59 35) -60]
Train Case:  41 | Input/Output: [(71 40 22 55) 22]
Train Case:  42 | Input/Output: [(79 55 -84 86) -84]
Train Case:  43 | Input/Output: [(-50 -43 20 56) -50]
Train Case:  44 | Input/Output: [(-85 88 -50 -2) -85]
Train Case:  45 | Input/Output: [(-73 71 -2 -13) -73]
Train Case:  46 | Input/Output: [(-73 -49 71 78) -73]
Train Case:  47 | Input/Output: [(-47 -96 91 7) -96]
Train Case:  48 | Input/Output: [(94 -72 86 52) -72]
Train Case:  49 | Input/Output: [(-78 -80 33 23) -80]
Train Case:  50 | Input/Output: [(-41 -58 70 96) -58]
Train Case:  51 | Input/Output: [(31 43 8 -94) -94]
Train Case:  52 | Input/Output: [(20 -89 13 -54) -89]
Train Case:  53 | Input/Output: [(-38 7 91 -12) -38]
Train Case:  54 | Input/Output: [(-42 -76 22 17) -76]
Train Case:  55 | Input/Output: [(64 91 43 0) 0]
Train Case:  56 | Input/Output: [(-35 53 63 -98) -98]
Train Case:  57 | Input/Output: [(-70 -84 -77 -1) -84]
Train Case:  58 | Input/Output: [(50 99 -22 70) -22]
Train Case:  59 | Input/Output: [(-85 -15 92 22) -85]
Train Case:  60 | Input/Output: [(-97 -52 -56 -6) -97]
Train Case:  61 | Input/Output: [(-83 88 20 -34) -83]
Train Case:  62 | Input/Output: [(-17 35 12 79) -17]
Train Case:  63 | Input/Output: [(-70 40 -81 43) -81]
Train Case:  64 | Input/Output: [(36 -6 -4 -90) -90]
Train Case:  65 | Input/Output: [(87 -44 -36 -60) -60]
Train Case:  66 | Input/Output: [(10 -9 90 76) -9]
Train Case:  67 | Input/Output: [(8 35 45 -5) -5]
Train Case:  68 | Input/Output: [(58 -21 -53 -12) -53]
Train Case:  69 | Input/Output: [(42 -32 6 3) -32]
Train Case:  70 | Input/Output: [(-22 70 -84 -43) -84]
Train Case:  71 | Input/Output: [(56 -22 85 7) -22]
Train Case:  72 | Input/Output: [(55 1 99 30) 1]
Train Case:  73 | Input/Output: [(-4 -59 45 -3) -59]
Train Case:  74 | Input/Output: [(-35 -50 20 -21) -50]
Train Case:  75 | Input/Output: [(-60 60 -56 -64) -64]
Train Case:  76 | Input/Output: [(-92 75 -8 -24) -92]
Train Case:  77 | Input/Output: [(-82 62 -9 -91) -91]
Train Case:  78 | Input/Output: [(91 -36 -51 -55) -55]
Train Case:  79 | Input/Output: [(25 49 47 77) 25]
Train Case:  80 | Input/Output: [(-47 36 -4 78) -47]
Train Case:  81 | Input/Output: [(9 -32 -52 90) -52]
Train Case:  82 | Input/Output: [(48 -43 -34 -90) -90]
Train Case:  83 | Input/Output: [(97 83 90 -34) -34]
Train Case:  84 | Input/Output: [(85 -87 90 -90) -90]
Train Case:  85 | Input/Output: [(13 -65 50 -56) -65]
Train Case:  86 | Input/Output: [(-3 41 31 -26) -26]
Train Case:  87 | Input/Output: [(24 35 -37 -30) -37]
Train Case:  88 | Input/Output: [(-34 -46 17 2) -46]
Train Case:  89 | Input/Output: [(51 -16 11 0) -16]
Train Case:  90 | Input/Output: [(17 -42 -58 -35) -58]
Train Case:  91 | Input/Output: [(82 -32 -34 97) -34]
Train Case:  92 | Input/Output: [(30 58 -49 30) -49]
Train Case:  93 | Input/Output: [(91 -98 -36 18) -98]
Train Case:  94 | Input/Output: [(19 -22 97 12) -22]
Train Case:  95 | Input/Output: [(-67 1 69 28) -67]
Train Case:  96 | Input/Output: [(-45 9 -26 -4) -45]
Train Case:  97 | Input/Output: [(75 -58 8 65) -58]
Train Case:  98 | Input/Output: [(-22 25 12 76) -22]
Train Case:  99 | Input/Output: [(34 56 -15 -5) -15]
Test Case:   0 | Input/Output: [[-34 12 -34 -34] -34]
Test Case:   1 | Input/Output: [[50 50 50 -11] -11]
Test Case:   2 | Input/Output: [[71 52 71 71] 52]
Test Case:   3 | Input/Output: [[-1 -8 -1 -1] -8]
Test Case:   4 | Input/Output: [[-74 -65 -65 -65] -74]
Test Case:   5 | Input/Output: [[92 43 43 43] 43]
Test Case:   6 | Input/Output: [[99 -82 -82 -82] -82]
Test Case:   7 | Input/Output: [[-65 -65 -38 -65] -65]
Test Case:   8 | Input/Output: [[-72 -72 -72 98] -72]
Test Case:   9 | Input/Output: [[93 93 10 93] 10]
Test Case:  10 | Input/Output: [[76 91 91 91] 76]
Test Case:  11 | Input/Output: [[-78 -78 -78 89] -78]
Test Case:  12 | Input/Output: [[-27 -27 -27 6] -27]
Test Case:  13 | Input/Output: [[14 9 9 9] 9]
Test Case:  14 | Input/Output: [[-5 -5 -5 65] -5]
Test Case:  15 | Input/Output: [[-40 -40 -40 67] -40]
Test Case:  16 | Input/Output: [[-5 -5 -5 -100] -100]
Test Case:  17 | Input/Output: [[67 42 67 67] 42]
Test Case:  18 | Input/Output: [[96 0 96 96] 0]
Test Case:  19 | Input/Output: [[54 54 -19 54] -19]
Test Case:  20 | Input/Output: [[35 99 35 35] 35]
Test Case:  21 | Input/Output: [[67 67 -45 67] -45]
Test Case:  22 | Input/Output: [[99 -67 99 99] -67]
Test Case:  23 | Input/Output: [[47 -10 -10 -10] -10]
Test Case:  24 | Input/Output: [[-95 -40 -40 -40] -95]
Test Case:  25 | Input/Output: [[-10 -26 -10 -10] -26]
Test Case:  26 | Input/Output: [[47 47 47 -61] -61]
Test Case:  27 | Input/Output: [[3 -71 3 3] -71]
Test Case:  28 | Input/Output: [[-7 -7 82 -7] -7]
Test Case:  29 | Input/Output: [[77 89 89 89] 77]
Test Case:  30 | Input/Output: [[-93 -93 -3 -93] -93]
Test Case:  31 | Input/Output: [[-89 -89 -89 -76] -89]
Test Case:  32 | Input/Output: [[-19 93 93 93] -19]
Test Case:  33 | Input/Output: [[100 100 -88 100] -88]
Test Case:  34 | Input/Output: [[-75 28 -75 -75] -75]
Test Case:  35 | Input/Output: [[-43 59 59 59] -43]
Test Case:  36 | Input/Output: [[-90 -70 -90 -90] -90]
Test Case:  37 | Input/Output: [[18 50 18 18] 18]
Test Case:  38 | Input/Output: [[27 47 47 47] 27]
Test Case:  39 | Input/Output: [[-10 -10 -98 -10] -98]
Test Case:  40 | Input/Output: [[3 17 17 17] 3]
Test Case:  41 | Input/Output: [[-18 -18 -18 -39] -39]
Test Case:  42 | Input/Output: [[-46 -20 -20 -20] -46]
Test Case:  43 | Input/Output: [[76 76 76 21] 21]
Test Case:  44 | Input/Output: [[-71 -71 -35 -71] -71]
Test Case:  45 | Input/Output: [[74 -91 74 74] -91]
Test Case:  46 | Input/Output: [[-55 -55 15 -55] -55]
Test Case:  47 | Input/Output: [[-80 -21 -80 -80] -80]
Test Case:  48 | Input/Output: [[-2 -2 31 -2] -2]
Test Case:  49 | Input/Output: [[-50 -50 35 -50] -50]
Test Case:  50 | Input/Output: [[-46 -20 -20 -20] -46]
Test Case:  51 | Input/Output: [[48 68 48 48] 48]
Test Case:  52 | Input/Output: [[39 -72 39 39] -72]
Test Case:  53 | Input/Output: [[43 -9 43 43] -9]
Test Case:  54 | Input/Output: [[-63 -72 -63 -63] -72]
Test Case:  55 | Input/Output: [[55 55 55 -82] -82]
Test Case:  56 | Input/Output: [[-56 69 69 69] -56]
Test Case:  57 | Input/Output: [[88 88 90 88] 88]
Test Case:  58 | Input/Output: [[-54 -93 -93 -93] -93]
Test Case:  59 | Input/Output: [[-72 -72 -72 -80] -80]
Test Case:  60 | Input/Output: [[-93 -91 -93 -93] -93]
Test Case:  61 | Input/Output: [[-27 45 -27 -27] -27]
Test Case:  62 | Input/Output: [[20 59 59 59] 20]
Test Case:  63 | Input/Output: [[11 -43 -43 -43] -43]
Test Case:  64 | Input/Output: [[-48 -48 -48 37] -48]
Test Case:  65 | Input/Output: [[-60 -60 76 -60] -60]
Test Case:  66 | Input/Output: [[-51 -29 -51 -51] -51]
Test Case:  67 | Input/Output: [[71 -65 71 71] -65]
Test Case:  68 | Input/Output: [[-30 -30 -30 -27] -30]
Test Case:  69 | Input/Output: [[-19 10 -19 -19] -19]
Test Case:  70 | Input/Output: [[-20 -20 6 -20] -20]
Test Case:  71 | Input/Output: [[-26 -26 -26 74] -26]
Test Case:  72 | Input/Output: [[-43 -13 -13 -13] -43]
Test Case:  73 | Input/Output: [[-28 97 97 97] -28]
Test Case:  74 | Input/Output: [[70 3 70 70] 3]
Test Case:  75 | Input/Output: [[35 35 35 -57] -57]
Test Case:  76 | Input/Output: [[45 -95 45 45] -95]
Test Case:  77 | Input/Output: [[61 94 94 94] 61]
Test Case:  78 | Input/Output: [[-25 42 -25 -25] -25]
Test Case:  79 | Input/Output: [[21 21 21 40] 21]
Test Case:  80 | Input/Output: [[40 -14 40 40] -14]
Test Case:  81 | Input/Output: [[-17 -17 84 -17] -17]
Test Case:  82 | Input/Output: [[-95 -95 -95 66] -95]
Test Case:  83 | Input/Output: [[39 39 27 39] 27]
Test Case:  84 | Input/Output: [[-4 -4 -46 -4] -46]
Test Case:  85 | Input/Output: [[-33 72 -33 -33] -33]
Test Case:  86 | Input/Output: [[53 53 -27 53] -27]
Test Case:  87 | Input/Output: [[-62 8 8 8] -62]
Test Case:  88 | Input/Output: [[-23 -23 -23 14] -23]
Test Case:  89 | Input/Output: [[88 -62 88 88] -62]
Test Case:  90 | Input/Output: [[27 27 -7 27] -7]
Test Case:  91 | Input/Output: [[-51 -50 -50 -50] -51]
Test Case:  92 | Input/Output: [[57 57 -53 57] -53]
Test Case:  93 | Input/Output: [[62 -2 -2 -2] -2]
Test Case:  94 | Input/Output: [[-92 -92 -92 68] -92]
Test Case:  95 | Input/Output: [[37 21 37 37] 21]
Test Case:  96 | Input/Output: [[95 95 95 -47] -47]
Test Case:  97 | Input/Output: [[-6 81 -6 -6] -6]
Test Case:  98 | Input/Output: [[-61 -61 -61 -3] -61]
Test Case:  99 | Input/Output: [[49 49 37 49] 37]
Test Case: 100 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 101 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 102 | Input/Output: [(12 12 12 12) 12]
Test Case: 103 | Input/Output: [(19 19 19 19) 19]
Test Case: 104 | Input/Output: [(92 92 92 92) 92]
Test Case: 105 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 106 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 107 | Input/Output: [(21 21 21 21) 21]
Test Case: 108 | Input/Output: [(58 58 58 58) 58]
Test Case: 109 | Input/Output: [(75 75 75 75) 75]
Test Case: 110 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 111 | Input/Output: [(18 18 18 18) 18]
Test Case: 112 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 113 | Input/Output: [(27 27 27 27) 27]
Test Case: 114 | Input/Output: [(43 43 43 43) 43]
Test Case: 115 | Input/Output: [(82 82 82 82) 82]
Test Case: 116 | Input/Output: [(9 9 9 9) 9]
Test Case: 117 | Input/Output: [(12 12 12 12) 12]
Test Case: 118 | Input/Output: [(99 99 99 99) 99]
Test Case: 119 | Input/Output: [(72 72 72 72) 72]
Test Case: 120 | Input/Output: [(61 61 61 61) 61]
Test Case: 121 | Input/Output: [(74 74 74 74) 74]
Test Case: 122 | Input/Output: [(70 70 70 70) 70]
Test Case: 123 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 124 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 125 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 126 | Input/Output: [(39 39 39 39) 39]
Test Case: 127 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 128 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 129 | Input/Output: [(35 35 35 35) 35]
Test Case: 130 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 131 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 132 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 133 | Input/Output: [(79 79 79 79) 79]
Test Case: 134 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 135 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 136 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 137 | Input/Output: [(38 38 38 38) 38]
Test Case: 138 | Input/Output: [(40 40 40 40) 40]
Test Case: 139 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 140 | Input/Output: [(16 16 16 16) 16]
Test Case: 141 | Input/Output: [(23 23 23 23) 23]
Test Case: 142 | Input/Output: [(9 9 9 9) 9]
Test Case: 143 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 144 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 145 | Input/Output: [(6 6 6 6) 6]
Test Case: 146 | Input/Output: [(4 4 4 4) 4]
Test Case: 147 | Input/Output: [(90 90 90 90) 90]
Test Case: 148 | Input/Output: [(87 87 87 87) 87]
Test Case: 149 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 150 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 151 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 152 | Input/Output: [(12 12 12 12) 12]
Test Case: 153 | Input/Output: [(82 82 82 82) 82]
Test Case: 154 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 155 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 156 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 157 | Input/Output: [(91 91 91 91) 91]
Test Case: 158 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 159 | Input/Output: [(91 91 91 91) 91]
Test Case: 160 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 161 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 162 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 163 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 164 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 165 | Input/Output: [(65 65 65 65) 65]
Test Case: 166 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 167 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 168 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 169 | Input/Output: [(34 34 34 34) 34]
Test Case: 170 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 171 | Input/Output: [(96 96 96 96) 96]
Test Case: 172 | Input/Output: [(6 6 6 6) 6]
Test Case: 173 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 174 | Input/Output: [(4 4 4 4) 4]
Test Case: 175 | Input/Output: [(26 26 26 26) 26]
Test Case: 176 | Input/Output: [(35 35 35 35) 35]
Test Case: 177 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 178 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 179 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 180 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 181 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 182 | Input/Output: [(23 23 23 23) 23]
Test Case: 183 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 184 | Input/Output: [(30 30 30 30) 30]
Test Case: 185 | Input/Output: [(68 68 68 68) 68]
Test Case: 186 | Input/Output: [(14 14 14 14) 14]
Test Case: 187 | Input/Output: [(91 91 91 91) 91]
Test Case: 188 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 189 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 190 | Input/Output: [(5 5 5 5) 5]
Test Case: 191 | Input/Output: [(46 46 46 46) 46]
Test Case: 192 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 193 | Input/Output: [(71 71 71 71) 71]
Test Case: 194 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 195 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 196 | Input/Output: [(75 75 75 75) 75]
Test Case: 197 | Input/Output: [(83 83 83 83) 83]
Test Case: 198 | Input/Output: [(48 48 48 48) 48]
Test Case: 199 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 200 | Input/Output: [(21 72 100 75) 21]
Test Case: 201 | Input/Output: [(87 11 33 28) 11]
Test Case: 202 | Input/Output: [(86 81 1 77) 1]
Test Case: 203 | Input/Output: [(58 86 48 73) 48]
Test Case: 204 | Input/Output: [(95 20 10 7) 7]
Test Case: 205 | Input/Output: [(35 33 0 45) 0]
Test Case: 206 | Input/Output: [(87 20 45 100) 20]
Test Case: 207 | Input/Output: [(29 38 28 87) 28]
Test Case: 208 | Input/Output: [(79 25 77 55) 25]
Test Case: 209 | Input/Output: [(58 33 95 89) 33]
Test Case: 210 | Input/Output: [(51 85 80 64) 51]
Test Case: 211 | Input/Output: [(68 52 56 88) 52]
Test Case: 212 | Input/Output: [(30 93 66 21) 21]
Test Case: 213 | Input/Output: [(91 36 83 83) 36]
Test Case: 214 | Input/Output: [(42 65 59 82) 42]
Test Case: 215 | Input/Output: [(21 46 95 4) 4]
Test Case: 216 | Input/Output: [(58 100 13 35) 13]
Test Case: 217 | Input/Output: [(78 96 41 77) 41]
Test Case: 218 | Input/Output: [(0 54 10 65) 0]
Test Case: 219 | Input/Output: [(47 0 52 21) 0]
Test Case: 220 | Input/Output: [(1 80 69 30) 1]
Test Case: 221 | Input/Output: [(41 100 89 29) 29]
Test Case: 222 | Input/Output: [(35 92 39 54) 35]
Test Case: 223 | Input/Output: [(43 81 18 28) 18]
Test Case: 224 | Input/Output: [(94 94 75 5) 5]
Test Case: 225 | Input/Output: [(15 87 66 23) 15]
Test Case: 226 | Input/Output: [(27 48 16 0) 0]
Test Case: 227 | Input/Output: [(7 2 15 32) 2]
Test Case: 228 | Input/Output: [(20 2 41 51) 2]
Test Case: 229 | Input/Output: [(67 12 75 19) 12]
Test Case: 230 | Input/Output: [(30 71 100 57) 30]
Test Case: 231 | Input/Output: [(44 34 23 56) 23]
Test Case: 232 | Input/Output: [(19 51 14 0) 0]
Test Case: 233 | Input/Output: [(21 32 86 6) 6]
Test Case: 234 | Input/Output: [(21 88 45 40) 21]
Test Case: 235 | Input/Output: [(12 73 97 68) 12]
Test Case: 236 | Input/Output: [(27 12 60 33) 12]
Test Case: 237 | Input/Output: [(11 18 96 21) 11]
Test Case: 238 | Input/Output: [(94 12 8 62) 8]
Test Case: 239 | Input/Output: [(49 94 53 34) 34]
Test Case: 240 | Input/Output: [(60 61 54 73) 54]
Test Case: 241 | Input/Output: [(73 90 3 74) 3]
Test Case: 242 | Input/Output: [(58 51 4 69) 4]
Test Case: 243 | Input/Output: [(9 11 18 50) 9]
Test Case: 244 | Input/Output: [(39 25 49 72) 25]
Test Case: 245 | Input/Output: [(93 91 56 36) 36]
Test Case: 246 | Input/Output: [(42 75 46 80) 42]
Test Case: 247 | Input/Output: [(34 11 23 36) 11]
Test Case: 248 | Input/Output: [(17 43 8 51) 8]
Test Case: 249 | Input/Output: [(24 82 94 19) 19]
Test Case: 250 | Input/Output: [(81 72 70 7) 7]
Test Case: 251 | Input/Output: [(53 44 77 67) 44]
Test Case: 252 | Input/Output: [(60 71 10 73) 10]
Test Case: 253 | Input/Output: [(49 88 28 89) 28]
Test Case: 254 | Input/Output: [(70 74 5 80) 5]
Test Case: 255 | Input/Output: [(66 71 67 6) 6]
Test Case: 256 | Input/Output: [(83 75 23 100) 23]
Test Case: 257 | Input/Output: [(3 23 69 23) 3]
Test Case: 258 | Input/Output: [(79 89 18 27) 18]
Test Case: 259 | Input/Output: [(59 20 37 3) 3]
Test Case: 260 | Input/Output: [(11 74 81 95) 11]
Test Case: 261 | Input/Output: [(98 38 12 54) 12]
Test Case: 262 | Input/Output: [(12 6 42 68) 6]
Test Case: 263 | Input/Output: [(73 22 67 76) 22]
Test Case: 264 | Input/Output: [(95 59 94 9) 9]
Test Case: 265 | Input/Output: [(16 94 55 63) 16]
Test Case: 266 | Input/Output: [(32 93 89 55) 32]
Test Case: 267 | Input/Output: [(21 100 24 18) 18]
Test Case: 268 | Input/Output: [(71 26 34 2) 2]
Test Case: 269 | Input/Output: [(96 3 49 50) 3]
Test Case: 270 | Input/Output: [(8 21 87 31) 8]
Test Case: 271 | Input/Output: [(62 45 27 26) 26]
Test Case: 272 | Input/Output: [(66 52 9 4) 4]
Test Case: 273 | Input/Output: [(90 22 20 44) 20]
Test Case: 274 | Input/Output: [(31 89 91 88) 31]
Test Case: 275 | Input/Output: [(32 99 76 47) 32]
Test Case: 276 | Input/Output: [(21 13 18 93) 13]
Test Case: 277 | Input/Output: [(79 33 22 18) 18]
Test Case: 278 | Input/Output: [(29 97 94 9) 9]
Test Case: 279 | Input/Output: [(25 51 91 14) 14]
Test Case: 280 | Input/Output: [(42 38 24 51) 24]
Test Case: 281 | Input/Output: [(80 38 25 99) 25]
Test Case: 282 | Input/Output: [(12 50 81 96) 12]
Test Case: 283 | Input/Output: [(89 8 1 21) 1]
Test Case: 284 | Input/Output: [(17 66 68 74) 17]
Test Case: 285 | Input/Output: [(61 82 86 24) 24]
Test Case: 286 | Input/Output: [(23 37 64 21) 21]
Test Case: 287 | Input/Output: [(31 32 100 59) 31]
Test Case: 288 | Input/Output: [(1 22 51 5) 1]
Test Case: 289 | Input/Output: [(65 15 65 30) 15]
Test Case: 290 | Input/Output: [(50 91 29 19) 19]
Test Case: 291 | Input/Output: [(16 75 84 39) 16]
Test Case: 292 | Input/Output: [(30 20 35 52) 20]
Test Case: 293 | Input/Output: [(62 15 37 53) 15]
Test Case: 294 | Input/Output: [(26 9 69 2) 2]
Test Case: 295 | Input/Output: [(24 78 61 92) 24]
Test Case: 296 | Input/Output: [(74 96 46 8) 8]
Test Case: 297 | Input/Output: [(35 15 82 53) 15]
Test Case: 298 | Input/Output: [(22 55 78 79) 22]
Test Case: 299 | Input/Output: [(7 74 12 34) 7]
Test Case: 300 | Input/Output: [(77 59 73 51) 51]
Test Case: 301 | Input/Output: [(90 99 66 93) 66]
Test Case: 302 | Input/Output: [(88 53 92 21) 21]
Test Case: 303 | Input/Output: [(36 40 96 48) 36]
Test Case: 304 | Input/Output: [(87 13 35 73) 13]
Test Case: 305 | Input/Output: [(9 32 80 83) 9]
Test Case: 306 | Input/Output: [(94 5 44 28) 5]
Test Case: 307 | Input/Output: [(33 76 20 36) 20]
Test Case: 308 | Input/Output: [(17 67 26 53) 17]
Test Case: 309 | Input/Output: [(95 82 92 48) 48]
Test Case: 310 | Input/Output: [(84 40 27 52) 27]
Test Case: 311 | Input/Output: [(8 3 38 91) 3]
Test Case: 312 | Input/Output: [(90 87 28 86) 28]
Test Case: 313 | Input/Output: [(32 86 88 88) 32]
Test Case: 314 | Input/Output: [(58 3 65 31) 3]
Test Case: 315 | Input/Output: [(34 62 38 60) 34]
Test Case: 316 | Input/Output: [(29 47 20 65) 20]
Test Case: 317 | Input/Output: [(53 100 70 13) 13]
Test Case: 318 | Input/Output: [(45 34 71 82) 34]
Test Case: 319 | Input/Output: [(55 8 75 53) 8]
Test Case: 320 | Input/Output: [(35 75 41 66) 35]
Test Case: 321 | Input/Output: [(83 40 53 73) 40]
Test Case: 322 | Input/Output: [(61 1 4 12) 1]
Test Case: 323 | Input/Output: [(48 40 51 93) 40]
Test Case: 324 | Input/Output: [(16 61 25 85) 16]
Test Case: 325 | Input/Output: [(8 27 52 41) 8]
Test Case: 326 | Input/Output: [(21 16 91 19) 16]
Test Case: 327 | Input/Output: [(15 69 79 62) 15]
Test Case: 328 | Input/Output: [(17 11 79 47) 11]
Test Case: 329 | Input/Output: [(23 89 5 91) 5]
Test Case: 330 | Input/Output: [(18 99 59 4) 4]
Test Case: 331 | Input/Output: [(100 24 21 14) 14]
Test Case: 332 | Input/Output: [(79 69 58 26) 26]
Test Case: 333 | Input/Output: [(5 91 26 21) 5]
Test Case: 334 | Input/Output: [(33 40 39 80) 33]
Test Case: 335 | Input/Output: [(39 7 47 0) 0]
Test Case: 336 | Input/Output: [(67 92 67 37) 37]
Test Case: 337 | Input/Output: [(44 60 77 9) 9]
Test Case: 338 | Input/Output: [(31 85 55 80) 31]
Test Case: 339 | Input/Output: [(65 88 8 2) 2]
Test Case: 340 | Input/Output: [(29 1 64 38) 1]
Test Case: 341 | Input/Output: [(73 5 66 12) 5]
Test Case: 342 | Input/Output: [(69 22 65 13) 13]
Test Case: 343 | Input/Output: [(1 98 13 19) 1]
Test Case: 344 | Input/Output: [(99 12 86 93) 12]
Test Case: 345 | Input/Output: [(66 56 8 57) 8]
Test Case: 346 | Input/Output: [(70 9 45 5) 5]
Test Case: 347 | Input/Output: [(94 61 1 68) 1]
Test Case: 348 | Input/Output: [(39 20 9 22) 9]
Test Case: 349 | Input/Output: [(90 37 22 82) 22]
Test Case: 350 | Input/Output: [(21 93 16 39) 16]
Test Case: 351 | Input/Output: [(73 80 37 26) 26]
Test Case: 352 | Input/Output: [(46 47 63 76) 46]
Test Case: 353 | Input/Output: [(2 14 77 22) 2]
Test Case: 354 | Input/Output: [(19 41 99 42) 19]
Test Case: 355 | Input/Output: [(91 72 58 24) 24]
Test Case: 356 | Input/Output: [(56 77 21 64) 21]
Test Case: 357 | Input/Output: [(99 94 89 3) 3]
Test Case: 358 | Input/Output: [(86 81 45 26) 26]
Test Case: 359 | Input/Output: [(49 97 16 23) 16]
Test Case: 360 | Input/Output: [(63 60 72 4) 4]
Test Case: 361 | Input/Output: [(2 87 51 92) 2]
Test Case: 362 | Input/Output: [(22 72 9 76) 9]
Test Case: 363 | Input/Output: [(3 65 11 94) 3]
Test Case: 364 | Input/Output: [(10 59 7 33) 7]
Test Case: 365 | Input/Output: [(43 36 41 46) 36]
Test Case: 366 | Input/Output: [(33 12 53 40) 12]
Test Case: 367 | Input/Output: [(30 94 55 43) 30]
Test Case: 368 | Input/Output: [(94 98 10 46) 10]
Test Case: 369 | Input/Output: [(54 78 83 40) 40]
Test Case: 370 | Input/Output: [(32 36 43 99) 32]
Test Case: 371 | Input/Output: [(17 95 88 79) 17]
Test Case: 372 | Input/Output: [(11 99 90 89) 11]
Test Case: 373 | Input/Output: [(98 74 59 41) 41]
Test Case: 374 | Input/Output: [(48 58 14 67) 14]
Test Case: 375 | Input/Output: [(87 82 46 29) 29]
Test Case: 376 | Input/Output: [(10 13 67 75) 10]
Test Case: 377 | Input/Output: [(100 93 37 70) 37]
Test Case: 378 | Input/Output: [(91 78 59 45) 45]
Test Case: 379 | Input/Output: [(92 47 5 61) 5]
Test Case: 380 | Input/Output: [(85 74 95 48) 48]
Test Case: 381 | Input/Output: [(52 80 81 70) 52]
Test Case: 382 | Input/Output: [(22 79 21 62) 21]
Test Case: 383 | Input/Output: [(96 10 11 41) 10]
Test Case: 384 | Input/Output: [(73 54 53 75) 53]
Test Case: 385 | Input/Output: [(91 97 31 75) 31]
Test Case: 386 | Input/Output: [(77 90 91 70) 70]
Test Case: 387 | Input/Output: [(64 11 17 2) 2]
Test Case: 388 | Input/Output: [(70 56 38 96) 38]
Test Case: 389 | Input/Output: [(19 17 88 9) 9]
Test Case: 390 | Input/Output: [(56 44 13 36) 13]
Test Case: 391 | Input/Output: [(24 6 51 38) 6]
Test Case: 392 | Input/Output: [(90 57 22 37) 22]
Test Case: 393 | Input/Output: [(71 92 77 27) 27]
Test Case: 394 | Input/Output: [(41 14 19 87) 14]
Test Case: 395 | Input/Output: [(33 54 29 91) 29]
Test Case: 396 | Input/Output: [(52 11 75 41) 11]
Test Case: 397 | Input/Output: [(19 27 92 26) 19]
Test Case: 398 | Input/Output: [(91 19 43 29) 19]
Test Case: 399 | Input/Output: [(84 93 63 82) 63]
Test Case: 400 | Input/Output: [(-49 -55 35 -9) -55]
Test Case: 401 | Input/Output: [(90 51 96 1) 1]
Test Case: 402 | Input/Output: [(-33 89 -63 -13) -63]
Test Case: 403 | Input/Output: [(56 24 -50 -65) -65]
Test Case: 404 | Input/Output: [(-71 72 38 -38) -71]
Test Case: 405 | Input/Output: [(-14 18 -41 89) -41]
Test Case: 406 | Input/Output: [(-15 83 -95 -96) -96]
Test Case: 407 | Input/Output: [(72 -48 29 -22) -48]
Test Case: 408 | Input/Output: [(-89 -62 -34 6) -89]
Test Case: 409 | Input/Output: [(74 2 -26 15) -26]
Test Case: 410 | Input/Output: [(-15 51 58 9) -15]
Test Case: 411 | Input/Output: [(44 5 98 56) 5]
Test Case: 412 | Input/Output: [(-53 63 7 -43) -53]
Test Case: 413 | Input/Output: [(-79 51 -96 9) -96]
Test Case: 414 | Input/Output: [(-25 32 -83 -19) -83]
Test Case: 415 | Input/Output: [(63 62 -51 92) -51]
Test Case: 416 | Input/Output: [(-55 74 3 49) -55]
Test Case: 417 | Input/Output: [(-87 -22 40 -78) -87]
Test Case: 418 | Input/Output: [(95 45 98 76) 45]
Test Case: 419 | Input/Output: [(39 -81 4 -28) -81]
Test Case: 420 | Input/Output: [(45 -69 27 -93) -93]
Test Case: 421 | Input/Output: [(39 9 65 -41) -41]
Test Case: 422 | Input/Output: [(12 -44 99 60) -44]
Test Case: 423 | Input/Output: [(39 9 7 95) 7]
Test Case: 424 | Input/Output: [(-79 -36 83 -17) -79]
Test Case: 425 | Input/Output: [(-73 32 -57 -98) -98]
Test Case: 426 | Input/Output: [(81 -20 0 -26) -26]
Test Case: 427 | Input/Output: [(33 42 45 -17) -17]
Test Case: 428 | Input/Output: [(-30 -24 -35 15) -35]
Test Case: 429 | Input/Output: [(86 68 60 -44) -44]
Test Case: 430 | Input/Output: [(83 -4 90 -48) -48]
Test Case: 431 | Input/Output: [(4 -68 -95 -41) -95]
Test Case: 432 | Input/Output: [(6 -32 95 -88) -88]
Test Case: 433 | Input/Output: [(97 41 24 -17) -17]
Test Case: 434 | Input/Output: [(91 -57 -99 -46) -99]
Test Case: 435 | Input/Output: [(-31 84 -44 21) -44]
Test Case: 436 | Input/Output: [(-81 -34 -65 18) -81]
Test Case: 437 | Input/Output: [(47 26 -39 -61) -61]
Test Case: 438 | Input/Output: [(-72 13 25 -54) -72]
Test Case: 439 | Input/Output: [(-11 82 -7 -27) -27]
Test Case: 440 | Input/Output: [(79 -29 48 94) -29]
Test Case: 441 | Input/Output: [(55 -62 -38 -35) -62]
Test Case: 442 | Input/Output: [(-20 -59 19 -17) -59]
Test Case: 443 | Input/Output: [(-84 -42 -1 70) -84]
Test Case: 444 | Input/Output: [(79 -73 47 -59) -73]
Test Case: 445 | Input/Output: [(-26 31 49 1) -26]
Test Case: 446 | Input/Output: [(88 85 52 91) 52]
Test Case: 447 | Input/Output: [(-58 -10 36 64) -58]
Test Case: 448 | Input/Output: [(-70 -8 -58 27) -70]
Test Case: 449 | Input/Output: [(-35 -88 34 -63) -88]
Test Case: 450 | Input/Output: [(80 -6 21 -55) -55]
Test Case: 451 | Input/Output: [(-93 -22 -71 -20) -93]
Test Case: 452 | Input/Output: [(-12 47 -93 -35) -93]
Test Case: 453 | Input/Output: [(7 16 63 -91) -91]
Test Case: 454 | Input/Output: [(-29 -73 48 -70) -73]
Test Case: 455 | Input/Output: [(-16 8 95 16) -16]
Test Case: 456 | Input/Output: [(-85 33 17 -29) -85]
Test Case: 457 | Input/Output: [(-38 -2 -27 -80) -80]
Test Case: 458 | Input/Output: [(-43 68 -37 -15) -43]
Test Case: 459 | Input/Output: [(65 -42 -69 -71) -71]
Test Case: 460 | Input/Output: [(81 -65 94 -51) -65]
Test Case: 461 | Input/Output: [(50 -68 18 -27) -68]
Test Case: 462 | Input/Output: [(-54 83 -55 -68) -68]
Test Case: 463 | Input/Output: [(-68 -16 39 56) -68]
Test Case: 464 | Input/Output: [(-49 41 -79 -66) -79]
Test Case: 465 | Input/Output: [(-45 71 81 99) -45]
Test Case: 466 | Input/Output: [(39 0 -59 54) -59]
Test Case: 467 | Input/Output: [(95 24 38 -45) -45]
Test Case: 468 | Input/Output: [(82 0 43 -96) -96]
Test Case: 469 | Input/Output: [(63 52 27 4) 4]
Test Case: 470 | Input/Output: [(31 -48 -24 -61) -61]
Test Case: 471 | Input/Output: [(88 -2 -51 -91) -91]
Test Case: 472 | Input/Output: [(-53 -48 -9 47) -53]
Test Case: 473 | Input/Output: [(89 -73 38 -41) -73]
Test Case: 474 | Input/Output: [(-13 3 -9 -32) -32]
Test Case: 475 | Input/Output: [(-48 38 -88 79) -88]
Test Case: 476 | Input/Output: [(-68 -96 -42 65) -96]
Test Case: 477 | Input/Output: [(-11 79 -21 10) -21]
Test Case: 478 | Input/Output: [(47 -33 -16 12) -33]
Test Case: 479 | Input/Output: [(49 29 56 -41) -41]
Test Case: 480 | Input/Output: [(-40 -83 12 -23) -83]
Test Case: 481 | Input/Output: [(-79 -75 41 17) -79]
Test Case: 482 | Input/Output: [(19 64 -44 -68) -68]
Test Case: 483 | Input/Output: [(-40 -20 -81 -6) -81]
Test Case: 484 | Input/Output: [(-9 -2 -10 -78) -78]
Test Case: 485 | Input/Output: [(-52 89 45 85) -52]
Test Case: 486 | Input/Output: [(-57 -3 32 -52) -57]
Test Case: 487 | Input/Output: [(70 34 -1 1) -1]
Test Case: 488 | Input/Output: [(67 -51 -95 -89) -95]
Test Case: 489 | Input/Output: [(-68 -91 0 13) -91]
Test Case: 490 | Input/Output: [(-22 -82 48 37) -82]
Test Case: 491 | Input/Output: [(22 -45 -21 -28) -45]
Test Case: 492 | Input/Output: [(-15 -48 -71 -25) -71]
Test Case: 493 | Input/Output: [(-19 -42 -40 -54) -54]
Test Case: 494 | Input/Output: [(-44 3 81 -91) -91]
Test Case: 495 | Input/Output: [(36 84 32 -34) -34]
Test Case: 496 | Input/Output: [(21 -65 -26 -87) -87]
Test Case: 497 | Input/Output: [(10 75 2 69) 2]
Test Case: 498 | Input/Output: [(-99 99 -57 19) -99]
Test Case: 499 | Input/Output: [(53 65 -67 83) -67]
Test Case: 500 | Input/Output: [(59 -41 90 54) -41]
Test Case: 501 | Input/Output: [(7 -3 31 96) -3]
Test Case: 502 | Input/Output: [(87 3 -66 -60) -66]
Test Case: 503 | Input/Output: [(-96 77 -9 35) -96]
Test Case: 504 | Input/Output: [(-39 95 72 -55) -55]
Test Case: 505 | Input/Output: [(82 -36 -56 66) -56]
Test Case: 506 | Input/Output: [(7 72 98 -65) -65]
Test Case: 507 | Input/Output: [(97 44 61 4) 4]
Test Case: 508 | Input/Output: [(-94 47 -21 -91) -94]
Test Case: 509 | Input/Output: [(-91 -23 26 -8) -91]
Test Case: 510 | Input/Output: [(33 -30 22 8) -30]
Test Case: 511 | Input/Output: [(-94 -59 -17 -16) -94]
Test Case: 512 | Input/Output: [(1 -45 40 -69) -69]
Test Case: 513 | Input/Output: [(-96 -85 -29 39) -96]
Test Case: 514 | Input/Output: [(-93 -45 -29 -22) -93]
Test Case: 515 | Input/Output: [(41 26 -38 93) -38]
Test Case: 516 | Input/Output: [(83 87 -2 -53) -53]
Test Case: 517 | Input/Output: [(-85 -7 -82 78) -85]
Test Case: 518 | Input/Output: [(76 40 95 -50) -50]
Test Case: 519 | Input/Output: [(53 -55 55 65) -55]
Test Case: 520 | Input/Output: [(-61 82 -4 -63) -63]
Test Case: 521 | Input/Output: [(71 -52 12 -67) -67]
Test Case: 522 | Input/Output: [(-93 -94 37 -67) -94]
Test Case: 523 | Input/Output: [(-75 -6 -4 83) -75]
Test Case: 524 | Input/Output: [(-25 -3 49 -11) -25]
Test Case: 525 | Input/Output: [(39 88 19 -47) -47]
Test Case: 526 | Input/Output: [(86 84 -66 3) -66]
Test Case: 527 | Input/Output: [(56 -86 4 -17) -86]
Test Case: 528 | Input/Output: [(-12 99 41 86) -12]
Test Case: 529 | Input/Output: [(-86 53 8 62) -86]
Test Case: 530 | Input/Output: [(-28 14 -63 -9) -63]
Test Case: 531 | Input/Output: [(90 13 29 94) 13]
Test Case: 532 | Input/Output: [(22 -31 -4 -94) -94]
Test Case: 533 | Input/Output: [(-72 -70 -73 -18) -73]
Test Case: 534 | Input/Output: [(55 -73 15 -2) -73]
Test Case: 535 | Input/Output: [(98 90 30 -54) -54]
Test Case: 536 | Input/Output: [(-67 78 7 64) -67]
Test Case: 537 | Input/Output: [(92 81 2 95) 2]
Test Case: 538 | Input/Output: [(86 -69 -44 52) -69]
Test Case: 539 | Input/Output: [(48 -22 -59 90) -59]
Test Case: 540 | Input/Output: [(-89 -23 -46 96) -89]
Test Case: 541 | Input/Output: [(2 -9 -66 16) -66]
Test Case: 542 | Input/Output: [(-92 26 7 77) -92]
Test Case: 543 | Input/Output: [(59 -90 -60 -56) -90]
Test Case: 544 | Input/Output: [(18 16 -13 -93) -93]
Test Case: 545 | Input/Output: [(35 2 43 70) 2]
Test Case: 546 | Input/Output: [(19 95 81 -38) -38]
Test Case: 547 | Input/Output: [(-99 -62 -42 38) -99]
Test Case: 548 | Input/Output: [(10 -24 -48 35) -48]
Test Case: 549 | Input/Output: [(45 73 0 8) 0]
Test Case: 550 | Input/Output: [(-72 -22 30 -67) -72]
Test Case: 551 | Input/Output: [(47 -35 -100 -3) -100]
Test Case: 552 | Input/Output: [(-63 61 -96 -1) -96]
Test Case: 553 | Input/Output: [(-47 -67 42 -47) -67]
Test Case: 554 | Input/Output: [(14 -13 -72 -11) -72]
Test Case: 555 | Input/Output: [(94 60 -22 26) -22]
Test Case: 556 | Input/Output: [(17 -19 -19 -82) -82]
Test Case: 557 | Input/Output: [(-42 -25 -98 -29) -98]
Test Case: 558 | Input/Output: [(-93 -94 -33 13) -94]
Test Case: 559 | Input/Output: [(-91 78 83 0) -91]
Test Case: 560 | Input/Output: [(6 36 -50 -70) -70]
Test Case: 561 | Input/Output: [(67 83 -43 62) -43]
Test Case: 562 | Input/Output: [(-47 60 -82 -100) -100]
Test Case: 563 | Input/Output: [(74 -77 36 69) -77]
Test Case: 564 | Input/Output: [(-92 16 0 -52) -92]
Test Case: 565 | Input/Output: [(-48 -5 -34 13) -48]
Test Case: 566 | Input/Output: [(-100 -50 -91 -77) -100]
Test Case: 567 | Input/Output: [(-21 -60 -9 53) -60]
Test Case: 568 | Input/Output: [(73 -59 -8 80) -59]
Test Case: 569 | Input/Output: [(-99 -29 -98 -77) -99]
Test Case: 570 | Input/Output: [(-32 27 -85 -34) -85]
Test Case: 571 | Input/Output: [(96 94 52 79) 52]
Test Case: 572 | Input/Output: [(-67 -67 -44 -26) -67]
Test Case: 573 | Input/Output: [(26 -81 -86 74) -86]
Test Case: 574 | Input/Output: [(-8 -54 81 71) -54]
Test Case: 575 | Input/Output: [(71 31 16 7) 7]
Test Case: 576 | Input/Output: [(94 -92 -20 -28) -92]
Test Case: 577 | Input/Output: [(-21 21 27 -6) -21]
Test Case: 578 | Input/Output: [(57 10 89 -10) -10]
Test Case: 579 | Input/Output: [(-79 -78 -76 -18) -79]
Test Case: 580 | Input/Output: [(73 47 -20 79) -20]
Test Case: 581 | Input/Output: [(-1 20 30 -41) -41]
Test Case: 582 | Input/Output: [(94 -10 -2 -97) -97]
Test Case: 583 | Input/Output: [(-96 69 33 -13) -96]
Test Case: 584 | Input/Output: [(92 -59 -100 84) -100]
Test Case: 585 | Input/Output: [(-87 52 85 -28) -87]
Test Case: 586 | Input/Output: [(-20 18 -100 -80) -100]
Test Case: 587 | Input/Output: [(71 -86 -13 35) -86]
Test Case: 588 | Input/Output: [(100 91 47 -77) -77]
Test Case: 589 | Input/Output: [(-30 93 62 14) -30]
Test Case: 590 | Input/Output: [(-8 -30 -46 -40) -46]
Test Case: 591 | Input/Output: [(62 27 58 45) 27]
Test Case: 592 | Input/Output: [(75 -46 -47 -77) -77]
Test Case: 593 | Input/Output: [(54 -68 -75 -87) -87]
Test Case: 594 | Input/Output: [(-47 -9 78 -17) -47]
Test Case: 595 | Input/Output: [(-82 -76 63 -92) -92]
Test Case: 596 | Input/Output: [(14 15 75 40) 14]
Test Case: 597 | Input/Output: [(-14 81 -100 32) -100]
Test Case: 598 | Input/Output: [(46 38 -68 10) -68]
Test Case: 599 | Input/Output: [(65 -67 -96 35) -96]
Test Case: 600 | Input/Output: [(67 35 97 4) 4]
Test Case: 601 | Input/Output: [(71 81 -72 -94) -94]
Test Case: 602 | Input/Output: [(-8 7 -38 76) -38]
Test Case: 603 | Input/Output: [(17 -97 -40 4) -97]
Test Case: 604 | Input/Output: [(38 -13 -12 26) -13]
Test Case: 605 | Input/Output: [(-8 48 -63 74) -63]
Test Case: 606 | Input/Output: [(34 42 34 -24) -24]
Test Case: 607 | Input/Output: [(-58 -73 -34 24) -73]
Test Case: 608 | Input/Output: [(87 82 -25 81) -25]
Test Case: 609 | Input/Output: [(-3 -74 -66 20) -74]
Test Case: 610 | Input/Output: [(22 99 11 23) 11]
Test Case: 611 | Input/Output: [(37 -52 21 67) -52]
Test Case: 612 | Input/Output: [(-2 -44 50 -20) -44]
Test Case: 613 | Input/Output: [(17 61 47 24) 17]
Test Case: 614 | Input/Output: [(67 -61 54 -44) -61]
Test Case: 615 | Input/Output: [(-63 37 53 -49) -63]
Test Case: 616 | Input/Output: [(11 77 -97 3) -97]
Test Case: 617 | Input/Output: [(-22 75 4 86) -22]
Test Case: 618 | Input/Output: [(22 -4 -62 86) -62]
Test Case: 619 | Input/Output: [(-44 -23 14 -32) -44]
Test Case: 620 | Input/Output: [(57 -10 -61 -70) -70]
Test Case: 621 | Input/Output: [(-70 98 75 64) -70]
Test Case: 622 | Input/Output: [(-70 91 -75 -36) -75]
Test Case: 623 | Input/Output: [(74 -29 21 -57) -57]
Test Case: 624 | Input/Output: [(77 -29 -42 96) -42]
Test Case: 625 | Input/Output: [(-44 -87 -62 43) -87]
Test Case: 626 | Input/Output: [(-9 89 -94 80) -94]
Test Case: 627 | Input/Output: [(-67 37 -58 41) -67]
Test Case: 628 | Input/Output: [(16 -15 34 36) -15]
Test Case: 629 | Input/Output: [(-11 -42 -66 74) -66]
Test Case: 630 | Input/Output: [(-68 -95 -28 38) -95]
Test Case: 631 | Input/Output: [(83 -45 47 83) -45]
Test Case: 632 | Input/Output: [(35 -59 83 -34) -59]
Test Case: 633 | Input/Output: [(-90 5 74 -84) -90]
Test Case: 634 | Input/Output: [(-12 59 -3 -67) -67]
Test Case: 635 | Input/Output: [(-29 82 6 -16) -29]
Test Case: 636 | Input/Output: [(-25 -38 -9 29) -38]
Test Case: 637 | Input/Output: [(-76 -5 28 -15) -76]
Test Case: 638 | Input/Output: [(75 -81 72 81) -81]
Test Case: 639 | Input/Output: [(-59 55 52 -91) -91]
Test Case: 640 | Input/Output: [(-32 56 68 48) -32]
Test Case: 641 | Input/Output: [(-98 88 72 48) -98]
Test Case: 642 | Input/Output: [(0 11 -12 -61) -61]
Test Case: 643 | Input/Output: [(-41 40 54 70) -41]
Test Case: 644 | Input/Output: [(-11 65 80 14) -11]
Test Case: 645 | Input/Output: [(78 50 0 -76) -76]
Test Case: 646 | Input/Output: [(31 33 8 21) 8]
Test Case: 647 | Input/Output: [(62 -56 -42 -2) -56]
Test Case: 648 | Input/Output: [(78 -83 98 61) -83]
Test Case: 649 | Input/Output: [(-96 34 98 -60) -96]
Test Case: 650 | Input/Output: [(73 -5 12 -20) -20]
Test Case: 651 | Input/Output: [(-6 -60 -69 -7) -69]
Test Case: 652 | Input/Output: [(-64 -33 -91 -59) -91]
Test Case: 653 | Input/Output: [(-88 89 68 -80) -88]
Test Case: 654 | Input/Output: [(-48 -70 98 92) -70]
Test Case: 655 | Input/Output: [(71 -85 4 -40) -85]
Test Case: 656 | Input/Output: [(-15 -74 97 -97) -97]
Test Case: 657 | Input/Output: [(-58 60 21 79) -58]
Test Case: 658 | Input/Output: [(55 90 -58 -45) -58]
Test Case: 659 | Input/Output: [(84 -8 -50 30) -50]
Test Case: 660 | Input/Output: [(-68 -60 -16 -64) -68]
Test Case: 661 | Input/Output: [(-92 -95 -92 75) -95]
Test Case: 662 | Input/Output: [(19 85 17 -6) -6]
Test Case: 663 | Input/Output: [(-33 -41 44 -72) -72]
Test Case: 664 | Input/Output: [(45 -92 59 64) -92]
Test Case: 665 | Input/Output: [(82 65 -67 -39) -67]
Test Case: 666 | Input/Output: [(56 -90 51 91) -90]
Test Case: 667 | Input/Output: [(-94 93 -28 72) -94]
Test Case: 668 | Input/Output: [(-50 -43 57 19) -50]
Test Case: 669 | Input/Output: [(-60 98 9 -99) -99]
Test Case: 670 | Input/Output: [(-49 70 -48 -89) -89]
Test Case: 671 | Input/Output: [(-92 2 -74 -94) -94]
Test Case: 672 | Input/Output: [(-42 42 -79 -25) -79]
Test Case: 673 | Input/Output: [(91 -92 14 29) -92]
Test Case: 674 | Input/Output: [(44 78 -43 -57) -57]
Test Case: 675 | Input/Output: [(67 40 64 -58) -58]
Test Case: 676 | Input/Output: [(-51 13 69 -8) -51]
Test Case: 677 | Input/Output: [(-89 53 45 -68) -89]
Test Case: 678 | Input/Output: [(-67 87 96 13) -67]
Test Case: 679 | Input/Output: [(54 -16 74 -75) -75]
Test Case: 680 | Input/Output: [(-89 -87 -57 -71) -89]
Test Case: 681 | Input/Output: [(-76 -78 20 89) -78]
Test Case: 682 | Input/Output: [(39 28 2 97) 2]
Test Case: 683 | Input/Output: [(24 99 96 -36) -36]
Test Case: 684 | Input/Output: [(86 4 -87 -21) -87]
Test Case: 685 | Input/Output: [(60 57 -53 -75) -75]
Test Case: 686 | Input/Output: [(0 -47 -16 89) -47]
Test Case: 687 | Input/Output: [(90 -22 13 -19) -22]
Test Case: 688 | Input/Output: [(-38 -32 8 91) -38]
Test Case: 689 | Input/Output: [(27 66 8 -23) -23]
Test Case: 690 | Input/Output: [(5 63 91 -23) -23]
Test Case: 691 | Input/Output: [(22 35 -7 -26) -26]
Test Case: 692 | Input/Output: [(49 -29 -33 -30) -33]
Test Case: 693 | Input/Output: [(96 11 47 -100) -100]
Test Case: 694 | Input/Output: [(-75 41 86 85) -75]
Test Case: 695 | Input/Output: [(44 -37 -18 -35) -37]
Test Case: 696 | Input/Output: [(3 -70 -35 16) -70]
Test Case: 697 | Input/Output: [(90 72 6 -60) -60]
Test Case: 698 | Input/Output: [(71 73 -75 -10) -75]
Test Case: 699 | Input/Output: [(-89 -67 9 62) -89]
Test Case: 700 | Input/Output: [(-82 45 -53 52) -82]
Test Case: 701 | Input/Output: [(50 -62 -74 -98) -98]
Test Case: 702 | Input/Output: [(-97 -43 83 32) -97]
Test Case: 703 | Input/Output: [(-82 15 71 9) -82]
Test Case: 704 | Input/Output: [(6 -42 -42 -48) -48]
Test Case: 705 | Input/Output: [(-6 24 -22 34) -22]
Test Case: 706 | Input/Output: [(-45 51 -89 59) -89]
Test Case: 707 | Input/Output: [(-27 -5 47 -97) -97]
Test Case: 708 | Input/Output: [(21 -72 -91 -61) -91]
Test Case: 709 | Input/Output: [(43 2 60 72) 2]
Test Case: 710 | Input/Output: [(0 -62 -84 43) -84]
Test Case: 711 | Input/Output: [(37 -6 -30 -52) -52]
Test Case: 712 | Input/Output: [(-4 -37 34 53) -37]
Test Case: 713 | Input/Output: [(-96 -9 -44 -40) -96]
Test Case: 714 | Input/Output: [(26 8 1 -9) -9]
Test Case: 715 | Input/Output: [(-49 76 62 93) -49]
Test Case: 716 | Input/Output: [(-7 56 52 58) -7]
Test Case: 717 | Input/Output: [(99 -50 -18 38) -50]
Test Case: 718 | Input/Output: [(-50 28 30 -44) -50]
Test Case: 719 | Input/Output: [(-34 33 10 -46) -46]
Test Case: 720 | Input/Output: [(32 55 7 -44) -44]
Test Case: 721 | Input/Output: [(-1 41 94 64) -1]
Test Case: 722 | Input/Output: [(73 -89 79 -20) -89]
Test Case: 723 | Input/Output: [(-99 -69 -89 6) -99]
Test Case: 724 | Input/Output: [(42 -25 99 61) -25]
Test Case: 725 | Input/Output: [(-36 -67 -88 -91) -91]
Test Case: 726 | Input/Output: [(45 -50 94 75) -50]
Test Case: 727 | Input/Output: [(-46 22 -100 82) -100]
Test Case: 728 | Input/Output: [(32 -75 -81 -17) -81]
Test Case: 729 | Input/Output: [(78 10 -6 43) -6]
Test Case: 730 | Input/Output: [(25 8 -51 -100) -100]
Test Case: 731 | Input/Output: [(7 84 96 51) 7]
Test Case: 732 | Input/Output: [(44 -47 86 80) -47]
Test Case: 733 | Input/Output: [(55 -56 19 -38) -56]
Test Case: 734 | Input/Output: [(-24 -82 -60 -40) -82]
Test Case: 735 | Input/Output: [(93 75 -10 -72) -72]
Test Case: 736 | Input/Output: [(-41 -41 50 -83) -83]
Test Case: 737 | Input/Output: [(87 -28 -34 27) -34]
Test Case: 738 | Input/Output: [(24 28 -32 72) -32]
Test Case: 739 | Input/Output: [(22 -76 -52 15) -76]
Test Case: 740 | Input/Output: [(-34 84 91 87) -34]
Test Case: 741 | Input/Output: [(-53 -64 39 -94) -94]
Test Case: 742 | Input/Output: [(-100 12 -53 5) -100]
Test Case: 743 | Input/Output: [(92 98 2 -29) -29]
Test Case: 744 | Input/Output: [(5 69 -65 9) -65]
Test Case: 745 | Input/Output: [(65 96 -84 33) -84]
Test Case: 746 | Input/Output: [(48 54 44 64) 44]
Test Case: 747 | Input/Output: [(85 -19 -13 21) -19]
Test Case: 748 | Input/Output: [(-9 0 -90 -15) -90]
Test Case: 749 | Input/Output: [(75 -42 -58 22) -58]
Test Case: 750 | Input/Output: [(47 -80 -60 -17) -80]
Test Case: 751 | Input/Output: [(-55 3 -9 -83) -83]
Test Case: 752 | Input/Output: [(21 36 57 -20) -20]
Test Case: 753 | Input/Output: [(36 -92 92 14) -92]
Test Case: 754 | Input/Output: [(-60 -87 51 28) -87]
Test Case: 755 | Input/Output: [(-36 3 46 29) -36]
Test Case: 756 | Input/Output: [(-6 -45 -4 -49) -49]
Test Case: 757 | Input/Output: [(-60 19 -70 -48) -70]
Test Case: 758 | Input/Output: [(-14 0 -97 -73) -97]
Test Case: 759 | Input/Output: [(0 -61 77 -100) -100]
Test Case: 760 | Input/Output: [(-79 9 17 -15) -79]
Test Case: 761 | Input/Output: [(14 60 83 65) 14]
Test Case: 762 | Input/Output: [(-20 -68 -77 44) -77]
Test Case: 763 | Input/Output: [(-86 -19 23 86) -86]
Test Case: 764 | Input/Output: [(11 -89 55 -13) -89]
Test Case: 765 | Input/Output: [(36 17 0 70) 0]
Test Case: 766 | Input/Output: [(-56 -47 -4 -76) -76]
Test Case: 767 | Input/Output: [(-56 83 35 -3) -56]
Test Case: 768 | Input/Output: [(-43 -2 21 -75) -75]
Test Case: 769 | Input/Output: [(-55 -54 5 -69) -69]
Test Case: 770 | Input/Output: [(40 73 12 16) 12]
Test Case: 771 | Input/Output: [(-23 97 -45 18) -45]
Test Case: 772 | Input/Output: [(-58 83 -63 38) -63]
Test Case: 773 | Input/Output: [(95 -10 65 6) -10]
Test Case: 774 | Input/Output: [(55 -82 24 -52) -82]
Test Case: 775 | Input/Output: [(-91 45 -48 -82) -91]
Test Case: 776 | Input/Output: [(45 -17 -88 -5) -88]
Test Case: 777 | Input/Output: [(-98 -43 -47 3) -98]
Test Case: 778 | Input/Output: [(-56 -86 69 -98) -98]
Test Case: 779 | Input/Output: [(-54 66 15 73) -54]
Test Case: 780 | Input/Output: [(-4 98 -60 26) -60]
Test Case: 781 | Input/Output: [(-85 49 -93 89) -93]
Test Case: 782 | Input/Output: [(45 -71 -98 37) -98]
Test Case: 783 | Input/Output: [(73 -64 -56 48) -64]
Test Case: 784 | Input/Output: [(-65 -10 -61 89) -65]
Test Case: 785 | Input/Output: [(17 -32 -94 32) -94]
Test Case: 786 | Input/Output: [(76 -5 2 88) -5]
Test Case: 787 | Input/Output: [(-83 -66 97 -5) -83]
Test Case: 788 | Input/Output: [(77 -70 -48 -58) -70]
Test Case: 789 | Input/Output: [(23 -2 -63 -95) -95]
Test Case: 790 | Input/Output: [(-10 0 -92 30) -92]
Test Case: 791 | Input/Output: [(-68 34 93 -98) -98]
Test Case: 792 | Input/Output: [(-78 -32 -60 -100) -100]
Test Case: 793 | Input/Output: [(-92 -59 -41 40) -92]
Test Case: 794 | Input/Output: [(77 27 38 -98) -98]
Test Case: 795 | Input/Output: [(-52 54 21 91) -52]
Test Case: 796 | Input/Output: [(52 -40 18 -40) -40]
Test Case: 797 | Input/Output: [(61 -8 19 -56) -56]
Test Case: 798 | Input/Output: [(87 -83 88 -65) -83]
Test Case: 799 | Input/Output: [(11 26 -69 -64) -69]
Test Case: 800 | Input/Output: [(73 -60 -91 -95) -95]
Test Case: 801 | Input/Output: [(40 -7 33 -13) -13]
Test Case: 802 | Input/Output: [(34 -59 -5 15) -59]
Test Case: 803 | Input/Output: [(-23 49 50 39) -23]
Test Case: 804 | Input/Output: [(-12 -8 -57 48) -57]
Test Case: 805 | Input/Output: [(84 -41 7 -65) -65]
Test Case: 806 | Input/Output: [(24 83 -14 -23) -23]
Test Case: 807 | Input/Output: [(87 -52 88 94) -52]
Test Case: 808 | Input/Output: [(-10 1 77 -60) -60]
Test Case: 809 | Input/Output: [(-61 68 34 -21) -61]
Test Case: 810 | Input/Output: [(34 83 54 52) 34]
Test Case: 811 | Input/Output: [(61 91 20 -16) -16]
Test Case: 812 | Input/Output: [(-22 54 63 -42) -42]
Test Case: 813 | Input/Output: [(67 36 -1 1) -1]
Test Case: 814 | Input/Output: [(-88 -80 14 -11) -88]
Test Case: 815 | Input/Output: [(-3 -5 -52 47) -52]
Test Case: 816 | Input/Output: [(-69 18 49 99) -69]
Test Case: 817 | Input/Output: [(32 52 -76 -97) -97]
Test Case: 818 | Input/Output: [(20 71 50 -65) -65]
Test Case: 819 | Input/Output: [(37 -79 -25 3) -79]
Test Case: 820 | Input/Output: [(40 41 32 -13) -13]
Test Case: 821 | Input/Output: [(19 43 -39 34) -39]
Test Case: 822 | Input/Output: [(-90 40 -46 -88) -90]
Test Case: 823 | Input/Output: [(-41 -88 -41 68) -88]
Test Case: 824 | Input/Output: [(-46 63 -89 34) -89]
Test Case: 825 | Input/Output: [(94 -42 -59 -27) -59]
Test Case: 826 | Input/Output: [(91 1 63 19) 1]
Test Case: 827 | Input/Output: [(53 -35 -20 33) -35]
Test Case: 828 | Input/Output: [(32 -9 -11 81) -11]
Test Case: 829 | Input/Output: [(-79 -73 30 25) -79]
Test Case: 830 | Input/Output: [(-96 -11 48 -60) -96]
Test Case: 831 | Input/Output: [(28 79 24 -76) -76]
Test Case: 832 | Input/Output: [(24 15 41 33) 15]
Test Case: 833 | Input/Output: [(-72 -4 -83 -28) -83]
Test Case: 834 | Input/Output: [(-60 2 -5 -8) -60]
Test Case: 835 | Input/Output: [(72 76 62 31) 31]
Test Case: 836 | Input/Output: [(86 -58 80 -83) -83]
Test Case: 837 | Input/Output: [(-55 27 -96 -8) -96]
Test Case: 838 | Input/Output: [(-69 63 3 24) -69]
Test Case: 839 | Input/Output: [(11 -71 -21 97) -71]
Test Case: 840 | Input/Output: [(65 49 84 -82) -82]
Test Case: 841 | Input/Output: [(6 -34 66 63) -34]
Test Case: 842 | Input/Output: [(52 -20 -1 69) -20]
Test Case: 843 | Input/Output: [(73 -11 41 0) -11]
Test Case: 844 | Input/Output: [(-21 -27 -57 -41) -57]
Test Case: 845 | Input/Output: [(47 -67 24 85) -67]
Test Case: 846 | Input/Output: [(16 75 78 -44) -44]
Test Case: 847 | Input/Output: [(8 -27 -33 9) -33]
Test Case: 848 | Input/Output: [(71 -63 -58 49) -63]
Test Case: 849 | Input/Output: [(0 -19 -59 -71) -71]
Test Case: 850 | Input/Output: [(-7 27 -84 -34) -84]
Test Case: 851 | Input/Output: [(-58 75 13 -62) -62]
Test Case: 852 | Input/Output: [(12 -80 40 -81) -81]
Test Case: 853 | Input/Output: [(-96 -52 -21 -4) -96]
Test Case: 854 | Input/Output: [(55 96 -71 77) -71]
Test Case: 855 | Input/Output: [(-29 -32 -87 89) -87]
Test Case: 856 | Input/Output: [(19 13 36 -16) -16]
Test Case: 857 | Input/Output: [(-5 -61 -4 -60) -61]
Test Case: 858 | Input/Output: [(78 -48 -92 -47) -92]
Test Case: 859 | Input/Output: [(73 50 39 -11) -11]
Test Case: 860 | Input/Output: [(70 -90 71 -54) -90]
Test Case: 861 | Input/Output: [(73 -80 34 69) -80]
Test Case: 862 | Input/Output: [(-73 0 -100 23) -100]
Test Case: 863 | Input/Output: [(96 5 68 -90) -90]
Test Case: 864 | Input/Output: [(-29 64 34 -35) -35]
Test Case: 865 | Input/Output: [(-11 -43 -61 46) -61]
Test Case: 866 | Input/Output: [(-84 79 52 23) -84]
Test Case: 867 | Input/Output: [(72 -97 53 21) -97]
Test Case: 868 | Input/Output: [(-50 32 -92 -66) -92]
Test Case: 869 | Input/Output: [(42 -75 37 71) -75]
Test Case: 870 | Input/Output: [(36 -14 94 92) -14]
Test Case: 871 | Input/Output: [(4 56 91 87) 4]
Test Case: 872 | Input/Output: [(-97 -85 37 -48) -97]
Test Case: 873 | Input/Output: [(-3 59 -77 28) -77]
Test Case: 874 | Input/Output: [(61 89 -69 -44) -69]
Test Case: 875 | Input/Output: [(32 24 -75 -73) -75]
Test Case: 876 | Input/Output: [(-99 -35 64 -95) -99]
Test Case: 877 | Input/Output: [(61 88 -2 -75) -75]
Test Case: 878 | Input/Output: [(20 -24 100 55) -24]
Test Case: 879 | Input/Output: [(-84 98 -74 38) -84]
Test Case: 880 | Input/Output: [(-37 -57 -67 45) -67]
Test Case: 881 | Input/Output: [(-14 -58 49 47) -58]
Test Case: 882 | Input/Output: [(37 0 7 68) 0]
Test Case: 883 | Input/Output: [(-37 99 75 51) -37]
Test Case: 884 | Input/Output: [(-22 8 -61 -45) -61]
Test Case: 885 | Input/Output: [(80 -34 -72 -47) -72]
Test Case: 886 | Input/Output: [(-47 24 42 86) -47]
Test Case: 887 | Input/Output: [(-46 4 -69 -9) -69]
Test Case: 888 | Input/Output: [(-80 64 18 -20) -80]
Test Case: 889 | Input/Output: [(-79 4 -12 -53) -79]
Test Case: 890 | Input/Output: [(-32 -10 -35 41) -35]
Test Case: 891 | Input/Output: [(-5 -3 21 50) -5]
Test Case: 892 | Input/Output: [(66 -38 -10 -75) -75]
Test Case: 893 | Input/Output: [(45 -43 43 -28) -43]
Test Case: 894 | Input/Output: [(-70 40 -93 71) -93]
Test Case: 895 | Input/Output: [(-70 96 -13 -93) -93]
Test Case: 896 | Input/Output: [(34 -30 -5 -92) -92]
Test Case: 897 | Input/Output: [(82 20 94 -20) -20]
Test Case: 898 | Input/Output: [(0 -21 -66 51) -66]
Test Case: 899 | Input/Output: [(98 -18 75 40) -18]
Test Case: 900 | Input/Output: [(36 -58 -65 91) -65]
Test Case: 901 | Input/Output: [(-55 -25 -48 47) -55]
Test Case: 902 | Input/Output: [(75 90 -17 -83) -83]
Test Case: 903 | Input/Output: [(42 53 -50 -19) -50]
Test Case: 904 | Input/Output: [(-93 -4 65 72) -93]
Test Case: 905 | Input/Output: [(14 49 98 -90) -90]
Test Case: 906 | Input/Output: [(-92 -31 -68 -68) -92]
Test Case: 907 | Input/Output: [(-60 98 -65 -5) -65]
Test Case: 908 | Input/Output: [(97 84 76 -86) -86]
Test Case: 909 | Input/Output: [(-54 37 -6 -38) -54]
Test Case: 910 | Input/Output: [(-81 12 -80 -11) -81]
Test Case: 911 | Input/Output: [(100 77 85 20) 20]
Test Case: 912 | Input/Output: [(-86 82 -92 73) -92]
Test Case: 913 | Input/Output: [(42 -77 -50 -71) -77]
Test Case: 914 | Input/Output: [(-53 -59 41 -22) -59]
Test Case: 915 | Input/Output: [(-52 -31 100 33) -52]
Test Case: 916 | Input/Output: [(-67 55 2 84) -67]
Test Case: 917 | Input/Output: [(91 72 -16 54) -16]
Test Case: 918 | Input/Output: [(22 64 91 40) 22]
Test Case: 919 | Input/Output: [(57 -14 96 -30) -30]
Test Case: 920 | Input/Output: [(82 -19 41 -93) -93]
Test Case: 921 | Input/Output: [(-65 -79 -12 59) -79]
Test Case: 922 | Input/Output: [(50 74 -61 -92) -92]
Test Case: 923 | Input/Output: [(-23 -65 93 -100) -100]
Test Case: 924 | Input/Output: [(41 -86 76 38) -86]
Test Case: 925 | Input/Output: [(-78 27 41 -45) -78]
Test Case: 926 | Input/Output: [(86 -69 99 36) -69]
Test Case: 927 | Input/Output: [(-86 -55 -22 -81) -86]
Test Case: 928 | Input/Output: [(-12 48 -58 63) -58]
Test Case: 929 | Input/Output: [(-64 -100 16 80) -100]
Test Case: 930 | Input/Output: [(73 75 -4 -87) -87]
Test Case: 931 | Input/Output: [(-30 -89 -97 0) -97]
Test Case: 932 | Input/Output: [(-31 15 -86 44) -86]
Test Case: 933 | Input/Output: [(69 46 58 -55) -55]
Test Case: 934 | Input/Output: [(-84 25 51 -1) -84]
Test Case: 935 | Input/Output: [(56 75 61 -1) -1]
Test Case: 936 | Input/Output: [(-1 37 98 -49) -49]
Test Case: 937 | Input/Output: [(76 -10 -64 -43) -64]
Test Case: 938 | Input/Output: [(93 84 -35 -56) -56]
Test Case: 939 | Input/Output: [(54 46 45 85) 45]
Test Case: 940 | Input/Output: [(-2 -64 22 -7) -64]
Test Case: 941 | Input/Output: [(23 8 23 -9) -9]
Test Case: 942 | Input/Output: [(77 53 51 -70) -70]
Test Case: 943 | Input/Output: [(-55 90 -36 86) -55]
Test Case: 944 | Input/Output: [(-84 75 -7 -81) -84]
Test Case: 945 | Input/Output: [(60 -34 48 55) -34]
Test Case: 946 | Input/Output: [(78 -14 -21 89) -21]
Test Case: 947 | Input/Output: [(49 98 87 14) 14]
Test Case: 948 | Input/Output: [(-72 65 -26 25) -72]
Test Case: 949 | Input/Output: [(-22 -20 -96 2) -96]
Test Case: 950 | Input/Output: [(76 86 -17 -36) -36]
Test Case: 951 | Input/Output: [(97 -36 -46 -65) -65]
Test Case: 952 | Input/Output: [(54 -71 76 39) -71]
Test Case: 953 | Input/Output: [(94 -72 97 78) -72]
Test Case: 954 | Input/Output: [(30 32 -44 -86) -86]
Test Case: 955 | Input/Output: [(89 -92 -64 74) -92]
Test Case: 956 | Input/Output: [(-88 9 -39 60) -88]
Test Case: 957 | Input/Output: [(-15 -18 -3 25) -18]
Test Case: 958 | Input/Output: [(63 -35 -13 11) -35]
Test Case: 959 | Input/Output: [(97 -50 72 58) -50]
Test Case: 960 | Input/Output: [(27 28 -82 92) -82]
Test Case: 961 | Input/Output: [(78 -67 -80 91) -80]
Test Case: 962 | Input/Output: [(-11 48 60 -35) -35]
Test Case: 963 | Input/Output: [(-71 60 38 71) -71]
Test Case: 964 | Input/Output: [(73 -10 -58 76) -58]
Test Case: 965 | Input/Output: [(-50 -73 17 63) -73]
Test Case: 966 | Input/Output: [(-72 88 29 100) -72]
Test Case: 967 | Input/Output: [(24 38 -35 85) -35]
Test Case: 968 | Input/Output: [(-61 -85 79 -32) -85]
Test Case: 969 | Input/Output: [(15 -56 17 -66) -66]
Test Case: 970 | Input/Output: [(-45 43 -91 -68) -91]
Test Case: 971 | Input/Output: [(37 -85 -30 -67) -85]
Test Case: 972 | Input/Output: [(-43 -87 -79 62) -87]
Test Case: 973 | Input/Output: [(65 88 -99 -15) -99]
Test Case: 974 | Input/Output: [(17 67 -77 26) -77]
Test Case: 975 | Input/Output: [(-84 -77 -20 -30) -84]
Test Case: 976 | Input/Output: [(7 23 80 -65) -65]
Test Case: 977 | Input/Output: [(29 51 95 -99) -99]
Test Case: 978 | Input/Output: [(-96 -31 -82 -21) -96]
Test Case: 979 | Input/Output: [(44 24 -25 -82) -82]
Test Case: 980 | Input/Output: [(-60 -67 60 -91) -91]
Test Case: 981 | Input/Output: [(-64 -100 -95 39) -100]
Test Case: 982 | Input/Output: [(47 3 57 99) 3]
Test Case: 983 | Input/Output: [(4 -49 -91 -14) -91]
Test Case: 984 | Input/Output: [(-53 -68 -29 38) -68]
Test Case: 985 | Input/Output: [(-4 -41 69 81) -41]
Test Case: 986 | Input/Output: [(73 -35 21 97) -35]
Test Case: 987 | Input/Output: [(-98 -91 42 -96) -98]
Test Case: 988 | Input/Output: [(76 56 -40 -5) -40]
Test Case: 989 | Input/Output: [(-35 59 19 59) -35]
Test Case: 990 | Input/Output: [(20 -73 -18 -20) -73]
Test Case: 991 | Input/Output: [(-35 62 62 -63) -63]
Test Case: 992 | Input/Output: [(-15 -22 60 -41) -41]
Test Case: 993 | Input/Output: [(-51 -24 -44 -53) -53]
Test Case: 994 | Input/Output: [(-81 -67 53 -53) -81]
Test Case: 995 | Input/Output: [(93 34 -99 9) -99]
Test Case: 996 | Input/Output: [(-49 -38 -22 29) -49]
Test Case: 997 | Input/Output: [(-91 -8 50 -82) -91]
Test Case: 998 | Input/Output: [(-83 -83 22 54) -83]
Test Case: 999 | Input/Output: [(-17 84 91 61) -17]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 87 64 -119 116 -14 -21 -66 25 89 -31 1 -97 -109 80 83 37
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-46 -29 -46 -46] -46] [[-61 -61 -77 -61] -77] [[47 47 47 37] 37] [[34 34 -82 34] -82] [[-63 -15 -15 -15] -63] [[-79 -79 -79 -41] -79] [[46 95 46 46] 46] [[81 81 -81 81] -81] [[-65 -65 -65 -65] -65] [[47 47 -63 47] -63] [(45 45 45 45) 45] [(-23 -23 -23 -23) -23] [(23 23 23 23) 23] [(-82 -82 -82 -82) -82] [(13 13 13 13) 13] [(26 61 7 20) 7] [(98 13 18 1) 1] [(44 70 25 98) 25] [(47 93 69 38) 38] [(0 77 85 75) 0] [(40 10 42 27) 10] [(46 12 58 4) 4] [(28 77 73 95) 28] [(21 44 33 48) 21] [(87 32 39 58) 32] [(33 4 22 92) 4] [(21 51 84 17) 17] [(77 15 61 99) 15] [(83 2 64 5) 2] [(82 11 59 96) 11] [(53 92 27 81) 27] [(39 95 20 45) 20] [(90 60 97 87) 60] [(54 96 24 58) 24] [(89 63 25 83) 25] [(98 -60 -59 35) -60] [(71 40 22 55) 22] [(79 55 -84 86) -84] [(-50 -43 20 56) -50] [(-85 88 -50 -2) -85] [(-73 71 -2 -13) -73] [(-73 -49 71 78) -73] [(-47 -96 91 7) -96] [(94 -72 86 52) -72] [(-78 -80 33 23) -80] [(-41 -58 70 96) -58] [(31 43 8 -94) -94] [(20 -89 13 -54) -89] [(-38 7 91 -12) -38] [(-42 -76 22 17) -76] [(64 91 43 0) 0] [(-35 53 63 -98) -98] [(-70 -84 -77 -1) -84] [(50 99 -22 70) -22] [(-85 -15 92 22) -85] [(-97 -52 -56 -6) -97] [(-83 88 20 -34) -83] [(-17 35 12 79) -17] [(-70 40 -81 43) -81] [(36 -6 -4 -90) -90] [(87 -44 -36 -60) -60] [(10 -9 90 76) -9] [(8 35 45 -5) -5] [(58 -21 -53 -12) -53] [(42 -32 6 3) -32] [(-22 70 -84 -43) -84] [(56 -22 85 7) -22] [(55 1 99 30) 1] [(-4 -59 45 -3) -59] [(-35 -50 20 -21) -50] [(-60 60 -56 -64) -64] [(-92 75 -8 -24) -92] [(-82 62 -9 -91) -91] [(91 -36 -51 -55) -55] [(25 49 47 77) 25] [(-47 36 -4 78) -47] [(9 -32 -52 90) -52] [(48 -43 -34 -90) -90] [(97 83 90 -34) -34] [(85 -87 90 -90) -90] [(13 -65 50 -56) -65] [(-3 41 31 -26) -26] [(24 35 -37 -30) -37] [(-34 -46 17 2) -46] [(51 -16 11 0) -16] [(17 -42 -58 -35) -58] [(82 -32 -34 97) -34] [(30 58 -49 30) -49] [(91 -98 -36 18) -98] [(19 -22 97 12) -22] [(-67 1 69 28) -67] [(-45 9 -26 -4) -45] [(75 -58 8 65) -58] [(-22 25 12 76) -22] [(34 56 -15 -5) -15])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 69                 
Correct output: 0                   | Program output: 85                 
Correct output: 10                  | Program output: 42                 
Correct output: 4                   | Program output: 58                 
Correct output: 28                  | Program output: 73                 
Correct output: 21                  | Program output: 33                 
Correct output: 32                  | Program output: 39                 
Correct output: 4                   | Program output: 22                 
Correct output: 17                  | Program output: 84                 
Correct output: 15                  | Program output: 61                 
Correct output: 2                   | Program output: 64                 
Correct output: 11                  | Program output: 59                 
Correct output: 27                  | Program output: 27                 
Correct output: 20                  | Program output: 20                 
Correct output: 60                  | Program output: 97                 
Correct output: 24                  | Program output: 24                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: -59                
Correct output: 22                  | Program output: 22                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 20                 
Correct output: -85                 | Program output: -50                
Correct output: -73                 | Program output: -2                 
Correct output: -73                 | Program output: 71                 
Correct output: -96                 | Program output: 91                 
Correct output: -72                 | Program output: 86                 
Correct output: -80                 | Program output: 33                 
Correct output: -58                 | Program output: 70                 
Correct output: -94                 | Program output: 8                  
Correct output: -89                 | Program output: 13                 
Correct output: -38                 | Program output: 91                 
Correct output: -76                 | Program output: 22                 
Correct output: 0                   | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -84                 | Program output: -77                
Correct output: -22                 | Program output: -22                
Correct output: -85                 | Program output: 92                 
Correct output: -97                 | Program output: -56                
Correct output: -83                 | Program output: 20                 
Correct output: -17                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -4                 
Correct output: -60                 | Program output: -36                
Correct output: -9                  | Program output: 90                 
Correct output: -5                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 6                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 85                 
Correct output: 1                   | Program output: 99                 
Correct output: -59                 | Program output: 45                 
Correct output: -50                 | Program output: 20                 
Correct output: -64                 | Program output: -56                
Correct output: -92                 | Program output: -8                 
Correct output: -91                 | Program output: -9                 
Correct output: -55                 | Program output: -51                
Correct output: 25                  | Program output: 47                 
Correct output: -47                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -34                
Correct output: -34                 | Program output: 90                 
Correct output: -90                 | Program output: 90                 
Correct output: -65                 | Program output: 50                 
Correct output: -26                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -46                 | Program output: 17                 
Correct output: -16                 | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -34                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: -36                
Correct output: -22                 | Program output: 97                 
Correct output: -67                 | Program output: 69                 
Correct output: -45                 | Program output: -26                
Correct output: -58                 | Program output: 8                  
Correct output: -22                 | Program output: 12                 
Correct output: -15                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction -61} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_add exec_do*times (in4 exec_dup_items integer_eq exec_do*while (integer_dec) boolean_not exec_y (-61 integer_div integer_add exec_y_when_autoconstructing (exec_dup (boolean_dup boolean_not in3 boolean_xor boolean_rot) exec_dup (print_integer exec_if (integer_stackdepth) (exec_flush boolean_pop exec_dup (exec_s (integer_dec integer_div boolean_rot) () (integer_gt exec_eq integer_lt) integer_pop) exec_shove (boolean_stackdepth integer_flush integer_dup_items exec_y_when_autoconstructing (boolean_yank exec_noop) integer_shove integer_gt integer_add integer_dec boolean_dup) integer_max) boolean_pop exec_when (exec_do*range (exec_pop (print_newline exec_s_when_autoconstructing (exec_yank integer_dup_times boolean_dup_times) () (integer_lt) integer_stackdepth exec_s_when_autoconstructing (boolean_pop boolean_or exec_rot () () ()) () ()))))))))
Lexicase best errors: [0 0 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 89
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction -61} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_add exec_do*times (in4 exec_dup_items integer_eq exec_do*while (integer_dec) boolean_not exec_y (-61 integer_div integer_add exec_y_when_autoconstructing (exec_dup (boolean_dup boolean_not in3 boolean_xor boolean_rot) exec_dup (print_integer exec_if (integer_stackdepth) (exec_flush boolean_pop exec_dup (exec_s (integer_dec integer_div boolean_rot) () (integer_gt exec_eq integer_lt) integer_pop) exec_shove (boolean_stackdepth integer_flush integer_dup_items exec_y_when_autoconstructing (boolean_yank exec_noop) integer_shove integer_gt integer_add integer_dec boolean_dup) integer_max) boolean_pop exec_when (exec_do*range (exec_pop (print_newline exec_s_when_autoconstructing (exec_yank integer_dup_times boolean_dup_times) () (integer_lt) integer_stackdepth exec_s_when_autoconstructing (boolean_pop boolean_or exec_rot () () ()) () ()))))))))
Zero cases best errors: [0 0 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 89
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 4 2 12 2 3 4 7 3 2)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (4 4 2 12 2 3 4 7 3 2)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tag_integer_203} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction integer_gte})
Best program: (print_boolean exec_pop (boolean_flush) exec_stackdepth in3 print_integer integer_shove exec_noop exec_do*count (integer_add exec_y (boolean_eq exec_pop ()) integer_yank) boolean_yank integer_yank boolean_rot print_newline integer_shove boolean_dup_times integer_dup_items tag_integer_203 integer_gt exec_dup (boolean_eq boolean_swap) exec_while (integer_dec) integer_swap boolean_dup boolean_pop integer_stackdepth boolean_flush exec_do*range (boolean_invert_second_then_and exec_eq exec_shove (exec_k_when_autoconstructing (exec_dup () integer_shove) (integer_max) exec_shove (integer_gte integer_inc boolean_yank exec_s_when_autoconstructing () (integer_rot integer_yankdup exec_y_when_autoconstructing (exec_if () (integer_gte))) ()))))
Errors: [0 0 1 0 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 51
Size: 70
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 9.957
Median total errors in population: 10
Error averages by case: (0.996 0.996 0.998 0.988 0.998 0.997 0.996 0.993 0.997 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.021
Average program size in population (points): 69.139
Average percent parens in population: 0.283
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 486862
--- Timings ---
Current time: 1559314340649 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         0.9 seconds, 32.0%
Fitness Testing:      1.7 seconds, 63.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -46                 | Program output: -29                
Correct output: -77                 | Program output: -61                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: 34                 
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 95                 
Correct output: -81                 | Program output: 81                 
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: 47                 
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 61                 
Correct output: 1                   | Program output: 13                 
Correct output: 25                  | Program output: 70                 
Correct output: 38                  | Program output: 93                 
Correct output: 0                   | Program output: 77                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 12                 
Correct output: 28                  | Program output: 77                 
Correct output: 21                  | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 51                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 92                 
Correct output: 20                  | Program output: 95                 
Correct output: 60                  | Program output: 60                 
Correct output: 24                  | Program output: 96                 
Correct output: 25                  | Program output: 63                 
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 40                 
Correct output: -84                 | Program output: 55                 
Correct output: -50                 | Program output: -43                
Correct output: -85                 | Program output: 88                 
Correct output: -73                 | Program output: 71                 
Correct output: -73                 | Program output: -49                
Correct output: -96                 | Program output: -96                
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 43                 
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: 7                  
Correct output: -76                 | Program output: -76                
Correct output: 0                   | Program output: 91                 
Correct output: -98                 | Program output: 53                 
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 99                 
Correct output: -85                 | Program output: -15                
Correct output: -97                 | Program output: -52                
Correct output: -83                 | Program output: 88                 
Correct output: -17                 | Program output: 35                 
Correct output: -81                 | Program output: 40                 
Correct output: -90                 | Program output: -6                 
Correct output: -60                 | Program output: -44                
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: 35                 
Correct output: -53                 | Program output: -21                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: 70                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: -59                 | Program output: -59                
Correct output: -50                 | Program output: -50                
Correct output: -64                 | Program output: 60                 
Correct output: -92                 | Program output: 75                 
Correct output: -91                 | Program output: 62                 
Correct output: -55                 | Program output: -36                
Correct output: 25                  | Program output: 49                 
Correct output: -47                 | Program output: 36                 
Correct output: -52                 | Program output: -32                
Correct output: -90                 | Program output: -43                
Correct output: -34                 | Program output: 83                 
Correct output: -90                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -26                 | Program output: 41                 
Correct output: -37                 | Program output: 35                 
Correct output: -46                 | Program output: -46                
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -42                
Correct output: -34                 | Program output: -32                
Correct output: -49                 | Program output: 58                 
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -67                 | Program output: 1                  
Correct output: -45                 | Program output: 9                  
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: 25                 
Correct output: -15                 | Program output: 56                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_div} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4})
Lexicase best program: (in2 exec_swap (boolean_dup_times in4 integer_max) (boolean_flush boolean_rot integer_add integer_inc exec_swap (boolean_and) (integer_gte) integer_mult integer_div) integer_min in2 print_integer boolean_flush in4)
Lexicase best errors: [0 0 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_div} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4})
Zero cases best program: (in2 exec_swap (boolean_dup_times in4 integer_max) (boolean_flush boolean_rot integer_add integer_inc exec_swap (boolean_and) (integer_gte) integer_mult integer_div) integer_min in2 print_integer boolean_flush in4)
Zero cases best errors: [0 0 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 882 214 124 215 442 214 103 669 440)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (214 882 214 124 215 442 214 103 669 440)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_div} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4})
Best program: (in2 exec_swap (boolean_dup_times in4 integer_max) (boolean_flush boolean_rot integer_add integer_inc exec_swap (boolean_and) (integer_gte) integer_mult integer_div) integer_min in2 print_integer boolean_flush in4)
Errors: [0 0 0 1 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 19
Size: 24
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.483
Median total errors in population: 6
Error averages by case: (0.786 0.118 0.786 0.876 0.785 0.558 0.786 0.897 0.331 0.56)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.06
Average program size in population (points): 68.789
Average percent parens in population: 0.274
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.488
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.514
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.506
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 924627
--- Timings ---
Current time: 1559314343014 milliseconds
Total Time:           5.7 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.5 seconds, 43.4%
Fitness Testing:      2.2 seconds, 38.5%
Report:               0.9 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 69                 
Correct output: 0                   | Program output: 85                 
Correct output: 10                  | Program output: 42                 
Correct output: 4                   | Program output: 58                 
Correct output: 28                  | Program output: 73                 
Correct output: 21                  | Program output: 33                 
Correct output: 32                  | Program output: 39                 
Correct output: 4                   | Program output: 22                 
Correct output: 17                  | Program output: 84                 
Correct output: 15                  | Program output: 61                 
Correct output: 2                   | Program output: 64                 
Correct output: 11                  | Program output: 59                 
Correct output: 27                  | Program output: 27                 
Correct output: 20                  | Program output: 20                 
Correct output: 60                  | Program output: 97                 
Correct output: 24                  | Program output: 24                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: -59                
Correct output: 22                  | Program output: 22                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 20                 
Correct output: -85                 | Program output: -50                
Correct output: -73                 | Program output: -2                 
Correct output: -73                 | Program output: 71                 
Correct output: -96                 | Program output: 91                 
Correct output: -72                 | Program output: 86                 
Correct output: -80                 | Program output: 33                 
Correct output: -58                 | Program output: 70                 
Correct output: -94                 | Program output: 8                  
Correct output: -89                 | Program output: 13                 
Correct output: -38                 | Program output: 91                 
Correct output: -76                 | Program output: 22                 
Correct output: 0                   | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -84                 | Program output: -77                
Correct output: -22                 | Program output: -22                
Correct output: -85                 | Program output: 92                 
Correct output: -97                 | Program output: -56                
Correct output: -83                 | Program output: 20                 
Correct output: -17                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -4                 
Correct output: -60                 | Program output: -36                
Correct output: -9                  | Program output: 90                 
Correct output: -5                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 6                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 85                 
Correct output: 1                   | Program output: 99                 
Correct output: -59                 | Program output: 45                 
Correct output: -50                 | Program output: 20                 
Correct output: -64                 | Program output: -56                
Correct output: -92                 | Program output: -8                 
Correct output: -91                 | Program output: -9                 
Correct output: -55                 | Program output: -51                
Correct output: 25                  | Program output: 47                 
Correct output: -47                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -34                
Correct output: -34                 | Program output: 90                 
Correct output: -90                 | Program output: 90                 
Correct output: -65                 | Program output: 50                 
Correct output: -26                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -46                 | Program output: 17                 
Correct output: -16                 | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -34                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: -36                
Correct output: -22                 | Program output: 97                 
Correct output: -67                 | Program output: 69                 
Correct output: -45                 | Program output: -26                
Correct output: -58                 | Program output: 8                  
Correct output: -22                 | Program output: 12                 
Correct output: -15                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction -61} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_add exec_do*times (in4 exec_dup_items integer_eq exec_do*while (integer_dec) boolean_not exec_y (-61 integer_div integer_add exec_y_when_autoconstructing (exec_dup (boolean_dup boolean_not in3 boolean_xor boolean_rot) exec_dup (print_integer exec_if (integer_stackdepth) (exec_flush boolean_pop exec_dup (exec_s (integer_dec integer_div boolean_rot) () (integer_gt exec_eq integer_lt) integer_pop exec_shove (boolean_stackdepth integer_flush integer_dup_items exec_y_when_autoconstructing (boolean_yank exec_noop integer_shove integer_gt integer_add integer_dec boolean_dup) integer_max) boolean_pop exec_when (exec_do*range (exec_pop (print_newline exec_s_when_autoconstructing (exec_yank integer_dup_times boolean_dup_times) () (integer_lt) integer_stackdepth exec_s_when_autoconstructing (boolean_pop boolean_or exec_rot () () ()) () ()))))))))))
Lexicase best errors: [1 0 0 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 89
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction -61} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_add exec_do*times (in4 exec_dup_items integer_eq exec_do*while (integer_dec) boolean_not exec_y (-61 integer_div integer_add exec_y_when_autoconstructing (exec_dup (boolean_dup boolean_not in3 boolean_xor boolean_rot) exec_dup (print_integer exec_if (integer_stackdepth) (exec_flush boolean_pop exec_dup (exec_s (integer_dec integer_div boolean_rot) () (integer_gt exec_eq integer_lt) integer_pop exec_shove (boolean_stackdepth integer_flush integer_dup_items exec_y_when_autoconstructing (boolean_yank exec_noop integer_shove integer_gt integer_add integer_dec boolean_dup) integer_max) boolean_pop exec_when (exec_do*range (exec_pop (print_newline exec_s_when_autoconstructing (exec_yank integer_dup_times boolean_dup_times) () (integer_lt) integer_stackdepth exec_s_when_autoconstructing (boolean_pop boolean_or exec_rot () () ()) () ()))))))))))
Zero cases best errors: [1 0 0 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 89
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (123 233 232 403 232 134 123 489 133 403)
Population mean number of elite cases: 2.51
Count of perfect (error zero) individuals by case: (123 233 232 403 232 134 123 489 133 403)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tag_integer_203} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction integer_gte})
Best program: (print_boolean exec_pop (boolean_flush) exec_stackdepth in3 print_integer integer_shove exec_noop exec_do*count (integer_add exec_y (boolean_eq exec_pop ()) integer_yank) boolean_yank integer_yank boolean_rot print_newline integer_shove boolean_dup_times integer_dup_items tag_integer_203 integer_gt exec_dup (boolean_eq boolean_swap) exec_while (integer_dec) integer_swap boolean_dup boolean_pop integer_stackdepth boolean_flush exec_do*range (boolean_invert_second_then_and exec_eq exec_shove (exec_k_when_autoconstructing (exec_dup () integer_shove) (integer_max) exec_shove (integer_gte integer_inc boolean_yank exec_s_when_autoconstructing () (integer_rot integer_yankdup exec_y_when_autoconstructing (exec_if () (integer_gte))) ()))))
Errors: [1 0 0 1 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 51
Size: 70
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 7.495
Median total errors in population: 8
Error averages by case: (0.877 0.767 0.768 0.597 0.768 0.866 0.877 0.511 0.867 0.597)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.658
Average program size in population (points): 49.959
Average percent parens in population: 0.260
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.978
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 161
Genome diversity (% unique genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 162
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1246517
--- Timings ---
Current time: 1559314346086 milliseconds
Total Time:           8.3 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.5 seconds, 53.9%
Fitness Testing:      2.5 seconds, 30.4%
Report:               1.2 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -46                 | Program output: -29                
Correct output: -77                 | Program output: -61                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: 34                 
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 95                 
Correct output: -81                 | Program output: 81                 
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: 47                 
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 61                 
Correct output: 1                   | Program output: 13                 
Correct output: 25                  | Program output: 70                 
Correct output: 38                  | Program output: 93                 
Correct output: 0                   | Program output: 77                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 12                 
Correct output: 28                  | Program output: 77                 
Correct output: 21                  | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 51                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 92                 
Correct output: 20                  | Program output: 95                 
Correct output: 60                  | Program output: 60                 
Correct output: 24                  | Program output: 96                 
Correct output: 25                  | Program output: 63                 
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 40                 
Correct output: -84                 | Program output: 55                 
Correct output: -50                 | Program output: -43                
Correct output: -85                 | Program output: 88                 
Correct output: -73                 | Program output: 71                 
Correct output: -73                 | Program output: -49                
Correct output: -96                 | Program output: -96                
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 43                 
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: 7                  
Correct output: -76                 | Program output: -76                
Correct output: 0                   | Program output: 91                 
Correct output: -98                 | Program output: 53                 
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 99                 
Correct output: -85                 | Program output: -15                
Correct output: -97                 | Program output: -52                
Correct output: -83                 | Program output: 88                 
Correct output: -17                 | Program output: 35                 
Correct output: -81                 | Program output: 40                 
Correct output: -90                 | Program output: -6                 
Correct output: -60                 | Program output: -44                
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: 35                 
Correct output: -53                 | Program output: -21                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: 70                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: -59                 | Program output: -59                
Correct output: -50                 | Program output: -50                
Correct output: -64                 | Program output: 60                 
Correct output: -92                 | Program output: 75                 
Correct output: -91                 | Program output: 62                 
Correct output: -55                 | Program output: -36                
Correct output: 25                  | Program output: 49                 
Correct output: -47                 | Program output: 36                 
Correct output: -52                 | Program output: -32                
Correct output: -90                 | Program output: -43                
Correct output: -34                 | Program output: 83                 
Correct output: -90                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -26                 | Program output: 41                 
Correct output: -37                 | Program output: 35                 
Correct output: -46                 | Program output: -46                
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -42                
Correct output: -34                 | Program output: -32                
Correct output: -49                 | Program output: 58                 
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -67                 | Program output: 1                  
Correct output: -45                 | Program output: 9                  
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: 25                 
Correct output: -15                 | Program output: 56                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction tagged_102} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer})
Lexicase best program: (integer_flush exec_rot () (exec_y_when_autoconstructing (exec_noop exec_yankdup integer_rot in3 in2 boolean_empty) tagged_102 boolean_swap print_integer) ())
Lexicase best errors: [1 1 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 17
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction tagged_102} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer})
Zero cases best program: (integer_flush exec_rot () (exec_y_when_autoconstructing (exec_noop exec_yankdup integer_rot in3 in2 boolean_empty) tagged_102 boolean_swap print_integer) ())
Zero cases best errors: [1 1 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 17
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (169 326 326 182 182 171 181 203 326 182)
Population mean number of elite cases: 2.25
Count of perfect (error zero) individuals by case: (169 326 326 182 182 171 181 203 326 182)
Population mean number of perfect (error zero) cases: 2.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction tagged_102} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer})
Best program: (integer_flush exec_rot () (exec_y_when_autoconstructing (exec_noop exec_yankdup integer_rot in3 in2 boolean_empty) tagged_102 boolean_swap print_integer) ())
Errors: [1 1 1 0 0 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 12
Size: 17
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.752
Median total errors in population: 7
Error averages by case: (0.831 0.674 0.674 0.818 0.818 0.829 0.819 0.797 0.674 0.818)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.119
Average program size in population (points): 60.663
Average percent parens in population: 0.264
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.43125
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1630596
--- Timings ---
Current time: 1559314349052 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.9 seconds, 58.2%
Fitness Testing:      2.9 seconds, 24.6%
Report:               1.9 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 69                 
Correct output: 0                   | Program output: 85                 
Correct output: 10                  | Program output: 42                 
Correct output: 4                   | Program output: 58                 
Correct output: 28                  | Program output: 73                 
Correct output: 21                  | Program output: 33                 
Correct output: 32                  | Program output: 39                 
Correct output: 4                   | Program output: 22                 
Correct output: 17                  | Program output: 84                 
Correct output: 15                  | Program output: 61                 
Correct output: 2                   | Program output:                    
Correct output: 11                  | Program output: 59                 
Correct output: 27                  | Program output: 27                 
Correct output: 20                  | Program output: 20                 
Correct output: 60                  | Program output: 97                 
Correct output: 24                  | Program output: 24                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: -59                
Correct output: 22                  | Program output: 22                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 20                 
Correct output: -85                 | Program output: -50                
Correct output: -73                 | Program output: -2                 
Correct output: -73                 | Program output: 71                 
Correct output: -96                 | Program output: 91                 
Correct output: -72                 | Program output: 86                 
Correct output: -80                 | Program output: 33                 
Correct output: -58                 | Program output: 70                 
Correct output: -94                 | Program output: 8                  
Correct output: -89                 | Program output: 13                 
Correct output: -38                 | Program output: 91                 
Correct output: -76                 | Program output: 22                 
Correct output: 0                   | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -84                 | Program output: -77                
Correct output: -22                 | Program output: -22                
Correct output: -85                 | Program output: 92                 
Correct output: -97                 | Program output: -56                
Correct output: -83                 | Program output: 20                 
Correct output: -17                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -4                 
Correct output: -60                 | Program output: -36                
Correct output: -9                  | Program output: 90                 
Correct output: -5                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 6                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 85                 
Correct output: 1                   | Program output: 99                 
Correct output: -59                 | Program output: 45                 
Correct output: -50                 | Program output: 20                 
Correct output: -64                 | Program output: -56                
Correct output: -92                 | Program output: -8                 
Correct output: -91                 | Program output: -9                 
Correct output: -55                 | Program output: -51                
Correct output: 25                  | Program output: 47                 
Correct output: -47                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -34                
Correct output: -34                 | Program output: 90                 
Correct output: -90                 | Program output: 90                 
Correct output: -65                 | Program output: 50                 
Correct output: -26                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -46                 | Program output: 17                 
Correct output: -16                 | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -34                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: -36                
Correct output: -22                 | Program output: 97                 
Correct output: -67                 | Program output: 69                 
Correct output: -45                 | Program output: -26                
Correct output: -58                 | Program output: 8                  
Correct output: -22                 | Program output: 12                 
Correct output: -15                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_integer_203} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction integer_gte})
Lexicase best program: (print_boolean exec_pop (boolean_flush) exec_stackdepth in3 print_integer integer_shove exec_noop exec_do*count (integer_add exec_y (boolean_eq exec_pop ()) integer_yank boolean_yank integer_yank boolean_rot print_newline integer_shove) boolean_dup_times integer_gt tag_integer_203 integer_gt exec_dup (boolean_eq boolean_swap) exec_while (integer_dec integer_swap boolean_dup boolean_pop integer_stackdepth) boolean_flush exec_do*range (boolean_invert_second_then_and exec_eq exec_shove (exec_k_when_autoconstructing (exec_dup () integer_shove) (integer_max) exec_shove (integer_gte integer_inc boolean_yank exec_s_when_autoconstructing () (integer_rot integer_yankdup exec_y_when_autoconstructing (exec_if () (integer_gte))) ()))))
Lexicase best errors: [1 1 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 70
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_integer_203} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction integer_gte})
Zero cases best program: (print_boolean exec_pop (boolean_flush) exec_stackdepth in3 print_integer integer_shove exec_noop exec_do*count (integer_add exec_y (boolean_eq exec_pop ()) integer_yank boolean_yank integer_yank boolean_rot print_newline integer_shove) boolean_dup_times integer_gt tag_integer_203 integer_gt exec_dup (boolean_eq boolean_swap) exec_while (integer_dec integer_swap boolean_dup boolean_pop integer_stackdepth) boolean_flush exec_do*range (boolean_invert_second_then_and exec_eq exec_shove (exec_k_when_autoconstructing (exec_dup () integer_shove) (integer_max) exec_shove (integer_gte integer_inc boolean_yank exec_s_when_autoconstructing () (integer_rot integer_yankdup exec_y_when_autoconstructing (exec_if () (integer_gte))) ()))))
Zero cases best errors: [1 1 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 70
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (99 352 275 276 172 354 172 276 355 99)
Population mean number of elite cases: 2.43
Count of perfect (error zero) individuals by case: (99 352 275 276 172 354 172 276 355 99)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction -61} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot})
Best program: (integer_add exec_do*times (in4 exec_dup_items integer_eq exec_do*while (integer_dec) boolean_not exec_y (-61 integer_div integer_add exec_y_when_autoconstructing (exec_dup (boolean_dup boolean_not in3 boolean_xor boolean_rot) exec_dup (print_integer exec_if (integer_stackdepth) (exec_flush boolean_pop exec_dup (exec_s (integer_dec integer_div boolean_rot) () (integer_gt exec_eq integer_lt) integer_pop) exec_shove (boolean_stackdepth integer_flush integer_dup_items exec_y_when_autoconstructing (boolean_yank exec_noop) integer_shove integer_gt integer_add integer_dec boolean_dup) integer_max) boolean_pop exec_when (exec_do*range (exec_pop (print_newline exec_s_when_autoconstructing (exec_yank integer_dup_times boolean_dup_times) () (integer_lt) integer_stackdepth exec_s_when_autoconstructing (boolean_pop boolean_or exec_rot () () ()) () ()))))))))
Errors: [1 1 0 0 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 62
Size: 89
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 7.57
Median total errors in population: 7
Error averages by case: (0.901 0.648 0.725 0.724 0.828 0.646 0.828 0.724 0.645 0.901)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.78
Average program size in population (points): 50.236
Average percent parens in population: 0.265
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.928
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.004
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1981432
--- Timings ---
Current time: 1559314351806 milliseconds
Total Time:          14.5 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         9.0 seconds, 62.2%
Fitness Testing:      3.2 seconds, 22.3%
Report:               2.1 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -61                
Correct output: 37                  | Program output: 37                 
Correct output: -82                 | Program output: 34                 
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -41                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: 81                 
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: 47                 
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 0                   | Program output: 75                 
Correct output: 10                  | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 95                 
Correct output: 21                  | Program output: 48                 
Correct output: 32                  | Program output: 58                 
Correct output: 4                   | Program output: 92                 
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 99                 
Correct output: 2                   | Program output: 5                  
Correct output: 11                  | Program output: 96                 
Correct output: 27                  | Program output: 81                 
Correct output: 20                  | Program output: 45                 
Correct output: 60                  | Program output: 87                 
Correct output: 24                  | Program output: 58                 
Correct output: 25                  | Program output: 83                 
Correct output: -60                 | Program output: 35                 
Correct output: 22                  | Program output: 55                 
Correct output: -84                 | Program output: 86                 
Correct output: -50                 | Program output: 56                 
Correct output: -85                 | Program output: -2                 
Correct output: -73                 | Program output: -13                
Correct output: -73                 | Program output: 78                 
Correct output: -96                 | Program output: 7                  
Correct output: -72                 | Program output: 52                 
Correct output: -80                 | Program output: 23                 
Correct output: -58                 | Program output: 96                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -54                
Correct output: -38                 | Program output: -12                
Correct output: -76                 | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -1                 
Correct output: -22                 | Program output: 70                 
Correct output: -85                 | Program output: 22                 
Correct output: -97                 | Program output: -6                 
Correct output: -83                 | Program output: -34                
Correct output: -17                 | Program output: 79                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -60                
Correct output: -9                  | Program output: 76                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -12                
Correct output: -32                 | Program output: 3                  
Correct output: -84                 | Program output: -43                
Correct output: -22                 | Program output: 7                  
Correct output: 1                   | Program output: 30                 
Correct output: -59                 | Program output: -3                 
Correct output: -50                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -24                
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: 25                  | Program output: 77                 
Correct output: -47                 | Program output: 78                 
Correct output: -52                 | Program output: 90                 
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -30                
Correct output: -46                 | Program output: 2                  
Correct output: -16                 | Program output: 0                  
Correct output: -58                 | Program output: -35                
Correct output: -34                 | Program output: 97                 
Correct output: -49                 | Program output: 30                 
Correct output: -98                 | Program output: 18                 
Correct output: -22                 | Program output: 12                 
Correct output: -67                 | Program output: 28                 
Correct output: -45                 | Program output: -4                 
Correct output: -58                 | Program output: 65                 
Correct output: -22                 | Program output: 76                 
Correct output: -15                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 1, :instruction -40} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction -35} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_empty})
Lexicase best program: (integer_div exec_s_when_autoconstructing (boolean_empty exec_y_when_autoconstructing (integer_dec integer_inc) integer_dup_items boolean_flush integer_add exec_rot (exec_dup_times () in1 boolean_swap) (exec_s_when_autoconstructing (integer_swap boolean_yank integer_fromboolean integer_yank integer_lt print_integer) (-40) (exec_if (boolean_dup integer_eq in2 integer_stackdepth integer_yank integer_dec boolean_rot integer_add -35 integer_dup_items exec_yankdup integer_dup_items) (boolean_empty))) ()) () ())
Lexicase best errors: [0 1 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 1, :instruction -40} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction -35} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_empty})
Zero cases best program: (integer_div exec_s_when_autoconstructing (boolean_empty exec_y_when_autoconstructing (integer_dec integer_inc) integer_dup_items boolean_flush integer_add exec_rot (exec_dup_times () in1 boolean_swap) (exec_s_when_autoconstructing (integer_swap boolean_yank integer_fromboolean integer_yank integer_lt print_integer) (-40) (exec_if (boolean_dup integer_eq in2 integer_stackdepth integer_yank integer_dec boolean_rot integer_add -35 integer_dup_items exec_yankdup integer_dup_items) (boolean_empty))) ()) () ())
Zero cases best errors: [0 1 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (172 263 172 165 623 264 165 165 172 265)
Population mean number of elite cases: 2.43
Count of perfect (error zero) individuals by case: (172 263 172 165 623 264 165 165 172 265)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_466} {:close 0, :instruction integer_shove} {:close 1, :instruction in4} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_713} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_591} {:close 0, :instruction integer_eq})
Best program: (in4 boolean_not boolean_not exec_if () (print_integer integer_mod integer_min) boolean_yank exec_dup_times (integer_max exec_flush) exec_noop integer_yank integer_mod exec_dup (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq tag_exec_466 () integer_shove in4) integer_lt boolean_or) (integer_yank integer_eq integer_dup integer_div integer_lt) (integer_yank exec_s (integer_dup_items boolean_xor) (exec_shove (exec_do*count (tagged_713 exec_shove (exec_do*count (boolean_empty boolean_frominteger exec_noop) boolean_flush) boolean_dup_items boolean_eq integer_fromboolean boolean_dup exec_dup_times (integer_gt boolean_shove boolean_frominteger integer_lt integer_add integer_empty integer_sub tag_boolean_591) integer_eq))) ()))))
Errors: [1 1 1 0 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 58
Size: 77
Percent parens: 0.247
--- Population Statistics ---
Average total errors in population: 7.574
Median total errors in population: 7
Error averages by case: (0.828 0.737 0.828 0.835 0.377 0.736 0.835 0.835 0.828 0.735)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.9
Average program size in population (points): 50.13
Average percent parens in population: 0.262
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.42425
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2341645
--- Timings ---
Current time: 1559314354668 milliseconds
Total Time:          17.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.4 seconds, 65.1%
Fitness Testing:      3.5 seconds, 20.3%
Report:               2.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -61                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: 34                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: 81                 
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: 47                 
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 26                 
Correct output: 1                   | Program output: 98                 
Correct output: 25                  | Program output: 44                 
Correct output: 38                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 40                 
Correct output: 4                   | Program output: 46                 
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 87                 
Correct output: 4                   | Program output: 33                 
Correct output: 17                  | Program output: 21                 
Correct output: 15                  | Program output: 77                 
Correct output: 2                   | Program output: 83                 
Correct output: 11                  | Program output: 82                 
Correct output: 27                  | Program output: 53                 
Correct output: 20                  | Program output: 39                 
Correct output: 60                  | Program output: 90                 
Correct output: 24                  | Program output: 54                 
Correct output: 25                  | Program output: 89                 
Correct output: -60                 | Program output: 98                 
Correct output: 22                  | Program output: 71                 
Correct output: -84                 | Program output: 79                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -47                
Correct output: -72                 | Program output: 94                 
Correct output: -80                 | Program output: -78                
Correct output: -58                 | Program output: -41                
Correct output: -94                 | Program output: 31                 
Correct output: -89                 | Program output: 20                 
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: -42                
Correct output: 0                   | Program output: 64                 
Correct output: -98                 | Program output: -35                
Correct output: -84                 | Program output: -70                
Correct output: -22                 | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -81                 | Program output: -70                
Correct output: -90                 | Program output: 36                 
Correct output: -60                 | Program output: 87                 
Correct output: -9                  | Program output: 10                 
Correct output: -5                  | Program output: 8                  
Correct output: -53                 | Program output: 58                 
Correct output: -32                 | Program output: 42                 
Correct output: -84                 | Program output: -22                
Correct output: -22                 | Program output: 56                 
Correct output: 1                   | Program output: 55                 
Correct output: -59                 | Program output: -4                 
Correct output: -50                 | Program output: -35                
Correct output: -64                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -82                
Correct output: -55                 | Program output: 91                 
Correct output: 25                  | Program output: 25                 
Correct output: -47                 | Program output: -47                
Correct output: -52                 | Program output: 9                  
Correct output: -90                 | Program output: 48                 
Correct output: -34                 | Program output: 97                 
Correct output: -90                 | Program output: 85                 
Correct output: -65                 | Program output: 13                 
Correct output: -26                 | Program output: -3                 
Correct output: -37                 | Program output: 24                 
Correct output: -46                 | Program output: -34                
Correct output: -16                 | Program output: 51                 
Correct output: -58                 | Program output: 17                 
Correct output: -34                 | Program output: 82                 
Correct output: -49                 | Program output: 30                 
Correct output: -98                 | Program output: 91                 
Correct output: -22                 | Program output: 19                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -58                 | Program output: 75                 
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 1, :instruction -40} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction -35} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction tag_exec_542} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 1, :instruction print_exec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y})
Lexicase best program: (integer_stackdepth boolean_swap boolean_stackdepth integer_div exec_s_when_autoconstructing (integer_add exec_rot (exec_dup_times () in1 integer_empty) (exec_s_when_autoconstructing (integer_swap integer_yank integer_lt print_integer) (-40) (exec_if (boolean_dup integer_eq in2 integer_stackdepth integer_yank integer_dec boolean_rot integer_add -35 integer_dup_items exec_yankdup integer_dup_items) (boolean_empty) exec_y_when_autoconstructing (in4 tag_exec_542 (exec_noop integer_rot) exec_when (integer_eq exec_k () (integer_dup_times integer_gte boolean_pop exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth) integer_mod boolean_yank integer_mult exec_when () print_integer exec_s () (integer_mod print_exec () exec_dup_times (integer_swap exec_y ())) ()))))) ()) () ())
Lexicase best errors: [0 1 1 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 83
Percent parens: 0.337
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 1, :instruction -40} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction -35} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction tag_exec_542} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 1, :instruction print_exec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y})
Zero cases best program: (integer_stackdepth boolean_swap boolean_stackdepth integer_div exec_s_when_autoconstructing (integer_add exec_rot (exec_dup_times () in1 integer_empty) (exec_s_when_autoconstructing (integer_swap integer_yank integer_lt print_integer) (-40) (exec_if (boolean_dup integer_eq in2 integer_stackdepth integer_yank integer_dec boolean_rot integer_add -35 integer_dup_items exec_yankdup integer_dup_items) (boolean_empty) exec_y_when_autoconstructing (in4 tag_exec_542 (exec_noop integer_rot) exec_when (integer_eq exec_k () (integer_dup_times integer_gte boolean_pop exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth) integer_mod boolean_yank integer_mult exec_when () print_integer exec_s () (integer_mod print_exec () exec_dup_times (integer_swap exec_y ())) ()))))) ()) () ())
Zero cases best errors: [0 1 1 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 83
Percent parens: 0.337
--- Lexicase Population Statistics ---
Count of elite individuals by case: (323 1 331 259 258 322 323 322 332 259)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (323 1 331 259 258 322 323 322 332 259)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_591} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot})
Best program: (exec_eq boolean_swap print_exec (integer_add exec_dup (exec_do*range (integer_gt print_integer) boolean_dup_times integer_mult integer_pop in1 boolean_and boolean_or)) integer_inc tagged_591 boolean_empty integer_rot)
Errors: [0 1 1 1 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 18
Size: 22
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 7.27
Median total errors in population: 7
Error averages by case: (0.677 0.999 0.669 0.741 0.742 0.678 0.677 0.678 0.668 0.741)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.28
Average program size in population (points): 44.304
Average percent parens in population: 0.248
Minimum age in population: 6.0
Maximum age in population: 10.8125
Average age in population: 8.90078125
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2579432
--- Timings ---
Current time: 1559314357504 milliseconds
Total Time:          20.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        13.7 seconds, 67.9%
Fitness Testing:      3.8 seconds, 18.6%
Report:               2.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -46                 | Program output: -29                
Correct output: -77                 | Program output: -61                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: 34                 
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 95                 
Correct output: -81                 | Program output: 81                 
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: 47                 
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 61                 
Correct output: 1                   | Program output: 13                 
Correct output: 25                  | Program output: 70                 
Correct output: 38                  | Program output: 93                 
Correct output: 0                   | Program output: 77                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 12                 
Correct output: 28                  | Program output: 77                 
Correct output: 21                  | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 51                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 92                 
Correct output: 20                  | Program output: 95                 
Correct output: 60                  | Program output: 60                 
Correct output: 24                  | Program output: 96                 
Correct output: 25                  | Program output: 63                 
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 40                 
Correct output: -84                 | Program output: 55                 
Correct output: -50                 | Program output: -43                
Correct output: -85                 | Program output: 88                 
Correct output: -73                 | Program output: 71                 
Correct output: -73                 | Program output: -49                
Correct output: -96                 | Program output: -96                
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 43                 
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: 7                  
Correct output: -76                 | Program output: -76                
Correct output: 0                   | Program output: 91                 
Correct output: -98                 | Program output: 53                 
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 99                 
Correct output: -85                 | Program output: -15                
Correct output: -97                 | Program output: -52                
Correct output: -83                 | Program output: 88                 
Correct output: -17                 | Program output: 35                 
Correct output: -81                 | Program output: 40                 
Correct output: -90                 | Program output: -6                 
Correct output: -60                 | Program output: -44                
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: 35                 
Correct output: -53                 | Program output: -21                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: 70                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: -59                 | Program output: -59                
Correct output: -50                 | Program output: -50                
Correct output: -64                 | Program output: 60                 
Correct output: -92                 | Program output: 75                 
Correct output: -91                 | Program output: 62                 
Correct output: -55                 | Program output: -36                
Correct output: 25                  | Program output: 49                 
Correct output: -47                 | Program output: 36                 
Correct output: -52                 | Program output: -32                
Correct output: -90                 | Program output: -43                
Correct output: -34                 | Program output: 83                 
Correct output: -90                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -26                 | Program output: 41                 
Correct output: -37                 | Program output: 35                 
Correct output: -46                 | Program output: -46                
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -42                
Correct output: -34                 | Program output: -32                
Correct output: -49                 | Program output: 58                 
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -67                 | Program output: 1                  
Correct output: -45                 | Program output: 9                  
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: 25                 
Correct output: -15                 | Program output: 56                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_div} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction in4})
Lexicase best program: (boolean_and exec_swap (boolean_dup_times integer_max integer_max) (boolean_flush boolean_rot integer_add integer_inc exec_swap (boolean_and) (integer_gte) integer_mult integer_div) integer_min in2 print_integer exec_dup (in4))
Lexicase best errors: [0 0 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_div} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction in4})
Zero cases best program: (boolean_and exec_swap (boolean_dup_times integer_max integer_max) (boolean_flush boolean_rot integer_add integer_inc exec_swap (boolean_and) (integer_gte) integer_mult integer_div) integer_min in2 print_integer exec_dup (in4))
Zero cases best errors: [0 0 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (293 295 294 294 295 185 336 338 88 337)
Population mean number of elite cases: 2.76
Count of perfect (error zero) individuals by case: (293 295 294 294 295 185 336 338 88 337)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction tagged_102} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer})
Best program: (integer_flush exec_rot () (exec_y_when_autoconstructing (exec_noop exec_yankdup integer_rot in3 in2 boolean_empty) tagged_102 boolean_swap print_integer) ())
Errors: [0 0 0 0 0 1 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 12
Size: 17
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.245
Median total errors in population: 7
Error averages by case: (0.707 0.705 0.706 0.706 0.705 0.815 0.664 0.662 0.912 0.663)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.132
Average program size in population (points): 40.254
Average percent parens in population: 0.257
Minimum age in population: 7.0
Maximum age in population: 12.234375
Average age in population: 10.362109375
Median age in population: 10.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2809975
--- Timings ---
Current time: 1559314359930 milliseconds
Total Time:          22.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.8 seconds, 69.4%
Fitness Testing:      4.0 seconds, 17.6%
Report:               2.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 69                 
Correct output: 0                   | Program output: 85                 
Correct output: 10                  | Program output: 42                 
Correct output: 4                   | Program output: 58                 
Correct output: 28                  | Program output: 73                 
Correct output: 21                  | Program output: 33                 
Correct output: 32                  | Program output: 39                 
Correct output: 4                   | Program output: 22                 
Correct output: 17                  | Program output: 84                 
Correct output: 15                  | Program output: 61                 
Correct output: 2                   | Program output: 64                 
Correct output: 11                  | Program output: 59                 
Correct output: 27                  | Program output: 27                 
Correct output: 20                  | Program output: 20                 
Correct output: 60                  | Program output: 97                 
Correct output: 24                  | Program output: 24                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: -59                
Correct output: 22                  | Program output: 22                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 20                 
Correct output: -85                 | Program output: -50                
Correct output: -73                 | Program output: -2                 
Correct output: -73                 | Program output: 71                 
Correct output: -96                 | Program output: 91                 
Correct output: -72                 | Program output: 86                 
Correct output: -80                 | Program output: 33                 
Correct output: -58                 | Program output: 70                 
Correct output: -94                 | Program output: 8                  
Correct output: -89                 | Program output: 13                 
Correct output: -38                 | Program output: 91                 
Correct output: -76                 | Program output: 22                 
Correct output: 0                   | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -84                 | Program output: -77                
Correct output: -22                 | Program output: -22                
Correct output: -85                 | Program output: 92                 
Correct output: -97                 | Program output: -56                
Correct output: -83                 | Program output: 20                 
Correct output: -17                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -4                 
Correct output: -60                 | Program output: -36                
Correct output: -9                  | Program output: 90                 
Correct output: -5                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 6                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 85                 
Correct output: 1                   | Program output: 99                 
Correct output: -59                 | Program output: 45                 
Correct output: -50                 | Program output: 20                 
Correct output: -64                 | Program output: -56                
Correct output: -92                 | Program output: -8                 
Correct output: -91                 | Program output: -9                 
Correct output: -55                 | Program output: -51                
Correct output: 25                  | Program output: 47                 
Correct output: -47                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -34                
Correct output: -34                 | Program output: 90                 
Correct output: -90                 | Program output: 90                 
Correct output: -65                 | Program output: 50                 
Correct output: -26                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -46                 | Program output: 17                 
Correct output: -16                 | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -34                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: -36                
Correct output: -22                 | Program output: 97                 
Correct output: -67                 | Program output: 69                 
Correct output: -45                 | Program output: -26                
Correct output: -58                 | Program output: 8                  
Correct output: -22                 | Program output: 12                 
Correct output: -15                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Lexicase best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Lexicase best errors: [0 1 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Zero cases best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Zero cases best errors: [0 1 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (918 74 259 89 424 89 494 914 89 75)
Population mean number of elite cases: 3.42
Count of perfect (error zero) individuals by case: (918 74 259 89 424 89 494 914 89 75)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc})
Best program: (integer_flush exec_rot () (exec_y_when_autoconstructing (exec_noop in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min) boolean_yank boolean_pop integer_max exec_flush) (exec_noop boolean_eq integer_div) exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (integer_inc)) () ())) () ())
Errors: [0 1 1 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 25
Size: 39
Percent parens: 0.359
--- Population Statistics ---
Average total errors in population: 6.575
Median total errors in population: 7
Error averages by case: (0.082 0.926 0.741 0.911 0.576 0.911 0.506 0.086 0.911 0.925)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.102
Average program size in population (points): 33.167
Average percent parens in population: 0.257
Minimum age in population: 9.0
Maximum age in population: 13.953125
Average age in population: 11.8519609375
Median age in population: 11.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3031040
--- Timings ---
Current time: 1559314362386 milliseconds
Total Time:          25.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.8 seconds, 70.7%
Fitness Testing:      4.2 seconds, 16.8%
Report:               3.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -61                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: 34                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: 81                 
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: 47                 
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 26                 
Correct output: 1                   | Program output: 98                 
Correct output: 25                  | Program output: 44                 
Correct output: 38                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 40                 
Correct output: 4                   | Program output: 46                 
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 87                 
Correct output: 4                   | Program output: 33                 
Correct output: 17                  | Program output: 21                 
Correct output: 15                  | Program output: 77                 
Correct output: 2                   | Program output: 83                 
Correct output: 11                  | Program output: 82                 
Correct output: 27                  | Program output: 53                 
Correct output: 20                  | Program output: 39                 
Correct output: 60                  | Program output: 90                 
Correct output: 24                  | Program output: 54                 
Correct output: 25                  | Program output: 89                 
Correct output: -60                 | Program output: 98                 
Correct output: 22                  | Program output: 71                 
Correct output: -84                 | Program output: 79                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -47                
Correct output: -72                 | Program output: 94                 
Correct output: -80                 | Program output: -78                
Correct output: -58                 | Program output: -41                
Correct output: -94                 | Program output: 31                 
Correct output: -89                 | Program output: 20                 
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: -42                
Correct output: 0                   | Program output: 64                 
Correct output: -98                 | Program output: -35                
Correct output: -84                 | Program output: -70                
Correct output: -22                 | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -81                 | Program output: -70                
Correct output: -90                 | Program output: 36                 
Correct output: -60                 | Program output: 87                 
Correct output: -9                  | Program output: 10                 
Correct output: -5                  | Program output: 8                  
Correct output: -53                 | Program output: 58                 
Correct output: -32                 | Program output: 42                 
Correct output: -84                 | Program output: -22                
Correct output: -22                 | Program output: 56                 
Correct output: 1                   | Program output: 55                 
Correct output: -59                 | Program output: -4                 
Correct output: -50                 | Program output: -35                
Correct output: -64                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -82                
Correct output: -55                 | Program output: 91                 
Correct output: 25                  | Program output: 25                 
Correct output: -47                 | Program output: -47                
Correct output: -52                 | Program output: 9                  
Correct output: -90                 | Program output: 48                 
Correct output: -34                 | Program output: 97                 
Correct output: -90                 | Program output: 85                 
Correct output: -65                 | Program output: 13                 
Correct output: -26                 | Program output: -3                 
Correct output: -37                 | Program output: 24                 
Correct output: -46                 | Program output: -34                
Correct output: -16                 | Program output: 51                 
Correct output: -58                 | Program output: 17                 
Correct output: -34                 | Program output: 82                 
Correct output: -49                 | Program output: 30                 
Correct output: -98                 | Program output: 91                 
Correct output: -22                 | Program output: 19                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -58                 | Program output: 75                 
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 1, :instruction -40} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_stackdepth boolean_swap boolean_stackdepth integer_div exec_s_when_autoconstructing (integer_dup_times exec_y_when_autoconstructing (integer_dec integer_inc) integer_dup_items boolean_flush integer_add integer_gte exec_dup_times () in1 boolean_swap) (exec_s_when_autoconstructing (integer_swap boolean_yank integer_empty integer_yank integer_lt print_integer) (-40) (exec_if (boolean_dup exec_s (integer_dec integer_div boolean_rot) () (integer_gt exec_eq integer_lt) integer_pop) (exec_shove (boolean_stackdepth integer_flush)))) ())
Lexicase best errors: [0 0 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 1, :instruction -40} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_stackdepth boolean_swap boolean_stackdepth integer_div exec_s_when_autoconstructing (integer_dup_times exec_y_when_autoconstructing (integer_dec integer_inc) integer_dup_items boolean_flush integer_add integer_gte exec_dup_times () in1 boolean_swap) (exec_s_when_autoconstructing (integer_swap boolean_yank integer_empty integer_yank integer_lt print_integer) (-40) (exec_if (boolean_dup exec_s (integer_dec integer_div boolean_rot) () (integer_gt exec_eq integer_lt) integer_pop) (exec_shove (boolean_stackdepth integer_flush)))) ())
Zero cases best errors: [0 0 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (146 146 269 125 902 146 125 360 269 903)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (146 146 269 125 902 146 125 360 269 903)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 0, :instruction -40} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction -35} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items})
Best program: (integer_stackdepth boolean_swap boolean_stackdepth integer_div exec_s_when_autoconstructing (integer_dup_times exec_y_when_autoconstructing (integer_dec integer_inc)) (integer_dup_items boolean_flush integer_add exec_rot (exec_dup_times (in1 boolean_swap) exec_s_when_autoconstructing (integer_swap boolean_yank integer_fromboolean integer_yank integer_lt print_integer) (-40 exec_if (boolean_dup integer_eq boolean_and integer_stackdepth integer_yank integer_dec boolean_rot integer_add -35 integer_dup_items boolean_and integer_gte boolean_empty exec_y_when_autoconstructing (in4 boolean_dup_items)) ()) ()) () ()) ())
Errors: [0 0 1 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 41
Size: 56
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 6.609
Median total errors in population: 6
Error averages by case: (0.854 0.854 0.731 0.875 0.098 0.854 0.875 0.64 0.731 0.097)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.66
Average program size in population (points): 37.521
Average percent parens in population: 0.276
Minimum age in population: 10.5
Maximum age in population: 15.22265625
Average age in population: 13.4869765625
Median age in population: 13.55078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3205083
--- Timings ---
Current time: 1559314364747 milliseconds
Total Time:          27.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.7 seconds, 71.8%
Fitness Testing:      4.4 seconds, 16.1%
Report:               3.2 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -61                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: 34                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: 81                 
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: 47                 
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 26                 
Correct output: 1                   | Program output: 98                 
Correct output: 25                  | Program output: 44                 
Correct output: 38                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 40                 
Correct output: 4                   | Program output: 46                 
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 87                 
Correct output: 4                   | Program output: 33                 
Correct output: 17                  | Program output: 21                 
Correct output: 15                  | Program output: 77                 
Correct output: 2                   | Program output: 83                 
Correct output: 11                  | Program output: 82                 
Correct output: 27                  | Program output: 53                 
Correct output: 20                  | Program output: 39                 
Correct output: 60                  | Program output: 90                 
Correct output: 24                  | Program output: 54                 
Correct output: 25                  | Program output: 89                 
Correct output: -60                 | Program output: 98                 
Correct output: 22                  | Program output: 71                 
Correct output: -84                 | Program output: 79                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -47                
Correct output: -72                 | Program output: 94                 
Correct output: -80                 | Program output: -78                
Correct output: -58                 | Program output: -41                
Correct output: -94                 | Program output: 31                 
Correct output: -89                 | Program output: 20                 
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: -42                
Correct output: 0                   | Program output: 64                 
Correct output: -98                 | Program output: -35                
Correct output: -84                 | Program output: -70                
Correct output: -22                 | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -81                 | Program output: -70                
Correct output: -90                 | Program output: 36                 
Correct output: -60                 | Program output: 87                 
Correct output: -9                  | Program output: 10                 
Correct output: -5                  | Program output: 8                  
Correct output: -53                 | Program output: 58                 
Correct output: -32                 | Program output: 42                 
Correct output: -84                 | Program output: -22                
Correct output: -22                 | Program output: 56                 
Correct output: 1                   | Program output: 55                 
Correct output: -59                 | Program output: -4                 
Correct output: -50                 | Program output: -35                
Correct output: -64                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -82                
Correct output: -55                 | Program output: 91                 
Correct output: 25                  | Program output: 25                 
Correct output: -47                 | Program output: -47                
Correct output: -52                 | Program output: 9                  
Correct output: -90                 | Program output: 48                 
Correct output: -34                 | Program output: 97                 
Correct output: -90                 | Program output: 85                 
Correct output: -65                 | Program output: 13                 
Correct output: -26                 | Program output: -3                 
Correct output: -37                 | Program output: 24                 
Correct output: -46                 | Program output: -34                
Correct output: -16                 | Program output: 51                 
Correct output: -58                 | Program output: 17                 
Correct output: -34                 | Program output: 82                 
Correct output: -49                 | Program output: 30                 
Correct output: -98                 | Program output: 91                 
Correct output: -22                 | Program output: 19                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -58                 | Program output: 75                 
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 1, :instruction -40} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction -35} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 1, :instruction print_exec} {:close 0, :instruction exec_dup_times})
Lexicase best program: (integer_stackdepth boolean_swap boolean_stackdepth integer_div exec_s_when_autoconstructing (integer_dup_times exec_y_when_autoconstructing (integer_dec integer_inc) integer_dup_items boolean_flush integer_add exec_rot (exec_dup_times (integer_inc) integer_dup_items boolean_flush integer_add exec_rot (exec_dup_times () in1 boolean_swap) (exec_s_when_autoconstructing (integer_swap boolean_yank integer_fromboolean integer_yank integer_lt print_integer) (-40) (exec_if (boolean_dup integer_eq in2 integer_stackdepth integer_yank exec_while (in2 integer_stackdepth integer_yank integer_dec boolean_rot integer_add -35 integer_dup_items exec_yankdup integer_dup_items) boolean_empty) (exec_y_when_autoconstructing (in4 boolean_dup_items exec_noop integer_rot) exec_when (integer_eq exec_k () (integer_dup_times integer_gte boolean_pop exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth) integer_mod boolean_yank integer_mult exec_when () print_integer exec_s () (integer_mod print_exec () exec_dup_times ()) ()))))) ()) () ()) () ())
Lexicase best errors: [1 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 103
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 1, :instruction -40} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction -35} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 1, :instruction print_exec} {:close 0, :instruction exec_dup_times})
Zero cases best program: (integer_stackdepth boolean_swap boolean_stackdepth integer_div exec_s_when_autoconstructing (integer_dup_times exec_y_when_autoconstructing (integer_dec integer_inc) integer_dup_items boolean_flush integer_add exec_rot (exec_dup_times (integer_inc) integer_dup_items boolean_flush integer_add exec_rot (exec_dup_times () in1 boolean_swap) (exec_s_when_autoconstructing (integer_swap boolean_yank integer_fromboolean integer_yank integer_lt print_integer) (-40) (exec_if (boolean_dup integer_eq in2 integer_stackdepth integer_yank exec_while (in2 integer_stackdepth integer_yank integer_dec boolean_rot integer_add -35 integer_dup_items exec_yankdup integer_dup_items) boolean_empty) (exec_y_when_autoconstructing (in4 boolean_dup_items exec_noop integer_rot) exec_when (integer_eq exec_k () (integer_dup_times integer_gte boolean_pop exec_s_when_autoconstructing () (integer_stackdepth) (exec_stackdepth) integer_mod boolean_yank integer_mult exec_when () print_integer exec_s () (integer_mod print_exec () exec_dup_times ()) ()))))) ()) () ()) () ())
Zero cases best errors: [1 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 103
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (114 115 332 333 333 114 332 333 333 115)
Population mean number of elite cases: 2.45
Count of perfect (error zero) individuals by case: (114 115 332 333 333 114 332 333 333 115)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 1, :instruction -40} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction -35} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_when})
Best program: (integer_stackdepth boolean_swap boolean_stackdepth integer_div exec_s_when_autoconstructing (boolean_empty exec_y_when_autoconstructing (integer_dec integer_inc) integer_dup_items boolean_flush integer_add exec_rot (exec_dup_times () in1 boolean_swap) (exec_s_when_autoconstructing (integer_swap boolean_yank integer_fromboolean integer_yank integer_lt print_integer) (-40) (exec_if (boolean_dup integer_eq in2 integer_stackdepth integer_yank integer_dec boolean_rot integer_add -35 integer_dup_items exec_yankdup integer_dup_items) (integer_flush) exec_y_when_autoconstructing (in4 boolean_dup_items exec_noop integer_rot) exec_when (integer_eq exec_k () (integer_dup_times integer_gte boolean_pop exec_s_when_autoconstructing () () (integer_stackdepth exec_stackdepth) integer_mod boolean_yank integer_mult exec_when ())))) ()) () ())
Errors: [1 1 0 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 56
Size: 78
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 7.546
Median total errors in population: 10
Error averages by case: (0.886 0.885 0.668 0.667 0.667 0.886 0.668 0.667 0.667 0.885)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.744
Average program size in population (points): 38.61
Average percent parens in population: 0.261
Minimum age in population: 11.625
Maximum age in population: 17.009765625
Average age in population: 14.9423515625
Median age in population: 15.0283203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.651
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3430624
--- Timings ---
Current time: 1559314367716 milliseconds
Total Time:          30.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        22.1 seconds, 72.9%
Fitness Testing:      4.6 seconds, 15.2%
Report:               3.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 69                 
Correct output: 0                   | Program output: 85                 
Correct output: 10                  | Program output: 42                 
Correct output: 4                   | Program output: 58                 
Correct output: 28                  | Program output: 73                 
Correct output: 21                  | Program output: 33                 
Correct output: 32                  | Program output: 39                 
Correct output: 4                   | Program output: 22                 
Correct output: 17                  | Program output: 84                 
Correct output: 15                  | Program output: 61                 
Correct output: 2                   | Program output: 64                 
Correct output: 11                  | Program output: 59                 
Correct output: 27                  | Program output: 27                 
Correct output: 20                  | Program output: 20                 
Correct output: 60                  | Program output: 97                 
Correct output: 24                  | Program output: 24                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: -59                
Correct output: 22                  | Program output: 22                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 20                 
Correct output: -85                 | Program output: -50                
Correct output: -73                 | Program output: -2                 
Correct output: -73                 | Program output: 71                 
Correct output: -96                 | Program output: 91                 
Correct output: -72                 | Program output: 86                 
Correct output: -80                 | Program output: 33                 
Correct output: -58                 | Program output: 70                 
Correct output: -94                 | Program output: 8                  
Correct output: -89                 | Program output: 13                 
Correct output: -38                 | Program output: 91                 
Correct output: -76                 | Program output: 22                 
Correct output: 0                   | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -84                 | Program output: -77                
Correct output: -22                 | Program output: -22                
Correct output: -85                 | Program output: 92                 
Correct output: -97                 | Program output: -56                
Correct output: -83                 | Program output: 20                 
Correct output: -17                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -4                 
Correct output: -60                 | Program output: -36                
Correct output: -9                  | Program output: 90                 
Correct output: -5                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 6                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 85                 
Correct output: 1                   | Program output: 99                 
Correct output: -59                 | Program output: 45                 
Correct output: -50                 | Program output: 20                 
Correct output: -64                 | Program output: -56                
Correct output: -92                 | Program output: -8                 
Correct output: -91                 | Program output: -9                 
Correct output: -55                 | Program output: -51                
Correct output: 25                  | Program output: 47                 
Correct output: -47                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -34                
Correct output: -34                 | Program output: 90                 
Correct output: -90                 | Program output: 90                 
Correct output: -65                 | Program output: 50                 
Correct output: -26                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -46                 | Program output: 17                 
Correct output: -16                 | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -34                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: -36                
Correct output: -22                 | Program output: 97                 
Correct output: -67                 | Program output: 69                 
Correct output: -45                 | Program output: -26                
Correct output: -58                 | Program output: 8                  
Correct output: -22                 | Program output: 12                 
Correct output: -15                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Lexicase best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Lexicase best errors: [1 0 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Zero cases best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Zero cases best errors: [1 0 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 371 1 2 2 371 371 2 371 523)
Population mean number of elite cases: 2.02
Count of perfect (error zero) individuals by case: (1 371 1 2 2 371 371 2 371 523)
Population mean number of perfect (error zero) cases: 2.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Best program: (integer_yank boolean_not exec_dup (in3) print_integer exec_empty integer_min boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Errors: [1 0 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 21
Size: 31
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 7.985
Median total errors in population: 9
Error averages by case: (0.999 0.629 0.999 0.998 0.998 0.629 0.629 0.998 0.629 0.477)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.387
Average program size in population (points): 40.212
Average percent parens in population: 0.280
Minimum age in population: 13.5
Maximum age in population: 18.32421875
Average age in population: 16.3949296875
Median age in population: 16.494140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.537
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3686264
--- Timings ---
Current time: 1559314369911 milliseconds
Total Time:          32.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.9 seconds, 73.0%
Fitness Testing:      4.9 seconds, 14.9%
Report:               3.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 69                 
Correct output: 0                   | Program output: 85                 
Correct output: 10                  | Program output: 42                 
Correct output: 4                   | Program output: 58                 
Correct output: 28                  | Program output: 73                 
Correct output: 21                  | Program output: 33                 
Correct output: 32                  | Program output: 39                 
Correct output: 4                   | Program output: 22                 
Correct output: 17                  | Program output: 84                 
Correct output: 15                  | Program output: 61                 
Correct output: 2                   | Program output: 64                 
Correct output: 11                  | Program output: 59                 
Correct output: 27                  | Program output: 27                 
Correct output: 20                  | Program output: 20                 
Correct output: 60                  | Program output: 97                 
Correct output: 24                  | Program output: 24                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: -59                
Correct output: 22                  | Program output: 22                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 20                 
Correct output: -85                 | Program output: -50                
Correct output: -73                 | Program output: -2                 
Correct output: -73                 | Program output: 71                 
Correct output: -96                 | Program output: 91                 
Correct output: -72                 | Program output: 86                 
Correct output: -80                 | Program output: 33                 
Correct output: -58                 | Program output: 70                 
Correct output: -94                 | Program output: 8                  
Correct output: -89                 | Program output: 13                 
Correct output: -38                 | Program output: 91                 
Correct output: -76                 | Program output: 22                 
Correct output: 0                   | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -84                 | Program output: -77                
Correct output: -22                 | Program output: -22                
Correct output: -85                 | Program output: 92                 
Correct output: -97                 | Program output: -56                
Correct output: -83                 | Program output: 20                 
Correct output: -17                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -4                 
Correct output: -60                 | Program output: -36                
Correct output: -9                  | Program output: 90                 
Correct output: -5                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 6                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 85                 
Correct output: 1                   | Program output: 99                 
Correct output: -59                 | Program output: 45                 
Correct output: -50                 | Program output: 20                 
Correct output: -64                 | Program output: -56                
Correct output: -92                 | Program output: -8                 
Correct output: -91                 | Program output: -9                 
Correct output: -55                 | Program output: -51                
Correct output: 25                  | Program output: 47                 
Correct output: -47                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -34                
Correct output: -34                 | Program output: 90                 
Correct output: -90                 | Program output: 90                 
Correct output: -65                 | Program output: 50                 
Correct output: -26                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -46                 | Program output: 17                 
Correct output: -16                 | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -34                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: -36                
Correct output: -22                 | Program output: 97                 
Correct output: -67                 | Program output: 69                 
Correct output: -45                 | Program output: -26                
Correct output: -58                 | Program output: 8                  
Correct output: -22                 | Program output: 12                 
Correct output: -15                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Lexicase best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Lexicase best errors: [1 0 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Zero cases best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Zero cases best errors: [1 0 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (183 358 358 358 183 80 292 358 914 183)
Population mean number of elite cases: 3.27
Count of perfect (error zero) individuals by case: (183 358 358 358 183 80 292 358 914 183)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_yank exec_while (in2 boolean_rot) integer_sub in4 integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Errors: [1 0 0 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 25
Size: 36
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.733
Median total errors in population: 6
Error averages by case: (0.817 0.642 0.642 0.642 0.817 0.92 0.708 0.642 0.086 0.817)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.764
Average program size in population (points): 29.953
Average percent parens in population: 0.299
Minimum age in population: 14.513671875
Maximum age in population: 19.89599609375
Average age in population: 18.33747998046875
Median age in population: 18.5185546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.408
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.38
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 3857056
--- Timings ---
Current time: 1559314371940 milliseconds
Total Time:          34.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.6 seconds, 73.6%
Fitness Testing:      5.0 seconds, 14.5%
Report:               4.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -61                
Correct output: 37                  | Program output: 37                 
Correct output: -82                 | Program output: 34                 
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -41                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: 81                 
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: 47                 
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 0                   | Program output: 75                 
Correct output: 10                  | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 95                 
Correct output: 21                  | Program output: 48                 
Correct output: 32                  | Program output: 58                 
Correct output: 4                   | Program output: 92                 
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 99                 
Correct output: 2                   | Program output: 5                  
Correct output: 11                  | Program output: 96                 
Correct output: 27                  | Program output: 81                 
Correct output: 20                  | Program output: 45                 
Correct output: 60                  | Program output: 87                 
Correct output: 24                  | Program output: 58                 
Correct output: 25                  | Program output: 83                 
Correct output: -60                 | Program output: 35                 
Correct output: 22                  | Program output: 55                 
Correct output: -84                 | Program output: 86                 
Correct output: -50                 | Program output: 56                 
Correct output: -85                 | Program output: -2                 
Correct output: -73                 | Program output: -13                
Correct output: -73                 | Program output: 78                 
Correct output: -96                 | Program output: 7                  
Correct output: -72                 | Program output: 52                 
Correct output: -80                 | Program output: 23                 
Correct output: -58                 | Program output: 96                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -54                
Correct output: -38                 | Program output: -12                
Correct output: -76                 | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -1                 
Correct output: -22                 | Program output: 70                 
Correct output: -85                 | Program output: 22                 
Correct output: -97                 | Program output: -6                 
Correct output: -83                 | Program output: -34                
Correct output: -17                 | Program output: 79                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -60                
Correct output: -9                  | Program output: 76                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -12                
Correct output: -32                 | Program output: 3                  
Correct output: -84                 | Program output: -43                
Correct output: -22                 | Program output: 7                  
Correct output: 1                   | Program output: 30                 
Correct output: -59                 | Program output: -3                 
Correct output: -50                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -24                
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: 25                  | Program output: 77                 
Correct output: -47                 | Program output: 78                 
Correct output: -52                 | Program output: 90                 
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -30                
Correct output: -46                 | Program output: 2                  
Correct output: -16                 | Program output: 0                  
Correct output: -58                 | Program output: -35                
Correct output: -34                 | Program output: 97                 
Correct output: -49                 | Program output: 30                 
Correct output: -98                 | Program output: 18                 
Correct output: -22                 | Program output: 12                 
Correct output: -67                 | Program output: 28                 
Correct output: -45                 | Program output: -4                 
Correct output: -58                 | Program output: 65                 
Correct output: -22                 | Program output: 76                 
Correct output: -15                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction tagged_402} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Lexicase best program: (boolean_swap boolean_stackdepth integer_div in4 boolean_not exec_dup (tagged_402) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Lexicase best errors: [0 1 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction tagged_402} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Zero cases best program: (boolean_swap boolean_stackdepth integer_div in4 boolean_not exec_dup (tagged_402) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Zero cases best errors: [0 1 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (92 419 914 305 92 92 92 914 419 304)
Population mean number of elite cases: 3.64
Count of perfect (error zero) individuals by case: (92 419 914 305 92 92 92 914 419 304)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction tagged_402} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec})
Best program: (boolean_swap boolean_stackdepth integer_div in4 boolean_not exec_dup (tagged_402) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_do*count (integer_add print_exec (in2 integer_stackdepth integer_yank integer_dec)))
Errors: [0 1 0 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 24
Size: 28
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.357
Median total errors in population: 6
Error averages by case: (0.908 0.581 0.086 0.695 0.908 0.908 0.908 0.086 0.581 0.696)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.642
Average program size in population (points): 31.47
Average percent parens in population: 0.307
Minimum age in population: 16.396484375
Maximum age in population: 21.468017578125
Average age in population: 19.66586645507812
Median age in population: 19.7481689453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.458
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 192
Syntactic diversity (% unique Push programs):	 0.423
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4035172
--- Timings ---
Current time: 1559314374496 milliseconds
Total Time:          37.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.8 seconds, 74.5%
Fitness Testing:      5.2 seconds, 14.0%
Report:               4.2 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -46                 | Program output: -29                
Correct output: -77                 | Program output: -61                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: 34                 
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 95                 
Correct output: -81                 | Program output: 81                 
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: 47                 
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 61                 
Correct output: 1                   | Program output: 13                 
Correct output: 25                  | Program output: 70                 
Correct output: 38                  | Program output: 93                 
Correct output: 0                   | Program output: 77                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 12                 
Correct output: 28                  | Program output: 77                 
Correct output: 21                  | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 51                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 92                 
Correct output: 20                  | Program output: 95                 
Correct output: 60                  | Program output: 60                 
Correct output: 24                  | Program output: 96                 
Correct output: 25                  | Program output: 63                 
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 40                 
Correct output: -84                 | Program output: 55                 
Correct output: -50                 | Program output: -43                
Correct output: -85                 | Program output: 88                 
Correct output: -73                 | Program output: 71                 
Correct output: -73                 | Program output: -49                
Correct output: -96                 | Program output: -96                
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 43                 
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: 7                  
Correct output: -76                 | Program output: -76                
Correct output: 0                   | Program output: 91                 
Correct output: -98                 | Program output: 53                 
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 99                 
Correct output: -85                 | Program output: -15                
Correct output: -97                 | Program output: -52                
Correct output: -83                 | Program output: 88                 
Correct output: -17                 | Program output: 35                 
Correct output: -81                 | Program output: 40                 
Correct output: -90                 | Program output: -6                 
Correct output: -60                 | Program output: -44                
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: 35                 
Correct output: -53                 | Program output: -21                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: 70                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: -59                 | Program output: -59                
Correct output: -50                 | Program output: -50                
Correct output: -64                 | Program output: 60                 
Correct output: -92                 | Program output: 75                 
Correct output: -91                 | Program output: 62                 
Correct output: -55                 | Program output: -36                
Correct output: 25                  | Program output: 49                 
Correct output: -47                 | Program output: 36                 
Correct output: -52                 | Program output: -32                
Correct output: -90                 | Program output: -43                
Correct output: -34                 | Program output: 83                 
Correct output: -90                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -26                 | Program output: 41                 
Correct output: -37                 | Program output: 35                 
Correct output: -46                 | Program output: -46                
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -42                
Correct output: -34                 | Program output: -32                
Correct output: -49                 | Program output: 58                 
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -67                 | Program output: 1                  
Correct output: -45                 | Program output: 9                  
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: 25                 
Correct output: -15                 | Program output: 56                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec})
Lexicase best program: (integer_stackdepth boolean_swap boolean_stackdepth integer_div exec_s_when_autoconstructing (exec_rot (exec_dup_times () in2 boolean_swap) (exec_s_when_autoconstructing (integer_swap boolean_yank integer_fromboolean integer_yank integer_lt print_integer) (exec_while () exec_if (boolean_dup integer_eq in2 integer_stackdepth integer_yank integer_dec) ()) ()) ()) () ())
Lexicase best errors: [0 0 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 38
Percent parens: 0.368
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec})
Zero cases best program: (integer_stackdepth boolean_swap boolean_stackdepth integer_div exec_s_when_autoconstructing (exec_rot (exec_dup_times () in2 boolean_swap) (exec_s_when_autoconstructing (integer_swap boolean_yank integer_fromboolean integer_yank integer_lt print_integer) (exec_while () exec_if (boolean_dup integer_eq in2 integer_stackdepth integer_yank integer_dec) ()) ()) ()) () ())
Zero cases best errors: [0 0 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 38
Percent parens: 0.368
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 221 224 445 221 221 223 221 223 224)
Population mean number of elite cases: 2.44
Count of perfect (error zero) individuals by case: (221 221 224 445 221 221 223 221 223 224)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec})
Best program: (integer_mult boolean_xor exec_rot (exec_dup_times () in2 boolean_swap) (exec_s_when_autoconstructing (integer_swap boolean_yank integer_fromboolean integer_yank integer_lt print_integer) (exec_while () exec_if (boolean_dup integer_eq in2 integer_stackdepth integer_yank integer_dec) ()) ()) ())
Errors: [0 0 1 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 21
Size: 32
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 7.556
Median total errors in population: 10
Error averages by case: (0.779 0.779 0.776 0.555 0.779 0.779 0.777 0.779 0.777 0.776)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.865
Average program size in population (points): 27.107
Average percent parens in population: 0.296
Minimum age in population: 17.7724609375
Maximum age in population: 23.2950439453125
Average age in population: 21.34468603515625
Median age in population: 21.41656494140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 146
Genome diversity (% unique genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 169
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4194190
--- Timings ---
Current time: 1559314376897 milliseconds
Total Time:          39.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.8 seconds, 75.2%
Fitness Testing:      5.4 seconds, 13.6%
Report:               4.3 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 69                 
Correct output: 0                   | Program output: 85                 
Correct output: 10                  | Program output: 42                 
Correct output: 4                   | Program output: 58                 
Correct output: 28                  | Program output: 73                 
Correct output: 21                  | Program output: 33                 
Correct output: 32                  | Program output: 39                 
Correct output: 4                   | Program output: 22                 
Correct output: 17                  | Program output: 84                 
Correct output: 15                  | Program output: 61                 
Correct output: 2                   | Program output: 64                 
Correct output: 11                  | Program output: 59                 
Correct output: 27                  | Program output: 27                 
Correct output: 20                  | Program output: 20                 
Correct output: 60                  | Program output: 97                 
Correct output: 24                  | Program output: 24                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: -59                
Correct output: 22                  | Program output: 22                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 20                 
Correct output: -85                 | Program output: -50                
Correct output: -73                 | Program output: -2                 
Correct output: -73                 | Program output: 71                 
Correct output: -96                 | Program output: 91                 
Correct output: -72                 | Program output: 86                 
Correct output: -80                 | Program output: 33                 
Correct output: -58                 | Program output: 70                 
Correct output: -94                 | Program output: 8                  
Correct output: -89                 | Program output: 13                 
Correct output: -38                 | Program output: 91                 
Correct output: -76                 | Program output: 22                 
Correct output: 0                   | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -84                 | Program output: -77                
Correct output: -22                 | Program output: -22                
Correct output: -85                 | Program output: 92                 
Correct output: -97                 | Program output: -56                
Correct output: -83                 | Program output: 20                 
Correct output: -17                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -4                 
Correct output: -60                 | Program output: -36                
Correct output: -9                  | Program output: 90                 
Correct output: -5                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 6                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 85                 
Correct output: 1                   | Program output: 99                 
Correct output: -59                 | Program output: 45                 
Correct output: -50                 | Program output: 20                 
Correct output: -64                 | Program output: -56                
Correct output: -92                 | Program output: -8                 
Correct output: -91                 | Program output: -9                 
Correct output: -55                 | Program output: -51                
Correct output: 25                  | Program output: 47                 
Correct output: -47                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -34                
Correct output: -34                 | Program output: 90                 
Correct output: -90                 | Program output: 90                 
Correct output: -65                 | Program output: 50                 
Correct output: -26                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -46                 | Program output: 17                 
Correct output: -16                 | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -34                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: -36                
Correct output: -22                 | Program output: 97                 
Correct output: -67                 | Program output: 69                 
Correct output: -45                 | Program output: -26                
Correct output: -58                 | Program output: 8                  
Correct output: -22                 | Program output: 12                 
Correct output: -15                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Lexicase best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod boolean_pop boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Lexicase best errors: [0 0 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Zero cases best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod boolean_pop boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Zero cases best errors: [0 0 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (407 918 407 1000 917 1000 407 407 1000 407)
Population mean number of elite cases: 6.87
Count of perfect (error zero) individuals by case: (407 918 407 0 917 0 407 407 0 407)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Errors: [0 0 0 1 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 21
Size: 31
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 6.13
Median total errors in population: 8
Error averages by case: (0.593 0.082 0.593 1.0 0.083 1.0 0.593 0.593 1.0 0.593)
Error minima by case: (0 0 0 1 0 1 0 0 1 0)
Average genome size in population (length): 20.304
Average program size in population (points): 30.085
Average percent parens in population: 0.319
Minimum age in population: 18.7724609375
Maximum age in population: 24.71917724609375
Average age in population: 22.73732067871094
Median age in population: 22.80093383789062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 177
Syntactic diversity (% unique Push programs):	 0.449
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 4367423
--- Timings ---
Current time: 1559314379268 milliseconds
Total Time:          42.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        31.9 seconds, 75.7%
Fitness Testing:      5.6 seconds, 13.2%
Report:               4.5 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -61                
Correct output: 37                  | Program output: 37                 
Correct output: -82                 | Program output: 34                 
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -41                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: 81                 
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: 47                 
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 0                   | Program output: 75                 
Correct output: 10                  | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 95                 
Correct output: 21                  | Program output: 48                 
Correct output: 32                  | Program output: 58                 
Correct output: 4                   | Program output: 92                 
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 99                 
Correct output: 2                   | Program output: 5                  
Correct output: 11                  | Program output: 96                 
Correct output: 27                  | Program output: 81                 
Correct output: 20                  | Program output: 45                 
Correct output: 60                  | Program output: 87                 
Correct output: 24                  | Program output: 58                 
Correct output: 25                  | Program output: 83                 
Correct output: -60                 | Program output: 35                 
Correct output: 22                  | Program output: 55                 
Correct output: -84                 | Program output: 86                 
Correct output: -50                 | Program output: 56                 
Correct output: -85                 | Program output: -2                 
Correct output: -73                 | Program output: -13                
Correct output: -73                 | Program output: 78                 
Correct output: -96                 | Program output: 7                  
Correct output: -72                 | Program output: 52                 
Correct output: -80                 | Program output: 23                 
Correct output: -58                 | Program output: 96                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -54                
Correct output: -38                 | Program output: -12                
Correct output: -76                 | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -1                 
Correct output: -22                 | Program output: 70                 
Correct output: -85                 | Program output: 22                 
Correct output: -97                 | Program output: -6                 
Correct output: -83                 | Program output: -34                
Correct output: -17                 | Program output: 79                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -60                
Correct output: -9                  | Program output: 76                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -12                
Correct output: -32                 | Program output: 3                  
Correct output: -84                 | Program output: -43                
Correct output: -22                 | Program output: 7                  
Correct output: 1                   | Program output: 30                 
Correct output: -59                 | Program output: -3                 
Correct output: -50                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -24                
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: 25                  | Program output: 77                 
Correct output: -47                 | Program output: 78                 
Correct output: -52                 | Program output: 90                 
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -30                
Correct output: -46                 | Program output: 2                  
Correct output: -16                 | Program output: 0                  
Correct output: -58                 | Program output: -35                
Correct output: -34                 | Program output: 97                 
Correct output: -49                 | Program output: 30                 
Correct output: -98                 | Program output: 18                 
Correct output: -22                 | Program output: 12                 
Correct output: -67                 | Program output: 28                 
Correct output: -45                 | Program output: -4                 
Correct output: -58                 | Program output: 65                 
Correct output: -22                 | Program output: 76                 
Correct output: -15                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec})
Lexicase best program: (in4 boolean_not exec_dup (boolean_flush) print_integer integer_mod integer_min boolean_yank exec_dup_items exec_if (integer_gt integer_eq in2 integer_stackdepth integer_yank integer_dec) ())
Lexicase best errors: [0 0 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec})
Zero cases best program: (in4 boolean_not exec_dup (boolean_flush) print_integer integer_mod integer_min boolean_yank exec_dup_items exec_if (integer_gt integer_eq in2 integer_stackdepth integer_yank integer_dec) ())
Zero cases best errors: [0 0 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 930 3 1000 923 1000 927 3 3 927)
Population mean number of elite cases: 5.72
Count of perfect (error zero) individuals by case: (3 930 3 0 923 0 927 3 3 927)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq})
Best program: (in4 print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush integer_eq)
Errors: [0 0 0 1 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 9
Size: 10
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 6.281
Median total errors in population: 6
Error averages by case: (0.997 0.07 0.997 1.0 0.077 1.0 0.073 0.997 0.997 0.073)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 19.885
Average program size in population (points): 28.305
Average percent parens in population: 0.288
Minimum age in population: 19.7724609375
Maximum age in population: 25.95523071289062
Average age in population: 24.18675607299805
Median age in population: 24.27699279785156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.417
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 4498434
--- Timings ---
Current time: 1559314381138 milliseconds
Total Time:          44.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        33.5 seconds, 76.1%
Fitness Testing:      5.7 seconds, 13.0%
Report:               4.7 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 69                 
Correct output: 0                   | Program output: 85                 
Correct output: 10                  | Program output: 42                 
Correct output: 4                   | Program output: 58                 
Correct output: 28                  | Program output: 73                 
Correct output: 21                  | Program output: 33                 
Correct output: 32                  | Program output: 39                 
Correct output: 4                   | Program output: 22                 
Correct output: 17                  | Program output: 84                 
Correct output: 15                  | Program output: 61                 
Correct output: 2                   | Program output: 64                 
Correct output: 11                  | Program output: 59                 
Correct output: 27                  | Program output: 27                 
Correct output: 20                  | Program output: 20                 
Correct output: 60                  | Program output: 97                 
Correct output: 24                  | Program output: 24                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: -59                
Correct output: 22                  | Program output: 22                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 20                 
Correct output: -85                 | Program output: -50                
Correct output: -73                 | Program output: -2                 
Correct output: -73                 | Program output: 71                 
Correct output: -96                 | Program output: 91                 
Correct output: -72                 | Program output: 86                 
Correct output: -80                 | Program output: 33                 
Correct output: -58                 | Program output: 70                 
Correct output: -94                 | Program output: 8                  
Correct output: -89                 | Program output: 13                 
Correct output: -38                 | Program output: 91                 
Correct output: -76                 | Program output: 22                 
Correct output: 0                   | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -84                 | Program output: -77                
Correct output: -22                 | Program output: -22                
Correct output: -85                 | Program output: 92                 
Correct output: -97                 | Program output: -56                
Correct output: -83                 | Program output: 20                 
Correct output: -17                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -4                 
Correct output: -60                 | Program output: -36                
Correct output: -9                  | Program output: 90                 
Correct output: -5                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 6                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 85                 
Correct output: 1                   | Program output: 99                 
Correct output: -59                 | Program output: 45                 
Correct output: -50                 | Program output: 20                 
Correct output: -64                 | Program output: -56                
Correct output: -92                 | Program output: -8                 
Correct output: -91                 | Program output: -9                 
Correct output: -55                 | Program output: -51                
Correct output: 25                  | Program output: 47                 
Correct output: -47                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -34                
Correct output: -34                 | Program output: 90                 
Correct output: -90                 | Program output: 90                 
Correct output: -65                 | Program output: 50                 
Correct output: -26                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -46                 | Program output: 17                 
Correct output: -16                 | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -34                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: -36                
Correct output: -22                 | Program output: 97                 
Correct output: -67                 | Program output: 69                 
Correct output: -45                 | Program output: -26                
Correct output: -58                 | Program output: 8                  
Correct output: -22                 | Program output: 12                 
Correct output: -15                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq})
Lexicase best program: (in1 boolean_not exec_dup (in3) print_integer integer_mod integer_yankdup boolean_yank boolean_pop integer_max exec_flush integer_eq)
Lexicase best errors: [1 0 1 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 14
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq})
Zero cases best program: (in1 boolean_not exec_dup (in3) print_integer integer_mod integer_yankdup boolean_yank boolean_pop integer_max exec_flush integer_eq)
Zero cases best errors: [1 0 1 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 14
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 393 1000 1000 1000 393 940 547 546 393)
Population mean number of elite cases: 7.21
Count of perfect (error zero) individuals by case: (0 393 0 0 0 393 940 547 546 393)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times})
Best program: (in4 boolean_shove exec_dup (in3) print_integer exec_flush boolean_pop boolean_yank boolean_pop integer_max exec_flush exec_dup_items boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times ()) () ())) () ())
Errors: [1 0 1 1 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 20
Size: 30
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.788
Median total errors in population: 7
Error averages by case: (1.0 0.607 1.0 1.0 1.0 0.607 0.06 0.453 0.454 0.607)
Error minima by case: (1 0 1 1 1 0 0 0 0 0)
Average genome size in population (length): 16.877
Average program size in population (points): 23.134
Average percent parens in population: 0.239
Minimum age in population: 22.54833984375
Maximum age in population: 27.54278564453125
Average age in population: 25.82779490661621
Median age in population: 25.94075775146484
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 178
Genome diversity (% unique genomes):	 0.408
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.372
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 4628112
--- Timings ---
Current time: 1559314382761 milliseconds
Total Time:          45.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.8 seconds, 76.4%
Fitness Testing:      5.9 seconds, 12.8%
Report:               4.8 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 69                 
Correct output: 0                   | Program output: 85                 
Correct output: 10                  | Program output: 42                 
Correct output: 4                   | Program output: 58                 
Correct output: 28                  | Program output: 73                 
Correct output: 21                  | Program output: 33                 
Correct output: 32                  | Program output: 39                 
Correct output: 4                   | Program output: 22                 
Correct output: 17                  | Program output: 84                 
Correct output: 15                  | Program output: 61                 
Correct output: 2                   | Program output: 64                 
Correct output: 11                  | Program output: 59                 
Correct output: 27                  | Program output: 27                 
Correct output: 20                  | Program output: 20                 
Correct output: 60                  | Program output: 97                 
Correct output: 24                  | Program output: 24                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: -59                
Correct output: 22                  | Program output: 22                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 20                 
Correct output: -85                 | Program output: -50                
Correct output: -73                 | Program output: -2                 
Correct output: -73                 | Program output: 71                 
Correct output: -96                 | Program output: 91                 
Correct output: -72                 | Program output: 86                 
Correct output: -80                 | Program output: 33                 
Correct output: -58                 | Program output: 70                 
Correct output: -94                 | Program output: 8                  
Correct output: -89                 | Program output: 13                 
Correct output: -38                 | Program output: 91                 
Correct output: -76                 | Program output: 22                 
Correct output: 0                   | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -84                 | Program output: -77                
Correct output: -22                 | Program output: -22                
Correct output: -85                 | Program output: 92                 
Correct output: -97                 | Program output: -56                
Correct output: -83                 | Program output: 20                 
Correct output: -17                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -4                 
Correct output: -60                 | Program output: -36                
Correct output: -9                  | Program output: 90                 
Correct output: -5                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 6                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 85                 
Correct output: 1                   | Program output: 99                 
Correct output: -59                 | Program output: 45                 
Correct output: -50                 | Program output: 20                 
Correct output: -64                 | Program output: -56                
Correct output: -92                 | Program output: -8                 
Correct output: -91                 | Program output: -9                 
Correct output: -55                 | Program output: -51                
Correct output: 25                  | Program output: 47                 
Correct output: -47                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -34                
Correct output: -34                 | Program output: 90                 
Correct output: -90                 | Program output: 90                 
Correct output: -65                 | Program output: 50                 
Correct output: -26                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -46                 | Program output: 17                 
Correct output: -16                 | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -34                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: -36                
Correct output: -22                 | Program output: 97                 
Correct output: -67                 | Program output: 69                 
Correct output: -45                 | Program output: -26                
Correct output: -58                 | Program output: 8                  
Correct output: -22                 | Program output: 12                 
Correct output: -15                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Lexicase best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush exec_noop exec_flush exec_noop boolean_eq integer_div exec_rot (boolean_invert_second_then_and print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Lexicase best errors: [0 1 1 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 33
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Zero cases best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush exec_noop exec_flush exec_noop boolean_eq integer_div exec_rot (boolean_invert_second_then_and print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Zero cases best errors: [0 1 1 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 33
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (574 1000 1 1000 366 573 1000 1 1000 573)
Population mean number of elite cases: 6.09
Count of perfect (error zero) individuals by case: (574 0 1 0 366 573 0 1 0 573)
Population mean number of perfect (error zero) cases: 2.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_exec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec () exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ()) () ())
Errors: [0 1 1 1 1 0 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 24
Size: 38
Percent parens: 0.368
--- Population Statistics ---
Average total errors in population: 7.912
Median total errors in population: 7
Error averages by case: (0.426 1.0 0.999 1.0 0.634 0.427 1.0 0.999 1.0 0.427)
Error minima by case: (0 1 0 1 0 0 1 0 1 0)
Average genome size in population (length): 17.5
Average program size in population (points): 24.23
Average percent parens in population: 0.252
Minimum age in population: 24.17684936523438
Maximum age in population: 29.099853515625
Average age in population: 27.27488681030273
Median age in population: 27.33480453491211
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.476
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.43
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 4762272
--- Timings ---
Current time: 1559314384811 milliseconds
Total Time:          47.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.6 seconds, 76.8%
Fitness Testing:      6.0 seconds, 12.6%
Report:               4.9 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 69                 
Correct output: 0                   | Program output: 85                 
Correct output: 10                  | Program output: 42                 
Correct output: 4                   | Program output: 58                 
Correct output: 28                  | Program output: 73                 
Correct output: 21                  | Program output: 33                 
Correct output: 32                  | Program output: 39                 
Correct output: 4                   | Program output: 22                 
Correct output: 17                  | Program output: 84                 
Correct output: 15                  | Program output: 61                 
Correct output: 2                   | Program output: 64                 
Correct output: 11                  | Program output: 59                 
Correct output: 27                  | Program output: 27                 
Correct output: 20                  | Program output: 20                 
Correct output: 60                  | Program output: 97                 
Correct output: 24                  | Program output: 24                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: -59                
Correct output: 22                  | Program output: 22                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 20                 
Correct output: -85                 | Program output: -50                
Correct output: -73                 | Program output: -2                 
Correct output: -73                 | Program output: 71                 
Correct output: -96                 | Program output: 91                 
Correct output: -72                 | Program output: 86                 
Correct output: -80                 | Program output: 33                 
Correct output: -58                 | Program output: 70                 
Correct output: -94                 | Program output: 8                  
Correct output: -89                 | Program output: 13                 
Correct output: -38                 | Program output: 91                 
Correct output: -76                 | Program output: 22                 
Correct output: 0                   | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -84                 | Program output: -77                
Correct output: -22                 | Program output: -22                
Correct output: -85                 | Program output: 92                 
Correct output: -97                 | Program output: -56                
Correct output: -83                 | Program output: 20                 
Correct output: -17                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -4                 
Correct output: -60                 | Program output: -36                
Correct output: -9                  | Program output: 90                 
Correct output: -5                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 6                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 85                 
Correct output: 1                   | Program output: 99                 
Correct output: -59                 | Program output: 45                 
Correct output: -50                 | Program output: 20                 
Correct output: -64                 | Program output: -56                
Correct output: -92                 | Program output: -8                 
Correct output: -91                 | Program output: -9                 
Correct output: -55                 | Program output: -51                
Correct output: 25                  | Program output: 47                 
Correct output: -47                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -34                
Correct output: -34                 | Program output: 90                 
Correct output: -90                 | Program output: 90                 
Correct output: -65                 | Program output: 50                 
Correct output: -26                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -46                 | Program output: 17                 
Correct output: -16                 | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -34                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: -36                
Correct output: -22                 | Program output: 97                 
Correct output: -67                 | Program output: 69                 
Correct output: -45                 | Program output: -26                
Correct output: -58                 | Program output: 8                  
Correct output: -22                 | Program output: 12                 
Correct output: -15                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Lexicase best program: (in4 boolean_not exec_dup (integer_min) print_integer integer_mod boolean_pop boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Lexicase best errors: [0 1 1 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Zero cases best program: (in4 boolean_not exec_dup (integer_min) print_integer integer_mod boolean_pop boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Zero cases best errors: [0 1 1 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (949 469 1000 1000 1000 1000 148 469 147 1000)
Population mean number of elite cases: 7.18
Count of perfect (error zero) individuals by case: (949 469 0 0 0 0 148 469 147 0)
Population mean number of perfect (error zero) cases: 2.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Errors: [0 0 1 1 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 21
Size: 31
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 7.818
Median total errors in population: 7
Error averages by case: (0.051 0.531 1.0 1.0 1.0 1.0 0.852 0.531 0.853 1.0)
Error minima by case: (0 0 1 1 1 1 0 0 0 1)
Average genome size in population (length): 19.095
Average program size in population (points): 27.201
Average percent parens in population: 0.283
Minimum age in population: 25.92550659179688
Maximum age in population: 30.59926986694336
Average age in population: 28.58692635726929
Median age in population: 28.70266723632812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 254
Genome diversity (% unique genomes):	 0.482
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 267
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 4893061
--- Timings ---
Current time: 1559314387178 milliseconds
Total Time:          50.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.7 seconds, 77.3%
Fitness Testing:      6.2 seconds, 12.3%
Report:               5.1 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 69                 
Correct output: 0                   | Program output: 85                 
Correct output: 10                  | Program output: 42                 
Correct output: 4                   | Program output: 58                 
Correct output: 28                  | Program output: 73                 
Correct output: 21                  | Program output: 33                 
Correct output: 32                  | Program output: 39                 
Correct output: 4                   | Program output: 22                 
Correct output: 17                  | Program output: 84                 
Correct output: 15                  | Program output: 61                 
Correct output: 2                   | Program output: 64                 
Correct output: 11                  | Program output: 59                 
Correct output: 27                  | Program output: 27                 
Correct output: 20                  | Program output: 20                 
Correct output: 60                  | Program output: 97                 
Correct output: 24                  | Program output: 24                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: -59                
Correct output: 22                  | Program output: 22                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 20                 
Correct output: -85                 | Program output: -50                
Correct output: -73                 | Program output: -2                 
Correct output: -73                 | Program output: 71                 
Correct output: -96                 | Program output: 91                 
Correct output: -72                 | Program output: 86                 
Correct output: -80                 | Program output: 33                 
Correct output: -58                 | Program output: 70                 
Correct output: -94                 | Program output: 8                  
Correct output: -89                 | Program output: 13                 
Correct output: -38                 | Program output: 91                 
Correct output: -76                 | Program output: 22                 
Correct output: 0                   | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -84                 | Program output: -77                
Correct output: -22                 | Program output: -22                
Correct output: -85                 | Program output: 92                 
Correct output: -97                 | Program output: -56                
Correct output: -83                 | Program output: 20                 
Correct output: -17                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -4                 
Correct output: -60                 | Program output: -36                
Correct output: -9                  | Program output: 90                 
Correct output: -5                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 6                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 85                 
Correct output: 1                   | Program output: 99                 
Correct output: -59                 | Program output: 45                 
Correct output: -50                 | Program output: 20                 
Correct output: -64                 | Program output: -56                
Correct output: -92                 | Program output: -8                 
Correct output: -91                 | Program output: -9                 
Correct output: -55                 | Program output: -51                
Correct output: 25                  | Program output: 47                 
Correct output: -47                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -34                
Correct output: -34                 | Program output: 90                 
Correct output: -90                 | Program output: 90                 
Correct output: -65                 | Program output: 50                 
Correct output: -26                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -46                 | Program output: 17                 
Correct output: -16                 | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -34                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: -36                
Correct output: -22                 | Program output: 97                 
Correct output: -67                 | Program output: 69                 
Correct output: -45                 | Program output: -26                
Correct output: -58                 | Program output: 8                  
Correct output: -22                 | Program output: 12                 
Correct output: -15                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Lexicase best program: (integer_stackdepth boolean_not integer_max in3 print_integer exec_while (integer_min) boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_dup_times exec_s (exec_do*times (exec_eq)) () ())) () ())
Lexicase best errors: [1 0 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Zero cases best program: (integer_stackdepth boolean_not integer_max in3 print_integer exec_while (integer_min) boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_dup_times exec_s (exec_do*times (exec_eq)) () ())) () ())
Zero cases best errors: [1 0 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (517 434 951 1000 518 1000 434 953 434 518)
Population mean number of elite cases: 6.76
Count of perfect (error zero) individuals by case: (517 434 951 0 518 0 434 953 434 518)
Population mean number of perfect (error zero) cases: 4.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 2, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction -72})
Best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush integer_div boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_k (-72) ()) () ())) () ())
Errors: [1 0 0 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 32
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 5.241
Median total errors in population: 5
Error averages by case: (0.483 0.566 0.049 1.0 0.482 1.0 0.566 0.047 0.566 0.482)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 17.222
Average program size in population (points): 23.763
Average percent parens in population: 0.248
Minimum age in population: 27.474365234375
Maximum age in population: 32.09269142150879
Average age in population: 30.22617331123352
Median age in population: 30.28585529327393
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.462
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.421
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 5031217
--- Timings ---
Current time: 1559314389356 milliseconds
Total Time:          52.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.6 seconds, 77.7%
Fitness Testing:      6.3 seconds, 12.1%
Report:               5.2 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -61                
Correct output: 37                  | Program output: 37                 
Correct output: -82                 | Program output: 34                 
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -41                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: 81                 
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: 47                 
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 0                   | Program output: 75                 
Correct output: 10                  | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 95                 
Correct output: 21                  | Program output: 48                 
Correct output: 32                  | Program output: 58                 
Correct output: 4                   | Program output: 92                 
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 99                 
Correct output: 2                   | Program output: 5                  
Correct output: 11                  | Program output: 96                 
Correct output: 27                  | Program output: 81                 
Correct output: 20                  | Program output: 45                 
Correct output: 60                  | Program output: 87                 
Correct output: 24                  | Program output: 58                 
Correct output: 25                  | Program output: 83                 
Correct output: -60                 | Program output: 35                 
Correct output: 22                  | Program output: 55                 
Correct output: -84                 | Program output: 86                 
Correct output: -50                 | Program output: 56                 
Correct output: -85                 | Program output: -2                 
Correct output: -73                 | Program output: -13                
Correct output: -73                 | Program output: 78                 
Correct output: -96                 | Program output: 7                  
Correct output: -72                 | Program output: 52                 
Correct output: -80                 | Program output: 23                 
Correct output: -58                 | Program output: 96                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -54                
Correct output: -38                 | Program output: -12                
Correct output: -76                 | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -1                 
Correct output: -22                 | Program output: 70                 
Correct output: -85                 | Program output: 22                 
Correct output: -97                 | Program output: -6                 
Correct output: -83                 | Program output: -34                
Correct output: -17                 | Program output: 79                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -60                
Correct output: -9                  | Program output: 76                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -12                
Correct output: -32                 | Program output: 3                  
Correct output: -84                 | Program output: -43                
Correct output: -22                 | Program output: 7                  
Correct output: 1                   | Program output: 30                 
Correct output: -59                 | Program output: -3                 
Correct output: -50                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -24                
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: 25                  | Program output: 77                 
Correct output: -47                 | Program output: 78                 
Correct output: -52                 | Program output: 90                 
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -30                
Correct output: -46                 | Program output: 2                  
Correct output: -16                 | Program output: 0                  
Correct output: -58                 | Program output: -35                
Correct output: -34                 | Program output: 97                 
Correct output: -49                 | Program output: 30                 
Correct output: -98                 | Program output: 18                 
Correct output: -22                 | Program output: 12                 
Correct output: -67                 | Program output: 28                 
Correct output: -45                 | Program output: -4                 
Correct output: -58                 | Program output: 65                 
Correct output: -22                 | Program output: 76                 
Correct output: -15                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq})
Lexicase best program: (in4 boolean_not exec_dup (integer_min) print_integer integer_mod exec_while () boolean_yank boolean_pop integer_max integer_max exec_flush integer_eq)
Lexicase best errors: [1 0 1 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 16
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq})
Zero cases best program: (in4 boolean_not exec_dup (integer_min) print_integer integer_mod exec_while () boolean_yank boolean_pop integer_max integer_max exec_flush integer_eq)
Zero cases best errors: [1 0 1 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 16
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 487 1000 1000 459 1000 488 488 459 1000)
Population mean number of elite cases: 7.38
Count of perfect (error zero) individuals by case: (0 487 0 0 459 0 488 488 459 0)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec})
Best program: (in4 boolean_not exec_dup (boolean_flush) print_integer integer_mod integer_min boolean_yank exec_dup_items exec_if (integer_gt integer_eq in2 integer_stackdepth integer_yank integer_dec) ())
Errors: [1 0 1 1 1 1 0 0 1 1]
Total: 7
Mean: 0.7
Genome size: 16
Size: 20
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.619
Median total errors in population: 8
Error averages by case: (1.0 0.513 1.0 1.0 0.541 1.0 0.512 0.512 0.541 1.0)
Error minima by case: (1 0 1 1 0 1 0 0 0 1)
Average genome size in population (length): 17.077
Average program size in population (points): 23.469
Average percent parens in population: 0.246
Minimum age in population: 29.160888671875
Maximum age in population: 33.72766876220703
Average age in population: 31.69773019695282
Median age in population: 31.7341628074646
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 5164743
--- Timings ---
Current time: 1559314391759 milliseconds
Total Time:          54.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.7 seconds, 78.2%
Fitness Testing:      6.5 seconds, 11.8%
Report:               5.3 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 69                 
Correct output: 0                   | Program output: 85                 
Correct output: 10                  | Program output: 42                 
Correct output: 4                   | Program output: 58                 
Correct output: 28                  | Program output: 73                 
Correct output: 21                  | Program output: 33                 
Correct output: 32                  | Program output: 39                 
Correct output: 4                   | Program output: 22                 
Correct output: 17                  | Program output: 84                 
Correct output: 15                  | Program output: 61                 
Correct output: 2                   | Program output: 64                 
Correct output: 11                  | Program output: 59                 
Correct output: 27                  | Program output: 27                 
Correct output: 20                  | Program output: 20                 
Correct output: 60                  | Program output: 97                 
Correct output: 24                  | Program output: 24                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: -59                
Correct output: 22                  | Program output: 22                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 20                 
Correct output: -85                 | Program output: -50                
Correct output: -73                 | Program output: -2                 
Correct output: -73                 | Program output: 71                 
Correct output: -96                 | Program output: 91                 
Correct output: -72                 | Program output: 86                 
Correct output: -80                 | Program output: 33                 
Correct output: -58                 | Program output: 70                 
Correct output: -94                 | Program output: 8                  
Correct output: -89                 | Program output: 13                 
Correct output: -38                 | Program output: 91                 
Correct output: -76                 | Program output: 22                 
Correct output: 0                   | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -84                 | Program output: -77                
Correct output: -22                 | Program output: -22                
Correct output: -85                 | Program output: 92                 
Correct output: -97                 | Program output: -56                
Correct output: -83                 | Program output: 20                 
Correct output: -17                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -4                 
Correct output: -60                 | Program output: -36                
Correct output: -9                  | Program output: 90                 
Correct output: -5                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 6                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 85                 
Correct output: 1                   | Program output: 99                 
Correct output: -59                 | Program output: 45                 
Correct output: -50                 | Program output: 20                 
Correct output: -64                 | Program output: -56                
Correct output: -92                 | Program output: -8                 
Correct output: -91                 | Program output: -9                 
Correct output: -55                 | Program output: -51                
Correct output: 25                  | Program output: 47                 
Correct output: -47                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -34                
Correct output: -34                 | Program output: 90                 
Correct output: -90                 | Program output: 90                 
Correct output: -65                 | Program output: 50                 
Correct output: -26                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -46                 | Program output: 17                 
Correct output: -16                 | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -34                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: -36                
Correct output: -22                 | Program output: 97                 
Correct output: -67                 | Program output: 69                 
Correct output: -45                 | Program output: -26                
Correct output: -58                 | Program output: 8                  
Correct output: -22                 | Program output: 12                 
Correct output: -15                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_add} {:close 0, :instruction print_exec} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Lexicase best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add) (print_exec (integer_mult) exec_s (exec_do*times (exec_eq)) () ()) ())
Lexicase best errors: [0 0 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_add} {:close 0, :instruction print_exec} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Zero cases best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add) (print_exec (integer_mult) exec_s (exec_do*times (exec_eq)) () ()) ())
Zero cases best errors: [0 0 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (390 961 390 1 571 1000 962 1000 962 1000)
Population mean number of elite cases: 7.24
Count of perfect (error zero) individuals by case: (390 961 390 1 571 0 962 0 962 0)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add})
Best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_yank exec_k (integer_max exec_flush) (exec_noop boolean_eq integer_div) exec_rot (integer_add) () ())
Errors: [0 0 0 1 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 16
Size: 23
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 5.763
Median total errors in population: 6
Error averages by case: (0.61 0.039 0.61 0.999 0.429 1.0 0.038 1.0 0.038 1.0)
Error minima by case: (0 0 0 0 0 1 0 1 0 1)
Average genome size in population (length): 17.129
Average program size in population (points): 23.352
Average percent parens in population: 0.241
Minimum age in population: 30.160888671875
Maximum age in population: 34.92223834991455
Average age in population: 33.1266643743515
Median age in population: 33.20166540145874
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.451
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 5295785
--- Timings ---
Current time: 1559314393619 milliseconds
Total Time:          56.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.2 seconds, 78.3%
Fitness Testing:      6.6 seconds, 11.7%
Report:               5.5 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 69                 
Correct output: 0                   | Program output: 85                 
Correct output: 10                  | Program output: 42                 
Correct output: 4                   | Program output: 58                 
Correct output: 28                  | Program output: 73                 
Correct output: 21                  | Program output: 33                 
Correct output: 32                  | Program output: 39                 
Correct output: 4                   | Program output: 22                 
Correct output: 17                  | Program output: 84                 
Correct output: 15                  | Program output: 61                 
Correct output: 2                   | Program output: 64                 
Correct output: 11                  | Program output: 59                 
Correct output: 27                  | Program output: 27                 
Correct output: 20                  | Program output: 20                 
Correct output: 60                  | Program output: 97                 
Correct output: 24                  | Program output: 24                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: -59                
Correct output: 22                  | Program output: 22                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 20                 
Correct output: -85                 | Program output: -50                
Correct output: -73                 | Program output: -2                 
Correct output: -73                 | Program output: 71                 
Correct output: -96                 | Program output: 91                 
Correct output: -72                 | Program output: 86                 
Correct output: -80                 | Program output: 33                 
Correct output: -58                 | Program output: 70                 
Correct output: -94                 | Program output: 8                  
Correct output: -89                 | Program output: 13                 
Correct output: -38                 | Program output: 91                 
Correct output: -76                 | Program output: 22                 
Correct output: 0                   | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -84                 | Program output: -77                
Correct output: -22                 | Program output: -22                
Correct output: -85                 | Program output: 92                 
Correct output: -97                 | Program output: -56                
Correct output: -83                 | Program output: 20                 
Correct output: -17                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -4                 
Correct output: -60                 | Program output: -36                
Correct output: -9                  | Program output: 90                 
Correct output: -5                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 6                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 85                 
Correct output: 1                   | Program output: 99                 
Correct output: -59                 | Program output: 45                 
Correct output: -50                 | Program output: 20                 
Correct output: -64                 | Program output: -56                
Correct output: -92                 | Program output: -8                 
Correct output: -91                 | Program output: -9                 
Correct output: -55                 | Program output: -51                
Correct output: 25                  | Program output: 47                 
Correct output: -47                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -34                
Correct output: -34                 | Program output: 90                 
Correct output: -90                 | Program output: 90                 
Correct output: -65                 | Program output: 50                 
Correct output: -26                 | Program output: 31                 
Correct output: -37                 | Program output: -37                
Correct output: -46                 | Program output: 17                 
Correct output: -16                 | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -34                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: -36                
Correct output: -22                 | Program output: 97                 
Correct output: -67                 | Program output: 69                 
Correct output: -45                 | Program output: -26                
Correct output: -58                 | Program output: 8                  
Correct output: -22                 | Program output: 12                 
Correct output: -15                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 2, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div})
Lexicase best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min integer_min boolean_yank boolean_pop boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div)
Lexicase best errors: [0 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 19
Percent parens: 0.105
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 2, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div})
Zero cases best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min integer_min boolean_yank boolean_pop boolean_yank boolean_pop integer_max exec_flush exec_noop boolean_eq integer_div)
Zero cases best errors: [0 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 19
Percent parens: 0.105
--- Lexicase Population Statistics ---
Count of elite individuals by case: (505 505 743 505 946 238 505 238 1000 1000)
Population mean number of elite cases: 6.18
Count of perfect (error zero) individuals by case: (505 505 743 505 946 238 505 238 0 0)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Best program: (in4 boolean_not exec_dup (in3) print_integer integer_mod integer_min boolean_frominteger boolean_pop integer_max exec_flush exec_dup (in3) print_integer integer_min boolean_empty integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ()))
Errors: [0 0 0 0 0 1 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 22
Size: 30
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 5.815
Median total errors in population: 4
Error averages by case: (0.495 0.495 0.257 0.495 0.054 0.762 0.495 0.762 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 15.716
Average program size in population (points): 20.896
Average percent parens in population: 0.215
Minimum age in population: 31.6112060546875
Maximum age in population: 36.75220775604248
Average age in population: 34.64357149291039
Median age in population: 34.71375346183777
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 187
Genome diversity (% unique genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 192
Syntactic diversity (% unique Push programs):	 0.443
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 5422336
--- Timings ---
Current time: 1559314395561 milliseconds
Total Time:          58.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.9 seconds, 78.6%
Fitness Testing:      6.8 seconds, 11.6%
Report:               5.6 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: 37                  | Program output: 37                 
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 0                   | Program output: 75                 
Correct output: 10                  | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 73                 
Correct output: 21                  | Program output: 33                 
Correct output: 32                  | Program output: 39                 
Correct output: 4                   | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 61                 
Correct output: 2                   | Program output: 5                  
Correct output: 11                  | Program output: 59                 
Correct output: 27                  | Program output: 27                 
Correct output: 20                  | Program output: 20                 
Correct output: 60                  | Program output: 87                 
Correct output: 24                  | Program output: 24                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: -59                
Correct output: 22                  | Program output: 22                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: 20                 
Correct output: -85                 | Program output: -50                
Correct output: -73                 | Program output: -13                
Correct output: -73                 | Program output: 71                 
Correct output: -96                 | Program output: 7                  
Correct output: -72                 | Program output: 52                 
Correct output: -80                 | Program output: 23                 
Correct output: -58                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -54                
Correct output: -38                 | Program output: -12                
Correct output: -76                 | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -77                
Correct output: -22                 | Program output: -22                
Correct output: -85                 | Program output: 22                 
Correct output: -97                 | Program output: -56                
Correct output: -83                 | Program output: -34                
Correct output: -17                 | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -60                
Correct output: -9                  | Program output: 76                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 3                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 7                  
Correct output: 1                   | Program output: 30                 
Correct output: -59                 | Program output: -3                 
Correct output: -50                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -24                
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: 25                  | Program output: 47                 
Correct output: -47                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -37                
Correct output: -46                 | Program output: 2                  
Correct output: -16                 | Program output: 0                  
Correct output: -58                 | Program output: -58                
Correct output: -34                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: -36                
Correct output: -22                 | Program output: 12                 
Correct output: -67                 | Program output: 28                 
Correct output: -45                 | Program output: -26                
Correct output: -58                 | Program output: 8                  
Correct output: -22                 | Program output: 12                 
Correct output: -15                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add})
Lexicase best program: (in4 boolean_not exec_dup (in1) exec_dup (exec_if () (print_integer boolean_dup_times integer_min boolean_yank boolean_pop integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add) () ()))
Lexicase best errors: [1 0 0 1 1 1 1 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add})
Zero cases best program: (in4 boolean_not exec_dup (in1) exec_dup (exec_if () (print_integer boolean_dup_times integer_min boolean_yank boolean_pop integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add) () ()))
Zero cases best errors: [1 0 0 1 1 1 1 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1 1 1000 1000 1000 1000 626 308 1000)
Population mean number of elite cases: 6.94
Count of perfect (error zero) individuals by case: (0 1 1 0 0 0 0 626 308 0)
Population mean number of perfect (error zero) cases: 0.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Best program: (integer_flush integer_flush boolean_not exec_dup (in3) in4 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Errors: [1 1 1 1 1 1 1 0 0 1]
Total: 8
Mean: 0.8
Genome size: 23
Size: 34
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 9.064
Median total errors in population: 9
Error averages by case: (1.0 0.999 0.999 1.0 1.0 1.0 1.0 0.374 0.692 1.0)
Error minima by case: (1 0 0 1 1 1 1 0 0 1)
Average genome size in population (length): 17.121
Average program size in population (points): 23.265
Average percent parens in population: 0.244
Minimum age in population: 32.72597885131836
Maximum age in population: 38.1932373046875
Average age in population: 36.08232435703278
Median age in population: 36.14370405673981
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.511
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 5556007
--- Timings ---
Current time: 1559314397910 milliseconds
Total Time:          60.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.0 seconds, 79.0%
Fitness Testing:      6.9 seconds, 11.4%
Report:               5.8 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -61                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: 34                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: 81                 
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: 47                 
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 26                 
Correct output: 1                   | Program output: 98                 
Correct output: 25                  | Program output: 44                 
Correct output: 38                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 40                 
Correct output: 4                   | Program output: 46                 
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 87                 
Correct output: 4                   | Program output: 33                 
Correct output: 17                  | Program output: 21                 
Correct output: 15                  | Program output: 77                 
Correct output: 2                   | Program output: 83                 
Correct output: 11                  | Program output: 82                 
Correct output: 27                  | Program output: 53                 
Correct output: 20                  | Program output: 39                 
Correct output: 60                  | Program output: 90                 
Correct output: 24                  | Program output: 54                 
Correct output: 25                  | Program output: 89                 
Correct output: -60                 | Program output: 98                 
Correct output: 22                  | Program output: 71                 
Correct output: -84                 | Program output: 79                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -47                
Correct output: -72                 | Program output: 94                 
Correct output: -80                 | Program output: -78                
Correct output: -58                 | Program output: -41                
Correct output: -94                 | Program output: 31                 
Correct output: -89                 | Program output: 20                 
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: -42                
Correct output: 0                   | Program output: 64                 
Correct output: -98                 | Program output: -35                
Correct output: -84                 | Program output: -70                
Correct output: -22                 | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -81                 | Program output: -70                
Correct output: -90                 | Program output: 36                 
Correct output: -60                 | Program output: 87                 
Correct output: -9                  | Program output: 10                 
Correct output: -5                  | Program output: 8                  
Correct output: -53                 | Program output: 58                 
Correct output: -32                 | Program output: 42                 
Correct output: -84                 | Program output: -22                
Correct output: -22                 | Program output: 56                 
Correct output: 1                   | Program output: 55                 
Correct output: -59                 | Program output: -4                 
Correct output: -50                 | Program output: -35                
Correct output: -64                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -82                
Correct output: -55                 | Program output: 91                 
Correct output: 25                  | Program output: 25                 
Correct output: -47                 | Program output: -47                
Correct output: -52                 | Program output: 9                  
Correct output: -90                 | Program output: 48                 
Correct output: -34                 | Program output: 97                 
Correct output: -90                 | Program output: 85                 
Correct output: -65                 | Program output: 13                 
Correct output: -26                 | Program output: -3                 
Correct output: -37                 | Program output: 24                 
Correct output: -46                 | Program output: -34                
Correct output: -16                 | Program output: 51                 
Correct output: -58                 | Program output: 17                 
Correct output: -34                 | Program output: 82                 
Correct output: -49                 | Program output: 30                 
Correct output: -98                 | Program output: 91                 
Correct output: -22                 | Program output: 19                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -58                 | Program output: 75                 
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add})
Lexicase best program: (in4 boolean_not exec_dup (in1) exec_dup (exec_if () (print_integer boolean_dup_times integer_min boolean_yank boolean_pop integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add) () ()))
Lexicase best errors: [1 1 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add})
Zero cases best program: (in4 boolean_not exec_dup (in1) exec_dup (exec_if () (print_integer boolean_dup_times integer_min boolean_yank boolean_pop integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add) () ()))
Zero cases best errors: [1 1 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (473 472 1000 1000 454 1000 935 1000 1000 453)
Population mean number of elite cases: 7.79
Count of perfect (error zero) individuals by case: (473 472 0 0 454 0 935 0 0 453)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add})
Best program: (in4 boolean_not exec_dup (in1) exec_dup (exec_if () (print_integer boolean_dup_times integer_min boolean_yank boolean_pop integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add) () ()))
Errors: [1 1 1 1 0 1 0 1 1 0]
Total: 7
Mean: 0.7
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.213
Median total errors in population: 7
Error averages by case: (0.527 0.528 1.0 1.0 0.546 1.0 0.065 1.0 1.0 0.547)
Error minima by case: (0 0 1 1 0 1 0 1 1 0)
Average genome size in population (length): 20.418
Average program size in population (points): 29.827
Average percent parens in population: 0.314
Minimum age in population: 36.62653493881226
Maximum age in population: 38.10865426063538
Average age in population: 37.34946082413197
Median age in population: 37.10865426063538
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 358
Genome diversity (% unique genomes):	 0.277
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 364
Syntactic diversity (% unique Push programs):	 0.254
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 5702157
--- Timings ---
Current time: 1559314399764 milliseconds
Total Time:          62.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.5 seconds, 79.1%
Fitness Testing:      7.1 seconds, 11.3%
Report:               5.9 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -61                
Correct output: 37                  | Program output: 47                 
Correct output: -82                 | Program output: 34                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: 81                 
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: 47                 
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 26                 
Correct output: 1                   | Program output: 98                 
Correct output: 25                  | Program output: 44                 
Correct output: 38                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 40                 
Correct output: 4                   | Program output: 46                 
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 87                 
Correct output: 4                   | Program output: 33                 
Correct output: 17                  | Program output: 21                 
Correct output: 15                  | Program output: 77                 
Correct output: 2                   | Program output: 83                 
Correct output: 11                  | Program output: 82                 
Correct output: 27                  | Program output: 53                 
Correct output: 20                  | Program output: 39                 
Correct output: 60                  | Program output: 90                 
Correct output: 24                  | Program output: 54                 
Correct output: 25                  | Program output: 89                 
Correct output: -60                 | Program output: 98                 
Correct output: 22                  | Program output: 71                 
Correct output: -84                 | Program output: 79                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -47                
Correct output: -72                 | Program output: 94                 
Correct output: -80                 | Program output: -78                
Correct output: -58                 | Program output: -41                
Correct output: -94                 | Program output: 31                 
Correct output: -89                 | Program output: 20                 
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: -42                
Correct output: 0                   | Program output: 64                 
Correct output: -98                 | Program output: -35                
Correct output: -84                 | Program output: -70                
Correct output: -22                 | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -81                 | Program output: -70                
Correct output: -90                 | Program output: 36                 
Correct output: -60                 | Program output: 87                 
Correct output: -9                  | Program output: 10                 
Correct output: -5                  | Program output: 8                  
Correct output: -53                 | Program output: 58                 
Correct output: -32                 | Program output: 42                 
Correct output: -84                 | Program output: -22                
Correct output: -22                 | Program output: 56                 
Correct output: 1                   | Program output: 55                 
Correct output: -59                 | Program output: -4                 
Correct output: -50                 | Program output: -35                
Correct output: -64                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -82                
Correct output: -55                 | Program output: 91                 
Correct output: 25                  | Program output: 25                 
Correct output: -47                 | Program output: -47                
Correct output: -52                 | Program output: 9                  
Correct output: -90                 | Program output: 48                 
Correct output: -34                 | Program output: 97                 
Correct output: -90                 | Program output: 85                 
Correct output: -65                 | Program output: 13                 
Correct output: -26                 | Program output: -3                 
Correct output: -37                 | Program output: 24                 
Correct output: -46                 | Program output: -34                
Correct output: -16                 | Program output: 51                 
Correct output: -58                 | Program output: 17                 
Correct output: -34                 | Program output: 82                 
Correct output: -49                 | Program output: 30                 
Correct output: -98                 | Program output: 91                 
Correct output: -22                 | Program output: 19                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -58                 | Program output: 75                 
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add})
Lexicase best program: (in4 boolean_not exec_dup (in1) exec_dup (exec_if () (print_integer boolean_dup_times integer_min boolean_yank boolean_pop integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add) () ()))
Lexicase best errors: [1 1 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add})
Zero cases best program: (in4 boolean_not exec_dup (in1) exec_dup (exec_if () (print_integer boolean_dup_times integer_min boolean_yank boolean_pop integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add) () ()))
Zero cases best errors: [1 1 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 427 429 428 1000 912 935 1000 1000)
Population mean number of elite cases: 8.13
Count of perfect (error zero) individuals by case: (0 0 427 429 428 0 912 935 0 0)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add})
Best program: (in4 boolean_not exec_dup (in1) exec_dup (exec_if () (print_integer boolean_dup_times integer_min boolean_yank boolean_pop integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add) () ()))
Errors: [1 1 0 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 6.869
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.573 0.571 0.572 1.0 0.088 0.065 1.0 1.0)
Error minima by case: (1 1 0 0 0 1 0 0 1 1)
Average genome size in population (length): 20.623
Average program size in population (points): 30.099
Average percent parens in population: 0.313
Minimum age in population: 37.62653493881226
Maximum age in population: 40.10865426063538
Average age in population: 38.83242108684778
Median age in population: 38.86759459972382
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 280
Genome diversity (% unique genomes):	 0.379
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 286
Syntactic diversity (% unique Push programs):	 0.355
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 5850317
--- Timings ---
Current time: 1559314401768 milliseconds
Total Time:          64.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.2 seconds, 79.3%
Fitness Testing:      7.2 seconds, 11.2%
Report:               6.1 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 197
Test mean error for best: 0.19700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: 37                  | Program output: 37                 
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 39                 
Correct output: 4                   | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 61                 
Correct output: 2                   | Program output: 5                  
Correct output: 11                  | Program output: 59                 
Correct output: 27                  | Program output: 27                 
Correct output: 20                  | Program output: 20                 
Correct output: 60                  | Program output: 87                 
Correct output: 24                  | Program output: 24                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: -59                
Correct output: 22                  | Program output: 22                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -47                
Correct output: -72                 | Program output: 52                 
Correct output: -80                 | Program output: -78                
Correct output: -58                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -54                
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: -42                
Correct output: 0                   | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -77                
Correct output: -22                 | Program output: -22                
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -60                
Correct output: -9                  | Program output: 10                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 3                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 7                  
Correct output: 1                   | Program output: 30                 
Correct output: -59                 | Program output: -4                 
Correct output: -50                 | Program output: -35                
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -47                 | Program output: -47                
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -37                
Correct output: -46                 | Program output: -34                
Correct output: -16                 | Program output: 0                  
Correct output: -58                 | Program output: -58                
Correct output: -34                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: -36                
Correct output: -22                 | Program output: 12                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -58                 | Program output: 8                  
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Lexicase best program: (in4 boolean_not exec_dup (in1) in3 in4 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 34
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Zero cases best program: (in4 boolean_not exec_dup (in1) in3 in4 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 34
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (910 5 912 918 5 12 11 910 1 5)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (910 5 912 918 5 12 11 910 1 5)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Best program: (in4 boolean_not exec_dup (in1) in3 in4 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 23
Size: 34
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.311
Median total errors in population: 6
Error averages by case: (0.09 0.995 0.088 0.082 0.995 0.988 0.989 0.09 0.999 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.303
Average program size in population (points): 26.468
Average percent parens in population: 0.308
Minimum age in population: 38.74706476926804
Maximum age in population: 41.9881244301796
Average age in population: 40.467245618999
Median age in population: 40.4881244301796
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 476
Genome diversity (% unique genomes):	 0.314
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 497
Syntactic diversity (% unique Push programs):	 0.304
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 5997415
--- Timings ---
Current time: 1559314403964 milliseconds
Total Time:          66.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        53.1 seconds, 79.5%
Fitness Testing:      7.4 seconds, 11.0%
Report:               6.2 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 197
Test mean error for best: 0.19700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: 37                  | Program output: 37                 
Correct output: -82                 | Program output: -82                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 39                 
Correct output: 4                   | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 61                 
Correct output: 2                   | Program output: 5                  
Correct output: 11                  | Program output: 59                 
Correct output: 27                  | Program output: 27                 
Correct output: 20                  | Program output: 20                 
Correct output: 60                  | Program output: 87                 
Correct output: 24                  | Program output: 24                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: -59                
Correct output: 22                  | Program output: 22                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -47                
Correct output: -72                 | Program output: 52                 
Correct output: -80                 | Program output: -78                
Correct output: -58                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -54                
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: -42                
Correct output: 0                   | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -77                
Correct output: -22                 | Program output: -22                
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -60                
Correct output: -9                  | Program output: 10                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -32                 | Program output: 3                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 7                  
Correct output: 1                   | Program output: 30                 
Correct output: -59                 | Program output: -4                 
Correct output: -50                 | Program output: -35                
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -47                 | Program output: -47                
Correct output: -52                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -37                
Correct output: -46                 | Program output: -34                
Correct output: -16                 | Program output: 0                  
Correct output: -58                 | Program output: -58                
Correct output: -34                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: -36                
Correct output: -22                 | Program output: 12                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -58                 | Program output: 8                  
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Lexicase best program: (in4 boolean_not exec_dup (in1) in3 in4 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_s (exec_do*times (exec_eq)) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 22
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Zero cases best program: (in4 boolean_not exec_dup (in1) in3 in4 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_s (exec_do*times (exec_eq)) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 22
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (788 803 802 809 803 810 809 130 801 130)
Population mean number of elite cases: 6.68
Count of perfect (error zero) individuals by case: (788 803 802 809 803 810 809 130 801 130)
Population mean number of perfect (error zero) cases: 6.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod})
Best program: (in4 boolean_not exec_dup (in1) in3 in4 boolean_not exec_dup (integer_min) print_integer integer_mod)
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 11
Size: 14
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 3.315
Median total errors in population: 2
Error averages by case: (0.212 0.197 0.198 0.191 0.197 0.19 0.191 0.87 0.199 0.87)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.789
Average program size in population (points): 30.247
Average percent parens in population: 0.313
Minimum age in population: 39.9881244301796
Maximum age in population: 42.86759459972382
Average age in population: 41.47130983784795
Median age in population: 41.42785951495171
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 407
Genome diversity (% unique genomes):	 0.282
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 425
Syntactic diversity (% unique Push programs):	 0.254
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 6148738
--- Timings ---
Current time: 1559314405707 milliseconds
Total Time:          68.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        54.5 seconds, 79.5%
Fitness Testing:      7.5 seconds, 11.0%
Report:               6.4 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 210
Test mean error for best: 0.21000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -61                
Correct output: 37                  | Program output: 37                 
Correct output: -82                 | Program output: 34                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: 81                 
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: 47                 
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 44                 
Correct output: 38                  | Program output: 38                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 32                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 53                 
Correct output: 20                  | Program output: 39                 
Correct output: 60                  | Program output: 60                 
Correct output: 24                  | Program output: 54                 
Correct output: 25                  | Program output: 63                 
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 40                 
Correct output: -84                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: -76                
Correct output: 0                   | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -81                 | Program output: -70                
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -60                
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -21                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -43                
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: -59                 | Program output: -59                
Correct output: -50                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -47                 | Program output: -47                
Correct output: -52                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -65                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -30                
Correct output: -46                 | Program output: -46                
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -42                
Correct output: -34                 | Program output: -32                
Correct output: -49                 | Program output: 30                 
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Lexicase best program: (in4 boolean_not exec_s (in1) (in3) (in2 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 36
Percent parens: 0.361
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Zero cases best program: (in4 boolean_not exec_s (in1) (in3) (in2 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 36
Percent parens: 0.361
--- Lexicase Population Statistics ---
Count of elite individuals by case: (767 958 766 959 958 622 480 623 939 480)
Population mean number of elite cases: 7.55
Count of perfect (error zero) individuals by case: (767 958 766 959 958 622 480 623 939 480)
Population mean number of perfect (error zero) cases: 7.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq})
Best program: (in4 boolean_not exec_s (in1) (in3) (in2 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 23
Size: 36
Percent parens: 0.361
--- Population Statistics ---
Average total errors in population: 2.448
Median total errors in population: 2
Error averages by case: (0.233 0.042 0.234 0.041 0.042 0.378 0.52 0.377 0.061 0.52)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.703
Average program size in population (points): 32.769
Average percent parens in population: 0.305
Minimum age in population: 40.9881244301796
Maximum age in population: 44.61759459972382
Average age in population: 43.40673897412419
Median age in population: 43.36759459972382
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 224
Genome diversity (% unique genomes):	 0.38
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 233
Syntactic diversity (% unique Push programs):	 0.34
Total error diversity:				 0.009
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 6299208
--- Timings ---
Current time: 1559314407946 milliseconds
Total Time:          70.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        56.4 seconds, 79.7%
Fitness Testing:      7.7 seconds, 10.9%
Report:               6.5 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 29
Successful program: (in4 boolean_not exec_s (in1) (in3) (in2 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 36


Auto-simplifying with starting size: 36
step: 0
program: (in4 boolean_not exec_s (in1) (in3) (in2 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 500
program: (in4 boolean_not exec_s (in1) (in3) (in2 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 1000
program: (in4 boolean_not exec_s (in1) (in3) (in2 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 1500
program: (in4 boolean_not exec_s (in1) (in3) (in2 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 2000
program: (in4 boolean_not exec_s (in1) (in3) (in2 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 2500
program: (in4 boolean_not exec_s (in1) (in3) (in2 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 3000
program: (in4 boolean_not exec_s (in1) (in3) (in2 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 3500
program: (in4 boolean_not exec_s (in1) (in3) (in2 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 4000
program: (in4 boolean_not exec_s (in1) (in3) (in2 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 4500
program: (in4 boolean_not exec_s (in1) (in3) (in2 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

step: 5000
program: (in4 boolean_not exec_s (in1) (in3) (in2 boolean_not exec_dup (integer_min) print_integer integer_mod integer_max exec_flush) exec_noop boolean_eq integer_div exec_rot (integer_add print_exec (integer_mult exec_s (exec_do*times (exec_eq)) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 36

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 210
Test mean error for best: 0.21000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -61                
Correct output: 37                  | Program output: 37                 
Correct output: -82                 | Program output: 34                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 46                  | Program output: 46                 
Correct output: -81                 | Program output: 81                 
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: 47                 
Correct output: 45                  | Program output: 45                 
Correct output: -23                 | Program output: -23                
Correct output: 23                  | Program output: 23                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 25                  | Program output: 44                 
Correct output: 38                  | Program output: 38                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 32                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 53                 
Correct output: 20                  | Program output: 39                 
Correct output: 60                  | Program output: 60                 
Correct output: 24                  | Program output: 54                 
Correct output: 25                  | Program output: 63                 
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 40                 
Correct output: -84                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: -76                
Correct output: 0                   | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -81                 | Program output: -70                
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -60                
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -21                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -43                
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: -59                 | Program output: -59                
Correct output: -50                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -47                 | Program output: -47                
Correct output: -52                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -65                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -30                
Correct output: -46                 | Program output: -46                
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -42                
Correct output: -34                 | Program output: -32                
Correct output: -49                 | Program output: 30                 
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: -5                 
;;******************************
