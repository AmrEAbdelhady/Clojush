Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[2 4 4 4] 2] [[69 69 -52 69] -52] [[35 35 -76 35] -76] [[-62 41 -62 -62] -62] [[82 13 13 13] 13] [[-33 -73 -73 -73] -73] [[11 11 11 -5] -5] [[16 16 -46 16] -46] [[-13 -50 -50 -50] -50] [[85 85 85 -6] -6] [(-50 -50 -50 -50) -50] [(46 46 46 46) 46] [(7 7 7 7) 7] [(-10 -10 -10 -10) -10] [(1 1 1 1) 1] [(75 89 78 81) 75] [(87 66 32 47) 32] [(11 1 31 19) 1] [(82 80 54 38) 38] [(75 48 5 88) 5] [(2 33 52 28) 2] [(86 51 62 49) 49] [(61 37 53 98) 37] [(87 0 40 31) 0] [(91 60 42 96) 42] [(98 37 78 7) 7] [(82 33 4 67) 4] [(71 78 21 54) 21] [(87 13 39 88) 13] [(88 96 12 47) 12] [(88 32 49 88) 32] [(96 15 24 93) 15] [(42 25 50 61) 25] [(56 16 97 86) 16] [(31 81 65 10) 10] [(18 -30 -64 95) -64] [(21 32 -33 47) -33] [(-2 -72 0 -77) -77] [(52 4 -73 11) -73] [(64 -85 39 -16) -85] [(-72 82 -32 -40) -72] [(16 -83 -79 -95) -95] [(-7 -39 35 76) -39] [(50 -97 -64 -9) -97] [(100 54 -65 -2) -65] [(51 -49 100 53) -49] [(70 -33 9 -24) -33] [(92 -12 98 -34) -34] [(59 -58 22 -83) -83] [(-33 94 -63 -72) -72] [(19 79 -68 -38) -68] [(75 80 -37 -23) -37] [(-73 -72 52 -53) -73] [(-16 92 -100 -8) -100] [(-31 -84 -57 -44) -84] [(-20 -8 61 -74) -74] [(-78 -62 -51 37) -78] [(-27 -80 16 39) -80] [(6 -27 69 -48) -48] [(66 -51 10 -31) -51] [(-96 10 -53 -21) -96] [(31 -22 -4 -15) -22] [(-99 -10 -93 -64) -99] [(-60 -51 -6 -7) -60] [(57 30 -99 -1) -99] [(60 -71 25 39) -71] [(14 -13 -21 65) -21] [(-49 82 34 84) -49] [(-52 73 30 -99) -99] [(0 -85 2 59) -85] [(58 -74 -76 -91) -91] [(-5 57 56 70) -5] [(-93 -5 -37 -56) -93] [(-37 -61 -99 76) -99] [(11 17 46 -1) -1] [(-93 -6 -21 34) -93] [(-98 75 -29 26) -98] [(-12 -70 46 55) -70] [(-95 14 71 24) -95] [(44 -6 88 -95) -95] [(2 -21 -32 -47) -47] [(85 -95 59 -77) -95] [(79 49 72 20) 20] [(66 55 73 -34) -34] [(-6 36 -20 17) -20] [(-14 -75 55 -95) -95] [(-94 66 18 -83) -94] [(92 92 4 -61) -61] [(-69 -94 -32 -79) -94] [(-22 24 2 -57) -57] [(-20 78 64 -56) -56] [(-39 6 -21 80) -39] [(83 -92 49 99) -92] [(54 42 -56 55) -56] [(5 92 -29 55) -29])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[2 4 4 4] 2]
Train Case:   6 | Input/Output: [[69 69 -52 69] -52]
Train Case:   7 | Input/Output: [[35 35 -76 35] -76]
Train Case:   8 | Input/Output: [[-62 41 -62 -62] -62]
Train Case:   9 | Input/Output: [[82 13 13 13] 13]
Train Case:  10 | Input/Output: [[-33 -73 -73 -73] -73]
Train Case:  11 | Input/Output: [[11 11 11 -5] -5]
Train Case:  12 | Input/Output: [[16 16 -46 16] -46]
Train Case:  13 | Input/Output: [[-13 -50 -50 -50] -50]
Train Case:  14 | Input/Output: [[85 85 85 -6] -6]
Train Case:  15 | Input/Output: [(-50 -50 -50 -50) -50]
Train Case:  16 | Input/Output: [(46 46 46 46) 46]
Train Case:  17 | Input/Output: [(7 7 7 7) 7]
Train Case:  18 | Input/Output: [(-10 -10 -10 -10) -10]
Train Case:  19 | Input/Output: [(1 1 1 1) 1]
Train Case:  20 | Input/Output: [(75 89 78 81) 75]
Train Case:  21 | Input/Output: [(87 66 32 47) 32]
Train Case:  22 | Input/Output: [(11 1 31 19) 1]
Train Case:  23 | Input/Output: [(82 80 54 38) 38]
Train Case:  24 | Input/Output: [(75 48 5 88) 5]
Train Case:  25 | Input/Output: [(2 33 52 28) 2]
Train Case:  26 | Input/Output: [(86 51 62 49) 49]
Train Case:  27 | Input/Output: [(61 37 53 98) 37]
Train Case:  28 | Input/Output: [(87 0 40 31) 0]
Train Case:  29 | Input/Output: [(91 60 42 96) 42]
Train Case:  30 | Input/Output: [(98 37 78 7) 7]
Train Case:  31 | Input/Output: [(82 33 4 67) 4]
Train Case:  32 | Input/Output: [(71 78 21 54) 21]
Train Case:  33 | Input/Output: [(87 13 39 88) 13]
Train Case:  34 | Input/Output: [(88 96 12 47) 12]
Train Case:  35 | Input/Output: [(88 32 49 88) 32]
Train Case:  36 | Input/Output: [(96 15 24 93) 15]
Train Case:  37 | Input/Output: [(42 25 50 61) 25]
Train Case:  38 | Input/Output: [(56 16 97 86) 16]
Train Case:  39 | Input/Output: [(31 81 65 10) 10]
Train Case:  40 | Input/Output: [(18 -30 -64 95) -64]
Train Case:  41 | Input/Output: [(21 32 -33 47) -33]
Train Case:  42 | Input/Output: [(-2 -72 0 -77) -77]
Train Case:  43 | Input/Output: [(52 4 -73 11) -73]
Train Case:  44 | Input/Output: [(64 -85 39 -16) -85]
Train Case:  45 | Input/Output: [(-72 82 -32 -40) -72]
Train Case:  46 | Input/Output: [(16 -83 -79 -95) -95]
Train Case:  47 | Input/Output: [(-7 -39 35 76) -39]
Train Case:  48 | Input/Output: [(50 -97 -64 -9) -97]
Train Case:  49 | Input/Output: [(100 54 -65 -2) -65]
Train Case:  50 | Input/Output: [(51 -49 100 53) -49]
Train Case:  51 | Input/Output: [(70 -33 9 -24) -33]
Train Case:  52 | Input/Output: [(92 -12 98 -34) -34]
Train Case:  53 | Input/Output: [(59 -58 22 -83) -83]
Train Case:  54 | Input/Output: [(-33 94 -63 -72) -72]
Train Case:  55 | Input/Output: [(19 79 -68 -38) -68]
Train Case:  56 | Input/Output: [(75 80 -37 -23) -37]
Train Case:  57 | Input/Output: [(-73 -72 52 -53) -73]
Train Case:  58 | Input/Output: [(-16 92 -100 -8) -100]
Train Case:  59 | Input/Output: [(-31 -84 -57 -44) -84]
Train Case:  60 | Input/Output: [(-20 -8 61 -74) -74]
Train Case:  61 | Input/Output: [(-78 -62 -51 37) -78]
Train Case:  62 | Input/Output: [(-27 -80 16 39) -80]
Train Case:  63 | Input/Output: [(6 -27 69 -48) -48]
Train Case:  64 | Input/Output: [(66 -51 10 -31) -51]
Train Case:  65 | Input/Output: [(-96 10 -53 -21) -96]
Train Case:  66 | Input/Output: [(31 -22 -4 -15) -22]
Train Case:  67 | Input/Output: [(-99 -10 -93 -64) -99]
Train Case:  68 | Input/Output: [(-60 -51 -6 -7) -60]
Train Case:  69 | Input/Output: [(57 30 -99 -1) -99]
Train Case:  70 | Input/Output: [(60 -71 25 39) -71]
Train Case:  71 | Input/Output: [(14 -13 -21 65) -21]
Train Case:  72 | Input/Output: [(-49 82 34 84) -49]
Train Case:  73 | Input/Output: [(-52 73 30 -99) -99]
Train Case:  74 | Input/Output: [(0 -85 2 59) -85]
Train Case:  75 | Input/Output: [(58 -74 -76 -91) -91]
Train Case:  76 | Input/Output: [(-5 57 56 70) -5]
Train Case:  77 | Input/Output: [(-93 -5 -37 -56) -93]
Train Case:  78 | Input/Output: [(-37 -61 -99 76) -99]
Train Case:  79 | Input/Output: [(11 17 46 -1) -1]
Train Case:  80 | Input/Output: [(-93 -6 -21 34) -93]
Train Case:  81 | Input/Output: [(-98 75 -29 26) -98]
Train Case:  82 | Input/Output: [(-12 -70 46 55) -70]
Train Case:  83 | Input/Output: [(-95 14 71 24) -95]
Train Case:  84 | Input/Output: [(44 -6 88 -95) -95]
Train Case:  85 | Input/Output: [(2 -21 -32 -47) -47]
Train Case:  86 | Input/Output: [(85 -95 59 -77) -95]
Train Case:  87 | Input/Output: [(79 49 72 20) 20]
Train Case:  88 | Input/Output: [(66 55 73 -34) -34]
Train Case:  89 | Input/Output: [(-6 36 -20 17) -20]
Train Case:  90 | Input/Output: [(-14 -75 55 -95) -95]
Train Case:  91 | Input/Output: [(-94 66 18 -83) -94]
Train Case:  92 | Input/Output: [(92 92 4 -61) -61]
Train Case:  93 | Input/Output: [(-69 -94 -32 -79) -94]
Train Case:  94 | Input/Output: [(-22 24 2 -57) -57]
Train Case:  95 | Input/Output: [(-20 78 64 -56) -56]
Train Case:  96 | Input/Output: [(-39 6 -21 80) -39]
Train Case:  97 | Input/Output: [(83 -92 49 99) -92]
Train Case:  98 | Input/Output: [(54 42 -56 55) -56]
Train Case:  99 | Input/Output: [(5 92 -29 55) -29]
Test Case:   0 | Input/Output: [[-15 -15 46 -15] -15]
Test Case:   1 | Input/Output: [[-57 -57 47 -57] -57]
Test Case:   2 | Input/Output: [[55 55 38 55] 38]
Test Case:   3 | Input/Output: [[61 61 -60 61] -60]
Test Case:   4 | Input/Output: [[17 17 17 -6] -6]
Test Case:   5 | Input/Output: [[-27 -27 -27 -20] -27]
Test Case:   6 | Input/Output: [[27 27 27 -58] -58]
Test Case:   7 | Input/Output: [[-29 -48 -48 -48] -48]
Test Case:   8 | Input/Output: [[84 -23 -23 -23] -23]
Test Case:   9 | Input/Output: [[-6 -24 -6 -6] -24]
Test Case:  10 | Input/Output: [[-41 -28 -41 -41] -41]
Test Case:  11 | Input/Output: [[3 -64 3 3] -64]
Test Case:  12 | Input/Output: [[93 93 -30 93] -30]
Test Case:  13 | Input/Output: [[92 92 57 92] 57]
Test Case:  14 | Input/Output: [[46 55 46 46] 46]
Test Case:  15 | Input/Output: [[23 -92 23 23] -92]
Test Case:  16 | Input/Output: [[-70 14 -70 -70] -70]
Test Case:  17 | Input/Output: [[53 17 17 17] 17]
Test Case:  18 | Input/Output: [[90 90 90 28] 28]
Test Case:  19 | Input/Output: [[54 -20 -20 -20] -20]
Test Case:  20 | Input/Output: [[-19 -19 -19 12] -19]
Test Case:  21 | Input/Output: [[65 65 65 22] 22]
Test Case:  22 | Input/Output: [[-87 58 58 58] -87]
Test Case:  23 | Input/Output: [[-66 -85 -85 -85] -85]
Test Case:  24 | Input/Output: [[-96 90 90 90] -96]
Test Case:  25 | Input/Output: [[-99 -99 34 -99] -99]
Test Case:  26 | Input/Output: [[97 97 97 -1] -1]
Test Case:  27 | Input/Output: [[-78 -94 -94 -94] -94]
Test Case:  28 | Input/Output: [[-96 -96 -96 40] -96]
Test Case:  29 | Input/Output: [[-62 -62 24 -62] -62]
Test Case:  30 | Input/Output: [[66 66 85 66] 66]
Test Case:  31 | Input/Output: [[-64 -64 -64 84] -64]
Test Case:  32 | Input/Output: [[35 35 -71 35] -71]
Test Case:  33 | Input/Output: [[53 77 53 53] 53]
Test Case:  34 | Input/Output: [[-46 -6 -6 -6] -46]
Test Case:  35 | Input/Output: [[-18 -10 -10 -10] -18]
Test Case:  36 | Input/Output: [[-25 -25 -25 51] -25]
Test Case:  37 | Input/Output: [[54 4 4 4] 4]
Test Case:  38 | Input/Output: [[15 33 33 33] 15]
Test Case:  39 | Input/Output: [[-88 17 17 17] -88]
Test Case:  40 | Input/Output: [[-33 -33 -33 -8] -33]
Test Case:  41 | Input/Output: [[-80 -80 -100 -80] -100]
Test Case:  42 | Input/Output: [[-64 -64 -69 -64] -69]
Test Case:  43 | Input/Output: [[-91 -91 -91 -52] -91]
Test Case:  44 | Input/Output: [[27 27 27 -75] -75]
Test Case:  45 | Input/Output: [[48 48 39 48] 39]
Test Case:  46 | Input/Output: [[-25 -51 -51 -51] -51]
Test Case:  47 | Input/Output: [[61 61 61 34] 34]
Test Case:  48 | Input/Output: [[-27 64 -27 -27] -27]
Test Case:  49 | Input/Output: [[44 44 44 31] 31]
Test Case:  50 | Input/Output: [[49 -52 49 49] -52]
Test Case:  51 | Input/Output: [[79 22 79 79] 22]
Test Case:  52 | Input/Output: [[36 8 36 36] 8]
Test Case:  53 | Input/Output: [[20 20 20 45] 20]
Test Case:  54 | Input/Output: [[-31 38 38 38] -31]
Test Case:  55 | Input/Output: [[-5 75 75 75] -5]
Test Case:  56 | Input/Output: [[79 79 79 -41] -41]
Test Case:  57 | Input/Output: [[-30 -57 -57 -57] -57]
Test Case:  58 | Input/Output: [[0 -58 0 0] -58]
Test Case:  59 | Input/Output: [[-51 -25 -25 -25] -51]
Test Case:  60 | Input/Output: [[-48 -48 -48 30] -48]
Test Case:  61 | Input/Output: [[62 11 11 11] 11]
Test Case:  62 | Input/Output: [[60 99 60 60] 60]
Test Case:  63 | Input/Output: [[-10 -10 13 -10] -10]
Test Case:  64 | Input/Output: [[-78 -78 26 -78] -78]
Test Case:  65 | Input/Output: [[90 72 90 90] 72]
Test Case:  66 | Input/Output: [[65 65 65 -63] -63]
Test Case:  67 | Input/Output: [[55 55 55 -41] -41]
Test Case:  68 | Input/Output: [[41 47 47 47] 41]
Test Case:  69 | Input/Output: [[-79 -79 -79 61] -79]
Test Case:  70 | Input/Output: [[-15 15 -15 -15] -15]
Test Case:  71 | Input/Output: [[-88 -81 -88 -88] -88]
Test Case:  72 | Input/Output: [[-91 -91 -91 -39] -91]
Test Case:  73 | Input/Output: [[-57 -44 -44 -44] -57]
Test Case:  74 | Input/Output: [[-73 -73 -73 11] -73]
Test Case:  75 | Input/Output: [[29 -15 29 29] -15]
Test Case:  76 | Input/Output: [[74 74 74 -61] -61]
Test Case:  77 | Input/Output: [[19 19 -35 19] -35]
Test Case:  78 | Input/Output: [[25 25 53 25] 25]
Test Case:  79 | Input/Output: [[-32 59 59 59] -32]
Test Case:  80 | Input/Output: [[57 57 43 57] 43]
Test Case:  81 | Input/Output: [[62 2 62 62] 2]
Test Case:  82 | Input/Output: [[-99 -99 -99 68] -99]
Test Case:  83 | Input/Output: [[32 99 99 99] 32]
Test Case:  84 | Input/Output: [[15 15 71 15] 15]
Test Case:  85 | Input/Output: [[66 66 -89 66] -89]
Test Case:  86 | Input/Output: [[10 10 10 95] 10]
Test Case:  87 | Input/Output: [[69 92 92 92] 69]
Test Case:  88 | Input/Output: [[79 36 79 79] 36]
Test Case:  89 | Input/Output: [[8 8 72 8] 8]
Test Case:  90 | Input/Output: [[-6 -6 -30 -6] -30]
Test Case:  91 | Input/Output: [[-2 -2 -2 -24] -24]
Test Case:  92 | Input/Output: [[-36 -36 -10 -36] -36]
Test Case:  93 | Input/Output: [[-48 -48 -48 96] -48]
Test Case:  94 | Input/Output: [[39 39 39 -88] -88]
Test Case:  95 | Input/Output: [[90 27 90 90] 27]
Test Case:  96 | Input/Output: [[82 81 81 81] 81]
Test Case:  97 | Input/Output: [[62 62 94 62] 62]
Test Case:  98 | Input/Output: [[32 -65 -65 -65] -65]
Test Case:  99 | Input/Output: [[72 72 72 5] 5]
Test Case: 100 | Input/Output: [(70 70 70 70) 70]
Test Case: 101 | Input/Output: [(20 20 20 20) 20]
Test Case: 102 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 103 | Input/Output: [(9 9 9 9) 9]
Test Case: 104 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 105 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 106 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 107 | Input/Output: [(22 22 22 22) 22]
Test Case: 108 | Input/Output: [(40 40 40 40) 40]
Test Case: 109 | Input/Output: [(83 83 83 83) 83]
Test Case: 110 | Input/Output: [(35 35 35 35) 35]
Test Case: 111 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 112 | Input/Output: [(76 76 76 76) 76]
Test Case: 113 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 114 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 115 | Input/Output: [(71 71 71 71) 71]
Test Case: 116 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 117 | Input/Output: [(66 66 66 66) 66]
Test Case: 118 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 119 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 120 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 121 | Input/Output: [(90 90 90 90) 90]
Test Case: 122 | Input/Output: [(95 95 95 95) 95]
Test Case: 123 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 124 | Input/Output: [(69 69 69 69) 69]
Test Case: 125 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 126 | Input/Output: [(32 32 32 32) 32]
Test Case: 127 | Input/Output: [(68 68 68 68) 68]
Test Case: 128 | Input/Output: [(92 92 92 92) 92]
Test Case: 129 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 130 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 131 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 132 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 133 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 134 | Input/Output: [(7 7 7 7) 7]
Test Case: 135 | Input/Output: [(25 25 25 25) 25]
Test Case: 136 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 137 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 138 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 139 | Input/Output: [(27 27 27 27) 27]
Test Case: 140 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 141 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 142 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 143 | Input/Output: [(30 30 30 30) 30]
Test Case: 144 | Input/Output: [(49 49 49 49) 49]
Test Case: 145 | Input/Output: [(99 99 99 99) 99]
Test Case: 146 | Input/Output: [(23 23 23 23) 23]
Test Case: 147 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 148 | Input/Output: [(72 72 72 72) 72]
Test Case: 149 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 150 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 151 | Input/Output: [(20 20 20 20) 20]
Test Case: 152 | Input/Output: [(20 20 20 20) 20]
Test Case: 153 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 154 | Input/Output: [(20 20 20 20) 20]
Test Case: 155 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 156 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 157 | Input/Output: [(13 13 13 13) 13]
Test Case: 158 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 159 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 160 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 161 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 162 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 163 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 164 | Input/Output: [(79 79 79 79) 79]
Test Case: 165 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 166 | Input/Output: [(49 49 49 49) 49]
Test Case: 167 | Input/Output: [(95 95 95 95) 95]
Test Case: 168 | Input/Output: [(84 84 84 84) 84]
Test Case: 169 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 170 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 171 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 172 | Input/Output: [(45 45 45 45) 45]
Test Case: 173 | Input/Output: [(22 22 22 22) 22]
Test Case: 174 | Input/Output: [(94 94 94 94) 94]
Test Case: 175 | Input/Output: [(2 2 2 2) 2]
Test Case: 176 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 177 | Input/Output: [(92 92 92 92) 92]
Test Case: 178 | Input/Output: [(57 57 57 57) 57]
Test Case: 179 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 180 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 181 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 182 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 183 | Input/Output: [(76 76 76 76) 76]
Test Case: 184 | Input/Output: [(37 37 37 37) 37]
Test Case: 185 | Input/Output: [(49 49 49 49) 49]
Test Case: 186 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 187 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 188 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 189 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 190 | Input/Output: [(76 76 76 76) 76]
Test Case: 191 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 192 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 193 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 194 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 195 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 196 | Input/Output: [(6 6 6 6) 6]
Test Case: 197 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 198 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 199 | Input/Output: [(45 45 45 45) 45]
Test Case: 200 | Input/Output: [(80 69 77 34) 34]
Test Case: 201 | Input/Output: [(25 50 41 48) 25]
Test Case: 202 | Input/Output: [(56 28 98 61) 28]
Test Case: 203 | Input/Output: [(52 41 33 79) 33]
Test Case: 204 | Input/Output: [(15 49 11 38) 11]
Test Case: 205 | Input/Output: [(63 25 36 22) 22]
Test Case: 206 | Input/Output: [(0 14 34 85) 0]
Test Case: 207 | Input/Output: [(55 15 32 43) 15]
Test Case: 208 | Input/Output: [(19 5 62 45) 5]
Test Case: 209 | Input/Output: [(99 64 73 32) 32]
Test Case: 210 | Input/Output: [(54 40 95 41) 40]
Test Case: 211 | Input/Output: [(47 40 95 14) 14]
Test Case: 212 | Input/Output: [(23 55 8 73) 8]
Test Case: 213 | Input/Output: [(28 80 67 77) 28]
Test Case: 214 | Input/Output: [(15 12 68 77) 12]
Test Case: 215 | Input/Output: [(90 97 73 85) 73]
Test Case: 216 | Input/Output: [(91 64 40 92) 40]
Test Case: 217 | Input/Output: [(79 2 52 17) 2]
Test Case: 218 | Input/Output: [(61 56 26 18) 18]
Test Case: 219 | Input/Output: [(31 95 9 22) 9]
Test Case: 220 | Input/Output: [(7 10 81 71) 7]
Test Case: 221 | Input/Output: [(22 60 18 21) 18]
Test Case: 222 | Input/Output: [(69 9 41 63) 9]
Test Case: 223 | Input/Output: [(21 9 79 40) 9]
Test Case: 224 | Input/Output: [(43 53 38 12) 12]
Test Case: 225 | Input/Output: [(26 92 85 42) 26]
Test Case: 226 | Input/Output: [(60 76 49 59) 49]
Test Case: 227 | Input/Output: [(64 95 51 62) 51]
Test Case: 228 | Input/Output: [(51 8 68 13) 8]
Test Case: 229 | Input/Output: [(27 75 90 16) 16]
Test Case: 230 | Input/Output: [(90 40 47 72) 40]
Test Case: 231 | Input/Output: [(68 0 29 82) 0]
Test Case: 232 | Input/Output: [(53 96 61 53) 53]
Test Case: 233 | Input/Output: [(7 87 60 84) 7]
Test Case: 234 | Input/Output: [(26 44 42 48) 26]
Test Case: 235 | Input/Output: [(89 9 74 8) 8]
Test Case: 236 | Input/Output: [(46 28 92 11) 11]
Test Case: 237 | Input/Output: [(16 10 1 91) 1]
Test Case: 238 | Input/Output: [(97 85 15 100) 15]
Test Case: 239 | Input/Output: [(86 56 35 85) 35]
Test Case: 240 | Input/Output: [(11 54 59 24) 11]
Test Case: 241 | Input/Output: [(42 95 77 81) 42]
Test Case: 242 | Input/Output: [(67 22 68 1) 1]
Test Case: 243 | Input/Output: [(0 83 20 32) 0]
Test Case: 244 | Input/Output: [(83 73 73 8) 8]
Test Case: 245 | Input/Output: [(97 37 55 59) 37]
Test Case: 246 | Input/Output: [(100 5 24 82) 5]
Test Case: 247 | Input/Output: [(98 10 77 91) 10]
Test Case: 248 | Input/Output: [(40 30 71 20) 20]
Test Case: 249 | Input/Output: [(98 34 17 34) 17]
Test Case: 250 | Input/Output: [(92 4 28 71) 4]
Test Case: 251 | Input/Output: [(57 25 48 44) 25]
Test Case: 252 | Input/Output: [(58 76 67 39) 39]
Test Case: 253 | Input/Output: [(19 74 47 27) 19]
Test Case: 254 | Input/Output: [(19 54 27 77) 19]
Test Case: 255 | Input/Output: [(99 45 63 40) 40]
Test Case: 256 | Input/Output: [(12 47 87 12) 12]
Test Case: 257 | Input/Output: [(47 23 2 21) 2]
Test Case: 258 | Input/Output: [(22 61 12 74) 12]
Test Case: 259 | Input/Output: [(49 4 53 85) 4]
Test Case: 260 | Input/Output: [(95 74 48 52) 48]
Test Case: 261 | Input/Output: [(22 75 100 71) 22]
Test Case: 262 | Input/Output: [(98 39 47 25) 25]
Test Case: 263 | Input/Output: [(81 16 2 35) 2]
Test Case: 264 | Input/Output: [(47 89 43 17) 17]
Test Case: 265 | Input/Output: [(39 97 81 14) 14]
Test Case: 266 | Input/Output: [(25 48 45 34) 25]
Test Case: 267 | Input/Output: [(22 11 15 15) 11]
Test Case: 268 | Input/Output: [(13 25 77 52) 13]
Test Case: 269 | Input/Output: [(73 5 73 47) 5]
Test Case: 270 | Input/Output: [(98 23 100 33) 23]
Test Case: 271 | Input/Output: [(63 41 92 91) 41]
Test Case: 272 | Input/Output: [(51 27 83 50) 27]
Test Case: 273 | Input/Output: [(1 61 15 78) 1]
Test Case: 274 | Input/Output: [(67 19 17 94) 17]
Test Case: 275 | Input/Output: [(42 79 63 87) 42]
Test Case: 276 | Input/Output: [(42 68 77 9) 9]
Test Case: 277 | Input/Output: [(96 99 84 48) 48]
Test Case: 278 | Input/Output: [(6 83 1 66) 1]
Test Case: 279 | Input/Output: [(95 51 31 19) 19]
Test Case: 280 | Input/Output: [(90 3 49 15) 3]
Test Case: 281 | Input/Output: [(15 57 60 69) 15]
Test Case: 282 | Input/Output: [(41 27 21 89) 21]
Test Case: 283 | Input/Output: [(54 58 81 43) 43]
Test Case: 284 | Input/Output: [(86 58 4 14) 4]
Test Case: 285 | Input/Output: [(49 86 45 47) 45]
Test Case: 286 | Input/Output: [(11 2 62 63) 2]
Test Case: 287 | Input/Output: [(74 4 63 7) 4]
Test Case: 288 | Input/Output: [(56 20 31 64) 20]
Test Case: 289 | Input/Output: [(1 81 62 70) 1]
Test Case: 290 | Input/Output: [(92 64 37 5) 5]
Test Case: 291 | Input/Output: [(63 91 5 100) 5]
Test Case: 292 | Input/Output: [(93 72 15 24) 15]
Test Case: 293 | Input/Output: [(90 71 23 60) 23]
Test Case: 294 | Input/Output: [(75 25 100 0) 0]
Test Case: 295 | Input/Output: [(52 46 53 31) 31]
Test Case: 296 | Input/Output: [(34 70 4 40) 4]
Test Case: 297 | Input/Output: [(69 8 77 6) 6]
Test Case: 298 | Input/Output: [(43 4 93 34) 4]
Test Case: 299 | Input/Output: [(45 37 54 39) 37]
Test Case: 300 | Input/Output: [(76 44 59 80) 44]
Test Case: 301 | Input/Output: [(6 65 92 4) 4]
Test Case: 302 | Input/Output: [(69 7 63 97) 7]
Test Case: 303 | Input/Output: [(36 1 16 86) 1]
Test Case: 304 | Input/Output: [(60 60 9 83) 9]
Test Case: 305 | Input/Output: [(7 17 24 93) 7]
Test Case: 306 | Input/Output: [(93 21 0 14) 0]
Test Case: 307 | Input/Output: [(41 64 73 35) 35]
Test Case: 308 | Input/Output: [(3 4 57 61) 3]
Test Case: 309 | Input/Output: [(96 18 4 69) 4]
Test Case: 310 | Input/Output: [(74 89 89 43) 43]
Test Case: 311 | Input/Output: [(31 57 89 1) 1]
Test Case: 312 | Input/Output: [(31 67 56 92) 31]
Test Case: 313 | Input/Output: [(51 78 85 63) 51]
Test Case: 314 | Input/Output: [(1 78 98 9) 1]
Test Case: 315 | Input/Output: [(70 86 20 28) 20]
Test Case: 316 | Input/Output: [(9 97 43 2) 2]
Test Case: 317 | Input/Output: [(11 68 24 28) 11]
Test Case: 318 | Input/Output: [(44 12 53 26) 12]
Test Case: 319 | Input/Output: [(98 0 20 19) 0]
Test Case: 320 | Input/Output: [(28 50 50 80) 28]
Test Case: 321 | Input/Output: [(71 54 81 74) 54]
Test Case: 322 | Input/Output: [(60 7 48 68) 7]
Test Case: 323 | Input/Output: [(95 62 48 46) 46]
Test Case: 324 | Input/Output: [(95 41 77 48) 41]
Test Case: 325 | Input/Output: [(82 15 57 45) 15]
Test Case: 326 | Input/Output: [(84 62 7 1) 1]
Test Case: 327 | Input/Output: [(84 37 60 52) 37]
Test Case: 328 | Input/Output: [(24 94 65 91) 24]
Test Case: 329 | Input/Output: [(77 49 36 29) 29]
Test Case: 330 | Input/Output: [(3 39 27 3) 3]
Test Case: 331 | Input/Output: [(11 73 36 27) 11]
Test Case: 332 | Input/Output: [(94 49 13 88) 13]
Test Case: 333 | Input/Output: [(83 98 4 11) 4]
Test Case: 334 | Input/Output: [(94 23 86 15) 15]
Test Case: 335 | Input/Output: [(60 22 56 79) 22]
Test Case: 336 | Input/Output: [(3 78 13 33) 3]
Test Case: 337 | Input/Output: [(60 53 4 68) 4]
Test Case: 338 | Input/Output: [(58 88 51 78) 51]
Test Case: 339 | Input/Output: [(20 96 27 60) 20]
Test Case: 340 | Input/Output: [(86 71 95 19) 19]
Test Case: 341 | Input/Output: [(94 44 3 96) 3]
Test Case: 342 | Input/Output: [(14 34 84 32) 14]
Test Case: 343 | Input/Output: [(39 60 61 77) 39]
Test Case: 344 | Input/Output: [(21 72 5 64) 5]
Test Case: 345 | Input/Output: [(56 4 2 84) 2]
Test Case: 346 | Input/Output: [(58 54 66 77) 54]
Test Case: 347 | Input/Output: [(48 79 51 71) 48]
Test Case: 348 | Input/Output: [(51 41 96 88) 41]
Test Case: 349 | Input/Output: [(35 85 70 43) 35]
Test Case: 350 | Input/Output: [(97 1 44 63) 1]
Test Case: 351 | Input/Output: [(47 49 77 2) 2]
Test Case: 352 | Input/Output: [(27 42 25 32) 25]
Test Case: 353 | Input/Output: [(38 34 72 80) 34]
Test Case: 354 | Input/Output: [(14 58 8 43) 8]
Test Case: 355 | Input/Output: [(69 56 63 34) 34]
Test Case: 356 | Input/Output: [(86 87 52 7) 7]
Test Case: 357 | Input/Output: [(100 71 85 42) 42]
Test Case: 358 | Input/Output: [(43 5 67 71) 5]
Test Case: 359 | Input/Output: [(32 64 91 74) 32]
Test Case: 360 | Input/Output: [(95 6 73 30) 6]
Test Case: 361 | Input/Output: [(99 83 80 95) 80]
Test Case: 362 | Input/Output: [(3 97 76 79) 3]
Test Case: 363 | Input/Output: [(35 21 65 78) 21]
Test Case: 364 | Input/Output: [(39 66 15 43) 15]
Test Case: 365 | Input/Output: [(90 63 39 62) 39]
Test Case: 366 | Input/Output: [(3 24 19 2) 2]
Test Case: 367 | Input/Output: [(18 41 38 27) 18]
Test Case: 368 | Input/Output: [(95 53 52 94) 52]
Test Case: 369 | Input/Output: [(37 2 65 43) 2]
Test Case: 370 | Input/Output: [(77 12 55 70) 12]
Test Case: 371 | Input/Output: [(73 24 20 52) 20]
Test Case: 372 | Input/Output: [(6 5 18 99) 5]
Test Case: 373 | Input/Output: [(0 85 2 36) 0]
Test Case: 374 | Input/Output: [(63 83 95 41) 41]
Test Case: 375 | Input/Output: [(66 46 94 35) 35]
Test Case: 376 | Input/Output: [(79 37 16 24) 16]
Test Case: 377 | Input/Output: [(40 65 65 16) 16]
Test Case: 378 | Input/Output: [(27 17 100 7) 7]
Test Case: 379 | Input/Output: [(46 68 67 44) 44]
Test Case: 380 | Input/Output: [(19 49 71 72) 19]
Test Case: 381 | Input/Output: [(13 69 50 13) 13]
Test Case: 382 | Input/Output: [(80 1 22 35) 1]
Test Case: 383 | Input/Output: [(22 25 17 22) 17]
Test Case: 384 | Input/Output: [(82 59 59 94) 59]
Test Case: 385 | Input/Output: [(4 2 45 64) 2]
Test Case: 386 | Input/Output: [(88 77 79 6) 6]
Test Case: 387 | Input/Output: [(41 34 85 98) 34]
Test Case: 388 | Input/Output: [(78 5 47 60) 5]
Test Case: 389 | Input/Output: [(40 94 54 12) 12]
Test Case: 390 | Input/Output: [(62 68 97 63) 62]
Test Case: 391 | Input/Output: [(4 3 19 71) 3]
Test Case: 392 | Input/Output: [(7 77 69 6) 6]
Test Case: 393 | Input/Output: [(23 83 78 97) 23]
Test Case: 394 | Input/Output: [(93 74 73 8) 8]
Test Case: 395 | Input/Output: [(88 84 71 10) 10]
Test Case: 396 | Input/Output: [(98 64 38 24) 24]
Test Case: 397 | Input/Output: [(89 90 53 17) 17]
Test Case: 398 | Input/Output: [(33 49 81 66) 33]
Test Case: 399 | Input/Output: [(20 32 15 46) 15]
Test Case: 400 | Input/Output: [(71 91 13 -82) -82]
Test Case: 401 | Input/Output: [(-60 46 54 -11) -60]
Test Case: 402 | Input/Output: [(79 -6 15 -2) -6]
Test Case: 403 | Input/Output: [(-93 -27 81 -27) -93]
Test Case: 404 | Input/Output: [(-63 83 -44 95) -63]
Test Case: 405 | Input/Output: [(41 72 -34 87) -34]
Test Case: 406 | Input/Output: [(25 -94 -57 67) -94]
Test Case: 407 | Input/Output: [(4 -100 -63 12) -100]
Test Case: 408 | Input/Output: [(-64 -34 -34 -97) -97]
Test Case: 409 | Input/Output: [(69 46 -1 44) -1]
Test Case: 410 | Input/Output: [(-11 -28 87 35) -28]
Test Case: 411 | Input/Output: [(5 14 -31 -12) -31]
Test Case: 412 | Input/Output: [(-66 -25 -65 -28) -66]
Test Case: 413 | Input/Output: [(56 -79 -70 -54) -79]
Test Case: 414 | Input/Output: [(2 -77 24 -34) -77]
Test Case: 415 | Input/Output: [(-44 87 95 -79) -79]
Test Case: 416 | Input/Output: [(37 -25 78 -51) -51]
Test Case: 417 | Input/Output: [(-31 -39 71 97) -39]
Test Case: 418 | Input/Output: [(33 -7 -19 -32) -32]
Test Case: 419 | Input/Output: [(-100 -39 5 -21) -100]
Test Case: 420 | Input/Output: [(-17 -50 -81 -46) -81]
Test Case: 421 | Input/Output: [(93 -32 -84 68) -84]
Test Case: 422 | Input/Output: [(-100 61 -88 44) -100]
Test Case: 423 | Input/Output: [(-94 -96 37 6) -96]
Test Case: 424 | Input/Output: [(-96 -21 -29 55) -96]
Test Case: 425 | Input/Output: [(-64 -99 -24 96) -99]
Test Case: 426 | Input/Output: [(37 82 -75 -57) -75]
Test Case: 427 | Input/Output: [(-83 -62 -32 -87) -87]
Test Case: 428 | Input/Output: [(37 54 22 -41) -41]
Test Case: 429 | Input/Output: [(42 -78 -81 80) -81]
Test Case: 430 | Input/Output: [(-65 8 -73 -17) -73]
Test Case: 431 | Input/Output: [(-57 -90 -24 -24) -90]
Test Case: 432 | Input/Output: [(-69 93 -92 -7) -92]
Test Case: 433 | Input/Output: [(82 -88 -3 39) -88]
Test Case: 434 | Input/Output: [(-6 -45 37 -64) -64]
Test Case: 435 | Input/Output: [(-50 -13 57 81) -50]
Test Case: 436 | Input/Output: [(8 -88 80 -87) -88]
Test Case: 437 | Input/Output: [(-52 43 -30 50) -52]
Test Case: 438 | Input/Output: [(3 97 39 -61) -61]
Test Case: 439 | Input/Output: [(-29 81 -2 65) -29]
Test Case: 440 | Input/Output: [(98 -90 63 -59) -90]
Test Case: 441 | Input/Output: [(97 -85 93 20) -85]
Test Case: 442 | Input/Output: [(58 -85 76 26) -85]
Test Case: 443 | Input/Output: [(88 -1 80 98) -1]
Test Case: 444 | Input/Output: [(96 73 44 56) 44]
Test Case: 445 | Input/Output: [(22 59 53 98) 22]
Test Case: 446 | Input/Output: [(-100 -4 -14 -37) -100]
Test Case: 447 | Input/Output: [(70 96 60 -57) -57]
Test Case: 448 | Input/Output: [(36 -100 2 80) -100]
Test Case: 449 | Input/Output: [(39 55 -93 -75) -93]
Test Case: 450 | Input/Output: [(-46 15 35 -57) -57]
Test Case: 451 | Input/Output: [(59 53 -44 42) -44]
Test Case: 452 | Input/Output: [(-49 55 42 93) -49]
Test Case: 453 | Input/Output: [(-11 16 -22 61) -22]
Test Case: 454 | Input/Output: [(98 48 16 14) 14]
Test Case: 455 | Input/Output: [(-52 10 11 17) -52]
Test Case: 456 | Input/Output: [(-100 -27 40 99) -100]
Test Case: 457 | Input/Output: [(60 19 64 14) 14]
Test Case: 458 | Input/Output: [(-18 30 100 47) -18]
Test Case: 459 | Input/Output: [(2 15 -38 7) -38]
Test Case: 460 | Input/Output: [(66 58 -88 -7) -88]
Test Case: 461 | Input/Output: [(-30 58 -95 51) -95]
Test Case: 462 | Input/Output: [(65 -32 -76 77) -76]
Test Case: 463 | Input/Output: [(74 -20 52 4) -20]
Test Case: 464 | Input/Output: [(-20 29 -27 -54) -54]
Test Case: 465 | Input/Output: [(-53 -81 71 25) -81]
Test Case: 466 | Input/Output: [(23 27 -33 24) -33]
Test Case: 467 | Input/Output: [(-3 -56 87 21) -56]
Test Case: 468 | Input/Output: [(65 46 -91 95) -91]
Test Case: 469 | Input/Output: [(-64 5 98 46) -64]
Test Case: 470 | Input/Output: [(-99 -4 87 73) -99]
Test Case: 471 | Input/Output: [(-87 -43 -40 -19) -87]
Test Case: 472 | Input/Output: [(-47 -99 -28 89) -99]
Test Case: 473 | Input/Output: [(-98 91 -26 49) -98]
Test Case: 474 | Input/Output: [(-95 -47 62 60) -95]
Test Case: 475 | Input/Output: [(-33 19 -61 52) -61]
Test Case: 476 | Input/Output: [(-34 75 93 -10) -34]
Test Case: 477 | Input/Output: [(-100 43 91 86) -100]
Test Case: 478 | Input/Output: [(72 -20 -65 62) -65]
Test Case: 479 | Input/Output: [(80 -49 71 -71) -71]
Test Case: 480 | Input/Output: [(-71 -35 59 -5) -71]
Test Case: 481 | Input/Output: [(-5 99 88 96) -5]
Test Case: 482 | Input/Output: [(-20 -4 -83 -4) -83]
Test Case: 483 | Input/Output: [(-61 72 6 1) -61]
Test Case: 484 | Input/Output: [(20 -28 -56 81) -56]
Test Case: 485 | Input/Output: [(57 56 -51 58) -51]
Test Case: 486 | Input/Output: [(0 -63 96 97) -63]
Test Case: 487 | Input/Output: [(-52 98 -91 -20) -91]
Test Case: 488 | Input/Output: [(-55 -17 79 -51) -55]
Test Case: 489 | Input/Output: [(-67 -14 -91 -74) -91]
Test Case: 490 | Input/Output: [(-7 16 20 55) -7]
Test Case: 491 | Input/Output: [(-28 -77 49 -56) -77]
Test Case: 492 | Input/Output: [(-61 -27 -61 57) -61]
Test Case: 493 | Input/Output: [(31 -92 -14 43) -92]
Test Case: 494 | Input/Output: [(19 -27 -43 94) -43]
Test Case: 495 | Input/Output: [(31 61 -19 34) -19]
Test Case: 496 | Input/Output: [(-100 97 0 60) -100]
Test Case: 497 | Input/Output: [(-13 -81 -95 -89) -95]
Test Case: 498 | Input/Output: [(44 19 -74 62) -74]
Test Case: 499 | Input/Output: [(-2 51 25 58) -2]
Test Case: 500 | Input/Output: [(-3 -38 -6 75) -38]
Test Case: 501 | Input/Output: [(78 28 -99 -23) -99]
Test Case: 502 | Input/Output: [(9 38 30 -20) -20]
Test Case: 503 | Input/Output: [(-78 -27 -74 83) -78]
Test Case: 504 | Input/Output: [(54 51 63 19) 19]
Test Case: 505 | Input/Output: [(32 -56 95 11) -56]
Test Case: 506 | Input/Output: [(53 81 -15 93) -15]
Test Case: 507 | Input/Output: [(-47 -24 72 -80) -80]
Test Case: 508 | Input/Output: [(98 12 -11 -75) -75]
Test Case: 509 | Input/Output: [(-16 70 -27 98) -27]
Test Case: 510 | Input/Output: [(14 81 7 -36) -36]
Test Case: 511 | Input/Output: [(-40 49 -11 93) -40]
Test Case: 512 | Input/Output: [(-80 -99 73 72) -99]
Test Case: 513 | Input/Output: [(21 -3 -3 79) -3]
Test Case: 514 | Input/Output: [(-99 76 -41 12) -99]
Test Case: 515 | Input/Output: [(79 -22 98 -56) -56]
Test Case: 516 | Input/Output: [(-9 78 77 -35) -35]
Test Case: 517 | Input/Output: [(-88 -22 -73 -78) -88]
Test Case: 518 | Input/Output: [(-19 80 -4 -33) -33]
Test Case: 519 | Input/Output: [(88 76 47 -43) -43]
Test Case: 520 | Input/Output: [(-100 -57 98 -82) -100]
Test Case: 521 | Input/Output: [(-82 25 49 -33) -82]
Test Case: 522 | Input/Output: [(5 -23 -1 -13) -23]
Test Case: 523 | Input/Output: [(-72 -54 15 -80) -80]
Test Case: 524 | Input/Output: [(-59 -34 50 82) -59]
Test Case: 525 | Input/Output: [(52 79 -45 18) -45]
Test Case: 526 | Input/Output: [(-22 -56 -70 93) -70]
Test Case: 527 | Input/Output: [(-63 -50 92 62) -63]
Test Case: 528 | Input/Output: [(-58 -33 -10 0) -58]
Test Case: 529 | Input/Output: [(-60 -52 15 -41) -60]
Test Case: 530 | Input/Output: [(-49 -82 52 -95) -95]
Test Case: 531 | Input/Output: [(80 26 -97 98) -97]
Test Case: 532 | Input/Output: [(8 37 20 -35) -35]
Test Case: 533 | Input/Output: [(-18 62 48 12) -18]
Test Case: 534 | Input/Output: [(-13 15 29 8) -13]
Test Case: 535 | Input/Output: [(81 58 -79 -91) -91]
Test Case: 536 | Input/Output: [(-5 90 68 -75) -75]
Test Case: 537 | Input/Output: [(74 -31 -56 -55) -56]
Test Case: 538 | Input/Output: [(35 -20 -59 -82) -82]
Test Case: 539 | Input/Output: [(-46 98 61 -91) -91]
Test Case: 540 | Input/Output: [(-19 7 -89 79) -89]
Test Case: 541 | Input/Output: [(-77 97 -46 -9) -77]
Test Case: 542 | Input/Output: [(22 21 1 94) 1]
Test Case: 543 | Input/Output: [(-28 -89 4 -98) -98]
Test Case: 544 | Input/Output: [(-59 -22 -9 24) -59]
Test Case: 545 | Input/Output: [(7 -47 99 -42) -47]
Test Case: 546 | Input/Output: [(-6 -38 4 68) -38]
Test Case: 547 | Input/Output: [(-79 -37 -29 -60) -79]
Test Case: 548 | Input/Output: [(-86 -42 99 -28) -86]
Test Case: 549 | Input/Output: [(30 -33 -37 51) -37]
Test Case: 550 | Input/Output: [(-90 -65 -40 12) -90]
Test Case: 551 | Input/Output: [(-32 -18 15 -47) -47]
Test Case: 552 | Input/Output: [(70 -3 100 10) -3]
Test Case: 553 | Input/Output: [(-4 -89 -85 -49) -89]
Test Case: 554 | Input/Output: [(59 34 -22 36) -22]
Test Case: 555 | Input/Output: [(91 51 -23 -99) -99]
Test Case: 556 | Input/Output: [(69 94 79 90) 69]
Test Case: 557 | Input/Output: [(1 -9 -51 -26) -51]
Test Case: 558 | Input/Output: [(73 75 -60 -72) -72]
Test Case: 559 | Input/Output: [(-6 29 55 87) -6]
Test Case: 560 | Input/Output: [(15 44 69 -17) -17]
Test Case: 561 | Input/Output: [(48 -31 -88 9) -88]
Test Case: 562 | Input/Output: [(11 -79 84 -94) -94]
Test Case: 563 | Input/Output: [(42 91 96 -18) -18]
Test Case: 564 | Input/Output: [(-86 70 44 7) -86]
Test Case: 565 | Input/Output: [(-24 -74 54 90) -74]
Test Case: 566 | Input/Output: [(-85 -51 -50 17) -85]
Test Case: 567 | Input/Output: [(-50 58 64 -23) -50]
Test Case: 568 | Input/Output: [(16 43 -76 65) -76]
Test Case: 569 | Input/Output: [(-64 91 14 41) -64]
Test Case: 570 | Input/Output: [(-34 -79 59 -21) -79]
Test Case: 571 | Input/Output: [(-55 0 63 89) -55]
Test Case: 572 | Input/Output: [(55 8 22 -3) -3]
Test Case: 573 | Input/Output: [(-45 -61 10 -19) -61]
Test Case: 574 | Input/Output: [(59 -37 -78 79) -78]
Test Case: 575 | Input/Output: [(-44 91 -58 67) -58]
Test Case: 576 | Input/Output: [(-59 -75 -40 -37) -75]
Test Case: 577 | Input/Output: [(-81 38 69 98) -81]
Test Case: 578 | Input/Output: [(-56 78 -13 -60) -60]
Test Case: 579 | Input/Output: [(55 -54 56 -11) -54]
Test Case: 580 | Input/Output: [(-8 -95 -3 -32) -95]
Test Case: 581 | Input/Output: [(10 88 35 92) 10]
Test Case: 582 | Input/Output: [(-54 38 0 71) -54]
Test Case: 583 | Input/Output: [(36 39 43 97) 36]
Test Case: 584 | Input/Output: [(28 32 -59 9) -59]
Test Case: 585 | Input/Output: [(64 -69 98 -89) -89]
Test Case: 586 | Input/Output: [(-34 29 1 67) -34]
Test Case: 587 | Input/Output: [(22 66 32 31) 22]
Test Case: 588 | Input/Output: [(18 -69 -95 36) -95]
Test Case: 589 | Input/Output: [(-62 47 -82 -84) -84]
Test Case: 590 | Input/Output: [(20 52 -36 -32) -36]
Test Case: 591 | Input/Output: [(88 -66 10 -17) -66]
Test Case: 592 | Input/Output: [(96 8 -21 1) -21]
Test Case: 593 | Input/Output: [(70 74 -24 54) -24]
Test Case: 594 | Input/Output: [(-33 -21 -99 -11) -99]
Test Case: 595 | Input/Output: [(5 99 -34 61) -34]
Test Case: 596 | Input/Output: [(77 -1 -72 -43) -72]
Test Case: 597 | Input/Output: [(86 20 -27 -49) -49]
Test Case: 598 | Input/Output: [(-43 -64 -82 -21) -82]
Test Case: 599 | Input/Output: [(-27 -71 53 -53) -71]
Test Case: 600 | Input/Output: [(-21 -82 -9 -36) -82]
Test Case: 601 | Input/Output: [(-83 75 -48 66) -83]
Test Case: 602 | Input/Output: [(63 12 3 34) 3]
Test Case: 603 | Input/Output: [(75 42 -38 47) -38]
Test Case: 604 | Input/Output: [(-90 2 -22 -80) -90]
Test Case: 605 | Input/Output: [(-99 55 30 67) -99]
Test Case: 606 | Input/Output: [(-43 -62 -46 -58) -62]
Test Case: 607 | Input/Output: [(-4 -95 83 36) -95]
Test Case: 608 | Input/Output: [(39 -38 -69 -5) -69]
Test Case: 609 | Input/Output: [(-85 11 20 -34) -85]
Test Case: 610 | Input/Output: [(-99 43 32 -83) -99]
Test Case: 611 | Input/Output: [(-62 31 44 -96) -96]
Test Case: 612 | Input/Output: [(-58 55 -51 -1) -58]
Test Case: 613 | Input/Output: [(-31 -60 -65 -42) -65]
Test Case: 614 | Input/Output: [(23 -43 -11 19) -43]
Test Case: 615 | Input/Output: [(-63 -50 -68 -30) -68]
Test Case: 616 | Input/Output: [(17 -37 78 64) -37]
Test Case: 617 | Input/Output: [(-95 21 -15 54) -95]
Test Case: 618 | Input/Output: [(65 -84 100 20) -84]
Test Case: 619 | Input/Output: [(94 -36 25 98) -36]
Test Case: 620 | Input/Output: [(-50 -39 100 38) -50]
Test Case: 621 | Input/Output: [(-62 16 26 -84) -84]
Test Case: 622 | Input/Output: [(90 -5 -97 12) -97]
Test Case: 623 | Input/Output: [(38 55 -98 -85) -98]
Test Case: 624 | Input/Output: [(-1 -8 53 -65) -65]
Test Case: 625 | Input/Output: [(-45 -75 61 41) -75]
Test Case: 626 | Input/Output: [(-75 -71 31 -97) -97]
Test Case: 627 | Input/Output: [(-49 9 -53 -84) -84]
Test Case: 628 | Input/Output: [(-40 18 42 50) -40]
Test Case: 629 | Input/Output: [(98 96 -71 90) -71]
Test Case: 630 | Input/Output: [(34 85 -87 -8) -87]
Test Case: 631 | Input/Output: [(7 -19 18 62) -19]
Test Case: 632 | Input/Output: [(-90 38 37 27) -90]
Test Case: 633 | Input/Output: [(-61 35 -85 -9) -85]
Test Case: 634 | Input/Output: [(78 -78 44 -87) -87]
Test Case: 635 | Input/Output: [(-55 77 -41 35) -55]
Test Case: 636 | Input/Output: [(-71 -76 -49 -99) -99]
Test Case: 637 | Input/Output: [(-97 79 -3 -9) -97]
Test Case: 638 | Input/Output: [(42 21 -48 -21) -48]
Test Case: 639 | Input/Output: [(-77 -62 -41 -82) -82]
Test Case: 640 | Input/Output: [(61 -58 -54 -73) -73]
Test Case: 641 | Input/Output: [(-22 -34 -66 0) -66]
Test Case: 642 | Input/Output: [(-13 70 -78 -97) -97]
Test Case: 643 | Input/Output: [(23 -65 -41 -59) -65]
Test Case: 644 | Input/Output: [(-61 -3 -92 87) -92]
Test Case: 645 | Input/Output: [(-38 -51 -43 -93) -93]
Test Case: 646 | Input/Output: [(73 100 -35 52) -35]
Test Case: 647 | Input/Output: [(-74 91 -8 -40) -74]
Test Case: 648 | Input/Output: [(-41 40 -57 32) -57]
Test Case: 649 | Input/Output: [(7 6 -97 82) -97]
Test Case: 650 | Input/Output: [(59 7 36 82) 7]
Test Case: 651 | Input/Output: [(61 51 -64 26) -64]
Test Case: 652 | Input/Output: [(-32 -15 61 83) -32]
Test Case: 653 | Input/Output: [(60 77 2 20) 2]
Test Case: 654 | Input/Output: [(-86 -70 -99 74) -99]
Test Case: 655 | Input/Output: [(-41 -28 70 -14) -41]
Test Case: 656 | Input/Output: [(20 0 23 46) 0]
Test Case: 657 | Input/Output: [(-80 -79 -49 54) -80]
Test Case: 658 | Input/Output: [(39 -100 41 9) -100]
Test Case: 659 | Input/Output: [(59 7 22 -21) -21]
Test Case: 660 | Input/Output: [(-99 -21 -68 -58) -99]
Test Case: 661 | Input/Output: [(-98 -20 -48 -78) -98]
Test Case: 662 | Input/Output: [(6 -87 56 71) -87]
Test Case: 663 | Input/Output: [(81 54 -82 58) -82]
Test Case: 664 | Input/Output: [(83 -14 37 29) -14]
Test Case: 665 | Input/Output: [(63 63 -95 47) -95]
Test Case: 666 | Input/Output: [(16 74 33 43) 16]
Test Case: 667 | Input/Output: [(-6 68 -77 -41) -77]
Test Case: 668 | Input/Output: [(28 -45 -27 -71) -71]
Test Case: 669 | Input/Output: [(38 -46 -74 29) -74]
Test Case: 670 | Input/Output: [(-42 21 67 12) -42]
Test Case: 671 | Input/Output: [(17 65 -91 47) -91]
Test Case: 672 | Input/Output: [(73 20 -61 -32) -61]
Test Case: 673 | Input/Output: [(41 39 -26 62) -26]
Test Case: 674 | Input/Output: [(-36 -10 85 67) -36]
Test Case: 675 | Input/Output: [(92 83 -57 54) -57]
Test Case: 676 | Input/Output: [(-30 -11 71 100) -30]
Test Case: 677 | Input/Output: [(-81 -48 -66 -53) -81]
Test Case: 678 | Input/Output: [(-44 -59 -46 -31) -59]
Test Case: 679 | Input/Output: [(-86 -4 49 -67) -86]
Test Case: 680 | Input/Output: [(-98 51 -92 -31) -98]
Test Case: 681 | Input/Output: [(5 40 -26 14) -26]
Test Case: 682 | Input/Output: [(92 33 -97 65) -97]
Test Case: 683 | Input/Output: [(-87 0 -44 93) -87]
Test Case: 684 | Input/Output: [(-4 62 28 78) -4]
Test Case: 685 | Input/Output: [(43 -51 3 -3) -51]
Test Case: 686 | Input/Output: [(-52 -20 30 83) -52]
Test Case: 687 | Input/Output: [(15 74 -44 81) -44]
Test Case: 688 | Input/Output: [(-26 68 15 -31) -31]
Test Case: 689 | Input/Output: [(42 -83 51 -1) -83]
Test Case: 690 | Input/Output: [(-54 28 -84 82) -84]
Test Case: 691 | Input/Output: [(81 -7 17 92) -7]
Test Case: 692 | Input/Output: [(39 -49 56 65) -49]
Test Case: 693 | Input/Output: [(18 -70 -74 47) -74]
Test Case: 694 | Input/Output: [(54 43 2 -6) -6]
Test Case: 695 | Input/Output: [(-2 -58 24 10) -58]
Test Case: 696 | Input/Output: [(27 -57 -89 41) -89]
Test Case: 697 | Input/Output: [(-18 18 -14 75) -18]
Test Case: 698 | Input/Output: [(-11 53 87 -74) -74]
Test Case: 699 | Input/Output: [(59 78 -12 57) -12]
Test Case: 700 | Input/Output: [(-96 75 -90 50) -96]
Test Case: 701 | Input/Output: [(-92 84 -35 -59) -92]
Test Case: 702 | Input/Output: [(82 24 53 8) 8]
Test Case: 703 | Input/Output: [(-64 -17 8 -18) -64]
Test Case: 704 | Input/Output: [(-66 7 -100 -43) -100]
Test Case: 705 | Input/Output: [(-56 -14 -29 94) -56]
Test Case: 706 | Input/Output: [(-61 23 85 -71) -71]
Test Case: 707 | Input/Output: [(30 -54 61 45) -54]
Test Case: 708 | Input/Output: [(-75 -75 -71 52) -75]
Test Case: 709 | Input/Output: [(14 -16 25 -45) -45]
Test Case: 710 | Input/Output: [(49 -23 -20 86) -23]
Test Case: 711 | Input/Output: [(-79 -86 95 48) -86]
Test Case: 712 | Input/Output: [(9 -34 86 -57) -57]
Test Case: 713 | Input/Output: [(-93 72 16 2) -93]
Test Case: 714 | Input/Output: [(-84 96 28 -52) -84]
Test Case: 715 | Input/Output: [(-49 17 0 62) -49]
Test Case: 716 | Input/Output: [(65 31 -83 23) -83]
Test Case: 717 | Input/Output: [(-27 80 -2 -59) -59]
Test Case: 718 | Input/Output: [(-5 -12 74 -24) -24]
Test Case: 719 | Input/Output: [(32 72 -21 20) -21]
Test Case: 720 | Input/Output: [(23 -38 8 -10) -38]
Test Case: 721 | Input/Output: [(-17 -54 -31 28) -54]
Test Case: 722 | Input/Output: [(-12 14 18 46) -12]
Test Case: 723 | Input/Output: [(-16 -66 14 82) -66]
Test Case: 724 | Input/Output: [(-13 19 -7 -36) -36]
Test Case: 725 | Input/Output: [(-89 36 -6 -60) -89]
Test Case: 726 | Input/Output: [(-74 73 8 1) -74]
Test Case: 727 | Input/Output: [(-16 -36 37 -73) -73]
Test Case: 728 | Input/Output: [(-44 91 57 -26) -44]
Test Case: 729 | Input/Output: [(0 -49 61 78) -49]
Test Case: 730 | Input/Output: [(46 43 -62 -61) -62]
Test Case: 731 | Input/Output: [(13 -100 -82 92) -100]
Test Case: 732 | Input/Output: [(62 -17 65 52) -17]
Test Case: 733 | Input/Output: [(60 -89 65 -68) -89]
Test Case: 734 | Input/Output: [(-2 77 58 -47) -47]
Test Case: 735 | Input/Output: [(-78 75 -30 -34) -78]
Test Case: 736 | Input/Output: [(-94 -92 -7 33) -94]
Test Case: 737 | Input/Output: [(-39 -16 -8 -96) -96]
Test Case: 738 | Input/Output: [(-35 84 -24 100) -35]
Test Case: 739 | Input/Output: [(66 -54 -95 44) -95]
Test Case: 740 | Input/Output: [(20 9 -20 7) -20]
Test Case: 741 | Input/Output: [(-68 84 -86 58) -86]
Test Case: 742 | Input/Output: [(-13 -7 39 94) -13]
Test Case: 743 | Input/Output: [(-68 63 -12 -30) -68]
Test Case: 744 | Input/Output: [(-73 -45 38 91) -73]
Test Case: 745 | Input/Output: [(91 35 1 93) 1]
Test Case: 746 | Input/Output: [(-26 28 94 -45) -45]
Test Case: 747 | Input/Output: [(-47 -52 -84 -63) -84]
Test Case: 748 | Input/Output: [(37 -24 -66 49) -66]
Test Case: 749 | Input/Output: [(6 52 -50 39) -50]
Test Case: 750 | Input/Output: [(27 -69 11 -39) -69]
Test Case: 751 | Input/Output: [(26 81 65 -31) -31]
Test Case: 752 | Input/Output: [(-70 -3 88 88) -70]
Test Case: 753 | Input/Output: [(4 -80 28 -36) -80]
Test Case: 754 | Input/Output: [(-21 44 -72 62) -72]
Test Case: 755 | Input/Output: [(-63 -65 -83 25) -83]
Test Case: 756 | Input/Output: [(-32 -8 66 26) -32]
Test Case: 757 | Input/Output: [(88 -69 -61 70) -69]
Test Case: 758 | Input/Output: [(88 10 -27 -78) -78]
Test Case: 759 | Input/Output: [(-81 41 84 -84) -84]
Test Case: 760 | Input/Output: [(-5 -93 -6 -16) -93]
Test Case: 761 | Input/Output: [(-93 14 85 -6) -93]
Test Case: 762 | Input/Output: [(1 -90 -57 52) -90]
Test Case: 763 | Input/Output: [(-33 -65 66 60) -65]
Test Case: 764 | Input/Output: [(-98 -61 -13 40) -98]
Test Case: 765 | Input/Output: [(2 -32 -27 -22) -32]
Test Case: 766 | Input/Output: [(-54 -80 -87 36) -87]
Test Case: 767 | Input/Output: [(-67 5 93 9) -67]
Test Case: 768 | Input/Output: [(-23 0 66 -71) -71]
Test Case: 769 | Input/Output: [(98 -9 -43 -96) -96]
Test Case: 770 | Input/Output: [(69 -97 -25 92) -97]
Test Case: 771 | Input/Output: [(71 78 -55 42) -55]
Test Case: 772 | Input/Output: [(-87 -88 17 -53) -88]
Test Case: 773 | Input/Output: [(56 51 50 1) 1]
Test Case: 774 | Input/Output: [(6 29 45 8) 6]
Test Case: 775 | Input/Output: [(-43 30 -81 38) -81]
Test Case: 776 | Input/Output: [(-21 -27 -10 -95) -95]
Test Case: 777 | Input/Output: [(10 4 -68 -60) -68]
Test Case: 778 | Input/Output: [(-71 93 41 12) -71]
Test Case: 779 | Input/Output: [(97 62 52 -59) -59]
Test Case: 780 | Input/Output: [(40 -10 -65 98) -65]
Test Case: 781 | Input/Output: [(-6 73 81 81) -6]
Test Case: 782 | Input/Output: [(62 26 66 -72) -72]
Test Case: 783 | Input/Output: [(47 86 -43 67) -43]
Test Case: 784 | Input/Output: [(4 31 -27 23) -27]
Test Case: 785 | Input/Output: [(-4 -31 -45 73) -45]
Test Case: 786 | Input/Output: [(26 -43 -50 -82) -82]
Test Case: 787 | Input/Output: [(2 -25 -75 -22) -75]
Test Case: 788 | Input/Output: [(-100 45 11 -37) -100]
Test Case: 789 | Input/Output: [(-29 93 55 67) -29]
Test Case: 790 | Input/Output: [(66 87 -88 -54) -88]
Test Case: 791 | Input/Output: [(-80 29 -79 -19) -80]
Test Case: 792 | Input/Output: [(46 -70 1 -25) -70]
Test Case: 793 | Input/Output: [(-72 -89 88 -52) -89]
Test Case: 794 | Input/Output: [(38 39 71 74) 38]
Test Case: 795 | Input/Output: [(55 -38 -72 -94) -94]
Test Case: 796 | Input/Output: [(23 3 -61 -64) -64]
Test Case: 797 | Input/Output: [(16 76 60 89) 16]
Test Case: 798 | Input/Output: [(15 64 -99 74) -99]
Test Case: 799 | Input/Output: [(-49 -12 -99 100) -99]
Test Case: 800 | Input/Output: [(57 -8 15 -90) -90]
Test Case: 801 | Input/Output: [(-57 44 -30 -15) -57]
Test Case: 802 | Input/Output: [(-30 39 64 21) -30]
Test Case: 803 | Input/Output: [(88 48 -18 -49) -49]
Test Case: 804 | Input/Output: [(-23 -62 94 -51) -62]
Test Case: 805 | Input/Output: [(-5 -86 17 -28) -86]
Test Case: 806 | Input/Output: [(-67 63 19 -8) -67]
Test Case: 807 | Input/Output: [(77 -25 4 -98) -98]
Test Case: 808 | Input/Output: [(73 -79 -21 77) -79]
Test Case: 809 | Input/Output: [(-62 83 59 49) -62]
Test Case: 810 | Input/Output: [(73 76 5 -36) -36]
Test Case: 811 | Input/Output: [(15 42 -75 36) -75]
Test Case: 812 | Input/Output: [(99 34 33 -66) -66]
Test Case: 813 | Input/Output: [(24 65 94 45) 24]
Test Case: 814 | Input/Output: [(-18 -32 89 26) -32]
Test Case: 815 | Input/Output: [(-80 84 87 71) -80]
Test Case: 816 | Input/Output: [(60 91 -54 25) -54]
Test Case: 817 | Input/Output: [(39 13 -93 31) -93]
Test Case: 818 | Input/Output: [(24 61 -97 -30) -97]
Test Case: 819 | Input/Output: [(-26 56 -57 -69) -69]
Test Case: 820 | Input/Output: [(-79 73 -13 -34) -79]
Test Case: 821 | Input/Output: [(98 -73 38 -40) -73]
Test Case: 822 | Input/Output: [(91 22 -27 57) -27]
Test Case: 823 | Input/Output: [(-34 -6 17 66) -34]
Test Case: 824 | Input/Output: [(-46 -74 18 23) -74]
Test Case: 825 | Input/Output: [(51 20 -67 -95) -95]
Test Case: 826 | Input/Output: [(61 -2 -32 4) -32]
Test Case: 827 | Input/Output: [(-100 8 -59 -36) -100]
Test Case: 828 | Input/Output: [(44 62 92 36) 36]
Test Case: 829 | Input/Output: [(56 -65 -84 85) -84]
Test Case: 830 | Input/Output: [(-7 95 -21 85) -21]
Test Case: 831 | Input/Output: [(-96 -67 40 -76) -96]
Test Case: 832 | Input/Output: [(14 98 87 -32) -32]
Test Case: 833 | Input/Output: [(64 -72 23 -56) -72]
Test Case: 834 | Input/Output: [(100 -5 39 -63) -63]
Test Case: 835 | Input/Output: [(-55 -41 -83 67) -83]
Test Case: 836 | Input/Output: [(47 -48 -9 -52) -52]
Test Case: 837 | Input/Output: [(11 -86 56 93) -86]
Test Case: 838 | Input/Output: [(74 -16 39 -35) -35]
Test Case: 839 | Input/Output: [(90 -84 88 -29) -84]
Test Case: 840 | Input/Output: [(-27 -44 18 -79) -79]
Test Case: 841 | Input/Output: [(6 -63 -76 -100) -100]
Test Case: 842 | Input/Output: [(-79 97 68 64) -79]
Test Case: 843 | Input/Output: [(85 70 -1 60) -1]
Test Case: 844 | Input/Output: [(-4 16 -41 -2) -41]
Test Case: 845 | Input/Output: [(3 15 95 -4) -4]
Test Case: 846 | Input/Output: [(22 2 -52 6) -52]
Test Case: 847 | Input/Output: [(-9 -65 95 35) -65]
Test Case: 848 | Input/Output: [(-81 -8 32 -78) -81]
Test Case: 849 | Input/Output: [(-35 19 -72 -22) -72]
Test Case: 850 | Input/Output: [(79 -63 -27 -25) -63]
Test Case: 851 | Input/Output: [(71 -24 -44 14) -44]
Test Case: 852 | Input/Output: [(100 18 -58 -66) -66]
Test Case: 853 | Input/Output: [(-100 38 -100 22) -100]
Test Case: 854 | Input/Output: [(-56 97 -37 17) -56]
Test Case: 855 | Input/Output: [(18 -22 -73 -12) -73]
Test Case: 856 | Input/Output: [(68 30 52 42) 30]
Test Case: 857 | Input/Output: [(-1 -76 -69 84) -76]
Test Case: 858 | Input/Output: [(-89 -39 -54 -55) -89]
Test Case: 859 | Input/Output: [(13 1 -4 -70) -70]
Test Case: 860 | Input/Output: [(-25 -50 78 -93) -93]
Test Case: 861 | Input/Output: [(38 -59 93 24) -59]
Test Case: 862 | Input/Output: [(34 64 -87 8) -87]
Test Case: 863 | Input/Output: [(76 7 -4 57) -4]
Test Case: 864 | Input/Output: [(47 -92 29 -71) -92]
Test Case: 865 | Input/Output: [(84 0 -28 3) -28]
Test Case: 866 | Input/Output: [(-22 7 -14 45) -22]
Test Case: 867 | Input/Output: [(-55 -14 -40 -58) -58]
Test Case: 868 | Input/Output: [(-3 -96 68 -29) -96]
Test Case: 869 | Input/Output: [(0 16 -100 -61) -100]
Test Case: 870 | Input/Output: [(-20 99 -26 -15) -26]
Test Case: 871 | Input/Output: [(-13 2 40 -21) -21]
Test Case: 872 | Input/Output: [(-41 81 5 69) -41]
Test Case: 873 | Input/Output: [(-49 -79 -33 84) -79]
Test Case: 874 | Input/Output: [(7 -51 -21 13) -51]
Test Case: 875 | Input/Output: [(-98 -89 -81 -8) -98]
Test Case: 876 | Input/Output: [(-78 -7 4 -16) -78]
Test Case: 877 | Input/Output: [(30 4 -17 53) -17]
Test Case: 878 | Input/Output: [(68 -37 -73 -54) -73]
Test Case: 879 | Input/Output: [(98 -86 -55 96) -86]
Test Case: 880 | Input/Output: [(92 -2 22 -66) -66]
Test Case: 881 | Input/Output: [(-38 -61 -9 64) -61]
Test Case: 882 | Input/Output: [(-87 89 -76 95) -87]
Test Case: 883 | Input/Output: [(-27 33 -49 96) -49]
Test Case: 884 | Input/Output: [(-89 -80 89 -44) -89]
Test Case: 885 | Input/Output: [(9 96 -43 74) -43]
Test Case: 886 | Input/Output: [(18 -1 -14 39) -14]
Test Case: 887 | Input/Output: [(54 32 81 -98) -98]
Test Case: 888 | Input/Output: [(-36 -69 -27 5) -69]
Test Case: 889 | Input/Output: [(-28 -31 49 -74) -74]
Test Case: 890 | Input/Output: [(29 57 46 20) 20]
Test Case: 891 | Input/Output: [(76 -6 0 99) -6]
Test Case: 892 | Input/Output: [(70 -58 39 77) -58]
Test Case: 893 | Input/Output: [(-30 20 -8 23) -30]
Test Case: 894 | Input/Output: [(56 58 -17 -96) -96]
Test Case: 895 | Input/Output: [(-28 50 -3 97) -28]
Test Case: 896 | Input/Output: [(-44 -65 -5 26) -65]
Test Case: 897 | Input/Output: [(-73 44 -97 -60) -97]
Test Case: 898 | Input/Output: [(-69 48 1 22) -69]
Test Case: 899 | Input/Output: [(45 -38 89 -31) -38]
Test Case: 900 | Input/Output: [(77 -68 -96 -43) -96]
Test Case: 901 | Input/Output: [(-35 -31 -77 31) -77]
Test Case: 902 | Input/Output: [(89 41 -39 91) -39]
Test Case: 903 | Input/Output: [(-76 -75 83 -57) -76]
Test Case: 904 | Input/Output: [(86 -87 53 74) -87]
Test Case: 905 | Input/Output: [(86 54 0 99) 0]
Test Case: 906 | Input/Output: [(-6 -59 40 89) -59]
Test Case: 907 | Input/Output: [(68 91 35 66) 35]
Test Case: 908 | Input/Output: [(-5 7 67 -95) -95]
Test Case: 909 | Input/Output: [(92 54 72 -34) -34]
Test Case: 910 | Input/Output: [(5 18 83 90) 5]
Test Case: 911 | Input/Output: [(57 44 33 3) 3]
Test Case: 912 | Input/Output: [(-70 32 -11 -100) -100]
Test Case: 913 | Input/Output: [(77 37 8 -78) -78]
Test Case: 914 | Input/Output: [(-4 29 5 -8) -8]
Test Case: 915 | Input/Output: [(55 -57 32 24) -57]
Test Case: 916 | Input/Output: [(50 79 -88 -95) -95]
Test Case: 917 | Input/Output: [(-80 73 13 -91) -91]
Test Case: 918 | Input/Output: [(99 91 49 -23) -23]
Test Case: 919 | Input/Output: [(-96 18 15 65) -96]
Test Case: 920 | Input/Output: [(33 -32 21 -31) -32]
Test Case: 921 | Input/Output: [(-27 56 60 -61) -61]
Test Case: 922 | Input/Output: [(-73 -4 16 62) -73]
Test Case: 923 | Input/Output: [(-73 24 35 90) -73]
Test Case: 924 | Input/Output: [(86 56 52 -9) -9]
Test Case: 925 | Input/Output: [(-58 -1 -46 -77) -77]
Test Case: 926 | Input/Output: [(52 -65 -98 -61) -98]
Test Case: 927 | Input/Output: [(48 -100 -36 6) -100]
Test Case: 928 | Input/Output: [(56 -92 -3 62) -92]
Test Case: 929 | Input/Output: [(-39 89 -82 -50) -82]
Test Case: 930 | Input/Output: [(23 94 -23 59) -23]
Test Case: 931 | Input/Output: [(-68 61 86 5) -68]
Test Case: 932 | Input/Output: [(61 57 -34 86) -34]
Test Case: 933 | Input/Output: [(2 88 -32 40) -32]
Test Case: 934 | Input/Output: [(21 30 -84 65) -84]
Test Case: 935 | Input/Output: [(75 -16 -5 100) -16]
Test Case: 936 | Input/Output: [(-8 70 99 -78) -78]
Test Case: 937 | Input/Output: [(9 46 52 26) 9]
Test Case: 938 | Input/Output: [(47 79 -85 -89) -89]
Test Case: 939 | Input/Output: [(16 -10 -61 -95) -95]
Test Case: 940 | Input/Output: [(15 93 27 52) 15]
Test Case: 941 | Input/Output: [(-87 -49 59 64) -87]
Test Case: 942 | Input/Output: [(31 -41 -99 -16) -99]
Test Case: 943 | Input/Output: [(-3 34 89 -82) -82]
Test Case: 944 | Input/Output: [(33 -79 26 -13) -79]
Test Case: 945 | Input/Output: [(86 69 27 2) 2]
Test Case: 946 | Input/Output: [(-96 -56 58 90) -96]
Test Case: 947 | Input/Output: [(2 51 51 -35) -35]
Test Case: 948 | Input/Output: [(83 -39 -13 -30) -39]
Test Case: 949 | Input/Output: [(48 86 71 33) 33]
Test Case: 950 | Input/Output: [(-59 -34 -26 -50) -59]
Test Case: 951 | Input/Output: [(20 -64 53 -37) -64]
Test Case: 952 | Input/Output: [(-92 16 -6 -57) -92]
Test Case: 953 | Input/Output: [(-94 -53 -22 -10) -94]
Test Case: 954 | Input/Output: [(-73 7 6 -45) -73]
Test Case: 955 | Input/Output: [(8 -100 73 84) -100]
Test Case: 956 | Input/Output: [(0 -5 -82 49) -82]
Test Case: 957 | Input/Output: [(-61 -39 -68 6) -68]
Test Case: 958 | Input/Output: [(-36 24 1 -72) -72]
Test Case: 959 | Input/Output: [(-25 -37 83 -100) -100]
Test Case: 960 | Input/Output: [(7 25 60 -76) -76]
Test Case: 961 | Input/Output: [(-8 87 -55 97) -55]
Test Case: 962 | Input/Output: [(-88 -16 -60 51) -88]
Test Case: 963 | Input/Output: [(18 -67 -57 96) -67]
Test Case: 964 | Input/Output: [(59 -56 -82 -9) -82]
Test Case: 965 | Input/Output: [(28 77 -42 -33) -42]
Test Case: 966 | Input/Output: [(14 88 -43 49) -43]
Test Case: 967 | Input/Output: [(4 59 -36 -19) -36]
Test Case: 968 | Input/Output: [(9 -58 44 -68) -68]
Test Case: 969 | Input/Output: [(-57 -79 51 -50) -79]
Test Case: 970 | Input/Output: [(37 27 68 21) 21]
Test Case: 971 | Input/Output: [(95 8 -5 -47) -47]
Test Case: 972 | Input/Output: [(69 37 86 47) 37]
Test Case: 973 | Input/Output: [(57 -66 27 82) -66]
Test Case: 974 | Input/Output: [(36 -5 -73 -59) -73]
Test Case: 975 | Input/Output: [(-80 -49 -39 -24) -80]
Test Case: 976 | Input/Output: [(4 -20 62 78) -20]
Test Case: 977 | Input/Output: [(27 65 -53 -61) -61]
Test Case: 978 | Input/Output: [(-49 16 84 -71) -71]
Test Case: 979 | Input/Output: [(52 20 -81 91) -81]
Test Case: 980 | Input/Output: [(-20 41 -41 78) -41]
Test Case: 981 | Input/Output: [(47 -81 -84 -15) -84]
Test Case: 982 | Input/Output: [(-64 100 -48 -16) -64]
Test Case: 983 | Input/Output: [(64 -46 86 -99) -99]
Test Case: 984 | Input/Output: [(51 23 -72 -48) -72]
Test Case: 985 | Input/Output: [(-29 57 -1 69) -29]
Test Case: 986 | Input/Output: [(-51 5 -50 50) -51]
Test Case: 987 | Input/Output: [(33 99 -9 30) -9]
Test Case: 988 | Input/Output: [(38 49 -90 46) -90]
Test Case: 989 | Input/Output: [(-67 9 -70 -33) -70]
Test Case: 990 | Input/Output: [(-84 -11 -52 -50) -84]
Test Case: 991 | Input/Output: [(64 83 -52 -33) -52]
Test Case: 992 | Input/Output: [(97 27 89 46) 27]
Test Case: 993 | Input/Output: [(13 97 10 -58) -58]
Test Case: 994 | Input/Output: [(-20 -24 -5 16) -24]
Test Case: 995 | Input/Output: [(-37 79 -73 -18) -73]
Test Case: 996 | Input/Output: [(66 18 -41 29) -41]
Test Case: 997 | Input/Output: [(15 -16 8 -88) -88]
Test Case: 998 | Input/Output: [(53 -42 -36 -74) -74]
Test Case: 999 | Input/Output: [(-60 19 -82 15) -82]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 65 33 118 -113 -22 -124 94 -3 73 43 -75 117 -18 59 21 -21
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[2 4 4 4] 2] [[69 69 -52 69] -52] [[35 35 -76 35] -76] [[-62 41 -62 -62] -62] [[82 13 13 13] 13] [[-33 -73 -73 -73] -73] [[11 11 11 -5] -5] [[16 16 -46 16] -46] [[-13 -50 -50 -50] -50] [[85 85 85 -6] -6] [(-50 -50 -50 -50) -50] [(46 46 46 46) 46] [(7 7 7 7) 7] [(-10 -10 -10 -10) -10] [(1 1 1 1) 1] [(75 89 78 81) 75] [(87 66 32 47) 32] [(11 1 31 19) 1] [(82 80 54 38) 38] [(75 48 5 88) 5] [(2 33 52 28) 2] [(86 51 62 49) 49] [(61 37 53 98) 37] [(87 0 40 31) 0] [(91 60 42 96) 42] [(98 37 78 7) 7] [(82 33 4 67) 4] [(71 78 21 54) 21] [(87 13 39 88) 13] [(88 96 12 47) 12] [(88 32 49 88) 32] [(96 15 24 93) 15] [(42 25 50 61) 25] [(56 16 97 86) 16] [(31 81 65 10) 10] [(18 -30 -64 95) -64] [(21 32 -33 47) -33] [(-2 -72 0 -77) -77] [(52 4 -73 11) -73] [(64 -85 39 -16) -85] [(-72 82 -32 -40) -72] [(16 -83 -79 -95) -95] [(-7 -39 35 76) -39] [(50 -97 -64 -9) -97] [(100 54 -65 -2) -65] [(51 -49 100 53) -49] [(70 -33 9 -24) -33] [(92 -12 98 -34) -34] [(59 -58 22 -83) -83] [(-33 94 -63 -72) -72] [(19 79 -68 -38) -68] [(75 80 -37 -23) -37] [(-73 -72 52 -53) -73] [(-16 92 -100 -8) -100] [(-31 -84 -57 -44) -84] [(-20 -8 61 -74) -74] [(-78 -62 -51 37) -78] [(-27 -80 16 39) -80] [(6 -27 69 -48) -48] [(66 -51 10 -31) -51] [(-96 10 -53 -21) -96] [(31 -22 -4 -15) -22] [(-99 -10 -93 -64) -99] [(-60 -51 -6 -7) -60] [(57 30 -99 -1) -99] [(60 -71 25 39) -71] [(14 -13 -21 65) -21] [(-49 82 34 84) -49] [(-52 73 30 -99) -99] [(0 -85 2 59) -85] [(58 -74 -76 -91) -91] [(-5 57 56 70) -5] [(-93 -5 -37 -56) -93] [(-37 -61 -99 76) -99] [(11 17 46 -1) -1] [(-93 -6 -21 34) -93] [(-98 75 -29 26) -98] [(-12 -70 46 55) -70] [(-95 14 71 24) -95] [(44 -6 88 -95) -95] [(2 -21 -32 -47) -47] [(85 -95 59 -77) -95] [(79 49 72 20) 20] [(66 55 73 -34) -34] [(-6 36 -20 17) -20] [(-14 -75 55 -95) -95] [(-94 66 18 -83) -94] [(92 92 4 -61) -61] [(-69 -94 -32 -79) -94] [(-22 24 2 -57) -57] [(-20 78 64 -56) -56] [(-39 6 -21 80) -39] [(83 -92 49 99) -92] [(54 42 -56 55) -56] [(5 92 -29 55) -29])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: 41                 
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 89                 
Correct output: 32                  | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 80                 
Correct output: 5                   | Program output: 48                 
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 60                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 33                 
Correct output: 21                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 81                 
Correct output: -64                 | Program output: -30                
Correct output: -33                 | Program output: 32                 
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 82                 
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 54                 
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: 94                 
Correct output: -68                 | Program output: 79                 
Correct output: -37                 | Program output: 80                 
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -10                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: 30                 
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -13                
Correct output: -49                 | Program output: 82                 
Correct output: -99                 | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -74                
Correct output: -5                  | Program output: 57                 
Correct output: -93                 | Program output: -5                 
Correct output: -99                 | Program output: -61                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -6                 
Correct output: -98                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: 36                 
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 66                 
Correct output: -61                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 24                 
Correct output: -56                 | Program output: 78                 
Correct output: -39                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 42                 
Correct output: -29                 | Program output: 92                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_integer_623} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_if} {:close 0, :instruction tagged_683} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_boolean_177} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 2, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2})
Lexicase best program: (exec_do*while (integer_gte exec_if (integer_empty exec_dup_times (boolean_stackdepth integer_lt integer_swap in4 in2 in3) integer_pop print_integer boolean_rot in4 integer_fromboolean integer_min integer_inc exec_do*times (exec_rot (exec_empty exec_yankdup) (integer_flush) (boolean_frominteger exec_dup_items integer_shove integer_div exec_s (exec_do*range (exec_swap (exec_when (integer_flush boolean_flush exec_pop (integer_shove print_integer exec_do*range (exec_k_when_autoconstructing (tag_integer_623 boolean_stackdepth integer_dup exec_y_when_autoconstructing (integer_dec boolean_yankdup boolean_yank exec_if () (tagged_683 integer_yank exec_yank integer_div integer_sub exec_when (integer_min) boolean_eq exec_do*while (integer_stackdepth integer_eq integer_flush) in1 integer_yankdup) integer_mult)) (tag_boolean_177 boolean_rot exec_swap (integer_yankdup boolean_stackdepth) (integer_dup exec_yankdup exec_yankdup boolean_invert_first_then_and exec_dup (integer_yank)) boolean_yankdup boolean_or) exec_when (boolean_rot) integer_add integer_inc exec_when ()) boolean_yank integer_dup) integer_sub boolean_not boolean_and integer_gt boolean_eq exec_do*times (integer_mult exec_dup (integer_sub integer_pop boolean_dup boolean_yankdup in2)))) ())) () ()))) ()))
Lexicase best errors: [1 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 126
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_integer_623} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_if} {:close 0, :instruction tagged_683} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_boolean_177} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 2, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2})
Zero cases best program: (exec_do*while (integer_gte exec_if (integer_empty exec_dup_times (boolean_stackdepth integer_lt integer_swap in4 in2 in3) integer_pop print_integer boolean_rot in4 integer_fromboolean integer_min integer_inc exec_do*times (exec_rot (exec_empty exec_yankdup) (integer_flush) (boolean_frominteger exec_dup_items integer_shove integer_div exec_s (exec_do*range (exec_swap (exec_when (integer_flush boolean_flush exec_pop (integer_shove print_integer exec_do*range (exec_k_when_autoconstructing (tag_integer_623 boolean_stackdepth integer_dup exec_y_when_autoconstructing (integer_dec boolean_yankdup boolean_yank exec_if () (tagged_683 integer_yank exec_yank integer_div integer_sub exec_when (integer_min) boolean_eq exec_do*while (integer_stackdepth integer_eq integer_flush) in1 integer_yankdup) integer_mult)) (tag_boolean_177 boolean_rot exec_swap (integer_yankdup boolean_stackdepth) (integer_dup exec_yankdup exec_yankdup boolean_invert_first_then_and exec_dup (integer_yank)) boolean_yankdup boolean_or) exec_when (boolean_rot) integer_add integer_inc exec_when ()) boolean_yank integer_dup) integer_sub boolean_not boolean_and integer_gt boolean_eq exec_do*times (integer_mult exec_dup (integer_sub integer_pop boolean_dup boolean_yankdup in2)))) ())) () ()))) ()))
Zero cases best errors: [1 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 126
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 14 5 3 3 3 4 11 3 14)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (3 14 5 3 3 3 4 11 3 14)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 2, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 2, :instruction exec_dup_items} {:close 2, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 3, :instruction exec_flush} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_boolean_29} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_617} {:close 0, :instruction exec_do*while})
Best program: (exec_empty integer_lte boolean_invert_first_then_and in2 exec_dup (exec_dup (print_integer boolean_not exec_noop exec_y_when_autoconstructing (exec_swap (integer_yankdup boolean_pop boolean_yankdup integer_eq integer_shove exec_when (exec_dup_items)) (exec_if () () exec_dup_items exec_while (exec_empty exec_do*while (boolean_pop boolean_or boolean_swap integer_dup integer_lt boolean_not boolean_pop) exec_empty boolean_invert_first_then_and) exec_dup_times (boolean_flush exec_flush))) integer_rot)) exec_swap (exec_when (exec_s (exec_when (exec_dup_times (integer_lt boolean_and integer_sub)) integer_lte) (tag_boolean_29 exec_noop integer_eq exec_s (exec_noop exec_dup_items integer_pop exec_dup_times (print_boolean integer_stackdepth print_boolean tagged_617 exec_do*while ())) () ()) ())) ())
Errors: [1 0 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 58
Size: 83
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 9.937
Median total errors in population: 10
Error averages by case: (0.997 0.986 0.995 0.997 0.997 0.997 0.996 0.989 0.997 0.986)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.4
Average program size in population (points): 69.571
Average percent parens in population: 0.285
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 474992
--- Timings ---
Current time: 1559314587904 milliseconds
Total Time:           2.3 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.7 seconds, 32.1%
Fitness Testing:      1.5 seconds, 63.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 31                 
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 52                 
Correct output: 49                  | Program output: 62                 
Correct output: 37                  | Program output: 53                 
Correct output: 0                   | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 78                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 49                 
Correct output: 15                  | Program output: 24                 
Correct output: 25                  | Program output: 50                 
Correct output: 16                  | Program output: 97                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: 39                 
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -79                
Correct output: -39                 | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: 100                
Correct output: -33                 | Program output: 9                  
Correct output: -34                 | Program output: 98                 
Correct output: -83                 | Program output: 22                 
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: 52                 
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -57                
Correct output: -74                 | Program output: 61                 
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 16                 
Correct output: -48                 | Program output: 69                 
Correct output: -51                 | Program output: 10                 
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -4                 
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -6                 
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: 25                 
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: 2                  
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 46                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: 71                 
Correct output: -95                 | Program output: 88                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: 59                 
Correct output: 20                  | Program output: 72                 
Correct output: -34                 | Program output: 73                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: 55                 
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -32                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: 49                 
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction 28} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction 8} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod})
Lexicase best program: (exec_dup_times () boolean_and integer_gt exec_rot (exec_dup_items exec_swap (exec_do*count (boolean_dup_times 28 boolean_yankdup exec_s_when_autoconstructing () (integer_max in3 exec_swap () (boolean_or print_integer exec_noop boolean_shove) integer_max) (boolean_yankdup integer_inc exec_dup_times (boolean_swap boolean_flush exec_s (integer_fromboolean) (boolean_flush boolean_not) (integer_gt) boolean_empty integer_fromboolean 8) in1 boolean_xor exec_yankdup integer_gte boolean_xor exec_eq exec_y_when_autoconstructing (boolean_rot exec_k_when_autoconstructing (integer_empty boolean_yankdup integer_rot integer_lte integer_mod) ())))) ()) () ())
Lexicase best errors: [1 1 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 66
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction 28} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction 8} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod})
Zero cases best program: (exec_dup_times () boolean_and integer_gt exec_rot (exec_dup_items exec_swap (exec_do*count (boolean_dup_times 28 boolean_yankdup exec_s_when_autoconstructing () (integer_max in3 exec_swap () (boolean_or print_integer exec_noop boolean_shove) integer_max) (boolean_yankdup integer_inc exec_dup_times (boolean_swap boolean_flush exec_s (integer_fromboolean) (boolean_flush boolean_not) (integer_gt) boolean_empty integer_fromboolean 8) in1 boolean_xor exec_yankdup integer_gte boolean_xor exec_eq exec_y_when_autoconstructing (boolean_rot exec_k_when_autoconstructing (integer_empty boolean_yankdup integer_rot integer_lte integer_mod) ())))) ()) () ())
Zero cases best errors: [1 1 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 66
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 265 249 266 251 252 363 2 250 366)
Population mean number of elite cases: 2.27
Count of perfect (error zero) individuals by case: (2 265 249 266 251 252 363 2 250 366)
Population mean number of perfect (error zero) cases: 2.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction 28} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction 8} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod})
Best program: (exec_dup_times () boolean_and integer_gt exec_rot (exec_dup_items exec_swap (exec_do*count (boolean_dup_times 28 boolean_yankdup exec_s_when_autoconstructing () (integer_max in3 exec_swap () (boolean_or) print_integer exec_noop boolean_shove) (integer_max) boolean_yankdup integer_inc exec_dup_times (boolean_swap boolean_flush exec_s (integer_fromboolean) (boolean_flush boolean_not) (integer_gt) boolean_empty integer_fromboolean 8) in1 boolean_xor exec_yankdup integer_gte boolean_xor exec_eq exec_y_when_autoconstructing (boolean_rot exec_k_when_autoconstructing (integer_empty boolean_yankdup integer_rot integer_lte integer_mod) ()))) ()) () ())
Errors: [1 1 0 1 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 46
Size: 66
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 7.734
Median total errors in population: 8
Error averages by case: (0.998 0.735 0.751 0.734 0.749 0.748 0.637 0.998 0.75 0.634)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.501
Average program size in population (points): 93.989
Average percent parens in population: 0.263
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.497
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1147545
--- Timings ---
Current time: 1559314591225 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.6 seconds, 48.9%
Fitness Testing:      2.2 seconds, 42.8%
Report:               0.3 seconds,  6.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 31                 
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 52                 
Correct output: 49                  | Program output: 62                 
Correct output: 37                  | Program output: 53                 
Correct output: 0                   | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 78                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 49                 
Correct output: 15                  | Program output: 24                 
Correct output: 25                  | Program output: 50                 
Correct output: 16                  | Program output: 97                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: 39                 
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -79                
Correct output: -39                 | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: 100                
Correct output: -33                 | Program output: 9                  
Correct output: -34                 | Program output: 98                 
Correct output: -83                 | Program output: 22                 
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: 52                 
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -57                
Correct output: -74                 | Program output: 61                 
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 16                 
Correct output: -48                 | Program output: 69                 
Correct output: -51                 | Program output: 10                 
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -4                 
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -6                 
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: 25                 
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: 2                  
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 46                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: 71                 
Correct output: -95                 | Program output: 88                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: 59                 
Correct output: 20                  | Program output: 72                 
Correct output: -34                 | Program output: 73                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: 55                 
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -32                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: 49                 
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction 28} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction 8} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod})
Lexicase best program: (exec_dup_times () boolean_and integer_gt exec_rot (exec_dup_items exec_swap (exec_do*count (boolean_dup_times 28 boolean_yankdup exec_s_when_autoconstructing () (integer_max in3 exec_swap () (boolean_or) print_integer exec_noop integer_dup_items) (integer_max) boolean_yankdup integer_inc exec_dup_times (boolean_swap boolean_flush exec_s (integer_fromboolean) (boolean_flush boolean_not) (integer_gt) boolean_empty integer_fromboolean 8) in1 boolean_xor exec_yankdup integer_gte boolean_xor exec_eq exec_y_when_autoconstructing (boolean_rot exec_k_when_autoconstructing (integer_shove boolean_yankdup integer_rot integer_lte integer_mod) ()))) ()) () ())
Lexicase best errors: [0 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 66
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction 28} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction 8} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod})
Zero cases best program: (exec_dup_times () boolean_and integer_gt exec_rot (exec_dup_items exec_swap (exec_do*count (boolean_dup_times 28 boolean_yankdup exec_s_when_autoconstructing () (integer_max in3 exec_swap () (boolean_or) print_integer exec_noop integer_dup_items) (integer_max) boolean_yankdup integer_inc exec_dup_times (boolean_swap boolean_flush exec_s (integer_fromboolean) (boolean_flush boolean_not) (integer_gt) boolean_empty integer_fromboolean 8) in1 boolean_xor exec_yankdup integer_gte boolean_xor exec_eq exec_y_when_autoconstructing (boolean_rot exec_k_when_autoconstructing (integer_shove boolean_yankdup integer_rot integer_lte integer_mod) ()))) ()) () ())
Zero cases best errors: [0 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 66
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (698 188 706 189 189 189 187 357 189 350)
Population mean number of elite cases: 3.24
Count of perfect (error zero) individuals by case: (698 188 706 189 189 189 187 357 189 350)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_if} {:close 2, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_925} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 1, :instruction 71} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_554} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq})
Best program: (in3 print_integer exec_dup_times (boolean_swap) integer_rot exec_do*count (exec_if (integer_dec exec_y (boolean_dup_items) boolean_eq boolean_or) (integer_mod integer_flush integer_eq boolean_frominteger integer_swap boolean_yankdup) integer_eq) boolean_yankdup exec_do*while () integer_dup_times exec_yank boolean_stackdepth exec_dup_items boolean_xor integer_lt exec_s_when_autoconstructing () (exec_s () (boolean_rot boolean_dup boolean_stackdepth exec_y_when_autoconstructing (integer_add exec_k (boolean_yank boolean_dup_times integer_min boolean_stackdepth boolean_eq) (integer_eq integer_empty integer_yank) exec_noop boolean_yankdup boolean_not exec_dup_items exec_if () (integer_lte)) exec_yank boolean_stackdepth integer_mult integer_gt integer_yank exec_yank integer_empty integer_add tag_exec_925 (exec_s (boolean_pop exec_s (in2 exec_do*while () exec_yank integer_mod integer_gt 71) (integer_dup_times print_exec () exec_yankdup integer_empty) (exec_pop () integer_yankdup integer_eq boolean_yank integer_pop integer_dec boolean_dup_times boolean_dup_items integer_empty tagged_554 integer_yankdup boolean_rot integer_dec exec_swap (exec_dup_times (in2 integer_stackdepth integer_flush) integer_flush boolean_pop) (boolean_pop exec_swap (integer_max boolean_eq) ()))) () ())) ()) ())
Errors: [0 1 0 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 95
Size: 128
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.758
Median total errors in population: 6
Error averages by case: (0.302 0.812 0.294 0.811 0.811 0.811 0.813 0.643 0.811 0.65)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.306
Average program size in population (points): 86.785
Average percent parens in population: 0.259
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9685
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.754
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.004
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1720023
--- Timings ---
Current time: 1559314594700 milliseconds
Total Time:           8.8 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.8 seconds, 54.3%
Fitness Testing:      2.9 seconds, 32.5%
Report:               1.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: 41                 
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 89                 
Correct output: 32                  | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 80                 
Correct output: 5                   | Program output: 48                 
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 60                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 33                 
Correct output: 21                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 81                 
Correct output: -64                 | Program output: -30                
Correct output: -33                 | Program output: 32                 
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 82                 
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 54                 
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: 94                 
Correct output: -68                 | Program output: 79                 
Correct output: -37                 | Program output: 80                 
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -10                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: 30                 
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -13                
Correct output: -49                 | Program output: 82                 
Correct output: -99                 | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -74                
Correct output: -5                  | Program output: 57                 
Correct output: -93                 | Program output: -5                 
Correct output: -99                 | Program output: -61                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -6                 
Correct output: -98                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: 36                 
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 66                 
Correct output: -61                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 24                 
Correct output: -56                 | Program output: 78                 
Correct output: -39                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 42                 
Correct output: -29                 | Program output: 92                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 54} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction tagged_341} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add})
Lexicase best program: (integer_eq integer_stackdepth in2 exec_y_when_autoconstructing (print_integer boolean_xor exec_y_when_autoconstructing (boolean_eq exec_dup (integer_lte boolean_shove in1) -85) boolean_invert_second_then_and boolean_stackdepth boolean_rot boolean_invert_first_then_and exec_if (exec_s_when_autoconstructing (exec_s (exec_rot (exec_flush) () (integer_yankdup 54 exec_shove (integer_rot integer_swap boolean_yank integer_mod exec_yankdup integer_add in1 integer_gte integer_gte exec_if (integer_eq print_exec (integer_add print_boolean exec_flush in1 integer_flush) boolean_or in4 tagged_341 boolean_dup_times) (in4 integer_inc integer_yankdup) exec_do*while (exec_s (print_integer exec_rot (exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub) integer_eq integer_yank -3 exec_do*while (integer_lte exec_rot () () (exec_stackdepth) exec_empty exec_k (boolean_not exec_rot (exec_do*count (integer_min exec_pop (integer_pop exec_do*count () boolean_dup_times boolean_invert_second_then_and exec_stackdepth integer_empty boolean_empty) boolean_dup_items in2 exec_yankdup integer_add)) () ()) ())) () ()) () ())))) () ()) () ()) ()))
Lexicase best errors: [0 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 123
Percent parens: 0.325
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 54} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction tagged_341} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add})
Zero cases best program: (integer_eq integer_stackdepth in2 exec_y_when_autoconstructing (print_integer boolean_xor exec_y_when_autoconstructing (boolean_eq exec_dup (integer_lte boolean_shove in1) -85) boolean_invert_second_then_and boolean_stackdepth boolean_rot boolean_invert_first_then_and exec_if (exec_s_when_autoconstructing (exec_s (exec_rot (exec_flush) () (integer_yankdup 54 exec_shove (integer_rot integer_swap boolean_yank integer_mod exec_yankdup integer_add in1 integer_gte integer_gte exec_if (integer_eq print_exec (integer_add print_boolean exec_flush in1 integer_flush) boolean_or in4 tagged_341 boolean_dup_times) (in4 integer_inc integer_yankdup) exec_do*while (exec_s (print_integer exec_rot (exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub) integer_eq integer_yank -3 exec_do*while (integer_lte exec_rot () () (exec_stackdepth) exec_empty exec_k (boolean_not exec_rot (exec_do*count (integer_min exec_pop (integer_pop exec_do*count () boolean_dup_times boolean_invert_second_then_and exec_stackdepth integer_empty boolean_empty) boolean_dup_items in2 exec_yankdup integer_add)) () ()) ())) () ()) () ())))) () ()) () ()) ()))
Zero cases best errors: [0 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 123
Percent parens: 0.325
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 8 869 2 349 2 274 349 349)
Population mean number of elite cases: 2.21
Count of perfect (error zero) individuals by case: (2 2 8 869 2 349 2 274 349 349)
Population mean number of perfect (error zero) cases: 2.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_eq})
Best program: (in1 in2 print_boolean exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush) exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup_items integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank in4 exec_eq))) ())) ())))))
Errors: [0 0 0 0 0 1 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 44
Size: 63
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 7.794
Median total errors in population: 8
Error averages by case: (0.998 0.998 0.992 0.131 0.998 0.651 0.998 0.726 0.651 0.651)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.713
Average program size in population (points): 83.928
Average percent parens in population: 0.263
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.45575
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.836
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2194586
--- Timings ---
Current time: 1559314597884 milliseconds
Total Time:          12.4 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.3 seconds, 58.6%
Fitness Testing:      3.4 seconds, 27.1%
Report:               1.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 81                 
Correct output: 32                  | Program output: 47                 
Correct output: 1                   | Program output: 19                 
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 88                 
Correct output: 2                   | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 98                 
Correct output: 0                   | Program output: 31                 
Correct output: 42                  | Program output: 96                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 67                 
Correct output: 21                  | Program output: 54                 
Correct output: 13                  | Program output: 88                 
Correct output: 12                  | Program output: 47                 
Correct output: 32                  | Program output: 88                 
Correct output: 15                  | Program output: 93                 
Correct output: 25                  | Program output: 61                 
Correct output: 16                  | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: 95                 
Correct output: -33                 | Program output: 47                 
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: 11                 
Correct output: -85                 | Program output: -16                
Correct output: -72                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: 76                 
Correct output: -97                 | Program output: -9                 
Correct output: -65                 | Program output: -2                 
Correct output: -49                 | Program output: 53                 
Correct output: -33                 | Program output: -24                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -38                
Correct output: -37                 | Program output: -23                
Correct output: -73                 | Program output: -53                
Correct output: -100                | Program output: -8                 
Correct output: -84                 | Program output: -44                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: 37                 
Correct output: -80                 | Program output: 39                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -31                
Correct output: -96                 | Program output: -21                
Correct output: -22                 | Program output: -15                
Correct output: -99                 | Program output: -64                
Correct output: -60                 | Program output: -7                 
Correct output: -99                 | Program output: -1                 
Correct output: -71                 | Program output: 39                 
Correct output: -21                 | Program output: 65                 
Correct output: -49                 | Program output: 84                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: 59                 
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: 70                 
Correct output: -93                 | Program output: -56                
Correct output: -99                 | Program output: 76                 
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: 34                 
Correct output: -98                 | Program output: 26                 
Correct output: -70                 | Program output: 55                 
Correct output: -95                 | Program output: 24                 
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: 80                 
Correct output: -92                 | Program output: 99                 
Correct output: -56                 | Program output: 55                 
Correct output: -29                 | Program output: 55                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_629} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (in4 exec_while (print_boolean) exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush) exec_when (integer_dec exec_stackdepth integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and) integer_dup) exec_dup_times (exec_shove (boolean_stackdepth exec_shove () boolean_shove boolean_swap integer_gt exec_dup (in1 boolean_yank exec_empty exec_dup_times (in4 print_exec (exec_do*while (in1 boolean_yank integer_pop) exec_s_when_autoconstructing () (in4 integer_div boolean_or in2) (integer_lt integer_empty exec_eq integer_sub print_boolean) boolean_frominteger integer_dec boolean_invert_second_then_and boolean_invert_second_then_and tagged_629) exec_yank) exec_swap () (integer_sub integer_flush integer_mod) exec_k_when_autoconstructing () ()))))
Lexicase best errors: [1 0 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 78
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_629} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (in4 exec_while (print_boolean) exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush) exec_when (integer_dec exec_stackdepth integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and) integer_dup) exec_dup_times (exec_shove (boolean_stackdepth exec_shove () boolean_shove boolean_swap integer_gt exec_dup (in1 boolean_yank exec_empty exec_dup_times (in4 print_exec (exec_do*while (in1 boolean_yank integer_pop) exec_s_when_autoconstructing () (in4 integer_div boolean_or in2) (integer_lt integer_empty exec_eq integer_sub print_boolean) boolean_frominteger integer_dec boolean_invert_second_then_and boolean_invert_second_then_and tagged_629) exec_yank) exec_swap () (integer_sub integer_flush integer_mod) exec_k_when_autoconstructing () ()))))
Zero cases best errors: [1 0 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 78
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (309 916 491 1000 101 1000 308 100 517 100)
Population mean number of elite cases: 4.84
Count of perfect (error zero) individuals by case: (309 916 491 0 101 0 308 100 517 100)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction 27} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lt} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 54} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction tagged_341} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop})
Best program: (integer_div boolean_pop boolean_dup_times exec_if (integer_rot 27 in4 print_integer) (exec_swap (integer_yankdup integer_yankdup integer_stackdepth exec_stackdepth) (exec_do*times () print_integer exec_s_when_autoconstructing (boolean_pop integer_lt) (exec_shove ()) (exec_s_when_autoconstructing () (integer_mod boolean_dup exec_rot (boolean_xor integer_lt integer_yankdup 54 exec_shove (integer_rot integer_swap boolean_yank integer_mod exec_yankdup integer_add in1 integer_gte integer_gte exec_if (integer_eq print_exec (integer_add print_boolean exec_flush in1 integer_flush) boolean_or in4 tagged_341 integer_dup_times) (in4 integer_inc integer_yankdup) exec_do*while (exec_s (print_integer exec_rot (exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub) integer_eq integer_yank -3 exec_do*while (integer_lte exec_rot () () (exec_stackdepth) exec_empty exec_k (boolean_not exec_rot (exec_do*count (integer_min exec_pop ())) () ()) ())) () ()) () ()))) () ()) ()))))
Errors: [1 0 1 1 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 75
Size: 115
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 7.158
Median total errors in population: 7
Error averages by case: (0.691 0.084 0.509 1.0 0.899 1.0 0.692 0.9 0.483 0.9)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 61.602
Average program size in population (points): 87.259
Average percent parens in population: 0.290
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 6.0825
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 131
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 133
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2436930
--- Timings ---
Current time: 1559314601316 milliseconds
Total Time:          15.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.7 seconds, 63.4%
Fitness Testing:      3.6 seconds, 23.5%
Report:               1.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 81                 
Correct output: 32                  | Program output: 47                 
Correct output: 1                   | Program output: 19                 
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 88                 
Correct output: 2                   | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 98                 
Correct output: 0                   | Program output: 31                 
Correct output: 42                  | Program output: 96                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 67                 
Correct output: 21                  | Program output: 54                 
Correct output: 13                  | Program output: 88                 
Correct output: 12                  | Program output: 47                 
Correct output: 32                  | Program output: 88                 
Correct output: 15                  | Program output: 93                 
Correct output: 25                  | Program output: 61                 
Correct output: 16                  | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: 95                 
Correct output: -33                 | Program output: 47                 
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: 11                 
Correct output: -85                 | Program output: -16                
Correct output: -72                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: 76                 
Correct output: -97                 | Program output: -9                 
Correct output: -65                 | Program output: -2                 
Correct output: -49                 | Program output: 53                 
Correct output: -33                 | Program output: -24                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -38                
Correct output: -37                 | Program output: -23                
Correct output: -73                 | Program output: -53                
Correct output: -100                | Program output: -8                 
Correct output: -84                 | Program output: -44                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: 37                 
Correct output: -80                 | Program output: 39                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -31                
Correct output: -96                 | Program output: -21                
Correct output: -22                 | Program output: -15                
Correct output: -99                 | Program output: -64                
Correct output: -60                 | Program output: -7                 
Correct output: -99                 | Program output: -1                 
Correct output: -71                 | Program output: 39                 
Correct output: -21                 | Program output: 65                 
Correct output: -49                 | Program output: 84                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: 59                 
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: 70                 
Correct output: -93                 | Program output: -56                
Correct output: -99                 | Program output: 76                 
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: 34                 
Correct output: -98                 | Program output: 26                 
Correct output: -70                 | Program output: 55                 
Correct output: -95                 | Program output: 24                 
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: 80                 
Correct output: -92                 | Program output: 99                 
Correct output: -56                 | Program output: 55                 
Correct output: -29                 | Program output: 55                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 54} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction tagged_341} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_eq integer_min in4 exec_y_when_autoconstructing (print_integer boolean_xor exec_y_when_autoconstructing (boolean_eq exec_dup (integer_lte boolean_shove in1) -85) boolean_invert_second_then_and boolean_stackdepth boolean_rot boolean_invert_first_then_and exec_if (exec_s_when_autoconstructing (exec_s (exec_rot (exec_flush) () (integer_yankdup 54 exec_shove (integer_rot integer_swap boolean_yank integer_mod exec_yankdup integer_add in1 integer_gte integer_gte exec_if (integer_eq print_exec (integer_add print_boolean exec_flush in1 integer_flush) integer_eq in4 tagged_341 boolean_dup_times) (in4 integer_inc integer_yankdup) exec_do*while (exec_s (print_integer exec_rot (exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub) integer_eq integer_yank -3 exec_do*while (integer_lte exec_rot () () (exec_stackdepth) exec_empty exec_k (boolean_not exec_rot (exec_do*count (integer_min exec_pop (integer_pop exec_do*count () boolean_dup_times boolean_invert_second_then_and exec_stackdepth))) () ()) ())) () ()) () ())))) () ()) () ()) ()))
Lexicase best errors: [0 1 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 117
Percent parens: 0.342
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 1, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 54} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction tagged_341} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_eq integer_min in4 exec_y_when_autoconstructing (print_integer boolean_xor exec_y_when_autoconstructing (boolean_eq exec_dup (integer_lte boolean_shove in1) -85) boolean_invert_second_then_and boolean_stackdepth boolean_rot boolean_invert_first_then_and exec_if (exec_s_when_autoconstructing (exec_s (exec_rot (exec_flush) () (integer_yankdup 54 exec_shove (integer_rot integer_swap boolean_yank integer_mod exec_yankdup integer_add in1 integer_gte integer_gte exec_if (integer_eq print_exec (integer_add print_boolean exec_flush in1 integer_flush) integer_eq in4 tagged_341 boolean_dup_times) (in4 integer_inc integer_yankdup) exec_do*while (exec_s (print_integer exec_rot (exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub) integer_eq integer_yank -3 exec_do*while (integer_lte exec_rot () () (exec_stackdepth) exec_empty exec_k (boolean_not exec_rot (exec_do*count (integer_min exec_pop (integer_pop exec_do*count () boolean_dup_times boolean_invert_second_then_and exec_stackdepth))) () ()) ())) () ()) () ())))) () ()) () ()) ()))
Zero cases best errors: [0 1 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 117
Percent parens: 0.342
--- Lexicase Population Statistics ---
Count of elite individuals by case: (388 249 915 276 388 388 920 387 387 1000)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (388 249 915 276 388 388 920 387 387 0)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction 27} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_noop})
Best program: (integer_div boolean_pop boolean_dup_times exec_if (integer_rot 27 in4 print_integer) (exec_swap (integer_yankdup integer_yankdup exec_do*while (exec_flush) exec_when (exec_eq exec_stackdepth integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth exec_shove () boolean_shove boolean_swap integer_gt exec_dup (in1 boolean_yank exec_empty exec_s (in4 print_exec (exec_do*while (in1 boolean_yank integer_pop) exec_s_when_autoconstructing (in4 integer_div boolean_or in2) (integer_lt integer_empty exec_eq integer_sub exec_do*times (integer_lte boolean_yank) integer_lte exec_yank exec_while (integer_yankdup exec_eq exec_do*times () boolean_rot exec_yankdup print_boolean) exec_noop) ())) () ())))) ()))
Errors: [0 1 0 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 62
Size: 84
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 5.702
Median total errors in population: 7
Error averages by case: (0.612 0.751 0.085 0.724 0.612 0.612 0.08 0.613 0.613 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 61.502
Average program size in population (points): 87.036
Average percent parens in population: 0.290
Minimum age in population: 5.25
Maximum age in population: 9.25
Average age in population: 7.5449375
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2826865
--- Timings ---
Current time: 1559314604171 milliseconds
Total Time:          18.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.0 seconds, 64.2%
Fitness Testing:      4.0 seconds, 21.3%
Report:               2.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: 41                 
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 89                 
Correct output: 32                  | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 80                 
Correct output: 5                   | Program output: 48                 
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 60                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 33                 
Correct output: 21                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 81                 
Correct output: -64                 | Program output: -30                
Correct output: -33                 | Program output: 32                 
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 82                 
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 54                 
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: 94                 
Correct output: -68                 | Program output: 79                 
Correct output: -37                 | Program output: 80                 
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -10                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: 30                 
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -13                
Correct output: -49                 | Program output: 82                 
Correct output: -99                 | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -74                
Correct output: -5                  | Program output: 57                 
Correct output: -93                 | Program output: -5                 
Correct output: -99                 | Program output: -61                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -6                 
Correct output: -98                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: 36                 
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 66                 
Correct output: -61                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 24                 
Correct output: -56                 | Program output: 78                 
Correct output: -39                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 42                 
Correct output: -29                 | Program output: 92                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_eq})
Lexicase best program: (in1 in2 print_boolean exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush) exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup_items integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank in4 exec_eq))) ())) ())))))
Lexicase best errors: [1 1 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 63
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_eq})
Zero cases best program: (in1 in2 print_boolean exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush) exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup_items integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank in4 exec_eq))) ())) ())))))
Zero cases best errors: [1 1 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 63
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (657 139 899 657 107 1000 1000 105 898 106)
Population mean number of elite cases: 5.57
Count of perfect (error zero) individuals by case: (657 139 899 657 107 0 0 105 898 106)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 54} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_629} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (in1 in2 print_boolean exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush) exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_invert_first_then_and in4) exec_dup_times (exec_shove (boolean_stackdepth exec_shove () boolean_shove boolean_swap exec_s (exec_rot (exec_flush) () (integer_yankdup 54 exec_shove (integer_rot integer_swap boolean_yank integer_mod exec_yankdup in2) integer_lt integer_empty exec_eq integer_sub print_boolean) boolean_frominteger integer_dec boolean_invert_second_then_and boolean_invert_second_then_and tagged_629) (exec_yank) (exec_swap () (integer_sub integer_flush integer_mod) exec_k_when_autoconstructing () ())))))))
Errors: [1 1 0 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 57
Size: 79
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 6.432
Median total errors in population: 6
Error averages by case: (0.343 0.861 0.101 0.343 0.893 1.0 1.0 0.895 0.102 0.894)
Error minima by case: (0 0 0 0 0 1 1 0 0 0)
Average genome size in population (length): 61.435
Average program size in population (points): 87.133
Average percent parens in population: 0.293
Minimum age in population: 6.25
Maximum age in population: 10.8125
Average age in population: 8.9825
Median age in population: 9.046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3328745
--- Timings ---
Current time: 1559314607058 milliseconds
Total Time:          21.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.2 seconds, 65.9%
Fitness Testing:      4.4 seconds, 20.5%
Report:               2.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 81                 
Correct output: 32                  | Program output: 47                 
Correct output: 1                   | Program output: 19                 
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 88                 
Correct output: 2                   | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 98                 
Correct output: 0                   | Program output: 31                 
Correct output: 42                  | Program output: 96                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 67                 
Correct output: 21                  | Program output: 54                 
Correct output: 13                  | Program output: 88                 
Correct output: 12                  | Program output: 47                 
Correct output: 32                  | Program output: 88                 
Correct output: 15                  | Program output: 93                 
Correct output: 25                  | Program output: 61                 
Correct output: 16                  | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: 95                 
Correct output: -33                 | Program output: 47                 
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: 11                 
Correct output: -85                 | Program output: -16                
Correct output: -72                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: 76                 
Correct output: -97                 | Program output: -9                 
Correct output: -65                 | Program output: -2                 
Correct output: -49                 | Program output: 53                 
Correct output: -33                 | Program output: -24                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -38                
Correct output: -37                 | Program output: -23                
Correct output: -73                 | Program output: -53                
Correct output: -100                | Program output: -8                 
Correct output: -84                 | Program output: -44                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: 37                 
Correct output: -80                 | Program output: 39                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -31                
Correct output: -96                 | Program output: -21                
Correct output: -22                 | Program output: -15                
Correct output: -99                 | Program output: -64                
Correct output: -60                 | Program output: -7                 
Correct output: -99                 | Program output: -1                 
Correct output: -71                 | Program output: 39                 
Correct output: -21                 | Program output: 65                 
Correct output: -49                 | Program output: 84                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: 59                 
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: 70                 
Correct output: -93                 | Program output: -56                
Correct output: -99                 | Program output: 76                 
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: 34                 
Correct output: -98                 | Program output: 26                 
Correct output: -70                 | Program output: 55                 
Correct output: -95                 | Program output: 24                 
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: 80                 
Correct output: -92                 | Program output: 99                 
Correct output: -56                 | Program output: 55                 
Correct output: -29                 | Program output: 55                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction 27} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lt} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tagged_76} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_div boolean_pop boolean_dup_times exec_if (boolean_not 27) (in4 print_integer) exec_swap (integer_yankdup integer_yankdup integer_stackdepth exec_stackdepth) (exec_do*times () print_integer exec_s_when_autoconstructing (boolean_pop integer_lt) (exec_shove ()) (exec_s_when_autoconstructing () (integer_mod boolean_dup exec_rot (boolean_xor integer_lt boolean_dup) (integer_pop exec_stackdepth exec_dup_items in1 boolean_yankdup print_integer integer_yankdup integer_yankdup) (exec_pop (boolean_invert_first_then_and boolean_dup exec_rot (boolean_xor integer_lt boolean_dup) (integer_pop exec_stackdepth integer_add integer_gte) (integer_mod exec_empty exec_shove (integer_flush exec_yankdup exec_y_when_autoconstructing (exec_dup_times (integer_pop boolean_flush exec_empty boolean_xor integer_min boolean_dup_times integer_stackdepth boolean_dup integer_eq) integer_lte) exec_y_when_autoconstructing (exec_while (boolean_shove integer_mod in3 boolean_pop exec_when (exec_yank in3) boolean_not in2) integer_gte) exec_empty integer_rot exec_do*while (boolean_stackdepth integer_flush integer_mult boolean_swap exec_dup_items) exec_do*times ()) integer_div) in1 tagged_76 exec_y_when_autoconstructing ()))) ())))
Lexicase best errors: [0 1 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 116
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction 27} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lt} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tagged_76} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_div boolean_pop boolean_dup_times exec_if (boolean_not 27) (in4 print_integer) exec_swap (integer_yankdup integer_yankdup integer_stackdepth exec_stackdepth) (exec_do*times () print_integer exec_s_when_autoconstructing (boolean_pop integer_lt) (exec_shove ()) (exec_s_when_autoconstructing () (integer_mod boolean_dup exec_rot (boolean_xor integer_lt boolean_dup) (integer_pop exec_stackdepth exec_dup_items in1 boolean_yankdup print_integer integer_yankdup integer_yankdup) (exec_pop (boolean_invert_first_then_and boolean_dup exec_rot (boolean_xor integer_lt boolean_dup) (integer_pop exec_stackdepth integer_add integer_gte) (integer_mod exec_empty exec_shove (integer_flush exec_yankdup exec_y_when_autoconstructing (exec_dup_times (integer_pop boolean_flush exec_empty boolean_xor integer_min boolean_dup_times integer_stackdepth boolean_dup integer_eq) integer_lte) exec_y_when_autoconstructing (exec_while (boolean_shove integer_mod in3 boolean_pop exec_when (exec_yank in3) boolean_not in2) integer_gte) exec_empty integer_rot exec_do*while (boolean_stackdepth integer_flush integer_mult boolean_swap exec_dup_items) exec_do*times ()) integer_div) in1 tagged_76 exec_y_when_autoconstructing ()))) ())))
Zero cases best errors: [0 1 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 116
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (312 1000 475 151 787 312 312 311 464 151)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (312 0 475 151 787 312 312 311 464 151)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction 27} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lt} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_noop})
Best program: (integer_div boolean_pop boolean_dup_times exec_if (integer_rot 27 in4 print_integer) (exec_swap (integer_yankdup integer_yankdup integer_stackdepth exec_stackdepth) (exec_do*times () print_integer exec_s_when_autoconstructing (boolean_pop integer_lt) (exec_shove ()) (exec_s_when_autoconstructing () (integer_mod boolean_dup exec_y (boolean_xor integer_lt boolean_dup) boolean_or in2) (integer_lt integer_empty exec_eq integer_sub exec_do*times (integer_lte boolean_yank) integer_lte exec_yank exec_while (integer_yankdup exec_eq print_integer) boolean_rot exec_yankdup print_boolean) exec_noop))))
Errors: [0 1 1 1 0 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 45
Size: 61
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 6.725
Median total errors in population: 7
Error averages by case: (0.688 1.0 0.525 0.849 0.213 0.688 0.688 0.689 0.536 0.849)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.889
Average program size in population (points): 85.302
Average percent parens in population: 0.294
Minimum age in population: 8.0
Maximum age in population: 12.328125
Average age in population: 10.462953125
Median age in population: 10.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3674129
--- Timings ---
Current time: 1559314610024 milliseconds
Total Time:          24.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.2 seconds, 67.1%
Fitness Testing:      4.8 seconds, 19.7%
Report:               3.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 81                 
Correct output: 32                  | Program output: 47                 
Correct output: 1                   | Program output: 19                 
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 88                 
Correct output: 2                   | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 98                 
Correct output: 0                   | Program output: 31                 
Correct output: 42                  | Program output: 96                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 67                 
Correct output: 21                  | Program output: 54                 
Correct output: 13                  | Program output: 88                 
Correct output: 12                  | Program output: 47                 
Correct output: 32                  | Program output: 88                 
Correct output: 15                  | Program output: 93                 
Correct output: 25                  | Program output: 61                 
Correct output: 16                  | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: 95                 
Correct output: -33                 | Program output: 47                 
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: 11                 
Correct output: -85                 | Program output: -16                
Correct output: -72                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: 76                 
Correct output: -97                 | Program output: -9                 
Correct output: -65                 | Program output: -2                 
Correct output: -49                 | Program output: 53                 
Correct output: -33                 | Program output: -24                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -38                
Correct output: -37                 | Program output: -23                
Correct output: -73                 | Program output: -53                
Correct output: -100                | Program output: -8                 
Correct output: -84                 | Program output: -44                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: 37                 
Correct output: -80                 | Program output: 39                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -31                
Correct output: -96                 | Program output: -21                
Correct output: -22                 | Program output: -15                
Correct output: -99                 | Program output: -64                
Correct output: -60                 | Program output: -7                 
Correct output: -99                 | Program output: -1                 
Correct output: -71                 | Program output: 39                 
Correct output: -21                 | Program output: 65                 
Correct output: -49                 | Program output: 84                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: 59                 
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: 70                 
Correct output: -93                 | Program output: -56                
Correct output: -99                 | Program output: 76                 
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: 34                 
Correct output: -98                 | Program output: 26                 
Correct output: -70                 | Program output: 55                 
Correct output: -95                 | Program output: 24                 
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: 80                 
Correct output: -92                 | Program output: 99                 
Correct output: -56                 | Program output: 55                 
Correct output: -29                 | Program output: 55                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 2, :instruction exec_dup_items} {:close 3, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 3, :instruction exec_flush} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_boolean_29} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (integer_eq integer_min in4 exec_y_when_autoconstructing (print_integer boolean_xor exec_y_when_autoconstructing () boolean_eq exec_dup (integer_lte boolean_yankdup integer_eq integer_shove exec_when (exec_dup_items)) exec_if () ()) exec_dup_items exec_while (exec_empty exec_do*while (boolean_pop boolean_or boolean_swap integer_dup integer_lt boolean_not boolean_pop) exec_empty boolean_invert_first_then_and) exec_dup_times (boolean_flush exec_flush) integer_rot exec_swap (exec_when (exec_s (exec_when (exec_dup_times (integer_lt boolean_yankdup integer_sub)) integer_lte tag_boolean_29 exec_noop integer_eq exec_s (exec_noop exec_dup_items exec_do*while (integer_stackdepth)) () ()) () ())) ())
Lexicase best errors: [0 0 0 1 1 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 72
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 2, :instruction exec_dup_items} {:close 3, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 3, :instruction exec_flush} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_boolean_29} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (integer_eq integer_min in4 exec_y_when_autoconstructing (print_integer boolean_xor exec_y_when_autoconstructing () boolean_eq exec_dup (integer_lte boolean_yankdup integer_eq integer_shove exec_when (exec_dup_items)) exec_if () ()) exec_dup_items exec_while (exec_empty exec_do*while (boolean_pop boolean_or boolean_swap integer_dup integer_lt boolean_not boolean_pop) exec_empty boolean_invert_first_then_and) exec_dup_times (boolean_flush exec_flush) integer_rot exec_swap (exec_when (exec_s (exec_when (exec_dup_times (integer_lt boolean_yankdup integer_sub)) integer_lte tag_boolean_29 exec_noop integer_eq exec_s (exec_noop exec_dup_items exec_do*while (integer_stackdepth)) () ()) () ())) ())
Zero cases best errors: [0 0 0 1 1 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 72
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (463 907 464 220 1000 220 1000 463 1000 223)
Population mean number of elite cases: 5.96
Count of perfect (error zero) individuals by case: (463 907 464 220 0 220 0 463 0 223)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 54} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction tagged_411} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc})
Best program: (integer_eq integer_min in4 exec_y_when_autoconstructing (print_integer boolean_xor exec_y_when_autoconstructing (boolean_eq exec_dup (integer_shove boolean_shove in1) integer_rot) boolean_invert_second_then_and boolean_stackdepth boolean_rot boolean_invert_first_then_and exec_if (integer_max exec_s (exec_rot (exec_flush) () (integer_yankdup 54 exec_shove (integer_rot integer_swap boolean_yank integer_mod exec_yankdup integer_add print_integer integer_gte integer_gte exec_if (integer_eq print_exec (integer_add print_boolean exec_flush in1 integer_flush) boolean_or in4 tagged_411 boolean_dup_times) (in4 integer_inc)))) () ()) ()))
Errors: [0 0 0 1 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 48
Size: 64
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.04
Median total errors in population: 7
Error averages by case: (0.537 0.093 0.536 0.78 1.0 0.78 1.0 0.537 1.0 0.777)
Error minima by case: (0 0 0 0 1 0 1 0 1 0)
Average genome size in population (length): 58.489
Average program size in population (points): 82.97
Average percent parens in population: 0.292
Minimum age in population: 9.0
Maximum age in population: 13.953125
Average age in population: 11.9409140625
Median age in population: 11.9921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4061878
--- Timings ---
Current time: 1559314612867 milliseconds
Total Time:          27.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.4 seconds, 67.4%
Fitness Testing:      5.1 seconds, 18.9%
Report:               3.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: 41                 
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 89                 
Correct output: 32                  | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 80                 
Correct output: 5                   | Program output: 48                 
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 60                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 33                 
Correct output: 21                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 81                 
Correct output: -64                 | Program output: -30                
Correct output: -33                 | Program output: 32                 
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 82                 
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 54                 
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: 94                 
Correct output: -68                 | Program output: 79                 
Correct output: -37                 | Program output: 80                 
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -10                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: 30                 
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -13                
Correct output: -49                 | Program output: 82                 
Correct output: -99                 | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -74                
Correct output: -5                  | Program output: 57                 
Correct output: -93                 | Program output: -5                 
Correct output: -99                 | Program output: -61                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -6                 
Correct output: -98                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: 36                 
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 66                 
Correct output: -61                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 24                 
Correct output: -56                 | Program output: 78                 
Correct output: -39                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 42                 
Correct output: -29                 | Program output: 92                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add})
Lexicase best program: (in1 in2 print_boolean exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush) exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup_items print_newline boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank in4 boolean_dup_times) in4 integer_inc integer_yankdup) exec_do*while (exec_s (print_integer exec_rot (exec_k_when_autoconstructing () (boolean_shove boolean_dup_times exec_dup_times (integer_sub) integer_eq integer_yank -3 exec_empty integer_lte exec_rot () () (exec_stackdepth) exec_empty exec_k (boolean_not exec_rot (exec_do*count (integer_min exec_pop (integer_pop integer_min exec_pop (integer_pop exec_do*count (boolean_dup_times boolean_invert_second_then_and integer_min exec_pop (integer_pop exec_do*count () boolean_dup_times boolean_invert_second_then_and exec_stackdepth integer_empty boolean_empty) boolean_dup_items in2 exec_yankdup integer_add))))) () ()) ())) () ()) () ())) ())) ())))))
Lexicase best errors: [0 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 133
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add})
Zero cases best program: (in1 in2 print_boolean exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush) exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup_items print_newline boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank in4 boolean_dup_times) in4 integer_inc integer_yankdup) exec_do*while (exec_s (print_integer exec_rot (exec_k_when_autoconstructing () (boolean_shove boolean_dup_times exec_dup_times (integer_sub) integer_eq integer_yank -3 exec_empty integer_lte exec_rot () () (exec_stackdepth) exec_empty exec_k (boolean_not exec_rot (exec_do*count (integer_min exec_pop (integer_pop integer_min exec_pop (integer_pop exec_do*count (boolean_dup_times boolean_invert_second_then_and integer_min exec_pop (integer_pop exec_do*count () boolean_dup_times boolean_invert_second_then_and exec_stackdepth integer_empty boolean_empty) boolean_dup_items in2 exec_yankdup integer_add))))) () ()) ())) () ()) () ())) ())) ())))))
Zero cases best errors: [0 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 133
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (146 324 445 915 1000 914 590 914 146 145)
Population mean number of elite cases: 5.54
Count of perfect (error zero) individuals by case: (146 324 445 915 0 914 590 914 146 145)
Population mean number of perfect (error zero) cases: 4.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_eq})
Best program: (in1 in2 print_boolean exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush) exec_when (integer_pop exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup_items integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_dup_items) integer_lte) (in4 exec_yank in4 exec_eq))) ())) ())))))
Errors: [0 1 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 53
Size: 74
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 5.461
Median total errors in population: 5
Error averages by case: (0.854 0.676 0.555 0.085 1.0 0.086 0.41 0.086 0.854 0.855)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 58.377
Average program size in population (points): 82.562
Average percent parens in population: 0.290
Minimum age in population: 10.0
Maximum age in population: 15.45703125
Average age in population: 13.452609375
Median age in population: 13.50390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4451949
--- Timings ---
Current time: 1559314615721 milliseconds
Total Time:          30.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.6 seconds, 68.3%
Fitness Testing:      5.5 seconds, 18.2%
Report:               4.0 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: 41                 
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 89                 
Correct output: 32                  | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 80                 
Correct output: 5                   | Program output: 48                 
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 60                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 33                 
Correct output: 21                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 81                 
Correct output: -64                 | Program output: -30                
Correct output: -33                 | Program output: 32                 
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 82                 
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 54                 
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: 94                 
Correct output: -68                 | Program output: 79                 
Correct output: -37                 | Program output: 80                 
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -10                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: 30                 
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -13                
Correct output: -49                 | Program output: 82                 
Correct output: -99                 | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -74                
Correct output: -5                  | Program output: 57                 
Correct output: -93                 | Program output: -5                 
Correct output: -99                 | Program output: -61                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -6                 
Correct output: -98                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: 36                 
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 66                 
Correct output: -61                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 24                 
Correct output: -56                 | Program output: 78                 
Correct output: -39                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 42                 
Correct output: -29                 | Program output: 92                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction 27} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lt} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction tagged_341} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_div boolean_pop boolean_dup_times exec_if (integer_rot 27 in4 print_integer) (exec_swap (integer_yankdup integer_yankdup integer_stackdepth exec_stackdepth) (exec_do*times () print_integer exec_s_when_autoconstructing (boolean_pop integer_lt) (exec_shove ()) (exec_s_when_autoconstructing () (integer_mod boolean_dup exec_rot (boolean_xor integer_lt boolean_dup) (integer_pop exec_stackdepth integer_add in1 boolean_yankdup print_integer integer_flush) (integer_flush boolean_yank exec_dup (exec_y_when_autoconstructing (exec_k () (boolean_invert_second_then_and boolean_or integer_inc) in4) tagged_341 boolean_dup_times) in4 integer_inc) integer_yankdup) (exec_do*while (exec_s (print_integer exec_rot (exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean) integer_sub integer_eq integer_yank -3 exec_do*while (integer_lte exec_rot () () (exec_stackdepth) exec_empty exec_k (boolean_not exec_rot (exec_do*count (integer_min integer_dup_times)) () ()) ())) () ()) () ()))))))
Lexicase best errors: [0 1 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 109
Percent parens: 0.358
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction 27} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lt} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction tagged_341} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_div boolean_pop boolean_dup_times exec_if (integer_rot 27 in4 print_integer) (exec_swap (integer_yankdup integer_yankdup integer_stackdepth exec_stackdepth) (exec_do*times () print_integer exec_s_when_autoconstructing (boolean_pop integer_lt) (exec_shove ()) (exec_s_when_autoconstructing () (integer_mod boolean_dup exec_rot (boolean_xor integer_lt boolean_dup) (integer_pop exec_stackdepth integer_add in1 boolean_yankdup print_integer integer_flush) (integer_flush boolean_yank exec_dup (exec_y_when_autoconstructing (exec_k () (boolean_invert_second_then_and boolean_or integer_inc) in4) tagged_341 boolean_dup_times) in4 integer_inc) integer_yankdup) (exec_do*while (exec_s (print_integer exec_rot (exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean) integer_sub integer_eq integer_yank -3 exec_do*while (integer_lte exec_rot () () (exec_stackdepth) exec_empty exec_k (boolean_not exec_rot (exec_do*count (integer_min integer_dup_times)) () ()) ())) () ()) () ()))))))
Zero cases best errors: [0 1 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 109
Percent parens: 0.358
--- Lexicase Population Statistics ---
Count of elite individuals by case: (174 1000 1000 619 174 175 619 144 617 144)
Population mean number of elite cases: 4.67
Count of perfect (error zero) individuals by case: (174 0 0 619 174 175 619 144 617 144)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 54} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_341} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yankdup})
Best program: (in1 in2 print_boolean exec_do*while (print_integer) exec_shove (integer_yankdup exec_y_when_autoconstructing (print_integer boolean_xor exec_y_when_autoconstructing (boolean_eq exec_dup (integer_lte boolean_shove in1 -85) boolean_invert_second_then_and boolean_stackdepth boolean_rot boolean_invert_first_then_and exec_if (exec_s_when_autoconstructing (exec_s (exec_rot (exec_flush) () (integer_yankdup 54 exec_shove (integer_rot integer_swap boolean_yank integer_mod exec_yankdup integer_add in1 integer_gte integer_gte boolean_shove boolean_swap integer_gt exec_dup (integer_swap boolean_yank integer_yankdup exec_dup_times (in4 print_exec (exec_do*while (in1 boolean_yank tagged_341 boolean_dup_times) in4 integer_inc) integer_yankdup) exec_do*while (exec_s (print_integer exec_do*times () exec_dup () integer_yankdup) () ()))))) () ()) () ()) ()))))
Errors: [1 1 1 0 1 1 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 62
Size: 90
Percent parens: 0.311
--- Population Statistics ---
Average total errors in population: 7.334
Median total errors in population: 7
Error averages by case: (0.826 1.0 1.0 0.381 0.826 0.825 0.381 0.856 0.383 0.856)
Error minima by case: (0 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 57.68
Average program size in population (points): 82.262
Average percent parens in population: 0.296
Minimum age in population: 11.0
Maximum age in population: 16.90234375
Average age in population: 14.929880859375
Median age in population: 14.9755859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4734779
--- Timings ---
Current time: 1559314618415 milliseconds
Total Time:          32.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.7 seconds, 69.1%
Fitness Testing:      5.9 seconds, 17.8%
Report:               4.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 31                 
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 52                 
Correct output: 49                  | Program output: 62                 
Correct output: 37                  | Program output: 53                 
Correct output: 0                   | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 78                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 49                 
Correct output: 15                  | Program output: 24                 
Correct output: 25                  | Program output: 50                 
Correct output: 16                  | Program output: 97                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: 39                 
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -79                
Correct output: -39                 | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: 100                
Correct output: -33                 | Program output: 9                  
Correct output: -34                 | Program output: 98                 
Correct output: -83                 | Program output: 22                 
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: 52                 
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -57                
Correct output: -74                 | Program output: 61                 
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 16                 
Correct output: -48                 | Program output: 69                 
Correct output: -51                 | Program output: 10                 
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -4                 
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -6                 
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: 25                 
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: 2                  
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 46                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: 71                 
Correct output: -95                 | Program output: 88                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: 59                 
Correct output: 20                  | Program output: 72                 
Correct output: -34                 | Program output: 73                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: 55                 
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -32                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: 49                 
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 2, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_swap})
Lexicase best program: (integer_eq integer_min in1 integer_lte in3 exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup_items integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank in4 integer_swap))) ())) ()))))))
Lexicase best errors: [1 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 65
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 2, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_swap})
Zero cases best program: (integer_eq integer_min in1 integer_lte in3 exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup_items integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank in4 integer_swap))) ())) ()))))))
Zero cases best errors: [1 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 65
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (332 1 250 918 1 1 336 334 671 671)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (332 1 250 918 1 1 336 334 671 671)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 2, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_swap})
Best program: (integer_eq integer_min in1 integer_lte in3 exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup_items integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank in4 integer_swap))) ())) ()))))))
Errors: [1 0 1 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 46
Size: 65
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 6.485
Median total errors in population: 6
Error averages by case: (0.668 0.999 0.75 0.082 0.999 0.999 0.664 0.666 0.329 0.329)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.375
Average program size in population (points): 80.206
Average percent parens in population: 0.294
Minimum age in population: 12.0
Maximum age in population: 18.234375
Average age in population: 16.40226953125
Median age in population: 16.43212890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5061525
--- Timings ---
Current time: 1559314620984 milliseconds
Total Time:          35.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.8 seconds, 69.8%
Fitness Testing:      6.2 seconds, 17.4%
Report:               4.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 31                 
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 52                 
Correct output: 49                  | Program output: 62                 
Correct output: 37                  | Program output: 53                 
Correct output: 0                   | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 78                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 49                 
Correct output: 15                  | Program output: 24                 
Correct output: 25                  | Program output: 50                 
Correct output: 16                  | Program output: 97                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: 39                 
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -79                
Correct output: -39                 | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: 100                
Correct output: -33                 | Program output: 9                  
Correct output: -34                 | Program output: 98                 
Correct output: -83                 | Program output: 22                 
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: 52                 
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -57                
Correct output: -74                 | Program output: 61                 
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 16                 
Correct output: -48                 | Program output: 69                 
Correct output: -51                 | Program output: 10                 
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -4                 
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -6                 
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: 25                 
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: 2                  
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 46                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: 71                 
Correct output: -95                 | Program output: 88                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: 59                 
Correct output: 20                  | Program output: 72                 
Correct output: -34                 | Program output: 73                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: 55                 
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -32                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: 49                 
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 2, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_swap})
Lexicase best program: (integer_eq integer_min in1 integer_lte in3 exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup_items integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank in4 integer_swap))) ())) ()))))))
Lexicase best errors: [1 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 65
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 2, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_swap})
Zero cases best program: (integer_eq integer_min in1 integer_lte in3 exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup_items integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank in4 integer_swap))) ())) ()))))))
Zero cases best errors: [1 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 65
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (288 406 404 287 406 406 288 288 407 407)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (288 406 404 287 406 406 288 288 407 407)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 2, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_eq integer_min in1 integer_lte in3 exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush exec_when (exec_eq exec_do*range (integer_gte exec_empty integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup boolean_or in2) integer_lt integer_empty exec_eq exec_eq print_boolean) boolean_frominteger integer_dec boolean_invert_second_then_and))))
Errors: [1 0 0 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 43
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 6.413
Median total errors in population: 6
Error averages by case: (0.712 0.594 0.596 0.713 0.594 0.594 0.712 0.712 0.593 0.593)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.315
Average program size in population (points): 72.64
Average percent parens in population: 0.292
Minimum age in population: 13.03125
Maximum age in population: 19.58740234375
Average age in population: 17.5051630859375
Median age in population: 17.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 204
Genome diversity (% unique genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 206
Syntactic diversity (% unique Push programs):	 0.746
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5291130
--- Timings ---
Current time: 1559314623585 milliseconds
Total Time:          38.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.9 seconds, 70.5%
Fitness Testing:      6.4 seconds, 16.9%
Report:               4.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 82                 
Correct output: -73                 | Program output: -33                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -13                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 87                 
Correct output: 1                   | Program output: 11                 
Correct output: 38                  | Program output: 82                 
Correct output: 5                   | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 86                 
Correct output: 37                  | Program output: 61                 
Correct output: 0                   | Program output: 87                 
Correct output: 42                  | Program output: 91                 
Correct output: 7                   | Program output: 98                 
Correct output: 4                   | Program output: 82                 
Correct output: 21                  | Program output: 71                 
Correct output: 13                  | Program output: 87                 
Correct output: 12                  | Program output: 88                 
Correct output: 32                  | Program output: 88                 
Correct output: 15                  | Program output: 96                 
Correct output: 25                  | Program output: 42                 
Correct output: 16                  | Program output: 56                 
Correct output: 10                  | Program output: 31                 
Correct output: -64                 | Program output: 18                 
Correct output: -33                 | Program output: 21                 
Correct output: -77                 | Program output: -2                 
Correct output: -73                 | Program output: 52                 
Correct output: -85                 | Program output: 64                 
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: 16                 
Correct output: -39                 | Program output: -7                 
Correct output: -97                 | Program output: 50                 
Correct output: -65                 | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -33                 | Program output: 70                 
Correct output: -34                 | Program output: 92                 
Correct output: -83                 | Program output: 59                 
Correct output: -72                 | Program output: -33                
Correct output: -68                 | Program output: 19                 
Correct output: -37                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -16                
Correct output: -84                 | Program output: -31                
Correct output: -74                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -48                 | Program output: 6                  
Correct output: -51                 | Program output: 66                 
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: 31                 
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 57                 
Correct output: -71                 | Program output: 60                 
Correct output: -21                 | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -52                
Correct output: -85                 | Program output: 0                  
Correct output: -91                 | Program output: 58                 
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -37                
Correct output: -1                  | Program output: 11                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: 44                 
Correct output: -47                 | Program output: 2                  
Correct output: -95                 | Program output: 85                 
Correct output: 20                  | Program output: 79                 
Correct output: -34                 | Program output: 66                 
Correct output: -20                 | Program output: -6                 
Correct output: -95                 | Program output: -14                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 92                 
Correct output: -94                 | Program output: -69                
Correct output: -57                 | Program output: -22                
Correct output: -56                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: 83                 
Correct output: -56                 | Program output: 54                 
Correct output: -29                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2})
Lexicase best program: (in1 print_integer print_boolean exec_do*while (print_integer) exec_stackdepth integer_gte exec_flush exec_when (exec_eq exec_do*range (integer_gte boolean_invert_second_then_and exec_do*while (boolean_swap) exec_stackdepth exec_eq boolean_invert_second_then_and exec_do*while (exec_flush) exec_when (exec_eq exec_stackdepth integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (in1 boolean_yank integer_pop) exec_s_when_autoconstructing (in4 integer_div boolean_or in2) (integer_lt integer_empty exec_eq integer_sub exec_do*times (integer_lte boolean_yank integer_lte exec_yank exec_while (integer_yankdup boolean_invert_second_then_and print_integer) boolean_rot exec_when (exec_yank in3) boolean_not in2)) ()))))
Lexicase best errors: [1 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 73
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2})
Zero cases best program: (in1 print_integer print_boolean exec_do*while (print_integer) exec_stackdepth integer_gte exec_flush exec_when (exec_eq exec_do*range (integer_gte boolean_invert_second_then_and exec_do*while (boolean_swap) exec_stackdepth exec_eq boolean_invert_second_then_and exec_do*while (exec_flush) exec_when (exec_eq exec_stackdepth integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (in1 boolean_yank integer_pop) exec_s_when_autoconstructing (in4 integer_div boolean_or in2) (integer_lt integer_empty exec_eq integer_sub exec_do*times (integer_lte boolean_yank integer_lte exec_yank exec_while (integer_yankdup boolean_invert_second_then_and print_integer) boolean_rot exec_when (exec_yank in3) boolean_not in2)) ()))))
Zero cases best errors: [1 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 73
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (385 551 7 7 7 944 1000 6 7 935)
Population mean number of elite cases: 3.85
Count of perfect (error zero) individuals by case: (385 551 7 7 7 944 0 6 7 935)
Population mean number of perfect (error zero) cases: 2.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 2, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_swap})
Best program: (integer_eq integer_min in1 integer_lte in3 boolean_frominteger print_integer exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items in3 integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (integer_max boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth exec_do*while () boolean_yank print_integer) (boolean_dup_items integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank in4 integer_swap))) ()) ()) ()))))))
Errors: [1 1 0 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 46
Size: 65
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 7.151
Median total errors in population: 7
Error averages by case: (0.615 0.449 0.993 0.993 0.993 0.056 1.0 0.994 0.993 0.065)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 49.418
Average program size in population (points): 69.911
Average percent parens in population: 0.292
Minimum age in population: 16.91796875
Maximum age in population: 21.139404296875
Average age in population: 18.9589755859375
Median age in population: 19.00390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5458974
--- Timings ---
Current time: 1559314626128 milliseconds
Total Time:          40.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.0 seconds, 71.4%
Fitness Testing:      6.6 seconds, 16.3%
Report:               4.9 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 82                 
Correct output: -73                 | Program output: -33                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -13                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 87                 
Correct output: 1                   | Program output: 11                 
Correct output: 38                  | Program output: 82                 
Correct output: 5                   | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 86                 
Correct output: 37                  | Program output: 61                 
Correct output: 0                   | Program output: 87                 
Correct output: 42                  | Program output: 91                 
Correct output: 7                   | Program output: 98                 
Correct output: 4                   | Program output: 82                 
Correct output: 21                  | Program output: 71                 
Correct output: 13                  | Program output: 87                 
Correct output: 12                  | Program output: 88                 
Correct output: 32                  | Program output: 88                 
Correct output: 15                  | Program output: 96                 
Correct output: 25                  | Program output: 42                 
Correct output: 16                  | Program output: 56                 
Correct output: 10                  | Program output: 31                 
Correct output: -64                 | Program output: 18                 
Correct output: -33                 | Program output: 21                 
Correct output: -77                 | Program output: -2                 
Correct output: -73                 | Program output: 52                 
Correct output: -85                 | Program output: 64                 
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: 16                 
Correct output: -39                 | Program output: -7                 
Correct output: -97                 | Program output: 50                 
Correct output: -65                 | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -33                 | Program output: 70                 
Correct output: -34                 | Program output: 92                 
Correct output: -83                 | Program output: 59                 
Correct output: -72                 | Program output: -33                
Correct output: -68                 | Program output: 19                 
Correct output: -37                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -16                
Correct output: -84                 | Program output: -31                
Correct output: -74                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -48                 | Program output: 6                  
Correct output: -51                 | Program output: 66                 
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: 31                 
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 57                 
Correct output: -71                 | Program output: 60                 
Correct output: -21                 | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -52                
Correct output: -85                 | Program output: 0                  
Correct output: -91                 | Program output: 58                 
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -37                
Correct output: -1                  | Program output: 11                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: 44                 
Correct output: -47                 | Program output: 2                  
Correct output: -95                 | Program output: 85                 
Correct output: 20                  | Program output: 79                 
Correct output: -34                 | Program output: 66                 
Correct output: -20                 | Program output: -6                 
Correct output: -95                 | Program output: -14                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 92                 
Correct output: -94                 | Program output: -69                
Correct output: -57                 | Program output: -22                
Correct output: -56                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: 83                 
Correct output: -56                 | Program output: 54                 
Correct output: -29                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_eq})
Lexicase best program: (in1 print_integer integer_add integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (integer_mod exec_yankdup integer_eq exec_dup (boolean_frominteger boolean_and exec_yankdup boolean_and integer_dec boolean_flush integer_lt exec_dup_times (integer_dup_items) integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank in4 exec_eq))) ()))))))
Lexicase best errors: [1 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 57
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_eq})
Zero cases best program: (in1 print_integer integer_add integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (integer_mod exec_yankdup integer_eq exec_dup (boolean_frominteger boolean_and exec_yankdup boolean_and integer_dec boolean_flush integer_lt exec_dup_times (integer_dup_items) integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank in4 exec_eq))) ()))))))
Zero cases best errors: [1 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 57
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (145 672 805 672 672 672 952 145 135 281)
Population mean number of elite cases: 5.15
Count of perfect (error zero) individuals by case: (145 672 805 672 672 672 952 145 135 281)
Population mean number of perfect (error zero) cases: 5.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2})
Best program: (in1 print_integer print_boolean exec_do*while (print_integer) exec_stackdepth integer_gte exec_flush exec_when (exec_eq exec_do*range (integer_gte boolean_invert_second_then_and exec_do*while (boolean_swap) exec_stackdepth exec_eq boolean_invert_second_then_and exec_do*while (exec_flush) exec_when (exec_eq exec_stackdepth integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (in1 boolean_yank integer_pop) exec_s_when_autoconstructing (in4 integer_div boolean_or in2) (integer_lt integer_empty exec_eq integer_sub exec_do*times (integer_lte boolean_yank integer_lte exec_yank exec_while (integer_yankdup boolean_invert_second_then_and print_integer) boolean_rot exec_when (exec_yank in3) boolean_not in2)) ()))))
Errors: [1 0 0 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 58
Size: 73
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 4.849
Median total errors in population: 4
Error averages by case: (0.855 0.328 0.195 0.328 0.328 0.328 0.048 0.855 0.865 0.719)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.161
Average program size in population (points): 66.21
Average percent parens in population: 0.273
Minimum age in population: 18.375
Maximum age in population: 22.282470703125
Average age in population: 20.47668225097656
Median age in population: 20.566162109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5590908
--- Timings ---
Current time: 1559314628524 milliseconds
Total Time:          43.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.0 seconds, 72.1%
Fitness Testing:      6.8 seconds, 15.8%
Report:               5.1 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: 41                 
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 89                 
Correct output: 32                  | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 80                 
Correct output: 5                   | Program output: 48                 
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 60                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 33                 
Correct output: 21                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 81                 
Correct output: -64                 | Program output: -30                
Correct output: -33                 | Program output: 32                 
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 82                 
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 54                 
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: 94                 
Correct output: -68                 | Program output: 79                 
Correct output: -37                 | Program output: 80                 
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -10                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: 30                 
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -13                
Correct output: -49                 | Program output: 82                 
Correct output: -99                 | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -74                
Correct output: -5                  | Program output: 57                 
Correct output: -93                 | Program output: -5                 
Correct output: -99                 | Program output: -61                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -6                 
Correct output: -98                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: 36                 
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 66                 
Correct output: -61                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 24                 
Correct output: -56                 | Program output: 78                 
Correct output: -39                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 42                 
Correct output: -29                 | Program output: 92                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_swap})
Lexicase best program: (in1 in2 print_boolean exec_do*while (print_integer) exec_shove (integer_yankdup exec_k_when_autoconstructing (exec_do*while (exec_flush) exec_when (exec_eq) exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup_items exec_dup_items boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (in3 integer_lt exec_s () (integer_lte) (in4 exec_yank in4 integer_swap))) ())) ()))) ()))
Lexicase best errors: [0 1 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 65
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_swap})
Zero cases best program: (in1 in2 print_boolean exec_do*while (print_integer) exec_shove (integer_yankdup exec_k_when_autoconstructing (exec_do*while (exec_flush) exec_when (exec_eq) exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup_items exec_dup_items boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (in3 integer_lt exec_s () (integer_lte) (in4 exec_yank in4 integer_swap))) ())) ()))) ()))
Zero cases best errors: [0 1 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 65
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (450 252 193 495 1000 1000 193 193 746 193)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (450 252 193 495 0 0 193 193 746 193)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_629} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (integer_eq integer_min in4 in1 in2 print_boolean exec_do*while (print_integer) exec_shove (boolean_shove in1) -85 boolean_invert_second_then_and boolean_stackdepth boolean_rot boolean_invert_first_then_and integer_div exec_s_when_autoconstructing (exec_s (exec_rot (exec_flush) () (boolean_eq boolean_stackdepth exec_shove () boolean_stackdepth exec_shove () boolean_shove boolean_swap integer_gt exec_dup (in1 exec_s_when_autoconstructing (boolean_eq integer_div boolean_or in2) (integer_lt integer_empty exec_eq print_exec (print_boolean) boolean_frominteger integer_dec boolean_invert_second_then_and boolean_invert_second_then_and tagged_629) (exec_yank) exec_swap () (integer_sub integer_flush integer_mod) exec_k_when_autoconstructing () ()))) () ()) () ())
Errors: [0 1 0 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 52
Size: 75
Percent parens: 0.307
--- Population Statistics ---
Average total errors in population: 7.285
Median total errors in population: 8
Error averages by case: (0.55 0.748 0.807 0.505 1.0 1.0 0.807 0.807 0.254 0.807)
Error minima by case: (0 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 48.548
Average program size in population (points): 66.982
Average percent parens in population: 0.275
Minimum age in population: 19.375
Maximum age in population: 24.115478515625
Average age in population: 21.93789117431641
Median age in population: 21.985595703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5734892
--- Timings ---
Current time: 1559314631160 milliseconds
Total Time:          45.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.1 seconds, 72.7%
Fitness Testing:      7.0 seconds, 15.4%
Report:               5.3 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 31                 
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 52                 
Correct output: 49                  | Program output: 62                 
Correct output: 37                  | Program output: 53                 
Correct output: 0                   | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 78                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 49                 
Correct output: 15                  | Program output: 24                 
Correct output: 25                  | Program output: 50                 
Correct output: 16                  | Program output: 97                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: 39                 
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -79                
Correct output: -39                 | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: 100                
Correct output: -33                 | Program output: 9                  
Correct output: -34                 | Program output: 98                 
Correct output: -83                 | Program output: 22                 
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: 52                 
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -57                
Correct output: -74                 | Program output: 61                 
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 16                 
Correct output: -48                 | Program output: 69                 
Correct output: -51                 | Program output: 10                 
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -4                 
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -6                 
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: 25                 
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: 2                  
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 46                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: 71                 
Correct output: -95                 | Program output: 88                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: 59                 
Correct output: 20                  | Program output: 72                 
Correct output: -34                 | Program output: 73                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: 55                 
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -32                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: 49                 
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 2, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add})
Lexicase best program: (integer_eq integer_min in1 integer_lte in3 exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) () boolean_dup_items integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank print_integer integer_lt exec_s () (integer_lte) (in4 integer_dup_items in4 boolean_dup_times) in4) integer_inc integer_yankdup) boolean_flush exec_s (print_integer exec_rot (exec_k_when_autoconstructing () (boolean_shove boolean_dup_times exec_dup_times (integer_sub) integer_eq integer_yank -3 exec_empty integer_lte exec_rot () () (exec_stackdepth exec_empty exec_k (boolean_not exec_rot (exec_do*count (integer_min exec_pop (integer_pop integer_min exec_pop (integer_pop exec_do*count (boolean_dup_times boolean_invert_second_then_and exec_do*count (exec_pop (integer_pop exec_do*count () boolean_dup_times boolean_invert_second_then_and exec_stackdepth integer_empty boolean_empty) boolean_eq in2 exec_yankdup integer_add)))))) () ()) ()))) () ()) () ()) ()) ()))))))
Lexicase best errors: [0 1 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 144
Percent parens: 0.319
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 2, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add})
Zero cases best program: (integer_eq integer_min in1 integer_lte in3 exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) () boolean_dup_items integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank print_integer integer_lt exec_s () (integer_lte) (in4 integer_dup_items in4 boolean_dup_times) in4) integer_inc integer_yankdup) boolean_flush exec_s (print_integer exec_rot (exec_k_when_autoconstructing () (boolean_shove boolean_dup_times exec_dup_times (integer_sub) integer_eq integer_yank -3 exec_empty integer_lte exec_rot () () (exec_stackdepth exec_empty exec_k (boolean_not exec_rot (exec_do*count (integer_min exec_pop (integer_pop integer_min exec_pop (integer_pop exec_do*count (boolean_dup_times boolean_invert_second_then_and exec_do*count (exec_pop (integer_pop exec_do*count () boolean_dup_times boolean_invert_second_then_and exec_stackdepth integer_empty boolean_empty) boolean_eq in2 exec_yankdup integer_add)))))) () ()) ()))) () ()) () ()) ()) ()))))))
Zero cases best errors: [0 1 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 144
Percent parens: 0.319
--- Lexicase Population Statistics ---
Count of elite individuals by case: (938 513 420 252 938 169 252 1000 1000 252)
Population mean number of elite cases: 5.73
Count of perfect (error zero) individuals by case: (938 513 420 252 938 169 252 0 0 252)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 2, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_swap})
Best program: (integer_eq integer_min in1 integer_lte in3 exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush exec_when (integer_yank exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup_items integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4) exec_yank in4 integer_swap)) ())) ())))))
Errors: [0 1 0 0 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 45
Size: 63
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.266
Median total errors in population: 7
Error averages by case: (0.062 0.487 0.58 0.748 0.062 0.831 0.748 1.0 1.0 0.748)
Error minima by case: (0 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 49.718
Average program size in population (points): 69.439
Average percent parens in population: 0.283
Minimum age in population: 20.375
Maximum age in population: 25.44021606445312
Average age in population: 23.38288317871094
Median age in population: 23.439208984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.822
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5904900
--- Timings ---
Current time: 1559314633637 milliseconds
Total Time:          48.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.1 seconds, 72.9%
Fitness Testing:      7.2 seconds, 14.9%
Report:               5.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: 41                 
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 89                 
Correct output: 32                  | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 80                 
Correct output: 5                   | Program output: 48                 
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 60                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 33                 
Correct output: 21                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 81                 
Correct output: -64                 | Program output: -30                
Correct output: -33                 | Program output: 32                 
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 82                 
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 54                 
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: 94                 
Correct output: -68                 | Program output: 79                 
Correct output: -37                 | Program output: 80                 
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -10                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: 30                 
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -13                
Correct output: -49                 | Program output: 82                 
Correct output: -99                 | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -74                
Correct output: -5                  | Program output: 57                 
Correct output: -93                 | Program output: -5                 
Correct output: -99                 | Program output: -61                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -6                 
Correct output: -98                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: 36                 
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 66                 
Correct output: -61                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 24                 
Correct output: -56                 | Program output: 78                 
Correct output: -39                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 42                 
Correct output: -29                 | Program output: 92                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 2, :instruction tagged_553} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_swap})
Lexicase best program: (exec_yank integer_min in1 integer_lte tagged_553 exec_do*while (print_integer) exec_shove (in2 boolean_invert_second_then_and exec_do*while (exec_flush exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup_items integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank in4 integer_swap))) ())) ()))))))
Lexicase best errors: [1 1 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 65
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 2, :instruction tagged_553} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_swap})
Zero cases best program: (exec_yank integer_min in1 integer_lte tagged_553 exec_do*while (print_integer) exec_shove (in2 boolean_invert_second_then_and exec_do*while (exec_flush exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth boolean_dup integer_dup_times exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_dup exec_stackdepth integer_shove) (boolean_yank print_integer) (boolean_dup_items integer_eq boolean_empty exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_not integer_lt exec_s () (integer_lte) (in4 exec_yank in4 integer_swap))) ())) ()))))))
Zero cases best errors: [1 1 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 65
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (742 152 206 153 949 1000 1000 797 206 1000)
Population mean number of elite cases: 6.20
Count of perfect (error zero) individuals by case: (742 152 206 153 949 0 0 797 206 0)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lt} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction tagged_341} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_617} {:close 1, :instruction exec_do*while})
Best program: (in1 in2 print_boolean exec_do*while (print_integer) exec_shove (integer_yankdup boolean_invert_second_then_and exec_do*while (exec_flush) exec_when (exec_eq exec_pop (integer_gte boolean_invert_first_then_and integer_yankdup integer_stackdepth exec_stackdepth) exec_do*times () print_integer exec_s_when_autoconstructing (boolean_pop integer_lt) (exec_shove ()) (exec_s_when_autoconstructing () (integer_mod boolean_dup exec_do*times (boolean_stackdepth exec_shove () boolean_shove print_exec (boolean_xor print_boolean exec_flush in1 integer_flush) boolean_or in4 tagged_341 boolean_dup_times) exec_noop exec_dup_items integer_pop exec_dup_times ()) (print_boolean integer_stackdepth print_boolean tagged_617 exec_do*while ())))))
Errors: [0 0 1 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 50
Size: 69
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 6.795
Median total errors in population: 7
Error averages by case: (0.258 0.848 0.794 0.847 0.051 1.0 1.0 0.203 0.794 1.0)
Error minima by case: (0 0 0 0 0 1 1 0 0 1)
Average genome size in population (length): 48.358
Average program size in population (points): 67.232
Average percent parens in population: 0.280
Minimum age in population: 21.375
Maximum age in population: 27.06198120117188
Average age in population: 24.79392437744141
Median age in population: 24.85284423828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6052645
--- Timings ---
Current time: 1559314636398 milliseconds
Total Time:          50.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.5 seconds, 73.6%
Fitness Testing:      7.4 seconds, 14.5%
Report:               6.0 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 80                 
Correct output: 5                   | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 60                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 33                 
Correct output: 21                  | Program output: 71                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 88                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 31                 
Correct output: -64                 | Program output: -30                
Correct output: -33                 | Program output: 21                 
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 54                 
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -33                
Correct output: -68                 | Program output: 19                 
Correct output: -37                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -16                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 30                 
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -13                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -74                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -61                
Correct output: -1                  | Program output: 11                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -6                 
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -22                
Correct output: -56                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 42                 
Correct output: -29                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte})
Lexicase best program: (in1 in2 print_boolean integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add exec_do*range (exec_flush in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 integer_inc integer_yankdup) (exec_do*while (exec_s (print_integer boolean_dup exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub integer_eq integer_yank -3 exec_do*while (integer_lte))) () ()))))))
Lexicase best errors: [1 1 0 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 71
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte})
Zero cases best program: (in1 in2 print_boolean integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add exec_do*range (exec_flush in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 integer_inc integer_yankdup) (exec_do*while (exec_s (print_integer boolean_dup exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub integer_eq integer_yank -3 exec_do*while (integer_lte))) () ()))))))
Zero cases best errors: [1 1 0 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 71
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (82 1 426 1 429 82 429 424 82 1)
Population mean number of elite cases: 1.96
Count of perfect (error zero) individuals by case: (82 1 426 1 429 82 429 424 82 1)
Population mean number of perfect (error zero) cases: 1.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte})
Best program: (in1 in2 print_boolean integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add exec_do*range (exec_flush in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 integer_inc integer_yankdup) (exec_do*while (exec_s (print_integer boolean_dup exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub integer_eq integer_yank -3 exec_do*while (integer_lte))) () ()))))))
Errors: [1 1 0 1 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 55
Size: 71
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 8.043
Median total errors in population: 8
Error averages by case: (0.918 0.999 0.574 0.999 0.571 0.918 0.571 0.576 0.918 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.523
Average program size in population (points): 67.432
Average percent parens in population: 0.280
Minimum age in population: 23.37451171875
Maximum age in population: 28.13126373291016
Average age in population: 26.30796105957031
Median age in population: 26.38835906982422
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6218978
--- Timings ---
Current time: 1559314638766 milliseconds
Total Time:          53.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.5 seconds, 74.1%
Fitness Testing:      7.6 seconds, 14.2%
Report:               6.1 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Lexicase best program: (integer_eq integer_min in1 integer_lte in1 in2 in3 integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_integer exec_empty integer_lt exec_y_when_autoconstructing () integer_lte) in4 exec_yank in4) ()))))
Lexicase best errors: [0 0 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 52
Percent parens: 0.173
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Zero cases best program: (integer_eq integer_min in1 integer_lte in1 in2 in3 integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_integer exec_empty integer_lt exec_y_when_autoconstructing () integer_lte) in4 exec_yank in4) ()))))
Zero cases best errors: [0 0 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 52
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (370 369 267 368 303 365 267 368 270 304)
Population mean number of elite cases: 3.25
Count of perfect (error zero) individuals by case: (370 369 267 368 303 365 267 368 270 304)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Best program: (integer_eq integer_min in1 integer_lte in1 in2 in3 integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_integer exec_empty integer_lt exec_y_when_autoconstructing () integer_lte) in4 exec_yank in4) ()))))
Errors: [0 0 1 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 43
Size: 52
Percent parens: 0.173
--- Population Statistics ---
Average total errors in population: 6.749
Median total errors in population: 7
Error averages by case: (0.63 0.631 0.733 0.632 0.697 0.635 0.733 0.632 0.73 0.696)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.186
Average program size in population (points): 75.411
Average percent parens in population: 0.266
Minimum age in population: 25.365966796875
Maximum age in population: 29.65714263916016
Average age in population: 28.06425705337524
Median age in population: 28.30838394165039
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 151
Genome diversity (% unique genomes):	 0.651
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 156
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 6394158
--- Timings ---
Current time: 1559314641097 milliseconds
Total Time:          55.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.4 seconds, 74.4%
Fitness Testing:      7.8 seconds, 14.0%
Report:               6.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 80                 
Correct output: 5                   | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 60                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 33                 
Correct output: 21                  | Program output: 71                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 88                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 31                 
Correct output: -64                 | Program output: -30                
Correct output: -33                 | Program output: 21                 
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 54                 
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -33                
Correct output: -68                 | Program output: 19                 
Correct output: -37                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -16                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 30                 
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -13                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -74                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -61                
Correct output: -1                  | Program output: 11                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -6                 
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -22                
Correct output: -56                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 42                 
Correct output: -29                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte})
Lexicase best program: (in1 in2 print_boolean integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add exec_do*range (exec_flush in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 integer_inc integer_yankdup) (exec_do*while (exec_s (print_integer boolean_dup exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub integer_eq integer_yank -3 exec_do*while (integer_lte))) () ()))))))
Lexicase best errors: [0 1 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte})
Zero cases best program: (in1 in2 print_boolean integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add exec_do*range (exec_flush in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 integer_inc integer_yankdup) (exec_do*while (exec_s (print_integer boolean_dup exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub integer_eq integer_yank -3 exec_do*while (integer_lte))) () ()))))))
Zero cases best errors: [0 1 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (632 295 299 236 236 292 633 292 398 632)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (632 295 299 236 236 292 633 292 398 632)
Population mean number of perfect (error zero) cases: 3.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte})
Best program: (in1 in2 print_boolean integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add exec_do*range (exec_flush in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 integer_inc integer_yankdup) (exec_do*while (exec_s (print_integer boolean_dup exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub integer_eq integer_yank -3 exec_do*while (integer_lte))) () ()))))))
Errors: [0 1 1 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 55
Size: 71
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 6.055
Median total errors in population: 6
Error averages by case: (0.368 0.705 0.701 0.764 0.764 0.708 0.367 0.708 0.602 0.368)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.079
Average program size in population (points): 68.382
Average percent parens in population: 0.227
Minimum age in population: 27.34785461425781
Maximum age in population: 31.35951805114746
Average age in population: 29.53276747894287
Median age in population: 29.57792568206787
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 209
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 6595259
--- Timings ---
Current time: 1559314643751 milliseconds
Total Time:          58.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.6 seconds, 74.8%
Fitness Testing:      8.0 seconds, 13.8%
Report:               6.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Lexicase best program: (integer_eq integer_min in1 integer_lte in1 in2 in3 integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*count (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_integer exec_empty integer_lt exec_y_when_autoconstructing () integer_lte) in4 exec_yank in4) ()))))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 52
Percent parens: 0.173
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Zero cases best program: (integer_eq integer_min in1 integer_lte in1 in2 in3 integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*count (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_integer exec_empty integer_lt exec_y_when_autoconstructing () integer_lte) in4 exec_yank in4) ()))))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 52
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (915 217 216 908 215 386 453 218 453 388)
Population mean number of elite cases: 4.37
Count of perfect (error zero) individuals by case: (915 217 216 908 215 386 453 218 453 388)
Population mean number of perfect (error zero) cases: 4.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Best program: (integer_eq integer_min in1 integer_lte in1 in2 in3 integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_integer exec_empty integer_lt exec_y_when_autoconstructing () integer_lte) in4 exec_yank in4) ()))))
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 43
Size: 52
Percent parens: 0.173
--- Population Statistics ---
Average total errors in population: 5.631
Median total errors in population: 5
Error averages by case: (0.085 0.783 0.784 0.092 0.785 0.614 0.547 0.782 0.547 0.612)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.266
Average program size in population (points): 72.681
Average percent parens in population: 0.245
Minimum age in population: 28.90278625488281
Maximum age in population: 32.98246383666992
Average age in population: 31.02163154888153
Median age in population: 31.08477401733398
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.009
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 6805920
--- Timings ---
Current time: 1559314646197 milliseconds
Total Time:          60.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.6 seconds, 75.0%
Fitness Testing:      8.3 seconds, 13.6%
Report:               6.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 80                 
Correct output: 5                   | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 60                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 33                 
Correct output: 21                  | Program output: 71                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 88                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 31                 
Correct output: -64                 | Program output: -30                
Correct output: -33                 | Program output: 21                 
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 54                 
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -33                
Correct output: -68                 | Program output: 19                 
Correct output: -37                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -16                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 30                 
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -13                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -74                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -61                
Correct output: -1                  | Program output: 11                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -6                 
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -22                
Correct output: -56                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 42                 
Correct output: -29                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte})
Lexicase best program: (in1 in2 print_boolean integer_min print_integer in1 -85 boolean_invert_second_then_and exec_eq boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add exec_do*range (exec_flush in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 integer_inc integer_yankdup) (exec_do*while (exec_s (print_integer boolean_dup exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub integer_eq integer_yank -3 exec_do*while (integer_lte))) () ()))))))
Lexicase best errors: [0 1 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 71
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte})
Zero cases best program: (in1 in2 print_boolean integer_min print_integer in1 -85 boolean_invert_second_then_and exec_eq boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add exec_do*range (exec_flush in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 integer_inc integer_yankdup) (exec_do*while (exec_s (print_integer boolean_dup exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub integer_eq integer_yank -3 exec_do*while (integer_lte))) () ()))))))
Zero cases best errors: [0 1 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 71
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (922 692 315 123 314 123 570 313 315 575)
Population mean number of elite cases: 4.26
Count of perfect (error zero) individuals by case: (922 692 315 123 314 123 570 313 315 575)
Population mean number of perfect (error zero) cases: 4.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer})
Best program: (in2 in1 in2 print_boolean integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_yank exec_if (integer_eq print_exec (integer_add exec_do*range (exec_flush in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times print_boolean exec_flush integer_max integer_flush) (boolean_or in4 exec_do*times (exec_empty) in4 boolean_swap integer_yankdup) exec_do*while (boolean_dup print_integer)))))
Errors: [0 1 0 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 53
Size: 64
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 5.738
Median total errors in population: 6
Error averages by case: (0.078 0.308 0.685 0.877 0.686 0.877 0.43 0.687 0.685 0.425)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.416
Average program size in population (points): 60.238
Average percent parens in population: 0.204
Minimum age in population: 29.973876953125
Maximum age in population: 34.03361892700195
Average age in population: 32.43653491926193
Median age in population: 32.47908020019531
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7015728
--- Timings ---
Current time: 1559314648569 milliseconds
Total Time:          63.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.5 seconds, 75.3%
Fitness Testing:      8.5 seconds, 13.5%
Report:               7.0 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Lexicase best program: (integer_eq integer_min in1 integer_lte in1 in2 in3 integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_integer exec_empty integer_lt exec_y_when_autoconstructing () integer_lte) in4 exec_yank in4) ()))))
Lexicase best errors: [0 0 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 52
Percent parens: 0.173
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Zero cases best program: (integer_eq integer_min in1 integer_lte in1 in2 in3 integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_integer exec_empty integer_lt exec_y_when_autoconstructing () integer_lte) in4 exec_yank in4) ()))))
Zero cases best errors: [0 0 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 52
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (924 486 485 282 282 217 218 623 283 217)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (924 486 485 282 282 217 218 623 283 217)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Best program: (integer_eq integer_min in1 integer_lte in1 in2 in3 integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and boolean_dup_items exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_integer exec_empty integer_lt exec_y_when_autoconstructing () integer_lte)) (in4 exec_yank in4))))
Errors: [0 0 0 0 0 1 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 5.983
Median total errors in population: 6
Error averages by case: (0.076 0.514 0.515 0.718 0.718 0.783 0.782 0.377 0.717 0.783)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.773
Average program size in population (points): 68.06
Average percent parens in population: 0.232
Minimum age in population: 31.1441650390625
Maximum age in population: 35.83263444900513
Average age in population: 33.99132131958008
Median age in population: 34.05151224136353
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 7221991
--- Timings ---
Current time: 1559314650916 milliseconds
Total Time:          65.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.4 seconds, 75.5%
Fitness Testing:      8.8 seconds, 13.4%
Report:               7.2 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 80                 
Correct output: 5                   | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 60                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 33                 
Correct output: 21                  | Program output: 71                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 88                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 31                 
Correct output: -64                 | Program output: -30                
Correct output: -33                 | Program output: 21                 
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 54                 
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -33                
Correct output: -68                 | Program output: 19                 
Correct output: -37                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -16                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 30                 
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -13                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -74                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -61                
Correct output: -1                  | Program output: 11                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -6                 
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -22                
Correct output: -56                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 42                 
Correct output: -29                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Lexicase best program: (integer_eq integer_min in1 integer_lte in1 in2 in3 integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_integer exec_empty integer_lt exec_y_when_autoconstructing () integer_lte) in4 exec_yank in4) ()))))
Lexicase best errors: [0 0 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 52
Percent parens: 0.173
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Zero cases best program: (integer_eq integer_min in1 integer_lte in1 in2 in3 integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_integer exec_empty integer_lt exec_y_when_autoconstructing () integer_lte) in4 exec_yank in4) ()))))
Zero cases best errors: [0 0 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 52
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (434 432 308 307 523 275 433 273 524 902)
Population mean number of elite cases: 4.41
Count of perfect (error zero) individuals by case: (434 432 308 307 523 275 433 273 524 902)
Population mean number of perfect (error zero) cases: 4.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lte})
Best program: (in1 in2 print_boolean integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_s (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add exec_do*range (exec_flush in1 integer_flush) boolean_dup in4 tagged_434) boolean_dup_times in4 integer_inc integer_yankdup) (exec_do*while (exec_s (print_integer boolean_dup exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub integer_eq integer_yank -3 exec_do*while (integer_lte))) () ()))))) () ())
Errors: [0 0 1 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 55
Size: 73
Percent parens: 0.247
--- Population Statistics ---
Average total errors in population: 5.589
Median total errors in population: 5
Error averages by case: (0.566 0.568 0.692 0.693 0.477 0.725 0.567 0.727 0.476 0.098)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.167
Average program size in population (points): 65.801
Average percent parens in population: 0.229
Minimum age in population: 32.92313003540039
Maximum age in population: 37.49312424659729
Average age in population: 35.32746373927593
Median age in population: 35.37081742286682
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 7468002
--- Timings ---
Current time: 1559314653292 milliseconds
Total Time:          67.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.3 seconds, 75.7%
Fitness Testing:      9.0 seconds, 13.3%
Report:               7.4 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 80                 
Correct output: 5                   | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 60                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 33                 
Correct output: 21                  | Program output: 71                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 88                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 31                 
Correct output: -64                 | Program output: -30                
Correct output: -33                 | Program output: 21                 
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: 54                 
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -33                
Correct output: -68                 | Program output: 19                 
Correct output: -37                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -16                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 30                 
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -13                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -74                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -61                
Correct output: -1                  | Program output: 11                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -6                 
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -22                
Correct output: -56                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 42                 
Correct output: -29                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_eq integer_min in1 integer_lte in1 exec_y_when_autoconstructing (in3) integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 boolean_shove integer_min exec_if (integer_eq print_exec (integer_add boolean_yank exec_do*count (exec_empty integer_lt exec_y_when_autoconstructing () boolean_or boolean_pop tagged_434) boolean_dup_times in4 integer_inc integer_yankdup) print_boolean exec_s (print_integer boolean_dup exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub integer_eq integer_yank -3 exec_do*while (integer_lte))) () ()) ()))))
Lexicase best errors: [0 1 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 77
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_eq integer_min in1 integer_lte in1 exec_y_when_autoconstructing (in3) integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 boolean_shove integer_min exec_if (integer_eq print_exec (integer_add boolean_yank exec_do*count (exec_empty integer_lt exec_y_when_autoconstructing () boolean_or boolean_pop tagged_434) boolean_dup_times in4 integer_inc integer_yankdup) print_boolean exec_s (print_integer boolean_dup exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub integer_eq integer_yank -3 exec_do*while (integer_lte))) () ()) ()))))
Zero cases best errors: [0 1 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 77
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (438 550 209 436 919 209 429 208 430 550)
Population mean number of elite cases: 4.38
Count of perfect (error zero) individuals by case: (438 550 209 436 919 209 429 208 430 550)
Population mean number of perfect (error zero) cases: 4.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction -3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte})
Best program: (in1 in2 print_boolean integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_shove integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add exec_do*range (exec_flush in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 integer_inc integer_yankdup) (exec_do*while (exec_s (print_integer boolean_dup exec_k_when_autoconstructing () (boolean_shove boolean_dup_times print_boolean integer_sub integer_eq integer_yank -3 exec_do*while (integer_lte))) () ()))))))
Errors: [0 0 1 0 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 55
Size: 71
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 5.622
Median total errors in population: 5
Error averages by case: (0.562 0.45 0.791 0.564 0.081 0.791 0.571 0.792 0.57 0.45)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.807
Average program size in population (points): 65.01
Average percent parens in population: 0.227
Minimum age in population: 33.97908020019531
Maximum age in population: 38.92856478691101
Average age in population: 36.83995271652937
Median age in population: 36.91767394542694
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.006
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 7706415
--- Timings ---
Current time: 1559314655684 milliseconds
Total Time:          70.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.3 seconds, 75.8%
Fitness Testing:      9.3 seconds, 13.2%
Report:               7.6 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Lexicase best program: (integer_eq integer_min in1 integer_lte in1 in2 in3 integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_integer exec_empty integer_lt exec_y_when_autoconstructing () integer_lte) in4 exec_yank in4) ())))))
Lexicase best errors: [0 0 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 52
Percent parens: 0.173
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Zero cases best program: (integer_eq integer_min in1 integer_lte in1 in2 in3 integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_integer exec_empty integer_lt exec_y_when_autoconstructing () integer_lte) in4 exec_yank in4) ())))))
Zero cases best errors: [0 0 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 52
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (413 419 413 413 406 299 413 413 420 301)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (413 419 413 413 406 299 413 413 420 301)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Best program: (integer_eq integer_min in1 integer_lte in1 in2 in3 integer_min print_integer in1 boolean_flush boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_min boolean_and integer_dup exec_dup_times (exec_shove (boolean_stackdepth) integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_integer exec_empty integer_lt exec_y_when_autoconstructing () integer_lte) in4 exec_yank in4) ()))))
Errors: [0 0 0 0 1 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 46
Size: 55
Percent parens: 0.164
--- Population Statistics ---
Average total errors in population: 6.09
Median total errors in population: 7
Error averages by case: (0.587 0.581 0.587 0.587 0.594 0.701 0.587 0.587 0.58 0.699)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.445
Average program size in population (points): 65.026
Average percent parens in population: 0.232
Minimum age in population: 34.97908020019531
Maximum age in population: 40.37738636136055
Average age in population: 38.31567271882296
Median age in population: 38.41185587644577
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 7956560
--- Timings ---
Current time: 1559314658087 milliseconds
Total Time:          72.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.2 seconds, 76.0%
Fitness Testing:      9.6 seconds, 13.2%
Report:               7.8 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 33                 
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -32                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -8                 
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -37                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 17                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: 18                 
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: 2                  
Correct output: -56                 | Program output: 64                 
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_boolean_622} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Lexicase best program: (integer_eq integer_min in1 integer_lte in1 in2 in3 integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (tag_boolean_622 integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_integer exec_empty integer_lt boolean_not) integer_lte) (in4 exec_yank in4)))))
Lexicase best errors: [0 0 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 51
Percent parens: 0.157
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_boolean_622} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Zero cases best program: (integer_eq integer_min in1 integer_lte in1 in2 in3 integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (tag_boolean_622 integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_integer exec_empty integer_lt boolean_not) integer_lte) (in4 exec_yank in4)))))
Zero cases best errors: [0 0 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 51
Percent parens: 0.157
--- Lexicase Population Statistics ---
Count of elite individuals by case: (516 517 184 676 283 929 680 186 187 516)
Population mean number of elite cases: 4.67
Count of perfect (error zero) individuals by case: (516 517 184 676 283 929 680 186 187 516)
Population mean number of perfect (error zero) cases: 4.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Best program: (integer_eq exec_while (in1) in2 in3 integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add in1 integer_gte integer_min exec_if (integer_eq print_exec (integer_add boolean_yank print_exec (integer_add boolean_yank print_integer boolean_invert_second_then_and integer_lt exec_shove () integer_lte) in4 exec_yank in4)) ()))))
Errors: [0 0 1 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 40
Size: 51
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 5.326
Median total errors in population: 5
Error averages by case: (0.484 0.483 0.816 0.324 0.717 0.071 0.32 0.814 0.813 0.484)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.963
Average program size in population (points): 63.488
Average percent parens in population: 0.221
Minimum age in population: 36.98385262489319
Maximum age in population: 41.85905872285366
Average age in population: 39.7491289665401
Median age in population: 39.83994342386723
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 8207190
--- Timings ---
Current time: 1559314660450 milliseconds
Total Time:          75.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.1 seconds, 76.1%
Fitness Testing:      9.8 seconds, 13.1%
Report:               8.0 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 19                 
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 53                 
Correct output: 0                   | Program output: 31                 
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 49                 
Correct output: 15                  | Program output: 24                 
Correct output: 25                  | Program output: 50                 
Correct output: 16                  | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -16                
Correct output: -72                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: 53                 
Correct output: -33                 | Program output: -24                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -53                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -57                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -31                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -15                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: 25                 
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: 2                  
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: 24                 
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: 49                 
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Lexicase best program: (integer_eq integer_rot in1 integer_lte in1 in4 in3 integer_min print_integer in1 integer_mod boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq boolean_pop integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (exec_flush in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (in4 exec_yank in4) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 55
Percent parens: 0.145
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Zero cases best program: (integer_eq integer_rot in1 integer_lte in1 in4 in3 integer_min print_integer in1 integer_mod boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq boolean_pop integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (exec_flush in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (in4 exec_yank in4) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 55
Percent parens: 0.145
--- Lexicase Population Statistics ---
Count of elite individuals by case: (937 252 586 587 319 939 253 434 256 585)
Population mean number of elite cases: 5.15
Count of perfect (error zero) individuals by case: (937 252 586 587 319 939 253 434 256 585)
Population mean number of perfect (error zero) cases: 5.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Best program: (integer_eq integer_rot in1 integer_lte in1 in4 in3 integer_min print_integer in1 integer_mod boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq boolean_pop integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (exec_flush in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (in4 exec_yank in4) ())
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 47
Size: 55
Percent parens: 0.145
--- Population Statistics ---
Average total errors in population: 4.852
Median total errors in population: 4
Error averages by case: (0.063 0.748 0.414 0.413 0.681 0.061 0.747 0.566 0.744 0.415)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.474
Average program size in population (points): 62.93
Average percent parens in population: 0.223
Minimum age in population: 38.41283106803894
Maximum age in population: 43.13991608470678
Average age in population: 41.29129311231524
Median age in population: 41.34701618552208
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 8479337
--- Timings ---
Current time: 1559314662889 milliseconds
Total Time:          77.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.0 seconds, 76.2%
Fitness Testing:     10.1 seconds, 13.1%
Report:               8.2 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 47                 
Correct output: 1                   | Program output: 11                 
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 61                 
Correct output: 0                   | Program output: 31                 
Correct output: 42                  | Program output: 91                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 67                 
Correct output: 21                  | Program output: 54                 
Correct output: 13                  | Program output: 87                 
Correct output: 12                  | Program output: 47                 
Correct output: 32                  | Program output: 88                 
Correct output: 15                  | Program output: 93                 
Correct output: 25                  | Program output: 42                 
Correct output: 16                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: 18                 
Correct output: -33                 | Program output: 21                 
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: 11                 
Correct output: -85                 | Program output: -16                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -7                 
Correct output: -97                 | Program output: -9                 
Correct output: -65                 | Program output: -2                 
Correct output: -49                 | Program output: 51                 
Correct output: -33                 | Program output: -24                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -38                
Correct output: -37                 | Program output: -23                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -16                
Correct output: -84                 | Program output: -44                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -31                
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: -1                 
Correct output: -71                 | Program output: 39                 
Correct output: -21                 | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -37                
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: 83                 
Correct output: -56                 | Program output: 54                 
Correct output: -29                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Lexicase best program: (integer_eq integer_rot in1 integer_lte in1 in4 boolean_or integer_min print_integer in1 integer_mod boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq boolean_pop integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) integer_rot exec_flush exec_rot (54 integer_dup) (exec_dup_times (exec_shove (boolean_stackdepth integer_add integer_div integer_gte integer_min exec_if (integer_eq integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) in4 exec_yank in4)) ())
Lexicase best errors: [0 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 61
Percent parens: 0.164
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Zero cases best program: (integer_eq integer_rot in1 integer_lte in1 in4 boolean_or integer_min print_integer in1 integer_mod boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq boolean_pop integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) integer_rot exec_flush exec_rot (54 integer_dup) (exec_dup_times (exec_shove (boolean_stackdepth integer_add integer_div integer_gte integer_min exec_if (integer_eq integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) in4 exec_yank in4)) ())
Zero cases best errors: [0 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 61
Percent parens: 0.164
--- Lexicase Population Statistics ---
Count of elite individuals by case: (561 210 561 562 929 212 927 210 212 936)
Population mean number of elite cases: 5.32
Count of perfect (error zero) individuals by case: (561 210 561 562 929 212 927 210 212 936)
Population mean number of perfect (error zero) cases: 5.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Best program: (exec_rot (integer_rot in1) (integer_lte in1) (in4 in3) integer_min print_integer in1 integer_mod boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_yank integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (in4 exec_yank in4) ())
Errors: [0 1 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 47
Size: 58
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 4.68
Median total errors in population: 4
Error averages by case: (0.439 0.79 0.439 0.438 0.071 0.788 0.073 0.79 0.788 0.064)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.281
Average program size in population (points): 57.121
Average percent parens in population: 0.169
Minimum age in population: 39.70626163482666
Maximum age in population: 44.70288030058146
Average age in population: 43.43318950964138
Median age in population: 43.34276385605335
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 276
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 291
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 8729107
--- Timings ---
Current time: 1559314665357 milliseconds
Total Time:          79.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.0 seconds, 76.4%
Fitness Testing:     10.4 seconds, 13.0%
Report:               8.4 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: 69                 
Correct output: -76                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: 16                 
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 47                 
Correct output: 1                   | Program output: 11                 
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 61                 
Correct output: 0                   | Program output: 31                 
Correct output: 42                  | Program output: 91                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 67                 
Correct output: 21                  | Program output: 54                 
Correct output: 13                  | Program output: 87                 
Correct output: 12                  | Program output: 47                 
Correct output: 32                  | Program output: 88                 
Correct output: 15                  | Program output: 93                 
Correct output: 25                  | Program output: 42                 
Correct output: 16                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: 18                 
Correct output: -33                 | Program output: 21                 
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: 11                 
Correct output: -85                 | Program output: -16                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -7                 
Correct output: -97                 | Program output: -9                 
Correct output: -65                 | Program output: -2                 
Correct output: -49                 | Program output: 51                 
Correct output: -33                 | Program output: -24                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -38                
Correct output: -37                 | Program output: -23                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -16                
Correct output: -84                 | Program output: -44                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -27                
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -31                
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: -1                 
Correct output: -71                 | Program output: 39                 
Correct output: -21                 | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -37                
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: 83                 
Correct output: -56                 | Program output: 54                 
Correct output: -29                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Lexicase best program: (exec_rot (integer_rot in1) (integer_lte in1) (in4 in3) integer_min print_integer in1 integer_mod boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_flush exec_eq exec_yank integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (in4 exec_yank in4) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 57
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Zero cases best program: (exec_rot (integer_rot in1) (integer_lte in1) (in4 in3) integer_min print_integer in1 integer_mod boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_flush exec_eq exec_yank integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (in4 exec_yank in4) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 57
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (933 936 923 538 912 538 932 539 923 22)
Population mean number of elite cases: 7.20
Count of perfect (error zero) individuals by case: (933 936 923 538 912 538 932 539 923 22)
Population mean number of perfect (error zero) cases: 7.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Best program: (integer_eq integer_rot in1 integer_lte in4 boolean_or integer_min print_integer in1 integer_mod boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq boolean_pop integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) integer_rot exec_flush exec_rot (54 integer_dup) (exec_dup_times (exec_shove (boolean_stackdepth integer_add integer_div integer_gte integer_min exec_if (integer_gt integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) in4 exec_yank in4)) ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 50
Size: 60
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 2.804
Median total errors in population: 1
Error averages by case: (0.067 0.064 0.077 0.462 0.088 0.462 0.068 0.461 0.077 0.978)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.098
Average program size in population (points): 59.642
Average percent parens in population: 0.190
Minimum age in population: 41.98602920770645
Maximum age in population: 46.40411036461592
Average age in population: 45.05868723331764
Median age in population: 45.11028220131993
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.01
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 8965494
--- Timings ---
Current time: 1559314667686 milliseconds
Total Time:          82.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.9 seconds, 76.5%
Fitness Testing:     10.7 seconds, 13.0%
Report:               8.6 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 19                 
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 53                 
Correct output: 0                   | Program output: 31                 
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 49                 
Correct output: 15                  | Program output: 24                 
Correct output: 25                  | Program output: 50                 
Correct output: 16                  | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -16                
Correct output: -72                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: 53                 
Correct output: -33                 | Program output: -24                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -53                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -57                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -31                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -15                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: 25                 
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: 2                  
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: 24                 
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: 49                 
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 3, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Lexicase best program: (integer_eq integer_min in1 integer_lte in1 exec_y_when_autoconstructing () in3 integer_min in2 print_boolean integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup in1 boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add boolean_dup_times integer_gte integer_min exec_do*times (integer_eq print_exec (integer_add exec_do*range (tagged_434) boolean_dup_times boolean_dup_times in4 in4 integer_inc boolean_yankdup integer_yankdup) integer_lte) in4 exec_yank in4))))
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 59
Percent parens: 0.153
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 3, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Zero cases best program: (integer_eq integer_min in1 integer_lte in1 exec_y_when_autoconstructing () in3 integer_min in2 print_boolean integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup in1 boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add boolean_dup_times integer_gte integer_min exec_do*times (integer_eq print_exec (integer_add exec_do*range (tagged_434) boolean_dup_times boolean_dup_times in4 in4 integer_inc boolean_yankdup integer_yankdup) integer_lte) in4 exec_yank in4))))
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 59
Percent parens: 0.153
--- Lexicase Population Statistics ---
Count of elite individuals by case: (385 915 648 915 782 782 386 385 81 926)
Population mean number of elite cases: 6.20
Count of perfect (error zero) individuals by case: (385 915 648 915 782 782 386 385 81 926)
Population mean number of perfect (error zero) cases: 6.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Best program: (integer_eq integer_rot in1 integer_lte in1 in1 in4 in3 integer_min print_integer in1 integer_mod boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_yank integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (in4 exec_yank in4) ())
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 48
Size: 56
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 3.795
Median total errors in population: 4
Error averages by case: (0.615 0.085 0.352 0.085 0.218 0.218 0.614 0.615 0.919 0.074)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.853
Average program size in population (points): 58.047
Average percent parens in population: 0.175
Minimum age in population: 44.47455583512783
Maximum age in population: 48.26437814161181
Average age in population: 46.66336903212592
Median age in population: 46.74627327825874
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 9218521
--- Timings ---
Current time: 1559314670062 milliseconds
Total Time:          84.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.8 seconds, 76.6%
Fitness Testing:     10.9 seconds, 12.9%
Report:               8.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: 11                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: 85                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 51                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 37                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 31                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -12                
Correct output: -83                 | Program output: -58                
Correct output: -72                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -27                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -76                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: 11                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -6                 
Correct output: -47                 | Program output: -32                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 49                 
Correct output: -34                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -22                
Correct output: -56                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Lexicase best program: (integer_eq integer_min in1 integer_lte in1 exec_y_when_autoconstructing (in3) integer_min in2 print_boolean integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup in1 boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add boolean_dup_times integer_gte integer_min exec_do*times () integer_eq print_exec (integer_add exec_do*range (tagged_434) boolean_dup_times in4 integer_inc integer_yankdup) integer_lte in4 exec_yank in4))))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 56
Percent parens: 0.161
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Zero cases best program: (integer_eq integer_min in1 integer_lte in1 exec_y_when_autoconstructing (in3) integer_min in2 print_boolean integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup in1 boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add boolean_dup_times integer_gte integer_min exec_do*times () integer_eq print_exec (integer_add exec_do*range (tagged_434) boolean_dup_times in4 integer_inc integer_yankdup) integer_lte in4 exec_yank in4))))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 56
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (539 930 740 449 930 552 752 438 469 532)
Population mean number of elite cases: 6.33
Count of perfect (error zero) individuals by case: (539 930 740 449 930 552 752 438 469 532)
Population mean number of perfect (error zero) cases: 6.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 3, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Best program: (integer_eq integer_min in1 integer_lte in1 exec_y_when_autoconstructing () in3 integer_min in2 print_boolean integer_min print_integer in1 -85 boolean_invert_second_then_and boolean_rot boolean_invert_second_then_and exec_when (exec_eq exec_do*range (integer_gte boolean_dup_items integer_dup in1 boolean_invert_first_then_and integer_dup) exec_dup_times (exec_shove (boolean_stackdepth integer_add boolean_dup_times integer_gte integer_min exec_do*times (integer_eq in1 integer_flush) integer_eq print_exec (tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt integer_flush) integer_lte) in4 exec_yank in4))
Errors: [1 0 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 3.669
Median total errors in population: 4
Error averages by case: (0.461 0.07 0.26 0.551 0.07 0.448 0.248 0.562 0.531 0.468)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.438
Average program size in population (points): 57.289
Average percent parens in population: 0.171
Minimum age in population: 46.30072080530226
Maximum age in population: 50.04652392864227
Average age in population: 48.07719541550009
Median age in population: 48.15354260592721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 9470073
--- Timings ---
Current time: 1559314672449 milliseconds
Total Time:          87.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.6 seconds, 76.6%
Fitness Testing:     11.2 seconds, 12.9%
Report:               9.0 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 19                 
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 53                 
Correct output: 0                   | Program output: 31                 
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 49                 
Correct output: 15                  | Program output: 24                 
Correct output: 25                  | Program output: 50                 
Correct output: 16                  | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -16                
Correct output: -72                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: 53                 
Correct output: -33                 | Program output: -24                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -53                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -57                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -31                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -15                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: 25                 
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: 2                  
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: 24                 
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: 49                 
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Lexicase best program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min print_integer in1 integer_mod boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_yank integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (in4 exec_yank in4) ())
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 56
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Zero cases best program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min print_integer in1 integer_mod boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_yank integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (in4 exec_yank in4) ())
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 56
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (489 509 903 489 499 509 741 758 508 488)
Population mean number of elite cases: 5.89
Count of perfect (error zero) individuals by case: (489 509 903 489 499 509 741 758 508 488)
Population mean number of perfect (error zero) cases: 5.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 3, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Best program: (integer_eq integer_rot in1 integer_lte in1 in1 in4 in3 integer_min print_integer in1 integer_mod boolean_invert_second_then_and boolean_stackdepth exec_y_when_autoconstructing () in3 integer_mod boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_yank integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (in4 exec_yank in4) ())
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 53
Size: 62
Percent parens: 0.145
--- Population Statistics ---
Average total errors in population: 4.107
Median total errors in population: 4
Error averages by case: (0.511 0.491 0.097 0.511 0.501 0.491 0.259 0.242 0.492 0.512)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.837
Average program size in population (points): 55.92
Average percent parens in population: 0.162
Minimum age in population: 47.30072080530226
Maximum age in population: 51.20285156974569
Average age in population: 49.60475227760826
Median age in population: 49.58249671361409
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 203
Genome diversity (% unique genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 212
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.009
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 9752434
--- Timings ---
Current time: 1559314674918 milliseconds
Total Time:          89.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.6 seconds, 76.7%
Fitness Testing:     11.5 seconds, 12.9%
Report:               9.2 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 218
Test mean error for best: 0.21800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 4                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -53                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -93                
Correct output: -60                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: 34                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: 56                 
Correct output: -93                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: -21                
Correct output: -98                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 3, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Lexicase best program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min in2 print_boolean integer_min print_integer in1 -85 in1 integer_mod boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_yank integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (in4 exec_yank in4) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 61
Percent parens: 0.131
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 3, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Zero cases best program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min in2 print_boolean integer_min print_integer in1 -85 in1 integer_mod boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_yank integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (in4 exec_yank in4) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 61
Percent parens: 0.131
--- Lexicase Population Statistics ---
Count of elite individuals by case: (679 699 434 621 433 435 621 459 680 620)
Population mean number of elite cases: 5.68
Count of perfect (error zero) individuals by case: (679 699 434 621 433 435 621 459 680 620)
Population mean number of perfect (error zero) cases: 5.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 3, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Best program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min in2 print_boolean integer_min print_integer in1 -85 in1 integer_mod boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and exec_when (exec_eq exec_yank integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup) integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (in4 exec_yank in4) ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 53
Size: 61
Percent parens: 0.131
--- Population Statistics ---
Average total errors in population: 4.319
Median total errors in population: 4
Error averages by case: (0.321 0.301 0.566 0.379 0.567 0.565 0.379 0.541 0.32 0.38)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.949
Average program size in population (points): 56.641
Average percent parens in population: 0.170
Minimum age in population: 48.59397266432643
Maximum age in population: 52.60570895159617
Average age in population: 51.08406526489672
Median age in population: 51.14445972733665
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.009
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 10057786
--- Timings ---
Current time: 1559314677462 milliseconds
Total Time:          92.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.5 seconds, 76.7%
Fitness Testing:     11.9 seconds, 12.9%
Report:               9.4 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 3, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Lexicase best program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min integer_min in2 print_boolean integer_min print_integer in1 -85 integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte in4 exec_yank in4)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 65
Percent parens: 0.123
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 3, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Zero cases best program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min integer_min in2 print_boolean integer_min print_integer in1 -85 integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte in4 exec_yank in4)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 65
Percent parens: 0.123
--- Lexicase Population Statistics ---
Count of elite individuals by case: (890 897 699 713 873 716 699 314 881 720)
Population mean number of elite cases: 7.40
Count of perfect (error zero) individuals by case: (890 897 699 713 873 716 699 314 881 720)
Population mean number of perfect (error zero) cases: 7.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 3, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction -85} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction 54} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction tagged_434} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction in4})
Best program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min integer_min in2 print_boolean integer_min print_integer in1 -85 integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte in4 exec_yank in4)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 57
Size: 65
Percent parens: 0.123
--- Population Statistics ---
Average total errors in population: 2.598
Median total errors in population: 1
Error averages by case: (0.11 0.103 0.301 0.287 0.127 0.284 0.301 0.686 0.119 0.28)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.694
Average program size in population (points): 59.009
Average percent parens in population: 0.141
Minimum age in population: 50.18583627045155
Maximum age in population: 54.07299437071197
Average age in population: 52.82196711826487
Median age in population: 52.85104946693173
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 278
Genome diversity (% unique genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 302
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.01
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 10366227
--- Timings ---
Current time: 1559314679940 milliseconds
Total Time:          94.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.5 seconds, 76.7%
Fitness Testing:     12.2 seconds, 12.9%
Report:               9.7 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 35
Successful program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min integer_min in2 print_boolean integer_min print_integer in1 -85 integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte in4 exec_yank in4)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 65


Auto-simplifying with starting size: 65
step: 0
program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min integer_min in2 print_boolean integer_min print_integer in1 -85 integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte in4 exec_yank in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 65

step: 500
program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min integer_min in2 print_boolean integer_min print_integer in1 -85 integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte in4 exec_yank in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 65

step: 1000
program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min integer_min in2 print_boolean integer_min print_integer in1 -85 integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte in4 exec_yank in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 65

step: 1500
program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min integer_min in2 print_boolean integer_min print_integer in1 -85 integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte in4 exec_yank in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 65

step: 2000
program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min integer_min in2 print_boolean integer_min print_integer in1 -85 integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte in4 exec_yank in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 65

step: 2500
program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min integer_min in2 print_boolean integer_min print_integer in1 -85 integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte in4 exec_yank in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 65

step: 3000
program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min integer_min in2 print_boolean integer_min print_integer in1 -85 integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte in4 exec_yank in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 65

step: 3500
program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min integer_min in2 print_boolean integer_min print_integer in1 -85 integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte in4 exec_yank in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 65

step: 4000
program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min integer_min in2 print_boolean integer_min print_integer in1 -85 integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte in4 exec_yank in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 65

step: 4500
program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min integer_min in2 print_boolean integer_min print_integer in1 -85 integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte in4 exec_yank in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 65

step: 5000
program: (integer_eq boolean_eq in1 integer_lte in1 in1 in4 in3 integer_min integer_min in2 print_boolean integer_min print_integer in1 -85 integer_gte boolean_dup_items integer_dup integer_min boolean_invert_first_then_and integer_dup integer_rot exec_flush exec_rot (54 integer_eq print_exec (integer_add exec_do*range (boolean_invert_first_then_and in1 integer_flush) boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte) (integer_flush) (boolean_or in4 tagged_434) boolean_dup_times in4 in4 integer_inc integer_lt exec_y_when_autoconstructing () integer_lte in4 exec_yank in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 65

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: -52                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -6                  | Program output: -6                 
Correct output: -50                 | Program output: -50                
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: -10                 | Program output: -10                
Correct output: 1                   | Program output: 1                  
Correct output: 75                  | Program output: 75                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 49                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -34                 | Program output: -34                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -68                
Correct output: -37                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -99                
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -1                  | Program output: -1                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: 20                  | Program output: 20                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -29                 | Program output: -29                
;;******************************
