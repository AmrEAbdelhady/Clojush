Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-70 -70 -70 -39] -70] [[-79 -79 -40 -79] -79] [[13 57 57 57] 13] [[56 56 56 -59] -59] [[-95 -95 -95 26] -95] [[-45 79 79 79] -45] [[-50 21 21 21] -50] [[51 51 72 51] 51] [[-69 -69 68 -69] -69] [[61 -100 -100 -100] -100] [(-73 -73 -73 -73) -73] [(85 85 85 85) 85] [(-58 -58 -58 -58) -58] [(10 10 10 10) 10] [(-13 -13 -13 -13) -13] [(61 36 24 70) 24] [(95 44 7 80) 7] [(27 59 33 77) 27] [(27 97 45 40) 27] [(70 36 47 39) 36] [(30 92 11 93) 11] [(99 88 32 24) 24] [(86 24 37 100) 24] [(48 22 79 18) 18] [(29 85 43 31) 29] [(62 16 61 50) 16] [(44 43 99 35) 35] [(70 54 48 95) 48] [(81 89 28 88) 28] [(49 27 15 91) 15] [(6 53 71 95) 6] [(84 56 22 97) 22] [(63 65 99 81) 63] [(41 32 70 62) 32] [(12 27 35 6) 6] [(65 30 43 -28) -28] [(45 -6 -98 24) -98] [(78 32 68 2) 2] [(44 97 97 -18) -18] [(53 74 97 91) 53] [(-39 7 73 51) -39] [(-67 69 -83 -64) -83] [(94 36 10 -63) -63] [(-27 43 11 -97) -97] [(19 79 36 56) 19] [(97 -87 27 84) -87] [(9 -85 54 -65) -85] [(-6 75 -11 -82) -82] [(79 -38 28 71) -38] [(-84 -60 -55 -12) -84] [(57 -12 -47 16) -47] [(71 29 -96 -59) -96] [(-84 -24 -47 -45) -84] [(-8 46 1 -1) -8] [(-23 24 72 28) -23] [(56 30 -29 47) -29] [(-46 -66 -23 -82) -82] [(-72 -7 -8 10) -72] [(-86 61 60 17) -86] [(95 -33 80 28) -33] [(65 -38 -93 -56) -93] [(91 -39 -21 6) -39] [(97 15 -33 -73) -73] [(51 -20 -69 -55) -69] [(71 -32 -52 -34) -52] [(-48 -93 88 82) -93] [(51 -65 -84 -87) -87] [(-41 60 -100 26) -100] [(-2 -79 -52 99) -79] [(-90 76 40 39) -90] [(16 -45 9 28) -45] [(-4 96 60 35) -4] [(-31 100 -40 -17) -40] [(35 -84 19 -42) -84] [(60 100 -62 52) -62] [(63 3 64 -12) -12] [(-10 -36 -56 34) -56] [(36 94 -42 -92) -92] [(-72 93 -43 1) -72] [(16 43 86 95) 16] [(-72 65 -76 74) -76] [(7 68 63 62) 7] [(30 76 -100 13) -100] [(-88 2 43 -75) -88] [(-35 45 41 -95) -95] [(-97 95 -97 -16) -97] [(-18 -80 27 -36) -80] [(-78 1 -13 -70) -78] [(-4 -71 92 47) -71] [(-81 -42 61 -81) -81] [(-33 70 16 -51) -51] [(-47 -2 -5 70) -47] [(-19 97 32 -53) -53] [(-82 -91 -71 44) -91] [(-7 -88 51 97) -88])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-70 -70 -70 -39] -70]
Train Case:   6 | Input/Output: [[-79 -79 -40 -79] -79]
Train Case:   7 | Input/Output: [[13 57 57 57] 13]
Train Case:   8 | Input/Output: [[56 56 56 -59] -59]
Train Case:   9 | Input/Output: [[-95 -95 -95 26] -95]
Train Case:  10 | Input/Output: [[-45 79 79 79] -45]
Train Case:  11 | Input/Output: [[-50 21 21 21] -50]
Train Case:  12 | Input/Output: [[51 51 72 51] 51]
Train Case:  13 | Input/Output: [[-69 -69 68 -69] -69]
Train Case:  14 | Input/Output: [[61 -100 -100 -100] -100]
Train Case:  15 | Input/Output: [(-73 -73 -73 -73) -73]
Train Case:  16 | Input/Output: [(85 85 85 85) 85]
Train Case:  17 | Input/Output: [(-58 -58 -58 -58) -58]
Train Case:  18 | Input/Output: [(10 10 10 10) 10]
Train Case:  19 | Input/Output: [(-13 -13 -13 -13) -13]
Train Case:  20 | Input/Output: [(61 36 24 70) 24]
Train Case:  21 | Input/Output: [(95 44 7 80) 7]
Train Case:  22 | Input/Output: [(27 59 33 77) 27]
Train Case:  23 | Input/Output: [(27 97 45 40) 27]
Train Case:  24 | Input/Output: [(70 36 47 39) 36]
Train Case:  25 | Input/Output: [(30 92 11 93) 11]
Train Case:  26 | Input/Output: [(99 88 32 24) 24]
Train Case:  27 | Input/Output: [(86 24 37 100) 24]
Train Case:  28 | Input/Output: [(48 22 79 18) 18]
Train Case:  29 | Input/Output: [(29 85 43 31) 29]
Train Case:  30 | Input/Output: [(62 16 61 50) 16]
Train Case:  31 | Input/Output: [(44 43 99 35) 35]
Train Case:  32 | Input/Output: [(70 54 48 95) 48]
Train Case:  33 | Input/Output: [(81 89 28 88) 28]
Train Case:  34 | Input/Output: [(49 27 15 91) 15]
Train Case:  35 | Input/Output: [(6 53 71 95) 6]
Train Case:  36 | Input/Output: [(84 56 22 97) 22]
Train Case:  37 | Input/Output: [(63 65 99 81) 63]
Train Case:  38 | Input/Output: [(41 32 70 62) 32]
Train Case:  39 | Input/Output: [(12 27 35 6) 6]
Train Case:  40 | Input/Output: [(65 30 43 -28) -28]
Train Case:  41 | Input/Output: [(45 -6 -98 24) -98]
Train Case:  42 | Input/Output: [(78 32 68 2) 2]
Train Case:  43 | Input/Output: [(44 97 97 -18) -18]
Train Case:  44 | Input/Output: [(53 74 97 91) 53]
Train Case:  45 | Input/Output: [(-39 7 73 51) -39]
Train Case:  46 | Input/Output: [(-67 69 -83 -64) -83]
Train Case:  47 | Input/Output: [(94 36 10 -63) -63]
Train Case:  48 | Input/Output: [(-27 43 11 -97) -97]
Train Case:  49 | Input/Output: [(19 79 36 56) 19]
Train Case:  50 | Input/Output: [(97 -87 27 84) -87]
Train Case:  51 | Input/Output: [(9 -85 54 -65) -85]
Train Case:  52 | Input/Output: [(-6 75 -11 -82) -82]
Train Case:  53 | Input/Output: [(79 -38 28 71) -38]
Train Case:  54 | Input/Output: [(-84 -60 -55 -12) -84]
Train Case:  55 | Input/Output: [(57 -12 -47 16) -47]
Train Case:  56 | Input/Output: [(71 29 -96 -59) -96]
Train Case:  57 | Input/Output: [(-84 -24 -47 -45) -84]
Train Case:  58 | Input/Output: [(-8 46 1 -1) -8]
Train Case:  59 | Input/Output: [(-23 24 72 28) -23]
Train Case:  60 | Input/Output: [(56 30 -29 47) -29]
Train Case:  61 | Input/Output: [(-46 -66 -23 -82) -82]
Train Case:  62 | Input/Output: [(-72 -7 -8 10) -72]
Train Case:  63 | Input/Output: [(-86 61 60 17) -86]
Train Case:  64 | Input/Output: [(95 -33 80 28) -33]
Train Case:  65 | Input/Output: [(65 -38 -93 -56) -93]
Train Case:  66 | Input/Output: [(91 -39 -21 6) -39]
Train Case:  67 | Input/Output: [(97 15 -33 -73) -73]
Train Case:  68 | Input/Output: [(51 -20 -69 -55) -69]
Train Case:  69 | Input/Output: [(71 -32 -52 -34) -52]
Train Case:  70 | Input/Output: [(-48 -93 88 82) -93]
Train Case:  71 | Input/Output: [(51 -65 -84 -87) -87]
Train Case:  72 | Input/Output: [(-41 60 -100 26) -100]
Train Case:  73 | Input/Output: [(-2 -79 -52 99) -79]
Train Case:  74 | Input/Output: [(-90 76 40 39) -90]
Train Case:  75 | Input/Output: [(16 -45 9 28) -45]
Train Case:  76 | Input/Output: [(-4 96 60 35) -4]
Train Case:  77 | Input/Output: [(-31 100 -40 -17) -40]
Train Case:  78 | Input/Output: [(35 -84 19 -42) -84]
Train Case:  79 | Input/Output: [(60 100 -62 52) -62]
Train Case:  80 | Input/Output: [(63 3 64 -12) -12]
Train Case:  81 | Input/Output: [(-10 -36 -56 34) -56]
Train Case:  82 | Input/Output: [(36 94 -42 -92) -92]
Train Case:  83 | Input/Output: [(-72 93 -43 1) -72]
Train Case:  84 | Input/Output: [(16 43 86 95) 16]
Train Case:  85 | Input/Output: [(-72 65 -76 74) -76]
Train Case:  86 | Input/Output: [(7 68 63 62) 7]
Train Case:  87 | Input/Output: [(30 76 -100 13) -100]
Train Case:  88 | Input/Output: [(-88 2 43 -75) -88]
Train Case:  89 | Input/Output: [(-35 45 41 -95) -95]
Train Case:  90 | Input/Output: [(-97 95 -97 -16) -97]
Train Case:  91 | Input/Output: [(-18 -80 27 -36) -80]
Train Case:  92 | Input/Output: [(-78 1 -13 -70) -78]
Train Case:  93 | Input/Output: [(-4 -71 92 47) -71]
Train Case:  94 | Input/Output: [(-81 -42 61 -81) -81]
Train Case:  95 | Input/Output: [(-33 70 16 -51) -51]
Train Case:  96 | Input/Output: [(-47 -2 -5 70) -47]
Train Case:  97 | Input/Output: [(-19 97 32 -53) -53]
Train Case:  98 | Input/Output: [(-82 -91 -71 44) -91]
Train Case:  99 | Input/Output: [(-7 -88 51 97) -88]
Test Case:   0 | Input/Output: [[-33 -33 -96 -33] -96]
Test Case:   1 | Input/Output: [[-27 -75 -75 -75] -75]
Test Case:   2 | Input/Output: [[78 -96 -96 -96] -96]
Test Case:   3 | Input/Output: [[56 56 56 28] 28]
Test Case:   4 | Input/Output: [[-53 77 -53 -53] -53]
Test Case:   5 | Input/Output: [[33 33 33 -53] -53]
Test Case:   6 | Input/Output: [[12 -100 12 12] -100]
Test Case:   7 | Input/Output: [[17 89 89 89] 17]
Test Case:   8 | Input/Output: [[-49 -49 39 -49] -49]
Test Case:   9 | Input/Output: [[-50 -50 -50 -75] -75]
Test Case:  10 | Input/Output: [[-80 -80 -80 69] -80]
Test Case:  11 | Input/Output: [[48 48 48 78] 48]
Test Case:  12 | Input/Output: [[6 -41 6 6] -41]
Test Case:  13 | Input/Output: [[-8 -8 -8 -27] -27]
Test Case:  14 | Input/Output: [[-84 -48 -84 -84] -84]
Test Case:  15 | Input/Output: [[45 -59 -59 -59] -59]
Test Case:  16 | Input/Output: [[34 -22 34 34] -22]
Test Case:  17 | Input/Output: [[-92 -92 75 -92] -92]
Test Case:  18 | Input/Output: [[-51 -51 -21 -51] -51]
Test Case:  19 | Input/Output: [[-27 -61 -27 -27] -61]
Test Case:  20 | Input/Output: [[35 35 23 35] 23]
Test Case:  21 | Input/Output: [[-20 -23 -20 -20] -23]
Test Case:  22 | Input/Output: [[4 -48 4 4] -48]
Test Case:  23 | Input/Output: [[77 -69 -69 -69] -69]
Test Case:  24 | Input/Output: [[72 63 63 63] 63]
Test Case:  25 | Input/Output: [[12 12 12 -96] -96]
Test Case:  26 | Input/Output: [[19 19 63 19] 19]
Test Case:  27 | Input/Output: [[13 -40 13 13] -40]
Test Case:  28 | Input/Output: [[56 56 56 84] 56]
Test Case:  29 | Input/Output: [[62 62 62 28] 28]
Test Case:  30 | Input/Output: [[-8 -8 -8 -57] -57]
Test Case:  31 | Input/Output: [[-70 -70 -99 -70] -99]
Test Case:  32 | Input/Output: [[86 86 86 -2] -2]
Test Case:  33 | Input/Output: [[64 64 -7 64] -7]
Test Case:  34 | Input/Output: [[-87 -87 -87 15] -87]
Test Case:  35 | Input/Output: [[-28 -28 -28 7] -28]
Test Case:  36 | Input/Output: [[-95 -95 -95 3] -95]
Test Case:  37 | Input/Output: [[-46 -58 -46 -46] -58]
Test Case:  38 | Input/Output: [[-11 -11 -11 -12] -12]
Test Case:  39 | Input/Output: [[-96 -96 -28 -96] -96]
Test Case:  40 | Input/Output: [[87 28 28 28] 28]
Test Case:  41 | Input/Output: [[-29 -53 -53 -53] -53]
Test Case:  42 | Input/Output: [[15 15 15 -30] -30]
Test Case:  43 | Input/Output: [[22 22 22 34] 22]
Test Case:  44 | Input/Output: [[-70 -70 10 -70] -70]
Test Case:  45 | Input/Output: [[-45 21 21 21] -45]
Test Case:  46 | Input/Output: [[-94 -44 -44 -44] -94]
Test Case:  47 | Input/Output: [[-17 -99 -17 -17] -99]
Test Case:  48 | Input/Output: [[-57 -57 -57 -7] -57]
Test Case:  49 | Input/Output: [[-54 -54 -54 -70] -70]
Test Case:  50 | Input/Output: [[68 68 68 61] 61]
Test Case:  51 | Input/Output: [[83 83 83 -98] -98]
Test Case:  52 | Input/Output: [[-18 -83 -18 -18] -83]
Test Case:  53 | Input/Output: [[-87 -87 -25 -87] -87]
Test Case:  54 | Input/Output: [[55 77 77 77] 55]
Test Case:  55 | Input/Output: [[-47 66 66 66] -47]
Test Case:  56 | Input/Output: [[-85 40 40 40] -85]
Test Case:  57 | Input/Output: [[-23 48 -23 -23] -23]
Test Case:  58 | Input/Output: [[-6 -6 -6 -49] -49]
Test Case:  59 | Input/Output: [[-69 -69 -51 -69] -69]
Test Case:  60 | Input/Output: [[72 72 72 -66] -66]
Test Case:  61 | Input/Output: [[73 73 89 73] 73]
Test Case:  62 | Input/Output: [[-58 -58 -26 -58] -58]
Test Case:  63 | Input/Output: [[-96 94 -96 -96] -96]
Test Case:  64 | Input/Output: [[-91 -91 -37 -91] -91]
Test Case:  65 | Input/Output: [[86 -77 -77 -77] -77]
Test Case:  66 | Input/Output: [[51 -61 51 51] -61]
Test Case:  67 | Input/Output: [[-100 -61 -61 -61] -100]
Test Case:  68 | Input/Output: [[-20 -20 -21 -20] -21]
Test Case:  69 | Input/Output: [[61 61 61 -43] -43]
Test Case:  70 | Input/Output: [[-1 6 -1 -1] -1]
Test Case:  71 | Input/Output: [[63 63 63 23] 23]
Test Case:  72 | Input/Output: [[-11 44 44 44] -11]
Test Case:  73 | Input/Output: [[32 43 32 32] 32]
Test Case:  74 | Input/Output: [[100 45 100 100] 45]
Test Case:  75 | Input/Output: [[44 44 81 44] 44]
Test Case:  76 | Input/Output: [[-99 63 -99 -99] -99]
Test Case:  77 | Input/Output: [[88 88 -64 88] -64]
Test Case:  78 | Input/Output: [[21 -20 -20 -20] -20]
Test Case:  79 | Input/Output: [[81 -22 81 81] -22]
Test Case:  80 | Input/Output: [[-78 -21 -21 -21] -78]
Test Case:  81 | Input/Output: [[94 -50 -50 -50] -50]
Test Case:  82 | Input/Output: [[-51 50 50 50] -51]
Test Case:  83 | Input/Output: [[-16 79 79 79] -16]
Test Case:  84 | Input/Output: [[-30 -21 -30 -30] -30]
Test Case:  85 | Input/Output: [[-74 -74 -74 -86] -86]
Test Case:  86 | Input/Output: [[-68 -68 -68 -12] -68]
Test Case:  87 | Input/Output: [[-77 -77 -77 -81] -81]
Test Case:  88 | Input/Output: [[64 64 -60 64] -60]
Test Case:  89 | Input/Output: [[57 59 57 57] 57]
Test Case:  90 | Input/Output: [[-67 -67 -67 -79] -79]
Test Case:  91 | Input/Output: [[-44 -16 -16 -16] -44]
Test Case:  92 | Input/Output: [[-14 -14 -23 -14] -23]
Test Case:  93 | Input/Output: [[72 72 -86 72] -86]
Test Case:  94 | Input/Output: [[-14 66 66 66] -14]
Test Case:  95 | Input/Output: [[-64 -39 -39 -39] -64]
Test Case:  96 | Input/Output: [[-2 -2 -41 -2] -41]
Test Case:  97 | Input/Output: [[-17 41 -17 -17] -17]
Test Case:  98 | Input/Output: [[-68 20 -68 -68] -68]
Test Case:  99 | Input/Output: [[1 52 1 1] 1]
Test Case: 100 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 101 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 102 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 103 | Input/Output: [(75 75 75 75) 75]
Test Case: 104 | Input/Output: [(67 67 67 67) 67]
Test Case: 105 | Input/Output: [(53 53 53 53) 53]
Test Case: 106 | Input/Output: [(11 11 11 11) 11]
Test Case: 107 | Input/Output: [(86 86 86 86) 86]
Test Case: 108 | Input/Output: [(55 55 55 55) 55]
Test Case: 109 | Input/Output: [(6 6 6 6) 6]
Test Case: 110 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 111 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 112 | Input/Output: [(20 20 20 20) 20]
Test Case: 113 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 114 | Input/Output: [(52 52 52 52) 52]
Test Case: 115 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 116 | Input/Output: [(46 46 46 46) 46]
Test Case: 117 | Input/Output: [(62 62 62 62) 62]
Test Case: 118 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 119 | Input/Output: [(22 22 22 22) 22]
Test Case: 120 | Input/Output: [(57 57 57 57) 57]
Test Case: 121 | Input/Output: [(69 69 69 69) 69]
Test Case: 122 | Input/Output: [(4 4 4 4) 4]
Test Case: 123 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 124 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 125 | Input/Output: [(36 36 36 36) 36]
Test Case: 126 | Input/Output: [(78 78 78 78) 78]
Test Case: 127 | Input/Output: [(100 100 100 100) 100]
Test Case: 128 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 129 | Input/Output: [(15 15 15 15) 15]
Test Case: 130 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 131 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 132 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 133 | Input/Output: [(98 98 98 98) 98]
Test Case: 134 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 135 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 136 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 137 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 138 | Input/Output: [(89 89 89 89) 89]
Test Case: 139 | Input/Output: [(93 93 93 93) 93]
Test Case: 140 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 141 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 142 | Input/Output: [(14 14 14 14) 14]
Test Case: 143 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 144 | Input/Output: [(89 89 89 89) 89]
Test Case: 145 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 146 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 147 | Input/Output: [(63 63 63 63) 63]
Test Case: 148 | Input/Output: [(65 65 65 65) 65]
Test Case: 149 | Input/Output: [(15 15 15 15) 15]
Test Case: 150 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 151 | Input/Output: [(28 28 28 28) 28]
Test Case: 152 | Input/Output: [(72 72 72 72) 72]
Test Case: 153 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 154 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 155 | Input/Output: [(74 74 74 74) 74]
Test Case: 156 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 157 | Input/Output: [(59 59 59 59) 59]
Test Case: 158 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 159 | Input/Output: [(56 56 56 56) 56]
Test Case: 160 | Input/Output: [(53 53 53 53) 53]
Test Case: 161 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 162 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 163 | Input/Output: [(46 46 46 46) 46]
Test Case: 164 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 165 | Input/Output: [(5 5 5 5) 5]
Test Case: 166 | Input/Output: [(58 58 58 58) 58]
Test Case: 167 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 168 | Input/Output: [(42 42 42 42) 42]
Test Case: 169 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 170 | Input/Output: [(79 79 79 79) 79]
Test Case: 171 | Input/Output: [(96 96 96 96) 96]
Test Case: 172 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 173 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 174 | Input/Output: [(1 1 1 1) 1]
Test Case: 175 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 176 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 177 | Input/Output: [(100 100 100 100) 100]
Test Case: 178 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 179 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 180 | Input/Output: [(20 20 20 20) 20]
Test Case: 181 | Input/Output: [(88 88 88 88) 88]
Test Case: 182 | Input/Output: [(100 100 100 100) 100]
Test Case: 183 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 184 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 185 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 186 | Input/Output: [(56 56 56 56) 56]
Test Case: 187 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 188 | Input/Output: [(34 34 34 34) 34]
Test Case: 189 | Input/Output: [(14 14 14 14) 14]
Test Case: 190 | Input/Output: [(97 97 97 97) 97]
Test Case: 191 | Input/Output: [(61 61 61 61) 61]
Test Case: 192 | Input/Output: [(19 19 19 19) 19]
Test Case: 193 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 194 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 195 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 196 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 197 | Input/Output: [(84 84 84 84) 84]
Test Case: 198 | Input/Output: [(29 29 29 29) 29]
Test Case: 199 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 200 | Input/Output: [(34 89 43 67) 34]
Test Case: 201 | Input/Output: [(93 38 74 16) 16]
Test Case: 202 | Input/Output: [(70 19 24 3) 3]
Test Case: 203 | Input/Output: [(99 1 95 84) 1]
Test Case: 204 | Input/Output: [(83 89 91 75) 75]
Test Case: 205 | Input/Output: [(85 28 32 78) 28]
Test Case: 206 | Input/Output: [(28 30 75 17) 17]
Test Case: 207 | Input/Output: [(33 72 72 2) 2]
Test Case: 208 | Input/Output: [(97 68 11 90) 11]
Test Case: 209 | Input/Output: [(37 26 95 68) 26]
Test Case: 210 | Input/Output: [(32 3 82 4) 3]
Test Case: 211 | Input/Output: [(29 82 29 74) 29]
Test Case: 212 | Input/Output: [(14 24 31 40) 14]
Test Case: 213 | Input/Output: [(100 44 75 43) 43]
Test Case: 214 | Input/Output: [(48 78 42 55) 42]
Test Case: 215 | Input/Output: [(25 6 0 77) 0]
Test Case: 216 | Input/Output: [(99 47 24 59) 24]
Test Case: 217 | Input/Output: [(54 92 72 85) 54]
Test Case: 218 | Input/Output: [(92 54 30 45) 30]
Test Case: 219 | Input/Output: [(54 32 13 0) 0]
Test Case: 220 | Input/Output: [(51 33 59 25) 25]
Test Case: 221 | Input/Output: [(65 69 98 63) 63]
Test Case: 222 | Input/Output: [(43 52 96 99) 43]
Test Case: 223 | Input/Output: [(18 7 23 83) 7]
Test Case: 224 | Input/Output: [(39 66 70 78) 39]
Test Case: 225 | Input/Output: [(75 55 68 43) 43]
Test Case: 226 | Input/Output: [(90 44 1 20) 1]
Test Case: 227 | Input/Output: [(13 10 76 41) 10]
Test Case: 228 | Input/Output: [(87 4 20 60) 4]
Test Case: 229 | Input/Output: [(65 61 11 1) 1]
Test Case: 230 | Input/Output: [(66 78 9 35) 9]
Test Case: 231 | Input/Output: [(65 51 3 27) 3]
Test Case: 232 | Input/Output: [(79 20 16 33) 16]
Test Case: 233 | Input/Output: [(6 74 12 71) 6]
Test Case: 234 | Input/Output: [(60 9 56 14) 9]
Test Case: 235 | Input/Output: [(3 22 2 14) 2]
Test Case: 236 | Input/Output: [(36 19 84 48) 19]
Test Case: 237 | Input/Output: [(7 64 89 96) 7]
Test Case: 238 | Input/Output: [(73 93 59 55) 55]
Test Case: 239 | Input/Output: [(2 82 80 31) 2]
Test Case: 240 | Input/Output: [(14 56 98 85) 14]
Test Case: 241 | Input/Output: [(54 71 60 41) 41]
Test Case: 242 | Input/Output: [(41 79 47 88) 41]
Test Case: 243 | Input/Output: [(75 19 41 66) 19]
Test Case: 244 | Input/Output: [(54 43 39 18) 18]
Test Case: 245 | Input/Output: [(51 65 36 52) 36]
Test Case: 246 | Input/Output: [(13 17 94 79) 13]
Test Case: 247 | Input/Output: [(75 65 5 78) 5]
Test Case: 248 | Input/Output: [(40 60 40 86) 40]
Test Case: 249 | Input/Output: [(51 21 97 92) 21]
Test Case: 250 | Input/Output: [(0 15 78 28) 0]
Test Case: 251 | Input/Output: [(67 65 26 89) 26]
Test Case: 252 | Input/Output: [(87 53 34 99) 34]
Test Case: 253 | Input/Output: [(64 77 43 35) 35]
Test Case: 254 | Input/Output: [(53 86 77 22) 22]
Test Case: 255 | Input/Output: [(24 47 46 96) 24]
Test Case: 256 | Input/Output: [(5 22 67 27) 5]
Test Case: 257 | Input/Output: [(20 94 20 92) 20]
Test Case: 258 | Input/Output: [(93 4 27 92) 4]
Test Case: 259 | Input/Output: [(27 43 30 19) 19]
Test Case: 260 | Input/Output: [(65 55 31 100) 31]
Test Case: 261 | Input/Output: [(7 45 9 33) 7]
Test Case: 262 | Input/Output: [(72 21 27 40) 21]
Test Case: 263 | Input/Output: [(42 25 32 81) 25]
Test Case: 264 | Input/Output: [(94 38 92 18) 18]
Test Case: 265 | Input/Output: [(27 19 49 32) 19]
Test Case: 266 | Input/Output: [(82 40 30 31) 30]
Test Case: 267 | Input/Output: [(22 49 33 0) 0]
Test Case: 268 | Input/Output: [(28 19 78 32) 19]
Test Case: 269 | Input/Output: [(84 96 31 64) 31]
Test Case: 270 | Input/Output: [(32 3 55 87) 3]
Test Case: 271 | Input/Output: [(76 15 78 27) 15]
Test Case: 272 | Input/Output: [(56 91 86 0) 0]
Test Case: 273 | Input/Output: [(25 29 6 99) 6]
Test Case: 274 | Input/Output: [(57 14 24 33) 14]
Test Case: 275 | Input/Output: [(44 6 4 80) 4]
Test Case: 276 | Input/Output: [(95 92 16 84) 16]
Test Case: 277 | Input/Output: [(88 40 21 37) 21]
Test Case: 278 | Input/Output: [(92 12 42 95) 12]
Test Case: 279 | Input/Output: [(82 76 46 70) 46]
Test Case: 280 | Input/Output: [(22 37 75 95) 22]
Test Case: 281 | Input/Output: [(14 50 95 56) 14]
Test Case: 282 | Input/Output: [(39 83 90 2) 2]
Test Case: 283 | Input/Output: [(34 45 58 5) 5]
Test Case: 284 | Input/Output: [(1 64 53 64) 1]
Test Case: 285 | Input/Output: [(37 24 78 58) 24]
Test Case: 286 | Input/Output: [(15 75 46 63) 15]
Test Case: 287 | Input/Output: [(57 99 7 36) 7]
Test Case: 288 | Input/Output: [(80 49 25 21) 21]
Test Case: 289 | Input/Output: [(80 56 93 38) 38]
Test Case: 290 | Input/Output: [(46 1 38 57) 1]
Test Case: 291 | Input/Output: [(84 28 62 48) 28]
Test Case: 292 | Input/Output: [(55 92 9 91) 9]
Test Case: 293 | Input/Output: [(15 33 80 87) 15]
Test Case: 294 | Input/Output: [(22 77 54 78) 22]
Test Case: 295 | Input/Output: [(40 47 56 48) 40]
Test Case: 296 | Input/Output: [(78 12 33 14) 12]
Test Case: 297 | Input/Output: [(37 13 27 58) 13]
Test Case: 298 | Input/Output: [(18 74 97 72) 18]
Test Case: 299 | Input/Output: [(40 78 87 64) 40]
Test Case: 300 | Input/Output: [(99 13 42 11) 11]
Test Case: 301 | Input/Output: [(14 42 63 98) 14]
Test Case: 302 | Input/Output: [(1 14 21 92) 1]
Test Case: 303 | Input/Output: [(40 91 89 4) 4]
Test Case: 304 | Input/Output: [(22 68 30 13) 13]
Test Case: 305 | Input/Output: [(71 23 69 97) 23]
Test Case: 306 | Input/Output: [(81 64 78 86) 64]
Test Case: 307 | Input/Output: [(85 24 67 88) 24]
Test Case: 308 | Input/Output: [(27 7 18 98) 7]
Test Case: 309 | Input/Output: [(8 4 66 25) 4]
Test Case: 310 | Input/Output: [(13 93 6 77) 6]
Test Case: 311 | Input/Output: [(62 82 60 94) 60]
Test Case: 312 | Input/Output: [(69 30 90 47) 30]
Test Case: 313 | Input/Output: [(78 13 89 56) 13]
Test Case: 314 | Input/Output: [(13 89 22 81) 13]
Test Case: 315 | Input/Output: [(23 26 38 48) 23]
Test Case: 316 | Input/Output: [(75 86 93 24) 24]
Test Case: 317 | Input/Output: [(43 26 57 43) 26]
Test Case: 318 | Input/Output: [(76 22 41 80) 22]
Test Case: 319 | Input/Output: [(45 28 68 14) 14]
Test Case: 320 | Input/Output: [(25 6 43 41) 6]
Test Case: 321 | Input/Output: [(98 85 91 15) 15]
Test Case: 322 | Input/Output: [(9 11 90 76) 9]
Test Case: 323 | Input/Output: [(15 33 62 55) 15]
Test Case: 324 | Input/Output: [(64 72 97 100) 64]
Test Case: 325 | Input/Output: [(34 7 11 71) 7]
Test Case: 326 | Input/Output: [(31 77 90 57) 31]
Test Case: 327 | Input/Output: [(1 10 13 81) 1]
Test Case: 328 | Input/Output: [(30 77 33 36) 30]
Test Case: 329 | Input/Output: [(17 68 79 35) 17]
Test Case: 330 | Input/Output: [(23 32 47 43) 23]
Test Case: 331 | Input/Output: [(10 83 4 46) 4]
Test Case: 332 | Input/Output: [(68 37 11 97) 11]
Test Case: 333 | Input/Output: [(71 31 21 42) 21]
Test Case: 334 | Input/Output: [(25 42 89 30) 25]
Test Case: 335 | Input/Output: [(35 48 22 17) 17]
Test Case: 336 | Input/Output: [(9 51 18 78) 9]
Test Case: 337 | Input/Output: [(6 74 31 73) 6]
Test Case: 338 | Input/Output: [(43 4 53 48) 4]
Test Case: 339 | Input/Output: [(51 18 69 39) 18]
Test Case: 340 | Input/Output: [(50 53 48 78) 48]
Test Case: 341 | Input/Output: [(22 3 64 92) 3]
Test Case: 342 | Input/Output: [(79 15 13 90) 13]
Test Case: 343 | Input/Output: [(75 2 94 49) 2]
Test Case: 344 | Input/Output: [(96 94 87 9) 9]
Test Case: 345 | Input/Output: [(51 52 38 27) 27]
Test Case: 346 | Input/Output: [(99 85 77 82) 77]
Test Case: 347 | Input/Output: [(45 39 78 14) 14]
Test Case: 348 | Input/Output: [(97 99 80 13) 13]
Test Case: 349 | Input/Output: [(69 87 58 17) 17]
Test Case: 350 | Input/Output: [(24 51 28 85) 24]
Test Case: 351 | Input/Output: [(59 28 64 15) 15]
Test Case: 352 | Input/Output: [(14 15 88 11) 11]
Test Case: 353 | Input/Output: [(24 6 73 74) 6]
Test Case: 354 | Input/Output: [(63 98 35 86) 35]
Test Case: 355 | Input/Output: [(7 81 81 99) 7]
Test Case: 356 | Input/Output: [(77 93 49 93) 49]
Test Case: 357 | Input/Output: [(46 65 92 53) 46]
Test Case: 358 | Input/Output: [(1 77 66 50) 1]
Test Case: 359 | Input/Output: [(97 25 17 27) 17]
Test Case: 360 | Input/Output: [(52 16 18 63) 16]
Test Case: 361 | Input/Output: [(81 21 42 39) 21]
Test Case: 362 | Input/Output: [(0 4 52 80) 0]
Test Case: 363 | Input/Output: [(74 68 53 86) 53]
Test Case: 364 | Input/Output: [(18 4 69 88) 4]
Test Case: 365 | Input/Output: [(89 39 99 61) 39]
Test Case: 366 | Input/Output: [(66 36 18 84) 18]
Test Case: 367 | Input/Output: [(64 75 48 89) 48]
Test Case: 368 | Input/Output: [(26 87 82 57) 26]
Test Case: 369 | Input/Output: [(93 76 86 49) 49]
Test Case: 370 | Input/Output: [(39 44 49 45) 39]
Test Case: 371 | Input/Output: [(62 61 58 59) 58]
Test Case: 372 | Input/Output: [(74 52 53 16) 16]
Test Case: 373 | Input/Output: [(10 2 3 69) 2]
Test Case: 374 | Input/Output: [(45 68 13 39) 13]
Test Case: 375 | Input/Output: [(96 95 58 12) 12]
Test Case: 376 | Input/Output: [(28 10 45 50) 10]
Test Case: 377 | Input/Output: [(72 94 71 45) 45]
Test Case: 378 | Input/Output: [(79 7 15 51) 7]
Test Case: 379 | Input/Output: [(51 60 2 33) 2]
Test Case: 380 | Input/Output: [(54 22 6 72) 6]
Test Case: 381 | Input/Output: [(63 56 65 77) 56]
Test Case: 382 | Input/Output: [(99 37 14 77) 14]
Test Case: 383 | Input/Output: [(41 62 62 37) 37]
Test Case: 384 | Input/Output: [(39 21 48 9) 9]
Test Case: 385 | Input/Output: [(38 8 73 49) 8]
Test Case: 386 | Input/Output: [(89 59 7 37) 7]
Test Case: 387 | Input/Output: [(3 44 57 63) 3]
Test Case: 388 | Input/Output: [(93 72 33 55) 33]
Test Case: 389 | Input/Output: [(32 18 24 56) 18]
Test Case: 390 | Input/Output: [(95 88 63 70) 63]
Test Case: 391 | Input/Output: [(56 56 56 87) 56]
Test Case: 392 | Input/Output: [(31 0 48 32) 0]
Test Case: 393 | Input/Output: [(54 29 60 43) 29]
Test Case: 394 | Input/Output: [(100 9 20 89) 9]
Test Case: 395 | Input/Output: [(37 76 75 78) 37]
Test Case: 396 | Input/Output: [(22 76 65 42) 22]
Test Case: 397 | Input/Output: [(39 2 22 79) 2]
Test Case: 398 | Input/Output: [(26 10 17 61) 10]
Test Case: 399 | Input/Output: [(88 18 89 29) 18]
Test Case: 400 | Input/Output: [(-50 -83 42 86) -83]
Test Case: 401 | Input/Output: [(-29 16 -87 -28) -87]
Test Case: 402 | Input/Output: [(-16 -100 40 58) -100]
Test Case: 403 | Input/Output: [(99 -50 -18 36) -50]
Test Case: 404 | Input/Output: [(-57 67 52 10) -57]
Test Case: 405 | Input/Output: [(-60 88 96 23) -60]
Test Case: 406 | Input/Output: [(-79 -63 77 44) -79]
Test Case: 407 | Input/Output: [(-71 -68 -77 42) -77]
Test Case: 408 | Input/Output: [(68 -7 -22 -90) -90]
Test Case: 409 | Input/Output: [(-91 -25 -91 96) -91]
Test Case: 410 | Input/Output: [(-69 14 -87 -1) -87]
Test Case: 411 | Input/Output: [(-55 17 75 -76) -76]
Test Case: 412 | Input/Output: [(77 -39 14 10) -39]
Test Case: 413 | Input/Output: [(78 -25 -23 -31) -31]
Test Case: 414 | Input/Output: [(-73 -35 -23 -47) -73]
Test Case: 415 | Input/Output: [(9 -70 -18 -37) -70]
Test Case: 416 | Input/Output: [(-55 -98 78 -81) -98]
Test Case: 417 | Input/Output: [(-92 28 -95 -35) -95]
Test Case: 418 | Input/Output: [(81 -93 -95 -26) -95]
Test Case: 419 | Input/Output: [(11 -34 69 -64) -64]
Test Case: 420 | Input/Output: [(52 -17 78 33) -17]
Test Case: 421 | Input/Output: [(60 -45 87 -29) -45]
Test Case: 422 | Input/Output: [(-35 -79 100 2) -79]
Test Case: 423 | Input/Output: [(42 -65 55 -1) -65]
Test Case: 424 | Input/Output: [(23 71 90 -3) -3]
Test Case: 425 | Input/Output: [(87 -63 19 -47) -63]
Test Case: 426 | Input/Output: [(-69 19 44 -37) -69]
Test Case: 427 | Input/Output: [(-39 -76 74 9) -76]
Test Case: 428 | Input/Output: [(-14 -72 -9 -54) -72]
Test Case: 429 | Input/Output: [(32 34 100 83) 32]
Test Case: 430 | Input/Output: [(-80 -57 19 94) -80]
Test Case: 431 | Input/Output: [(-4 16 56 -71) -71]
Test Case: 432 | Input/Output: [(-91 8 28 -5) -91]
Test Case: 433 | Input/Output: [(-81 -89 -38 -81) -89]
Test Case: 434 | Input/Output: [(16 -98 -33 3) -98]
Test Case: 435 | Input/Output: [(-22 -87 -68 7) -87]
Test Case: 436 | Input/Output: [(-16 77 -24 -32) -32]
Test Case: 437 | Input/Output: [(3 -28 -4 80) -28]
Test Case: 438 | Input/Output: [(-37 73 -8 -67) -67]
Test Case: 439 | Input/Output: [(-34 71 -59 67) -59]
Test Case: 440 | Input/Output: [(54 -62 -62 70) -62]
Test Case: 441 | Input/Output: [(91 -61 4 -11) -61]
Test Case: 442 | Input/Output: [(100 -71 -86 22) -86]
Test Case: 443 | Input/Output: [(3 89 82 36) 3]
Test Case: 444 | Input/Output: [(-45 -46 31 40) -46]
Test Case: 445 | Input/Output: [(-59 38 35 46) -59]
Test Case: 446 | Input/Output: [(-7 -1 -44 37) -44]
Test Case: 447 | Input/Output: [(-48 -43 -83 60) -83]
Test Case: 448 | Input/Output: [(-33 -42 -14 9) -42]
Test Case: 449 | Input/Output: [(-80 67 -98 52) -98]
Test Case: 450 | Input/Output: [(-54 74 -87 -65) -87]
Test Case: 451 | Input/Output: [(-84 73 -9 24) -84]
Test Case: 452 | Input/Output: [(-48 -67 34 -5) -67]
Test Case: 453 | Input/Output: [(94 -40 -76 -92) -92]
Test Case: 454 | Input/Output: [(-55 -13 -17 34) -55]
Test Case: 455 | Input/Output: [(-41 -89 6 -52) -89]
Test Case: 456 | Input/Output: [(8 -69 1 -19) -69]
Test Case: 457 | Input/Output: [(-57 -31 51 -90) -90]
Test Case: 458 | Input/Output: [(-66 25 70 -51) -66]
Test Case: 459 | Input/Output: [(-16 -62 -10 -51) -62]
Test Case: 460 | Input/Output: [(-34 12 -87 -31) -87]
Test Case: 461 | Input/Output: [(-48 23 80 52) -48]
Test Case: 462 | Input/Output: [(-16 -67 -41 -71) -71]
Test Case: 463 | Input/Output: [(74 -93 -65 -84) -93]
Test Case: 464 | Input/Output: [(51 -87 94 -77) -87]
Test Case: 465 | Input/Output: [(-13 41 -81 57) -81]
Test Case: 466 | Input/Output: [(94 -10 -16 61) -16]
Test Case: 467 | Input/Output: [(-32 -77 -57 -99) -99]
Test Case: 468 | Input/Output: [(29 -11 -59 4) -59]
Test Case: 469 | Input/Output: [(-74 51 51 93) -74]
Test Case: 470 | Input/Output: [(-36 -33 -21 39) -36]
Test Case: 471 | Input/Output: [(-77 32 37 81) -77]
Test Case: 472 | Input/Output: [(63 75 -9 37) -9]
Test Case: 473 | Input/Output: [(-28 61 -66 45) -66]
Test Case: 474 | Input/Output: [(-15 78 -71 11) -71]
Test Case: 475 | Input/Output: [(24 70 62 -85) -85]
Test Case: 476 | Input/Output: [(-26 62 -34 -30) -34]
Test Case: 477 | Input/Output: [(13 -80 58 19) -80]
Test Case: 478 | Input/Output: [(59 89 81 63) 59]
Test Case: 479 | Input/Output: [(-36 75 -55 -87) -87]
Test Case: 480 | Input/Output: [(-48 51 -38 74) -48]
Test Case: 481 | Input/Output: [(85 90 -12 65) -12]
Test Case: 482 | Input/Output: [(58 72 59 64) 58]
Test Case: 483 | Input/Output: [(-83 -28 -98 25) -98]
Test Case: 484 | Input/Output: [(-19 14 -47 -68) -68]
Test Case: 485 | Input/Output: [(9 99 13 12) 9]
Test Case: 486 | Input/Output: [(38 51 -71 98) -71]
Test Case: 487 | Input/Output: [(19 -100 -37 -28) -100]
Test Case: 488 | Input/Output: [(9 72 8 51) 8]
Test Case: 489 | Input/Output: [(36 -24 73 88) -24]
Test Case: 490 | Input/Output: [(-50 -82 85 32) -82]
Test Case: 491 | Input/Output: [(12 -63 -83 -69) -83]
Test Case: 492 | Input/Output: [(-16 0 72 60) -16]
Test Case: 493 | Input/Output: [(-79 -27 61 -94) -94]
Test Case: 494 | Input/Output: [(99 98 -93 79) -93]
Test Case: 495 | Input/Output: [(65 79 42 -22) -22]
Test Case: 496 | Input/Output: [(-59 -75 -69 64) -75]
Test Case: 497 | Input/Output: [(-48 26 -21 98) -48]
Test Case: 498 | Input/Output: [(-45 -6 58 74) -45]
Test Case: 499 | Input/Output: [(92 -85 35 -3) -85]
Test Case: 500 | Input/Output: [(34 58 25 69) 25]
Test Case: 501 | Input/Output: [(63 -68 -81 -8) -81]
Test Case: 502 | Input/Output: [(65 47 -21 40) -21]
Test Case: 503 | Input/Output: [(-76 45 -33 95) -76]
Test Case: 504 | Input/Output: [(19 -92 -84 -77) -92]
Test Case: 505 | Input/Output: [(16 -17 78 67) -17]
Test Case: 506 | Input/Output: [(-98 -7 -23 9) -98]
Test Case: 507 | Input/Output: [(-51 -67 40 -15) -67]
Test Case: 508 | Input/Output: [(-82 76 -47 -64) -82]
Test Case: 509 | Input/Output: [(-24 -17 40 18) -24]
Test Case: 510 | Input/Output: [(-63 16 32 34) -63]
Test Case: 511 | Input/Output: [(58 -36 -83 -91) -91]
Test Case: 512 | Input/Output: [(56 31 17 9) 9]
Test Case: 513 | Input/Output: [(-100 76 -2 84) -100]
Test Case: 514 | Input/Output: [(-84 20 95 -34) -84]
Test Case: 515 | Input/Output: [(41 85 70 -85) -85]
Test Case: 516 | Input/Output: [(49 32 -68 -31) -68]
Test Case: 517 | Input/Output: [(-72 -6 81 -21) -72]
Test Case: 518 | Input/Output: [(70 -67 -71 21) -71]
Test Case: 519 | Input/Output: [(-39 -43 91 16) -43]
Test Case: 520 | Input/Output: [(17 62 90 75) 17]
Test Case: 521 | Input/Output: [(54 -4 -60 -26) -60]
Test Case: 522 | Input/Output: [(56 34 39 -12) -12]
Test Case: 523 | Input/Output: [(41 -45 -70 -54) -70]
Test Case: 524 | Input/Output: [(-3 24 -9 -86) -86]
Test Case: 525 | Input/Output: [(85 -6 -43 -38) -43]
Test Case: 526 | Input/Output: [(28 93 -42 -91) -91]
Test Case: 527 | Input/Output: [(63 -27 -59 -38) -59]
Test Case: 528 | Input/Output: [(-45 -87 -37 15) -87]
Test Case: 529 | Input/Output: [(75 57 -18 61) -18]
Test Case: 530 | Input/Output: [(-24 23 92 3) -24]
Test Case: 531 | Input/Output: [(-25 3 96 -30) -30]
Test Case: 532 | Input/Output: [(5 84 45 4) 4]
Test Case: 533 | Input/Output: [(95 -23 -19 92) -23]
Test Case: 534 | Input/Output: [(-62 -44 -4 -66) -66]
Test Case: 535 | Input/Output: [(-50 68 -66 25) -66]
Test Case: 536 | Input/Output: [(98 -57 -31 -83) -83]
Test Case: 537 | Input/Output: [(47 -46 -84 -56) -84]
Test Case: 538 | Input/Output: [(21 -91 -26 38) -91]
Test Case: 539 | Input/Output: [(58 19 -2 46) -2]
Test Case: 540 | Input/Output: [(71 67 -60 7) -60]
Test Case: 541 | Input/Output: [(44 -9 93 -61) -61]
Test Case: 542 | Input/Output: [(96 33 -34 -94) -94]
Test Case: 543 | Input/Output: [(54 82 55 0) 0]
Test Case: 544 | Input/Output: [(-97 79 2 47) -97]
Test Case: 545 | Input/Output: [(34 78 99 97) 34]
Test Case: 546 | Input/Output: [(44 -100 81 -76) -100]
Test Case: 547 | Input/Output: [(41 -37 -1 57) -37]
Test Case: 548 | Input/Output: [(-41 99 -12 49) -41]
Test Case: 549 | Input/Output: [(-49 -22 62 -37) -49]
Test Case: 550 | Input/Output: [(14 30 70 -66) -66]
Test Case: 551 | Input/Output: [(73 32 -85 -69) -85]
Test Case: 552 | Input/Output: [(88 50 83 52) 50]
Test Case: 553 | Input/Output: [(89 -43 -25 94) -43]
Test Case: 554 | Input/Output: [(30 44 59 11) 11]
Test Case: 555 | Input/Output: [(73 -6 81 -32) -32]
Test Case: 556 | Input/Output: [(-32 71 -98 24) -98]
Test Case: 557 | Input/Output: [(-9 26 -84 -95) -95]
Test Case: 558 | Input/Output: [(-84 96 -19 -61) -84]
Test Case: 559 | Input/Output: [(99 -61 -96 71) -96]
Test Case: 560 | Input/Output: [(-62 58 -89 19) -89]
Test Case: 561 | Input/Output: [(45 -23 90 -67) -67]
Test Case: 562 | Input/Output: [(4 -65 78 -43) -65]
Test Case: 563 | Input/Output: [(84 -60 -55 78) -60]
Test Case: 564 | Input/Output: [(-7 47 -33 27) -33]
Test Case: 565 | Input/Output: [(-16 5 45 -50) -50]
Test Case: 566 | Input/Output: [(0 -30 -46 79) -46]
Test Case: 567 | Input/Output: [(-70 93 -51 6) -70]
Test Case: 568 | Input/Output: [(59 30 -95 -16) -95]
Test Case: 569 | Input/Output: [(-52 -48 38 13) -52]
Test Case: 570 | Input/Output: [(25 80 49 -18) -18]
Test Case: 571 | Input/Output: [(-44 -53 23 -95) -95]
Test Case: 572 | Input/Output: [(14 67 17 92) 14]
Test Case: 573 | Input/Output: [(-52 -81 73 51) -81]
Test Case: 574 | Input/Output: [(-24 -82 -10 -38) -82]
Test Case: 575 | Input/Output: [(84 -61 -43 -97) -97]
Test Case: 576 | Input/Output: [(6 46 -34 -93) -93]
Test Case: 577 | Input/Output: [(22 -14 -2 69) -14]
Test Case: 578 | Input/Output: [(-69 62 -60 -26) -69]
Test Case: 579 | Input/Output: [(73 -24 -87 64) -87]
Test Case: 580 | Input/Output: [(-77 84 93 6) -77]
Test Case: 581 | Input/Output: [(-52 58 -81 35) -81]
Test Case: 582 | Input/Output: [(-90 -25 95 -36) -90]
Test Case: 583 | Input/Output: [(-55 -46 -72 58) -72]
Test Case: 584 | Input/Output: [(-15 -22 -78 -11) -78]
Test Case: 585 | Input/Output: [(24 57 -82 -47) -82]
Test Case: 586 | Input/Output: [(60 95 -41 -52) -52]
Test Case: 587 | Input/Output: [(-65 94 28 18) -65]
Test Case: 588 | Input/Output: [(-27 -89 44 14) -89]
Test Case: 589 | Input/Output: [(-46 43 -1 -2) -46]
Test Case: 590 | Input/Output: [(7 51 -77 -83) -83]
Test Case: 591 | Input/Output: [(80 37 0 -26) -26]
Test Case: 592 | Input/Output: [(-62 26 2 63) -62]
Test Case: 593 | Input/Output: [(100 89 68 16) 16]
Test Case: 594 | Input/Output: [(-48 -54 -85 -78) -85]
Test Case: 595 | Input/Output: [(-14 -74 4 -16) -74]
Test Case: 596 | Input/Output: [(-19 -44 53 57) -44]
Test Case: 597 | Input/Output: [(-96 -16 -92 -36) -96]
Test Case: 598 | Input/Output: [(-76 -60 -42 -43) -76]
Test Case: 599 | Input/Output: [(-75 63 -27 8) -75]
Test Case: 600 | Input/Output: [(-31 2 82 96) -31]
Test Case: 601 | Input/Output: [(4 11 -74 -27) -74]
Test Case: 602 | Input/Output: [(14 -44 -39 -68) -68]
Test Case: 603 | Input/Output: [(-11 -34 -52 6) -52]
Test Case: 604 | Input/Output: [(-83 18 -97 -20) -97]
Test Case: 605 | Input/Output: [(-89 -42 -45 -6) -89]
Test Case: 606 | Input/Output: [(-54 -92 -46 -35) -92]
Test Case: 607 | Input/Output: [(32 -59 92 -2) -59]
Test Case: 608 | Input/Output: [(9 -88 58 -52) -88]
Test Case: 609 | Input/Output: [(-87 31 -13 34) -87]
Test Case: 610 | Input/Output: [(38 -21 -31 13) -31]
Test Case: 611 | Input/Output: [(-37 -8 66 13) -37]
Test Case: 612 | Input/Output: [(25 22 100 7) 7]
Test Case: 613 | Input/Output: [(-19 56 -75 54) -75]
Test Case: 614 | Input/Output: [(72 -20 46 40) -20]
Test Case: 615 | Input/Output: [(-93 -51 6 -80) -93]
Test Case: 616 | Input/Output: [(26 11 87 86) 11]
Test Case: 617 | Input/Output: [(4 34 13 -15) -15]
Test Case: 618 | Input/Output: [(20 90 -43 84) -43]
Test Case: 619 | Input/Output: [(74 0 82 -46) -46]
Test Case: 620 | Input/Output: [(61 23 -54 92) -54]
Test Case: 621 | Input/Output: [(38 44 -16 -97) -97]
Test Case: 622 | Input/Output: [(-3 -43 -32 -68) -68]
Test Case: 623 | Input/Output: [(-82 -10 -9 48) -82]
Test Case: 624 | Input/Output: [(62 95 58 -77) -77]
Test Case: 625 | Input/Output: [(46 -7 -27 -48) -48]
Test Case: 626 | Input/Output: [(-27 96 -96 -57) -96]
Test Case: 627 | Input/Output: [(-51 78 18 -5) -51]
Test Case: 628 | Input/Output: [(30 -43 -86 -83) -86]
Test Case: 629 | Input/Output: [(-69 -11 -55 -6) -69]
Test Case: 630 | Input/Output: [(-54 27 58 -12) -54]
Test Case: 631 | Input/Output: [(53 12 -31 24) -31]
Test Case: 632 | Input/Output: [(-73 -82 30 -99) -99]
Test Case: 633 | Input/Output: [(94 -11 -9 8) -11]
Test Case: 634 | Input/Output: [(-90 -76 -1 -60) -90]
Test Case: 635 | Input/Output: [(25 -7 -48 18) -48]
Test Case: 636 | Input/Output: [(-66 99 -92 36) -92]
Test Case: 637 | Input/Output: [(-77 -99 -91 2) -99]
Test Case: 638 | Input/Output: [(13 18 -13 -86) -86]
Test Case: 639 | Input/Output: [(-92 99 -75 91) -92]
Test Case: 640 | Input/Output: [(-49 -79 -71 -97) -97]
Test Case: 641 | Input/Output: [(-80 -57 -7 -5) -80]
Test Case: 642 | Input/Output: [(-53 74 94 -46) -53]
Test Case: 643 | Input/Output: [(62 31 -70 -96) -96]
Test Case: 644 | Input/Output: [(77 6 -92 39) -92]
Test Case: 645 | Input/Output: [(96 -81 29 -26) -81]
Test Case: 646 | Input/Output: [(-37 -52 -97 14) -97]
Test Case: 647 | Input/Output: [(-39 -82 -87 62) -87]
Test Case: 648 | Input/Output: [(11 -79 -14 54) -79]
Test Case: 649 | Input/Output: [(-93 72 84 -95) -95]
Test Case: 650 | Input/Output: [(75 -49 19 -92) -92]
Test Case: 651 | Input/Output: [(-2 -57 68 -31) -57]
Test Case: 652 | Input/Output: [(-21 84 -38 -32) -38]
Test Case: 653 | Input/Output: [(48 64 7 62) 7]
Test Case: 654 | Input/Output: [(66 -80 98 -1) -80]
Test Case: 655 | Input/Output: [(80 -14 13 -40) -40]
Test Case: 656 | Input/Output: [(41 -84 27 -87) -87]
Test Case: 657 | Input/Output: [(-42 15 -20 61) -42]
Test Case: 658 | Input/Output: [(33 14 81 -20) -20]
Test Case: 659 | Input/Output: [(-56 89 -38 -67) -67]
Test Case: 660 | Input/Output: [(95 62 -24 18) -24]
Test Case: 661 | Input/Output: [(-44 -1 62 -35) -44]
Test Case: 662 | Input/Output: [(89 43 -25 -25) -25]
Test Case: 663 | Input/Output: [(-62 -56 44 -31) -62]
Test Case: 664 | Input/Output: [(92 -58 3 5) -58]
Test Case: 665 | Input/Output: [(65 -54 -69 -63) -69]
Test Case: 666 | Input/Output: [(76 87 -47 21) -47]
Test Case: 667 | Input/Output: [(89 93 25 -39) -39]
Test Case: 668 | Input/Output: [(58 -45 -53 -4) -53]
Test Case: 669 | Input/Output: [(-90 -6 24 -53) -90]
Test Case: 670 | Input/Output: [(86 35 18 86) 18]
Test Case: 671 | Input/Output: [(-55 97 100 -88) -88]
Test Case: 672 | Input/Output: [(-8 -60 -43 60) -60]
Test Case: 673 | Input/Output: [(-73 18 -28 21) -73]
Test Case: 674 | Input/Output: [(-44 98 27 98) -44]
Test Case: 675 | Input/Output: [(-27 60 -82 -32) -82]
Test Case: 676 | Input/Output: [(-9 36 66 61) -9]
Test Case: 677 | Input/Output: [(48 8 53 23) 8]
Test Case: 678 | Input/Output: [(-48 83 -89 24) -89]
Test Case: 679 | Input/Output: [(-29 -4 9 -82) -82]
Test Case: 680 | Input/Output: [(-8 -32 -67 -56) -67]
Test Case: 681 | Input/Output: [(-55 -46 -80 69) -80]
Test Case: 682 | Input/Output: [(-25 67 -54 29) -54]
Test Case: 683 | Input/Output: [(95 22 -3 -92) -92]
Test Case: 684 | Input/Output: [(-85 60 -17 -64) -85]
Test Case: 685 | Input/Output: [(8 29 82 -5) -5]
Test Case: 686 | Input/Output: [(-40 60 -34 26) -40]
Test Case: 687 | Input/Output: [(-31 -49 71 -100) -100]
Test Case: 688 | Input/Output: [(-77 25 -28 -60) -77]
Test Case: 689 | Input/Output: [(34 49 60 -29) -29]
Test Case: 690 | Input/Output: [(82 -81 -87 37) -87]
Test Case: 691 | Input/Output: [(71 50 78 79) 50]
Test Case: 692 | Input/Output: [(99 -59 34 -10) -59]
Test Case: 693 | Input/Output: [(30 55 3 48) 3]
Test Case: 694 | Input/Output: [(41 91 3 -16) -16]
Test Case: 695 | Input/Output: [(-85 33 63 31) -85]
Test Case: 696 | Input/Output: [(-37 51 -30 -82) -82]
Test Case: 697 | Input/Output: [(-48 -66 -36 48) -66]
Test Case: 698 | Input/Output: [(70 1 2 41) 1]
Test Case: 699 | Input/Output: [(-98 11 30 -92) -98]
Test Case: 700 | Input/Output: [(-90 75 78 -50) -90]
Test Case: 701 | Input/Output: [(6 -35 76 -20) -35]
Test Case: 702 | Input/Output: [(-65 33 -3 -77) -77]
Test Case: 703 | Input/Output: [(-48 -93 7 4) -93]
Test Case: 704 | Input/Output: [(78 -41 -42 73) -42]
Test Case: 705 | Input/Output: [(20 -2 67 59) -2]
Test Case: 706 | Input/Output: [(58 67 -19 -1) -19]
Test Case: 707 | Input/Output: [(-54 2 -6 92) -54]
Test Case: 708 | Input/Output: [(42 28 90 -81) -81]
Test Case: 709 | Input/Output: [(72 -66 81 -28) -66]
Test Case: 710 | Input/Output: [(17 -15 -84 76) -84]
Test Case: 711 | Input/Output: [(21 -35 -62 12) -62]
Test Case: 712 | Input/Output: [(-49 -34 -8 -97) -97]
Test Case: 713 | Input/Output: [(39 34 98 -30) -30]
Test Case: 714 | Input/Output: [(-3 40 -73 20) -73]
Test Case: 715 | Input/Output: [(-48 28 -40 -48) -48]
Test Case: 716 | Input/Output: [(53 85 25 94) 25]
Test Case: 717 | Input/Output: [(-89 80 -95 -42) -95]
Test Case: 718 | Input/Output: [(-33 24 99 43) -33]
Test Case: 719 | Input/Output: [(65 -48 -28 -64) -64]
Test Case: 720 | Input/Output: [(20 31 92 80) 20]
Test Case: 721 | Input/Output: [(32 68 -51 35) -51]
Test Case: 722 | Input/Output: [(63 33 19 51) 19]
Test Case: 723 | Input/Output: [(-55 -57 35 70) -57]
Test Case: 724 | Input/Output: [(46 -79 93 -71) -79]
Test Case: 725 | Input/Output: [(5 -12 3 -46) -46]
Test Case: 726 | Input/Output: [(83 -14 -30 8) -30]
Test Case: 727 | Input/Output: [(-98 60 65 70) -98]
Test Case: 728 | Input/Output: [(43 -49 -87 41) -87]
Test Case: 729 | Input/Output: [(37 -53 -93 -89) -93]
Test Case: 730 | Input/Output: [(16 82 -48 -88) -88]
Test Case: 731 | Input/Output: [(-14 11 -86 73) -86]
Test Case: 732 | Input/Output: [(-82 55 -58 -51) -82]
Test Case: 733 | Input/Output: [(83 62 -77 -16) -77]
Test Case: 734 | Input/Output: [(58 -86 41 -3) -86]
Test Case: 735 | Input/Output: [(-37 97 94 6) -37]
Test Case: 736 | Input/Output: [(-19 -30 -55 -94) -94]
Test Case: 737 | Input/Output: [(72 -89 49 77) -89]
Test Case: 738 | Input/Output: [(42 72 -6 40) -6]
Test Case: 739 | Input/Output: [(-43 64 38 -11) -43]
Test Case: 740 | Input/Output: [(-35 -45 86 -89) -89]
Test Case: 741 | Input/Output: [(-25 -63 62 -86) -86]
Test Case: 742 | Input/Output: [(-98 -83 -93 -85) -98]
Test Case: 743 | Input/Output: [(17 -97 76 -44) -97]
Test Case: 744 | Input/Output: [(14 -26 54 -78) -78]
Test Case: 745 | Input/Output: [(16 69 -76 26) -76]
Test Case: 746 | Input/Output: [(42 32 -41 100) -41]
Test Case: 747 | Input/Output: [(-22 -1 -44 24) -44]
Test Case: 748 | Input/Output: [(-9 100 -71 52) -71]
Test Case: 749 | Input/Output: [(18 -80 -24 88) -80]
Test Case: 750 | Input/Output: [(30 45 -44 92) -44]
Test Case: 751 | Input/Output: [(26 -43 -71 15) -71]
Test Case: 752 | Input/Output: [(100 -55 83 98) -55]
Test Case: 753 | Input/Output: [(64 70 -18 -69) -69]
Test Case: 754 | Input/Output: [(-56 87 42 21) -56]
Test Case: 755 | Input/Output: [(29 -66 6 37) -66]
Test Case: 756 | Input/Output: [(32 89 53 14) 14]
Test Case: 757 | Input/Output: [(-55 -2 57 40) -55]
Test Case: 758 | Input/Output: [(-20 -59 -4 -62) -62]
Test Case: 759 | Input/Output: [(-45 -82 -81 4) -82]
Test Case: 760 | Input/Output: [(-14 8 -96 57) -96]
Test Case: 761 | Input/Output: [(42 -100 -9 14) -100]
Test Case: 762 | Input/Output: [(35 33 -93 -52) -93]
Test Case: 763 | Input/Output: [(-48 97 -9 -2) -48]
Test Case: 764 | Input/Output: [(-91 -31 52 -33) -91]
Test Case: 765 | Input/Output: [(-80 3 59 7) -80]
Test Case: 766 | Input/Output: [(-15 84 82 -32) -32]
Test Case: 767 | Input/Output: [(50 -11 -55 4) -55]
Test Case: 768 | Input/Output: [(-60 34 -92 -38) -92]
Test Case: 769 | Input/Output: [(24 36 75 22) 22]
Test Case: 770 | Input/Output: [(42 -63 98 -100) -100]
Test Case: 771 | Input/Output: [(4 30 -92 6) -92]
Test Case: 772 | Input/Output: [(-83 -81 -93 31) -93]
Test Case: 773 | Input/Output: [(1 -79 -11 38) -79]
Test Case: 774 | Input/Output: [(-52 -38 5 35) -52]
Test Case: 775 | Input/Output: [(-68 100 -90 14) -90]
Test Case: 776 | Input/Output: [(96 60 -86 -88) -88]
Test Case: 777 | Input/Output: [(-38 50 -96 -14) -96]
Test Case: 778 | Input/Output: [(-2 -80 -55 -89) -89]
Test Case: 779 | Input/Output: [(69 46 71 60) 46]
Test Case: 780 | Input/Output: [(59 -75 47 10) -75]
Test Case: 781 | Input/Output: [(23 88 44 -88) -88]
Test Case: 782 | Input/Output: [(-26 -78 -29 -23) -78]
Test Case: 783 | Input/Output: [(44 -95 -15 25) -95]
Test Case: 784 | Input/Output: [(-84 -35 22 -56) -84]
Test Case: 785 | Input/Output: [(-96 -22 -87 96) -96]
Test Case: 786 | Input/Output: [(-76 -6 85 -41) -76]
Test Case: 787 | Input/Output: [(25 60 11 62) 11]
Test Case: 788 | Input/Output: [(-72 80 -98 -27) -98]
Test Case: 789 | Input/Output: [(2 82 -74 -78) -78]
Test Case: 790 | Input/Output: [(-33 -86 19 -97) -97]
Test Case: 791 | Input/Output: [(55 -4 76 -25) -25]
Test Case: 792 | Input/Output: [(-11 -20 -25 -98) -98]
Test Case: 793 | Input/Output: [(-25 -69 72 -85) -85]
Test Case: 794 | Input/Output: [(-39 -12 -76 -58) -76]
Test Case: 795 | Input/Output: [(88 -59 -75 -87) -87]
Test Case: 796 | Input/Output: [(63 99 38 -51) -51]
Test Case: 797 | Input/Output: [(47 56 35 -59) -59]
Test Case: 798 | Input/Output: [(-19 11 65 59) -19]
Test Case: 799 | Input/Output: [(-70 93 5 -86) -86]
Test Case: 800 | Input/Output: [(76 73 39 -84) -84]
Test Case: 801 | Input/Output: [(-26 -10 96 98) -26]
Test Case: 802 | Input/Output: [(-73 78 -72 -46) -73]
Test Case: 803 | Input/Output: [(-4 -61 -74 -4) -74]
Test Case: 804 | Input/Output: [(8 -58 -81 -36) -81]
Test Case: 805 | Input/Output: [(-47 -10 9 71) -47]
Test Case: 806 | Input/Output: [(49 84 63 -49) -49]
Test Case: 807 | Input/Output: [(99 -98 -80 -32) -98]
Test Case: 808 | Input/Output: [(33 -39 17 64) -39]
Test Case: 809 | Input/Output: [(-19 -50 -46 66) -50]
Test Case: 810 | Input/Output: [(-19 15 65 10) -19]
Test Case: 811 | Input/Output: [(34 -49 83 71) -49]
Test Case: 812 | Input/Output: [(82 20 88 -93) -93]
Test Case: 813 | Input/Output: [(36 -68 -3 -71) -71]
Test Case: 814 | Input/Output: [(-2 44 63 62) -2]
Test Case: 815 | Input/Output: [(10 -46 -56 55) -56]
Test Case: 816 | Input/Output: [(-61 50 91 -12) -61]
Test Case: 817 | Input/Output: [(90 -83 -71 57) -83]
Test Case: 818 | Input/Output: [(57 -97 -46 14) -97]
Test Case: 819 | Input/Output: [(-71 -70 74 83) -71]
Test Case: 820 | Input/Output: [(0 2 88 42) 0]
Test Case: 821 | Input/Output: [(-82 -95 -12 13) -95]
Test Case: 822 | Input/Output: [(19 95 47 59) 19]
Test Case: 823 | Input/Output: [(77 78 -11 87) -11]
Test Case: 824 | Input/Output: [(57 -51 -60 -39) -60]
Test Case: 825 | Input/Output: [(-85 -9 -95 -79) -95]
Test Case: 826 | Input/Output: [(-73 -46 -99 -64) -99]
Test Case: 827 | Input/Output: [(-8 81 65 6) -8]
Test Case: 828 | Input/Output: [(98 -61 66 -60) -61]
Test Case: 829 | Input/Output: [(39 81 -11 83) -11]
Test Case: 830 | Input/Output: [(62 76 -77 -40) -77]
Test Case: 831 | Input/Output: [(-37 34 41 -70) -70]
Test Case: 832 | Input/Output: [(65 -46 -11 6) -46]
Test Case: 833 | Input/Output: [(-75 -73 19 -16) -75]
Test Case: 834 | Input/Output: [(-66 13 -84 -66) -84]
Test Case: 835 | Input/Output: [(41 -28 51 -29) -29]
Test Case: 836 | Input/Output: [(86 -93 -53 88) -93]
Test Case: 837 | Input/Output: [(-52 -22 85 -30) -52]
Test Case: 838 | Input/Output: [(47 13 37 94) 13]
Test Case: 839 | Input/Output: [(-36 -76 9 -99) -99]
Test Case: 840 | Input/Output: [(-71 65 -33 30) -71]
Test Case: 841 | Input/Output: [(50 -90 79 -5) -90]
Test Case: 842 | Input/Output: [(-57 3 100 -1) -57]
Test Case: 843 | Input/Output: [(-45 40 23 -46) -46]
Test Case: 844 | Input/Output: [(-5 10 80 -28) -28]
Test Case: 845 | Input/Output: [(-30 -61 -40 57) -61]
Test Case: 846 | Input/Output: [(77 25 46 -79) -79]
Test Case: 847 | Input/Output: [(32 -8 14 6) -8]
Test Case: 848 | Input/Output: [(15 77 -35 99) -35]
Test Case: 849 | Input/Output: [(48 -4 91 -71) -71]
Test Case: 850 | Input/Output: [(-72 62 20 17) -72]
Test Case: 851 | Input/Output: [(52 9 -57 -83) -83]
Test Case: 852 | Input/Output: [(-12 58 -28 26) -28]
Test Case: 853 | Input/Output: [(-56 -94 24 -40) -94]
Test Case: 854 | Input/Output: [(72 -53 -24 3) -53]
Test Case: 855 | Input/Output: [(-59 -81 33 33) -81]
Test Case: 856 | Input/Output: [(47 90 3 -46) -46]
Test Case: 857 | Input/Output: [(82 -25 -100 -58) -100]
Test Case: 858 | Input/Output: [(72 -94 -85 -44) -94]
Test Case: 859 | Input/Output: [(56 -28 83 21) -28]
Test Case: 860 | Input/Output: [(80 24 89 99) 24]
Test Case: 861 | Input/Output: [(-23 74 100 -32) -32]
Test Case: 862 | Input/Output: [(78 -47 -73 23) -73]
Test Case: 863 | Input/Output: [(94 -38 13 57) -38]
Test Case: 864 | Input/Output: [(-78 11 -29 78) -78]
Test Case: 865 | Input/Output: [(50 52 -25 -81) -81]
Test Case: 866 | Input/Output: [(-54 5 29 21) -54]
Test Case: 867 | Input/Output: [(-81 -17 75 39) -81]
Test Case: 868 | Input/Output: [(24 -36 88 3) -36]
Test Case: 869 | Input/Output: [(-23 76 59 -37) -37]
Test Case: 870 | Input/Output: [(-87 -86 -65 48) -87]
Test Case: 871 | Input/Output: [(88 -22 -48 6) -48]
Test Case: 872 | Input/Output: [(-65 30 44 -9) -65]
Test Case: 873 | Input/Output: [(57 21 -85 -95) -95]
Test Case: 874 | Input/Output: [(-27 -38 -41 100) -41]
Test Case: 875 | Input/Output: [(-32 -25 61 -22) -32]
Test Case: 876 | Input/Output: [(44 91 1 96) 1]
Test Case: 877 | Input/Output: [(18 38 9 3) 3]
Test Case: 878 | Input/Output: [(71 79 -5 24) -5]
Test Case: 879 | Input/Output: [(4 -19 -6 77) -19]
Test Case: 880 | Input/Output: [(0 0 -88 -46) -88]
Test Case: 881 | Input/Output: [(-77 -33 16 31) -77]
Test Case: 882 | Input/Output: [(-51 -52 49 -10) -52]
Test Case: 883 | Input/Output: [(6 27 -37 -26) -37]
Test Case: 884 | Input/Output: [(28 -61 92 -74) -74]
Test Case: 885 | Input/Output: [(51 -66 -38 -11) -66]
Test Case: 886 | Input/Output: [(72 47 -49 92) -49]
Test Case: 887 | Input/Output: [(22 -3 11 67) -3]
Test Case: 888 | Input/Output: [(38 -75 -5 -93) -93]
Test Case: 889 | Input/Output: [(-98 -73 90 56) -98]
Test Case: 890 | Input/Output: [(35 -60 -50 23) -60]
Test Case: 891 | Input/Output: [(-6 61 31 48) -6]
Test Case: 892 | Input/Output: [(38 77 -76 67) -76]
Test Case: 893 | Input/Output: [(-15 37 26 83) -15]
Test Case: 894 | Input/Output: [(2 75 71 57) 2]
Test Case: 895 | Input/Output: [(6 -26 -12 -92) -92]
Test Case: 896 | Input/Output: [(29 51 -24 -22) -24]
Test Case: 897 | Input/Output: [(-24 81 77 17) -24]
Test Case: 898 | Input/Output: [(-54 -66 -20 -69) -69]
Test Case: 899 | Input/Output: [(-3 61 -22 -51) -51]
Test Case: 900 | Input/Output: [(84 71 -46 -76) -76]
Test Case: 901 | Input/Output: [(-72 59 16 41) -72]
Test Case: 902 | Input/Output: [(-35 -62 -8 21) -62]
Test Case: 903 | Input/Output: [(-79 -42 -60 -61) -79]
Test Case: 904 | Input/Output: [(-75 -71 64 -10) -75]
Test Case: 905 | Input/Output: [(56 -25 -56 69) -56]
Test Case: 906 | Input/Output: [(76 86 51 -97) -97]
Test Case: 907 | Input/Output: [(72 -8 -55 -16) -55]
Test Case: 908 | Input/Output: [(12 -25 -93 -95) -95]
Test Case: 909 | Input/Output: [(60 -49 78 75) -49]
Test Case: 910 | Input/Output: [(-69 96 52 -19) -69]
Test Case: 911 | Input/Output: [(-25 -65 -27 -55) -65]
Test Case: 912 | Input/Output: [(-92 92 -6 92) -92]
Test Case: 913 | Input/Output: [(-5 32 16 -34) -34]
Test Case: 914 | Input/Output: [(-31 -49 91 7) -49]
Test Case: 915 | Input/Output: [(-78 -46 61 -82) -82]
Test Case: 916 | Input/Output: [(-25 -46 94 32) -46]
Test Case: 917 | Input/Output: [(35 -1 39 -2) -2]
Test Case: 918 | Input/Output: [(-23 8 -2 -8) -23]
Test Case: 919 | Input/Output: [(-62 -43 -38 88) -62]
Test Case: 920 | Input/Output: [(-76 -81 -50 83) -81]
Test Case: 921 | Input/Output: [(42 -13 -58 -68) -68]
Test Case: 922 | Input/Output: [(-97 38 31 54) -97]
Test Case: 923 | Input/Output: [(77 23 42 40) 23]
Test Case: 924 | Input/Output: [(73 83 -84 -63) -84]
Test Case: 925 | Input/Output: [(37 -68 -56 -71) -71]
Test Case: 926 | Input/Output: [(17 33 -73 49) -73]
Test Case: 927 | Input/Output: [(-49 -22 -72 5) -72]
Test Case: 928 | Input/Output: [(-18 51 81 100) -18]
Test Case: 929 | Input/Output: [(-3 -28 62 93) -28]
Test Case: 930 | Input/Output: [(85 77 -31 70) -31]
Test Case: 931 | Input/Output: [(16 50 50 -92) -92]
Test Case: 932 | Input/Output: [(-11 4 -72 10) -72]
Test Case: 933 | Input/Output: [(80 38 0 -2) -2]
Test Case: 934 | Input/Output: [(-50 7 79 -52) -52]
Test Case: 935 | Input/Output: [(-58 75 72 -100) -100]
Test Case: 936 | Input/Output: [(-35 43 -44 15) -44]
Test Case: 937 | Input/Output: [(-79 -55 60 33) -79]
Test Case: 938 | Input/Output: [(-47 -52 -39 27) -52]
Test Case: 939 | Input/Output: [(71 92 96 36) 36]
Test Case: 940 | Input/Output: [(92 -82 6 -36) -82]
Test Case: 941 | Input/Output: [(61 22 99 -26) -26]
Test Case: 942 | Input/Output: [(-97 75 88 10) -97]
Test Case: 943 | Input/Output: [(-21 67 0 3) -21]
Test Case: 944 | Input/Output: [(-62 64 -83 -57) -83]
Test Case: 945 | Input/Output: [(-28 89 31 -11) -28]
Test Case: 946 | Input/Output: [(43 99 -95 75) -95]
Test Case: 947 | Input/Output: [(52 -17 1 -26) -26]
Test Case: 948 | Input/Output: [(73 3 8 25) 3]
Test Case: 949 | Input/Output: [(-68 12 -44 -83) -83]
Test Case: 950 | Input/Output: [(-54 20 4 13) -54]
Test Case: 951 | Input/Output: [(-96 1 98 -55) -96]
Test Case: 952 | Input/Output: [(6 -76 -16 65) -76]
Test Case: 953 | Input/Output: [(-36 74 -9 -3) -36]
Test Case: 954 | Input/Output: [(90 -48 34 32) -48]
Test Case: 955 | Input/Output: [(-47 -14 -12 -76) -76]
Test Case: 956 | Input/Output: [(-80 61 85 76) -80]
Test Case: 957 | Input/Output: [(-38 86 -13 -38) -38]
Test Case: 958 | Input/Output: [(-21 -51 2 94) -51]
Test Case: 959 | Input/Output: [(86 18 -50 -56) -56]
Test Case: 960 | Input/Output: [(10 -47 52 45) -47]
Test Case: 961 | Input/Output: [(-86 -51 -70 46) -86]
Test Case: 962 | Input/Output: [(47 -92 55 3) -92]
Test Case: 963 | Input/Output: [(-47 -7 40 90) -47]
Test Case: 964 | Input/Output: [(94 90 34 95) 34]
Test Case: 965 | Input/Output: [(52 -46 -96 -53) -96]
Test Case: 966 | Input/Output: [(-30 100 2 17) -30]
Test Case: 967 | Input/Output: [(-45 -91 23 -18) -91]
Test Case: 968 | Input/Output: [(49 -70 -15 -55) -70]
Test Case: 969 | Input/Output: [(18 70 62 -73) -73]
Test Case: 970 | Input/Output: [(-32 -47 57 64) -47]
Test Case: 971 | Input/Output: [(4 62 -14 75) -14]
Test Case: 972 | Input/Output: [(-92 -96 -15 -39) -96]
Test Case: 973 | Input/Output: [(-15 53 100 -94) -94]
Test Case: 974 | Input/Output: [(-55 11 -75 -59) -75]
Test Case: 975 | Input/Output: [(-28 76 37 94) -28]
Test Case: 976 | Input/Output: [(-57 86 -19 20) -57]
Test Case: 977 | Input/Output: [(-99 99 -58 -34) -99]
Test Case: 978 | Input/Output: [(29 -49 -49 20) -49]
Test Case: 979 | Input/Output: [(14 -96 58 -11) -96]
Test Case: 980 | Input/Output: [(-64 6 85 -13) -64]
Test Case: 981 | Input/Output: [(-46 -31 38 38) -46]
Test Case: 982 | Input/Output: [(-31 82 -48 -68) -68]
Test Case: 983 | Input/Output: [(-15 -79 -95 66) -95]
Test Case: 984 | Input/Output: [(-85 -6 0 -1) -85]
Test Case: 985 | Input/Output: [(36 63 -48 -84) -84]
Test Case: 986 | Input/Output: [(58 52 88 -50) -50]
Test Case: 987 | Input/Output: [(70 4 -55 25) -55]
Test Case: 988 | Input/Output: [(38 54 79 7) 7]
Test Case: 989 | Input/Output: [(-72 24 -8 -93) -93]
Test Case: 990 | Input/Output: [(45 -20 1 24) -20]
Test Case: 991 | Input/Output: [(44 -66 -33 19) -66]
Test Case: 992 | Input/Output: [(-70 -85 81 9) -85]
Test Case: 993 | Input/Output: [(-76 -97 21 -16) -97]
Test Case: 994 | Input/Output: [(-95 90 58 -31) -95]
Test Case: 995 | Input/Output: [(-58 43 -2 79) -58]
Test Case: 996 | Input/Output: [(30 -32 59 -71) -71]
Test Case: 997 | Input/Output: [(-44 36 2 -87) -87]
Test Case: 998 | Input/Output: [(-55 -55 -61 85) -61]
Test Case: 999 | Input/Output: [(-92 -91 12 -20) -92]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 35 -12 -52 -67 88 33 1 -64 -118 -74 123 47 101 80 77 126
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-70 -70 -70 -39] -70] [[-79 -79 -40 -79] -79] [[13 57 57 57] 13] [[56 56 56 -59] -59] [[-95 -95 -95 26] -95] [[-45 79 79 79] -45] [[-50 21 21 21] -50] [[51 51 72 51] 51] [[-69 -69 68 -69] -69] [[61 -100 -100 -100] -100] [(-73 -73 -73 -73) -73] [(85 85 85 85) 85] [(-58 -58 -58 -58) -58] [(10 10 10 10) 10] [(-13 -13 -13 -13) -13] [(61 36 24 70) 24] [(95 44 7 80) 7] [(27 59 33 77) 27] [(27 97 45 40) 27] [(70 36 47 39) 36] [(30 92 11 93) 11] [(99 88 32 24) 24] [(86 24 37 100) 24] [(48 22 79 18) 18] [(29 85 43 31) 29] [(62 16 61 50) 16] [(44 43 99 35) 35] [(70 54 48 95) 48] [(81 89 28 88) 28] [(49 27 15 91) 15] [(6 53 71 95) 6] [(84 56 22 97) 22] [(63 65 99 81) 63] [(41 32 70 62) 32] [(12 27 35 6) 6] [(65 30 43 -28) -28] [(45 -6 -98 24) -98] [(78 32 68 2) 2] [(44 97 97 -18) -18] [(53 74 97 91) 53] [(-39 7 73 51) -39] [(-67 69 -83 -64) -83] [(94 36 10 -63) -63] [(-27 43 11 -97) -97] [(19 79 36 56) 19] [(97 -87 27 84) -87] [(9 -85 54 -65) -85] [(-6 75 -11 -82) -82] [(79 -38 28 71) -38] [(-84 -60 -55 -12) -84] [(57 -12 -47 16) -47] [(71 29 -96 -59) -96] [(-84 -24 -47 -45) -84] [(-8 46 1 -1) -8] [(-23 24 72 28) -23] [(56 30 -29 47) -29] [(-46 -66 -23 -82) -82] [(-72 -7 -8 10) -72] [(-86 61 60 17) -86] [(95 -33 80 28) -33] [(65 -38 -93 -56) -93] [(91 -39 -21 6) -39] [(97 15 -33 -73) -73] [(51 -20 -69 -55) -69] [(71 -32 -52 -34) -52] [(-48 -93 88 82) -93] [(51 -65 -84 -87) -87] [(-41 60 -100 26) -100] [(-2 -79 -52 99) -79] [(-90 76 40 39) -90] [(16 -45 9 28) -45] [(-4 96 60 35) -4] [(-31 100 -40 -17) -40] [(35 -84 19 -42) -84] [(60 100 -62 52) -62] [(63 3 64 -12) -12] [(-10 -36 -56 34) -56] [(36 94 -42 -92) -92] [(-72 93 -43 1) -72] [(16 43 86 95) 16] [(-72 65 -76 74) -76] [(7 68 63 62) 7] [(30 76 -100 13) -100] [(-88 2 43 -75) -88] [(-35 45 41 -95) -95] [(-97 95 -97 -16) -97] [(-18 -80 27 -36) -80] [(-78 1 -13 -70) -78] [(-4 -71 92 47) -71] [(-81 -42 61 -81) -81] [(-33 70 16 -51) -51] [(-47 -2 -5 70) -47] [(-19 97 32 -53) -53] [(-82 -91 -71 44) -91] [(-7 -88 51 97) -88])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
Correct output: -59                 | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: 61                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 61                 
Correct output: 7                   | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 36                  | Program output: 70                 
Correct output: 11                  | Program output: 30                 
Correct output: 24                  | Program output: 99                 
Correct output: 24                  | Program output: 86                 
Correct output: 18                  | Program output: 48                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 62                 
Correct output: 35                  | Program output: 44                 
Correct output: 48                  | Program output: 70                 
Correct output: 28                  | Program output: 81                 
Correct output: 15                  | Program output: 49                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 84                 
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 41                 
Correct output: 6                   | Program output: 12                 
Correct output: -28                 | Program output: 65                 
Correct output: -98                 | Program output: 45                 
Correct output: 2                   | Program output: 78                 
Correct output: -18                 | Program output: 44                 
Correct output: 53                  | Program output: 53                 
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -67                
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: -27                
Correct output: 19                  | Program output: 19                 
Correct output: -87                 | Program output: 97                 
Correct output: -85                 | Program output: 9                  
Correct output: -82                 | Program output: -6                 
Correct output: -38                 | Program output: 79                 
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: 57                 
Correct output: -96                 | Program output: 71                 
Correct output: -84                 | Program output: -84                
Correct output: -8                  | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -29                 | Program output: 56                 
Correct output: -82                 | Program output: -46                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -33                 | Program output: 95                 
Correct output: -93                 | Program output: 65                 
Correct output: -39                 | Program output: 91                 
Correct output: -73                 | Program output: 97                 
Correct output: -69                 | Program output: 51                 
Correct output: -52                 | Program output: 71                 
Correct output: -93                 | Program output: -48                
Correct output: -87                 | Program output: 51                 
Correct output: -100                | Program output: -41                
Correct output: -79                 | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -45                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -31                
Correct output: -84                 | Program output: 35                 
Correct output: -62                 | Program output: 60                 
Correct output: -12                 | Program output: 63                 
Correct output: -56                 | Program output: -10                
Correct output: -92                 | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 16                  | Program output: 16                 
Correct output: -76                 | Program output: -72                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: 30                 
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -53                 | Program output: -19                
Correct output: -91                 | Program output: -82                
Correct output: -88                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_boolean_537} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_exec_493} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not})
Lexicase best program: (boolean_swap exec_dup (boolean_yankdup boolean_dup_times) exec_do*times () exec_y_when_autoconstructing () exec_dup_items integer_fromboolean exec_do*range (boolean_and boolean_invert_first_then_and boolean_xor exec_stackdepth exec_noop integer_flush exec_dup_times (integer_dec boolean_empty exec_dup_items integer_inc) exec_do*while ()) integer_max exec_eq in2 boolean_yank integer_dup_items boolean_yank in1 print_integer boolean_dup integer_div exec_s (boolean_dup integer_fromboolean exec_do*times () integer_inc) (exec_rot (integer_flush boolean_eq integer_inc exec_dup_items exec_shove () in2 boolean_pop integer_yankdup exec_yank boolean_dup_times) (exec_y_when_autoconstructing (exec_empty) exec_noop exec_do*times (boolean_or integer_inc exec_pop (print_boolean integer_stackdepth print_exec (integer_dup) print_boolean integer_stackdepth) exec_rot (integer_rot) (boolean_flush) (integer_gt boolean_invert_second_then_and -3 exec_eq integer_eq tag_boolean_537 integer_stackdepth) boolean_flush integer_rot integer_dup_times boolean_stackdepth exec_eq boolean_stackdepth exec_stackdepth tag_exec_493 (integer_empty boolean_shove exec_yank exec_eq integer_stackdepth) boolean_dup_items integer_yank exec_noop boolean_and) boolean_frominteger exec_do*range (exec_empty) boolean_pop) (boolean_swap) integer_gt) (boolean_dup exec_y () boolean_not))
Lexicase best errors: [0 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 121
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_boolean_537} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_exec_493} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not})
Zero cases best program: (boolean_swap exec_dup (boolean_yankdup boolean_dup_times) exec_do*times () exec_y_when_autoconstructing () exec_dup_items integer_fromboolean exec_do*range (boolean_and boolean_invert_first_then_and boolean_xor exec_stackdepth exec_noop integer_flush exec_dup_times (integer_dec boolean_empty exec_dup_items integer_inc) exec_do*while ()) integer_max exec_eq in2 boolean_yank integer_dup_items boolean_yank in1 print_integer boolean_dup integer_div exec_s (boolean_dup integer_fromboolean exec_do*times () integer_inc) (exec_rot (integer_flush boolean_eq integer_inc exec_dup_items exec_shove () in2 boolean_pop integer_yankdup exec_yank boolean_dup_times) (exec_y_when_autoconstructing (exec_empty) exec_noop exec_do*times (boolean_or integer_inc exec_pop (print_boolean integer_stackdepth print_exec (integer_dup) print_boolean integer_stackdepth) exec_rot (integer_rot) (boolean_flush) (integer_gt boolean_invert_second_then_and -3 exec_eq integer_eq tag_boolean_537 integer_stackdepth) boolean_flush integer_rot integer_dup_times boolean_stackdepth exec_eq boolean_stackdepth exec_stackdepth tag_exec_493 (integer_empty boolean_shove exec_yank exec_eq integer_stackdepth) boolean_dup_items integer_yank exec_noop boolean_and) boolean_frominteger exec_do*range (exec_empty) boolean_pop) (boolean_swap) integer_gt) (boolean_dup exec_y () boolean_not))
Zero cases best errors: [0 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 121
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 3 3 2 5 2 3 2 4 4)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (9 3 3 2 5 2 3 2 4 4)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -60} {:close 0, :instruction 6} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range})
Best program: (boolean_eq boolean_dup_items boolean_swap exec_eq boolean_shove exec_eq integer_pop integer_div exec_dup_times (in1) integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq boolean_and exec_flush boolean_yank boolean_yankdup integer_gt integer_div boolean_invert_first_then_and boolean_empty boolean_stackdepth) (-60 6 exec_do*times (integer_div) exec_do*count (exec_s_when_autoconstructing () () (in3 integer_lte boolean_swap print_integer integer_gt exec_shove (exec_pop (integer_sub)) integer_fromboolean boolean_yank) exec_k_when_autoconstructing (exec_noop exec_k_when_autoconstructing (exec_empty boolean_yankdup in3 boolean_rot boolean_empty exec_do*range () integer_swap exec_empty boolean_eq integer_max integer_gte exec_yankdup) (integer_min exec_s_when_autoconstructing (integer_rot print_boolean exec_do*range ()) () ())) ())))))
Errors: [0 1 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 79
Size: 107
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 9.963
Median total errors in population: 10
Error averages by case: (0.991 0.997 0.997 0.998 0.995 0.998 0.997 0.998 0.996 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.706
Average program size in population (points): 69.562
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 468647
--- Timings ---
Current time: 1559314588369 milliseconds
Total Time:           2.0 seconds
Initialization:       0.1 seconds,  5.3%
Reproduction:         0.8 seconds, 38.5%
Fitness Testing:      1.2 seconds, 56.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -70                 | Program output: -39                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 57                 
Correct output: -59                 | Program output: -59                
Correct output: -95                 | Program output: 26                 
Correct output: -45                 | Program output: 79                 
Correct output: -50                 | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 70                 
Correct output: 7                   | Program output: 80                 
Correct output: 27                  | Program output: 77                 
Correct output: 27                  | Program output: 40                 
Correct output: 36                  | Program output: 39                 
Correct output: 11                  | Program output: 93                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: 29                  | Program output: 31                 
Correct output: 16                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 48                  | Program output: 95                 
Correct output: 28                  | Program output: 88                 
Correct output: 15                  | Program output: 91                 
Correct output: 6                   | Program output: 95                 
Correct output: 22                  | Program output: 97                 
Correct output: 63                  | Program output: 81                 
Correct output: 32                  | Program output: 62                 
Correct output: 6                   | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: -18                 | Program output: -18                
Correct output: 53                  | Program output: 91                 
Correct output: -39                 | Program output: 51                 
Correct output: -83                 | Program output: -64                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: 19                  | Program output: 56                 
Correct output: -87                 | Program output: 84                 
Correct output: -85                 | Program output: -65                
Correct output: -82                 | Program output: -82                
Correct output: -38                 | Program output: 71                 
Correct output: -84                 | Program output: -12                
Correct output: -47                 | Program output: 16                 
Correct output: -96                 | Program output: -59                
Correct output: -84                 | Program output: -45                
Correct output: -8                  | Program output: -1                 
Correct output: -23                 | Program output: 28                 
Correct output: -29                 | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -72                 | Program output: 10                 
Correct output: -86                 | Program output: 17                 
Correct output: -33                 | Program output: 28                 
Correct output: -93                 | Program output: -56                
Correct output: -39                 | Program output: 6                  
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -55                
Correct output: -52                 | Program output: -34                
Correct output: -93                 | Program output: 82                 
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: 26                 
Correct output: -79                 | Program output: 99                 
Correct output: -90                 | Program output: 39                 
Correct output: -45                 | Program output: 28                 
Correct output: -4                  | Program output: 35                 
Correct output: -40                 | Program output: -17                
Correct output: -84                 | Program output: -42                
Correct output: -62                 | Program output: 52                 
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: 1                  
Correct output: 16                  | Program output: 95                 
Correct output: -76                 | Program output: 74                 
Correct output: 7                   | Program output: 62                 
Correct output: -100                | Program output: 13                 
Correct output: -88                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -16                
Correct output: -80                 | Program output: -36                
Correct output: -78                 | Program output: -70                
Correct output: -71                 | Program output: 47                 
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -47                 | Program output: 70                 
Correct output: -53                 | Program output: -53                
Correct output: -91                 | Program output: 44                 
Correct output: -88                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dec})
Lexicase best program: (integer_shove in4 print_integer integer_div exec_stackdepth integer_eq in4 boolean_flush exec_noop boolean_yankdup integer_lt boolean_yankdup exec_dup_times (integer_yank integer_stackdepth boolean_shove) integer_stackdepth integer_dec)
Lexicase best errors: [1 0 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dec})
Zero cases best program: (integer_shove in4 print_integer integer_div exec_stackdepth integer_eq in4 boolean_flush exec_noop boolean_yankdup integer_lt boolean_yankdup exec_dup_times (integer_yank integer_stackdepth boolean_shove) integer_stackdepth integer_dec)
Zero cases best errors: [1 0 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (233 864 202 1000 425 1000 235 425 202 202)
Population mean number of elite cases: 4.79
Count of perfect (error zero) individuals by case: (233 864 202 0 425 0 235 425 202 202)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dec})
Best program: (integer_shove in4 print_integer integer_div exec_stackdepth integer_eq in4 boolean_flush exec_noop boolean_yankdup integer_lt boolean_yankdup exec_dup_times (integer_yank integer_stackdepth boolean_shove) integer_stackdepth integer_dec)
Errors: [1 0 0 1 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 7.212
Median total errors in population: 7
Error averages by case: (0.767 0.136 0.798 1.0 0.575 1.0 0.765 0.575 0.798 0.798)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 66.924
Average program size in population (points): 89.975
Average percent parens in population: 0.256
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.486
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1043770
--- Timings ---
Current time: 1559314590646 milliseconds
Total Time:           4.4 seconds
Initialization:       0.1 seconds,  2.5%
Reproduction:         2.0 seconds, 44.5%
Fitness Testing:      1.9 seconds, 43.7%
Report:               0.4 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
Correct output: -59                 | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: 61                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 61                 
Correct output: 7                   | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 36                  | Program output: 70                 
Correct output: 11                  | Program output: 30                 
Correct output: 24                  | Program output: 99                 
Correct output: 24                  | Program output: 86                 
Correct output: 18                  | Program output: 48                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 62                 
Correct output: 35                  | Program output: 44                 
Correct output: 48                  | Program output: 70                 
Correct output: 28                  | Program output: 81                 
Correct output: 15                  | Program output: 49                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 84                 
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 41                 
Correct output: 6                   | Program output: 12                 
Correct output: -28                 | Program output: 65                 
Correct output: -98                 | Program output: 45                 
Correct output: 2                   | Program output: 78                 
Correct output: -18                 | Program output: 44                 
Correct output: 53                  | Program output: 53                 
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -67                
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: -27                
Correct output: 19                  | Program output: 19                 
Correct output: -87                 | Program output: 97                 
Correct output: -85                 | Program output: 9                  
Correct output: -82                 | Program output: -6                 
Correct output: -38                 | Program output: 79                 
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: 57                 
Correct output: -96                 | Program output: 71                 
Correct output: -84                 | Program output: -84                
Correct output: -8                  | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -29                 | Program output: 56                 
Correct output: -82                 | Program output: -46                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -33                 | Program output: 95                 
Correct output: -93                 | Program output: 65                 
Correct output: -39                 | Program output: 91                 
Correct output: -73                 | Program output: 97                 
Correct output: -69                 | Program output: 51                 
Correct output: -52                 | Program output: 71                 
Correct output: -93                 | Program output: -48                
Correct output: -87                 | Program output: 51                 
Correct output: -100                | Program output: -41                
Correct output: -79                 | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -45                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -31                
Correct output: -84                 | Program output: 35                 
Correct output: -62                 | Program output: 60                 
Correct output: -12                 | Program output: 63                 
Correct output: -56                 | Program output: -10                
Correct output: -92                 | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 16                  | Program output: 16                 
Correct output: -76                 | Program output: -72                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: 30                 
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -53                 | Program output: -19                
Correct output: -91                 | Program output: -82                
Correct output: -88                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s})
Lexicase best program: (boolean_swap exec_dup (boolean_yankdup boolean_dup_times) exec_do*times () exec_y_when_autoconstructing () exec_dup_items integer_fromboolean exec_do*range (boolean_frominteger boolean_invert_first_then_and boolean_xor exec_stackdepth exec_noop integer_flush exec_dup_times (integer_dec boolean_empty exec_dup_items integer_inc) exec_do*while ()) integer_max exec_eq in2 boolean_yank integer_dup_items boolean_yank in1 print_integer boolean_dup integer_div exec_s (boolean_dup exec_s () () ()) () ())
Lexicase best errors: [1 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s})
Zero cases best program: (boolean_swap exec_dup (boolean_yankdup boolean_dup_times) exec_do*times () exec_y_when_autoconstructing () exec_dup_items integer_fromboolean exec_do*range (boolean_frominteger boolean_invert_first_then_and boolean_xor exec_stackdepth exec_noop integer_flush exec_dup_times (integer_dec boolean_empty exec_dup_items integer_inc) exec_do*while ()) integer_max exec_eq in2 boolean_yank integer_dup_items boolean_yank in1 print_integer boolean_dup integer_div exec_s (boolean_dup exec_s () () ()) () ())
Zero cases best errors: [1 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (366 501 237 236 236 1000 234 501 236 365)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (366 501 237 236 236 0 234 501 236 365)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -60} {:close 0, :instruction 6} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop})
Best program: (boolean_eq boolean_dup_items boolean_swap exec_eq boolean_shove exec_eq integer_pop integer_div exec_dup_times (in1) integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq boolean_and exec_flush boolean_yank boolean_yankdup integer_gt integer_div boolean_invert_first_then_and boolean_empty boolean_stackdepth) (-60 6 exec_do*times (integer_div) exec_do*count (exec_s_when_autoconstructing () () (in3 integer_lte boolean_swap print_integer integer_gt exec_shove (exec_pop (integer_sub)) integer_fromboolean integer_lt) exec_k_when_autoconstructing (exec_noop) ())))))
Errors: [1 0 0 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 61
Size: 82
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 7.088
Median total errors in population: 8
Error averages by case: (0.634 0.499 0.763 0.764 0.764 1.0 0.766 0.499 0.764 0.635)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 57.489
Average program size in population (points): 78.173
Average percent parens in population: 0.255
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.969
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1653143
--- Timings ---
Current time: 1559314593123 milliseconds
Total Time:           7.0 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         3.5 seconds, 50.8%
Fitness Testing:      2.6 seconds, 36.8%
Report:               0.7 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
Correct output: -59                 | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: 61                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 61                 
Correct output: 7                   | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 36                  | Program output: 70                 
Correct output: 11                  | Program output: 30                 
Correct output: 24                  | Program output: 99                 
Correct output: 24                  | Program output: 86                 
Correct output: 18                  | Program output: 48                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 62                 
Correct output: 35                  | Program output: 44                 
Correct output: 48                  | Program output: 70                 
Correct output: 28                  | Program output: 81                 
Correct output: 15                  | Program output: 49                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 84                 
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 41                 
Correct output: 6                   | Program output: 12                 
Correct output: -28                 | Program output: 65                 
Correct output: -98                 | Program output: 45                 
Correct output: 2                   | Program output: 78                 
Correct output: -18                 | Program output: 44                 
Correct output: 53                  | Program output: 53                 
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -67                
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: -27                
Correct output: 19                  | Program output: 19                 
Correct output: -87                 | Program output: 97                 
Correct output: -85                 | Program output: 9                  
Correct output: -82                 | Program output: -6                 
Correct output: -38                 | Program output: 79                 
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: 57                 
Correct output: -96                 | Program output: 71                 
Correct output: -84                 | Program output: -84                
Correct output: -8                  | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -29                 | Program output: 56                 
Correct output: -82                 | Program output: -46                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -33                 | Program output: 95                 
Correct output: -93                 | Program output: 65                 
Correct output: -39                 | Program output: 91                 
Correct output: -73                 | Program output: 97                 
Correct output: -69                 | Program output: 51                 
Correct output: -52                 | Program output: 71                 
Correct output: -93                 | Program output: -48                
Correct output: -87                 | Program output: 51                 
Correct output: -100                | Program output: -41                
Correct output: -79                 | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -45                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -31                
Correct output: -84                 | Program output: 35                 
Correct output: -62                 | Program output: 60                 
Correct output: -12                 | Program output: 63                 
Correct output: -56                 | Program output: -10                
Correct output: -92                 | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 16                  | Program output: 16                 
Correct output: -76                 | Program output: -72                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: 30                 
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -53                 | Program output: -19                
Correct output: -91                 | Program output: -82                
Correct output: -88                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -60} {:close 0, :instruction 6} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range})
Lexicase best program: (boolean_swap exec_dup (boolean_yankdup boolean_dup_times) exec_do*times () exec_y_when_autoconstructing () exec_dup_items integer_fromboolean exec_do*range (boolean_and boolean_invert_first_then_and boolean_xor exec_stackdepth exec_noop integer_flush exec_dup_times (integer_dec boolean_empty exec_dup_items integer_inc) exec_do*while ()) integer_max exec_eq in2 boolean_yank integer_dup_items boolean_yank in1 print_integer boolean_dup integer_div exec_s (boolean_dup integer_fromboolean exec_flush boolean_yank boolean_yankdup integer_gt integer_div boolean_invert_first_then_and boolean_empty boolean_stackdepth) (-60 6 exec_do*times (integer_div) exec_do*count (exec_s_when_autoconstructing () () (in3 integer_lte boolean_swap print_integer integer_gt exec_shove (exec_pop (integer_sub)) integer_fromboolean boolean_yank) exec_k_when_autoconstructing (exec_noop exec_k_when_autoconstructing (exec_empty boolean_yankdup in3 boolean_rot boolean_empty exec_do*range () integer_swap exec_empty boolean_eq integer_max integer_gte exec_yankdup) (integer_min exec_s_when_autoconstructing (integer_rot print_boolean exec_do*range ()) () ())) ())) ())
Lexicase best errors: [1 0 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 104
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -60} {:close 0, :instruction 6} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range})
Zero cases best program: (boolean_swap exec_dup (boolean_yankdup boolean_dup_times) exec_do*times () exec_y_when_autoconstructing () exec_dup_items integer_fromboolean exec_do*range (boolean_and boolean_invert_first_then_and boolean_xor exec_stackdepth exec_noop integer_flush exec_dup_times (integer_dec boolean_empty exec_dup_items integer_inc) exec_do*while ()) integer_max exec_eq in2 boolean_yank integer_dup_items boolean_yank in1 print_integer boolean_dup integer_div exec_s (boolean_dup integer_fromboolean exec_flush boolean_yank boolean_yankdup integer_gt integer_div boolean_invert_first_then_and boolean_empty boolean_stackdepth) (-60 6 exec_do*times (integer_div) exec_do*count (exec_s_when_autoconstructing () () (in3 integer_lte boolean_swap print_integer integer_gt exec_shove (exec_pop (integer_sub)) integer_fromboolean boolean_yank) exec_k_when_autoconstructing (exec_noop exec_k_when_autoconstructing (exec_empty boolean_yankdup in3 boolean_rot boolean_empty exec_do*range () integer_swap exec_empty boolean_eq integer_max integer_gte exec_yankdup) (integer_min exec_s_when_autoconstructing (integer_rot print_boolean exec_do*range ()) () ())) ())) ())
Zero cases best errors: [1 0 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 104
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 848 165 1000 682 688 686 1000 1000 682)
Population mean number of elite cases: 7.75
Count of perfect (error zero) individuals by case: (0 848 165 0 682 688 686 0 0 682)
Population mean number of perfect (error zero) cases: 3.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_boolean_537} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_exec_493} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not})
Best program: (boolean_swap exec_dup (boolean_yankdup boolean_dup_times) exec_do*times () exec_y_when_autoconstructing () exec_dup_items integer_fromboolean exec_do*range (boolean_and boolean_invert_first_then_and boolean_xor exec_stackdepth exec_noop integer_flush exec_dup_times (integer_dec boolean_empty exec_dup_items integer_inc) exec_do*while ()) integer_max exec_eq in2 boolean_yank integer_dup_items boolean_yank in1 print_integer boolean_dup integer_div exec_s (boolean_dup integer_fromboolean exec_do*times () integer_inc) (exec_rot (integer_flush boolean_eq integer_inc exec_dup_items exec_shove () in2 boolean_pop integer_yankdup exec_yank boolean_dup_times) (exec_y_when_autoconstructing (exec_empty) integer_pop integer_rot exec_rot () (exec_shove () in2 boolean_pop integer_yankdup exec_yank boolean_dup_times) (exec_y_when_autoconstructing (exec_empty) exec_noop exec_do*times (boolean_or integer_inc exec_pop (print_boolean integer_stackdepth print_exec (integer_dup) print_boolean integer_stackdepth) exec_rot (integer_rot) (boolean_flush) (integer_gt boolean_invert_second_then_and -3 exec_eq integer_eq tag_boolean_537 integer_stackdepth) boolean_flush integer_rot integer_dup_times boolean_stackdepth exec_eq boolean_stackdepth exec_stackdepth tag_exec_493 (integer_empty boolean_shove exec_yank exec_eq integer_stackdepth) boolean_dup_items integer_yank exec_noop boolean_and) boolean_frominteger exec_do*range (exec_empty) boolean_pop) boolean_swap) (integer_gt) boolean_dup exec_y () boolean_not) ())
Errors: [1 0 1 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 107
Size: 137
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 6.249
Median total errors in population: 5
Error averages by case: (1.0 0.152 0.835 1.0 0.318 0.312 0.314 1.0 1.0 0.318)
Error minima by case: (1 0 0 1 0 0 0 1 1 0)
Average genome size in population (length): 69.801
Average program size in population (points): 92.268
Average percent parens in population: 0.238
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.3545
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2172746
--- Timings ---
Current time: 1559314595946 milliseconds
Total Time:           9.2 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         5.1 seconds, 55.1%
Fitness Testing:      3.0 seconds, 32.7%
Report:               1.0 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
Correct output: -59                 | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: 61                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 61                 
Correct output: 7                   | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 36                  | Program output: 70                 
Correct output: 11                  | Program output: 30                 
Correct output: 24                  | Program output: 99                 
Correct output: 24                  | Program output: 86                 
Correct output: 18                  | Program output: 48                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 62                 
Correct output: 35                  | Program output: 44                 
Correct output: 48                  | Program output: 70                 
Correct output: 28                  | Program output: 81                 
Correct output: 15                  | Program output: 49                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 84                 
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 41                 
Correct output: 6                   | Program output: 12                 
Correct output: -28                 | Program output: 65                 
Correct output: -98                 | Program output: 45                 
Correct output: 2                   | Program output: 78                 
Correct output: -18                 | Program output: 44                 
Correct output: 53                  | Program output: 53                 
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -67                
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: -27                
Correct output: 19                  | Program output: 19                 
Correct output: -87                 | Program output: 97                 
Correct output: -85                 | Program output: 9                  
Correct output: -82                 | Program output: -6                 
Correct output: -38                 | Program output: 79                 
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: 57                 
Correct output: -96                 | Program output: 71                 
Correct output: -84                 | Program output: -84                
Correct output: -8                  | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -29                 | Program output: 56                 
Correct output: -82                 | Program output: -46                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -33                 | Program output: 95                 
Correct output: -93                 | Program output: 65                 
Correct output: -39                 | Program output: 91                 
Correct output: -73                 | Program output: 97                 
Correct output: -69                 | Program output: 51                 
Correct output: -52                 | Program output: 71                 
Correct output: -93                 | Program output: -48                
Correct output: -87                 | Program output: 51                 
Correct output: -100                | Program output: -41                
Correct output: -79                 | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -45                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -31                
Correct output: -84                 | Program output: 35                 
Correct output: -62                 | Program output: 60                 
Correct output: -12                 | Program output: 63                 
Correct output: -56                 | Program output: -10                
Correct output: -92                 | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 16                  | Program output: 16                 
Correct output: -76                 | Program output: -72                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: 30                 
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -53                 | Program output: -19                
Correct output: -91                 | Program output: -82                
Correct output: -88                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -60} {:close 0, :instruction 6} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (boolean_eq boolean_dup_items boolean_swap exec_eq integer_lt exec_eq integer_pop integer_div exec_dup_times (in1) integer_min print_integer integer_lte in1 exec_while (print_boolean exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq boolean_and exec_flush boolean_yank boolean_yankdup integer_gt integer_div boolean_invert_first_then_and boolean_empty boolean_stackdepth) (-60 6 exec_s_when_autoconstructing (integer_div) (exec_do*count (exec_s_when_autoconstructing () () (in3 integer_lte boolean_swap print_integer integer_gt exec_shove (exec_pop (integer_sub)) integer_fromboolean))) ()))))
Lexicase best errors: [0 0 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 79
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -60} {:close 0, :instruction 6} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (boolean_eq boolean_dup_items boolean_swap exec_eq integer_lt exec_eq integer_pop integer_div exec_dup_times (in1) integer_min print_integer integer_lte in1 exec_while (print_boolean exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq boolean_and exec_flush boolean_yank boolean_yankdup integer_gt integer_div boolean_invert_first_then_and boolean_empty boolean_stackdepth) (-60 6 exec_s_when_autoconstructing (integer_div) (exec_do*count (exec_s_when_autoconstructing () () (in3 integer_lte boolean_swap print_integer integer_gt exec_shove (exec_pop (integer_sub)) integer_fromboolean))) ()))))
Zero cases best errors: [0 0 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 79
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (694 864 692 863 174 175 692 175 692 174)
Population mean number of elite cases: 5.20
Count of perfect (error zero) individuals by case: (694 864 692 863 174 175 692 175 692 174)
Population mean number of perfect (error zero) cases: 5.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction 3} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (boolean_swap exec_dup (boolean_yankdup boolean_dup_times) exec_do*times () exec_y_when_autoconstructing () exec_dup_items integer_fromboolean exec_do*range (boolean_and boolean_invert_first_then_and boolean_xor exec_stackdepth exec_noop integer_flush exec_dup_times (integer_dec boolean_empty boolean_yankdup integer_inc) exec_do*while ()) integer_max 3 in2 boolean_yank integer_dup_items boolean_yank in1 print_integer boolean_dup integer_div exec_s (boolean_dup integer_fromboolean exec_do*times () integer_inc) (exec_rot (integer_flush boolean_eq integer_inc exec_dup_items exec_shove () in2 boolean_pop integer_yankdup exec_yank boolean_dup_times) (exec_y_when_autoconstructing (exec_empty) exec_noop exec_do*count (boolean_or integer_inc exec_pop (print_boolean integer_stackdepth print_exec (integer_dup) print_boolean integer_stackdepth) exec_rot () () ())) ()) ())
Errors: [0 0 0 0 1 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 61
Size: 83
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 4.805
Median total errors in population: 4
Error averages by case: (0.306 0.136 0.308 0.137 0.826 0.825 0.308 0.825 0.308 0.826)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.28
Average program size in population (points): 89.028
Average percent parens in population: 0.237
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.8265
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2664913
--- Timings ---
Current time: 1559314598158 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.3 seconds, 53.8%
Fitness Testing:      3.5 seconds, 29.6%
Report:               1.9 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -70                 | Program output: -39                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 57                 
Correct output: -59                 | Program output: -59                
Correct output: -95                 | Program output: 26                 
Correct output: -45                 | Program output: 79                 
Correct output: -50                 | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 70                 
Correct output: 7                   | Program output: 80                 
Correct output: 27                  | Program output: 77                 
Correct output: 27                  | Program output: 40                 
Correct output: 36                  | Program output: 39                 
Correct output: 11                  | Program output: 93                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: 29                  | Program output: 31                 
Correct output: 16                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 48                  | Program output: 95                 
Correct output: 28                  | Program output: 88                 
Correct output: 15                  | Program output: 91                 
Correct output: 6                   | Program output: 95                 
Correct output: 22                  | Program output: 97                 
Correct output: 63                  | Program output: 81                 
Correct output: 32                  | Program output: 62                 
Correct output: 6                   | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: -18                 | Program output: -18                
Correct output: 53                  | Program output: 91                 
Correct output: -39                 | Program output: 51                 
Correct output: -83                 | Program output: -64                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: 19                  | Program output: 56                 
Correct output: -87                 | Program output: 84                 
Correct output: -85                 | Program output: -65                
Correct output: -82                 | Program output: -82                
Correct output: -38                 | Program output: 71                 
Correct output: -84                 | Program output: -12                
Correct output: -47                 | Program output: 16                 
Correct output: -96                 | Program output: -59                
Correct output: -84                 | Program output: -45                
Correct output: -8                  | Program output: -1                 
Correct output: -23                 | Program output: 28                 
Correct output: -29                 | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -72                 | Program output: 10                 
Correct output: -86                 | Program output: 17                 
Correct output: -33                 | Program output: 28                 
Correct output: -93                 | Program output: -56                
Correct output: -39                 | Program output: 6                  
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -55                
Correct output: -52                 | Program output: -34                
Correct output: -93                 | Program output: 82                 
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: 26                 
Correct output: -79                 | Program output: 99                 
Correct output: -90                 | Program output: 39                 
Correct output: -45                 | Program output: 28                 
Correct output: -4                  | Program output: 35                 
Correct output: -40                 | Program output: -17                
Correct output: -84                 | Program output: -42                
Correct output: -62                 | Program output: 52                 
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: 1                  
Correct output: 16                  | Program output: 95                 
Correct output: -76                 | Program output: 74                 
Correct output: 7                   | Program output: 62                 
Correct output: -100                | Program output: 13                 
Correct output: -88                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -16                
Correct output: -80                 | Program output: -36                
Correct output: -78                 | Program output: -70                
Correct output: -71                 | Program output: 47                 
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -47                 | Program output: 70                 
Correct output: -53                 | Program output: -53                
Correct output: -91                 | Program output: 44                 
Correct output: -88                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dec})
Lexicase best program: (integer_shove in4 print_integer integer_div exec_stackdepth integer_eq in4 boolean_flush exec_noop boolean_yankdup integer_lt boolean_yankdup exec_dup_times (integer_yank integer_stackdepth boolean_shove) integer_stackdepth integer_dec)
Lexicase best errors: [0 1 1 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dec})
Zero cases best program: (integer_shove in4 print_integer integer_div exec_stackdepth integer_eq in4 boolean_flush exec_noop boolean_yankdup integer_lt boolean_yankdup exec_dup_times (integer_yank integer_stackdepth boolean_shove) integer_stackdepth integer_dec)
Zero cases best errors: [0 1 1 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (409 457 457 1000 404 1 1000 407 1000 1000)
Population mean number of elite cases: 6.14
Count of perfect (error zero) individuals by case: (409 457 457 0 404 1 0 407 0 0)
Population mean number of perfect (error zero) cases: 2.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth})
Best program: (integer_shove in4 print_integer integer_div exec_stackdepth integer_eq in4 boolean_flush exec_noop boolean_yankdup integer_lt boolean_yankdup exec_dup_times (integer_yank) integer_stackdepth boolean_shove integer_stackdepth integer_stackdepth)
Errors: [0 1 1 1 0 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 7.865
Median total errors in population: 8
Error averages by case: (0.591 0.543 0.543 1.0 0.596 0.999 1.0 0.593 1.0 1.0)
Error minima by case: (0 0 0 1 0 0 1 0 1 1)
Average genome size in population (length): 57.786
Average program size in population (points): 76.79
Average percent parens in population: 0.225
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.2848125
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3162683
--- Timings ---
Current time: 1559314600205 milliseconds
Total Time:          14.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.6 seconds, 54.3%
Fitness Testing:      4.0 seconds, 28.1%
Report:               2.3 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
Correct output: -59                 | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: 61                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 61                 
Correct output: 7                   | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 36                  | Program output: 70                 
Correct output: 11                  | Program output: 30                 
Correct output: 24                  | Program output: 99                 
Correct output: 24                  | Program output: 86                 
Correct output: 18                  | Program output: 48                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 62                 
Correct output: 35                  | Program output: 44                 
Correct output: 48                  | Program output: 70                 
Correct output: 28                  | Program output: 81                 
Correct output: 15                  | Program output: 49                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 84                 
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 41                 
Correct output: 6                   | Program output: 12                 
Correct output: -28                 | Program output: 65                 
Correct output: -98                 | Program output: 45                 
Correct output: 2                   | Program output: 78                 
Correct output: -18                 | Program output: 44                 
Correct output: 53                  | Program output: 53                 
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -67                
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: -27                
Correct output: 19                  | Program output: 19                 
Correct output: -87                 | Program output: 97                 
Correct output: -85                 | Program output: 9                  
Correct output: -82                 | Program output: -6                 
Correct output: -38                 | Program output: 79                 
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: 57                 
Correct output: -96                 | Program output: 71                 
Correct output: -84                 | Program output: -84                
Correct output: -8                  | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -29                 | Program output: 56                 
Correct output: -82                 | Program output: -46                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -33                 | Program output: 95                 
Correct output: -93                 | Program output: 65                 
Correct output: -39                 | Program output: 91                 
Correct output: -73                 | Program output: 97                 
Correct output: -69                 | Program output: 51                 
Correct output: -52                 | Program output: 71                 
Correct output: -93                 | Program output: -48                
Correct output: -87                 | Program output: 51                 
Correct output: -100                | Program output: -41                
Correct output: -79                 | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -45                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -31                
Correct output: -84                 | Program output: 35                 
Correct output: -62                 | Program output: 60                 
Correct output: -12                 | Program output: 63                 
Correct output: -56                 | Program output: -10                
Correct output: -92                 | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 16                  | Program output: 16                 
Correct output: -76                 | Program output: -72                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: 30                 
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -53                 | Program output: -19                
Correct output: -91                 | Program output: -82                
Correct output: -88                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot})
Lexicase best program: (boolean_swap exec_dup (boolean_yankdup boolean_dup_times) exec_do*times () exec_y_when_autoconstructing () exec_dup_items integer_fromboolean exec_do*range (boolean_and boolean_invert_first_then_and boolean_xor exec_stackdepth exec_noop integer_flush exec_dup_times (integer_dec boolean_empty exec_dup_items integer_inc) exec_do*while ()) integer_max exec_eq in2 boolean_yank integer_dup_items boolean_yank in1 print_integer boolean_dup integer_div exec_s (boolean_dup integer_fromboolean exec_do*times () integer_inc exec_rot () () ()) () ())
Lexicase best errors: [0 0 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot})
Zero cases best program: (boolean_swap exec_dup (boolean_yankdup boolean_dup_times) exec_do*times () exec_y_when_autoconstructing () exec_dup_items integer_fromboolean exec_do*range (boolean_and boolean_invert_first_then_and boolean_xor exec_stackdepth exec_noop integer_flush exec_dup_times (integer_dec boolean_empty exec_dup_items integer_inc) exec_do*while ()) integer_max exec_eq in2 boolean_yank integer_dup_items boolean_yank in1 print_integer boolean_dup integer_div exec_s (boolean_dup integer_fromboolean exec_do*times () integer_inc exec_rot () () ()) () ())
Zero cases best errors: [0 0 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (302 733 302 433 433 1000 431 301 303 1)
Population mean number of elite cases: 4.24
Count of perfect (error zero) individuals by case: (302 733 302 433 433 0 431 301 303 1)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s})
Best program: (boolean_eq boolean_dup_items boolean_swap exec_eq boolean_shove exec_eq integer_pop integer_div exec_dup_times (in1) integer_min print_integer integer_lte in1 exec_while (exec_if (exec_pop () exec_do*range () integer_yankdup integer_max integer_add) (integer_shove integer_mod boolean_or exec_yank) integer_mult) integer_swap exec_swap () (exec_s () () ()))
Errors: [0 0 0 1 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 29
Size: 41
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 6.761
Median total errors in population: 6
Error averages by case: (0.698 0.267 0.698 0.567 0.567 1.0 0.569 0.699 0.697 0.999)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 54.514
Average program size in population (points): 72.957
Average percent parens in population: 0.227
Minimum age in population: 6.0
Maximum age in population: 10.625
Average age in population: 8.75253125
Median age in population: 8.78125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3769693
--- Timings ---
Current time: 1559314602343 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.0 seconds, 55.6%
Fitness Testing:      4.5 seconds, 27.6%
Report:               2.6 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
Correct output: -59                 | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: 61                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 61                 
Correct output: 7                   | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 36                  | Program output: 70                 
Correct output: 11                  | Program output: 30                 
Correct output: 24                  | Program output: 99                 
Correct output: 24                  | Program output: 86                 
Correct output: 18                  | Program output: 48                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 62                 
Correct output: 35                  | Program output: 44                 
Correct output: 48                  | Program output: 70                 
Correct output: 28                  | Program output: 81                 
Correct output: 15                  | Program output: 49                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 84                 
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 41                 
Correct output: 6                   | Program output: 12                 
Correct output: -28                 | Program output: 65                 
Correct output: -98                 | Program output: 45                 
Correct output: 2                   | Program output: 78                 
Correct output: -18                 | Program output: 44                 
Correct output: 53                  | Program output: 53                 
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -67                
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: -27                
Correct output: 19                  | Program output: 19                 
Correct output: -87                 | Program output: 97                 
Correct output: -85                 | Program output: 9                  
Correct output: -82                 | Program output: -6                 
Correct output: -38                 | Program output: 79                 
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: 57                 
Correct output: -96                 | Program output: 71                 
Correct output: -84                 | Program output: -84                
Correct output: -8                  | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -29                 | Program output: 56                 
Correct output: -82                 | Program output: -46                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -33                 | Program output: 95                 
Correct output: -93                 | Program output: 65                 
Correct output: -39                 | Program output: 91                 
Correct output: -73                 | Program output: 97                 
Correct output: -69                 | Program output: 51                 
Correct output: -52                 | Program output: 71                 
Correct output: -93                 | Program output: -48                
Correct output: -87                 | Program output: 51                 
Correct output: -100                | Program output: -41                
Correct output: -79                 | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -45                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -31                
Correct output: -84                 | Program output: 35                 
Correct output: -62                 | Program output: 60                 
Correct output: -12                 | Program output: 63                 
Correct output: -56                 | Program output: -10                
Correct output: -92                 | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 16                  | Program output: 16                 
Correct output: -76                 | Program output: -72                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: 30                 
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -53                 | Program output: -19                
Correct output: -91                 | Program output: -82                
Correct output: -88                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (boolean_eq boolean_dup_items boolean_swap exec_eq boolean_shove exec_eq integer_pop integer_div exec_dup_times (in1) integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq boolean_and exec_flush boolean_yank boolean_yankdup integer_gt integer_div boolean_invert_first_then_and) ())))
Lexicase best errors: [1 1 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 53
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (boolean_eq boolean_dup_items boolean_swap exec_eq boolean_shove exec_eq integer_pop integer_div exec_dup_times (in1) integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq boolean_and exec_flush boolean_yank boolean_yankdup integer_gt integer_div boolean_invert_first_then_and) ())))
Zero cases best errors: [1 1 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 53
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 290 406 405 1 1000 401 693 1000)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (1 1 290 406 405 1 0 401 693 0)
Population mean number of perfect (error zero) cases: 2.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup})
Best program: (in1 in2 boolean_rot integer_yank in4 exec_s_when_autoconstructing () (exec_yank integer_dup boolean_rot print_integer exec_if (exec_dup (exec_swap (exec_flush) (integer_yankdup) integer_max exec_eq integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup)) ()))) ()) ())
Errors: [1 1 1 0 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 28
Size: 44
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 7.802
Median total errors in population: 8
Error averages by case: (0.999 0.999 0.71 0.594 0.595 0.999 1.0 0.599 0.307 1.0)
Error minima by case: (0 0 0 0 0 0 1 0 0 1)
Average genome size in population (length): 56.309
Average program size in population (points): 75.352
Average percent parens in population: 0.236
Minimum age in population: 7.0
Maximum age in population: 12.421875
Average age in population: 10.331125
Median age in population: 10.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.78
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4409335
--- Timings ---
Current time: 1559314604568 milliseconds
Total Time:          18.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.5 seconds, 56.8%
Fitness Testing:      5.0 seconds, 27.0%
Report:               2.9 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 773
Test mean error for best: 0.77300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 000                
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 999999             
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -40                
Correct output: 13                  | Program output: 575757             
Correct output: -59                 | Program output: 565656             
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: 797979             
Correct output: -50                 | Program output: 212121             
Correct output: 51                  | Program output: 727272             
Correct output: -69                 | Program output: 686868             
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 858585             
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 101010             
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 242424             
Correct output: 7                   | Program output: 777                
Correct output: 27                  | Program output: 333333             
Correct output: 27                  | Program output: 454545             
Correct output: 36                  | Program output: 474747             
Correct output: 11                  | Program output: 111111             
Correct output: 24                  | Program output: 323232             
Correct output: 24                  | Program output: 373737             
Correct output: 18                  | Program output: 797979             
Correct output: 29                  | Program output: 434343             
Correct output: 16                  | Program output: 616161             
Correct output: 35                  | Program output: 999999             
Correct output: 48                  | Program output: 484848             
Correct output: 28                  | Program output: 282828             
Correct output: 15                  | Program output: 151515             
Correct output: 6                   | Program output: 717171             
Correct output: 22                  | Program output: 222222             
Correct output: 63                  | Program output: 999999             
Correct output: 32                  | Program output: 707070             
Correct output: 6                   | Program output: 353535             
Correct output: -28                 | Program output: 434343             
Correct output: -98                 | Program output: -98                
Correct output: 2                   | Program output: 686868             
Correct output: -18                 | Program output: 979797             
Correct output: 53                  | Program output: 979797             
Correct output: -39                 | Program output: 737373             
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: 101010             
Correct output: -97                 | Program output: 111111             
Correct output: 19                  | Program output: 363636             
Correct output: -87                 | Program output: 272727             
Correct output: -85                 | Program output: 545454             
Correct output: -82                 | Program output: -11                
Correct output: -38                 | Program output: 282828             
Correct output: -84                 | Program output: -55                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -47                
Correct output: -8                  | Program output: 111                
Correct output: -23                 | Program output: 727272             
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -23                
Correct output: -72                 | Program output: -8                 
Correct output: -86                 | Program output: 606060             
Correct output: -33                 | Program output: 808080             
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -21                
Correct output: -73                 | Program output: -33                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: 888888             
Correct output: -87                 | Program output: -84                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -52                
Correct output: -90                 | Program output: 404040             
Correct output: -45                 | Program output: 999                
Correct output: -4                  | Program output: 606060             
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: 191919             
Correct output: -62                 | Program output: -62                
Correct output: -12                 | Program output: 646464             
Correct output: -56                 | Program output: -56                
Correct output: -92                 | Program output: -42                
Correct output: -72                 | Program output: -43                
Correct output: 16                  | Program output: 868686             
Correct output: -76                 | Program output: -76                
Correct output: 7                   | Program output: 636363             
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: 434343             
Correct output: -95                 | Program output: 414141             
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 272727             
Correct output: -78                 | Program output: -13                
Correct output: -71                 | Program output: 929292             
Correct output: -81                 | Program output: 616161             
Correct output: -51                 | Program output: 161616             
Correct output: -47                 | Program output: -5                 
Correct output: -53                 | Program output: 323232             
Correct output: -91                 | Program output: -71                
Correct output: -88                 | Program output: 515151             
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mod} {:close 2, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -60} {:close 0, :instruction 6} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 3, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot})
Lexicase best program: (boolean_swap exec_dup (boolean_yankdup integer_mod) exec_do*times () exec_y_when_autoconstructing () exec_dup_items integer_fromboolean exec_do*range (boolean_and boolean_invert_first_then_and boolean_xor exec_stackdepth exec_noop integer_flush exec_dup_times (integer_dec boolean_empty integer_gte integer_inc) exec_do*while ()) integer_max exec_eq integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq boolean_and in3 boolean_yank boolean_yankdup integer_gt integer_div boolean_invert_first_then_and boolean_empty boolean_stackdepth) (-60 6 exec_do*times (exec_do*times (integer_div) exec_do*count (exec_s_when_autoconstructing () () (in3 integer_lte exec_s_when_autoconstructing (print_integer integer_gt exec_shove (integer_gt integer_sub)) () (integer_fromboolean boolean_yank) exec_k_when_autoconstructing (exec_noop exec_k_when_autoconstructing (exec_pop (boolean_yankdup in3 boolean_rot)) ()) ()))))))
Lexicase best errors: [0 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 100
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mod} {:close 2, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -60} {:close 0, :instruction 6} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 3, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot})
Zero cases best program: (boolean_swap exec_dup (boolean_yankdup integer_mod) exec_do*times () exec_y_when_autoconstructing () exec_dup_items integer_fromboolean exec_do*range (boolean_and boolean_invert_first_then_and boolean_xor exec_stackdepth exec_noop integer_flush exec_dup_times (integer_dec boolean_empty integer_gte integer_inc) exec_do*while ()) integer_max exec_eq integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq boolean_and in3 boolean_yank boolean_yankdup integer_gt integer_div boolean_invert_first_then_and boolean_empty boolean_stackdepth) (-60 6 exec_do*times (exec_do*times (integer_div) exec_do*count (exec_s_when_autoconstructing () () (in3 integer_lte exec_s_when_autoconstructing (print_integer integer_gt exec_shove (integer_gt integer_sub)) () (integer_fromboolean boolean_yank) exec_k_when_autoconstructing (exec_noop exec_k_when_autoconstructing (exec_pop (boolean_yankdup in3 boolean_rot)) ()) ()))))))
Zero cases best errors: [0 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 100
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 130 2 668 797 399 130 2 2 2)
Population mean number of elite cases: 2.13
Count of perfect (error zero) individuals by case: (2 130 2 668 797 399 130 2 2 2)
Population mean number of perfect (error zero) cases: 2.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -60} {:close 0, :instruction 6} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 3, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank})
Best program: (boolean_eq boolean_dup_items boolean_invert_first_then_and boolean_xor exec_stackdepth exec_noop integer_flush exec_dup_times (integer_dec boolean_empty exec_dup_items integer_inc) exec_do*while () integer_max exec_eq integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq boolean_and in3 boolean_yank boolean_yankdup integer_gt integer_div boolean_invert_first_then_and boolean_empty boolean_stackdepth) (-60 6 exec_do*times (exec_do*times (integer_div) exec_do*count (exec_s_when_autoconstructing () () (in3 integer_lte exec_s_when_autoconstructing (print_integer integer_gt exec_shove (integer_gt integer_sub)) () (integer_fromboolean boolean_yank)))))))
Errors: [0 1 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 56
Size: 76
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 7.866
Median total errors in population: 7
Error averages by case: (0.998 0.87 0.998 0.332 0.203 0.601 0.87 0.998 0.998 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.352
Average program size in population (points): 65.92
Average percent parens in population: 0.261
Minimum age in population: 8.8125
Maximum age in population: 13.6796875
Average age in population: 12.0161875
Median age in population: 11.96875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 178
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4845043
--- Timings ---
Current time: 1559314606997 milliseconds
Total Time:          20.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.9 seconds, 58.2%
Fitness Testing:      5.3 seconds, 26.0%
Report:               3.1 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
Correct output: -59                 | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: 61                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 61                 
Correct output: 7                   | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 36                  | Program output: 70                 
Correct output: 11                  | Program output: 30                 
Correct output: 24                  | Program output: 99                 
Correct output: 24                  | Program output: 86                 
Correct output: 18                  | Program output: 48                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 62                 
Correct output: 35                  | Program output: 44                 
Correct output: 48                  | Program output: 70                 
Correct output: 28                  | Program output: 81                 
Correct output: 15                  | Program output: 49                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 84                 
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 41                 
Correct output: 6                   | Program output: 12                 
Correct output: -28                 | Program output: 65                 
Correct output: -98                 | Program output: 45                 
Correct output: 2                   | Program output: 78                 
Correct output: -18                 | Program output: 44                 
Correct output: 53                  | Program output: 53                 
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -67                
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: -27                
Correct output: 19                  | Program output: 19                 
Correct output: -87                 | Program output: 97                 
Correct output: -85                 | Program output: 9                  
Correct output: -82                 | Program output: -6                 
Correct output: -38                 | Program output: 79                 
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: 57                 
Correct output: -96                 | Program output: 71                 
Correct output: -84                 | Program output: -84                
Correct output: -8                  | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -29                 | Program output: 56                 
Correct output: -82                 | Program output: -46                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -33                 | Program output: 95                 
Correct output: -93                 | Program output: 65                 
Correct output: -39                 | Program output: 91                 
Correct output: -73                 | Program output: 97                 
Correct output: -69                 | Program output: 51                 
Correct output: -52                 | Program output: 71                 
Correct output: -93                 | Program output: -48                
Correct output: -87                 | Program output: 51                 
Correct output: -100                | Program output: -41                
Correct output: -79                 | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -45                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -31                
Correct output: -84                 | Program output: 35                 
Correct output: -62                 | Program output: 60                 
Correct output: -12                 | Program output: 63                 
Correct output: -56                 | Program output: -10                
Correct output: -92                 | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 16                  | Program output: 16                 
Correct output: -76                 | Program output: -72                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: 30                 
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -53                 | Program output: -19                
Correct output: -91                 | Program output: -82                
Correct output: -88                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tagged_560} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div})
Lexicase best program: (boolean_eq boolean_dup_items boolean_swap boolean_dup_times boolean_shove exec_eq exec_eq boolean_shove exec_eq integer_pop integer_div exec_dup_times (in1) integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte integer_dup exec_eq boolean_and print_exec (exec_s_when_autoconstructing () (tagged_560 integer_max integer_min integer_dup_items boolean_stackdepth integer_max integer_min integer_dup_items boolean_stackdepth exec_do*while (boolean_dup) exec_yank print_integer boolean_rot exec_swap (exec_s_when_autoconstructing (boolean_yank in4 integer_dec) (exec_rot (integer_inc exec_eq boolean_xor) (integer_div) ()) ()) ()) ()))))
Lexicase best errors: [1 1 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 74
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tagged_560} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div})
Zero cases best program: (boolean_eq boolean_dup_items boolean_swap boolean_dup_times boolean_shove exec_eq exec_eq boolean_shove exec_eq integer_pop integer_div exec_dup_times (in1) integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte integer_dup exec_eq boolean_and print_exec (exec_s_when_autoconstructing () (tagged_560 integer_max integer_min integer_dup_items boolean_stackdepth integer_max integer_min integer_dup_items boolean_stackdepth exec_do*while (boolean_dup) exec_yank print_integer boolean_rot exec_swap (exec_s_when_autoconstructing (boolean_yank in4 integer_dec) (exec_rot (integer_inc exec_eq boolean_xor) (integer_div) ()) ()) ()) ()))))
Zero cases best errors: [1 1 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 74
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 216 359 165 165 165 1000 216 385 166)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (3 216 359 165 165 165 0 216 385 166)
Population mean number of perfect (error zero) cases: 1.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -60} {:close 0, :instruction 6} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove})
Best program: (boolean_rot boolean_eq boolean_dup_items boolean_swap exec_eq boolean_shove exec_eq exec_stackdepth integer_div exec_dup_times (in1) integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop (exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq boolean_and exec_flush boolean_yank boolean_yankdup integer_gt boolean_eq boolean_and exec_flush boolean_yank boolean_yankdup integer_gt integer_div boolean_invert_first_then_and boolean_empty boolean_stackdepth) (-60 6 exec_do*times (integer_div) exec_do*count (exec_s_when_autoconstructing () (in3 integer_lte boolean_swap print_integer integer_gt exec_shove ()) ()))))))
Errors: [1 1 1 0 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 62
Size: 80
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 8.16
Median total errors in population: 9
Error averages by case: (0.997 0.784 0.641 0.835 0.835 0.835 1.0 0.784 0.615 0.834)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 54.58
Average program size in population (points): 74.553
Average percent parens in population: 0.250
Minimum age in population: 10.0625
Maximum age in population: 15.046875
Average age in population: 13.39514453125
Median age in population: 13.408203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 135
Genome diversity (% unique genomes):	 0.674
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5735252
--- Timings ---
Current time: 1559314609508 milliseconds
Total Time:          23.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.5 seconds, 58.0%
Fitness Testing:      5.9 seconds, 25.1%
Report:               3.8 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 57                 
Correct output: -59                 | Program output: -59                
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: 79                 
Correct output: -50                 | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 36                 
Correct output: 7                   | Program output: 44                 
Correct output: 27                  | Program output: 59                 
Correct output: 27                  | Program output: 40                 
Correct output: 36                  | Program output: 36                 
Correct output: 11                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 24                 
Correct output: 18                  | Program output: 18                 
Correct output: 29                  | Program output: 31                 
Correct output: 16                  | Program output: 16                 
Correct output: 35                  | Program output: 35                 
Correct output: 48                  | Program output: 54                 
Correct output: 28                  | Program output: 88                 
Correct output: 15                  | Program output: 27                 
Correct output: 6                   | Program output: 53                 
Correct output: 22                  | Program output: 56                 
Correct output: 63                  | Program output: 65                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -6                 
Correct output: 2                   | Program output: 2                  
Correct output: -18                 | Program output: -18                
Correct output: 53                  | Program output: 74                 
Correct output: -39                 | Program output: 7                  
Correct output: -83                 | Program output: -64                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: 19                  | Program output: 56                 
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -82                
Correct output: -38                 | Program output: -38                
Correct output: -84                 | Program output: -60                
Correct output: -47                 | Program output: -12                
Correct output: -96                 | Program output: -59                
Correct output: -84                 | Program output: -45                
Correct output: -8                  | Program output: -1                 
Correct output: -23                 | Program output: 24                 
Correct output: -29                 | Program output: 30                 
Correct output: -82                 | Program output: -82                
Correct output: -72                 | Program output: -7                 
Correct output: -86                 | Program output: 17                 
Correct output: -33                 | Program output: -33                
Correct output: -93                 | Program output: -56                
Correct output: -39                 | Program output: -39                
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -55                
Correct output: -52                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: 26                 
Correct output: -79                 | Program output: -79                
Correct output: -90                 | Program output: 39                 
Correct output: -45                 | Program output: -45                
Correct output: -4                  | Program output: 35                 
Correct output: -40                 | Program output: -17                
Correct output: -84                 | Program output: -84                
Correct output: -62                 | Program output: 52                 
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: 1                  
Correct output: 16                  | Program output: 43                 
Correct output: -76                 | Program output: 65                 
Correct output: 7                   | Program output: 62                 
Correct output: -100                | Program output: 13                 
Correct output: -88                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -70                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -47                 | Program output: -2                 
Correct output: -53                 | Program output: -53                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction tagged_976} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_283} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank})
Lexicase best program: (exec_yankdup in2 boolean_rot integer_yank in4 exec_s_when_autoconstructing () (integer_min) (integer_dup boolean_rot print_integer exec_if (exec_dup (exec_swap (exec_flush) (integer_yankdup) tagged_976) exec_empty exec_k () (integer_shove integer_dup_times boolean_swap exec_noop integer_fromboolean exec_k (tag_integer_283 boolean_invert_first_then_and in3) (in4 boolean_or) boolean_eq exec_k (exec_s_when_autoconstructing (boolean_yank) (exec_rot () (exec_k (exec_eq integer_dup_items integer_yank) ()) ()) ()) ())) ()))
Lexicase best errors: [0 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 61
Percent parens: 0.377
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction tagged_976} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_283} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank})
Zero cases best program: (exec_yankdup in2 boolean_rot integer_yank in4 exec_s_when_autoconstructing () (integer_min) (integer_dup boolean_rot print_integer exec_if (exec_dup (exec_swap (exec_flush) (integer_yankdup) tagged_976) exec_empty exec_k () (integer_shove integer_dup_times boolean_swap exec_noop integer_fromboolean exec_k (tag_integer_283 boolean_invert_first_then_and in3) (in4 boolean_or) boolean_eq exec_k (exec_s_when_autoconstructing (boolean_yank) (exec_rot () (exec_k (exec_eq integer_dup_items integer_yank) ()) ()) ()) ())) ()))
Zero cases best errors: [0 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 61
Percent parens: 0.377
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 455 2 169 847 217 171 217 628 216)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (2 455 2 169 847 217 171 217 628 216)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction tagged_976} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_283} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank})
Best program: (exec_yankdup in2 boolean_rot integer_yank in4 exec_s_when_autoconstructing () (integer_min) (integer_dup boolean_rot print_integer exec_if (exec_dup (exec_swap (exec_flush) (integer_yankdup) tagged_976) exec_empty exec_k () (integer_shove integer_dup_times boolean_swap exec_noop integer_fromboolean exec_k (tag_integer_283 boolean_invert_first_then_and in3) (in4 boolean_or) boolean_eq exec_k (exec_s_when_autoconstructing (boolean_yank) (exec_rot () (exec_k (exec_eq integer_dup_items integer_yank) ()) ()) ()) ())) ()))
Errors: [0 1 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 38
Size: 61
Percent parens: 0.377
--- Population Statistics ---
Average total errors in population: 7.076
Median total errors in population: 7
Error averages by case: (0.998 0.545 0.998 0.831 0.153 0.783 0.829 0.783 0.372 0.784)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.539
Average program size in population (points): 71.296
Average percent parens in population: 0.243
Minimum age in population: 11.0625
Maximum age in population: 16.55859375
Average age in population: 14.87443359375
Median age in population: 14.9609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6286625
--- Timings ---
Current time: 1559314611644 milliseconds
Total Time:          25.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.0 seconds, 59.0%
Fitness Testing:      6.2 seconds, 24.4%
Report:               4.1 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 61                 
Correct output: 7                   | Program output: 80                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 36                  | Program output: 39                 
Correct output: 11                  | Program output: 30                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 86                 
Correct output: 18                  | Program output: 18                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 48                  | Program output: 70                 
Correct output: 28                  | Program output: 81                 
Correct output: 15                  | Program output: 49                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 84                 
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: -18                 | Program output: -18                
Correct output: 53                  | Program output: 53                 
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: 19                  | Program output: 19                 
Correct output: -87                 | Program output: 84                 
Correct output: -85                 | Program output: -65                
Correct output: -82                 | Program output: -82                
Correct output: -38                 | Program output: 71                 
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: 16                 
Correct output: -96                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -8                  | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -29                 | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -33                 | Program output: 28                 
Correct output: -93                 | Program output: -56                
Correct output: -39                 | Program output: 6                  
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -55                
Correct output: -52                 | Program output: -34                
Correct output: -93                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -41                
Correct output: -79                 | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -45                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -31                
Correct output: -84                 | Program output: -42                
Correct output: -62                 | Program output: 52                 
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: -10                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -72                
Correct output: 16                  | Program output: 16                 
Correct output: -76                 | Program output: -72                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -53                 | Program output: -53                
Correct output: -91                 | Program output: -82                
Correct output: -88                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction tagged_976} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_integer_283} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank})
Lexicase best program: (exec_yankdup in2 boolean_rot integer_yank in4 in1 integer_min integer_dup boolean_rot print_integer exec_if (exec_dup (exec_swap (exec_flush) (integer_yankdup) tagged_976) exec_empty print_newline) (integer_shove integer_dup_times boolean_swap exec_noop integer_fromboolean integer_stackdepth tag_integer_283 boolean_invert_first_then_and in3) in4 boolean_or boolean_eq exec_k (exec_s_when_autoconstructing (boolean_yank) (exec_rot () (exec_k (boolean_dup_items integer_dup_items integer_yank) ()) ()) ()) ())
Lexicase best errors: [0 0 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 54
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction tagged_976} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_integer_283} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank})
Zero cases best program: (exec_yankdup in2 boolean_rot integer_yank in4 in1 integer_min integer_dup boolean_rot print_integer exec_if (exec_dup (exec_swap (exec_flush) (integer_yankdup) tagged_976) exec_empty print_newline) (integer_shove integer_dup_times boolean_swap exec_noop integer_fromboolean integer_stackdepth tag_integer_283 boolean_invert_first_then_and in3) in4 boolean_or boolean_eq exec_k (exec_s_when_autoconstructing (boolean_yank) (exec_rot () (exec_k (boolean_dup_items integer_dup_items integer_yank) ()) ()) ()) ())
Zero cases best errors: [0 0 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 54
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (162 162 532 148 162 685 163 145 527 532)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (162 162 532 148 162 685 163 145 527 532)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction tagged_976} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_integer_283} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank})
Best program: (exec_yankdup in2 boolean_rot integer_yank in4 in1 integer_min integer_dup boolean_rot print_integer exec_if (exec_dup (exec_swap (exec_flush) (integer_yankdup) tagged_976) exec_empty print_newline) (integer_shove integer_dup_times boolean_swap exec_noop integer_fromboolean integer_stackdepth tag_integer_283 boolean_invert_first_then_and in3) in4 boolean_or boolean_eq exec_k (exec_s_when_autoconstructing (boolean_yank) (exec_rot () (exec_k (boolean_dup_items integer_dup_items integer_yank) ()) ()) ()) ())
Errors: [0 0 0 1 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 38
Size: 54
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 6.782
Median total errors in population: 6
Error averages by case: (0.838 0.838 0.468 0.852 0.838 0.315 0.837 0.855 0.473 0.468)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.392
Average program size in population (points): 64.922
Average percent parens in population: 0.331
Minimum age in population: 14.01953125
Maximum age in population: 18.0595703125
Average age in population: 15.8084853515625
Median age in population: 15.712890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 268
Genome diversity (% unique genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 269
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6634348
--- Timings ---
Current time: 1559314613513 milliseconds
Total Time:          27.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.4 seconds, 60.0%
Fitness Testing:      6.5 seconds, 23.7%
Report:               4.4 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 209
Test mean error for best: 0.20900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 36                 
Correct output: 7                   | Program output: 44                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 36                  | Program output: 36                 
Correct output: 11                  | Program output: 30                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 24                 
Correct output: 18                  | Program output: 18                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 35                  | Program output: 35                 
Correct output: 48                  | Program output: 54                 
Correct output: 28                  | Program output: 81                 
Correct output: 15                  | Program output: 27                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 56                 
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -6                 
Correct output: 2                   | Program output: 2                  
Correct output: -18                 | Program output: -18                
Correct output: 53                  | Program output: 53                 
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: 19                  | Program output: 19                 
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -82                
Correct output: -38                 | Program output: -38                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -12                
Correct output: -96                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -8                  | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -29                 | Program output: 30                 
Correct output: -82                 | Program output: -82                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -33                 | Program output: -33                
Correct output: -93                 | Program output: -56                
Correct output: -39                 | Program output: -39                
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -55                
Correct output: -52                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -41                
Correct output: -79                 | Program output: -79                
Correct output: -90                 | Program output: -90                
Correct output: -45                 | Program output: -45                
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -62                 | Program output: 52                 
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -72                
Correct output: 16                  | Program output: 16                 
Correct output: -76                 | Program output: -72                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -53                 | Program output: -53                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq})
Lexicase best program: (exec_yankdup in2 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
Lexicase best errors: [0 0 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_yankdup in2 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
Zero cases best errors: [0 0 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (646 592 262 594 594 127 125 644 263 130)
Population mean number of elite cases: 3.98
Count of perfect (error zero) individuals by case: (646 592 262 594 594 127 125 644 263 130)
Population mean number of perfect (error zero) cases: 3.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq})
Best program: (exec_yankdup in2 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
Errors: [0 0 0 0 0 1 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 38
Size: 55
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 6.023
Median total errors in population: 5
Error averages by case: (0.354 0.408 0.738 0.406 0.406 0.873 0.875 0.356 0.737 0.87)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.792
Average program size in population (points): 59.595
Average percent parens in population: 0.296
Minimum age in population: 15.01953125
Maximum age in population: 19.212890625
Average age in population: 17.05172216796875
Median age in population: 17.212890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 284
Genome diversity (% unique genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 288
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6937296
--- Timings ---
Current time: 1559314615325 milliseconds
Total Time:          29.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.8 seconds, 60.9%
Fitness Testing:      6.7 seconds, 23.0%
Report:               4.6 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 209
Test mean error for best: 0.20900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 36                 
Correct output: 7                   | Program output: 44                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 36                  | Program output: 36                 
Correct output: 11                  | Program output: 30                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 24                 
Correct output: 18                  | Program output: 18                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 35                  | Program output: 35                 
Correct output: 48                  | Program output: 54                 
Correct output: 28                  | Program output: 81                 
Correct output: 15                  | Program output: 27                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 56                 
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -6                 
Correct output: 2                   | Program output: 2                  
Correct output: -18                 | Program output: -18                
Correct output: 53                  | Program output: 53                 
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: 19                  | Program output: 19                 
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -82                
Correct output: -38                 | Program output: -38                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -12                
Correct output: -96                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -8                  | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -29                 | Program output: 30                 
Correct output: -82                 | Program output: -82                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -33                 | Program output: -33                
Correct output: -93                 | Program output: -56                
Correct output: -39                 | Program output: -39                
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -55                
Correct output: -52                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -41                
Correct output: -79                 | Program output: -79                
Correct output: -90                 | Program output: -90                
Correct output: -45                 | Program output: -45                
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -62                 | Program output: 52                 
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -72                
Correct output: 16                  | Program output: 16                 
Correct output: -76                 | Program output: -72                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -53                 | Program output: -53                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop})
Lexicase best program: (exec_yankdup in2 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 integer_gt) exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline integer_pop)) ())))
Lexicase best errors: [0 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 52
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop})
Zero cases best program: (exec_yankdup in2 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 integer_gt) exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline integer_pop)) ())))
Zero cases best errors: [0 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 52
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (832 612 221 612 218 614 849 221 613 610)
Population mean number of elite cases: 5.40
Count of perfect (error zero) individuals by case: (832 612 221 612 218 614 849 221 613 610)
Population mean number of perfect (error zero) cases: 5.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup})
Best program: (exec_yankdup in2 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup)) ()))) ())))
Errors: [0 0 1 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 46
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 4.598
Median total errors in population: 3
Error averages by case: (0.168 0.388 0.779 0.388 0.782 0.386 0.151 0.779 0.387 0.39)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.76
Average program size in population (points): 64.382
Average percent parens in population: 0.305
Minimum age in population: 16.8583984375
Maximum age in population: 20.54541015625
Average age in population: 18.4878291015625
Median age in population: 18.712890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 371
Genome diversity (% unique genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 383
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 7321445
--- Timings ---
Current time: 1559314617155 milliseconds
Total Time:          31.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.1 seconds, 61.6%
Fitness Testing:      7.0 seconds, 22.5%
Report:               4.8 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 210
Test mean error for best: 0.21000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 36                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 37                 
Correct output: 18                  | Program output: 18                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 48                  | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 15                  | Program output: 15                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 22                 
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: 2                   | Program output: 2                  
Correct output: -18                 | Program output: -18                
Correct output: 53                  | Program output: 53                 
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: 19                  | Program output: 19                 
Correct output: -87                 | Program output: 27                 
Correct output: -85                 | Program output: -65                
Correct output: -82                 | Program output: -82                
Correct output: -38                 | Program output: 28                 
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -8                  | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -33                 | Program output: 28                 
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -21                
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -45                 | Program output: 9                  
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -72                
Correct output: 16                  | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -53                 | Program output: -53                
Correct output: -91                 | Program output: -82                
Correct output: -88                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq})
Lexicase best program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 55
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 55
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (568 249 563 247 832 561 565 567 827 566)
Population mean number of elite cases: 5.55
Count of perfect (error zero) individuals by case: (568 249 563 247 832 561 565 567 827 566)
Population mean number of perfect (error zero) cases: 5.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq})
Best program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 38
Size: 55
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 4.455
Median total errors in population: 2
Error averages by case: (0.432 0.751 0.437 0.753 0.168 0.439 0.435 0.433 0.173 0.434)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.988
Average program size in population (points): 66.141
Average percent parens in population: 0.304
Minimum age in population: 17.98828125
Maximum age in population: 21.814697265625
Average age in population: 19.98217700195312
Median age in population: 19.9952392578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 211
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 228
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.01
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7727308
--- Timings ---
Current time: 1559314618979 milliseconds
Total Time:          32.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.5 seconds, 62.3%
Fitness Testing:      7.3 seconds, 22.1%
Report:               5.0 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 210
Test mean error for best: 0.21000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 36                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 37                 
Correct output: 18                  | Program output: 18                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 48                  | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 15                  | Program output: 15                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 22                 
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: 2                   | Program output: 2                  
Correct output: -18                 | Program output: -18                
Correct output: 53                  | Program output: 53                 
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: 19                  | Program output: 19                 
Correct output: -87                 | Program output: 27                 
Correct output: -85                 | Program output: -65                
Correct output: -82                 | Program output: -82                
Correct output: -38                 | Program output: 28                 
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -8                  | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -33                 | Program output: 28                 
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -21                
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -45                 | Program output: 9                  
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -72                
Correct output: 16                  | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -53                 | Program output: -53                
Correct output: -91                 | Program output: -82                
Correct output: -88                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq})
Lexicase best program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 55
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 55
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (276 605 889 890 905 606 888 890 902 912)
Population mean number of elite cases: 7.76
Count of perfect (error zero) individuals by case: (276 605 889 890 905 606 888 890 902 912)
Population mean number of perfect (error zero) cases: 7.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq})
Best program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 38
Size: 55
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 2.237
Median total errors in population: 1
Error averages by case: (0.724 0.395 0.111 0.11 0.095 0.394 0.112 0.11 0.098 0.088)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.455
Average program size in population (points): 55.676
Average percent parens in population: 0.309
Minimum age in population: 19.28564453125
Maximum age in population: 22.9884033203125
Average age in population: 20.60576153564453
Median age in population: 20.712890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 348
Genome diversity (% unique genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 355
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.01
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7917706
--- Timings ---
Current time: 1559314620705 milliseconds
Total Time:          34.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.8 seconds, 63.0%
Fitness Testing:      7.4 seconds, 21.5%
Report:               5.2 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 210
Test mean error for best: 0.21000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 36                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 37                 
Correct output: 18                  | Program output: 18                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 48                  | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 15                  | Program output: 15                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 22                 
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: 2                   | Program output: 2                  
Correct output: -18                 | Program output: -18                
Correct output: 53                  | Program output: 53                 
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: 19                  | Program output: 19                 
Correct output: -87                 | Program output: 27                 
Correct output: -85                 | Program output: -65                
Correct output: -82                 | Program output: -82                
Correct output: -38                 | Program output: 28                 
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -8                  | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -33                 | Program output: 28                 
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -21                
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -45                 | Program output: 9                  
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -72                
Correct output: 16                  | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -53                 | Program output: -53                
Correct output: -91                 | Program output: -82                
Correct output: -88                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_760})
Lexicase best program: (exec_yankdup in2 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline tagged_760) ()))) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 55
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_760})
Zero cases best program: (exec_yankdup in2 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline tagged_760) ()))) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 55
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (343 909 915 902 925 910 902 909 926 556)
Population mean number of elite cases: 8.20
Count of perfect (error zero) individuals by case: (343 909 915 902 925 910 902 909 926 556)
Population mean number of perfect (error zero) cases: 8.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt})
Best program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline integer_lt) ()))) ())))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 40
Size: 57
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 1.803
Median total errors in population: 1
Error averages by case: (0.657 0.091 0.085 0.098 0.075 0.09 0.098 0.091 0.074 0.444)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.46
Average program size in population (points): 55.619
Average percent parens in population: 0.307
Minimum age in population: 20.28564453125
Maximum age in population: 24.22564697265625
Average age in population: 22.12217556762695
Median age in population: 22.212890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 202
Genome diversity (% unique genomes):	 0.657
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 206
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.01
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 8102829
--- Timings ---
Current time: 1559314622398 milliseconds
Total Time:          36.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.1 seconds, 63.7%
Fitness Testing:      7.6 seconds, 21.0%
Report:               5.4 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 210
Test mean error for best: 0.21000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 36                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 37                 
Correct output: 18                  | Program output: 18                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 48                  | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 15                  | Program output: 15                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 22                 
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: 2                   | Program output: 2                  
Correct output: -18                 | Program output: -18                
Correct output: 53                  | Program output: 53                 
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: 19                  | Program output: 19                 
Correct output: -87                 | Program output: 27                 
Correct output: -85                 | Program output: -65                
Correct output: -82                 | Program output: -82                
Correct output: -38                 | Program output: 28                 
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -8                  | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -33                 | Program output: 28                 
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -21                
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -45                 | Program output: 9                  
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -72                
Correct output: 16                  | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -53                 | Program output: -53                
Correct output: -91                 | Program output: -82                
Correct output: -88                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq})
Lexicase best program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq)) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 45
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq)) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 45
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (417 913 919 927 913 918 417 917 916 929)
Population mean number of elite cases: 8.19
Count of perfect (error zero) individuals by case: (417 913 919 927 913 918 417 917 916 929)
Population mean number of perfect (error zero) cases: 8.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_506} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq})
Best program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 38
Size: 55
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 1.814
Median total errors in population: 2
Error averages by case: (0.583 0.087 0.081 0.073 0.087 0.082 0.583 0.083 0.084 0.071)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.487
Average program size in population (points): 55.664
Average percent parens in population: 0.307
Minimum age in population: 21.28564453125
Maximum age in population: 25.59083557128906
Average age in population: 23.64129342651367
Median age in population: 23.712890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.01
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 8290864
--- Timings ---
Current time: 1559314624141 milliseconds
Total Time:          38.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.5 seconds, 64.3%
Fitness Testing:      7.8 seconds, 20.5%
Report:               5.6 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 17
Successful program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 55


Auto-simplifying with starting size: 55
step: 0
program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 500
program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 1000
program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 1500
program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 2000
program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 2500
program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 3000
program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 3500
program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 4000
program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 4500
program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 5000
program: (exec_yankdup in3 boolean_rot integer_yank in4 in1 integer_min integer_min print_integer integer_lte in1 exec_while (boolean_yankdup exec_pop () exec_do*range () integer_yankdup integer_max exec_y (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (exec_dup_items integer_gte tagged_506 exec_s () (exec_when (exec_yankdup exec_k_when_autoconstructing () (integer_yank) integer_dup integer_lt integer_swap) print_newline boolean_eq) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 210
Test mean error for best: 0.21000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -95                 | Program output: -95                
Correct output: -45                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: 51                  | Program output: 51                 
Correct output: -69                 | Program output: -69                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: 10                  | Program output: 10                 
Correct output: -13                 | Program output: -13                
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 36                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 37                 
Correct output: 18                  | Program output: 18                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 48                  | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 15                  | Program output: 15                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 22                 
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: 2                   | Program output: 2                  
Correct output: -18                 | Program output: -18                
Correct output: 53                  | Program output: 53                 
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: 19                  | Program output: 19                 
Correct output: -87                 | Program output: 27                 
Correct output: -85                 | Program output: -65                
Correct output: -82                 | Program output: -82                
Correct output: -38                 | Program output: 28                 
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -8                  | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -33                 | Program output: 28                 
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -21                
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -45                 | Program output: 9                  
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -72                
Correct output: 16                  | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -53                 | Program output: -53                
Correct output: -91                 | Program output: -82                
Correct output: -88                 | Program output: -7                 
;;******************************
