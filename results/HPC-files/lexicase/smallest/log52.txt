Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[81 11 81 81] 11] [[-41 -57 -41 -41] -57] [[93 93 -53 93] -53] [[29 29 29 -87] -87] [[-80 -80 -80 -43] -80] [[98 39 39 39] 39] [[84 84 37 84] 37] [[59 59 59 -39] -39] [[5 5 5 -61] -61] [[-62 1 1 1] -62] [(-96 -96 -96 -96) -96] [(41 41 41 41) 41] [(-15 -15 -15 -15) -15] [(67 67 67 67) 67] [(-48 -48 -48 -48) -48] [(62 62 32 24) 24] [(26 59 34 80) 26] [(96 88 1 42) 1] [(45 31 31 86) 31] [(37 92 63 86) 37] [(24 81 69 68) 24] [(55 84 16 3) 3] [(12 37 100 87) 12] [(59 89 55 80) 55] [(1 69 49 47) 1] [(4 26 73 81) 4] [(72 18 14 78) 14] [(11 55 42 21) 11] [(61 88 60 10) 10] [(59 96 1 75) 1] [(14 72 11 27) 11] [(28 39 20 81) 20] [(5 49 29 65) 5] [(18 53 70 3) 3] [(37 44 56 93) 37] [(71 -87 -40 -55) -87] [(45 -42 -93 -24) -93] [(5 26 -27 44) -27] [(90 40 41 -1) -1] [(73 15 -77 78) -77] [(15 -60 -32 57) -60] [(-6 -18 -41 -13) -41] [(79 15 7 47) 7] [(65 -55 31 -70) -70] [(1 -1 -66 89) -66] [(-98 13 33 -18) -98] [(-57 -42 -27 -60) -60] [(58 92 -9 -27) -27] [(-2 -14 2 65) -14] [(13 -83 -65 99) -83] [(89 -41 -15 -90) -90] [(86 -25 29 80) -25] [(75 -99 35 -2) -99] [(-92 -33 -40 64) -92] [(-75 12 -15 5) -75] [(-82 -76 -90 -55) -90] [(-77 -52 64 -3) -77] [(63 -16 -46 56) -46] [(-100 6 91 -29) -100] [(-64 -7 -59 -92) -92] [(25 -29 70 92) -29] [(35 -71 75 15) -71] [(-44 -40 79 2) -44] [(96 -72 -69 -71) -72] [(73 -9 -39 -26) -39] [(87 24 62 -48) -48] [(97 25 -94 -65) -94] [(-65 -11 -13 70) -65] [(-78 -70 38 83) -78] [(-97 0 -53 45) -97] [(-32 -100 -52 46) -100] [(38 -50 15 22) -50] [(96 -56 63 -99) -99] [(57 35 35 -85) -85] [(94 -24 -63 -27) -63] [(-33 68 -34 -92) -92] [(26 -7 -80 -65) -80] [(-32 -8 -13 71) -32] [(-92 75 -1 -22) -92] [(22 12 -68 92) -68] [(-94 -88 63 -88) -94] [(-5 -17 94 91) -17] [(56 -83 -35 -42) -83] [(-99 -76 -4 -27) -99] [(87 -44 15 82) -44] [(66 -86 65 66) -86] [(-46 9 82 84) -46] [(-50 25 -28 55) -50] [(-24 -93 -42 58) -93] [(54 100 11 48) 11] [(91 -35 43 -41) -41] [(-100 -95 19 -88) -100] [(8 -63 18 87) -63] [(5 -17 -72 -14) -72] [(10 81 17 -90) -90])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[81 11 81 81] 11]
Train Case:   6 | Input/Output: [[-41 -57 -41 -41] -57]
Train Case:   7 | Input/Output: [[93 93 -53 93] -53]
Train Case:   8 | Input/Output: [[29 29 29 -87] -87]
Train Case:   9 | Input/Output: [[-80 -80 -80 -43] -80]
Train Case:  10 | Input/Output: [[98 39 39 39] 39]
Train Case:  11 | Input/Output: [[84 84 37 84] 37]
Train Case:  12 | Input/Output: [[59 59 59 -39] -39]
Train Case:  13 | Input/Output: [[5 5 5 -61] -61]
Train Case:  14 | Input/Output: [[-62 1 1 1] -62]
Train Case:  15 | Input/Output: [(-96 -96 -96 -96) -96]
Train Case:  16 | Input/Output: [(41 41 41 41) 41]
Train Case:  17 | Input/Output: [(-15 -15 -15 -15) -15]
Train Case:  18 | Input/Output: [(67 67 67 67) 67]
Train Case:  19 | Input/Output: [(-48 -48 -48 -48) -48]
Train Case:  20 | Input/Output: [(62 62 32 24) 24]
Train Case:  21 | Input/Output: [(26 59 34 80) 26]
Train Case:  22 | Input/Output: [(96 88 1 42) 1]
Train Case:  23 | Input/Output: [(45 31 31 86) 31]
Train Case:  24 | Input/Output: [(37 92 63 86) 37]
Train Case:  25 | Input/Output: [(24 81 69 68) 24]
Train Case:  26 | Input/Output: [(55 84 16 3) 3]
Train Case:  27 | Input/Output: [(12 37 100 87) 12]
Train Case:  28 | Input/Output: [(59 89 55 80) 55]
Train Case:  29 | Input/Output: [(1 69 49 47) 1]
Train Case:  30 | Input/Output: [(4 26 73 81) 4]
Train Case:  31 | Input/Output: [(72 18 14 78) 14]
Train Case:  32 | Input/Output: [(11 55 42 21) 11]
Train Case:  33 | Input/Output: [(61 88 60 10) 10]
Train Case:  34 | Input/Output: [(59 96 1 75) 1]
Train Case:  35 | Input/Output: [(14 72 11 27) 11]
Train Case:  36 | Input/Output: [(28 39 20 81) 20]
Train Case:  37 | Input/Output: [(5 49 29 65) 5]
Train Case:  38 | Input/Output: [(18 53 70 3) 3]
Train Case:  39 | Input/Output: [(37 44 56 93) 37]
Train Case:  40 | Input/Output: [(71 -87 -40 -55) -87]
Train Case:  41 | Input/Output: [(45 -42 -93 -24) -93]
Train Case:  42 | Input/Output: [(5 26 -27 44) -27]
Train Case:  43 | Input/Output: [(90 40 41 -1) -1]
Train Case:  44 | Input/Output: [(73 15 -77 78) -77]
Train Case:  45 | Input/Output: [(15 -60 -32 57) -60]
Train Case:  46 | Input/Output: [(-6 -18 -41 -13) -41]
Train Case:  47 | Input/Output: [(79 15 7 47) 7]
Train Case:  48 | Input/Output: [(65 -55 31 -70) -70]
Train Case:  49 | Input/Output: [(1 -1 -66 89) -66]
Train Case:  50 | Input/Output: [(-98 13 33 -18) -98]
Train Case:  51 | Input/Output: [(-57 -42 -27 -60) -60]
Train Case:  52 | Input/Output: [(58 92 -9 -27) -27]
Train Case:  53 | Input/Output: [(-2 -14 2 65) -14]
Train Case:  54 | Input/Output: [(13 -83 -65 99) -83]
Train Case:  55 | Input/Output: [(89 -41 -15 -90) -90]
Train Case:  56 | Input/Output: [(86 -25 29 80) -25]
Train Case:  57 | Input/Output: [(75 -99 35 -2) -99]
Train Case:  58 | Input/Output: [(-92 -33 -40 64) -92]
Train Case:  59 | Input/Output: [(-75 12 -15 5) -75]
Train Case:  60 | Input/Output: [(-82 -76 -90 -55) -90]
Train Case:  61 | Input/Output: [(-77 -52 64 -3) -77]
Train Case:  62 | Input/Output: [(63 -16 -46 56) -46]
Train Case:  63 | Input/Output: [(-100 6 91 -29) -100]
Train Case:  64 | Input/Output: [(-64 -7 -59 -92) -92]
Train Case:  65 | Input/Output: [(25 -29 70 92) -29]
Train Case:  66 | Input/Output: [(35 -71 75 15) -71]
Train Case:  67 | Input/Output: [(-44 -40 79 2) -44]
Train Case:  68 | Input/Output: [(96 -72 -69 -71) -72]
Train Case:  69 | Input/Output: [(73 -9 -39 -26) -39]
Train Case:  70 | Input/Output: [(87 24 62 -48) -48]
Train Case:  71 | Input/Output: [(97 25 -94 -65) -94]
Train Case:  72 | Input/Output: [(-65 -11 -13 70) -65]
Train Case:  73 | Input/Output: [(-78 -70 38 83) -78]
Train Case:  74 | Input/Output: [(-97 0 -53 45) -97]
Train Case:  75 | Input/Output: [(-32 -100 -52 46) -100]
Train Case:  76 | Input/Output: [(38 -50 15 22) -50]
Train Case:  77 | Input/Output: [(96 -56 63 -99) -99]
Train Case:  78 | Input/Output: [(57 35 35 -85) -85]
Train Case:  79 | Input/Output: [(94 -24 -63 -27) -63]
Train Case:  80 | Input/Output: [(-33 68 -34 -92) -92]
Train Case:  81 | Input/Output: [(26 -7 -80 -65) -80]
Train Case:  82 | Input/Output: [(-32 -8 -13 71) -32]
Train Case:  83 | Input/Output: [(-92 75 -1 -22) -92]
Train Case:  84 | Input/Output: [(22 12 -68 92) -68]
Train Case:  85 | Input/Output: [(-94 -88 63 -88) -94]
Train Case:  86 | Input/Output: [(-5 -17 94 91) -17]
Train Case:  87 | Input/Output: [(56 -83 -35 -42) -83]
Train Case:  88 | Input/Output: [(-99 -76 -4 -27) -99]
Train Case:  89 | Input/Output: [(87 -44 15 82) -44]
Train Case:  90 | Input/Output: [(66 -86 65 66) -86]
Train Case:  91 | Input/Output: [(-46 9 82 84) -46]
Train Case:  92 | Input/Output: [(-50 25 -28 55) -50]
Train Case:  93 | Input/Output: [(-24 -93 -42 58) -93]
Train Case:  94 | Input/Output: [(54 100 11 48) 11]
Train Case:  95 | Input/Output: [(91 -35 43 -41) -41]
Train Case:  96 | Input/Output: [(-100 -95 19 -88) -100]
Train Case:  97 | Input/Output: [(8 -63 18 87) -63]
Train Case:  98 | Input/Output: [(5 -17 -72 -14) -72]
Train Case:  99 | Input/Output: [(10 81 17 -90) -90]
Test Case:   0 | Input/Output: [[-13 97 -13 -13] -13]
Test Case:   1 | Input/Output: [[62 62 -29 62] -29]
Test Case:   2 | Input/Output: [[4 4 4 11] 4]
Test Case:   3 | Input/Output: [[-54 59 59 59] -54]
Test Case:   4 | Input/Output: [[15 91 91 91] 15]
Test Case:   5 | Input/Output: [[-12 19 -12 -12] -12]
Test Case:   6 | Input/Output: [[47 -85 47 47] -85]
Test Case:   7 | Input/Output: [[54 54 -50 54] -50]
Test Case:   8 | Input/Output: [[-29 -29 -29 3] -29]
Test Case:   9 | Input/Output: [[14 9 9 9] 9]
Test Case:  10 | Input/Output: [[-44 -44 28 -44] -44]
Test Case:  11 | Input/Output: [[72 72 72 -96] -96]
Test Case:  12 | Input/Output: [[-3 -14 -14 -14] -14]
Test Case:  13 | Input/Output: [[61 61 61 73] 61]
Test Case:  14 | Input/Output: [[-97 -97 -97 79] -97]
Test Case:  15 | Input/Output: [[-53 -76 -76 -76] -76]
Test Case:  16 | Input/Output: [[-71 -28 -71 -71] -71]
Test Case:  17 | Input/Output: [[-41 -41 17 -41] -41]
Test Case:  18 | Input/Output: [[-34 -34 -34 -27] -34]
Test Case:  19 | Input/Output: [[-87 -95 -87 -87] -95]
Test Case:  20 | Input/Output: [[11 7 7 7] 7]
Test Case:  21 | Input/Output: [[83 83 83 -18] -18]
Test Case:  22 | Input/Output: [[50 15 50 50] 15]
Test Case:  23 | Input/Output: [[-82 -82 73 -82] -82]
Test Case:  24 | Input/Output: [[-86 -54 -54 -54] -86]
Test Case:  25 | Input/Output: [[-84 6 6 6] -84]
Test Case:  26 | Input/Output: [[12 12 75 12] 12]
Test Case:  27 | Input/Output: [[74 -66 -66 -66] -66]
Test Case:  28 | Input/Output: [[6 25 6 6] 6]
Test Case:  29 | Input/Output: [[-70 -70 -70 96] -70]
Test Case:  30 | Input/Output: [[10 72 10 10] 10]
Test Case:  31 | Input/Output: [[74 74 74 21] 21]
Test Case:  32 | Input/Output: [[56 56 -53 56] -53]
Test Case:  33 | Input/Output: [[53 -22 53 53] -22]
Test Case:  34 | Input/Output: [[-62 77 77 77] -62]
Test Case:  35 | Input/Output: [[12 12 12 -87] -87]
Test Case:  36 | Input/Output: [[90 90 65 90] 65]
Test Case:  37 | Input/Output: [[81 81 16 81] 16]
Test Case:  38 | Input/Output: [[39 39 39 -83] -83]
Test Case:  39 | Input/Output: [[82 82 82 -77] -77]
Test Case:  40 | Input/Output: [[-38 -47 -38 -38] -47]
Test Case:  41 | Input/Output: [[28 48 48 48] 28]
Test Case:  42 | Input/Output: [[-100 72 -100 -100] -100]
Test Case:  43 | Input/Output: [[30 -98 30 30] -98]
Test Case:  44 | Input/Output: [[-88 -88 -88 33] -88]
Test Case:  45 | Input/Output: [[77 -96 -96 -96] -96]
Test Case:  46 | Input/Output: [[62 62 7 62] 7]
Test Case:  47 | Input/Output: [[-17 -17 -17 67] -17]
Test Case:  48 | Input/Output: [[-69 -69 -69 70] -69]
Test Case:  49 | Input/Output: [[84 14 84 84] 14]
Test Case:  50 | Input/Output: [[42 -89 42 42] -89]
Test Case:  51 | Input/Output: [[41 98 41 41] 41]
Test Case:  52 | Input/Output: [[-60 -60 -60 -90] -90]
Test Case:  53 | Input/Output: [[5 5 5 98] 5]
Test Case:  54 | Input/Output: [[-99 -99 -36 -99] -99]
Test Case:  55 | Input/Output: [[-51 -51 -9 -51] -51]
Test Case:  56 | Input/Output: [[-75 -29 -29 -29] -75]
Test Case:  57 | Input/Output: [[-52 -52 -52 -52] -52]
Test Case:  58 | Input/Output: [[-55 -55 -67 -55] -67]
Test Case:  59 | Input/Output: [[60 -73 60 60] -73]
Test Case:  60 | Input/Output: [[33 63 33 33] 33]
Test Case:  61 | Input/Output: [[-44 61 -44 -44] -44]
Test Case:  62 | Input/Output: [[3 47 47 47] 3]
Test Case:  63 | Input/Output: [[65 -43 65 65] -43]
Test Case:  64 | Input/Output: [[-35 -35 -3 -35] -35]
Test Case:  65 | Input/Output: [[51 51 -45 51] -45]
Test Case:  66 | Input/Output: [[-54 -54 -54 -65] -65]
Test Case:  67 | Input/Output: [[64 72 64 64] 64]
Test Case:  68 | Input/Output: [[-40 -53 -53 -53] -53]
Test Case:  69 | Input/Output: [[83 83 83 20] 20]
Test Case:  70 | Input/Output: [[17 -19 -19 -19] -19]
Test Case:  71 | Input/Output: [[49 -59 49 49] -59]
Test Case:  72 | Input/Output: [[6 -87 -87 -87] -87]
Test Case:  73 | Input/Output: [[82 82 98 82] 82]
Test Case:  74 | Input/Output: [[-80 -80 -41 -80] -80]
Test Case:  75 | Input/Output: [[-60 41 41 41] -60]
Test Case:  76 | Input/Output: [[-28 -28 -28 -79] -79]
Test Case:  77 | Input/Output: [[-73 -27 -73 -73] -73]
Test Case:  78 | Input/Output: [[-36 -25 -25 -25] -36]
Test Case:  79 | Input/Output: [[72 9 72 72] 9]
Test Case:  80 | Input/Output: [[-89 -63 -63 -63] -89]
Test Case:  81 | Input/Output: [[55 55 55 -32] -32]
Test Case:  82 | Input/Output: [[85 50 85 85] 50]
Test Case:  83 | Input/Output: [[-9 88 88 88] -9]
Test Case:  84 | Input/Output: [[58 -94 58 58] -94]
Test Case:  85 | Input/Output: [[56 -64 -64 -64] -64]
Test Case:  86 | Input/Output: [[-97 -97 25 -97] -97]
Test Case:  87 | Input/Output: [[-14 -14 -23 -14] -23]
Test Case:  88 | Input/Output: [[-90 89 89 89] -90]
Test Case:  89 | Input/Output: [[68 68 29 68] 29]
Test Case:  90 | Input/Output: [[24 24 24 -87] -87]
Test Case:  91 | Input/Output: [[-33 -78 -78 -78] -78]
Test Case:  92 | Input/Output: [[-35 44 -35 -35] -35]
Test Case:  93 | Input/Output: [[35 35 35 -29] -29]
Test Case:  94 | Input/Output: [[-1 -83 -1 -1] -83]
Test Case:  95 | Input/Output: [[11 11 11 11] 11]
Test Case:  96 | Input/Output: [[-73 -30 -73 -73] -73]
Test Case:  97 | Input/Output: [[-1 64 -1 -1] -1]
Test Case:  98 | Input/Output: [[-24 -24 -24 -21] -24]
Test Case:  99 | Input/Output: [[-25 -25 51 -25] -25]
Test Case: 100 | Input/Output: [(81 81 81 81) 81]
Test Case: 101 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 102 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 103 | Input/Output: [(80 80 80 80) 80]
Test Case: 104 | Input/Output: [(15 15 15 15) 15]
Test Case: 105 | Input/Output: [(28 28 28 28) 28]
Test Case: 106 | Input/Output: [(54 54 54 54) 54]
Test Case: 107 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 108 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 109 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 110 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 111 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 112 | Input/Output: [(19 19 19 19) 19]
Test Case: 113 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 114 | Input/Output: [(66 66 66 66) 66]
Test Case: 115 | Input/Output: [(58 58 58 58) 58]
Test Case: 116 | Input/Output: [(86 86 86 86) 86]
Test Case: 117 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 118 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 119 | Input/Output: [(94 94 94 94) 94]
Test Case: 120 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 121 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 122 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 123 | Input/Output: [(94 94 94 94) 94]
Test Case: 124 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 125 | Input/Output: [(27 27 27 27) 27]
Test Case: 126 | Input/Output: [(5 5 5 5) 5]
Test Case: 127 | Input/Output: [(66 66 66 66) 66]
Test Case: 128 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 129 | Input/Output: [(80 80 80 80) 80]
Test Case: 130 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 131 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 132 | Input/Output: [(84 84 84 84) 84]
Test Case: 133 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 134 | Input/Output: [(59 59 59 59) 59]
Test Case: 135 | Input/Output: [(57 57 57 57) 57]
Test Case: 136 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 137 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 138 | Input/Output: [(71 71 71 71) 71]
Test Case: 139 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 140 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 141 | Input/Output: [(35 35 35 35) 35]
Test Case: 142 | Input/Output: [(43 43 43 43) 43]
Test Case: 143 | Input/Output: [(8 8 8 8) 8]
Test Case: 144 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 145 | Input/Output: [(80 80 80 80) 80]
Test Case: 146 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 147 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 148 | Input/Output: [(77 77 77 77) 77]
Test Case: 149 | Input/Output: [(37 37 37 37) 37]
Test Case: 150 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 151 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 152 | Input/Output: [(61 61 61 61) 61]
Test Case: 153 | Input/Output: [(92 92 92 92) 92]
Test Case: 154 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 155 | Input/Output: [(51 51 51 51) 51]
Test Case: 156 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 157 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 158 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 159 | Input/Output: [(80 80 80 80) 80]
Test Case: 160 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 161 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 162 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 163 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 164 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 165 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 166 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 167 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 168 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 169 | Input/Output: [(99 99 99 99) 99]
Test Case: 170 | Input/Output: [(55 55 55 55) 55]
Test Case: 171 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 172 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 173 | Input/Output: [(36 36 36 36) 36]
Test Case: 174 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 175 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 176 | Input/Output: [(61 61 61 61) 61]
Test Case: 177 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 178 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 179 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 180 | Input/Output: [(64 64 64 64) 64]
Test Case: 181 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 182 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 183 | Input/Output: [(90 90 90 90) 90]
Test Case: 184 | Input/Output: [(32 32 32 32) 32]
Test Case: 185 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 186 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 187 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 188 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 189 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 190 | Input/Output: [(9 9 9 9) 9]
Test Case: 191 | Input/Output: [(30 30 30 30) 30]
Test Case: 192 | Input/Output: [(3 3 3 3) 3]
Test Case: 193 | Input/Output: [(4 4 4 4) 4]
Test Case: 194 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 195 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 196 | Input/Output: [(26 26 26 26) 26]
Test Case: 197 | Input/Output: [(87 87 87 87) 87]
Test Case: 198 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 199 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 200 | Input/Output: [(30 6 19 8) 6]
Test Case: 201 | Input/Output: [(8 3 45 57) 3]
Test Case: 202 | Input/Output: [(28 24 37 90) 24]
Test Case: 203 | Input/Output: [(17 53 40 78) 17]
Test Case: 204 | Input/Output: [(12 49 93 74) 12]
Test Case: 205 | Input/Output: [(26 63 89 95) 26]
Test Case: 206 | Input/Output: [(85 3 76 26) 3]
Test Case: 207 | Input/Output: [(72 73 14 81) 14]
Test Case: 208 | Input/Output: [(33 79 41 25) 25]
Test Case: 209 | Input/Output: [(33 71 67 81) 33]
Test Case: 210 | Input/Output: [(40 2 96 66) 2]
Test Case: 211 | Input/Output: [(56 76 68 79) 56]
Test Case: 212 | Input/Output: [(1 10 96 88) 1]
Test Case: 213 | Input/Output: [(63 97 26 81) 26]
Test Case: 214 | Input/Output: [(94 38 97 48) 38]
Test Case: 215 | Input/Output: [(63 23 14 87) 14]
Test Case: 216 | Input/Output: [(40 71 14 14) 14]
Test Case: 217 | Input/Output: [(50 9 62 26) 9]
Test Case: 218 | Input/Output: [(60 53 26 63) 26]
Test Case: 219 | Input/Output: [(14 3 69 1) 1]
Test Case: 220 | Input/Output: [(56 38 63 94) 38]
Test Case: 221 | Input/Output: [(29 59 17 2) 2]
Test Case: 222 | Input/Output: [(37 86 16 81) 16]
Test Case: 223 | Input/Output: [(80 67 9 6) 6]
Test Case: 224 | Input/Output: [(35 75 24 76) 24]
Test Case: 225 | Input/Output: [(84 57 22 75) 22]
Test Case: 226 | Input/Output: [(54 94 87 7) 7]
Test Case: 227 | Input/Output: [(67 18 100 96) 18]
Test Case: 228 | Input/Output: [(56 50 80 25) 25]
Test Case: 229 | Input/Output: [(22 50 72 80) 22]
Test Case: 230 | Input/Output: [(67 33 53 12) 12]
Test Case: 231 | Input/Output: [(59 99 85 67) 59]
Test Case: 232 | Input/Output: [(48 22 90 6) 6]
Test Case: 233 | Input/Output: [(10 78 61 10) 10]
Test Case: 234 | Input/Output: [(96 35 28 85) 28]
Test Case: 235 | Input/Output: [(31 95 77 0) 0]
Test Case: 236 | Input/Output: [(66 85 24 8) 8]
Test Case: 237 | Input/Output: [(72 84 80 57) 57]
Test Case: 238 | Input/Output: [(69 52 53 24) 24]
Test Case: 239 | Input/Output: [(78 61 20 17) 17]
Test Case: 240 | Input/Output: [(82 30 15 71) 15]
Test Case: 241 | Input/Output: [(94 25 87 20) 20]
Test Case: 242 | Input/Output: [(46 34 24 16) 16]
Test Case: 243 | Input/Output: [(75 30 6 50) 6]
Test Case: 244 | Input/Output: [(57 90 1 66) 1]
Test Case: 245 | Input/Output: [(69 65 29 16) 16]
Test Case: 246 | Input/Output: [(68 38 10 67) 10]
Test Case: 247 | Input/Output: [(70 45 9 66) 9]
Test Case: 248 | Input/Output: [(18 84 35 23) 18]
Test Case: 249 | Input/Output: [(75 99 74 21) 21]
Test Case: 250 | Input/Output: [(100 97 93 75) 75]
Test Case: 251 | Input/Output: [(88 4 5 99) 4]
Test Case: 252 | Input/Output: [(51 22 35 20) 20]
Test Case: 253 | Input/Output: [(91 83 32 37) 32]
Test Case: 254 | Input/Output: [(75 70 31 51) 31]
Test Case: 255 | Input/Output: [(44 94 62 16) 16]
Test Case: 256 | Input/Output: [(58 36 28 91) 28]
Test Case: 257 | Input/Output: [(53 17 99 99) 17]
Test Case: 258 | Input/Output: [(58 22 30 67) 22]
Test Case: 259 | Input/Output: [(24 66 96 54) 24]
Test Case: 260 | Input/Output: [(18 80 38 0) 0]
Test Case: 261 | Input/Output: [(38 24 51 88) 24]
Test Case: 262 | Input/Output: [(58 5 97 5) 5]
Test Case: 263 | Input/Output: [(89 31 18 53) 18]
Test Case: 264 | Input/Output: [(33 80 65 52) 33]
Test Case: 265 | Input/Output: [(86 35 80 1) 1]
Test Case: 266 | Input/Output: [(7 98 36 75) 7]
Test Case: 267 | Input/Output: [(25 14 28 14) 14]
Test Case: 268 | Input/Output: [(82 80 90 64) 64]
Test Case: 269 | Input/Output: [(42 27 67 1) 1]
Test Case: 270 | Input/Output: [(97 86 75 18) 18]
Test Case: 271 | Input/Output: [(61 47 71 76) 47]
Test Case: 272 | Input/Output: [(26 26 93 97) 26]
Test Case: 273 | Input/Output: [(52 13 50 39) 13]
Test Case: 274 | Input/Output: [(9 72 81 66) 9]
Test Case: 275 | Input/Output: [(96 36 24 63) 24]
Test Case: 276 | Input/Output: [(50 54 78 87) 50]
Test Case: 277 | Input/Output: [(18 46 26 18) 18]
Test Case: 278 | Input/Output: [(42 14 31 34) 14]
Test Case: 279 | Input/Output: [(38 24 29 96) 24]
Test Case: 280 | Input/Output: [(8 87 60 9) 8]
Test Case: 281 | Input/Output: [(84 19 91 9) 9]
Test Case: 282 | Input/Output: [(25 41 37 34) 25]
Test Case: 283 | Input/Output: [(60 63 13 73) 13]
Test Case: 284 | Input/Output: [(43 5 2 54) 2]
Test Case: 285 | Input/Output: [(56 100 43 61) 43]
Test Case: 286 | Input/Output: [(46 60 86 64) 46]
Test Case: 287 | Input/Output: [(85 76 100 34) 34]
Test Case: 288 | Input/Output: [(43 77 86 69) 43]
Test Case: 289 | Input/Output: [(96 87 96 34) 34]
Test Case: 290 | Input/Output: [(2 59 22 75) 2]
Test Case: 291 | Input/Output: [(65 100 51 46) 46]
Test Case: 292 | Input/Output: [(0 79 28 83) 0]
Test Case: 293 | Input/Output: [(23 5 60 58) 5]
Test Case: 294 | Input/Output: [(90 5 12 51) 5]
Test Case: 295 | Input/Output: [(4 51 48 10) 4]
Test Case: 296 | Input/Output: [(3 28 18 60) 3]
Test Case: 297 | Input/Output: [(46 53 86 10) 10]
Test Case: 298 | Input/Output: [(94 67 88 15) 15]
Test Case: 299 | Input/Output: [(20 80 57 7) 7]
Test Case: 300 | Input/Output: [(61 52 90 94) 52]
Test Case: 301 | Input/Output: [(9 26 76 97) 9]
Test Case: 302 | Input/Output: [(22 43 37 70) 22]
Test Case: 303 | Input/Output: [(35 65 89 50) 35]
Test Case: 304 | Input/Output: [(45 100 37 8) 8]
Test Case: 305 | Input/Output: [(18 48 2 26) 2]
Test Case: 306 | Input/Output: [(96 65 86 13) 13]
Test Case: 307 | Input/Output: [(49 94 99 98) 49]
Test Case: 308 | Input/Output: [(86 38 51 78) 38]
Test Case: 309 | Input/Output: [(8 62 16 46) 8]
Test Case: 310 | Input/Output: [(70 71 0 17) 0]
Test Case: 311 | Input/Output: [(6 95 47 35) 6]
Test Case: 312 | Input/Output: [(58 24 24 68) 24]
Test Case: 313 | Input/Output: [(59 63 77 60) 59]
Test Case: 314 | Input/Output: [(11 67 57 10) 10]
Test Case: 315 | Input/Output: [(6 19 74 10) 6]
Test Case: 316 | Input/Output: [(98 72 86 45) 45]
Test Case: 317 | Input/Output: [(62 89 53 51) 51]
Test Case: 318 | Input/Output: [(36 27 56 36) 27]
Test Case: 319 | Input/Output: [(19 56 63 3) 3]
Test Case: 320 | Input/Output: [(64 99 27 74) 27]
Test Case: 321 | Input/Output: [(82 88 76 60) 60]
Test Case: 322 | Input/Output: [(11 45 57 46) 11]
Test Case: 323 | Input/Output: [(72 71 69 10) 10]
Test Case: 324 | Input/Output: [(70 0 4 1) 0]
Test Case: 325 | Input/Output: [(45 62 54 45) 45]
Test Case: 326 | Input/Output: [(69 7 62 29) 7]
Test Case: 327 | Input/Output: [(3 13 76 22) 3]
Test Case: 328 | Input/Output: [(14 10 0 25) 0]
Test Case: 329 | Input/Output: [(11 30 44 91) 11]
Test Case: 330 | Input/Output: [(10 13 32 26) 10]
Test Case: 331 | Input/Output: [(25 45 26 54) 25]
Test Case: 332 | Input/Output: [(24 47 28 8) 8]
Test Case: 333 | Input/Output: [(55 55 63 10) 10]
Test Case: 334 | Input/Output: [(92 85 59 23) 23]
Test Case: 335 | Input/Output: [(13 49 92 27) 13]
Test Case: 336 | Input/Output: [(66 19 56 71) 19]
Test Case: 337 | Input/Output: [(35 83 90 3) 3]
Test Case: 338 | Input/Output: [(99 23 78 15) 15]
Test Case: 339 | Input/Output: [(73 28 80 83) 28]
Test Case: 340 | Input/Output: [(97 33 53 54) 33]
Test Case: 341 | Input/Output: [(58 94 85 32) 32]
Test Case: 342 | Input/Output: [(14 100 78 54) 14]
Test Case: 343 | Input/Output: [(74 46 22 11) 11]
Test Case: 344 | Input/Output: [(29 47 5 33) 5]
Test Case: 345 | Input/Output: [(84 72 25 57) 25]
Test Case: 346 | Input/Output: [(19 60 23 93) 19]
Test Case: 347 | Input/Output: [(16 12 83 56) 12]
Test Case: 348 | Input/Output: [(93 84 74 19) 19]
Test Case: 349 | Input/Output: [(51 16 26 50) 16]
Test Case: 350 | Input/Output: [(18 41 66 14) 14]
Test Case: 351 | Input/Output: [(22 36 0 67) 0]
Test Case: 352 | Input/Output: [(27 44 48 17) 17]
Test Case: 353 | Input/Output: [(7 70 94 52) 7]
Test Case: 354 | Input/Output: [(19 43 74 84) 19]
Test Case: 355 | Input/Output: [(38 25 65 96) 25]
Test Case: 356 | Input/Output: [(5 58 15 43) 5]
Test Case: 357 | Input/Output: [(78 19 13 12) 12]
Test Case: 358 | Input/Output: [(28 33 72 6) 6]
Test Case: 359 | Input/Output: [(96 89 99 81) 81]
Test Case: 360 | Input/Output: [(31 43 58 28) 28]
Test Case: 361 | Input/Output: [(18 64 79 84) 18]
Test Case: 362 | Input/Output: [(66 11 47 70) 11]
Test Case: 363 | Input/Output: [(79 80 13 19) 13]
Test Case: 364 | Input/Output: [(21 49 11 2) 2]
Test Case: 365 | Input/Output: [(95 57 32 41) 32]
Test Case: 366 | Input/Output: [(13 82 71 32) 13]
Test Case: 367 | Input/Output: [(96 80 65 41) 41]
Test Case: 368 | Input/Output: [(68 35 54 84) 35]
Test Case: 369 | Input/Output: [(99 95 10 92) 10]
Test Case: 370 | Input/Output: [(60 24 4 37) 4]
Test Case: 371 | Input/Output: [(67 39 64 10) 10]
Test Case: 372 | Input/Output: [(10 60 25 34) 10]
Test Case: 373 | Input/Output: [(93 68 70 40) 40]
Test Case: 374 | Input/Output: [(17 70 0 42) 0]
Test Case: 375 | Input/Output: [(32 52 60 4) 4]
Test Case: 376 | Input/Output: [(46 65 65 12) 12]
Test Case: 377 | Input/Output: [(58 27 19 89) 19]
Test Case: 378 | Input/Output: [(52 6 2 36) 2]
Test Case: 379 | Input/Output: [(85 15 38 20) 15]
Test Case: 380 | Input/Output: [(28 77 3 79) 3]
Test Case: 381 | Input/Output: [(77 79 31 3) 3]
Test Case: 382 | Input/Output: [(26 72 63 41) 26]
Test Case: 383 | Input/Output: [(22 37 58 66) 22]
Test Case: 384 | Input/Output: [(91 33 38 62) 33]
Test Case: 385 | Input/Output: [(17 81 62 74) 17]
Test Case: 386 | Input/Output: [(13 70 40 29) 13]
Test Case: 387 | Input/Output: [(44 85 94 25) 25]
Test Case: 388 | Input/Output: [(66 89 64 51) 51]
Test Case: 389 | Input/Output: [(50 3 29 35) 3]
Test Case: 390 | Input/Output: [(96 49 83 36) 36]
Test Case: 391 | Input/Output: [(74 70 57 66) 57]
Test Case: 392 | Input/Output: [(29 15 52 62) 15]
Test Case: 393 | Input/Output: [(3 43 42 26) 3]
Test Case: 394 | Input/Output: [(89 79 49 22) 22]
Test Case: 395 | Input/Output: [(86 70 95 8) 8]
Test Case: 396 | Input/Output: [(17 65 16 25) 16]
Test Case: 397 | Input/Output: [(11 68 27 20) 11]
Test Case: 398 | Input/Output: [(70 93 21 25) 21]
Test Case: 399 | Input/Output: [(3 64 80 53) 3]
Test Case: 400 | Input/Output: [(-20 10 -41 49) -41]
Test Case: 401 | Input/Output: [(-66 -80 64 62) -80]
Test Case: 402 | Input/Output: [(-11 81 67 -96) -96]
Test Case: 403 | Input/Output: [(-27 46 22 -41) -41]
Test Case: 404 | Input/Output: [(-53 -10 -96 19) -96]
Test Case: 405 | Input/Output: [(-28 7 -12 -15) -28]
Test Case: 406 | Input/Output: [(47 68 84 86) 47]
Test Case: 407 | Input/Output: [(-30 -48 39 -42) -48]
Test Case: 408 | Input/Output: [(-71 42 -90 -91) -91]
Test Case: 409 | Input/Output: [(-43 -32 73 -68) -68]
Test Case: 410 | Input/Output: [(-72 46 50 -97) -97]
Test Case: 411 | Input/Output: [(-55 5 94 23) -55]
Test Case: 412 | Input/Output: [(57 -34 4 0) -34]
Test Case: 413 | Input/Output: [(-1 15 99 82) -1]
Test Case: 414 | Input/Output: [(-36 -12 21 87) -36]
Test Case: 415 | Input/Output: [(-10 -28 89 -30) -30]
Test Case: 416 | Input/Output: [(-28 96 3 6) -28]
Test Case: 417 | Input/Output: [(-80 -11 -23 100) -80]
Test Case: 418 | Input/Output: [(-48 -76 93 52) -76]
Test Case: 419 | Input/Output: [(2 -32 0 -50) -50]
Test Case: 420 | Input/Output: [(-1 35 1 -61) -61]
Test Case: 421 | Input/Output: [(82 -49 16 41) -49]
Test Case: 422 | Input/Output: [(50 92 -63 -23) -63]
Test Case: 423 | Input/Output: [(-45 -7 90 -11) -45]
Test Case: 424 | Input/Output: [(47 -44 -51 -28) -51]
Test Case: 425 | Input/Output: [(-79 24 -53 -93) -93]
Test Case: 426 | Input/Output: [(-82 79 98 74) -82]
Test Case: 427 | Input/Output: [(22 20 -58 -89) -89]
Test Case: 428 | Input/Output: [(79 54 -43 9) -43]
Test Case: 429 | Input/Output: [(-34 -78 82 -49) -78]
Test Case: 430 | Input/Output: [(-68 -65 -24 -88) -88]
Test Case: 431 | Input/Output: [(96 86 49 55) 49]
Test Case: 432 | Input/Output: [(-58 34 -70 45) -70]
Test Case: 433 | Input/Output: [(2 -7 0 -32) -32]
Test Case: 434 | Input/Output: [(1 -42 -63 -52) -63]
Test Case: 435 | Input/Output: [(43 -95 -57 62) -95]
Test Case: 436 | Input/Output: [(-67 -51 8 -23) -67]
Test Case: 437 | Input/Output: [(-65 -15 66 15) -65]
Test Case: 438 | Input/Output: [(87 -76 -78 -20) -78]
Test Case: 439 | Input/Output: [(-45 63 40 -52) -52]
Test Case: 440 | Input/Output: [(-94 97 -85 93) -94]
Test Case: 441 | Input/Output: [(-20 86 -34 20) -34]
Test Case: 442 | Input/Output: [(24 69 14 -57) -57]
Test Case: 443 | Input/Output: [(57 -78 -35 87) -78]
Test Case: 444 | Input/Output: [(48 -87 -76 -43) -87]
Test Case: 445 | Input/Output: [(-71 3 75 -96) -96]
Test Case: 446 | Input/Output: [(9 -78 -46 -51) -78]
Test Case: 447 | Input/Output: [(49 -77 -20 -33) -77]
Test Case: 448 | Input/Output: [(82 70 -41 40) -41]
Test Case: 449 | Input/Output: [(-49 -12 -62 58) -62]
Test Case: 450 | Input/Output: [(-49 -14 -95 46) -95]
Test Case: 451 | Input/Output: [(-36 -57 27 -56) -57]
Test Case: 452 | Input/Output: [(66 -97 -27 -4) -97]
Test Case: 453 | Input/Output: [(-6 13 -9 -48) -48]
Test Case: 454 | Input/Output: [(61 71 22 -28) -28]
Test Case: 455 | Input/Output: [(-42 95 32 -49) -49]
Test Case: 456 | Input/Output: [(-55 -21 41 -99) -99]
Test Case: 457 | Input/Output: [(26 -16 63 -64) -64]
Test Case: 458 | Input/Output: [(92 -41 -88 94) -88]
Test Case: 459 | Input/Output: [(42 66 -38 -54) -54]
Test Case: 460 | Input/Output: [(29 7 59 -95) -95]
Test Case: 461 | Input/Output: [(-98 67 -67 4) -98]
Test Case: 462 | Input/Output: [(80 -66 -72 53) -72]
Test Case: 463 | Input/Output: [(-74 52 38 35) -74]
Test Case: 464 | Input/Output: [(7 -25 27 40) -25]
Test Case: 465 | Input/Output: [(-44 -53 -22 -100) -100]
Test Case: 466 | Input/Output: [(-30 52 -54 -5) -54]
Test Case: 467 | Input/Output: [(52 69 57 19) 19]
Test Case: 468 | Input/Output: [(63 48 -79 53) -79]
Test Case: 469 | Input/Output: [(91 -29 89 -43) -43]
Test Case: 470 | Input/Output: [(3 -51 -16 -80) -80]
Test Case: 471 | Input/Output: [(65 -95 85 -50) -95]
Test Case: 472 | Input/Output: [(-29 1 12 65) -29]
Test Case: 473 | Input/Output: [(85 -24 41 -85) -85]
Test Case: 474 | Input/Output: [(-89 -45 21 8) -89]
Test Case: 475 | Input/Output: [(59 37 -23 74) -23]
Test Case: 476 | Input/Output: [(25 94 96 41) 25]
Test Case: 477 | Input/Output: [(-29 -21 16 100) -29]
Test Case: 478 | Input/Output: [(96 -21 -55 2) -55]
Test Case: 479 | Input/Output: [(-76 -37 39 -90) -90]
Test Case: 480 | Input/Output: [(57 -39 -28 -30) -39]
Test Case: 481 | Input/Output: [(-20 8 -32 2) -32]
Test Case: 482 | Input/Output: [(-64 22 -30 92) -64]
Test Case: 483 | Input/Output: [(31 -95 48 -97) -97]
Test Case: 484 | Input/Output: [(5 -59 -9 -49) -59]
Test Case: 485 | Input/Output: [(-80 3 64 71) -80]
Test Case: 486 | Input/Output: [(-5 -30 74 -14) -30]
Test Case: 487 | Input/Output: [(30 20 41 80) 20]
Test Case: 488 | Input/Output: [(-64 46 -16 75) -64]
Test Case: 489 | Input/Output: [(31 -24 42 -79) -79]
Test Case: 490 | Input/Output: [(-71 -15 77 -100) -100]
Test Case: 491 | Input/Output: [(-69 -37 -83 38) -83]
Test Case: 492 | Input/Output: [(63 -97 46 12) -97]
Test Case: 493 | Input/Output: [(-53 27 -90 51) -90]
Test Case: 494 | Input/Output: [(-64 88 18 67) -64]
Test Case: 495 | Input/Output: [(-31 -31 -100 48) -100]
Test Case: 496 | Input/Output: [(-93 10 53 47) -93]
Test Case: 497 | Input/Output: [(17 -100 25 -96) -100]
Test Case: 498 | Input/Output: [(80 -44 -92 50) -92]
Test Case: 499 | Input/Output: [(-77 19 -64 64) -77]
Test Case: 500 | Input/Output: [(-76 -11 -85 -57) -85]
Test Case: 501 | Input/Output: [(-27 -7 -5 -97) -97]
Test Case: 502 | Input/Output: [(-64 25 -74 5) -74]
Test Case: 503 | Input/Output: [(39 -64 52 87) -64]
Test Case: 504 | Input/Output: [(-84 -79 78 58) -84]
Test Case: 505 | Input/Output: [(2 -96 -26 -29) -96]
Test Case: 506 | Input/Output: [(87 -79 3 5) -79]
Test Case: 507 | Input/Output: [(-65 66 99 49) -65]
Test Case: 508 | Input/Output: [(-10 51 3 85) -10]
Test Case: 509 | Input/Output: [(46 13 58 58) 13]
Test Case: 510 | Input/Output: [(27 21 -27 36) -27]
Test Case: 511 | Input/Output: [(-99 -85 0 -1) -99]
Test Case: 512 | Input/Output: [(64 20 31 13) 13]
Test Case: 513 | Input/Output: [(-74 20 33 -82) -82]
Test Case: 514 | Input/Output: [(-17 -96 99 -92) -96]
Test Case: 515 | Input/Output: [(-50 -10 -74 97) -74]
Test Case: 516 | Input/Output: [(67 58 22 37) 22]
Test Case: 517 | Input/Output: [(-25 -26 -28 4) -28]
Test Case: 518 | Input/Output: [(-84 -33 -10 -58) -84]
Test Case: 519 | Input/Output: [(-46 77 7 -11) -46]
Test Case: 520 | Input/Output: [(-53 -19 70 -16) -53]
Test Case: 521 | Input/Output: [(-22 29 10 93) -22]
Test Case: 522 | Input/Output: [(63 -75 73 5) -75]
Test Case: 523 | Input/Output: [(-36 86 -50 -74) -74]
Test Case: 524 | Input/Output: [(-57 -85 16 83) -85]
Test Case: 525 | Input/Output: [(23 52 -6 28) -6]
Test Case: 526 | Input/Output: [(-75 89 74 53) -75]
Test Case: 527 | Input/Output: [(62 75 94 59) 59]
Test Case: 528 | Input/Output: [(55 57 6 -5) -5]
Test Case: 529 | Input/Output: [(6 67 -92 -48) -92]
Test Case: 530 | Input/Output: [(29 77 25 9) 9]
Test Case: 531 | Input/Output: [(-38 19 21 -38) -38]
Test Case: 532 | Input/Output: [(32 -35 87 81) -35]
Test Case: 533 | Input/Output: [(62 -87 72 -52) -87]
Test Case: 534 | Input/Output: [(-32 85 -91 73) -91]
Test Case: 535 | Input/Output: [(-29 9 -32 68) -32]
Test Case: 536 | Input/Output: [(13 87 69 -23) -23]
Test Case: 537 | Input/Output: [(-85 96 -54 -79) -85]
Test Case: 538 | Input/Output: [(-36 -84 92 -60) -84]
Test Case: 539 | Input/Output: [(-61 40 93 -58) -61]
Test Case: 540 | Input/Output: [(-76 -13 29 -22) -76]
Test Case: 541 | Input/Output: [(95 12 -10 -88) -88]
Test Case: 542 | Input/Output: [(23 56 5 -31) -31]
Test Case: 543 | Input/Output: [(-52 -51 76 22) -52]
Test Case: 544 | Input/Output: [(69 14 -63 59) -63]
Test Case: 545 | Input/Output: [(7 -18 0 -11) -18]
Test Case: 546 | Input/Output: [(-33 -91 66 -17) -91]
Test Case: 547 | Input/Output: [(-77 20 25 3) -77]
Test Case: 548 | Input/Output: [(77 -73 -45 18) -73]
Test Case: 549 | Input/Output: [(1 -53 -15 -94) -94]
Test Case: 550 | Input/Output: [(-61 56 96 88) -61]
Test Case: 551 | Input/Output: [(87 11 15 78) 11]
Test Case: 552 | Input/Output: [(-90 39 38 47) -90]
Test Case: 553 | Input/Output: [(-96 -49 15 78) -96]
Test Case: 554 | Input/Output: [(93 -36 -75 -51) -75]
Test Case: 555 | Input/Output: [(-75 -51 -51 12) -75]
Test Case: 556 | Input/Output: [(-22 93 88 79) -22]
Test Case: 557 | Input/Output: [(-29 -52 -52 -80) -80]
Test Case: 558 | Input/Output: [(-3 -76 -7 14) -76]
Test Case: 559 | Input/Output: [(-7 -46 -73 1) -73]
Test Case: 560 | Input/Output: [(12 -61 59 43) -61]
Test Case: 561 | Input/Output: [(-11 61 99 -12) -12]
Test Case: 562 | Input/Output: [(-23 -80 -52 75) -80]
Test Case: 563 | Input/Output: [(70 -27 -69 84) -69]
Test Case: 564 | Input/Output: [(-56 21 -80 -30) -80]
Test Case: 565 | Input/Output: [(-44 87 97 -41) -44]
Test Case: 566 | Input/Output: [(-74 -4 79 -58) -74]
Test Case: 567 | Input/Output: [(-65 75 31 -86) -86]
Test Case: 568 | Input/Output: [(48 46 64 -92) -92]
Test Case: 569 | Input/Output: [(86 -77 38 34) -77]
Test Case: 570 | Input/Output: [(-74 -83 40 43) -83]
Test Case: 571 | Input/Output: [(82 -59 48 70) -59]
Test Case: 572 | Input/Output: [(-13 5 35 -35) -35]
Test Case: 573 | Input/Output: [(-29 60 -15 -12) -29]
Test Case: 574 | Input/Output: [(-49 41 72 98) -49]
Test Case: 575 | Input/Output: [(61 86 -99 37) -99]
Test Case: 576 | Input/Output: [(67 -85 43 8) -85]
Test Case: 577 | Input/Output: [(6 8 -7 -87) -87]
Test Case: 578 | Input/Output: [(-6 37 -45 89) -45]
Test Case: 579 | Input/Output: [(42 69 70 -99) -99]
Test Case: 580 | Input/Output: [(-31 -72 75 41) -72]
Test Case: 581 | Input/Output: [(78 -30 -30 -11) -30]
Test Case: 582 | Input/Output: [(89 -78 7 46) -78]
Test Case: 583 | Input/Output: [(79 -36 57 -74) -74]
Test Case: 584 | Input/Output: [(99 -70 -40 -63) -70]
Test Case: 585 | Input/Output: [(-67 65 87 -90) -90]
Test Case: 586 | Input/Output: [(-89 39 62 -39) -89]
Test Case: 587 | Input/Output: [(76 14 68 99) 14]
Test Case: 588 | Input/Output: [(-57 -35 -47 4) -57]
Test Case: 589 | Input/Output: [(-29 45 -59 -17) -59]
Test Case: 590 | Input/Output: [(43 1 -84 -76) -84]
Test Case: 591 | Input/Output: [(-73 -69 0 -2) -73]
Test Case: 592 | Input/Output: [(21 -63 31 -72) -72]
Test Case: 593 | Input/Output: [(-34 -30 -7 52) -34]
Test Case: 594 | Input/Output: [(38 -9 56 -41) -41]
Test Case: 595 | Input/Output: [(17 15 -29 -1) -29]
Test Case: 596 | Input/Output: [(-40 -67 82 -8) -67]
Test Case: 597 | Input/Output: [(10 29 -5 66) -5]
Test Case: 598 | Input/Output: [(-41 -77 -22 90) -77]
Test Case: 599 | Input/Output: [(-76 -14 -61 -27) -76]
Test Case: 600 | Input/Output: [(73 33 66 73) 33]
Test Case: 601 | Input/Output: [(41 -100 83 -33) -100]
Test Case: 602 | Input/Output: [(22 70 91 7) 7]
Test Case: 603 | Input/Output: [(-92 -36 -78 -100) -100]
Test Case: 604 | Input/Output: [(-8 97 -59 27) -59]
Test Case: 605 | Input/Output: [(83 -98 1 78) -98]
Test Case: 606 | Input/Output: [(-60 84 69 15) -60]
Test Case: 607 | Input/Output: [(-36 20 68 -11) -36]
Test Case: 608 | Input/Output: [(17 97 -34 -87) -87]
Test Case: 609 | Input/Output: [(95 -93 87 41) -93]
Test Case: 610 | Input/Output: [(98 -76 -74 -77) -77]
Test Case: 611 | Input/Output: [(-49 -57 11 39) -57]
Test Case: 612 | Input/Output: [(17 -98 -81 -64) -98]
Test Case: 613 | Input/Output: [(-52 -19 69 -3) -52]
Test Case: 614 | Input/Output: [(2 100 39 10) 2]
Test Case: 615 | Input/Output: [(-79 -70 93 -10) -79]
Test Case: 616 | Input/Output: [(29 19 15 -46) -46]
Test Case: 617 | Input/Output: [(2 78 -40 -49) -49]
Test Case: 618 | Input/Output: [(85 -27 -25 -7) -27]
Test Case: 619 | Input/Output: [(51 -6 26 28) -6]
Test Case: 620 | Input/Output: [(-20 -4 -12 83) -20]
Test Case: 621 | Input/Output: [(-38 -27 -9 14) -38]
Test Case: 622 | Input/Output: [(73 63 -86 11) -86]
Test Case: 623 | Input/Output: [(-67 15 4 71) -67]
Test Case: 624 | Input/Output: [(-80 65 49 81) -80]
Test Case: 625 | Input/Output: [(82 21 40 -32) -32]
Test Case: 626 | Input/Output: [(91 62 66 64) 62]
Test Case: 627 | Input/Output: [(-44 -96 -34 -5) -96]
Test Case: 628 | Input/Output: [(-13 65 20 100) -13]
Test Case: 629 | Input/Output: [(48 -61 24 99) -61]
Test Case: 630 | Input/Output: [(-23 -18 5 -87) -87]
Test Case: 631 | Input/Output: [(-49 39 -74 -55) -74]
Test Case: 632 | Input/Output: [(26 -74 -26 32) -74]
Test Case: 633 | Input/Output: [(90 -31 34 -72) -72]
Test Case: 634 | Input/Output: [(-78 0 45 -36) -78]
Test Case: 635 | Input/Output: [(37 84 -84 -46) -84]
Test Case: 636 | Input/Output: [(-46 -23 74 81) -46]
Test Case: 637 | Input/Output: [(22 23 51 88) 22]
Test Case: 638 | Input/Output: [(-100 -42 -72 11) -100]
Test Case: 639 | Input/Output: [(1 -80 92 59) -80]
Test Case: 640 | Input/Output: [(-7 -13 -95 -21) -95]
Test Case: 641 | Input/Output: [(49 -7 69 -25) -25]
Test Case: 642 | Input/Output: [(43 41 73 14) 14]
Test Case: 643 | Input/Output: [(10 100 20 90) 10]
Test Case: 644 | Input/Output: [(-89 56 -78 65) -89]
Test Case: 645 | Input/Output: [(22 -44 20 12) -44]
Test Case: 646 | Input/Output: [(-91 -95 68 -37) -95]
Test Case: 647 | Input/Output: [(-30 37 69 49) -30]
Test Case: 648 | Input/Output: [(29 -11 88 79) -11]
Test Case: 649 | Input/Output: [(-26 -25 0 96) -26]
Test Case: 650 | Input/Output: [(62 2 -46 15) -46]
Test Case: 651 | Input/Output: [(-72 -36 5 -97) -97]
Test Case: 652 | Input/Output: [(-30 -15 60 87) -30]
Test Case: 653 | Input/Output: [(37 -48 58 55) -48]
Test Case: 654 | Input/Output: [(11 63 -21 -88) -88]
Test Case: 655 | Input/Output: [(-17 11 3 -91) -91]
Test Case: 656 | Input/Output: [(19 -100 10 100) -100]
Test Case: 657 | Input/Output: [(84 33 -99 -99) -99]
Test Case: 658 | Input/Output: [(-29 -44 -99 59) -99]
Test Case: 659 | Input/Output: [(-4 -24 -69 52) -69]
Test Case: 660 | Input/Output: [(65 11 19 -92) -92]
Test Case: 661 | Input/Output: [(-21 76 -23 42) -23]
Test Case: 662 | Input/Output: [(-47 0 -82 46) -82]
Test Case: 663 | Input/Output: [(33 -62 -54 -69) -69]
Test Case: 664 | Input/Output: [(7 85 4 100) 4]
Test Case: 665 | Input/Output: [(31 -66 -15 -72) -72]
Test Case: 666 | Input/Output: [(-18 76 -3 -86) -86]
Test Case: 667 | Input/Output: [(74 54 -30 88) -30]
Test Case: 668 | Input/Output: [(11 77 -65 -61) -65]
Test Case: 669 | Input/Output: [(35 -54 14 70) -54]
Test Case: 670 | Input/Output: [(34 -6 -57 45) -57]
Test Case: 671 | Input/Output: [(41 -39 -46 43) -46]
Test Case: 672 | Input/Output: [(83 90 72 -32) -32]
Test Case: 673 | Input/Output: [(6 71 -15 -34) -34]
Test Case: 674 | Input/Output: [(88 93 -73 -36) -73]
Test Case: 675 | Input/Output: [(27 -53 94 -37) -53]
Test Case: 676 | Input/Output: [(-97 97 27 -71) -97]
Test Case: 677 | Input/Output: [(24 8 -2 24) -2]
Test Case: 678 | Input/Output: [(-23 -56 78 -95) -95]
Test Case: 679 | Input/Output: [(-85 -87 90 -25) -87]
Test Case: 680 | Input/Output: [(32 1 -97 21) -97]
Test Case: 681 | Input/Output: [(12 100 14 -54) -54]
Test Case: 682 | Input/Output: [(59 64 53 72) 53]
Test Case: 683 | Input/Output: [(-21 76 52 -5) -21]
Test Case: 684 | Input/Output: [(69 100 -21 2) -21]
Test Case: 685 | Input/Output: [(0 -73 55 88) -73]
Test Case: 686 | Input/Output: [(85 -18 8 -31) -31]
Test Case: 687 | Input/Output: [(52 72 77 -72) -72]
Test Case: 688 | Input/Output: [(54 -24 29 13) -24]
Test Case: 689 | Input/Output: [(84 55 53 -72) -72]
Test Case: 690 | Input/Output: [(31 91 20 5) 5]
Test Case: 691 | Input/Output: [(79 17 33 -90) -90]
Test Case: 692 | Input/Output: [(-93 -54 77 42) -93]
Test Case: 693 | Input/Output: [(34 21 75 33) 21]
Test Case: 694 | Input/Output: [(34 51 65 65) 34]
Test Case: 695 | Input/Output: [(-33 76 -85 -52) -85]
Test Case: 696 | Input/Output: [(72 -8 33 -11) -11]
Test Case: 697 | Input/Output: [(58 -61 20 69) -61]
Test Case: 698 | Input/Output: [(-95 -72 -51 34) -95]
Test Case: 699 | Input/Output: [(19 52 -30 -24) -30]
Test Case: 700 | Input/Output: [(60 -18 -91 12) -91]
Test Case: 701 | Input/Output: [(18 3 77 19) 3]
Test Case: 702 | Input/Output: [(35 26 -14 7) -14]
Test Case: 703 | Input/Output: [(3 -79 96 -35) -79]
Test Case: 704 | Input/Output: [(96 87 -25 -12) -25]
Test Case: 705 | Input/Output: [(-90 11 -48 72) -90]
Test Case: 706 | Input/Output: [(-99 -97 11 -88) -99]
Test Case: 707 | Input/Output: [(30 27 -16 8) -16]
Test Case: 708 | Input/Output: [(24 5 -76 -43) -76]
Test Case: 709 | Input/Output: [(53 78 -14 59) -14]
Test Case: 710 | Input/Output: [(48 15 20 -49) -49]
Test Case: 711 | Input/Output: [(-54 99 84 100) -54]
Test Case: 712 | Input/Output: [(-97 -76 12 64) -97]
Test Case: 713 | Input/Output: [(-70 -86 64 -90) -90]
Test Case: 714 | Input/Output: [(-83 59 -36 -67) -83]
Test Case: 715 | Input/Output: [(-31 76 -65 -64) -65]
Test Case: 716 | Input/Output: [(10 -41 78 80) -41]
Test Case: 717 | Input/Output: [(83 -75 -34 -42) -75]
Test Case: 718 | Input/Output: [(63 -69 -52 75) -69]
Test Case: 719 | Input/Output: [(92 -62 26 -50) -62]
Test Case: 720 | Input/Output: [(7 5 -29 83) -29]
Test Case: 721 | Input/Output: [(22 67 48 -61) -61]
Test Case: 722 | Input/Output: [(-46 -89 44 -37) -89]
Test Case: 723 | Input/Output: [(-67 -34 10 -99) -99]
Test Case: 724 | Input/Output: [(-31 85 40 -88) -88]
Test Case: 725 | Input/Output: [(76 32 -67 42) -67]
Test Case: 726 | Input/Output: [(80 68 -74 -54) -74]
Test Case: 727 | Input/Output: [(90 92 -82 -52) -82]
Test Case: 728 | Input/Output: [(-47 44 -3 -69) -69]
Test Case: 729 | Input/Output: [(-6 -59 53 -90) -90]
Test Case: 730 | Input/Output: [(-79 61 53 61) -79]
Test Case: 731 | Input/Output: [(80 52 11 60) 11]
Test Case: 732 | Input/Output: [(18 -80 -47 65) -80]
Test Case: 733 | Input/Output: [(84 -92 36 -54) -92]
Test Case: 734 | Input/Output: [(-65 17 -70 34) -70]
Test Case: 735 | Input/Output: [(81 -47 53 -13) -47]
Test Case: 736 | Input/Output: [(86 -92 99 -58) -92]
Test Case: 737 | Input/Output: [(-1 96 -65 -16) -65]
Test Case: 738 | Input/Output: [(62 -88 12 5) -88]
Test Case: 739 | Input/Output: [(37 -46 -29 -50) -50]
Test Case: 740 | Input/Output: [(18 45 -81 62) -81]
Test Case: 741 | Input/Output: [(-21 91 43 50) -21]
Test Case: 742 | Input/Output: [(39 54 -97 -41) -97]
Test Case: 743 | Input/Output: [(-92 -68 100 78) -92]
Test Case: 744 | Input/Output: [(39 12 -6 -18) -18]
Test Case: 745 | Input/Output: [(59 37 -32 53) -32]
Test Case: 746 | Input/Output: [(-25 15 42 76) -25]
Test Case: 747 | Input/Output: [(95 -63 8 6) -63]
Test Case: 748 | Input/Output: [(-38 66 73 2) -38]
Test Case: 749 | Input/Output: [(-65 96 31 26) -65]
Test Case: 750 | Input/Output: [(-96 -66 -50 -23) -96]
Test Case: 751 | Input/Output: [(-95 -61 -1 -37) -95]
Test Case: 752 | Input/Output: [(37 26 84 38) 26]
Test Case: 753 | Input/Output: [(-17 -93 21 -77) -93]
Test Case: 754 | Input/Output: [(42 -85 6 -100) -100]
Test Case: 755 | Input/Output: [(-17 -10 -6 -57) -57]
Test Case: 756 | Input/Output: [(100 -3 -63 -6) -63]
Test Case: 757 | Input/Output: [(-83 -89 -44 -17) -89]
Test Case: 758 | Input/Output: [(6 46 43 44) 6]
Test Case: 759 | Input/Output: [(-96 42 -97 99) -97]
Test Case: 760 | Input/Output: [(100 -4 28 -86) -86]
Test Case: 761 | Input/Output: [(-27 -98 -22 -19) -98]
Test Case: 762 | Input/Output: [(89 57 36 56) 36]
Test Case: 763 | Input/Output: [(-55 70 -89 39) -89]
Test Case: 764 | Input/Output: [(-79 -3 50 -71) -79]
Test Case: 765 | Input/Output: [(-25 -62 34 -32) -62]
Test Case: 766 | Input/Output: [(-59 -85 -51 90) -85]
Test Case: 767 | Input/Output: [(-93 -44 45 5) -93]
Test Case: 768 | Input/Output: [(-85 96 56 73) -85]
Test Case: 769 | Input/Output: [(-47 73 -44 31) -47]
Test Case: 770 | Input/Output: [(60 37 -86 -35) -86]
Test Case: 771 | Input/Output: [(-2 -28 90 33) -28]
Test Case: 772 | Input/Output: [(-90 -69 94 -63) -90]
Test Case: 773 | Input/Output: [(-33 -65 -24 25) -65]
Test Case: 774 | Input/Output: [(-60 32 35 -15) -60]
Test Case: 775 | Input/Output: [(-72 -71 99 -91) -91]
Test Case: 776 | Input/Output: [(-49 100 5 -8) -49]
Test Case: 777 | Input/Output: [(-58 82 -4 78) -58]
Test Case: 778 | Input/Output: [(55 -50 -20 37) -50]
Test Case: 779 | Input/Output: [(-23 98 92 -27) -27]
Test Case: 780 | Input/Output: [(36 85 28 16) 16]
Test Case: 781 | Input/Output: [(-32 -59 22 -99) -99]
Test Case: 782 | Input/Output: [(98 42 -27 33) -27]
Test Case: 783 | Input/Output: [(-86 67 80 -63) -86]
Test Case: 784 | Input/Output: [(-39 85 -99 -96) -99]
Test Case: 785 | Input/Output: [(-74 16 -82 -86) -86]
Test Case: 786 | Input/Output: [(-1 -47 89 23) -47]
Test Case: 787 | Input/Output: [(-18 -19 60 65) -19]
Test Case: 788 | Input/Output: [(28 56 38 -100) -100]
Test Case: 789 | Input/Output: [(-81 -78 57 61) -81]
Test Case: 790 | Input/Output: [(50 -11 20 83) -11]
Test Case: 791 | Input/Output: [(-29 -55 -80 79) -80]
Test Case: 792 | Input/Output: [(21 54 48 95) 21]
Test Case: 793 | Input/Output: [(-19 79 10 76) -19]
Test Case: 794 | Input/Output: [(-65 15 29 -99) -99]
Test Case: 795 | Input/Output: [(-64 -65 73 91) -65]
Test Case: 796 | Input/Output: [(-46 30 -100 -70) -100]
Test Case: 797 | Input/Output: [(-53 -32 -97 30) -97]
Test Case: 798 | Input/Output: [(22 -68 -95 -27) -95]
Test Case: 799 | Input/Output: [(-27 59 97 25) -27]
Test Case: 800 | Input/Output: [(89 47 28 -92) -92]
Test Case: 801 | Input/Output: [(69 -74 -26 -32) -74]
Test Case: 802 | Input/Output: [(-72 -92 48 -83) -92]
Test Case: 803 | Input/Output: [(-97 -87 -87 -84) -97]
Test Case: 804 | Input/Output: [(49 62 85 55) 49]
Test Case: 805 | Input/Output: [(72 -37 15 -85) -85]
Test Case: 806 | Input/Output: [(99 26 -53 -95) -95]
Test Case: 807 | Input/Output: [(-1 -2 98 -95) -95]
Test Case: 808 | Input/Output: [(-4 79 31 22) -4]
Test Case: 809 | Input/Output: [(-41 74 96 36) -41]
Test Case: 810 | Input/Output: [(45 -5 -12 -27) -27]
Test Case: 811 | Input/Output: [(87 -95 38 -85) -95]
Test Case: 812 | Input/Output: [(70 96 85 4) 4]
Test Case: 813 | Input/Output: [(97 48 -71 41) -71]
Test Case: 814 | Input/Output: [(48 -30 -92 -32) -92]
Test Case: 815 | Input/Output: [(-88 84 -40 -51) -88]
Test Case: 816 | Input/Output: [(88 -91 23 -29) -91]
Test Case: 817 | Input/Output: [(-54 -69 36 -29) -69]
Test Case: 818 | Input/Output: [(8 70 -12 -58) -58]
Test Case: 819 | Input/Output: [(-1 -25 50 -7) -25]
Test Case: 820 | Input/Output: [(71 40 -26 -61) -61]
Test Case: 821 | Input/Output: [(-83 -96 -96 -90) -96]
Test Case: 822 | Input/Output: [(36 19 59 72) 19]
Test Case: 823 | Input/Output: [(64 -54 6 70) -54]
Test Case: 824 | Input/Output: [(-83 36 -99 83) -99]
Test Case: 825 | Input/Output: [(55 -30 -49 -34) -49]
Test Case: 826 | Input/Output: [(42 -30 -15 -96) -96]
Test Case: 827 | Input/Output: [(-31 -16 -44 26) -44]
Test Case: 828 | Input/Output: [(93 -67 16 -39) -67]
Test Case: 829 | Input/Output: [(-98 70 -22 -45) -98]
Test Case: 830 | Input/Output: [(-33 -51 34 -54) -54]
Test Case: 831 | Input/Output: [(-92 61 -98 63) -98]
Test Case: 832 | Input/Output: [(-100 86 8 11) -100]
Test Case: 833 | Input/Output: [(-90 -93 73 -79) -93]
Test Case: 834 | Input/Output: [(96 -52 11 86) -52]
Test Case: 835 | Input/Output: [(-70 99 19 -44) -70]
Test Case: 836 | Input/Output: [(-71 38 -50 67) -71]
Test Case: 837 | Input/Output: [(13 -32 -94 -27) -94]
Test Case: 838 | Input/Output: [(67 15 -71 61) -71]
Test Case: 839 | Input/Output: [(47 77 29 -16) -16]
Test Case: 840 | Input/Output: [(90 86 68 84) 68]
Test Case: 841 | Input/Output: [(-10 -35 58 91) -35]
Test Case: 842 | Input/Output: [(11 18 -25 -30) -30]
Test Case: 843 | Input/Output: [(-84 5 -74 47) -84]
Test Case: 844 | Input/Output: [(6 43 -70 -40) -70]
Test Case: 845 | Input/Output: [(26 -89 -60 13) -89]
Test Case: 846 | Input/Output: [(0 -62 -15 11) -62]
Test Case: 847 | Input/Output: [(-28 13 77 84) -28]
Test Case: 848 | Input/Output: [(15 -47 -10 74) -47]
Test Case: 849 | Input/Output: [(-94 -94 -81 93) -94]
Test Case: 850 | Input/Output: [(76 -35 -19 5) -35]
Test Case: 851 | Input/Output: [(14 34 -80 72) -80]
Test Case: 852 | Input/Output: [(74 47 -49 -10) -49]
Test Case: 853 | Input/Output: [(91 48 -29 -99) -99]
Test Case: 854 | Input/Output: [(-73 3 -91 60) -91]
Test Case: 855 | Input/Output: [(6 -45 -100 -14) -100]
Test Case: 856 | Input/Output: [(96 1 -91 64) -91]
Test Case: 857 | Input/Output: [(-38 -66 100 -46) -66]
Test Case: 858 | Input/Output: [(51 46 -82 89) -82]
Test Case: 859 | Input/Output: [(-69 70 -26 91) -69]
Test Case: 860 | Input/Output: [(100 47 84 27) 27]
Test Case: 861 | Input/Output: [(-51 -48 85 5) -51]
Test Case: 862 | Input/Output: [(-60 18 29 94) -60]
Test Case: 863 | Input/Output: [(28 96 47 -41) -41]
Test Case: 864 | Input/Output: [(76 92 57 35) 35]
Test Case: 865 | Input/Output: [(-2 92 -8 -71) -71]
Test Case: 866 | Input/Output: [(-40 -90 4 89) -90]
Test Case: 867 | Input/Output: [(28 12 -85 47) -85]
Test Case: 868 | Input/Output: [(-99 81 -71 -29) -99]
Test Case: 869 | Input/Output: [(-41 40 -11 -96) -96]
Test Case: 870 | Input/Output: [(90 -48 -7 -85) -85]
Test Case: 871 | Input/Output: [(23 82 89 78) 23]
Test Case: 872 | Input/Output: [(12 -16 -84 6) -84]
Test Case: 873 | Input/Output: [(-44 -70 63 67) -70]
Test Case: 874 | Input/Output: [(-70 77 -38 83) -70]
Test Case: 875 | Input/Output: [(84 -32 -95 30) -95]
Test Case: 876 | Input/Output: [(41 -64 19 75) -64]
Test Case: 877 | Input/Output: [(38 -89 9 32) -89]
Test Case: 878 | Input/Output: [(63 43 40 41) 40]
Test Case: 879 | Input/Output: [(28 -61 -34 100) -61]
Test Case: 880 | Input/Output: [(-27 55 75 76) -27]
Test Case: 881 | Input/Output: [(61 99 -28 54) -28]
Test Case: 882 | Input/Output: [(-81 -78 -58 47) -81]
Test Case: 883 | Input/Output: [(-74 9 -53 26) -74]
Test Case: 884 | Input/Output: [(-4 -33 -28 85) -33]
Test Case: 885 | Input/Output: [(-68 -90 48 -41) -90]
Test Case: 886 | Input/Output: [(-47 33 -74 74) -74]
Test Case: 887 | Input/Output: [(-43 -49 -80 -94) -94]
Test Case: 888 | Input/Output: [(-46 -70 35 84) -70]
Test Case: 889 | Input/Output: [(5 61 -55 9) -55]
Test Case: 890 | Input/Output: [(-79 -92 -46 5) -92]
Test Case: 891 | Input/Output: [(48 89 96 -44) -44]
Test Case: 892 | Input/Output: [(-19 59 -50 -43) -50]
Test Case: 893 | Input/Output: [(94 77 -100 67) -100]
Test Case: 894 | Input/Output: [(-9 -40 -54 -68) -68]
Test Case: 895 | Input/Output: [(49 44 -96 -79) -96]
Test Case: 896 | Input/Output: [(-89 25 20 -50) -89]
Test Case: 897 | Input/Output: [(-68 -37 26 1) -68]
Test Case: 898 | Input/Output: [(-6 -88 -96 -85) -96]
Test Case: 899 | Input/Output: [(77 -95 58 -3) -95]
Test Case: 900 | Input/Output: [(77 89 -67 -53) -67]
Test Case: 901 | Input/Output: [(46 -15 -83 95) -83]
Test Case: 902 | Input/Output: [(40 -60 -78 -25) -78]
Test Case: 903 | Input/Output: [(-81 97 -56 65) -81]
Test Case: 904 | Input/Output: [(-70 -32 -60 -77) -77]
Test Case: 905 | Input/Output: [(99 97 -38 -75) -75]
Test Case: 906 | Input/Output: [(-3 -55 -20 21) -55]
Test Case: 907 | Input/Output: [(41 58 -73 -75) -75]
Test Case: 908 | Input/Output: [(-4 42 73 -79) -79]
Test Case: 909 | Input/Output: [(27 -46 -3 -83) -83]
Test Case: 910 | Input/Output: [(100 -47 96 -92) -92]
Test Case: 911 | Input/Output: [(76 80 13 60) 13]
Test Case: 912 | Input/Output: [(74 -76 -33 -22) -76]
Test Case: 913 | Input/Output: [(73 84 -80 -68) -80]
Test Case: 914 | Input/Output: [(-36 -96 -86 -30) -96]
Test Case: 915 | Input/Output: [(-81 -99 -99 -76) -99]
Test Case: 916 | Input/Output: [(26 42 -7 -12) -12]
Test Case: 917 | Input/Output: [(-87 23 -1 37) -87]
Test Case: 918 | Input/Output: [(21 -43 -77 47) -77]
Test Case: 919 | Input/Output: [(-99 -89 -74 -26) -99]
Test Case: 920 | Input/Output: [(82 -49 -46 -12) -49]
Test Case: 921 | Input/Output: [(91 13 16 -43) -43]
Test Case: 922 | Input/Output: [(85 43 18 -33) -33]
Test Case: 923 | Input/Output: [(54 -96 -19 55) -96]
Test Case: 924 | Input/Output: [(67 14 -93 -96) -96]
Test Case: 925 | Input/Output: [(74 -91 86 83) -91]
Test Case: 926 | Input/Output: [(-60 -47 0 4) -60]
Test Case: 927 | Input/Output: [(-58 -53 -44 -11) -58]
Test Case: 928 | Input/Output: [(50 59 26 -67) -67]
Test Case: 929 | Input/Output: [(-36 -85 60 27) -85]
Test Case: 930 | Input/Output: [(100 40 -68 -30) -68]
Test Case: 931 | Input/Output: [(-60 -15 -96 -21) -96]
Test Case: 932 | Input/Output: [(56 25 -4 -5) -5]
Test Case: 933 | Input/Output: [(13 78 24 13) 13]
Test Case: 934 | Input/Output: [(42 55 -33 -9) -33]
Test Case: 935 | Input/Output: [(7 4 -32 63) -32]
Test Case: 936 | Input/Output: [(34 -87 96 16) -87]
Test Case: 937 | Input/Output: [(78 -62 5 17) -62]
Test Case: 938 | Input/Output: [(86 15 89 -100) -100]
Test Case: 939 | Input/Output: [(-60 98 -55 94) -60]
Test Case: 940 | Input/Output: [(42 -87 -61 21) -87]
Test Case: 941 | Input/Output: [(-41 -40 45 -75) -75]
Test Case: 942 | Input/Output: [(93 -29 -19 -100) -100]
Test Case: 943 | Input/Output: [(79 -47 -40 36) -47]
Test Case: 944 | Input/Output: [(-26 -90 -39 -7) -90]
Test Case: 945 | Input/Output: [(-92 87 81 -11) -92]
Test Case: 946 | Input/Output: [(-27 -14 -63 -99) -99]
Test Case: 947 | Input/Output: [(-79 -45 -86 -52) -86]
Test Case: 948 | Input/Output: [(90 -56 -81 16) -81]
Test Case: 949 | Input/Output: [(25 -66 -94 24) -94]
Test Case: 950 | Input/Output: [(13 49 7 -68) -68]
Test Case: 951 | Input/Output: [(2 80 -5 -36) -36]
Test Case: 952 | Input/Output: [(-16 -89 82 -61) -89]
Test Case: 953 | Input/Output: [(-3 89 67 30) -3]
Test Case: 954 | Input/Output: [(63 35 88 90) 35]
Test Case: 955 | Input/Output: [(92 71 86 28) 28]
Test Case: 956 | Input/Output: [(-94 67 30 65) -94]
Test Case: 957 | Input/Output: [(88 61 -26 -60) -60]
Test Case: 958 | Input/Output: [(74 34 44 -35) -35]
Test Case: 959 | Input/Output: [(56 20 -50 66) -50]
Test Case: 960 | Input/Output: [(68 72 94 -86) -86]
Test Case: 961 | Input/Output: [(81 -46 -98 15) -98]
Test Case: 962 | Input/Output: [(82 -90 17 -22) -90]
Test Case: 963 | Input/Output: [(-67 -98 10 -75) -98]
Test Case: 964 | Input/Output: [(93 -53 32 -83) -83]
Test Case: 965 | Input/Output: [(-14 50 53 4) -14]
Test Case: 966 | Input/Output: [(-6 37 -73 95) -73]
Test Case: 967 | Input/Output: [(1 -66 23 25) -66]
Test Case: 968 | Input/Output: [(16 -6 40 -28) -28]
Test Case: 969 | Input/Output: [(1 77 69 13) 1]
Test Case: 970 | Input/Output: [(-2 -9 63 -7) -9]
Test Case: 971 | Input/Output: [(-26 -44 -18 78) -44]
Test Case: 972 | Input/Output: [(80 77 -1 -82) -82]
Test Case: 973 | Input/Output: [(92 64 72 -78) -78]
Test Case: 974 | Input/Output: [(0 -71 -27 18) -71]
Test Case: 975 | Input/Output: [(12 -32 13 -93) -93]
Test Case: 976 | Input/Output: [(37 -83 63 -72) -83]
Test Case: 977 | Input/Output: [(-40 -65 100 -61) -65]
Test Case: 978 | Input/Output: [(-34 21 -89 -43) -89]
Test Case: 979 | Input/Output: [(-66 -22 94 81) -66]
Test Case: 980 | Input/Output: [(-71 -48 -84 -69) -84]
Test Case: 981 | Input/Output: [(18 -9 55 0) -9]
Test Case: 982 | Input/Output: [(15 11 12 27) 11]
Test Case: 983 | Input/Output: [(38 79 59 -67) -67]
Test Case: 984 | Input/Output: [(-90 33 75 -53) -90]
Test Case: 985 | Input/Output: [(11 25 -2 89) -2]
Test Case: 986 | Input/Output: [(47 4 15 42) 4]
Test Case: 987 | Input/Output: [(38 68 79 -91) -91]
Test Case: 988 | Input/Output: [(-2 -79 48 -65) -79]
Test Case: 989 | Input/Output: [(7 0 7 14) 0]
Test Case: 990 | Input/Output: [(-67 47 -21 13) -67]
Test Case: 991 | Input/Output: [(-96 84 -19 -55) -96]
Test Case: 992 | Input/Output: [(-100 73 -95 -67) -100]
Test Case: 993 | Input/Output: [(21 69 -36 -47) -47]
Test Case: 994 | Input/Output: [(4 94 -15 -93) -93]
Test Case: 995 | Input/Output: [(98 -53 -6 -79) -79]
Test Case: 996 | Input/Output: [(-31 83 -52 -23) -52]
Test Case: 997 | Input/Output: [(42 67 97 -89) -89]
Test Case: 998 | Input/Output: [(-91 100 -93 -57) -93]
Test Case: 999 | Input/Output: [(46 -39 51 30) -39]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -87 -28 -76 55 93 107 -68 -119 -72 57 87 -42 -115 -75 -41 -80
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[81 11 81 81] 11] [[-41 -57 -41 -41] -57] [[93 93 -53 93] -53] [[29 29 29 -87] -87] [[-80 -80 -80 -43] -80] [[98 39 39 39] 39] [[84 84 37 84] 37] [[59 59 59 -39] -39] [[5 5 5 -61] -61] [[-62 1 1 1] -62] [(-96 -96 -96 -96) -96] [(41 41 41 41) 41] [(-15 -15 -15 -15) -15] [(67 67 67 67) 67] [(-48 -48 -48 -48) -48] [(62 62 32 24) 24] [(26 59 34 80) 26] [(96 88 1 42) 1] [(45 31 31 86) 31] [(37 92 63 86) 37] [(24 81 69 68) 24] [(55 84 16 3) 3] [(12 37 100 87) 12] [(59 89 55 80) 55] [(1 69 49 47) 1] [(4 26 73 81) 4] [(72 18 14 78) 14] [(11 55 42 21) 11] [(61 88 60 10) 10] [(59 96 1 75) 1] [(14 72 11 27) 11] [(28 39 20 81) 20] [(5 49 29 65) 5] [(18 53 70 3) 3] [(37 44 56 93) 37] [(71 -87 -40 -55) -87] [(45 -42 -93 -24) -93] [(5 26 -27 44) -27] [(90 40 41 -1) -1] [(73 15 -77 78) -77] [(15 -60 -32 57) -60] [(-6 -18 -41 -13) -41] [(79 15 7 47) 7] [(65 -55 31 -70) -70] [(1 -1 -66 89) -66] [(-98 13 33 -18) -98] [(-57 -42 -27 -60) -60] [(58 92 -9 -27) -27] [(-2 -14 2 65) -14] [(13 -83 -65 99) -83] [(89 -41 -15 -90) -90] [(86 -25 29 80) -25] [(75 -99 35 -2) -99] [(-92 -33 -40 64) -92] [(-75 12 -15 5) -75] [(-82 -76 -90 -55) -90] [(-77 -52 64 -3) -77] [(63 -16 -46 56) -46] [(-100 6 91 -29) -100] [(-64 -7 -59 -92) -92] [(25 -29 70 92) -29] [(35 -71 75 15) -71] [(-44 -40 79 2) -44] [(96 -72 -69 -71) -72] [(73 -9 -39 -26) -39] [(87 24 62 -48) -48] [(97 25 -94 -65) -94] [(-65 -11 -13 70) -65] [(-78 -70 38 83) -78] [(-97 0 -53 45) -97] [(-32 -100 -52 46) -100] [(38 -50 15 22) -50] [(96 -56 63 -99) -99] [(57 35 35 -85) -85] [(94 -24 -63 -27) -63] [(-33 68 -34 -92) -92] [(26 -7 -80 -65) -80] [(-32 -8 -13 71) -32] [(-92 75 -1 -22) -92] [(22 12 -68 92) -68] [(-94 -88 63 -88) -94] [(-5 -17 94 91) -17] [(56 -83 -35 -42) -83] [(-99 -76 -4 -27) -99] [(87 -44 15 82) -44] [(66 -86 65 66) -86] [(-46 9 82 84) -46] [(-50 25 -28 55) -50] [(-24 -93 -42 58) -93] [(54 100 11 48) 11] [(91 -35 43 -41) -41] [(-100 -95 19 -88) -100] [(8 -63 18 87) -63] [(5 -17 -72 -14) -72] [(10 81 17 -90) -90])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 81                 
Correct output: -57                 | Program output: -41                
Correct output: -53                 | Program output: 93                 
Correct output: -87                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 98                 
Correct output: 37                  | Program output: 84                 
Correct output: -39                 | Program output: 59                 
Correct output: -61                 | Program output: 5                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 62                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 96                 
Correct output: 31                  | Program output: 45                 
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 55                 
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 72                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 61                 
Correct output: 1                   | Program output: 59                 
Correct output: 11                  | Program output: 14                 
Correct output: 20                  | Program output: 28                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 18                 
Correct output: 37                  | Program output: 37                 
Correct output: -87                 | Program output: 71                 
Correct output: -93                 | Program output: 45                 
Correct output: -27                 | Program output: 5                  
Correct output: -1                  | Program output: 90                 
Correct output: -77                 | Program output: 73                 
Correct output: -60                 | Program output: 15                 
Correct output: -41                 | Program output: -6                 
Correct output: 7                   | Program output: 79                 
Correct output: -70                 | Program output: 65                 
Correct output: -66                 | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -60                 | Program output: -57                
Correct output: -27                 | Program output: 58                 
Correct output: -14                 | Program output: -2                 
Correct output: -83                 | Program output: 13                 
Correct output: -90                 | Program output: 89                 
Correct output: -25                 | Program output: 86                 
Correct output: -99                 | Program output: 75                 
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -46                 | Program output: 63                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -64                
Correct output: -29                 | Program output: 25                 
Correct output: -71                 | Program output: 35                 
Correct output: -44                 | Program output: -44                
Correct output: -72                 | Program output: 96                 
Correct output: -39                 | Program output: 73                 
Correct output: -48                 | Program output: 87                 
Correct output: -94                 | Program output: 97                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -32                
Correct output: -50                 | Program output: 38                 
Correct output: -99                 | Program output: 96                 
Correct output: -85                 | Program output: 57                 
Correct output: -63                 | Program output: 94                 
Correct output: -92                 | Program output: -33                
Correct output: -80                 | Program output: 26                 
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -17                 | Program output: -5                 
Correct output: -83                 | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: 87                 
Correct output: -86                 | Program output: 66                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -24                
Correct output: 11                  | Program output: 54                 
Correct output: -41                 | Program output: 91                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 8                  
Correct output: -72                 | Program output: 5                  
Correct output: -90                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_dup boolean_dup integer_div integer_shove in1 boolean_eq print_integer boolean_invert_second_then_and exec_s_when_autoconstructing (integer_empty exec_yankdup exec_dup ()) () ())
Lexicase best errors: [0 0 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_dup boolean_dup integer_div integer_shove in1 boolean_eq print_integer boolean_invert_second_then_and exec_s_when_autoconstructing (integer_empty exec_yankdup exec_dup ()) () ())
Zero cases best errors: [0 0 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 6 8 6 4 6 2 2 4 2)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (6 6 8 6 4 6 2 2 4 2)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 1, :instruction tag_integer_238} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction 14} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 2, :instruction print_integer} {:close 0, :instruction tagged_153} {:close 2, :instruction 79} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction tagged_724} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction in3})
Best program: (integer_swap integer_add boolean_dup integer_inc boolean_not tag_integer_238 exec_swap (boolean_rot boolean_dup_times exec_dup () 14 exec_s (exec_shove (integer_dup_times) integer_lte integer_eq boolean_frominteger exec_y_when_autoconstructing (exec_do*while (exec_do*count (exec_yankdup integer_dup_times boolean_stackdepth integer_flush) exec_if (boolean_not integer_yankdup) (exec_do*count () integer_dup_times in1 integer_yankdup boolean_dup_times boolean_dup_times exec_do*while (print_integer)) tagged_153 79)) integer_yank exec_shove (exec_yank integer_pop) exec_shove (integer_dup_items exec_eq exec_k_when_autoconstructing () () integer_yank boolean_dup_items integer_sub exec_rot (integer_gte integer_gte boolean_stackdepth exec_when (exec_s_when_autoconstructing () (boolean_pop) (exec_while (exec_do*count (integer_empty integer_mult integer_mult) boolean_invert_second_then_and in1 exec_do*count (boolean_and integer_shove tagged_724) exec_empty integer_eq) integer_add boolean_eq boolean_stackdepth integer_pop print_integer boolean_or in3))) () ())) () ()) ())
Errors: [0 0 0 0 1 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 75
Size: 104
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 9.954
Median total errors in population: 10
Error averages by case: (0.994 0.994 0.992 0.994 0.996 0.994 0.998 0.998 0.996 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.899
Average program size in population (points): 70.117
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 454980
--- Timings ---
Current time: 1559314518179 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.7 seconds, 29.3%
Fitness Testing:      1.7 seconds, 66.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0

(exec_swap (integer_yank integer_lt exec_do*times (exec_k () (boolean_or exec_if (boolean_invert_second_then_and) (integer_dup integer_stackdepth integer_fromboolean) exec_dup_items) 36 in1 exec_rot (boolean_pop print_integer integer_div boolean_flush exec_swap (exec_stackdepth integer_inc integer_empty integer_dec) (exec_stackdepth integer_rot integer_eq exec_if (exec_pop ()) ())) () ())) ())
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99

(exec_swap (integer_yank integer_lt exec_do*times (exec_k () (boolean_or exec_if (boolean_invert_second_then_and) (integer_dup integer_stackdepth integer_fromboolean) exec_dup_items) 36 in1 exec_rot (boolean_pop print_integer integer_div boolean_flush exec_swap (exec_stackdepth integer_inc integer_empty integer_dec) (exec_stackdepth integer_rot integer_eq exec_if (exec_pop ()) ())) () ())) ())
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 81                 
Correct output: -57                 | Program output: -41                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: 37                  | Program output: 37                 
Correct output: -39                 | Program output: 59                 
Correct output: -61                 | Program output: 5                  
Correct output: -62                 | Program output: 1                  
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 32                 
Correct output: 26                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 31                 
Correct output: 37                  | Program output: 63                 
Correct output: 24                  | Program output: 69                 
Correct output: 3                   | Program output: 16                 
Correct output: 12                  | Program output: 100                
Correct output: 55                  | Program output: 55                 
Correct output: 1                   | Program output: 49                 
Correct output: 4                   | Program output: 73                 
Correct output: 14                  | Program output: 14                 
Correct output: 11                  | Program output: 42                 
Correct output: 10                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 29                 
Correct output: 3                   | Program output: 70                 
Correct output: 37                  | Program output: 56                 
Correct output: -87                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -27                 | Program output: -27                
Correct output: -1                  | Program output: 41                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -32                
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 7                  
Correct output: -70                 | Program output: 31                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: 33                 
Correct output: -60                 | Program output: -27                
Correct output: -27                 | Program output: -9                 
Correct output: -14                 | Program output: 2                  
Correct output: -83                 | Program output: -65                
Correct output: -90                 | Program output: -15                
Correct output: -25                 | Program output: 29                 
Correct output: -99                 | Program output: 35                 
Correct output: -92                 | Program output: -40                
Correct output: -75                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: 64                 
Correct output: -46                 | Program output: -46                
Correct output: -100                | Program output: 91                 
Correct output: -92                 | Program output: -59                
Correct output: -29                 | Program output: 70                 
Correct output: -71                 | Program output: 75                 
Correct output: -44                 | Program output: 79                 
Correct output: -72                 | Program output: -69                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: 62                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -13                
Correct output: -78                 | Program output: 38                 
Correct output: -97                 | Program output: -53                
Correct output: -100                | Program output: -52                
Correct output: -50                 | Program output: 15                 
Correct output: -99                 | Program output: 63                 
Correct output: -85                 | Program output: 35                 
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -13                
Correct output: -92                 | Program output: -1                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 63                 
Correct output: -17                 | Program output: 94                 
Correct output: -83                 | Program output: -35                
Correct output: -99                 | Program output: -4                 
Correct output: -44                 | Program output: 15                 
Correct output: -86                 | Program output: 65                 
Correct output: -46                 | Program output: 82                 
Correct output: -50                 | Program output: -28                
Correct output: -93                 | Program output: -42                
Correct output: 11                  | Program output: 11                 
Correct output: -41                 | Program output: 43                 
Correct output: -100                | Program output: 19                 
Correct output: -63                 | Program output: 18                 
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tag_exec_146} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup})
Lexicase best program: (exec_dup_times (boolean_dup_items boolean_dup_times integer_add exec_swap () (in3 print_integer exec_yankdup boolean_flush integer_gt exec_flush) boolean_stackdepth exec_y_when_autoconstructing (tag_exec_146 () exec_yankdup boolean_rot)) integer_fromboolean integer_yank integer_add in2 boolean_dup integer_dec exec_y_when_autoconstructing (exec_s (integer_dec exec_if (integer_lt exec_y (boolean_dup_items integer_yankdup exec_empty exec_dup_items) integer_eq integer_dup_items boolean_and exec_s () (boolean_dup_times integer_yank integer_sub integer_add exec_do*range () boolean_dup_items boolean_yank exec_dup ()) ()) ()) () ()))
Lexicase best errors: [0 0 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tag_exec_146} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup})
Zero cases best program: (exec_dup_times (boolean_dup_items boolean_dup_times integer_add exec_swap () (in3 print_integer exec_yankdup boolean_flush integer_gt exec_flush) boolean_stackdepth exec_y_when_autoconstructing (tag_exec_146 () exec_yankdup boolean_rot)) integer_fromboolean integer_yank integer_add in2 boolean_dup integer_dec exec_y_when_autoconstructing (exec_s (integer_dec exec_if (integer_lt exec_y (boolean_dup_items integer_yankdup exec_empty exec_dup_items) integer_eq integer_dup_items boolean_and exec_s () (boolean_dup_times integer_yank integer_sub integer_add exec_do*range () boolean_dup_items boolean_yank exec_dup ()) ()) ()) () ()))
Zero cases best errors: [0 0 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (195 196 196 193 56 196 384 826 197 383)
Population mean number of elite cases: 2.82
Count of perfect (error zero) individuals by case: (195 196 196 193 56 196 384 826 197 383)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction -12} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 0, :instruction 36} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction exec_pop})
Best program: (boolean_invert_first_then_and in3 integer_yank in1 boolean_frominteger integer_mult -12 integer_yank print_integer integer_dup integer_swap in4 exec_s (exec_if (exec_noop boolean_dup_items) (exec_do*range (exec_dup_items integer_lte exec_yank exec_while () integer_dup_items integer_gt integer_min exec_s (integer_max exec_swap () (print_newline boolean_invert_first_then_and boolean_empty boolean_pop print_newline integer_lt boolean_and) integer_min boolean_invert_second_then_and) (print_exec (exec_swap (integer_yank integer_lt exec_do*times (exec_k () (boolean_or exec_if (boolean_invert_second_then_and) (integer_dup integer_stackdepth integer_fromboolean) exec_dup_items) 36 in1 exec_rot (boolean_pop print_integer integer_div boolean_flush exec_swap (exec_stackdepth integer_inc integer_empty integer_dec) (exec_stackdepth integer_rot integer_eq exec_if (exec_pop ()) ())) () ())) ())) ()))) () ())
Errors: [0 0 1 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 66
Size: 95
Percent parens: 0.305
--- Population Statistics ---
Average total errors in population: 7.178
Median total errors in population: 7
Error averages by case: (0.805 0.804 0.804 0.807 0.944 0.804 0.616 0.174 0.803 0.617)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.775
Average program size in population (points): 70.965
Average percent parens in population: 0.277
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.465
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1055732
--- Timings ---
Current time: 1559314521059 milliseconds
Total Time:           5.7 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 42.5%
Fitness Testing:      2.6 seconds, 45.3%
Report:               0.6 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 11                  | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: 93                 
Correct output: -87                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: 37                  | Program output: 84                 
Correct output: -39                 | Program output: 59                 
Correct output: -61                 | Program output: 5                  
Correct output: -62                 | Program output: 1                  
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 62                 
Correct output: 26                  | Program output: 59                 
Correct output: 1                   | Program output: 88                 
Correct output: 31                  | Program output: 31                 
Correct output: 37                  | Program output: 92                 
Correct output: 24                  | Program output: 81                 
Correct output: 3                   | Program output: 84                 
Correct output: 12                  | Program output: 37                 
Correct output: 55                  | Program output: 89                 
Correct output: 1                   | Program output: 69                 
Correct output: 4                   | Program output: 26                 
Correct output: 14                  | Program output: 18                 
Correct output: 11                  | Program output: 55                 
Correct output: 10                  | Program output: 88                 
Correct output: 1                   | Program output: 96                 
Correct output: 11                  | Program output: 72                 
Correct output: 20                  | Program output: 39                 
Correct output: 5                   | Program output: 49                 
Correct output: 3                   | Program output: 53                 
Correct output: 37                  | Program output: 44                 
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -42                
Correct output: -27                 | Program output: 26                 
Correct output: -1                  | Program output: 40                 
Correct output: -77                 | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -41                 | Program output: -18                
Correct output: 7                   | Program output: 15                 
Correct output: -70                 | Program output: -55                
Correct output: -66                 | Program output: -1                 
Correct output: -98                 | Program output: 13                 
Correct output: -60                 | Program output: -42                
Correct output: -27                 | Program output: 92                 
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -33                
Correct output: -75                 | Program output: 12                 
Correct output: -90                 | Program output: -76                
Correct output: -77                 | Program output: -52                
Correct output: -46                 | Program output: -16                
Correct output: -100                | Program output: 6                  
Correct output: -92                 | Program output: -7                 
Correct output: -29                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -44                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -9                 
Correct output: -48                 | Program output: 24                 
Correct output: -94                 | Program output: 25                 
Correct output: -65                 | Program output: -11                
Correct output: -78                 | Program output: -70                
Correct output: -97                 | Program output: 0                  
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -99                 | Program output: -56                
Correct output: -85                 | Program output: 35                 
Correct output: -63                 | Program output: -24                
Correct output: -92                 | Program output: 68                 
Correct output: -80                 | Program output: -7                 
Correct output: -32                 | Program output: -8                 
Correct output: -92                 | Program output: 75                 
Correct output: -68                 | Program output: 12                 
Correct output: -94                 | Program output: -88                
Correct output: -17                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -76                
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: 9                  
Correct output: -50                 | Program output: 25                 
Correct output: -93                 | Program output: -93                
Correct output: 11                  | Program output: 100                
Correct output: -41                 | Program output: -35                
Correct output: -100                | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -72                 | Program output: -17                
Correct output: -90                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_366} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*while})
Lexicase best program: (integer_flush integer_yank integer_yankdup boolean_rot in2 print_integer exec_yank boolean_flush exec_y (exec_stackdepth boolean_shove integer_mod integer_div) integer_fromboolean integer_stackdepth exec_eq integer_fromboolean exec_empty exec_s (exec_empty tagged_366 integer_flush integer_lt exec_do*while ()) () ())
Lexicase best errors: [1 1 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_366} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*while})
Zero cases best program: (integer_flush integer_yank integer_yankdup boolean_rot in2 print_integer exec_yank boolean_flush exec_y (exec_stackdepth boolean_shove integer_mod integer_div) integer_fromboolean integer_stackdepth exec_eq integer_fromboolean exec_empty exec_s (exec_empty tagged_366 integer_flush integer_lt exec_do*while ()) () ())
Zero cases best errors: [1 1 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (102 211 668 96 471 101 96 212 890 471)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (102 211 668 96 471 101 96 212 890 471)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_366} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction tagged_667})
Best program: (integer_flush integer_yank integer_yankdup boolean_rot in2 print_integer exec_yank boolean_flush exec_y (exec_stackdepth boolean_shove integer_mod integer_div) integer_fromboolean integer_stackdepth exec_eq integer_fromboolean exec_empty exec_s (exec_empty tagged_366 integer_flush integer_lt exec_do*while () integer_eq) (exec_while (integer_dup_times exec_dup () exec_empty integer_gte) integer_yank exec_do*while (integer_pop exec_yank) exec_do*count (integer_swap) boolean_rot boolean_pop integer_empty exec_while (exec_rot (integer_flush integer_sub) (boolean_invert_second_then_and integer_rot integer_pop exec_if (integer_min integer_mult) (tagged_667)) ())) ())
Errors: [1 1 0 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 50
Size: 66
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 6.682
Median total errors in population: 6
Error averages by case: (0.898 0.789 0.332 0.904 0.529 0.899 0.904 0.788 0.11 0.529)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.095
Average program size in population (points): 69.596
Average percent parens in population: 0.288
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.946
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.681
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1623488
--- Timings ---
Current time: 1559314524857 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.6 seconds, 52.2%
Fitness Testing:      3.3 seconds, 37.1%
Report:               0.9 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 81                 
Correct output: -57                 | Program output: -41                
Correct output: -53                 | Program output: 93                 
Correct output: -87                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 98                 
Correct output: 37                  | Program output: 84                 
Correct output: -39                 | Program output: 59                 
Correct output: -61                 | Program output: 5                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 62                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 96                 
Correct output: 31                  | Program output: 45                 
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 55                 
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 72                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 61                 
Correct output: 1                   | Program output: 59                 
Correct output: 11                  | Program output: 14                 
Correct output: 20                  | Program output: 28                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 18                 
Correct output: 37                  | Program output: 37                 
Correct output: -87                 | Program output: 71                 
Correct output: -93                 | Program output: 45                 
Correct output: -27                 | Program output: 5                  
Correct output: -1                  | Program output: 90                 
Correct output: -77                 | Program output: 73                 
Correct output: -60                 | Program output: 15                 
Correct output: -41                 | Program output: -6                 
Correct output: 7                   | Program output: 79                 
Correct output: -70                 | Program output: 65                 
Correct output: -66                 | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -60                 | Program output: -57                
Correct output: -27                 | Program output: 58                 
Correct output: -14                 | Program output: -2                 
Correct output: -83                 | Program output: 13                 
Correct output: -90                 | Program output: 89                 
Correct output: -25                 | Program output: 86                 
Correct output: -99                 | Program output: 75                 
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -46                 | Program output: 63                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -64                
Correct output: -29                 | Program output: 25                 
Correct output: -71                 | Program output: 35                 
Correct output: -44                 | Program output: -44                
Correct output: -72                 | Program output: 96                 
Correct output: -39                 | Program output: 73                 
Correct output: -48                 | Program output: 87                 
Correct output: -94                 | Program output: 97                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -32                
Correct output: -50                 | Program output: 38                 
Correct output: -99                 | Program output: 96                 
Correct output: -85                 | Program output: 57                 
Correct output: -63                 | Program output: 94                 
Correct output: -92                 | Program output: -33                
Correct output: -80                 | Program output: 26                 
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -17                 | Program output: -5                 
Correct output: -83                 | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: 87                 
Correct output: -86                 | Program output: 66                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -24                
Correct output: 11                  | Program output: 54                 
Correct output: -41                 | Program output: 91                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 8                  
Correct output: -72                 | Program output: 5                  
Correct output: -90                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_dup} {:close 0, :instruction 14} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_flush boolean_empty boolean_swap integer_lte integer_mult boolean_and in3 integer_gte integer_dup_items integer_mult integer_flush integer_yank exec_do*range (boolean_rot in2 print_integer exec_yank) boolean_flush exec_y (boolean_dup_times exec_dup ()) 14 exec_s (exec_shove (integer_dup_times) integer_lte integer_eq boolean_frominteger exec_y_when_autoconstructing (exec_do*while (exec_do*count (exec_yankdup integer_dup_times boolean_stackdepth integer_flush) exec_if (boolean_not integer_yankdup) () exec_do*count () integer_dup_times in1 integer_yankdup boolean_dup_times boolean_dup_times integer_lt exec_do*while () integer_eq) exec_while (integer_dup_times exec_dup () exec_empty exec_dup (integer_yank exec_do*while (integer_pop exec_yank) exec_do*count (integer_swap) boolean_rot) boolean_pop integer_empty exec_while (exec_rot (in1 integer_yankdup boolean_dup_times boolean_dup_times exec_do*while ()) () ())))) () ())
Lexicase best errors: [1 1 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 93
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_dup} {:close 0, :instruction 14} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_flush boolean_empty boolean_swap integer_lte integer_mult boolean_and in3 integer_gte integer_dup_items integer_mult integer_flush integer_yank exec_do*range (boolean_rot in2 print_integer exec_yank) boolean_flush exec_y (boolean_dup_times exec_dup ()) 14 exec_s (exec_shove (integer_dup_times) integer_lte integer_eq boolean_frominteger exec_y_when_autoconstructing (exec_do*while (exec_do*count (exec_yankdup integer_dup_times boolean_stackdepth integer_flush) exec_if (boolean_not integer_yankdup) () exec_do*count () integer_dup_times in1 integer_yankdup boolean_dup_times boolean_dup_times integer_lt exec_do*while () integer_eq) exec_while (integer_dup_times exec_dup () exec_empty exec_dup (integer_yank exec_do*while (integer_pop exec_yank) exec_do*count (integer_swap) boolean_rot) boolean_pop integer_empty exec_while (exec_rot (in1 integer_yankdup boolean_dup_times boolean_dup_times exec_do*while ()) () ())))) () ())
Zero cases best errors: [1 1 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 93
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (123 204 317 785 205 317 317 123 248 205)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (123 204 317 785 205 317 317 123 248 205)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 1, :instruction tag_integer_238} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction 14} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 2, :instruction print_integer} {:close 0, :instruction tagged_153} {:close 2, :instruction 79} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_895} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_46} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup})
Best program: (integer_swap integer_add boolean_dup integer_inc boolean_not tag_integer_238 exec_swap (boolean_rot boolean_dup_times exec_dup () 14 exec_s (exec_shove (integer_dup_times) integer_lte integer_eq boolean_frominteger exec_y_when_autoconstructing (exec_do*while (exec_do*count (exec_yankdup integer_dup_times boolean_stackdepth integer_flush) exec_if (boolean_not integer_yankdup) (exec_do*count () integer_dup_times in1 integer_yankdup boolean_dup_times boolean_dup_times exec_do*while (print_integer)) tagged_153 79)) integer_yank exec_shove (exec_yank exec_flush integer_flush boolean_or tagged_895 exec_s (boolean_not integer_inc exec_while (exec_s_when_autoconstructing (exec_noop boolean_or tagged_46 boolean_dup) (exec_yankdup integer_flush boolean_yank integer_mult boolean_invert_second_then_and boolean_empty exec_when () exec_dup_times (exec_shove (exec_dup () boolean_yankdup exec_empty) integer_flush exec_k_when_autoconstructing (integer_yank integer_gt integer_shove) (exec_swap (exec_if () (exec_do*while (print_newline boolean_swap boolean_stackdepth in1 boolean_frominteger) exec_do*range (exec_do*times (boolean_yank boolean_invert_second_then_and exec_k_when_autoconstructing (exec_when (exec_flush in1 print_exec (exec_y () exec_do*while (exec_yank in3) integer_fromboolean exec_do*times (integer_inc) exec_do*count (exec_if (integer_add boolean_xor exec_dup ()) ())))) ())))) ()))) ())) () ())) () ()) ())
Errors: [1 0 1 0 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 99
Size: 146
Percent parens: 0.322
--- Population Statistics ---
Average total errors in population: 7.156
Median total errors in population: 6
Error averages by case: (0.877 0.796 0.683 0.215 0.795 0.683 0.683 0.877 0.752 0.795)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.358
Average program size in population (points): 63.866
Average percent parens in population: 0.270
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.42175
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2201598
--- Timings ---
Current time: 1559314527997 milliseconds
Total Time:          12.5 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.8 seconds, 54.0%
Fitness Testing:      4.0 seconds, 31.6%
Report:               1.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 619
Test mean error for best: 0.61900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 11                  | Program output: 81                 
Correct output: -57                 | Program output: -41                
Correct output: -53                 | Program output: 93                 
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -43                
Correct output: 39                  | Program output: 39                 
Correct output: 37                  | Program output: 84                 
Correct output: -39                 | Program output: -39                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: 1                  
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 80                 
Correct output: 1                   | Program output: 42                 
Correct output: 31                  | Program output: 86                 
Correct output: 37                  | Program output: 86                 
Correct output: 24                  | Program output: 68                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 87                 
Correct output: 55                  | Program output: 80                 
Correct output: 1                   | Program output: 47                 
Correct output: 4                   | Program output: 81                 
Correct output: 14                  | Program output: 78                 
Correct output: 11                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 75                 
Correct output: 11                  | Program output: 27                 
Correct output: 20                  | Program output: 81                 
Correct output: 5                   | Program output: 65                 
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 93                 
Correct output: -87                 | Program output: -55                
Correct output: -93                 | Program output: -24                
Correct output: -27                 | Program output: 44                 
Correct output: -1                  | Program output: -1                 
Correct output: -77                 | Program output: 78                 
Correct output: -60                 | Program output: 57                 
Correct output: -41                 | Program output: -13                
Correct output: 7                   | Program output: 47                 
Correct output: -70                 | Program output: -70                
Correct output: -66                 | Program output: 89                 
Correct output: -98                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -14                 | Program output: 65                 
Correct output: -83                 | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: 80                 
Correct output: -99                 | Program output: -2                 
Correct output: -92                 | Program output: 64                 
Correct output: -75                 | Program output: 5                  
Correct output: -90                 | Program output: -55                
Correct output: -77                 | Program output: -3                 
Correct output: -46                 | Program output: 56                 
Correct output: -100                | Program output: -29                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: 92                 
Correct output: -71                 | Program output: 15                 
Correct output: -44                 | Program output: 2                  
Correct output: -72                 | Program output: -71                
Correct output: -39                 | Program output: -26                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -65                
Correct output: -65                 | Program output: 70                 
Correct output: -78                 | Program output: 83                 
Correct output: -97                 | Program output: 45                 
Correct output: -100                | Program output: 46                 
Correct output: -50                 | Program output: 22                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -63                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -65                
Correct output: -32                 | Program output: 71                 
Correct output: -92                 | Program output: -22                
Correct output: -68                 | Program output: 92                 
Correct output: -94                 | Program output: -88                
Correct output: -17                 | Program output: 91                 
Correct output: -83                 | Program output: -42                
Correct output: -99                 | Program output: -27                
Correct output: -44                 | Program output: 82                 
Correct output: -86                 | Program output: 66                 
Correct output: -46                 | Program output: 84                 
Correct output: -50                 | Program output: 55                 
Correct output: -93                 | Program output: 58                 
Correct output: 11                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -88                
Correct output: -63                 | Program output: 87                 
Correct output: -72                 | Program output: -14                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove})
Lexicase best program: (exec_y_when_autoconstructing (integer_eq exec_s_when_autoconstructing () (in4 exec_do*range (print_integer boolean_xor integer_mult boolean_swap integer_div exec_shove (boolean_stackdepth integer_flush integer_dup_times integer_eq) integer_div boolean_dup)) (exec_noop) integer_min exec_k_when_autoconstructing () (integer_empty exec_shove ())))
Lexicase best errors: [1 1 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove})
Zero cases best program: (exec_y_when_autoconstructing (integer_eq exec_s_when_autoconstructing () (in4 exec_do*range (print_integer boolean_xor integer_mult boolean_swap integer_div exec_shove (boolean_stackdepth integer_flush integer_dup_times integer_eq) integer_div boolean_dup)) (exec_noop) integer_min exec_k_when_autoconstructing () (integer_empty exec_shove ())))
Zero cases best errors: [1 1 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (279 279 98 332 195 97 195 916 195 100)
Population mean number of elite cases: 2.69
Count of perfect (error zero) individuals by case: (279 279 98 332 195 97 195 916 195 100)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove})
Best program: (integer_inc exec_y_when_autoconstructing (integer_eq exec_s_when_autoconstructing () (in4 exec_do*range (print_integer boolean_xor integer_mult boolean_swap integer_div exec_shove (boolean_stackdepth integer_flush integer_dup_times integer_eq) integer_div boolean_dup)) (exec_noop) integer_min exec_k_when_autoconstructing () (integer_empty exec_shove ())))
Errors: [1 1 1 1 0 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 33
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 7.314
Median total errors in population: 7
Error averages by case: (0.721 0.721 0.902 0.668 0.805 0.903 0.805 0.084 0.805 0.9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.955
Average program size in population (points): 56.141
Average percent parens in population: 0.266
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.95475
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2773857
--- Timings ---
Current time: 1559314531484 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.4 seconds, 58.2%
Fitness Testing:      4.6 seconds, 28.3%
Report:               2.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 81                 
Correct output: -57                 | Program output: -41                
Correct output: -53                 | Program output: 93                 
Correct output: -87                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 98                 
Correct output: 37                  | Program output: 84                 
Correct output: -39                 | Program output: 59                 
Correct output: -61                 | Program output: 5                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 62                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 96                 
Correct output: 31                  | Program output: 45                 
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 55                 
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 72                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 61                 
Correct output: 1                   | Program output: 59                 
Correct output: 11                  | Program output: 14                 
Correct output: 20                  | Program output: 28                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 18                 
Correct output: 37                  | Program output: 37                 
Correct output: -87                 | Program output: 71                 
Correct output: -93                 | Program output: 45                 
Correct output: -27                 | Program output: 5                  
Correct output: -1                  | Program output: 90                 
Correct output: -77                 | Program output: 73                 
Correct output: -60                 | Program output: 15                 
Correct output: -41                 | Program output: -6                 
Correct output: 7                   | Program output: 79                 
Correct output: -70                 | Program output: 65                 
Correct output: -66                 | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -60                 | Program output: -57                
Correct output: -27                 | Program output: 58                 
Correct output: -14                 | Program output: -2                 
Correct output: -83                 | Program output: 13                 
Correct output: -90                 | Program output: 89                 
Correct output: -25                 | Program output: 86                 
Correct output: -99                 | Program output: 75                 
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -46                 | Program output: 63                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -64                
Correct output: -29                 | Program output: 25                 
Correct output: -71                 | Program output: 35                 
Correct output: -44                 | Program output: -44                
Correct output: -72                 | Program output: 96                 
Correct output: -39                 | Program output: 73                 
Correct output: -48                 | Program output: 87                 
Correct output: -94                 | Program output: 97                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -32                
Correct output: -50                 | Program output: 38                 
Correct output: -99                 | Program output: 96                 
Correct output: -85                 | Program output: 57                 
Correct output: -63                 | Program output: 94                 
Correct output: -92                 | Program output: -33                
Correct output: -80                 | Program output: 26                 
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -17                 | Program output: -5                 
Correct output: -83                 | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: 87                 
Correct output: -86                 | Program output: 66                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -24                
Correct output: 11                  | Program output: 54                 
Correct output: -41                 | Program output: 91                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 8                  
Correct output: -72                 | Program output: 5                  
Correct output: -90                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove})
Lexicase best program: (exec_y_when_autoconstructing (integer_eq exec_s_when_autoconstructing () (in4 exec_do*range (print_integer integer_mult boolean_swap integer_div exec_shove (boolean_stackdepth integer_flush integer_dup_times integer_eq) integer_div boolean_dup)) (exec_noop) integer_min exec_k_when_autoconstructing () (integer_empty exec_shove ())))
Lexicase best errors: [1 0 1 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove})
Zero cases best program: (exec_y_when_autoconstructing (integer_eq exec_s_when_autoconstructing () (in4 exec_do*range (print_integer integer_mult boolean_swap integer_div exec_shove (boolean_stackdepth integer_flush integer_dup_times integer_eq) integer_div boolean_dup)) (exec_noop) integer_min exec_k_when_autoconstructing () (integer_empty exec_shove ())))
Zero cases best errors: [1 0 1 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (320 293 323 206 293 914 206 293 97 205)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (320 293 323 206 293 914 206 293 97 205)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction print_newline} {:close 1, :instruction tagged_825} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap})
Best program: (in1 exec_k_when_autoconstructing (exec_dup (print_integer) integer_pop exec_rot (exec_if (integer_fromboolean boolean_yank exec_flush exec_dup_items integer_dup_times boolean_frominteger) (exec_s (boolean_shove integer_max print_newline tagged_825) (boolean_yank) (boolean_shove exec_empty integer_inc) exec_yankdup boolean_dup)) (integer_max in3 print_integer integer_dup_times exec_stackdepth boolean_empty integer_dup boolean_invert_second_then_and exec_rot () (integer_dup_times exec_do*times (integer_gt exec_pop () boolean_yankdup boolean_empty) exec_s_when_autoconstructing (boolean_swap) () ()) ()) ()) ())
Errors: [1 1 1 0 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 41
Size: 61
Percent parens: 0.328
--- Population Statistics ---
Average total errors in population: 6.85
Median total errors in population: 7
Error averages by case: (0.68 0.707 0.677 0.794 0.707 0.086 0.794 0.707 0.903 0.795)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.373
Average program size in population (points): 54.054
Average percent parens in population: 0.285
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.46725
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.674
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3243591
--- Timings ---
Current time: 1559314534267 milliseconds
Total Time:          19.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.5 seconds, 60.6%
Fitness Testing:      5.1 seconds, 26.7%
Report:               2.3 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 81                 
Correct output: -57                 | Program output: -41                
Correct output: -53                 | Program output: 93                 
Correct output: -87                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 98                 
Correct output: 37                  | Program output: 84                 
Correct output: -39                 | Program output: 59                 
Correct output: -61                 | Program output: 5                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 62                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 96                 
Correct output: 31                  | Program output: 45                 
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 55                 
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 72                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 61                 
Correct output: 1                   | Program output: 59                 
Correct output: 11                  | Program output: 14                 
Correct output: 20                  | Program output: 28                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 18                 
Correct output: 37                  | Program output: 37                 
Correct output: -87                 | Program output: 71                 
Correct output: -93                 | Program output: 45                 
Correct output: -27                 | Program output: 5                  
Correct output: -1                  | Program output: 90                 
Correct output: -77                 | Program output: 73                 
Correct output: -60                 | Program output: 15                 
Correct output: -41                 | Program output: -6                 
Correct output: 7                   | Program output: 79                 
Correct output: -70                 | Program output: 65                 
Correct output: -66                 | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -60                 | Program output: -57                
Correct output: -27                 | Program output: 58                 
Correct output: -14                 | Program output: -2                 
Correct output: -83                 | Program output: 13                 
Correct output: -90                 | Program output: 89                 
Correct output: -25                 | Program output: 86                 
Correct output: -99                 | Program output: 75                 
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -46                 | Program output: 63                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -64                
Correct output: -29                 | Program output: 25                 
Correct output: -71                 | Program output: 35                 
Correct output: -44                 | Program output: -44                
Correct output: -72                 | Program output: 96                 
Correct output: -39                 | Program output: 73                 
Correct output: -48                 | Program output: 87                 
Correct output: -94                 | Program output: 97                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -32                
Correct output: -50                 | Program output: 38                 
Correct output: -99                 | Program output: 96                 
Correct output: -85                 | Program output: 57                 
Correct output: -63                 | Program output: 94                 
Correct output: -92                 | Program output: -33                
Correct output: -80                 | Program output: 26                 
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -17                 | Program output: -5                 
Correct output: -83                 | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: 87                 
Correct output: -86                 | Program output: 66                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -24                
Correct output: 11                  | Program output: 54                 
Correct output: -41                 | Program output: 91                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 8                  
Correct output: -72                 | Program output: 5                  
Correct output: -90                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_dup boolean_dup integer_dup_times integer_shove in1 boolean_eq print_integer boolean_invert_second_then_and exec_s_when_autoconstructing (integer_empty exec_yankdup exec_dup ()) () ())
Lexicase best errors: [0 1 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 17
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_dup boolean_dup integer_dup_times integer_shove in1 boolean_eq print_integer boolean_invert_second_then_and exec_s_when_autoconstructing (integer_empty exec_yankdup exec_dup ()) () ())
Zero cases best errors: [0 1 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 17
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (323 101 324 202 105 925 323 105 324 324)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (323 101 324 202 105 925 323 105 324 324)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup})
Best program: (integer_dup boolean_dup integer_dup_times integer_shove in1 boolean_eq print_integer boolean_invert_second_then_and exec_s_when_autoconstructing (integer_empty exec_yankdup exec_dup ()) () ())
Errors: [0 1 0 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 12
Size: 17
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 6.944
Median total errors in population: 8
Error averages by case: (0.677 0.899 0.676 0.798 0.895 0.075 0.677 0.895 0.676 0.676)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.472
Average program size in population (points): 48.19
Average percent parens in population: 0.281
Minimum age in population: 6.0
Maximum age in population: 10.84375
Average age in population: 8.93378125
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3647718
--- Timings ---
Current time: 1559314537199 milliseconds
Total Time:          21.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.8 seconds, 63.1%
Fitness Testing:      5.5 seconds, 25.1%
Report:               2.5 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 11                  | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: 93                 
Correct output: -87                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: 37                  | Program output: 84                 
Correct output: -39                 | Program output: 59                 
Correct output: -61                 | Program output: 5                  
Correct output: -62                 | Program output: 1                  
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 62                 
Correct output: 26                  | Program output: 59                 
Correct output: 1                   | Program output: 88                 
Correct output: 31                  | Program output: 31                 
Correct output: 37                  | Program output: 92                 
Correct output: 24                  | Program output: 81                 
Correct output: 3                   | Program output: 84                 
Correct output: 12                  | Program output: 37                 
Correct output: 55                  | Program output: 89                 
Correct output: 1                   | Program output: 69                 
Correct output: 4                   | Program output: 26                 
Correct output: 14                  | Program output: 18                 
Correct output: 11                  | Program output: 55                 
Correct output: 10                  | Program output: 88                 
Correct output: 1                   | Program output: 96                 
Correct output: 11                  | Program output: 72                 
Correct output: 20                  | Program output: 39                 
Correct output: 5                   | Program output: 49                 
Correct output: 3                   | Program output: 53                 
Correct output: 37                  | Program output: 44                 
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -42                
Correct output: -27                 | Program output: 26                 
Correct output: -1                  | Program output: 40                 
Correct output: -77                 | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -41                 | Program output: -18                
Correct output: 7                   | Program output: 15                 
Correct output: -70                 | Program output: -55                
Correct output: -66                 | Program output: -1                 
Correct output: -98                 | Program output: 13                 
Correct output: -60                 | Program output: -42                
Correct output: -27                 | Program output: 92                 
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -33                
Correct output: -75                 | Program output: 12                 
Correct output: -90                 | Program output: -76                
Correct output: -77                 | Program output: -52                
Correct output: -46                 | Program output: -16                
Correct output: -100                | Program output: 6                  
Correct output: -92                 | Program output: -7                 
Correct output: -29                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -44                 | Program output:                    
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -9                 
Correct output: -48                 | Program output: 24                 
Correct output: -94                 | Program output: 25                 
Correct output: -65                 | Program output: -11                
Correct output: -78                 | Program output: -70                
Correct output: -97                 | Program output: 0                  
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -99                 | Program output: -56                
Correct output: -85                 | Program output: 35                 
Correct output: -63                 | Program output: -24                
Correct output: -92                 | Program output: 68                 
Correct output: -80                 | Program output: -7                 
Correct output: -32                 | Program output: -8                 
Correct output: -92                 | Program output: 75                 
Correct output: -68                 | Program output: 12                 
Correct output: -94                 | Program output: -88                
Correct output: -17                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -76                
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: 9                  
Correct output: -50                 | Program output: 25                 
Correct output: -93                 | Program output: -93                
Correct output: 11                  | Program output: 100                
Correct output: -41                 | Program output: -35                
Correct output: -100                | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -72                 | Program output: -17                
Correct output: -90                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_366} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 2, :instruction print_integer} {:close 0, :instruction tagged_153} {:close 2, :instruction 79} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction tagged_724} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_flush integer_yank integer_yankdup boolean_rot in2 print_integer exec_yank boolean_flush exec_y (exec_stackdepth boolean_shove integer_mod integer_div) integer_fromboolean integer_stackdepth exec_eq integer_fromboolean exec_empty exec_s (exec_empty tagged_366 integer_flush integer_lt exec_do*while () integer_eq) (exec_while (integer_dup_times exec_dup () exec_empty integer_dup_times boolean_stackdepth integer_flush) exec_if (boolean_not integer_yankdup) (boolean_xor) integer_dup_times in1 integer_yankdup boolean_dup_times boolean_dup_times exec_do*while (print_integer)) (tagged_153 79) integer_yank exec_shove (exec_yank integer_pop) exec_shove (integer_dup_items exec_eq exec_k_when_autoconstructing () () integer_yank boolean_dup_items integer_pop exec_rot (integer_gte integer_gte boolean_stackdepth exec_when (exec_s_when_autoconstructing () (boolean_pop) (exec_while (exec_do*count (integer_empty integer_mult boolean_yank) boolean_invert_second_then_and in1 exec_do*count (boolean_and integer_add tagged_724) exec_empty)))) () ()))
Lexicase best errors: [0 0 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 100
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_366} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 2, :instruction print_integer} {:close 0, :instruction tagged_153} {:close 2, :instruction 79} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction tagged_724} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_flush integer_yank integer_yankdup boolean_rot in2 print_integer exec_yank boolean_flush exec_y (exec_stackdepth boolean_shove integer_mod integer_div) integer_fromboolean integer_stackdepth exec_eq integer_fromboolean exec_empty exec_s (exec_empty tagged_366 integer_flush integer_lt exec_do*while () integer_eq) (exec_while (integer_dup_times exec_dup () exec_empty integer_dup_times boolean_stackdepth integer_flush) exec_if (boolean_not integer_yankdup) (boolean_xor) integer_dup_times in1 integer_yankdup boolean_dup_times boolean_dup_times exec_do*while (print_integer)) (tagged_153 79) integer_yank exec_shove (exec_yank integer_pop) exec_shove (integer_dup_items exec_eq exec_k_when_autoconstructing () () integer_yank boolean_dup_items integer_pop exec_rot (integer_gte integer_gte boolean_stackdepth exec_when (exec_s_when_autoconstructing () (boolean_pop) (exec_while (exec_do*count (integer_empty integer_mult boolean_yank) boolean_invert_second_then_and in1 exec_do*count (boolean_and integer_add tagged_724) exec_empty)))) () ()))
Zero cases best errors: [0 0 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 100
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (923 423 246 1 1000 2 499 499 422 926)
Population mean number of elite cases: 4.94
Count of perfect (error zero) individuals by case: (923 423 246 1 0 2 499 499 422 926)
Population mean number of perfect (error zero) cases: 3.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_366} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yankdup})
Best program: (integer_inc integer_gt integer_mod integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_85 () exec_yankdup print_integer boolean_empty exec_flush boolean_invert_second_then_and integer_dup_items boolean_swap integer_empty integer_fromboolean integer_stackdepth exec_eq integer_fromboolean exec_empty exec_s (exec_empty tagged_366 integer_flush integer_gt exec_pop () boolean_yankdup) () ())
Errors: [0 0 0 1 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 30
Size: 36
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.059
Median total errors in population: 6
Error averages by case: (0.077 0.577 0.754 0.999 1.0 0.998 0.501 0.501 0.578 0.074)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 35.416
Average program size in population (points): 45.677
Average percent parens in population: 0.209
Minimum age in population: 7.75
Maximum age in population: 12.25
Average age in population: 10.408421875
Median age in population: 10.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.563
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4039185
--- Timings ---
Current time: 1559314539815 milliseconds
Total Time:          24.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.8 seconds, 64.5%
Fitness Testing:      6.0 seconds, 24.3%
Report:               2.7 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 81                 
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: 93                 
Correct output: -87                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 98                 
Correct output: 37                  | Program output: 84                 
Correct output: -39                 | Program output: 59                 
Correct output: -61                 | Program output: 5                  
Correct output: -62                 | Program output: 1                  
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 62                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 96                 
Correct output: 31                  | Program output: 45                 
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 84                 
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 72                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 61                 
Correct output: 1                   | Program output: 59                 
Correct output: 11                  | Program output: 14                 
Correct output: 20                  | Program output: 28                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 53                 
Correct output: 37                  | Program output: 37                 
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -42                
Correct output: -27                 | Program output: 5                  
Correct output: -1                  | Program output: 40                 
Correct output: -77                 | Program output: 73                 
Correct output: -60                 | Program output: 15                 
Correct output: -41                 | Program output: -18                
Correct output: 7                   | Program output: 79                 
Correct output: -70                 | Program output: -55                
Correct output: -66                 | Program output: 1                  
Correct output: -98                 | Program output: 13                 
Correct output: -60                 | Program output: -42                
Correct output: -27                 | Program output: 92                 
Correct output: -14                 | Program output: -2                 
Correct output: -83                 | Program output: 13                 
Correct output: -90                 | Program output: -41                
Correct output: -25                 | Program output: 86                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: 12                 
Correct output: -90                 | Program output: -76                
Correct output: -77                 | Program output: -52                
Correct output: -46                 | Program output: 63                 
Correct output: -100                | Program output: 6                  
Correct output: -92                 | Program output: -7                 
Correct output: -29                 | Program output: 25                 
Correct output: -71                 | Program output: 35                 
Correct output: -44                 | Program output:                    
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -9                 
Correct output: -48                 | Program output: 24                 
Correct output: -94                 | Program output: 25                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -32                
Correct output: -50                 | Program output: 38                 
Correct output: -99                 | Program output: -56                
Correct output: -85                 | Program output: 35                 
Correct output: -63                 | Program output: -24                
Correct output: -92                 | Program output: 68                 
Correct output: -80                 | Program output: -7                 
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: 75                 
Correct output: -68                 | Program output: 22                 
Correct output: -94                 | Program output: -88                
Correct output: -17                 | Program output: -5                 
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -76                
Correct output: -44                 | Program output: 87                 
Correct output: -86                 | Program output: 66                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -24                
Correct output: 11                  | Program output: 54                 
Correct output: -41                 | Program output: -35                
Correct output: -100                | Program output: -95                
Correct output: -63                 | Program output: 8                  
Correct output: -72                 | Program output: -17                
Correct output: -90                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1})
Lexicase best program: (integer_inc integer_gt integer_mod integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_85 () exec_yankdup print_integer boolean_empty exec_flush boolean_invert_second_then_and integer_dup_items boolean_swap in1)
Lexicase best errors: [1 0 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1})
Zero cases best program: (integer_inc integer_gt integer_mod integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_85 () exec_yankdup print_integer boolean_empty exec_flush boolean_invert_second_then_and integer_dup_items boolean_swap in1)
Zero cases best errors: [1 0 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (244 666 275 416 1000 473 274 275 244 415)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (244 666 275 416 0 473 274 275 244 415)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1})
Best program: (integer_inc integer_gt integer_mod integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_85 () exec_yankdup print_integer boolean_empty exec_flush boolean_invert_second_then_and integer_dup_items boolean_swap in1)
Errors: [1 0 1 0 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 6.718
Median total errors in population: 7
Error averages by case: (0.756 0.334 0.725 0.584 1.0 0.527 0.726 0.725 0.756 0.585)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 26.717
Average program size in population (points): 34.438
Average percent parens in population: 0.209
Minimum age in population: 8.9375
Maximum age in population: 13.7109375
Average age in population: 12.1122578125
Median age in population: 12.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 223
Genome diversity (% unique genomes):	 0.482
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 229
Syntactic diversity (% unique Push programs):	 0.458
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4707264
--- Timings ---
Current time: 1559314542573 milliseconds
Total Time:          27.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.8 seconds, 65.2%
Fitness Testing:      6.6 seconds, 24.1%
Report:               2.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 81                 
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: 93                 
Correct output: -87                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 98                 
Correct output: 37                  | Program output: 84                 
Correct output: -39                 | Program output: 59                 
Correct output: -61                 | Program output: 5                  
Correct output: -62                 | Program output: 1                  
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 62                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 96                 
Correct output: 31                  | Program output: 45                 
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 84                 
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 72                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 61                 
Correct output: 1                   | Program output: 59                 
Correct output: 11                  | Program output: 14                 
Correct output: 20                  | Program output: 28                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 53                 
Correct output: 37                  | Program output: 37                 
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -42                
Correct output: -27                 | Program output: 5                  
Correct output: -1                  | Program output: 40                 
Correct output: -77                 | Program output: 73                 
Correct output: -60                 | Program output: 15                 
Correct output: -41                 | Program output: -18                
Correct output: 7                   | Program output: 79                 
Correct output: -70                 | Program output: -55                
Correct output: -66                 | Program output: 1                  
Correct output: -98                 | Program output: 13                 
Correct output: -60                 | Program output: -42                
Correct output: -27                 | Program output: 92                 
Correct output: -14                 | Program output: -2                 
Correct output: -83                 | Program output: 13                 
Correct output: -90                 | Program output: -41                
Correct output: -25                 | Program output: 86                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output:                    
Correct output: -90                 | Program output: -76                
Correct output: -77                 | Program output: -52                
Correct output: -46                 | Program output: 63                 
Correct output: -100                | Program output: 6                  
Correct output: -92                 | Program output: -7                 
Correct output: -29                 | Program output: 25                 
Correct output: -71                 | Program output: 35                 
Correct output: -44                 | Program output:                    
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -9                 
Correct output: -48                 | Program output: 24                 
Correct output: -94                 | Program output: 25                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -32                
Correct output: -50                 | Program output: 38                 
Correct output: -99                 | Program output: -56                
Correct output: -85                 | Program output: 35                 
Correct output: -63                 | Program output: -24                
Correct output: -92                 | Program output: 68                 
Correct output: -80                 | Program output: -7                 
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: 75                 
Correct output: -68                 | Program output: 22                 
Correct output: -94                 | Program output: -88                
Correct output: -17                 | Program output: -5                 
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -76                
Correct output: -44                 | Program output: 87                 
Correct output: -86                 | Program output: 66                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -24                
Correct output: 11                  | Program output: 54                 
Correct output: -41                 | Program output: -35                
Correct output: -100                | Program output: -95                
Correct output: -63                 | Program output: 8                  
Correct output: -72                 | Program output: -17                
Correct output: -90                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1})
Lexicase best program: (integer_inc integer_gt integer_mod integer_dup exec_yankdup boolean_shove boolean_shove in2 exec_y (tag_exec_85 () exec_yankdup print_integer boolean_empty exec_flush boolean_invert_second_then_and integer_dup_items) boolean_swap in1)
Lexicase best errors: [1 0 1 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 21
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_y} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1})
Zero cases best program: (integer_inc integer_gt integer_mod integer_dup exec_yankdup boolean_shove boolean_shove in2 exec_y (tag_exec_85 () exec_yankdup print_integer boolean_empty exec_flush boolean_invert_second_then_and integer_dup_items) boolean_swap in1)
Zero cases best errors: [1 0 1 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 21
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (339 299 306 1000 1000 306 300 1000 300 1000)
Population mean number of elite cases: 5.85
Count of perfect (error zero) individuals by case: (339 299 306 0 0 306 300 0 300 0)
Population mean number of perfect (error zero) cases: 1.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1})
Best program: (integer_inc integer_gt integer_mod integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_85 () exec_yankdup print_integer boolean_empty exec_flush boolean_invert_second_then_and integer_dup_items exec_flush boolean_invert_second_then_and integer_dup_items boolean_swap in1)
Errors: [1 0 1 1 1 1 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 21
Size: 23
Percent parens: 0.087
--- Population Statistics ---
Average total errors in population: 8.15
Median total errors in population: 8
Error averages by case: (0.661 0.701 0.694 1.0 1.0 0.694 0.7 1.0 0.7 1.0)
Error minima by case: (0 0 0 1 1 0 0 1 0 1)
Average genome size in population (length): 24.471
Average program size in population (points): 30.894
Average percent parens in population: 0.194
Minimum age in population: 10.0
Maximum age in population: 15.421875
Average age in population: 13.62862109375
Median age in population: 13.7265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 223
Genome diversity (% unique genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 235
Syntactic diversity (% unique Push programs):	 0.425
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5404394
--- Timings ---
Current time: 1559314545554 milliseconds
Total Time:          30.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.0 seconds, 65.9%
Fitness Testing:      7.2 seconds, 23.8%
Report:               3.0 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 81                 
Correct output: -57                 | Program output: -41                
Correct output: -53                 | Program output: 93                 
Correct output: -87                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 98                 
Correct output: 37                  | Program output: 84                 
Correct output: -39                 | Program output: 59                 
Correct output: -61                 | Program output: 5                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 62                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 96                 
Correct output: 31                  | Program output: 45                 
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 8455               
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 72                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 61                 
Correct output: 1                   | Program output: 59                 
Correct output: 11                  | Program output: 14                 
Correct output: 20                  | Program output: 28                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 5318               
Correct output: 37                  | Program output: 37                 
Correct output: -87                 | Program output: 71                 
Correct output: -93                 | Program output: 45                 
Correct output: -27                 | Program output: 5                  
Correct output: -1                  | Program output: 90                 
Correct output: -77                 | Program output: 73                 
Correct output: -60                 | Program output: 15                 
Correct output: -41                 | Program output: -6                 
Correct output: 7                   | Program output: 79                 
Correct output: -70                 | Program output: 65                 
Correct output: -66                 | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -60                 | Program output: -57                
Correct output: -27                 | Program output: 58                 
Correct output: -14                 | Program output: -2                 
Correct output: -83                 | Program output: 13                 
Correct output: -90                 | Program output: 89                 
Correct output: -25                 | Program output: 86                 
Correct output: -99                 | Program output: 75                 
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -46                 | Program output: 63                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -64                
Correct output: -29                 | Program output: 25                 
Correct output: -71                 | Program output: -71                
Correct output: -44                 | Program output: -44                
Correct output: -72                 | Program output: 96                 
Correct output: -39                 | Program output: 73                 
Correct output: -48                 | Program output: 87                 
Correct output: -94                 | Program output: 97                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -32                
Correct output: -50                 | Program output: 38                 
Correct output: -99                 | Program output: 96                 
Correct output: -85                 | Program output: 57                 
Correct output: -63                 | Program output: 94                 
Correct output: -92                 | Program output: -33                
Correct output: -80                 | Program output: 26                 
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -17                 | Program output: -5                 
Correct output: -83                 | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: 87                 
Correct output: -86                 | Program output: 66                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -24                
Correct output: 11                  | Program output: 54                 
Correct output: -41                 | Program output: 91                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 8                  
Correct output: -72                 | Program output: 5                  
Correct output: -90                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Lexicase best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_85 () exec_yankdup boolean_swap in1 boolean_rot print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Lexicase best errors: [0 1 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.063
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Zero cases best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_85 () exec_yankdup boolean_swap in1 boolean_rot print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Zero cases best errors: [0 1 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.063
--- Lexicase Population Statistics ---
Count of elite individuals by case: (442 162 452 936 161 323 1000 1 12 1000)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (442 162 452 936 161 323 0 1 12 0)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_85 () exec_yankdup boolean_swap in1 boolean_rot print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Errors: [0 1 0 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 30
Size: 32
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 7.511
Median total errors in population: 7
Error averages by case: (0.558 0.838 0.548 0.064 0.839 0.677 1.0 0.999 0.988 1.0)
Error minima by case: (0 0 0 0 0 0 1 0 0 1)
Average genome size in population (length): 25.026
Average program size in population (points): 30.625
Average percent parens in population: 0.162
Minimum age in population: 11.0
Maximum age in population: 16.94140625
Average age in population: 15.182482421875
Median age in population: 15.248046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 253
Genome diversity (% unique genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 283
Syntactic diversity (% unique Push programs):	 0.484
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5932586
--- Timings ---
Current time: 1559314548331 milliseconds
Total Time:          33.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.0 seconds, 66.6%
Fitness Testing:      7.8 seconds, 23.5%
Report:               3.2 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 81                 
Correct output: -57                 | Program output: -41                
Correct output: -53                 | Program output: 93                 
Correct output: -87                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 98                 
Correct output: 37                  | Program output: 84                 
Correct output: -39                 | Program output: 59                 
Correct output: -61                 | Program output: 5                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 62                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 96                 
Correct output: 31                  | Program output: 45                 
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 8455               
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 72                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 61                 
Correct output: 1                   | Program output: 59                 
Correct output: 11                  | Program output: 14                 
Correct output: 20                  | Program output: 28                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 5318               
Correct output: 37                  | Program output: 37                 
Correct output: -87                 | Program output: 71                 
Correct output: -93                 | Program output: 45                 
Correct output: -27                 | Program output: 5                  
Correct output: -1                  | Program output: 90                 
Correct output: -77                 | Program output: 73                 
Correct output: -60                 | Program output: 15                 
Correct output: -41                 | Program output: -6                 
Correct output: 7                   | Program output: 79                 
Correct output: -70                 | Program output: 65                 
Correct output: -66                 | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -60                 | Program output: -57                
Correct output: -27                 | Program output: 58                 
Correct output: -14                 | Program output: -2                 
Correct output: -83                 | Program output: 13                 
Correct output: -90                 | Program output: 89                 
Correct output: -25                 | Program output: 86                 
Correct output: -99                 | Program output: 75                 
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -46                 | Program output: 63                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -64                
Correct output: -29                 | Program output: 25                 
Correct output: -71                 | Program output: -71                
Correct output: -44                 | Program output: -44                
Correct output: -72                 | Program output: 96                 
Correct output: -39                 | Program output: 73                 
Correct output: -48                 | Program output: 87                 
Correct output: -94                 | Program output: 97                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -32                
Correct output: -50                 | Program output: 38                 
Correct output: -99                 | Program output: 96                 
Correct output: -85                 | Program output: 57                 
Correct output: -63                 | Program output: 94                 
Correct output: -92                 | Program output: -33                
Correct output: -80                 | Program output: 26                 
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -17                 | Program output: -5                 
Correct output: -83                 | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: 87                 
Correct output: -86                 | Program output: 66                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -24                
Correct output: 11                  | Program output: 54                 
Correct output: -41                 | Program output: 91                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 8                  
Correct output: -72                 | Program output: 5                  
Correct output: -90                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Lexicase best program: (integer_inc integer_gt integer_eq integer_dup integer_add boolean_shove boolean_shove in2 in4 tag_exec_85 () exec_yankdup boolean_swap in1 boolean_rot print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Lexicase best errors: [0 1 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.063
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Zero cases best program: (integer_inc integer_gt integer_eq integer_dup integer_add boolean_shove boolean_shove in2 in4 tag_exec_85 () exec_yankdup boolean_swap in1 boolean_rot print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Zero cases best errors: [0 1 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.063
--- Lexicase Population Statistics ---
Count of elite individuals by case: (664 18 493 1000 243 479 664 662 755 248)
Population mean number of elite cases: 5.23
Count of perfect (error zero) individuals by case: (664 18 493 0 243 479 664 662 755 248)
Population mean number of perfect (error zero) cases: 4.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_85 () exec_yankdup boolean_swap in1 boolean_rot print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Errors: [0 1 0 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 30
Size: 32
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 5.774
Median total errors in population: 7
Error averages by case: (0.336 0.982 0.507 1.0 0.757 0.521 0.336 0.338 0.245 0.752)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 24.457
Average program size in population (points): 27.787
Average percent parens in population: 0.131
Minimum age in population: 14.78125
Maximum age in population: 18.580078125
Average age in population: 17.301404296875
Median age in population: 17.3671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 311
Genome diversity (% unique genomes):	 0.379
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 338
Syntactic diversity (% unique Push programs):	 0.329
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6379290
--- Timings ---
Current time: 1559314551195 milliseconds
Total Time:          35.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.2 seconds, 67.5%
Fitness Testing:      8.2 seconds, 22.8%
Report:               3.4 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: 93                 
Correct output: -87                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: 37                  | Program output: 84                 
Correct output: -39                 | Program output: 59                 
Correct output: -61                 | Program output: 5                  
Correct output: -62                 | Program output: -621               
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 62                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 88                 
Correct output: 31                  | Program output: 31                 
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 8455               
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 61                 
Correct output: 1                   | Program output: 59                 
Correct output: 11                  | Program output: 14                 
Correct output: 20                  | Program output: 28                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 5318               
Correct output: 37                  | Program output: 37                 
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -42                
Correct output: -27                 | Program output: 5                  
Correct output: -1                  | Program output: 40                 
Correct output: -77                 | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -41                 | Program output: -18                
Correct output: 7                   | Program output: 15                 
Correct output: -70                 | Program output: -55                
Correct output: -66                 | Program output: -1                 
Correct output: -98                 | Program output: -98                
Correct output: -60                 | Program output: -57                
Correct output: -27                 | Program output: 58                 
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -46                 | Program output: -16                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -44                 | Program output: -44                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -9                 
Correct output: -48                 | Program output: 24                 
Correct output: -94                 | Program output: 25                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -99                 | Program output: -56                
Correct output: -85                 | Program output: 35                 
Correct output: -63                 | Program output: -24                
Correct output: -92                 | Program output: -33                
Correct output: -80                 | Program output: -7                 
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 12                 
Correct output: -94                 | Program output: -94                
Correct output: -17                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -93                
Correct output: 11                  | Program output: 54                 
Correct output: -41                 | Program output: -35                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -72                 | Program output: -17                
Correct output: -90                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Lexicase best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () exec_yankdup boolean_swap in1 integer_min print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Lexicase best errors: [0 0 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.063
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Zero cases best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () exec_yankdup boolean_swap in1 integer_min print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Zero cases best errors: [0 0 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.063
--- Lexicase Population Statistics ---
Count of elite individuals by case: (86 591 86 926 187 190 12 1000 1 212)
Population mean number of elite cases: 3.29
Count of perfect (error zero) individuals by case: (86 591 86 926 187 190 12 0 1 212)
Population mean number of perfect (error zero) cases: 2.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () exec_yankdup boolean_swap in1 integer_min print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Errors: [0 0 0 0 1 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 32
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 7.709
Median total errors in population: 8
Error averages by case: (0.914 0.409 0.914 0.074 0.813 0.81 0.988 1.0 0.999 0.788)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 25.624
Average program size in population (points): 28.874
Average percent parens in population: 0.120
Minimum age in population: 16.125
Maximum age in population: 20.3671875
Average age in population: 18.99693896484375
Median age in population: 19.11328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 197
Genome diversity (% unique genomes):	 0.431
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 228
Syntactic diversity (% unique Push programs):	 0.377
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6742203
--- Timings ---
Current time: 1559314553769 milliseconds
Total Time:          38.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.2 seconds, 68.2%
Fitness Testing:      8.5 seconds, 22.2%
Report:               3.6 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 685
Test mean error for best: 0.68500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 81                 
Correct output: -57                 | Program output: -41                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: 37                  | Program output: 37                 
Correct output: -39                 | Program output: 59                 
Correct output: -61                 | Program output: 5                  
Correct output: -62                 | Program output: 1                  
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 32                 
Correct output: 26                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 31                 
Correct output: 37                  | Program output: 63                 
Correct output: 24                  | Program output: 69                 
Correct output: 3                   | Program output: 84                 
Correct output: 12                  | Program output: 100                
Correct output: 55                  | Program output: 55                 
Correct output: 1                   | Program output: 49                 
Correct output: 4                   | Program output: 73                 
Correct output: 14                  | Program output: 14                 
Correct output: 11                  | Program output: 42                 
Correct output: 10                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output:                    
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 29                 
Correct output: 3                   | Program output: 53                 
Correct output: 37                  | Program output: 56                 
Correct output: -87                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -27                 | Program output: -27                
Correct output: -1                  | Program output: 41                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -32                
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 7                  
Correct output: -70                 | Program output: 31                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: 33                 
Correct output: -60                 | Program output: -27                
Correct output: -27                 | Program output: -9                 
Correct output: -14                 | Program output: -142               
Correct output: -83                 | Program output: -65                
Correct output: -90                 | Program output: -15                
Correct output: -25                 | Program output: 29                 
Correct output: -99                 | Program output: 35                 
Correct output: -92                 | Program output: -40                
Correct output: -75                 | Program output:                    
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: 64                 
Correct output: -46                 | Program output: -46                
Correct output: -100                | Program output: 91                 
Correct output: -92                 | Program output: -59                
Correct output: -29                 | Program output: 70                 
Correct output: -71                 | Program output: 75                 
Correct output: -44                 | Program output:                    
Correct output: -72                 | Program output: -69                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: 62                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -13                
Correct output: -78                 | Program output: 38                 
Correct output: -97                 | Program output: -53                
Correct output: -100                | Program output: -52                
Correct output: -50                 | Program output: 15                 
Correct output: -99                 | Program output: 63                 
Correct output: -85                 | Program output: 35                 
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -13                
Correct output: -92                 | Program output: -1                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 63                 
Correct output: -17                 | Program output: 94                 
Correct output: -83                 | Program output: -35                
Correct output: -99                 | Program output: -4                 
Correct output: -44                 | Program output: 15                 
Correct output: -86                 | Program output: 65                 
Correct output: -46                 | Program output: 82                 
Correct output: -50                 | Program output: -28                
Correct output: -93                 | Program output: -42                
Correct output: 11                  | Program output:                    
Correct output: -41                 | Program output: 43                 
Correct output: -100                | Program output: 19                 
Correct output: -63                 | Program output: 18                 
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup})
Lexicase best program: (in3 integer_gt integer_mod integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_85 () exec_yankdup tag_exec_85 () exec_yankdup print_integer boolean_empty exec_flush exec_yankdup exec_dup ())
Lexicase best errors: [1 0 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 22
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup})
Zero cases best program: (in3 integer_gt integer_mod integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_85 () exec_yankdup tag_exec_85 () exec_yankdup print_integer boolean_empty exec_flush exec_yankdup exec_dup ())
Zero cases best errors: [1 0 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 22
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (249 2 3 922 532 534 3 249 526 119)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (249 2 3 922 532 534 3 249 526 119)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 1, :instruction tag_exec_85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup})
Best program: (in3 integer_gt integer_mod integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_85 () exec_yankdup tag_exec_85 () exec_yankdup print_integer boolean_empty exec_flush exec_yankdup exec_dup ())
Errors: [1 0 0 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 18
Size: 22
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.861
Median total errors in population: 6
Error averages by case: (0.751 0.998 0.997 0.078 0.468 0.466 0.997 0.751 0.474 0.881)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.436
Average program size in population (points): 28.696
Average percent parens in population: 0.124
Minimum age in population: 18.015625
Maximum age in population: 22.3671875
Average age in population: 21.18606689453125
Median age in population: 21.053466796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 370
Genome diversity (% unique genomes):	 0.399
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 410
Syntactic diversity (% unique Push programs):	 0.343
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 7201809
--- Timings ---
Current time: 1559314556251 milliseconds
Total Time:          41.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.1 seconds, 68.6%
Fitness Testing:      8.9 seconds, 21.8%
Report:               3.8 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 81                 
Correct output: -57                 | Program output: -41                
Correct output: -53                 | Program output: 93                 
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: 37                  | Program output: 84                 
Correct output: -39                 | Program output: -39                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 42                 
Correct output: 31                  | Program output: 45                 
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 72                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 59                 
Correct output: 11                  | Program output: 14                 
Correct output: 20                  | Program output: 28                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 37                 
Correct output: -87                 | Program output: -55                
Correct output: -93                 | Program output: -24                
Correct output: -27                 | Program output: 5                  
Correct output: -1                  | Program output: -1                 
Correct output: -77                 | Program output: 73                 
Correct output: -60                 | Program output: 15                 
Correct output: -41                 | Program output: -13                
Correct output: 7                   | Program output: 47                 
Correct output: -70                 | Program output: -70                
Correct output: -66                 | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -14                 | Program output: -2                 
Correct output: -83                 | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: 80                 
Correct output: -99                 | Program output: -2                 
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -46                 | Program output: 56                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: 25                 
Correct output: -71                 | Program output: 15                 
Correct output: -44                 | Program output: -44                
Correct output: -72                 | Program output: -71                
Correct output: -39                 | Program output: -26                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -65                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -32                
Correct output: -50                 | Program output: 22                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -63                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -17                 | Program output: -5                 
Correct output: -83                 | Program output: -42                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: 82                 
Correct output: -86                 | Program output: 66                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -24                
Correct output: 11                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 8                  
Correct output: -72                 | Program output: -14                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Lexicase best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () integer_empty boolean_swap in1 integer_min print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Lexicase best errors: [0 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 32
Percent parens: 0.063
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Zero cases best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () integer_empty boolean_swap in1 integer_min print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Zero cases best errors: [0 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 32
Percent parens: 0.063
--- Lexicase Population Statistics ---
Count of elite individuals by case: (690 226 385 907 296 288 384 226 912 226)
Population mean number of elite cases: 4.54
Count of perfect (error zero) individuals by case: (690 226 385 907 296 288 384 226 912 226)
Population mean number of perfect (error zero) cases: 4.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq})
Best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () integer_empty boolean_swap in1 integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
Errors: [0 0 1 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 28
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 5.46
Median total errors in population: 5
Error averages by case: (0.31 0.774 0.615 0.093 0.704 0.712 0.616 0.774 0.088 0.774)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.599
Average program size in population (points): 25.488
Average percent parens in population: 0.164
Minimum age in population: 19.712890625
Maximum age in population: 24.08154296875
Average age in population: 22.13119897460938
Median age in population: 22.0361328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 328
Genome diversity (% unique genomes):	 0.402
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 340
Syntactic diversity (% unique Push programs):	 0.352
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7636370
--- Timings ---
Current time: 1559314558751 milliseconds
Total Time:          43.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.0 seconds, 69.1%
Fitness Testing:      9.3 seconds, 21.5%
Report:               4.0 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 192
Test mean error for best: 0.19200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: 93                 
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: 37                  | Program output: 84                 
Correct output: -39                 | Program output: -39                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 42                 
Correct output: 31                  | Program output: 31                 
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 59                 
Correct output: 11                  | Program output: 14                 
Correct output: 20                  | Program output: 28                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 37                 
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -42                
Correct output: -27                 | Program output: 5                  
Correct output: -1                  | Program output: -1                 
Correct output: -77                 | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -41                 | Program output: -18                
Correct output: 7                   | Program output: 15                 
Correct output: -70                 | Program output: -70                
Correct output: -66                 | Program output: -1                 
Correct output: -98                 | Program output: -98                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -46                 | Program output: -16                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -44                 | Program output: -44                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -26                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -65                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -63                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 12                 
Correct output: -94                 | Program output: -94                
Correct output: -17                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -93                
Correct output: 11                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -72                 | Program output: -17                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq})
Lexicase best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 28
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq})
Zero cases best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 28
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 927 360 914 913 537 927 916 11 9)
Population mean number of elite cases: 5.53
Count of perfect (error zero) individuals by case: (11 927 360 914 913 537 927 916 11 9)
Population mean number of perfect (error zero) cases: 5.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in1 integer_min integer_min print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 30
Size: 32
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 4.475
Median total errors in population: 4
Error averages by case: (0.989 0.073 0.64 0.086 0.087 0.463 0.073 0.084 0.989 0.991)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.814
Average program size in population (points): 28.884
Average percent parens in population: 0.072
Minimum age in population: 23.51123046875
Maximum age in population: 25.986328125
Average age in population: 24.57396337890625
Median age in population: 24.51123046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 273
Genome diversity (% unique genomes):	 0.35
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 290
Syntactic diversity (% unique Push programs):	 0.299
Total error diversity:				 0.009
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7894733
--- Timings ---
Current time: 1559314561134 milliseconds
Total Time:          45.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.9 seconds, 69.7%
Fitness Testing:      9.6 seconds, 21.0%
Report:               4.2 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 81                 
Correct output: -57                 | Program output: -41                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: 37                  | Program output: 37                 
Correct output: -39                 | Program output: -39                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 31                 
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 37                 
Correct output: -87                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -27                 | Program output: -27                
Correct output: -1                  | Program output: -1                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -32                
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 7                  
Correct output: -70                 | Program output: -70                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -14                 | Program output: -2                 
Correct output: -83                 | Program output: -65                
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: 29                 
Correct output: -99                 | Program output: -2                 
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -77                
Correct output: -46                 | Program output: -46                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: 25                 
Correct output: -71                 | Program output: 15                 
Correct output: -44                 | Program output: -44                
Correct output: -72                 | Program output: -71                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -52                
Correct output: -50                 | Program output: 15                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -17                 | Program output: -5                 
Correct output: -83                 | Program output: -42                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: 15                 
Correct output: -86                 | Program output: 65                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -42                
Correct output: 11                  | Program output: 11                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Lexicase best program: (in3 integer_gt integer_mod in4 boolean_swap in1 integer_min integer_min print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 25
Percent parens: 0.040
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Zero cases best program: (in3 integer_gt integer_mod in4 boolean_swap in1 integer_min integer_min print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 25
Percent parens: 0.040
--- Lexicase Population Statistics ---
Count of elite individuals by case: (724 935 189 935 190 738 189 189 190 189)
Population mean number of elite cases: 4.47
Count of perfect (error zero) individuals by case: (724 935 189 935 190 738 189 189 190 189)
Population mean number of perfect (error zero) cases: 4.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Best program: (in3 integer_gt integer_mod in4 boolean_swap in1 integer_min integer_min print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 5.532
Median total errors in population: 6
Error averages by case: (0.276 0.065 0.811 0.065 0.81 0.262 0.811 0.811 0.81 0.811)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.189
Average program size in population (points): 29.284
Average percent parens in population: 0.072
Minimum age in population: 24.51123046875
Maximum age in population: 27.123779296875
Average age in population: 25.92701171875
Median age in population: 25.873779296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 250
Genome diversity (% unique genomes):	 0.38
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 270
Syntactic diversity (% unique Push programs):	 0.325
Total error diversity:				 0.009
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 8158623
--- Timings ---
Current time: 1559314563574 milliseconds
Total Time:          48.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.9 seconds, 70.2%
Fitness Testing:      9.9 seconds, 20.5%
Report:               4.4 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: 37                  | Program output: 37                 
Correct output: -39                 | Program output: -39                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: 1                  
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 31                 
Correct output: 37                  | Program output: 63                 
Correct output: 24                  | Program output: 68                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 37                 
Correct output: 55                  | Program output: 55                 
Correct output: 1                   | Program output: 47                 
Correct output: 4                   | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 11                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 44                 
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -93                
Correct output: -27                 | Program output: -27                
Correct output: -1                  | Program output: -1                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 7                  
Correct output: -70                 | Program output: -70                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -40                
Correct output: -75                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -52                
Correct output: -46                 | Program output: -46                
Correct output: -100                | Program output: -29                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -44                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -13                
Correct output: -78                 | Program output: -70                
Correct output: -97                 | Program output: -53                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -13                
Correct output: -92                 | Program output: -22                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -88                
Correct output: -17                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -76                
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: 9                  
Correct output: -50                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: 11                  | Program output: 11                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq})
Lexicase best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 28
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq})
Zero cases best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 28
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (780 779 936 779 779 144 143 939 781 144)
Population mean number of elite cases: 6.20
Count of perfect (error zero) individuals by case: (780 779 936 779 779 144 143 939 781 144)
Population mean number of perfect (error zero) cases: 6.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq})
Best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 26
Size: 28
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 3.796
Median total errors in population: 3
Error averages by case: (0.22 0.221 0.064 0.221 0.221 0.856 0.857 0.061 0.219 0.856)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.539
Average program size in population (points): 25.775
Average percent parens in population: 0.047
Minimum age in population: 25.873779296875
Maximum age in population: 28.611328125
Average age in population: 27.595373046875
Median age in population: 27.6800537109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 581
Genome diversity (% unique genomes):	 0.323
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 626
Syntactic diversity (% unique Push programs):	 0.275
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 8387585
--- Timings ---
Current time: 1559314565816 milliseconds
Total Time:          50.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.7 seconds, 70.7%
Fitness Testing:     10.2 seconds, 20.1%
Report:               4.6 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 81                 
Correct output: -57                 | Program output: -41                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: 37                  | Program output: 37                 
Correct output: -39                 | Program output: -39                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 31                 
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 37                 
Correct output: -87                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -27                 | Program output: -27                
Correct output: -1                  | Program output: -1                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -32                
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 7                  
Correct output: -70                 | Program output: -70                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -14                 | Program output: -2                 
Correct output: -83                 | Program output: -65                
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: 29                 
Correct output: -99                 | Program output: -2                 
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -77                
Correct output: -46                 | Program output: -46                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: 25                 
Correct output: -71                 | Program output: 15                 
Correct output: -44                 | Program output: -44                
Correct output: -72                 | Program output: -71                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -52                
Correct output: -50                 | Program output: 15                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -17                 | Program output: -5                 
Correct output: -83                 | Program output: -42                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: 15                 
Correct output: -86                 | Program output: 65                 
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -42                
Correct output: 11                  | Program output: 11                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq})
Lexicase best program: (in3 integer_gt integer_mod in4 boolean_swap in1 integer_min integer_min print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 25
Percent parens: 0.040
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq})
Zero cases best program: (in3 integer_gt integer_mod in4 boolean_swap in1 integer_min integer_min print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 25
Percent parens: 0.040
--- Lexicase Population Statistics ---
Count of elite individuals by case: (284 741 283 950 926 837 741 834 284 285)
Population mean number of elite cases: 6.16
Count of perfect (error zero) individuals by case: (284 741 283 950 926 837 741 834 284 285)
Population mean number of perfect (error zero) cases: 6.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq})
Best program: (in3 integer_gt integer_mod in4 boolean_swap in1 integer_min integer_min print_integer integer_stackdepth boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 3.835
Median total errors in population: 4
Error averages by case: (0.716 0.259 0.717 0.05 0.074 0.163 0.259 0.166 0.716 0.715)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.732
Average program size in population (points): 27.608
Average percent parens in population: 0.067
Minimum age in population: 27.236328125
Maximum age in population: 30.39569091796875
Average age in population: 29.47811865234375
Median age in population: 29.1800537109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 452
Genome diversity (% unique genomes):	 0.388
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 487
Syntactic diversity (% unique Push programs):	 0.319
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 8643879
--- Timings ---
Current time: 1559314568153 milliseconds
Total Time:          52.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.6 seconds, 71.1%
Fitness Testing:     10.4 seconds, 19.7%
Report:               4.7 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 192
Test mean error for best: 0.19200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: 93                 
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: 37                  | Program output: 84                 
Correct output: -39                 | Program output: -39                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 42                 
Correct output: 31                  | Program output: 31                 
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 59                 
Correct output: 11                  | Program output: 14                 
Correct output: 20                  | Program output: 28                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 37                 
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -42                
Correct output: -27                 | Program output: 5                  
Correct output: -1                  | Program output: -1                 
Correct output: -77                 | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -41                 | Program output: -18                
Correct output: 7                   | Program output: 15                 
Correct output: -70                 | Program output: -70                
Correct output: -66                 | Program output: -1                 
Correct output: -98                 | Program output: -98                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -46                 | Program output: -16                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -44                 | Program output: -44                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -26                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -65                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -63                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 12                 
Correct output: -94                 | Program output: -94                
Correct output: -17                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -93                
Correct output: 11                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -72                 | Program output: -17                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Lexicase best program: (in3 integer_gt integer_mod in4 boolean_swap in1 integer_min integer_min print_integer integer_dec boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Lexicase best errors: [0 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 25
Percent parens: 0.040
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction tag_boolean_671} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq})
Zero cases best program: (in3 integer_gt integer_mod in4 boolean_swap in1 integer_min integer_min print_integer integer_dec boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 tag_boolean_671 exec_eq boolean_pop boolean_yank boolean_eq)
Zero cases best errors: [0 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 25
Percent parens: 0.040
--- Lexicase Population Statistics ---
Count of elite individuals by case: (533 779 779 533 926 925 533 778 533 935)
Population mean number of elite cases: 7.25
Count of perfect (error zero) individuals by case: (533 779 779 533 926 925 533 778 533 935)
Population mean number of perfect (error zero) cases: 7.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq})
Best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 28
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 2.746
Median total errors in population: 2
Error averages by case: (0.467 0.221 0.221 0.467 0.074 0.075 0.467 0.222 0.467 0.065)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.945
Average program size in population (points): 27.714
Average percent parens in population: 0.063
Minimum age in population: 28.236328125
Maximum age in population: 32.22848510742188
Average age in population: 30.62955766296387
Median age in population: 30.65895080566406
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.478
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 218
Syntactic diversity (% unique Push programs):	 0.384
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8903850
--- Timings ---
Current time: 1559314570527 milliseconds
Total Time:          55.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.5 seconds, 71.5%
Fitness Testing:     10.7 seconds, 19.4%
Report:               4.9 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: 37                  | Program output: 37                 
Correct output: -39                 | Program output: -39                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: 1                  
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 31                 
Correct output: 37                  | Program output: 63                 
Correct output: 24                  | Program output: 68                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 37                 
Correct output: 55                  | Program output: 55                 
Correct output: 1                   | Program output: 47                 
Correct output: 4                   | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 11                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 44                 
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -93                
Correct output: -27                 | Program output: -27                
Correct output: -1                  | Program output: -1                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 7                  
Correct output: -70                 | Program output: -70                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -40                
Correct output: -75                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -52                
Correct output: -46                 | Program output: -46                
Correct output: -100                | Program output: -29                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -44                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -13                
Correct output: -78                 | Program output: -70                
Correct output: -97                 | Program output: -53                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -13                
Correct output: -92                 | Program output: -22                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -88                
Correct output: -17                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -76                
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: 9                  
Correct output: -50                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: 11                  | Program output: 11                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_eq})
Lexicase best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min print_integer exec_noop boolean_not boolean_eq)
Lexicase best errors: [1 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_eq})
Zero cases best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min print_integer exec_noop boolean_not boolean_eq)
Zero cases best errors: [1 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (710 541 587 541 585 717 939 541 587 937)
Population mean number of elite cases: 6.68
Count of perfect (error zero) individuals by case: (710 541 587 541 585 717 939 541 587 937)
Population mean number of perfect (error zero) cases: 6.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq})
Best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
Errors: [1 0 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 28
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 3.315
Median total errors in population: 3
Error averages by case: (0.29 0.459 0.413 0.459 0.415 0.283 0.061 0.459 0.413 0.063)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.952
Average program size in population (points): 27.75
Average percent parens in population: 0.064
Minimum age in population: 29.236328125
Maximum age in population: 33.99958801269531
Average age in population: 32.14203395080566
Median age in population: 32.1800537109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 164
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 9159122
--- Timings ---
Current time: 1559314572875 milliseconds
Total Time:          57.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.4 seconds, 71.9%
Fitness Testing:     11.0 seconds, 19.1%
Report:               5.1 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: 37                  | Program output: 37                 
Correct output: -39                 | Program output: -39                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 31                 
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 37                 
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -93                
Correct output: -27                 | Program output: -27                
Correct output: -1                  | Program output: -1                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 7                  
Correct output: -70                 | Program output: -70                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -77                
Correct output: -46                 | Program output: -46                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -44                 | Program output: -44                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -17                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -93                
Correct output: 11                  | Program output: 11                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq})
Lexicase best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 31
Percent parens: 0.065
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq})
Zero cases best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 31
Percent parens: 0.065
--- Lexicase Population Statistics ---
Count of elite individuals by case: (499 495 500 496 927 676 925 667 675 500)
Population mean number of elite cases: 6.36
Count of perfect (error zero) individuals by case: (499 495 500 496 927 676 925 667 675 500)
Population mean number of perfect (error zero) cases: 6.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction tag_exec_144} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq})
Best program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 29
Size: 31
Percent parens: 0.065
--- Population Statistics ---
Average total errors in population: 3.64
Median total errors in population: 5
Error averages by case: (0.501 0.505 0.5 0.504 0.073 0.324 0.075 0.333 0.325 0.5)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.971
Average program size in population (points): 27.945
Average percent parens in population: 0.070
Minimum age in population: 31.123779296875
Maximum age in population: 35.39762115478516
Average age in population: 33.65906886672974
Median age in population: 33.71354103088379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.503
Total error diversity:				 0.011
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9415652
--- Timings ---
Current time: 1559314575292 milliseconds
Total Time:          60.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.3 seconds, 72.2%
Fitness Testing:     11.3 seconds, 18.8%
Report:               5.3 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 21
Successful program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 31


Auto-simplifying with starting size: 31
step: 0
program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 500
program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 1000
program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 1500
program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 2000
program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 2500
program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 3000
program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 3500
program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 4000
program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 4500
program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 5000
program: (integer_inc integer_gt integer_eq integer_dup exec_yankdup boolean_shove boolean_shove in2 in4 tag_exec_144 () boolean_swap in3 integer_min integer_min in1 integer_min integer_min print_integer exec_noop boolean_not exec_yank integer_swap integer_mod boolean_yank integer_gt exec_yankdup print_integer in2 boolean_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 11                  | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: 37                  | Program output: 37                 
Correct output: -39                 | Program output: -39                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 41                  | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: 67                  | Program output: 67                 
Correct output: -48                 | Program output: -48                
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 31                 
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 37                 
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -93                
Correct output: -27                 | Program output: -27                
Correct output: -1                  | Program output: -1                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 7                  
Correct output: -70                 | Program output: -70                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -77                
Correct output: -46                 | Program output: -46                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -44                 | Program output: -44                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -17                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -93                
Correct output: 11                  | Program output: 11                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
;;******************************
