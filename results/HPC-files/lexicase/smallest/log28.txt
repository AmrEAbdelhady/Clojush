Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-83 -83 51 -83] -83] [[75 75 75 -61] -61] [[16 -16 -16 -16] -16] [[25 25 25 -22] -22] [[19 19 47 19] 19] [[-9 -9 13 -9] -9] [[91 -64 91 91] -64] [[54 28 54 54] 28] [[-38 -38 -38 8] -38] [[-4 -4 -4 -27] -27] [(-73 -73 -73 -73) -73] [(-15 -15 -15 -15) -15] [(-25 -25 -25 -25) -25] [(48 48 48 48) 48] [(-41 -41 -41 -41) -41] [(95 22 62 26) 22] [(18 5 26 4) 4] [(63 30 57 21) 21] [(43 71 1 35) 1] [(58 18 85 38) 18] [(69 62 1 92) 1] [(31 40 55 51) 31] [(79 10 30 83) 10] [(37 64 51 80) 37] [(98 48 26 67) 26] [(16 97 82 76) 16] [(51 100 94 78) 51] [(94 100 91 19) 19] [(47 60 0 79) 0] [(12 100 73 37) 12] [(17 97 58 64) 17] [(88 0 8 63) 0] [(56 83 44 72) 44] [(54 16 45 97) 16] [(45 97 42 25) 25] [(-22 -60 -13 91) -60] [(-97 -15 79 -7) -97] [(85 -47 35 27) -47] [(19 72 79 44) 19] [(-63 0 44 14) -63] [(29 33 97 14) 14] [(47 21 76 72) 21] [(-90 56 58 32) -90] [(-43 48 -30 85) -43] [(-7 99 90 43) -7] [(98 43 -4 -41) -41] [(-60 -92 -84 85) -92] [(51 73 -2 61) -2] [(-59 83 -78 17) -78] [(88 24 40 -52) -52] [(-18 51 -62 -25) -62] [(-89 35 -87 84) -89] [(70 -4 54 -12) -12] [(72 -15 61 38) -15] [(-36 83 -40 71) -40] [(27 88 -4 92) -4] [(-89 35 -82 82) -89] [(-20 80 35 13) -20] [(-65 100 -52 13) -65] [(-96 64 -78 -90) -96] [(76 6 51 -99) -99] [(-90 57 -72 41) -90] [(-26 -26 -77 96) -77] [(-58 -21 64 -25) -58] [(83 24 -3 -36) -36] [(-17 -66 -23 70) -66] [(-90 -46 -60 63) -90] [(91 65 -56 -92) -92] [(39 -17 51 -40) -40] [(-50 51 32 -95) -95] [(-13 -100 -45 -57) -100] [(92 97 74 94) 74] [(87 77 -32 -45) -45] [(-45 27 -51 -79) -79] [(40 -2 -37 -15) -37] [(-71 -67 72 24) -71] [(-57 -15 -59 16) -59] [(-57 -63 -97 89) -97] [(13 56 -40 28) -40] [(3 -7 -98 -86) -98] [(91 3 7 -70) -70] [(-78 89 34 -41) -78] [(86 83 -58 -53) -58] [(27 90 35 16) 16] [(-3 -48 -24 40) -48] [(-3 -1 10 -38) -38] [(99 76 -81 45) -81] [(-5 -41 39 99) -41] [(67 33 -36 82) -36] [(-77 -79 77 72) -79] [(71 14 -72 26) -72] [(89 -82 -97 -26) -97] [(22 34 -33 -15) -33] [(52 9 71 83) 9] [(29 39 48 76) 29])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-83 -83 51 -83] -83]
Train Case:   6 | Input/Output: [[75 75 75 -61] -61]
Train Case:   7 | Input/Output: [[16 -16 -16 -16] -16]
Train Case:   8 | Input/Output: [[25 25 25 -22] -22]
Train Case:   9 | Input/Output: [[19 19 47 19] 19]
Train Case:  10 | Input/Output: [[-9 -9 13 -9] -9]
Train Case:  11 | Input/Output: [[91 -64 91 91] -64]
Train Case:  12 | Input/Output: [[54 28 54 54] 28]
Train Case:  13 | Input/Output: [[-38 -38 -38 8] -38]
Train Case:  14 | Input/Output: [[-4 -4 -4 -27] -27]
Train Case:  15 | Input/Output: [(-73 -73 -73 -73) -73]
Train Case:  16 | Input/Output: [(-15 -15 -15 -15) -15]
Train Case:  17 | Input/Output: [(-25 -25 -25 -25) -25]
Train Case:  18 | Input/Output: [(48 48 48 48) 48]
Train Case:  19 | Input/Output: [(-41 -41 -41 -41) -41]
Train Case:  20 | Input/Output: [(95 22 62 26) 22]
Train Case:  21 | Input/Output: [(18 5 26 4) 4]
Train Case:  22 | Input/Output: [(63 30 57 21) 21]
Train Case:  23 | Input/Output: [(43 71 1 35) 1]
Train Case:  24 | Input/Output: [(58 18 85 38) 18]
Train Case:  25 | Input/Output: [(69 62 1 92) 1]
Train Case:  26 | Input/Output: [(31 40 55 51) 31]
Train Case:  27 | Input/Output: [(79 10 30 83) 10]
Train Case:  28 | Input/Output: [(37 64 51 80) 37]
Train Case:  29 | Input/Output: [(98 48 26 67) 26]
Train Case:  30 | Input/Output: [(16 97 82 76) 16]
Train Case:  31 | Input/Output: [(51 100 94 78) 51]
Train Case:  32 | Input/Output: [(94 100 91 19) 19]
Train Case:  33 | Input/Output: [(47 60 0 79) 0]
Train Case:  34 | Input/Output: [(12 100 73 37) 12]
Train Case:  35 | Input/Output: [(17 97 58 64) 17]
Train Case:  36 | Input/Output: [(88 0 8 63) 0]
Train Case:  37 | Input/Output: [(56 83 44 72) 44]
Train Case:  38 | Input/Output: [(54 16 45 97) 16]
Train Case:  39 | Input/Output: [(45 97 42 25) 25]
Train Case:  40 | Input/Output: [(-22 -60 -13 91) -60]
Train Case:  41 | Input/Output: [(-97 -15 79 -7) -97]
Train Case:  42 | Input/Output: [(85 -47 35 27) -47]
Train Case:  43 | Input/Output: [(19 72 79 44) 19]
Train Case:  44 | Input/Output: [(-63 0 44 14) -63]
Train Case:  45 | Input/Output: [(29 33 97 14) 14]
Train Case:  46 | Input/Output: [(47 21 76 72) 21]
Train Case:  47 | Input/Output: [(-90 56 58 32) -90]
Train Case:  48 | Input/Output: [(-43 48 -30 85) -43]
Train Case:  49 | Input/Output: [(-7 99 90 43) -7]
Train Case:  50 | Input/Output: [(98 43 -4 -41) -41]
Train Case:  51 | Input/Output: [(-60 -92 -84 85) -92]
Train Case:  52 | Input/Output: [(51 73 -2 61) -2]
Train Case:  53 | Input/Output: [(-59 83 -78 17) -78]
Train Case:  54 | Input/Output: [(88 24 40 -52) -52]
Train Case:  55 | Input/Output: [(-18 51 -62 -25) -62]
Train Case:  56 | Input/Output: [(-89 35 -87 84) -89]
Train Case:  57 | Input/Output: [(70 -4 54 -12) -12]
Train Case:  58 | Input/Output: [(72 -15 61 38) -15]
Train Case:  59 | Input/Output: [(-36 83 -40 71) -40]
Train Case:  60 | Input/Output: [(27 88 -4 92) -4]
Train Case:  61 | Input/Output: [(-89 35 -82 82) -89]
Train Case:  62 | Input/Output: [(-20 80 35 13) -20]
Train Case:  63 | Input/Output: [(-65 100 -52 13) -65]
Train Case:  64 | Input/Output: [(-96 64 -78 -90) -96]
Train Case:  65 | Input/Output: [(76 6 51 -99) -99]
Train Case:  66 | Input/Output: [(-90 57 -72 41) -90]
Train Case:  67 | Input/Output: [(-26 -26 -77 96) -77]
Train Case:  68 | Input/Output: [(-58 -21 64 -25) -58]
Train Case:  69 | Input/Output: [(83 24 -3 -36) -36]
Train Case:  70 | Input/Output: [(-17 -66 -23 70) -66]
Train Case:  71 | Input/Output: [(-90 -46 -60 63) -90]
Train Case:  72 | Input/Output: [(91 65 -56 -92) -92]
Train Case:  73 | Input/Output: [(39 -17 51 -40) -40]
Train Case:  74 | Input/Output: [(-50 51 32 -95) -95]
Train Case:  75 | Input/Output: [(-13 -100 -45 -57) -100]
Train Case:  76 | Input/Output: [(92 97 74 94) 74]
Train Case:  77 | Input/Output: [(87 77 -32 -45) -45]
Train Case:  78 | Input/Output: [(-45 27 -51 -79) -79]
Train Case:  79 | Input/Output: [(40 -2 -37 -15) -37]
Train Case:  80 | Input/Output: [(-71 -67 72 24) -71]
Train Case:  81 | Input/Output: [(-57 -15 -59 16) -59]
Train Case:  82 | Input/Output: [(-57 -63 -97 89) -97]
Train Case:  83 | Input/Output: [(13 56 -40 28) -40]
Train Case:  84 | Input/Output: [(3 -7 -98 -86) -98]
Train Case:  85 | Input/Output: [(91 3 7 -70) -70]
Train Case:  86 | Input/Output: [(-78 89 34 -41) -78]
Train Case:  87 | Input/Output: [(86 83 -58 -53) -58]
Train Case:  88 | Input/Output: [(27 90 35 16) 16]
Train Case:  89 | Input/Output: [(-3 -48 -24 40) -48]
Train Case:  90 | Input/Output: [(-3 -1 10 -38) -38]
Train Case:  91 | Input/Output: [(99 76 -81 45) -81]
Train Case:  92 | Input/Output: [(-5 -41 39 99) -41]
Train Case:  93 | Input/Output: [(67 33 -36 82) -36]
Train Case:  94 | Input/Output: [(-77 -79 77 72) -79]
Train Case:  95 | Input/Output: [(71 14 -72 26) -72]
Train Case:  96 | Input/Output: [(89 -82 -97 -26) -97]
Train Case:  97 | Input/Output: [(22 34 -33 -15) -33]
Train Case:  98 | Input/Output: [(52 9 71 83) 9]
Train Case:  99 | Input/Output: [(29 39 48 76) 29]
Test Case:   0 | Input/Output: [[20 -16 -16 -16] -16]
Test Case:   1 | Input/Output: [[-73 81 81 81] -73]
Test Case:   2 | Input/Output: [[16 16 -69 16] -69]
Test Case:   3 | Input/Output: [[44 -7 -7 -7] -7]
Test Case:   4 | Input/Output: [[-63 -53 -63 -63] -63]
Test Case:   5 | Input/Output: [[-64 -76 -64 -64] -76]
Test Case:   6 | Input/Output: [[-38 -40 -38 -38] -40]
Test Case:   7 | Input/Output: [[-50 -50 -50 -88] -88]
Test Case:   8 | Input/Output: [[-2 -66 -66 -66] -66]
Test Case:   9 | Input/Output: [[86 86 86 -59] -59]
Test Case:  10 | Input/Output: [[-26 -26 -26 -67] -67]
Test Case:  11 | Input/Output: [[-88 -88 -88 -50] -88]
Test Case:  12 | Input/Output: [[36 73 36 36] 36]
Test Case:  13 | Input/Output: [[58 -30 -30 -30] -30]
Test Case:  14 | Input/Output: [[-94 -94 -94 26] -94]
Test Case:  15 | Input/Output: [[16 69 69 69] 16]
Test Case:  16 | Input/Output: [[14 49 49 49] 14]
Test Case:  17 | Input/Output: [[-19 83 -19 -19] -19]
Test Case:  18 | Input/Output: [[97 97 -22 97] -22]
Test Case:  19 | Input/Output: [[-86 -62 -62 -62] -86]
Test Case:  20 | Input/Output: [[-88 -88 49 -88] -88]
Test Case:  21 | Input/Output: [[36 14 36 36] 14]
Test Case:  22 | Input/Output: [[13 13 13 54] 13]
Test Case:  23 | Input/Output: [[-39 39 -39 -39] -39]
Test Case:  24 | Input/Output: [[55 55 95 55] 55]
Test Case:  25 | Input/Output: [[-13 -13 -13 -21] -21]
Test Case:  26 | Input/Output: [[-55 -55 -98 -55] -98]
Test Case:  27 | Input/Output: [[-44 -77 -44 -44] -77]
Test Case:  28 | Input/Output: [[-55 9 9 9] -55]
Test Case:  29 | Input/Output: [[-9 -9 -1 -9] -9]
Test Case:  30 | Input/Output: [[23 23 23 -57] -57]
Test Case:  31 | Input/Output: [[-3 1 1 1] -3]
Test Case:  32 | Input/Output: [[48 45 45 45] 45]
Test Case:  33 | Input/Output: [[-83 -83 -80 -83] -83]
Test Case:  34 | Input/Output: [[70 79 79 79] 70]
Test Case:  35 | Input/Output: [[27 21 27 27] 21]
Test Case:  36 | Input/Output: [[76 76 76 6] 6]
Test Case:  37 | Input/Output: [[-85 -85 -85 -22] -85]
Test Case:  38 | Input/Output: [[-100 -13 -100 -100] -100]
Test Case:  39 | Input/Output: [[-52 -52 -52 -14] -52]
Test Case:  40 | Input/Output: [[76 76 76 -48] -48]
Test Case:  41 | Input/Output: [[58 58 -38 58] -38]
Test Case:  42 | Input/Output: [[-18 -18 4 -18] -18]
Test Case:  43 | Input/Output: [[48 48 48 17] 17]
Test Case:  44 | Input/Output: [[18 -30 -30 -30] -30]
Test Case:  45 | Input/Output: [[26 97 97 97] 26]
Test Case:  46 | Input/Output: [[-23 -8 -23 -23] -23]
Test Case:  47 | Input/Output: [[52 52 52 21] 21]
Test Case:  48 | Input/Output: [[-26 -26 -60 -26] -60]
Test Case:  49 | Input/Output: [[-99 -99 -96 -99] -99]
Test Case:  50 | Input/Output: [[-66 56 56 56] -66]
Test Case:  51 | Input/Output: [[46 86 86 86] 46]
Test Case:  52 | Input/Output: [[78 1 1 1] 1]
Test Case:  53 | Input/Output: [[55 -19 -19 -19] -19]
Test Case:  54 | Input/Output: [[80 80 80 6] 6]
Test Case:  55 | Input/Output: [[26 26 -90 26] -90]
Test Case:  56 | Input/Output: [[80 -95 -95 -95] -95]
Test Case:  57 | Input/Output: [[-4 -4 -4 41] -4]
Test Case:  58 | Input/Output: [[-100 -100 -100 -98] -100]
Test Case:  59 | Input/Output: [[16 97 97 97] 16]
Test Case:  60 | Input/Output: [[-37 -44 -37 -37] -44]
Test Case:  61 | Input/Output: [[51 -39 -39 -39] -39]
Test Case:  62 | Input/Output: [[38 38 65 38] 38]
Test Case:  63 | Input/Output: [[63 63 37 63] 37]
Test Case:  64 | Input/Output: [[69 69 97 69] 69]
Test Case:  65 | Input/Output: [[-85 -85 -85 -88] -88]
Test Case:  66 | Input/Output: [[-93 26 26 26] -93]
Test Case:  67 | Input/Output: [[48 48 27 48] 27]
Test Case:  68 | Input/Output: [[62 66 62 62] 62]
Test Case:  69 | Input/Output: [[50 29 50 50] 29]
Test Case:  70 | Input/Output: [[-83 -83 -83 8] -83]
Test Case:  71 | Input/Output: [[73 73 81 73] 73]
Test Case:  72 | Input/Output: [[82 -73 82 82] -73]
Test Case:  73 | Input/Output: [[21 21 -47 21] -47]
Test Case:  74 | Input/Output: [[19 19 -70 19] -70]
Test Case:  75 | Input/Output: [[-22 -22 -22 43] -22]
Test Case:  76 | Input/Output: [[7 80 80 80] 7]
Test Case:  77 | Input/Output: [[-70 66 66 66] -70]
Test Case:  78 | Input/Output: [[-17 -17 -17 89] -17]
Test Case:  79 | Input/Output: [[46 46 46 -38] -38]
Test Case:  80 | Input/Output: [[-96 -41 -96 -96] -96]
Test Case:  81 | Input/Output: [[-60 57 57 57] -60]
Test Case:  82 | Input/Output: [[83 83 83 7] 7]
Test Case:  83 | Input/Output: [[-31 -31 26 -31] -31]
Test Case:  84 | Input/Output: [[-69 83 83 83] -69]
Test Case:  85 | Input/Output: [[79 -30 -30 -30] -30]
Test Case:  86 | Input/Output: [[57 -98 -98 -98] -98]
Test Case:  87 | Input/Output: [[-69 -69 73 -69] -69]
Test Case:  88 | Input/Output: [[-90 87 87 87] -90]
Test Case:  89 | Input/Output: [[31 92 31 31] 31]
Test Case:  90 | Input/Output: [[67 -35 67 67] -35]
Test Case:  91 | Input/Output: [[25 25 75 25] 25]
Test Case:  92 | Input/Output: [[54 54 54 -44] -44]
Test Case:  93 | Input/Output: [[29 29 -9 29] -9]
Test Case:  94 | Input/Output: [[-42 -67 -67 -67] -67]
Test Case:  95 | Input/Output: [[-32 -32 -32 65] -32]
Test Case:  96 | Input/Output: [[-99 -99 80 -99] -99]
Test Case:  97 | Input/Output: [[10 44 44 44] 10]
Test Case:  98 | Input/Output: [[-72 15 -72 -72] -72]
Test Case:  99 | Input/Output: [[37 54 54 54] 37]
Test Case: 100 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 101 | Input/Output: [(37 37 37 37) 37]
Test Case: 102 | Input/Output: [(79 79 79 79) 79]
Test Case: 103 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 104 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 105 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 106 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 107 | Input/Output: [(19 19 19 19) 19]
Test Case: 108 | Input/Output: [(41 41 41 41) 41]
Test Case: 109 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 110 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 111 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 112 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 113 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 114 | Input/Output: [(44 44 44 44) 44]
Test Case: 115 | Input/Output: [(64 64 64 64) 64]
Test Case: 116 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 117 | Input/Output: [(69 69 69 69) 69]
Test Case: 118 | Input/Output: [(53 53 53 53) 53]
Test Case: 119 | Input/Output: [(24 24 24 24) 24]
Test Case: 120 | Input/Output: [(60 60 60 60) 60]
Test Case: 121 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 122 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 123 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 124 | Input/Output: [(8 8 8 8) 8]
Test Case: 125 | Input/Output: [(38 38 38 38) 38]
Test Case: 126 | Input/Output: [(17 17 17 17) 17]
Test Case: 127 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 128 | Input/Output: [(63 63 63 63) 63]
Test Case: 129 | Input/Output: [(61 61 61 61) 61]
Test Case: 130 | Input/Output: [(15 15 15 15) 15]
Test Case: 131 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 132 | Input/Output: [(79 79 79 79) 79]
Test Case: 133 | Input/Output: [(41 41 41 41) 41]
Test Case: 134 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 135 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 136 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 137 | Input/Output: [(79 79 79 79) 79]
Test Case: 138 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 139 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 140 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 141 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 142 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 143 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 144 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 145 | Input/Output: [(86 86 86 86) 86]
Test Case: 146 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 147 | Input/Output: [(9 9 9 9) 9]
Test Case: 148 | Input/Output: [(47 47 47 47) 47]
Test Case: 149 | Input/Output: [(73 73 73 73) 73]
Test Case: 150 | Input/Output: [(27 27 27 27) 27]
Test Case: 151 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 152 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 153 | Input/Output: [(53 53 53 53) 53]
Test Case: 154 | Input/Output: [(28 28 28 28) 28]
Test Case: 155 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 156 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 157 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 158 | Input/Output: [(46 46 46 46) 46]
Test Case: 159 | Input/Output: [(87 87 87 87) 87]
Test Case: 160 | Input/Output: [(32 32 32 32) 32]
Test Case: 161 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 162 | Input/Output: [(25 25 25 25) 25]
Test Case: 163 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 164 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 165 | Input/Output: [(52 52 52 52) 52]
Test Case: 166 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 167 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 168 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 169 | Input/Output: [(38 38 38 38) 38]
Test Case: 170 | Input/Output: [(60 60 60 60) 60]
Test Case: 171 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 172 | Input/Output: [(13 13 13 13) 13]
Test Case: 173 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 174 | Input/Output: [(40 40 40 40) 40]
Test Case: 175 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 176 | Input/Output: [(37 37 37 37) 37]
Test Case: 177 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 178 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 179 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 180 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 181 | Input/Output: [(48 48 48 48) 48]
Test Case: 182 | Input/Output: [(8 8 8 8) 8]
Test Case: 183 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 184 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 185 | Input/Output: [(45 45 45 45) 45]
Test Case: 186 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 187 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 188 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 189 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 190 | Input/Output: [(86 86 86 86) 86]
Test Case: 191 | Input/Output: [(49 49 49 49) 49]
Test Case: 192 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 193 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 194 | Input/Output: [(47 47 47 47) 47]
Test Case: 195 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 196 | Input/Output: [(99 99 99 99) 99]
Test Case: 197 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 198 | Input/Output: [(36 36 36 36) 36]
Test Case: 199 | Input/Output: [(81 81 81 81) 81]
Test Case: 200 | Input/Output: [(26 65 98 29) 26]
Test Case: 201 | Input/Output: [(26 83 88 14) 14]
Test Case: 202 | Input/Output: [(88 57 58 43) 43]
Test Case: 203 | Input/Output: [(75 100 28 88) 28]
Test Case: 204 | Input/Output: [(0 64 98 65) 0]
Test Case: 205 | Input/Output: [(8 48 39 32) 8]
Test Case: 206 | Input/Output: [(89 14 9 84) 9]
Test Case: 207 | Input/Output: [(86 75 74 42) 42]
Test Case: 208 | Input/Output: [(53 79 84 23) 23]
Test Case: 209 | Input/Output: [(66 9 35 26) 9]
Test Case: 210 | Input/Output: [(36 30 2 84) 2]
Test Case: 211 | Input/Output: [(47 24 73 56) 24]
Test Case: 212 | Input/Output: [(89 95 48 31) 31]
Test Case: 213 | Input/Output: [(78 40 13 9) 9]
Test Case: 214 | Input/Output: [(15 24 79 36) 15]
Test Case: 215 | Input/Output: [(100 41 100 23) 23]
Test Case: 216 | Input/Output: [(47 3 98 87) 3]
Test Case: 217 | Input/Output: [(60 47 32 37) 32]
Test Case: 218 | Input/Output: [(95 10 16 37) 10]
Test Case: 219 | Input/Output: [(9 37 43 34) 9]
Test Case: 220 | Input/Output: [(11 86 69 32) 11]
Test Case: 221 | Input/Output: [(54 43 62 54) 43]
Test Case: 222 | Input/Output: [(38 82 37 42) 37]
Test Case: 223 | Input/Output: [(99 33 97 9) 9]
Test Case: 224 | Input/Output: [(44 15 45 61) 15]
Test Case: 225 | Input/Output: [(69 98 54 57) 54]
Test Case: 226 | Input/Output: [(52 65 16 62) 16]
Test Case: 227 | Input/Output: [(17 41 28 15) 15]
Test Case: 228 | Input/Output: [(55 96 15 46) 15]
Test Case: 229 | Input/Output: [(60 17 100 43) 17]
Test Case: 230 | Input/Output: [(68 88 66 100) 66]
Test Case: 231 | Input/Output: [(63 77 61 53) 53]
Test Case: 232 | Input/Output: [(43 93 4 77) 4]
Test Case: 233 | Input/Output: [(4 94 63 20) 4]
Test Case: 234 | Input/Output: [(57 18 30 88) 18]
Test Case: 235 | Input/Output: [(0 69 49 28) 0]
Test Case: 236 | Input/Output: [(7 45 15 27) 7]
Test Case: 237 | Input/Output: [(98 51 82 60) 51]
Test Case: 238 | Input/Output: [(42 86 24 70) 24]
Test Case: 239 | Input/Output: [(34 97 18 18) 18]
Test Case: 240 | Input/Output: [(19 23 4 62) 4]
Test Case: 241 | Input/Output: [(96 0 99 48) 0]
Test Case: 242 | Input/Output: [(17 75 33 27) 17]
Test Case: 243 | Input/Output: [(36 98 71 79) 36]
Test Case: 244 | Input/Output: [(32 42 53 78) 32]
Test Case: 245 | Input/Output: [(12 98 4 83) 4]
Test Case: 246 | Input/Output: [(2 0 0 45) 0]
Test Case: 247 | Input/Output: [(60 73 9 48) 9]
Test Case: 248 | Input/Output: [(81 44 88 85) 44]
Test Case: 249 | Input/Output: [(40 30 64 92) 30]
Test Case: 250 | Input/Output: [(38 9 69 88) 9]
Test Case: 251 | Input/Output: [(79 70 99 47) 47]
Test Case: 252 | Input/Output: [(57 52 95 55) 52]
Test Case: 253 | Input/Output: [(50 88 77 33) 33]
Test Case: 254 | Input/Output: [(19 89 87 72) 19]
Test Case: 255 | Input/Output: [(42 80 91 80) 42]
Test Case: 256 | Input/Output: [(29 69 52 0) 0]
Test Case: 257 | Input/Output: [(38 98 41 4) 4]
Test Case: 258 | Input/Output: [(98 68 31 30) 30]
Test Case: 259 | Input/Output: [(97 73 57 84) 57]
Test Case: 260 | Input/Output: [(96 53 84 82) 53]
Test Case: 261 | Input/Output: [(69 35 5 13) 5]
Test Case: 262 | Input/Output: [(29 66 88 92) 29]
Test Case: 263 | Input/Output: [(59 24 20 94) 20]
Test Case: 264 | Input/Output: [(6 56 85 41) 6]
Test Case: 265 | Input/Output: [(3 81 83 9) 3]
Test Case: 266 | Input/Output: [(85 10 39 76) 10]
Test Case: 267 | Input/Output: [(53 56 58 73) 53]
Test Case: 268 | Input/Output: [(7 74 9 25) 7]
Test Case: 269 | Input/Output: [(52 95 69 60) 52]
Test Case: 270 | Input/Output: [(69 98 97 92) 69]
Test Case: 271 | Input/Output: [(95 29 65 24) 24]
Test Case: 272 | Input/Output: [(55 2 31 95) 2]
Test Case: 273 | Input/Output: [(22 86 36 15) 15]
Test Case: 274 | Input/Output: [(6 0 73 85) 0]
Test Case: 275 | Input/Output: [(98 66 72 82) 66]
Test Case: 276 | Input/Output: [(70 90 8 71) 8]
Test Case: 277 | Input/Output: [(53 58 84 6) 6]
Test Case: 278 | Input/Output: [(26 85 46 44) 26]
Test Case: 279 | Input/Output: [(92 55 35 49) 35]
Test Case: 280 | Input/Output: [(19 3 98 83) 3]
Test Case: 281 | Input/Output: [(52 62 39 44) 39]
Test Case: 282 | Input/Output: [(79 94 0 78) 0]
Test Case: 283 | Input/Output: [(19 78 2 53) 2]
Test Case: 284 | Input/Output: [(79 1 95 49) 1]
Test Case: 285 | Input/Output: [(57 22 27 24) 22]
Test Case: 286 | Input/Output: [(87 41 85 64) 41]
Test Case: 287 | Input/Output: [(45 69 86 30) 30]
Test Case: 288 | Input/Output: [(72 23 43 90) 23]
Test Case: 289 | Input/Output: [(77 94 22 87) 22]
Test Case: 290 | Input/Output: [(13 74 15 96) 13]
Test Case: 291 | Input/Output: [(79 81 82 85) 79]
Test Case: 292 | Input/Output: [(62 37 9 32) 9]
Test Case: 293 | Input/Output: [(56 31 37 72) 31]
Test Case: 294 | Input/Output: [(76 70 32 23) 23]
Test Case: 295 | Input/Output: [(35 81 60 44) 35]
Test Case: 296 | Input/Output: [(45 100 74 26) 26]
Test Case: 297 | Input/Output: [(62 61 6 22) 6]
Test Case: 298 | Input/Output: [(9 60 26 59) 9]
Test Case: 299 | Input/Output: [(52 22 44 56) 22]
Test Case: 300 | Input/Output: [(27 93 100 40) 27]
Test Case: 301 | Input/Output: [(6 57 56 86) 6]
Test Case: 302 | Input/Output: [(46 68 90 83) 46]
Test Case: 303 | Input/Output: [(2 51 76 52) 2]
Test Case: 304 | Input/Output: [(63 10 22 87) 10]
Test Case: 305 | Input/Output: [(28 28 63 36) 28]
Test Case: 306 | Input/Output: [(78 45 90 88) 45]
Test Case: 307 | Input/Output: [(68 59 90 25) 25]
Test Case: 308 | Input/Output: [(71 48 94 64) 48]
Test Case: 309 | Input/Output: [(14 93 86 70) 14]
Test Case: 310 | Input/Output: [(56 44 19 74) 19]
Test Case: 311 | Input/Output: [(66 8 39 57) 8]
Test Case: 312 | Input/Output: [(60 5 70 80) 5]
Test Case: 313 | Input/Output: [(57 43 75 14) 14]
Test Case: 314 | Input/Output: [(70 79 24 44) 24]
Test Case: 315 | Input/Output: [(63 43 7 29) 7]
Test Case: 316 | Input/Output: [(72 8 22 91) 8]
Test Case: 317 | Input/Output: [(76 52 30 29) 29]
Test Case: 318 | Input/Output: [(31 93 97 79) 31]
Test Case: 319 | Input/Output: [(79 91 1 27) 1]
Test Case: 320 | Input/Output: [(39 99 40 85) 39]
Test Case: 321 | Input/Output: [(68 13 58 82) 13]
Test Case: 322 | Input/Output: [(99 63 81 87) 63]
Test Case: 323 | Input/Output: [(64 52 71 40) 40]
Test Case: 324 | Input/Output: [(1 63 59 7) 1]
Test Case: 325 | Input/Output: [(27 4 7 69) 4]
Test Case: 326 | Input/Output: [(16 39 90 85) 16]
Test Case: 327 | Input/Output: [(75 30 50 97) 30]
Test Case: 328 | Input/Output: [(66 73 58 67) 58]
Test Case: 329 | Input/Output: [(67 46 67 70) 46]
Test Case: 330 | Input/Output: [(79 15 47 93) 15]
Test Case: 331 | Input/Output: [(4 40 74 58) 4]
Test Case: 332 | Input/Output: [(48 68 59 81) 48]
Test Case: 333 | Input/Output: [(50 21 66 76) 21]
Test Case: 334 | Input/Output: [(26 81 20 41) 20]
Test Case: 335 | Input/Output: [(80 71 52 1) 1]
Test Case: 336 | Input/Output: [(3 2 69 39) 2]
Test Case: 337 | Input/Output: [(56 45 93 0) 0]
Test Case: 338 | Input/Output: [(30 47 67 100) 30]
Test Case: 339 | Input/Output: [(91 84 15 32) 15]
Test Case: 340 | Input/Output: [(83 74 60 83) 60]
Test Case: 341 | Input/Output: [(90 38 44 87) 38]
Test Case: 342 | Input/Output: [(62 47 82 5) 5]
Test Case: 343 | Input/Output: [(99 38 85 28) 28]
Test Case: 344 | Input/Output: [(31 67 89 57) 31]
Test Case: 345 | Input/Output: [(74 8 52 25) 8]
Test Case: 346 | Input/Output: [(5 26 45 80) 5]
Test Case: 347 | Input/Output: [(68 89 45 53) 45]
Test Case: 348 | Input/Output: [(46 8 90 80) 8]
Test Case: 349 | Input/Output: [(71 53 5 42) 5]
Test Case: 350 | Input/Output: [(88 38 86 74) 38]
Test Case: 351 | Input/Output: [(86 24 21 79) 21]
Test Case: 352 | Input/Output: [(51 16 69 65) 16]
Test Case: 353 | Input/Output: [(61 66 76 97) 61]
Test Case: 354 | Input/Output: [(100 41 77 32) 32]
Test Case: 355 | Input/Output: [(43 84 93 48) 43]
Test Case: 356 | Input/Output: [(88 94 100 4) 4]
Test Case: 357 | Input/Output: [(40 89 78 72) 40]
Test Case: 358 | Input/Output: [(82 65 73 75) 65]
Test Case: 359 | Input/Output: [(70 95 58 41) 41]
Test Case: 360 | Input/Output: [(3 61 22 73) 3]
Test Case: 361 | Input/Output: [(76 22 68 67) 22]
Test Case: 362 | Input/Output: [(92 89 20 71) 20]
Test Case: 363 | Input/Output: [(80 31 79 29) 29]
Test Case: 364 | Input/Output: [(40 33 68 76) 33]
Test Case: 365 | Input/Output: [(30 66 13 6) 6]
Test Case: 366 | Input/Output: [(33 27 13 66) 13]
Test Case: 367 | Input/Output: [(0 45 75 96) 0]
Test Case: 368 | Input/Output: [(71 7 20 27) 7]
Test Case: 369 | Input/Output: [(51 39 1 8) 1]
Test Case: 370 | Input/Output: [(34 32 59 96) 32]
Test Case: 371 | Input/Output: [(93 74 99 2) 2]
Test Case: 372 | Input/Output: [(71 88 100 96) 71]
Test Case: 373 | Input/Output: [(19 88 83 78) 19]
Test Case: 374 | Input/Output: [(82 21 88 30) 21]
Test Case: 375 | Input/Output: [(99 43 38 32) 32]
Test Case: 376 | Input/Output: [(88 15 53 79) 15]
Test Case: 377 | Input/Output: [(15 96 26 49) 15]
Test Case: 378 | Input/Output: [(50 95 48 25) 25]
Test Case: 379 | Input/Output: [(10 85 6 53) 6]
Test Case: 380 | Input/Output: [(67 97 5 25) 5]
Test Case: 381 | Input/Output: [(52 69 52 19) 19]
Test Case: 382 | Input/Output: [(85 88 74 50) 50]
Test Case: 383 | Input/Output: [(52 15 82 76) 15]
Test Case: 384 | Input/Output: [(67 54 47 60) 47]
Test Case: 385 | Input/Output: [(80 92 98 73) 73]
Test Case: 386 | Input/Output: [(90 48 60 22) 22]
Test Case: 387 | Input/Output: [(76 91 26 1) 1]
Test Case: 388 | Input/Output: [(32 15 91 85) 15]
Test Case: 389 | Input/Output: [(85 93 30 98) 30]
Test Case: 390 | Input/Output: [(7 40 71 59) 7]
Test Case: 391 | Input/Output: [(78 6 96 97) 6]
Test Case: 392 | Input/Output: [(22 17 52 26) 17]
Test Case: 393 | Input/Output: [(86 20 50 68) 20]
Test Case: 394 | Input/Output: [(0 31 45 49) 0]
Test Case: 395 | Input/Output: [(17 13 28 94) 13]
Test Case: 396 | Input/Output: [(72 11 0 96) 0]
Test Case: 397 | Input/Output: [(100 4 78 67) 4]
Test Case: 398 | Input/Output: [(98 65 87 15) 15]
Test Case: 399 | Input/Output: [(71 62 4 4) 4]
Test Case: 400 | Input/Output: [(35 3 12 48) 3]
Test Case: 401 | Input/Output: [(30 30 -73 11) -73]
Test Case: 402 | Input/Output: [(-44 94 -22 -26) -44]
Test Case: 403 | Input/Output: [(-11 64 75 26) -11]
Test Case: 404 | Input/Output: [(19 57 -99 -43) -99]
Test Case: 405 | Input/Output: [(55 -62 -28 -9) -62]
Test Case: 406 | Input/Output: [(-8 -25 7 34) -25]
Test Case: 407 | Input/Output: [(9 -31 -17 -52) -52]
Test Case: 408 | Input/Output: [(52 78 -13 9) -13]
Test Case: 409 | Input/Output: [(-30 38 -9 22) -30]
Test Case: 410 | Input/Output: [(71 -38 -63 89) -63]
Test Case: 411 | Input/Output: [(-71 80 64 -26) -71]
Test Case: 412 | Input/Output: [(78 99 1 -32) -32]
Test Case: 413 | Input/Output: [(86 -86 34 71) -86]
Test Case: 414 | Input/Output: [(-86 11 96 -62) -86]
Test Case: 415 | Input/Output: [(73 80 73 6) 6]
Test Case: 416 | Input/Output: [(43 31 -66 -90) -90]
Test Case: 417 | Input/Output: [(92 37 -71 -23) -71]
Test Case: 418 | Input/Output: [(46 -29 64 50) -29]
Test Case: 419 | Input/Output: [(-7 55 55 42) -7]
Test Case: 420 | Input/Output: [(-15 -40 53 10) -40]
Test Case: 421 | Input/Output: [(-77 -55 -45 94) -77]
Test Case: 422 | Input/Output: [(-7 86 49 -59) -59]
Test Case: 423 | Input/Output: [(-68 -81 -9 49) -81]
Test Case: 424 | Input/Output: [(57 42 -3 15) -3]
Test Case: 425 | Input/Output: [(25 61 -85 -5) -85]
Test Case: 426 | Input/Output: [(-34 97 -87 -83) -87]
Test Case: 427 | Input/Output: [(-76 39 -87 -33) -87]
Test Case: 428 | Input/Output: [(85 12 33 -5) -5]
Test Case: 429 | Input/Output: [(-47 -25 60 2) -47]
Test Case: 430 | Input/Output: [(3 -25 -7 51) -25]
Test Case: 431 | Input/Output: [(-68 -43 -23 -49) -68]
Test Case: 432 | Input/Output: [(49 -100 -6 83) -100]
Test Case: 433 | Input/Output: [(4 -65 8 58) -65]
Test Case: 434 | Input/Output: [(-26 -1 76 -39) -39]
Test Case: 435 | Input/Output: [(79 -53 16 -84) -84]
Test Case: 436 | Input/Output: [(-2 -99 -7 0) -99]
Test Case: 437 | Input/Output: [(-26 -43 -4 -54) -54]
Test Case: 438 | Input/Output: [(23 41 -51 -84) -84]
Test Case: 439 | Input/Output: [(15 -21 35 74) -21]
Test Case: 440 | Input/Output: [(-27 -24 60 -53) -53]
Test Case: 441 | Input/Output: [(86 67 63 -24) -24]
Test Case: 442 | Input/Output: [(-74 -94 -11 15) -94]
Test Case: 443 | Input/Output: [(90 -90 -37 91) -90]
Test Case: 444 | Input/Output: [(-45 -100 46 20) -100]
Test Case: 445 | Input/Output: [(-22 -44 2 28) -44]
Test Case: 446 | Input/Output: [(-56 -74 -28 -33) -74]
Test Case: 447 | Input/Output: [(-70 -19 -43 76) -70]
Test Case: 448 | Input/Output: [(-8 59 99 70) -8]
Test Case: 449 | Input/Output: [(-61 19 81 23) -61]
Test Case: 450 | Input/Output: [(54 -36 70 46) -36]
Test Case: 451 | Input/Output: [(-35 -60 38 -59) -60]
Test Case: 452 | Input/Output: [(63 -62 -33 -4) -62]
Test Case: 453 | Input/Output: [(-62 62 73 29) -62]
Test Case: 454 | Input/Output: [(88 45 -42 -87) -87]
Test Case: 455 | Input/Output: [(-54 -30 66 1) -54]
Test Case: 456 | Input/Output: [(15 20 87 -48) -48]
Test Case: 457 | Input/Output: [(-46 59 48 82) -46]
Test Case: 458 | Input/Output: [(-8 -60 57 94) -60]
Test Case: 459 | Input/Output: [(-21 30 47 -73) -73]
Test Case: 460 | Input/Output: [(53 -77 17 95) -77]
Test Case: 461 | Input/Output: [(-63 5 17 -44) -63]
Test Case: 462 | Input/Output: [(-99 55 -23 39) -99]
Test Case: 463 | Input/Output: [(-71 38 20 54) -71]
Test Case: 464 | Input/Output: [(72 -79 97 -94) -94]
Test Case: 465 | Input/Output: [(-76 -35 18 -63) -76]
Test Case: 466 | Input/Output: [(81 -99 -41 62) -99]
Test Case: 467 | Input/Output: [(-22 -82 71 -78) -82]
Test Case: 468 | Input/Output: [(53 55 -42 38) -42]
Test Case: 469 | Input/Output: [(-27 -50 -12 8) -50]
Test Case: 470 | Input/Output: [(-60 -99 -40 28) -99]
Test Case: 471 | Input/Output: [(-96 26 -45 -88) -96]
Test Case: 472 | Input/Output: [(-30 54 -71 -7) -71]
Test Case: 473 | Input/Output: [(60 74 45 56) 45]
Test Case: 474 | Input/Output: [(72 22 14 -32) -32]
Test Case: 475 | Input/Output: [(-78 -13 61 2) -78]
Test Case: 476 | Input/Output: [(52 -52 63 51) -52]
Test Case: 477 | Input/Output: [(-32 -50 -55 58) -55]
Test Case: 478 | Input/Output: [(-55 -39 -73 -13) -73]
Test Case: 479 | Input/Output: [(-22 -13 -60 64) -60]
Test Case: 480 | Input/Output: [(-80 100 72 40) -80]
Test Case: 481 | Input/Output: [(-45 20 17 86) -45]
Test Case: 482 | Input/Output: [(-7 -63 -77 43) -77]
Test Case: 483 | Input/Output: [(-82 -90 -62 -94) -94]
Test Case: 484 | Input/Output: [(100 -49 -93 -8) -93]
Test Case: 485 | Input/Output: [(94 27 25 35) 25]
Test Case: 486 | Input/Output: [(46 83 -82 92) -82]
Test Case: 487 | Input/Output: [(11 -78 7 98) -78]
Test Case: 488 | Input/Output: [(98 -70 44 37) -70]
Test Case: 489 | Input/Output: [(21 -34 -44 16) -44]
Test Case: 490 | Input/Output: [(69 46 49 -89) -89]
Test Case: 491 | Input/Output: [(-24 -82 43 -10) -82]
Test Case: 492 | Input/Output: [(11 -21 36 15) -21]
Test Case: 493 | Input/Output: [(-77 39 82 -91) -91]
Test Case: 494 | Input/Output: [(12 30 47 -47) -47]
Test Case: 495 | Input/Output: [(-90 57 87 -27) -90]
Test Case: 496 | Input/Output: [(0 -54 13 76) -54]
Test Case: 497 | Input/Output: [(89 -47 -61 -41) -61]
Test Case: 498 | Input/Output: [(-7 -64 2 88) -64]
Test Case: 499 | Input/Output: [(-24 -32 -20 87) -32]
Test Case: 500 | Input/Output: [(86 -91 -41 -76) -91]
Test Case: 501 | Input/Output: [(68 28 21 39) 21]
Test Case: 502 | Input/Output: [(21 61 73 75) 21]
Test Case: 503 | Input/Output: [(9 29 81 7) 7]
Test Case: 504 | Input/Output: [(60 -11 -60 -66) -66]
Test Case: 505 | Input/Output: [(17 64 100 -50) -50]
Test Case: 506 | Input/Output: [(-66 -43 -88 -97) -97]
Test Case: 507 | Input/Output: [(50 -31 31 47) -31]
Test Case: 508 | Input/Output: [(100 -61 100 -86) -86]
Test Case: 509 | Input/Output: [(-37 -90 -63 -96) -96]
Test Case: 510 | Input/Output: [(90 -30 55 -92) -92]
Test Case: 511 | Input/Output: [(-37 86 -23 -29) -37]
Test Case: 512 | Input/Output: [(10 29 -10 -19) -19]
Test Case: 513 | Input/Output: [(27 94 -16 50) -16]
Test Case: 514 | Input/Output: [(100 45 -78 -63) -78]
Test Case: 515 | Input/Output: [(-1 62 32 -85) -85]
Test Case: 516 | Input/Output: [(-3 100 7 43) -3]
Test Case: 517 | Input/Output: [(-14 31 -14 -62) -62]
Test Case: 518 | Input/Output: [(-78 -36 28 89) -78]
Test Case: 519 | Input/Output: [(84 89 68 55) 55]
Test Case: 520 | Input/Output: [(-65 -91 23 87) -91]
Test Case: 521 | Input/Output: [(-52 50 44 -92) -92]
Test Case: 522 | Input/Output: [(58 63 15 -68) -68]
Test Case: 523 | Input/Output: [(-45 60 -58 -64) -64]
Test Case: 524 | Input/Output: [(66 -99 77 -44) -99]
Test Case: 525 | Input/Output: [(-47 54 -49 -100) -100]
Test Case: 526 | Input/Output: [(-78 35 35 -27) -78]
Test Case: 527 | Input/Output: [(61 37 -13 -6) -13]
Test Case: 528 | Input/Output: [(-43 -39 -12 72) -43]
Test Case: 529 | Input/Output: [(99 63 -75 77) -75]
Test Case: 530 | Input/Output: [(40 4 75 50) 4]
Test Case: 531 | Input/Output: [(-88 70 40 -22) -88]
Test Case: 532 | Input/Output: [(61 -86 -75 -13) -86]
Test Case: 533 | Input/Output: [(-17 51 -77 -27) -77]
Test Case: 534 | Input/Output: [(37 -30 -68 75) -68]
Test Case: 535 | Input/Output: [(-8 52 -12 49) -12]
Test Case: 536 | Input/Output: [(84 47 -12 -14) -14]
Test Case: 537 | Input/Output: [(-28 -27 29 -55) -55]
Test Case: 538 | Input/Output: [(-29 -47 66 -70) -70]
Test Case: 539 | Input/Output: [(-23 -34 70 -70) -70]
Test Case: 540 | Input/Output: [(-5 -37 91 -22) -37]
Test Case: 541 | Input/Output: [(-22 97 -77 59) -77]
Test Case: 542 | Input/Output: [(57 73 -33 11) -33]
Test Case: 543 | Input/Output: [(21 87 51 51) 21]
Test Case: 544 | Input/Output: [(1 -47 54 -37) -47]
Test Case: 545 | Input/Output: [(82 10 0 33) 0]
Test Case: 546 | Input/Output: [(17 56 -100 49) -100]
Test Case: 547 | Input/Output: [(-52 -83 78 -88) -88]
Test Case: 548 | Input/Output: [(-99 -67 -1 -45) -99]
Test Case: 549 | Input/Output: [(-99 -98 89 13) -99]
Test Case: 550 | Input/Output: [(-58 -72 38 -57) -72]
Test Case: 551 | Input/Output: [(23 -88 -54 82) -88]
Test Case: 552 | Input/Output: [(-6 3 83 32) -6]
Test Case: 553 | Input/Output: [(44 44 -25 -4) -25]
Test Case: 554 | Input/Output: [(36 -52 0 1) -52]
Test Case: 555 | Input/Output: [(-39 -63 86 85) -63]
Test Case: 556 | Input/Output: [(-98 -61 -49 88) -98]
Test Case: 557 | Input/Output: [(78 71 -89 -72) -89]
Test Case: 558 | Input/Output: [(4 -28 75 -4) -28]
Test Case: 559 | Input/Output: [(94 -43 92 -6) -43]
Test Case: 560 | Input/Output: [(15 16 -41 -89) -89]
Test Case: 561 | Input/Output: [(97 -42 -87 4) -87]
Test Case: 562 | Input/Output: [(-46 -32 -84 28) -84]
Test Case: 563 | Input/Output: [(-88 -13 33 97) -88]
Test Case: 564 | Input/Output: [(-15 30 93 39) -15]
Test Case: 565 | Input/Output: [(-9 -7 -83 -58) -83]
Test Case: 566 | Input/Output: [(-74 -57 -78 24) -78]
Test Case: 567 | Input/Output: [(-42 -56 72 -69) -69]
Test Case: 568 | Input/Output: [(-25 44 -37 -21) -37]
Test Case: 569 | Input/Output: [(73 -62 -35 98) -62]
Test Case: 570 | Input/Output: [(95 60 -42 -38) -42]
Test Case: 571 | Input/Output: [(7 -75 -10 28) -75]
Test Case: 572 | Input/Output: [(29 -100 -68 -45) -100]
Test Case: 573 | Input/Output: [(59 64 -76 -58) -76]
Test Case: 574 | Input/Output: [(-25 -27 9 62) -27]
Test Case: 575 | Input/Output: [(1 5 49 -70) -70]
Test Case: 576 | Input/Output: [(-2 20 67 88) -2]
Test Case: 577 | Input/Output: [(94 90 8 -32) -32]
Test Case: 578 | Input/Output: [(-72 -100 -97 20) -100]
Test Case: 579 | Input/Output: [(-54 24 21 43) -54]
Test Case: 580 | Input/Output: [(-12 -90 -97 57) -97]
Test Case: 581 | Input/Output: [(-84 41 10 18) -84]
Test Case: 582 | Input/Output: [(-50 -98 0 -16) -98]
Test Case: 583 | Input/Output: [(31 -49 -44 -46) -49]
Test Case: 584 | Input/Output: [(55 2 71 -18) -18]
Test Case: 585 | Input/Output: [(87 -24 20 -37) -37]
Test Case: 586 | Input/Output: [(59 47 -27 64) -27]
Test Case: 587 | Input/Output: [(-84 -32 0 35) -84]
Test Case: 588 | Input/Output: [(62 94 47 -73) -73]
Test Case: 589 | Input/Output: [(26 63 -21 53) -21]
Test Case: 590 | Input/Output: [(88 89 89 45) 45]
Test Case: 591 | Input/Output: [(66 -74 -89 61) -89]
Test Case: 592 | Input/Output: [(88 61 -40 -30) -40]
Test Case: 593 | Input/Output: [(41 26 -25 70) -25]
Test Case: 594 | Input/Output: [(-72 77 78 -96) -96]
Test Case: 595 | Input/Output: [(86 22 96 1) 1]
Test Case: 596 | Input/Output: [(-75 -22 -18 -28) -75]
Test Case: 597 | Input/Output: [(5 99 -71 -79) -79]
Test Case: 598 | Input/Output: [(24 67 44 20) 20]
Test Case: 599 | Input/Output: [(81 25 36 -75) -75]
Test Case: 600 | Input/Output: [(98 -67 84 -46) -67]
Test Case: 601 | Input/Output: [(72 2 44 -4) -4]
Test Case: 602 | Input/Output: [(48 -52 98 -81) -81]
Test Case: 603 | Input/Output: [(-49 -88 52 -34) -88]
Test Case: 604 | Input/Output: [(3 90 -44 27) -44]
Test Case: 605 | Input/Output: [(-22 43 61 -71) -71]
Test Case: 606 | Input/Output: [(6 -9 58 86) -9]
Test Case: 607 | Input/Output: [(-16 24 14 -22) -22]
Test Case: 608 | Input/Output: [(52 -95 -61 78) -95]
Test Case: 609 | Input/Output: [(42 -79 -68 54) -79]
Test Case: 610 | Input/Output: [(-1 -28 10 -85) -85]
Test Case: 611 | Input/Output: [(-11 -27 -38 83) -38]
Test Case: 612 | Input/Output: [(-55 60 9 -3) -55]
Test Case: 613 | Input/Output: [(84 -13 95 -3) -13]
Test Case: 614 | Input/Output: [(85 -32 70 39) -32]
Test Case: 615 | Input/Output: [(48 12 91 -90) -90]
Test Case: 616 | Input/Output: [(-35 56 84 13) -35]
Test Case: 617 | Input/Output: [(9 97 28 -80) -80]
Test Case: 618 | Input/Output: [(-25 92 -56 -23) -56]
Test Case: 619 | Input/Output: [(0 71 -96 -88) -96]
Test Case: 620 | Input/Output: [(66 -19 0 97) -19]
Test Case: 621 | Input/Output: [(70 -32 -5 5) -32]
Test Case: 622 | Input/Output: [(-41 -3 60 62) -41]
Test Case: 623 | Input/Output: [(64 -67 47 -76) -76]
Test Case: 624 | Input/Output: [(3 -71 -90 -79) -90]
Test Case: 625 | Input/Output: [(53 -73 -69 -32) -73]
Test Case: 626 | Input/Output: [(71 -58 87 -41) -58]
Test Case: 627 | Input/Output: [(33 -17 -100 94) -100]
Test Case: 628 | Input/Output: [(7 -6 -33 78) -33]
Test Case: 629 | Input/Output: [(-95 76 -74 30) -95]
Test Case: 630 | Input/Output: [(-92 68 96 17) -92]
Test Case: 631 | Input/Output: [(43 81 54 4) 4]
Test Case: 632 | Input/Output: [(-50 51 59 -57) -57]
Test Case: 633 | Input/Output: [(-71 -61 -98 -27) -98]
Test Case: 634 | Input/Output: [(-79 -4 68 -86) -86]
Test Case: 635 | Input/Output: [(-66 -91 -20 -2) -91]
Test Case: 636 | Input/Output: [(14 88 63 -44) -44]
Test Case: 637 | Input/Output: [(71 -74 -62 49) -74]
Test Case: 638 | Input/Output: [(-45 -21 -58 -96) -96]
Test Case: 639 | Input/Output: [(42 83 17 -30) -30]
Test Case: 640 | Input/Output: [(61 0 -50 15) -50]
Test Case: 641 | Input/Output: [(14 32 -82 60) -82]
Test Case: 642 | Input/Output: [(-87 69 13 84) -87]
Test Case: 643 | Input/Output: [(50 -20 -18 41) -20]
Test Case: 644 | Input/Output: [(43 -79 95 -18) -79]
Test Case: 645 | Input/Output: [(-7 -50 74 69) -50]
Test Case: 646 | Input/Output: [(1 95 75 -99) -99]
Test Case: 647 | Input/Output: [(-34 -100 92 89) -100]
Test Case: 648 | Input/Output: [(-86 -94 -65 -2) -94]
Test Case: 649 | Input/Output: [(27 -83 -12 7) -83]
Test Case: 650 | Input/Output: [(62 14 -24 -49) -49]
Test Case: 651 | Input/Output: [(-94 34 62 56) -94]
Test Case: 652 | Input/Output: [(77 -80 95 -25) -80]
Test Case: 653 | Input/Output: [(3 91 47 62) 3]
Test Case: 654 | Input/Output: [(-42 -50 -74 -6) -74]
Test Case: 655 | Input/Output: [(42 62 -10 -4) -10]
Test Case: 656 | Input/Output: [(62 -51 28 3) -51]
Test Case: 657 | Input/Output: [(-45 -2 61 -28) -45]
Test Case: 658 | Input/Output: [(46 -48 61 99) -48]
Test Case: 659 | Input/Output: [(-20 48 -6 -99) -99]
Test Case: 660 | Input/Output: [(50 90 -89 82) -89]
Test Case: 661 | Input/Output: [(-43 60 26 75) -43]
Test Case: 662 | Input/Output: [(-5 -46 -45 85) -46]
Test Case: 663 | Input/Output: [(-97 -36 0 34) -97]
Test Case: 664 | Input/Output: [(-16 -41 -65 24) -65]
Test Case: 665 | Input/Output: [(-5 38 14 -61) -61]
Test Case: 666 | Input/Output: [(-56 -90 -73 75) -90]
Test Case: 667 | Input/Output: [(-67 79 -94 99) -94]
Test Case: 668 | Input/Output: [(13 93 -46 -1) -46]
Test Case: 669 | Input/Output: [(85 80 43 13) 13]
Test Case: 670 | Input/Output: [(-72 -65 90 -66) -72]
Test Case: 671 | Input/Output: [(-87 -30 26 -24) -87]
Test Case: 672 | Input/Output: [(100 78 -53 37) -53]
Test Case: 673 | Input/Output: [(62 -1 25 -63) -63]
Test Case: 674 | Input/Output: [(82 -99 95 87) -99]
Test Case: 675 | Input/Output: [(-8 -67 -20 -45) -67]
Test Case: 676 | Input/Output: [(-18 -85 2 -55) -85]
Test Case: 677 | Input/Output: [(-8 -46 73 -13) -46]
Test Case: 678 | Input/Output: [(92 -17 -56 41) -56]
Test Case: 679 | Input/Output: [(-39 -87 6 -43) -87]
Test Case: 680 | Input/Output: [(62 6 -51 29) -51]
Test Case: 681 | Input/Output: [(-11 99 -77 -34) -77]
Test Case: 682 | Input/Output: [(-95 -92 59 87) -95]
Test Case: 683 | Input/Output: [(89 -22 92 -24) -24]
Test Case: 684 | Input/Output: [(-33 10 15 -66) -66]
Test Case: 685 | Input/Output: [(21 62 -14 25) -14]
Test Case: 686 | Input/Output: [(-85 28 76 -30) -85]
Test Case: 687 | Input/Output: [(-89 67 -30 -89) -89]
Test Case: 688 | Input/Output: [(27 46 -6 67) -6]
Test Case: 689 | Input/Output: [(5 31 -91 -45) -91]
Test Case: 690 | Input/Output: [(79 76 -25 -65) -65]
Test Case: 691 | Input/Output: [(28 61 55 -72) -72]
Test Case: 692 | Input/Output: [(66 -6 15 -97) -97]
Test Case: 693 | Input/Output: [(-11 41 -75 -70) -75]
Test Case: 694 | Input/Output: [(71 98 100 17) 17]
Test Case: 695 | Input/Output: [(20 85 -45 -31) -45]
Test Case: 696 | Input/Output: [(-31 -2 11 52) -31]
Test Case: 697 | Input/Output: [(77 93 -3 -65) -65]
Test Case: 698 | Input/Output: [(71 -45 75 -35) -45]
Test Case: 699 | Input/Output: [(-96 72 -75 88) -96]
Test Case: 700 | Input/Output: [(-54 27 83 -67) -67]
Test Case: 701 | Input/Output: [(-98 16 13 -91) -98]
Test Case: 702 | Input/Output: [(99 -26 -25 4) -26]
Test Case: 703 | Input/Output: [(-15 -97 -18 -45) -97]
Test Case: 704 | Input/Output: [(10 3 65 45) 3]
Test Case: 705 | Input/Output: [(-27 -56 -83 40) -83]
Test Case: 706 | Input/Output: [(38 -31 59 -5) -31]
Test Case: 707 | Input/Output: [(-19 11 -75 85) -75]
Test Case: 708 | Input/Output: [(-49 -36 -37 -96) -96]
Test Case: 709 | Input/Output: [(47 -16 90 68) -16]
Test Case: 710 | Input/Output: [(71 10 51 -58) -58]
Test Case: 711 | Input/Output: [(85 45 -69 -48) -69]
Test Case: 712 | Input/Output: [(11 89 65 -57) -57]
Test Case: 713 | Input/Output: [(97 7 -19 30) -19]
Test Case: 714 | Input/Output: [(55 -55 11 -59) -59]
Test Case: 715 | Input/Output: [(3 -66 -94 50) -94]
Test Case: 716 | Input/Output: [(38 40 90 9) 9]
Test Case: 717 | Input/Output: [(32 93 23 72) 23]
Test Case: 718 | Input/Output: [(-74 -15 -9 65) -74]
Test Case: 719 | Input/Output: [(54 -24 33 88) -24]
Test Case: 720 | Input/Output: [(-78 100 -29 21) -78]
Test Case: 721 | Input/Output: [(53 -23 -17 -61) -61]
Test Case: 722 | Input/Output: [(47 -28 -41 -16) -41]
Test Case: 723 | Input/Output: [(-59 -14 -45 -44) -59]
Test Case: 724 | Input/Output: [(96 -86 86 10) -86]
Test Case: 725 | Input/Output: [(-29 -13 41 39) -29]
Test Case: 726 | Input/Output: [(-34 15 86 -11) -34]
Test Case: 727 | Input/Output: [(-21 73 -7 12) -21]
Test Case: 728 | Input/Output: [(68 56 41 -40) -40]
Test Case: 729 | Input/Output: [(-61 -30 -66 -58) -66]
Test Case: 730 | Input/Output: [(-84 -88 48 -100) -100]
Test Case: 731 | Input/Output: [(-43 -11 -55 -53) -55]
Test Case: 732 | Input/Output: [(77 -53 91 -76) -76]
Test Case: 733 | Input/Output: [(-95 27 -34 -49) -95]
Test Case: 734 | Input/Output: [(69 -79 -94 84) -94]
Test Case: 735 | Input/Output: [(-45 84 96 67) -45]
Test Case: 736 | Input/Output: [(-83 6 83 61) -83]
Test Case: 737 | Input/Output: [(51 -100 -96 27) -100]
Test Case: 738 | Input/Output: [(-65 -39 -52 -32) -65]
Test Case: 739 | Input/Output: [(-86 -59 17 -90) -90]
Test Case: 740 | Input/Output: [(-25 -33 0 -61) -61]
Test Case: 741 | Input/Output: [(84 -41 50 -47) -47]
Test Case: 742 | Input/Output: [(52 -56 46 12) -56]
Test Case: 743 | Input/Output: [(-7 32 -7 -89) -89]
Test Case: 744 | Input/Output: [(41 100 72 58) 41]
Test Case: 745 | Input/Output: [(82 62 78 11) 11]
Test Case: 746 | Input/Output: [(32 -79 54 -14) -79]
Test Case: 747 | Input/Output: [(-11 62 35 -9) -11]
Test Case: 748 | Input/Output: [(-79 15 21 -68) -79]
Test Case: 749 | Input/Output: [(-61 -63 -88 -82) -88]
Test Case: 750 | Input/Output: [(-59 6 8 34) -59]
Test Case: 751 | Input/Output: [(4 -35 65 -45) -45]
Test Case: 752 | Input/Output: [(-97 53 -59 -73) -97]
Test Case: 753 | Input/Output: [(-80 15 97 -99) -99]
Test Case: 754 | Input/Output: [(-66 58 -59 64) -66]
Test Case: 755 | Input/Output: [(-55 2 -97 82) -97]
Test Case: 756 | Input/Output: [(-44 -24 43 100) -44]
Test Case: 757 | Input/Output: [(-1 -62 84 32) -62]
Test Case: 758 | Input/Output: [(72 -28 -31 7) -31]
Test Case: 759 | Input/Output: [(-95 83 3 -37) -95]
Test Case: 760 | Input/Output: [(-90 49 -71 56) -90]
Test Case: 761 | Input/Output: [(83 -11 -22 27) -22]
Test Case: 762 | Input/Output: [(20 -13 32 -69) -69]
Test Case: 763 | Input/Output: [(62 -26 55 -17) -26]
Test Case: 764 | Input/Output: [(-27 -99 68 8) -99]
Test Case: 765 | Input/Output: [(-44 9 95 32) -44]
Test Case: 766 | Input/Output: [(48 -45 82 -96) -96]
Test Case: 767 | Input/Output: [(14 -37 -23 74) -37]
Test Case: 768 | Input/Output: [(-96 -54 34 100) -96]
Test Case: 769 | Input/Output: [(19 -68 -73 -7) -73]
Test Case: 770 | Input/Output: [(66 -9 78 -31) -31]
Test Case: 771 | Input/Output: [(54 -100 -65 1) -100]
Test Case: 772 | Input/Output: [(-65 20 33 -44) -65]
Test Case: 773 | Input/Output: [(-51 17 81 -95) -95]
Test Case: 774 | Input/Output: [(-21 18 -49 -5) -49]
Test Case: 775 | Input/Output: [(-58 -44 -28 76) -58]
Test Case: 776 | Input/Output: [(14 -79 89 -49) -79]
Test Case: 777 | Input/Output: [(-70 41 -92 19) -92]
Test Case: 778 | Input/Output: [(0 78 97 33) 0]
Test Case: 779 | Input/Output: [(-68 10 99 19) -68]
Test Case: 780 | Input/Output: [(-78 39 -97 96) -97]
Test Case: 781 | Input/Output: [(-95 -83 -44 99) -95]
Test Case: 782 | Input/Output: [(-17 38 -31 -87) -87]
Test Case: 783 | Input/Output: [(-47 67 60 -74) -74]
Test Case: 784 | Input/Output: [(84 81 -52 81) -52]
Test Case: 785 | Input/Output: [(-81 -47 80 68) -81]
Test Case: 786 | Input/Output: [(49 -3 27 43) -3]
Test Case: 787 | Input/Output: [(15 -59 -17 63) -59]
Test Case: 788 | Input/Output: [(92 9 -98 13) -98]
Test Case: 789 | Input/Output: [(97 48 88 93) 48]
Test Case: 790 | Input/Output: [(82 -20 33 63) -20]
Test Case: 791 | Input/Output: [(36 -80 -54 12) -80]
Test Case: 792 | Input/Output: [(89 97 24 45) 24]
Test Case: 793 | Input/Output: [(2 13 -98 -86) -98]
Test Case: 794 | Input/Output: [(-33 39 -84 9) -84]
Test Case: 795 | Input/Output: [(64 29 -81 36) -81]
Test Case: 796 | Input/Output: [(-62 -27 -4 -38) -62]
Test Case: 797 | Input/Output: [(-5 -98 91 -34) -98]
Test Case: 798 | Input/Output: [(-25 -31 -25 73) -31]
Test Case: 799 | Input/Output: [(-57 51 37 70) -57]
Test Case: 800 | Input/Output: [(-13 -98 -23 38) -98]
Test Case: 801 | Input/Output: [(-36 12 -73 -11) -73]
Test Case: 802 | Input/Output: [(40 4 -60 29) -60]
Test Case: 803 | Input/Output: [(18 -97 -27 -31) -97]
Test Case: 804 | Input/Output: [(3 -21 -2 33) -21]
Test Case: 805 | Input/Output: [(81 54 43 -95) -95]
Test Case: 806 | Input/Output: [(-20 -14 100 -67) -67]
Test Case: 807 | Input/Output: [(93 -5 -53 -9) -53]
Test Case: 808 | Input/Output: [(17 -92 -20 24) -92]
Test Case: 809 | Input/Output: [(-36 69 73 -87) -87]
Test Case: 810 | Input/Output: [(-4 -2 -36 -2) -36]
Test Case: 811 | Input/Output: [(32 -71 -71 -26) -71]
Test Case: 812 | Input/Output: [(-42 47 -75 -96) -96]
Test Case: 813 | Input/Output: [(-60 73 -77 52) -77]
Test Case: 814 | Input/Output: [(49 23 -73 77) -73]
Test Case: 815 | Input/Output: [(88 80 -97 -27) -97]
Test Case: 816 | Input/Output: [(-97 40 -52 13) -97]
Test Case: 817 | Input/Output: [(-89 46 7 -22) -89]
Test Case: 818 | Input/Output: [(68 -54 -27 77) -54]
Test Case: 819 | Input/Output: [(-24 -8 -10 77) -24]
Test Case: 820 | Input/Output: [(42 26 -14 26) -14]
Test Case: 821 | Input/Output: [(-55 91 -19 3) -55]
Test Case: 822 | Input/Output: [(2 91 -85 89) -85]
Test Case: 823 | Input/Output: [(91 -94 -81 61) -94]
Test Case: 824 | Input/Output: [(-7 92 -52 81) -52]
Test Case: 825 | Input/Output: [(-68 74 76 84) -68]
Test Case: 826 | Input/Output: [(-86 17 72 -5) -86]
Test Case: 827 | Input/Output: [(16 8 67 -98) -98]
Test Case: 828 | Input/Output: [(15 77 35 94) 15]
Test Case: 829 | Input/Output: [(-66 -83 -91 -30) -91]
Test Case: 830 | Input/Output: [(13 70 35 -29) -29]
Test Case: 831 | Input/Output: [(-45 39 -46 -8) -46]
Test Case: 832 | Input/Output: [(41 20 38 -51) -51]
Test Case: 833 | Input/Output: [(-10 94 93 -69) -69]
Test Case: 834 | Input/Output: [(-83 -14 92 -65) -83]
Test Case: 835 | Input/Output: [(58 -86 23 6) -86]
Test Case: 836 | Input/Output: [(73 15 -23 36) -23]
Test Case: 837 | Input/Output: [(54 -40 80 -57) -57]
Test Case: 838 | Input/Output: [(100 85 61 -9) -9]
Test Case: 839 | Input/Output: [(85 3 -1 -5) -5]
Test Case: 840 | Input/Output: [(-1 51 -97 63) -97]
Test Case: 841 | Input/Output: [(37 -23 -14 -16) -23]
Test Case: 842 | Input/Output: [(-52 1 5 50) -52]
Test Case: 843 | Input/Output: [(-24 52 -41 -28) -41]
Test Case: 844 | Input/Output: [(61 -29 -84 -36) -84]
Test Case: 845 | Input/Output: [(-30 -35 -62 -37) -62]
Test Case: 846 | Input/Output: [(-2 -20 49 -35) -35]
Test Case: 847 | Input/Output: [(-17 -96 -61 56) -96]
Test Case: 848 | Input/Output: [(-28 -15 75 18) -28]
Test Case: 849 | Input/Output: [(13 -37 -27 12) -37]
Test Case: 850 | Input/Output: [(82 -56 84 74) -56]
Test Case: 851 | Input/Output: [(-99 -89 68 -36) -99]
Test Case: 852 | Input/Output: [(12 60 61 -7) -7]
Test Case: 853 | Input/Output: [(-1 22 94 2) -1]
Test Case: 854 | Input/Output: [(-69 14 48 71) -69]
Test Case: 855 | Input/Output: [(51 -70 -30 90) -70]
Test Case: 856 | Input/Output: [(-83 30 63 -63) -83]
Test Case: 857 | Input/Output: [(-10 -90 2 -30) -90]
Test Case: 858 | Input/Output: [(51 85 -14 -34) -34]
Test Case: 859 | Input/Output: [(97 -45 -20 -49) -49]
Test Case: 860 | Input/Output: [(42 84 76 59) 42]
Test Case: 861 | Input/Output: [(-100 -36 -7 -70) -100]
Test Case: 862 | Input/Output: [(72 -95 -49 -10) -95]
Test Case: 863 | Input/Output: [(0 37 62 32) 0]
Test Case: 864 | Input/Output: [(-34 4 -33 26) -34]
Test Case: 865 | Input/Output: [(-29 -56 11 48) -56]
Test Case: 866 | Input/Output: [(-47 3 -49 -27) -49]
Test Case: 867 | Input/Output: [(62 72 35 26) 26]
Test Case: 868 | Input/Output: [(-84 93 74 68) -84]
Test Case: 869 | Input/Output: [(31 70 -95 75) -95]
Test Case: 870 | Input/Output: [(4 -35 15 -45) -45]
Test Case: 871 | Input/Output: [(53 97 62 -70) -70]
Test Case: 872 | Input/Output: [(-11 -80 -15 65) -80]
Test Case: 873 | Input/Output: [(-96 50 -71 63) -96]
Test Case: 874 | Input/Output: [(-67 97 64 17) -67]
Test Case: 875 | Input/Output: [(99 32 -71 13) -71]
Test Case: 876 | Input/Output: [(-22 75 -27 35) -27]
Test Case: 877 | Input/Output: [(96 58 -91 -32) -91]
Test Case: 878 | Input/Output: [(96 12 -22 -34) -34]
Test Case: 879 | Input/Output: [(-24 86 28 78) -24]
Test Case: 880 | Input/Output: [(-20 -32 -25 -6) -32]
Test Case: 881 | Input/Output: [(90 -61 22 -9) -61]
Test Case: 882 | Input/Output: [(49 -75 -35 -31) -75]
Test Case: 883 | Input/Output: [(35 -96 23 89) -96]
Test Case: 884 | Input/Output: [(-46 90 -77 -68) -77]
Test Case: 885 | Input/Output: [(76 21 -92 42) -92]
Test Case: 886 | Input/Output: [(-36 -11 72 41) -36]
Test Case: 887 | Input/Output: [(-26 62 -95 25) -95]
Test Case: 888 | Input/Output: [(-67 22 91 36) -67]
Test Case: 889 | Input/Output: [(75 46 41 71) 41]
Test Case: 890 | Input/Output: [(50 -55 -84 53) -84]
Test Case: 891 | Input/Output: [(-86 42 0 -14) -86]
Test Case: 892 | Input/Output: [(-98 11 51 -47) -98]
Test Case: 893 | Input/Output: [(66 -91 23 -11) -91]
Test Case: 894 | Input/Output: [(99 -2 87 -54) -54]
Test Case: 895 | Input/Output: [(-28 21 62 27) -28]
Test Case: 896 | Input/Output: [(74 -72 -99 8) -99]
Test Case: 897 | Input/Output: [(-79 86 55 -13) -79]
Test Case: 898 | Input/Output: [(-44 24 -36 76) -44]
Test Case: 899 | Input/Output: [(81 -60 95 50) -60]
Test Case: 900 | Input/Output: [(38 15 -24 95) -24]
Test Case: 901 | Input/Output: [(-69 76 -85 20) -85]
Test Case: 902 | Input/Output: [(-23 -87 22 -45) -87]
Test Case: 903 | Input/Output: [(-49 46 -15 85) -49]
Test Case: 904 | Input/Output: [(100 -37 88 -44) -44]
Test Case: 905 | Input/Output: [(26 10 40 -13) -13]
Test Case: 906 | Input/Output: [(32 -76 -18 -86) -86]
Test Case: 907 | Input/Output: [(-2 15 -91 16) -91]
Test Case: 908 | Input/Output: [(44 66 -15 76) -15]
Test Case: 909 | Input/Output: [(27 -37 75 97) -37]
Test Case: 910 | Input/Output: [(15 -28 -74 -38) -74]
Test Case: 911 | Input/Output: [(-41 17 -75 -22) -75]
Test Case: 912 | Input/Output: [(-19 -53 25 26) -53]
Test Case: 913 | Input/Output: [(-59 15 -93 90) -93]
Test Case: 914 | Input/Output: [(45 -23 25 -76) -76]
Test Case: 915 | Input/Output: [(59 -12 39 84) -12]
Test Case: 916 | Input/Output: [(-22 27 22 32) -22]
Test Case: 917 | Input/Output: [(-94 8 -5 -50) -94]
Test Case: 918 | Input/Output: [(-20 27 -36 25) -36]
Test Case: 919 | Input/Output: [(-23 -28 -74 -41) -74]
Test Case: 920 | Input/Output: [(-17 7 -91 62) -91]
Test Case: 921 | Input/Output: [(-91 -23 94 69) -91]
Test Case: 922 | Input/Output: [(-51 -14 -59 -57) -59]
Test Case: 923 | Input/Output: [(88 -49 95 42) -49]
Test Case: 924 | Input/Output: [(-31 20 -57 28) -57]
Test Case: 925 | Input/Output: [(18 19 -59 30) -59]
Test Case: 926 | Input/Output: [(-53 -72 24 -25) -72]
Test Case: 927 | Input/Output: [(-47 15 12 67) -47]
Test Case: 928 | Input/Output: [(67 -57 39 35) -57]
Test Case: 929 | Input/Output: [(-2 -69 17 -19) -69]
Test Case: 930 | Input/Output: [(16 -45 6 -34) -45]
Test Case: 931 | Input/Output: [(-41 -94 65 38) -94]
Test Case: 932 | Input/Output: [(-28 78 -21 72) -28]
Test Case: 933 | Input/Output: [(-28 -60 58 98) -60]
Test Case: 934 | Input/Output: [(-38 10 -93 -69) -93]
Test Case: 935 | Input/Output: [(-100 73 14 85) -100]
Test Case: 936 | Input/Output: [(-99 -94 23 49) -99]
Test Case: 937 | Input/Output: [(-34 -82 -92 95) -92]
Test Case: 938 | Input/Output: [(-59 -16 -44 -94) -94]
Test Case: 939 | Input/Output: [(-22 -5 79 -90) -90]
Test Case: 940 | Input/Output: [(-43 -39 -89 89) -89]
Test Case: 941 | Input/Output: [(-78 81 76 -61) -78]
Test Case: 942 | Input/Output: [(-95 -8 91 48) -95]
Test Case: 943 | Input/Output: [(-67 -96 -23 33) -96]
Test Case: 944 | Input/Output: [(57 42 41 -17) -17]
Test Case: 945 | Input/Output: [(64 -89 62 -32) -89]
Test Case: 946 | Input/Output: [(-72 54 99 73) -72]
Test Case: 947 | Input/Output: [(17 -61 -84 69) -84]
Test Case: 948 | Input/Output: [(-42 37 -61 58) -61]
Test Case: 949 | Input/Output: [(-62 -49 -45 16) -62]
Test Case: 950 | Input/Output: [(65 33 65 -35) -35]
Test Case: 951 | Input/Output: [(50 49 -95 53) -95]
Test Case: 952 | Input/Output: [(100 19 -61 -1) -61]
Test Case: 953 | Input/Output: [(-83 45 -64 -61) -83]
Test Case: 954 | Input/Output: [(89 36 48 74) 36]
Test Case: 955 | Input/Output: [(17 67 -84 15) -84]
Test Case: 956 | Input/Output: [(94 -12 72 -10) -12]
Test Case: 957 | Input/Output: [(-18 5 27 -15) -18]
Test Case: 958 | Input/Output: [(-2 -3 53 -67) -67]
Test Case: 959 | Input/Output: [(-75 -86 62 58) -86]
Test Case: 960 | Input/Output: [(55 30 71 12) 12]
Test Case: 961 | Input/Output: [(42 -2 -47 82) -47]
Test Case: 962 | Input/Output: [(-25 -100 51 82) -100]
Test Case: 963 | Input/Output: [(-19 -75 3 -77) -77]
Test Case: 964 | Input/Output: [(71 -26 85 67) -26]
Test Case: 965 | Input/Output: [(-72 -37 47 -57) -72]
Test Case: 966 | Input/Output: [(97 -57 -13 37) -57]
Test Case: 967 | Input/Output: [(-65 -24 -59 18) -65]
Test Case: 968 | Input/Output: [(-45 46 -97 16) -97]
Test Case: 969 | Input/Output: [(-28 13 40 20) -28]
Test Case: 970 | Input/Output: [(24 -22 -48 91) -48]
Test Case: 971 | Input/Output: [(-45 35 -32 -96) -96]
Test Case: 972 | Input/Output: [(75 35 81 -62) -62]
Test Case: 973 | Input/Output: [(-2 89 50 -45) -45]
Test Case: 974 | Input/Output: [(-87 -99 54 -43) -99]
Test Case: 975 | Input/Output: [(-30 56 -67 -35) -67]
Test Case: 976 | Input/Output: [(72 58 -13 -91) -91]
Test Case: 977 | Input/Output: [(75 -30 -58 38) -58]
Test Case: 978 | Input/Output: [(93 11 61 -96) -96]
Test Case: 979 | Input/Output: [(44 19 -93 -81) -93]
Test Case: 980 | Input/Output: [(60 -86 -63 59) -86]
Test Case: 981 | Input/Output: [(-51 -33 38 -64) -64]
Test Case: 982 | Input/Output: [(-86 0 24 -97) -97]
Test Case: 983 | Input/Output: [(40 91 -61 23) -61]
Test Case: 984 | Input/Output: [(-73 -6 29 15) -73]
Test Case: 985 | Input/Output: [(-73 -71 60 -68) -73]
Test Case: 986 | Input/Output: [(-52 -56 -50 57) -56]
Test Case: 987 | Input/Output: [(73 -59 -23 79) -59]
Test Case: 988 | Input/Output: [(-31 94 2 81) -31]
Test Case: 989 | Input/Output: [(77 93 29 -27) -27]
Test Case: 990 | Input/Output: [(-98 -35 85 42) -98]
Test Case: 991 | Input/Output: [(5 12 29 40) 5]
Test Case: 992 | Input/Output: [(71 -30 35 -96) -96]
Test Case: 993 | Input/Output: [(48 3 22 -39) -39]
Test Case: 994 | Input/Output: [(62 20 -41 -97) -97]
Test Case: 995 | Input/Output: [(22 28 -53 80) -53]
Test Case: 996 | Input/Output: [(-48 -59 -81 -50) -81]
Test Case: 997 | Input/Output: [(62 -26 57 -87) -87]
Test Case: 998 | Input/Output: [(13 51 -16 -52) -52]
Test Case: 999 | Input/Output: [(53 -61 78 88) -61]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 31 88 -43 57 99 68 12 -27 108 -85 3 -11 53 -72 -124 119
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-83 -83 51 -83] -83] [[75 75 75 -61] -61] [[16 -16 -16 -16] -16] [[25 25 25 -22] -22] [[19 19 47 19] 19] [[-9 -9 13 -9] -9] [[91 -64 91 91] -64] [[54 28 54 54] 28] [[-38 -38 -38 8] -38] [[-4 -4 -4 -27] -27] [(-73 -73 -73 -73) -73] [(-15 -15 -15 -15) -15] [(-25 -25 -25 -25) -25] [(48 48 48 48) 48] [(-41 -41 -41 -41) -41] [(95 22 62 26) 22] [(18 5 26 4) 4] [(63 30 57 21) 21] [(43 71 1 35) 1] [(58 18 85 38) 18] [(69 62 1 92) 1] [(31 40 55 51) 31] [(79 10 30 83) 10] [(37 64 51 80) 37] [(98 48 26 67) 26] [(16 97 82 76) 16] [(51 100 94 78) 51] [(94 100 91 19) 19] [(47 60 0 79) 0] [(12 100 73 37) 12] [(17 97 58 64) 17] [(88 0 8 63) 0] [(56 83 44 72) 44] [(54 16 45 97) 16] [(45 97 42 25) 25] [(-22 -60 -13 91) -60] [(-97 -15 79 -7) -97] [(85 -47 35 27) -47] [(19 72 79 44) 19] [(-63 0 44 14) -63] [(29 33 97 14) 14] [(47 21 76 72) 21] [(-90 56 58 32) -90] [(-43 48 -30 85) -43] [(-7 99 90 43) -7] [(98 43 -4 -41) -41] [(-60 -92 -84 85) -92] [(51 73 -2 61) -2] [(-59 83 -78 17) -78] [(88 24 40 -52) -52] [(-18 51 -62 -25) -62] [(-89 35 -87 84) -89] [(70 -4 54 -12) -12] [(72 -15 61 38) -15] [(-36 83 -40 71) -40] [(27 88 -4 92) -4] [(-89 35 -82 82) -89] [(-20 80 35 13) -20] [(-65 100 -52 13) -65] [(-96 64 -78 -90) -96] [(76 6 51 -99) -99] [(-90 57 -72 41) -90] [(-26 -26 -77 96) -77] [(-58 -21 64 -25) -58] [(83 24 -3 -36) -36] [(-17 -66 -23 70) -66] [(-90 -46 -60 63) -90] [(91 65 -56 -92) -92] [(39 -17 51 -40) -40] [(-50 51 32 -95) -95] [(-13 -100 -45 -57) -100] [(92 97 74 94) 74] [(87 77 -32 -45) -45] [(-45 27 -51 -79) -79] [(40 -2 -37 -15) -37] [(-71 -67 72 24) -71] [(-57 -15 -59 16) -59] [(-57 -63 -97 89) -97] [(13 56 -40 28) -40] [(3 -7 -98 -86) -98] [(91 3 7 -70) -70] [(-78 89 34 -41) -78] [(86 83 -58 -53) -58] [(27 90 35 16) 16] [(-3 -48 -24 40) -48] [(-3 -1 10 -38) -38] [(99 76 -81 45) -81] [(-5 -41 39 99) -41] [(67 33 -36 82) -36] [(-77 -79 77 72) -79] [(71 14 -72 26) -72] [(89 -82 -97 -26) -97] [(22 34 -33 -15) -33] [(52 9 71 83) 9] [(29 39 48 76) 29])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: 51                 
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 47                 
Correct output: -9                  | Program output: 13                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 62                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 85                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 55                 
Correct output: 10                  | Program output: 30                 
Correct output: 37                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 82                 
Correct output: 51                  | Program output: 94                 
Correct output: 19                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 73                 
Correct output: 17                  | Program output: 58                 
Correct output: 0                   | Program output: 8                  
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 45                 
Correct output: 25                  | Program output: 42                 
Correct output: -60                 | Program output: -13                
Correct output: -97                 | Program output: 79                 
Correct output: -47                 | Program output: 35                 
Correct output: 19                  | Program output: 79                 
Correct output: -63                 | Program output: 44                 
Correct output: 14                  | Program output: 97                 
Correct output: 21                  | Program output: 76                 
Correct output: -90                 | Program output: 58                 
Correct output: -43                 | Program output: -30                
Correct output: -7                  | Program output: 90                 
Correct output: -41                 | Program output: -4                 
Correct output: -92                 | Program output: -84                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -87                
Correct output: -12                 | Program output: 54                 
Correct output: -15                 | Program output: 61                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -82                
Correct output: -20                 | Program output: 35                 
Correct output: -65                 | Program output: -52                
Correct output: -96                 | Program output: -78                
Correct output: -99                 | Program output: 51                 
Correct output: -90                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: 64                 
Correct output: -36                 | Program output: -3                 
Correct output: -66                 | Program output: -23                
Correct output: -90                 | Program output: -60                
Correct output: -92                 | Program output: -56                
Correct output: -40                 | Program output: 51                 
Correct output: -95                 | Program output: 32                 
Correct output: -100                | Program output: -45                
Correct output: 74                  | Program output: 74                 
Correct output: -45                 | Program output: -32                
Correct output: -79                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 7                  
Correct output: -78                 | Program output: 34                 
Correct output: -58                 | Program output: -58                
Correct output: 16                  | Program output: 35                 
Correct output: -48                 | Program output: -24                
Correct output: -38                 | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: 9                   | Program output: 71                 
Correct output: 29                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_762} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_73} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_251} {:close 1, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction -20} {:close 1, :instruction integer_min} {:close 2, :instruction in1} {:close 3, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_113})
Lexicase best program: (boolean_or exec_if () (integer_shove exec_pop () exec_empty exec_shove (exec_while (integer_dup boolean_dup_times boolean_frominteger exec_empty boolean_flush) integer_rot integer_pop boolean_dup_items exec_eq) print_boolean) exec_do*count () integer_max exec_yankdup integer_empty exec_do*while (exec_swap (integer_yank tag_exec_762 (boolean_yank integer_mult integer_swap boolean_flush integer_eq print_integer boolean_rot boolean_dup_items) integer_yankdup in3 integer_shove boolean_flush exec_y (boolean_or tagged_73 boolean_rot integer_yank exec_dup_items exec_rot (integer_gte exec_k () (exec_dup (boolean_not integer_yankdup integer_yank) exec_k (integer_eq in2 exec_s (tagged_251 in4) (integer_flush exec_empty boolean_dup_items exec_if (integer_swap boolean_dup exec_do*while (integer_flush) boolean_and exec_s_when_autoconstructing () (integer_rot exec_shove (integer_empty) exec_stackdepth exec_rot (-20 integer_min) (in1) () boolean_eq) ()) (integer_empty print_boolean integer_div exec_do*times (exec_noop integer_lte exec_dup_times (exec_do*while (in3 boolean_empty)) integer_dup_times integer_min boolean_yankdup integer_lt exec_dup_items integer_dup_times) print_newline boolean_rot tag_boolean_113)) ()) ())) () ())) ()))
Lexicase best errors: [0 0 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 130
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_762} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_73} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_251} {:close 1, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction -20} {:close 1, :instruction integer_min} {:close 2, :instruction in1} {:close 3, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_113})
Zero cases best program: (boolean_or exec_if () (integer_shove exec_pop () exec_empty exec_shove (exec_while (integer_dup boolean_dup_times boolean_frominteger exec_empty boolean_flush) integer_rot integer_pop boolean_dup_items exec_eq) print_boolean) exec_do*count () integer_max exec_yankdup integer_empty exec_do*while (exec_swap (integer_yank tag_exec_762 (boolean_yank integer_mult integer_swap boolean_flush integer_eq print_integer boolean_rot boolean_dup_items) integer_yankdup in3 integer_shove boolean_flush exec_y (boolean_or tagged_73 boolean_rot integer_yank exec_dup_items exec_rot (integer_gte exec_k () (exec_dup (boolean_not integer_yankdup integer_yank) exec_k (integer_eq in2 exec_s (tagged_251 in4) (integer_flush exec_empty boolean_dup_items exec_if (integer_swap boolean_dup exec_do*while (integer_flush) boolean_and exec_s_when_autoconstructing () (integer_rot exec_shove (integer_empty) exec_stackdepth exec_rot (-20 integer_min) (in1) () boolean_eq) ()) (integer_empty print_boolean integer_div exec_do*times (exec_noop integer_lte exec_dup_times (exec_do*while (in3 boolean_empty)) integer_dup_times integer_min boolean_yankdup integer_lt exec_dup_items integer_dup_times) print_newline boolean_rot tag_boolean_113)) ()) ())) () ())) ()))
Zero cases best errors: [0 0 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 130
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 4 2 4 4 2 3 4 3)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (3 3 4 2 4 4 2 3 4 3)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (integer_div exec_do*range (boolean_pop exec_dup_items exec_yankdup integer_add exec_if () (exec_do*range (boolean_yankdup exec_do*while (integer_pop integer_dup_times in3 print_integer exec_rot (exec_while (exec_noop boolean_yank print_newline boolean_rot) exec_dup () print_integer exec_do*count (boolean_pop exec_when (integer_rot boolean_flush) exec_s_when_autoconstructing () () ())) () ())))))
Errors: [0 0 0 1 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 44
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 9.968
Median total errors in population: 10
Error averages by case: (0.997 0.997 0.996 0.998 0.996 0.996 0.998 0.997 0.996 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.318
Average program size in population (points): 69.416
Average percent parens in population: 0.283
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 481818
--- Timings ---
Current time: 1559314337848 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.4%
Reproduction:         0.8 seconds, 30.0%
Fitness Testing:      1.7 seconds, 65.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: 16                 
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 95                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 63                 
Correct output: 1                   | Program output: 43                 
Correct output: 18                  | Program output: 58                 
Correct output: 1                   | Program output: 69                 
Correct output: 31                  | Program output: 31                 
Correct output: 10                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 26                  | Program output: 98                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 51                 
Correct output: 19                  | Program output: 94                 
Correct output: 0                   | Program output: 47                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 88                 
Correct output: 44                  | Program output: 56                 
Correct output: 16                  | Program output: 54                 
Correct output: 25                  | Program output: 45                 
Correct output: -60                 | Program output: -22                
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -63                 | Program output: -63                
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: -43                
Correct output: -7                  | Program output: -7                 
Correct output: -41                 | Program output: 98                 
Correct output: -92                 | Program output: -60                
Correct output: -2                  | Program output: 51                 
Correct output: -78                 | Program output: -59                
Correct output: -52                 | Program output: 88                 
Correct output: -62                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 70                 
Correct output: -15                 | Program output: 72                 
Correct output: -40                 | Program output: -36                
Correct output: -4                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 76                 
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: 83                 
Correct output: -66                 | Program output: -17                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: 91                 
Correct output: -40                 | Program output: 39                 
Correct output: -95                 | Program output: -50                
Correct output: -100                | Program output: -13                
Correct output: 74                  | Program output: 92                 
Correct output: -45                 | Program output: 87                 
Correct output: -79                 | Program output: -45                
Correct output: -37                 | Program output: 40                 
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -57                
Correct output: -97                 | Program output: -57                
Correct output: -40                 | Program output: 13                 
Correct output: -98                 | Program output: 3                  
Correct output: -70                 | Program output: 91                 
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: 86                 
Correct output: 16                  | Program output: 27                 
Correct output: -48                 | Program output: -3                 
Correct output: -38                 | Program output: -3                 
Correct output: -81                 | Program output: 99                 
Correct output: -41                 | Program output: -5                 
Correct output: -36                 | Program output: 67                 
Correct output: -79                 | Program output: -77                
Correct output: -72                 | Program output: 71                 
Correct output: -97                 | Program output: 89                 
Correct output: -33                 | Program output: 22                 
Correct output: 9                   | Program output: 52                 
Correct output: 29                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_625} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq})
Lexicase best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod in1 print_integer boolean_eq) (exec_shove () boolean_frominteger) exec_k_when_autoconstructing (exec_y (integer_empty exec_do*range (exec_yankdup exec_do*times (exec_dup (exec_empty integer_swap boolean_pop) in3 boolean_not exec_empty) integer_lt) integer_min) exec_yank exec_y_when_autoconstructing (boolean_eq integer_gte) integer_pop boolean_flush) (exec_noop integer_empty integer_div) integer_rot exec_k_when_autoconstructing (boolean_frominteger integer_dup) (exec_if (exec_swap (exec_while () boolean_or in4 integer_eq integer_flush tag_boolean_625 exec_k () (boolean_flush exec_y_when_autoconstructing (integer_dup_items boolean_empty)) exec_do*range (boolean_xor boolean_yank integer_flush boolean_dup boolean_dup_items exec_dup_times (exec_eq))) ()) ())))
Lexicase best errors: [1 0 1 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 92
Percent parens: 0.272
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_625} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq})
Zero cases best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod in1 print_integer boolean_eq) (exec_shove () boolean_frominteger) exec_k_when_autoconstructing (exec_y (integer_empty exec_do*range (exec_yankdup exec_do*times (exec_dup (exec_empty integer_swap boolean_pop) in3 boolean_not exec_empty) integer_lt) integer_min) exec_yank exec_y_when_autoconstructing (boolean_eq integer_gte) integer_pop boolean_flush) (exec_noop integer_empty integer_div) integer_rot exec_k_when_autoconstructing (boolean_frominteger integer_dup) (exec_if (exec_swap (exec_while () boolean_or in4 integer_eq integer_flush tag_boolean_625 exec_k () (boolean_flush exec_y_when_autoconstructing (integer_dup_items boolean_empty)) exec_do*range (boolean_xor boolean_yank integer_flush boolean_dup boolean_dup_items exec_dup_times (exec_eq))) ()) ())))
Zero cases best errors: [1 0 1 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 92
Percent parens: 0.272
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 182 176 182 3 1000 182 1000 418 778)
Population mean number of elite cases: 4.92
Count of perfect (error zero) individuals by case: (0 182 176 182 3 0 182 0 418 778)
Population mean number of perfect (error zero) cases: 1.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_625} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 56})
Best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod in1 print_integer boolean_eq) (exec_shove () boolean_frominteger) exec_k_when_autoconstructing (exec_y (integer_empty exec_do*range (exec_yankdup exec_do*times (exec_dup (exec_empty integer_swap boolean_pop) in3 boolean_not exec_empty integer_lt) integer_min) exec_yank exec_y_when_autoconstructing (boolean_eq integer_gte) integer_pop boolean_flush)) (exec_noop integer_empty) integer_div) integer_rot exec_k_when_autoconstructing (boolean_frominteger integer_dup) (exec_if (exec_swap (exec_while () boolean_or in4 integer_eq integer_flush tag_boolean_625 exec_k () (boolean_flush exec_y_when_autoconstructing (integer_dup_items boolean_empty)) exec_do*range (boolean_xor boolean_yank integer_flush boolean_dup boolean_dup_items exec_dup_times (56))) ()) ()))
Errors: [1 0 1 0 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 67
Size: 92
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 8.079
Median total errors in population: 8
Error averages by case: (1.0 0.818 0.824 0.818 0.997 1.0 0.818 1.0 0.582 0.222)
Error minima by case: (1 0 0 0 0 1 0 1 0 0)
Average genome size in population (length): 46.16
Average program size in population (points): 64.359
Average percent parens in population: 0.282
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.488
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 189
Genome diversity (% unique genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 189
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1109143
--- Timings ---
Current time: 1559314341105 milliseconds
Total Time:           5.4 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         2.4 seconds, 43.9%
Fitness Testing:      2.4 seconds, 45.6%
Report:               0.4 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: 16                 
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 95                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 63                 
Correct output: 1                   | Program output: 43                 
Correct output: 18                  | Program output: 58                 
Correct output: 1                   | Program output: 69                 
Correct output: 31                  | Program output: 31                 
Correct output: 10                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 26                  | Program output: 98                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 51                 
Correct output: 19                  | Program output: 94                 
Correct output: 0                   | Program output: 47                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 88                 
Correct output: 44                  | Program output: 56                 
Correct output: 16                  | Program output: 54                 
Correct output: 25                  | Program output: 45                 
Correct output: -60                 | Program output: -22                
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -63                 | Program output: -63                
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: -43                
Correct output: -7                  | Program output: -7                 
Correct output: -41                 | Program output: 98                 
Correct output: -92                 | Program output: -60                
Correct output: -2                  | Program output: 51                 
Correct output: -78                 | Program output: -59                
Correct output: -52                 | Program output: 88                 
Correct output: -62                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 70                 
Correct output: -15                 | Program output: 72                 
Correct output: -40                 | Program output: -36                
Correct output: -4                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 76                 
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: 83                 
Correct output: -66                 | Program output: -17                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: 91                 
Correct output: -40                 | Program output: 39                 
Correct output: -95                 | Program output: -50                
Correct output: -100                | Program output: -13                
Correct output: 74                  | Program output: 92                 
Correct output: -45                 | Program output: 87                 
Correct output: -79                 | Program output: -45                
Correct output: -37                 | Program output: 40                 
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -57                
Correct output: -97                 | Program output: -57                
Correct output: -40                 | Program output: 13                 
Correct output: -98                 | Program output: 3                  
Correct output: -70                 | Program output: 91                 
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: 86                 
Correct output: 16                  | Program output: 27                 
Correct output: -48                 | Program output: -3                 
Correct output: -38                 | Program output: -3                 
Correct output: -81                 | Program output: 99                 
Correct output: -41                 | Program output: -5                 
Correct output: -36                 | Program output: 67                 
Correct output: -79                 | Program output: -77                
Correct output: -72                 | Program output: 71                 
Correct output: -97                 | Program output: 89                 
Correct output: -33                 | Program output: 22                 
Correct output: 9                   | Program output: 52                 
Correct output: 29                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_625} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 56})
Lexicase best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod in1 print_integer boolean_eq) (exec_shove () boolean_frominteger) exec_k_when_autoconstructing (exec_y (integer_empty exec_do*range (exec_yankdup exec_do*times (exec_dup (exec_empty integer_swap boolean_pop) in3 boolean_not exec_empty) integer_lt) integer_min) exec_yank exec_y_when_autoconstructing (boolean_eq integer_gte) integer_pop boolean_flush) (exec_noop integer_empty integer_div) integer_rot exec_k_when_autoconstructing (boolean_frominteger integer_dup) (exec_if (exec_swap (exec_while () boolean_or in4 integer_eq integer_flush tag_boolean_625 exec_k () (boolean_flush exec_y_when_autoconstructing (integer_dup_items boolean_empty)) exec_do*range (boolean_xor boolean_yank integer_flush boolean_dup boolean_dup_items exec_dup_times (56))) ()) ())))
Lexicase best errors: [1 0 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 92
Percent parens: 0.272
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_boolean_625} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 56})
Zero cases best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod in1 print_integer boolean_eq) (exec_shove () boolean_frominteger) exec_k_when_autoconstructing (exec_y (integer_empty exec_do*range (exec_yankdup exec_do*times (exec_dup (exec_empty integer_swap boolean_pop) in3 boolean_not exec_empty) integer_lt) integer_min) exec_yank exec_y_when_autoconstructing (boolean_eq integer_gte) integer_pop boolean_flush) (exec_noop integer_empty integer_div) integer_rot exec_k_when_autoconstructing (boolean_frominteger integer_dup) (exec_if (exec_swap (exec_while () boolean_or in4 integer_eq integer_flush tag_boolean_625 exec_k () (boolean_flush exec_y_when_autoconstructing (integer_dup_items boolean_empty)) exec_do*range (boolean_xor boolean_yank integer_flush boolean_dup boolean_dup_items exec_dup_times (56))) ()) ())))
Zero cases best errors: [1 0 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 92
Percent parens: 0.272
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 453 740 129 454 286 740 454 259 454)
Population mean number of elite cases: 3.97
Count of perfect (error zero) individuals by case: (1 453 740 129 454 286 740 454 259 454)
Population mean number of perfect (error zero) cases: 3.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Best program: (integer_div integer_fromboolean in1 print_integer)
Errors: [1 0 0 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 4
Size: 5
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.03
Median total errors in population: 6
Error averages by case: (0.999 0.547 0.26 0.871 0.546 0.714 0.26 0.546 0.741 0.546)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.459
Average program size in population (points): 47.52
Average percent parens in population: 0.261
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0315
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 209
Genome diversity (% unique genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 213
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1642938
--- Timings ---
Current time: 1559314343873 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.4 seconds, 49.7%
Fitness Testing:      3.0 seconds, 33.4%
Report:               1.4 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: 51                 
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 47                 
Correct output: -9                  | Program output: 13                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 62                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 85                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 55                 
Correct output: 10                  | Program output: 30                 
Correct output: 37                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 82                 
Correct output: 51                  | Program output: 94                 
Correct output: 19                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 73                 
Correct output: 17                  | Program output: 58                 
Correct output: 0                   | Program output: 8                  
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 45                 
Correct output: 25                  | Program output: 42                 
Correct output: -60                 | Program output: -13                
Correct output: -97                 | Program output: 79                 
Correct output: -47                 | Program output: 35                 
Correct output: 19                  | Program output: 79                 
Correct output: -63                 | Program output: 44                 
Correct output: 14                  | Program output: 97                 
Correct output: 21                  | Program output: 76                 
Correct output: -90                 | Program output: 58                 
Correct output: -43                 | Program output: -30                
Correct output: -7                  | Program output: 90                 
Correct output: -41                 | Program output: -4                 
Correct output: -92                 | Program output: -84                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -87                
Correct output: -12                 | Program output: 54                 
Correct output: -15                 | Program output: 61                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -82                
Correct output: -20                 | Program output: 35                 
Correct output: -65                 | Program output: -52                
Correct output: -96                 | Program output: -78                
Correct output: -99                 | Program output: 51                 
Correct output: -90                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: 64                 
Correct output: -36                 | Program output: -3                 
Correct output: -66                 | Program output: -23                
Correct output: -90                 | Program output: -60                
Correct output: -92                 | Program output: -56                
Correct output: -40                 | Program output: 51                 
Correct output: -95                 | Program output: 32                 
Correct output: -100                | Program output: -45                
Correct output: 74                  | Program output: 74                 
Correct output: -45                 | Program output: -32                
Correct output: -79                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 7                  
Correct output: -78                 | Program output: 34                 
Correct output: -58                 | Program output: -58                
Correct output: 16                  | Program output: 35                 
Correct output: -48                 | Program output: -24                
Correct output: -38                 | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: 9                   | Program output: 71                 
Correct output: 29                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_618} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap})
Lexicase best program: (integer_div exec_do*range (boolean_pop exec_dup_items exec_yankdup integer_add exec_if () (exec_do*range (boolean_yankdup exec_do*while (integer_pop integer_dup_times in3 boolean_swap boolean_invert_first_then_and boolean_and boolean_empty exec_k (print_integer boolean_swap exec_pop () integer_stackdepth integer_inc) (integer_fromboolean) exec_noop exec_when (exec_flush) integer_empty) integer_lte) print_newline integer_max exec_stackdepth exec_do*range (integer_mult boolean_yank print_boolean exec_eq integer_dup exec_k_when_autoconstructing (integer_dup tag_integer_618 boolean_pop integer_yank integer_swap integer_swap) ()))))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 58
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_618} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap})
Zero cases best program: (integer_div exec_do*range (boolean_pop exec_dup_items exec_yankdup integer_add exec_if () (exec_do*range (boolean_yankdup exec_do*while (integer_pop integer_dup_times in3 boolean_swap boolean_invert_first_then_and boolean_and boolean_empty exec_k (print_integer boolean_swap exec_pop () integer_stackdepth integer_inc) (integer_fromboolean) exec_noop exec_when (exec_flush) integer_empty) integer_lte) print_newline integer_max exec_stackdepth exec_do*range (integer_mult boolean_yank print_boolean exec_eq integer_dup exec_k_when_autoconstructing (integer_dup tag_integer_618 boolean_pop integer_yank integer_swap integer_swap) ()))))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 58
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (657 166 166 166 500 823 166 166 823 823)
Population mean number of elite cases: 4.46
Count of perfect (error zero) individuals by case: (657 166 166 166 500 823 166 166 823 823)
Population mean number of perfect (error zero) cases: 4.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (integer_div exec_do*range (boolean_pop exec_dup_items exec_yankdup integer_add exec_yankdup integer_add exec_if () (exec_do*range (boolean_yankdup exec_do*while (integer_pop integer_dup_times in3 print_integer exec_rot (exec_while (exec_noop boolean_yank print_newline boolean_rot) exec_dup () print_integer exec_do*count (boolean_pop exec_when (integer_rot boolean_flush) exec_s_when_autoconstructing () () ())) () ())))))
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 30
Size: 46
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 5.544
Median total errors in population: 5
Error averages by case: (0.343 0.834 0.834 0.834 0.5 0.177 0.834 0.834 0.177 0.177)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.963
Average program size in population (points): 46.638
Average percent parens in population: 0.258
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.50975
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 229
Genome diversity (% unique genomes):	 0.565
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 236
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2183481
--- Timings ---
Current time: 1559314346860 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.7 seconds, 56.6%
Fitness Testing:      3.5 seconds, 29.3%
Report:               1.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: 16                 
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 95                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 63                 
Correct output: 1                   | Program output: 43                 
Correct output: 18                  | Program output: 58                 
Correct output: 1                   | Program output: 69                 
Correct output: 31                  | Program output: 31                 
Correct output: 10                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 26                  | Program output: 98                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 51                 
Correct output: 19                  | Program output: 94                 
Correct output: 0                   | Program output: 47                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 88                 
Correct output: 44                  | Program output: 56                 
Correct output: 16                  | Program output: 54                 
Correct output: 25                  | Program output: 45                 
Correct output: -60                 | Program output: -22                
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -63                 | Program output: -63                
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: -43                
Correct output: -7                  | Program output: -7                 
Correct output: -41                 | Program output: 98                 
Correct output: -92                 | Program output: -60                
Correct output: -2                  | Program output: 51                 
Correct output: -78                 | Program output: -59                
Correct output: -52                 | Program output: 88                 
Correct output: -62                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 70                 
Correct output: -15                 | Program output: 72                 
Correct output: -40                 | Program output: -36                
Correct output: -4                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 76                 
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: 83                 
Correct output: -66                 | Program output: -17                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: 91                 
Correct output: -40                 | Program output: 39                 
Correct output: -95                 | Program output: -50                
Correct output: -100                | Program output: -13                
Correct output: 74                  | Program output: 92                 
Correct output: -45                 | Program output: 87                 
Correct output: -79                 | Program output: -45                
Correct output: -37                 | Program output: 40                 
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -57                
Correct output: -97                 | Program output: -57                
Correct output: -40                 | Program output: 13                 
Correct output: -98                 | Program output: 3                  
Correct output: -70                 | Program output: 91                 
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: 86                 
Correct output: 16                  | Program output: 27                 
Correct output: -48                 | Program output: -3                 
Correct output: -38                 | Program output: -3                 
Correct output: -81                 | Program output: 99                 
Correct output: -41                 | Program output: -5                 
Correct output: -36                 | Program output: 67                 
Correct output: -79                 | Program output: -77                
Correct output: -72                 | Program output: 71                 
Correct output: -97                 | Program output: 89                 
Correct output: -33                 | Program output: 22                 
Correct output: 9                   | Program output: 52                 
Correct output: 29                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Lexicase best program: (integer_div integer_fromboolean in1 print_integer)
Lexicase best errors: [1 0 1 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 5
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Zero cases best program: (integer_div integer_fromboolean in1 print_integer)
Zero cases best errors: [1 0 1 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 5
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (631 260 1000 895 617 260 1000 260 1000 1000)
Population mean number of elite cases: 6.92
Count of perfect (error zero) individuals by case: (631 260 0 895 617 260 0 260 0 0)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Best program: (integer_div integer_fromboolean in1 print_integer)
Errors: [1 0 1 0 1 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 4
Size: 5
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.077
Median total errors in population: 7
Error averages by case: (0.369 0.74 1.0 0.105 0.383 0.74 1.0 0.74 1.0 1.0)
Error minima by case: (0 0 1 0 0 0 1 0 1 1)
Average genome size in population (length): 34.787
Average program size in population (points): 50.481
Average percent parens in population: 0.307
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.067
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 145
Genome diversity (% unique genomes):	 0.537
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2723073
--- Timings ---
Current time: 1559314349874 milliseconds
Total Time:          14.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         9.0 seconds, 60.6%
Fitness Testing:      4.0 seconds, 26.6%
Report:               1.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: 51                 
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 47                 
Correct output: -9                  | Program output: 13                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 62                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 85                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 55                 
Correct output: 10                  | Program output: 30                 
Correct output: 37                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 82                 
Correct output: 51                  | Program output: 94                 
Correct output: 19                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 73                 
Correct output: 17                  | Program output: 58                 
Correct output: 0                   | Program output: 8                  
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 45                 
Correct output: 25                  | Program output: 42                 
Correct output: -60                 | Program output: -13                
Correct output: -97                 | Program output: 79                 
Correct output: -47                 | Program output: 35                 
Correct output: 19                  | Program output: 79                 
Correct output: -63                 | Program output: 44                 
Correct output: 14                  | Program output: 97                 
Correct output: 21                  | Program output: 76                 
Correct output: -90                 | Program output: 58                 
Correct output: -43                 | Program output: -30                
Correct output: -7                  | Program output: 90                 
Correct output: -41                 | Program output: -4                 
Correct output: -92                 | Program output: -84                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -87                
Correct output: -12                 | Program output: 54                 
Correct output: -15                 | Program output: 61                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -82                
Correct output: -20                 | Program output: 35                 
Correct output: -65                 | Program output: -52                
Correct output: -96                 | Program output: -78                
Correct output: -99                 | Program output: 51                 
Correct output: -90                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: 64                 
Correct output: -36                 | Program output: -3                 
Correct output: -66                 | Program output: -23                
Correct output: -90                 | Program output: -60                
Correct output: -92                 | Program output: -56                
Correct output: -40                 | Program output: 51                 
Correct output: -95                 | Program output: 32                 
Correct output: -100                | Program output: -45                
Correct output: 74                  | Program output: 74                 
Correct output: -45                 | Program output: -32                
Correct output: -79                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 7                  
Correct output: -78                 | Program output: 34                 
Correct output: -58                 | Program output: -58                
Correct output: 16                  | Program output: 35                 
Correct output: -48                 | Program output: -24                
Correct output: -38                 | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: 9                   | Program output: 71                 
Correct output: 29                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (integer_div exec_do*range (boolean_pop exec_dup_items exec_yankdup integer_add exec_if () (exec_do*range (boolean_yankdup exec_do*while (integer_pop integer_dup_times exec_yankdup integer_add exec_if () (exec_do*range (exec_dup_items exec_yankdup integer_add exec_if () (exec_do*range (boolean_yankdup exec_do*while (integer_pop integer_dup_times in3 print_integer exec_rot (exec_while (exec_noop boolean_yank print_newline boolean_rot) exec_dup () print_integer exec_do*count (boolean_pop exec_when (integer_rot exec_dup () print_integer exec_do*count (boolean_pop exec_when (integer_rot boolean_flush) exec_s_when_autoconstructing () () ())))) () ()))))))))))
Lexicase best errors: [1 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 73
Percent parens: 0.356
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (integer_div exec_do*range (boolean_pop exec_dup_items exec_yankdup integer_add exec_if () (exec_do*range (boolean_yankdup exec_do*while (integer_pop integer_dup_times exec_yankdup integer_add exec_if () (exec_do*range (exec_dup_items exec_yankdup integer_add exec_if () (exec_do*range (boolean_yankdup exec_do*while (integer_pop integer_dup_times in3 print_integer exec_rot (exec_while (exec_noop boolean_yank print_newline boolean_rot) exec_dup () print_integer exec_do*count (boolean_pop exec_when (integer_rot exec_dup () print_integer exec_do*count (boolean_pop exec_when (integer_rot boolean_flush) exec_s_when_autoconstructing () () ())))) () ()))))))))))
Zero cases best errors: [1 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 73
Percent parens: 0.356
--- Lexicase Population Statistics ---
Count of elite individuals by case: (560 356 560 923 356 357 356 356 356 1000)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (560 356 560 923 356 357 356 356 356 0)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (integer_div exec_do*range (boolean_pop exec_dup_items exec_yankdup integer_add exec_if () (exec_do*range (boolean_yankdup exec_do*while (integer_pop integer_dup_times in3 print_integer exec_rot (exec_while (exec_noop boolean_yank print_newline boolean_rot) exec_dup () print_integer exec_do*count (boolean_pop exec_when (integer_rot boolean_flush) exec_s_when_autoconstructing () () ())) () ())))))
Errors: [1 0 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 28
Size: 44
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 5.82
Median total errors in population: 7
Error averages by case: (0.44 0.644 0.44 0.077 0.644 0.643 0.644 0.644 0.644 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 27.642
Average program size in population (points): 39.508
Average percent parens in population: 0.278
Minimum age in population: 5.0
Maximum age in population: 9.5625
Average age in population: 7.5198125
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 257
Genome diversity (% unique genomes):	 0.507
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 272
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3189396
--- Timings ---
Current time: 1559314352702 milliseconds
Total Time:          17.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        11.2 seconds, 63.5%
Fitness Testing:      4.4 seconds, 24.8%
Report:               2.0 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: 16                 
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 95                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 63                 
Correct output: 1                   | Program output: 43                 
Correct output: 18                  | Program output: 58                 
Correct output: 1                   | Program output: 69                 
Correct output: 31                  | Program output: 31                 
Correct output: 10                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 26                  | Program output: 98                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 51                 
Correct output: 19                  | Program output: 94                 
Correct output: 0                   | Program output: 47                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 88                 
Correct output: 44                  | Program output: 56                 
Correct output: 16                  | Program output: 54                 
Correct output: 25                  | Program output: 45                 
Correct output: -60                 | Program output: -22                
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -63                 | Program output: -63                
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: -43                
Correct output: -7                  | Program output: -7                 
Correct output: -41                 | Program output: 98                 
Correct output: -92                 | Program output: -60                
Correct output: -2                  | Program output: 51                 
Correct output: -78                 | Program output: -59                
Correct output: -52                 | Program output: 88                 
Correct output: -62                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 70                 
Correct output: -15                 | Program output: 72                 
Correct output: -40                 | Program output: -36                
Correct output: -4                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 76                 
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: 83                 
Correct output: -66                 | Program output: -17                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: 91                 
Correct output: -40                 | Program output: 39                 
Correct output: -95                 | Program output: -50                
Correct output: -100                | Program output: -13                
Correct output: 74                  | Program output: 92                 
Correct output: -45                 | Program output: 87                 
Correct output: -79                 | Program output: -45                
Correct output: -37                 | Program output: 40                 
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -57                
Correct output: -97                 | Program output: -57                
Correct output: -40                 | Program output: 13                 
Correct output: -98                 | Program output: 3                  
Correct output: -70                 | Program output: 91                 
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: 86                 
Correct output: 16                  | Program output: 27                 
Correct output: -48                 | Program output: -3                 
Correct output: -38                 | Program output: -3                 
Correct output: -81                 | Program output: 99                 
Correct output: -41                 | Program output: -5                 
Correct output: -36                 | Program output: 67                 
Correct output: -79                 | Program output: -77                
Correct output: -72                 | Program output: 71                 
Correct output: -97                 | Program output: 89                 
Correct output: -33                 | Program output: 22                 
Correct output: 9                   | Program output: 52                 
Correct output: 29                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (integer_div exec_do*range (boolean_pop exec_dup_items exec_yankdup integer_add exec_if () (exec_do*range (boolean_yankdup exec_do*while (integer_pop integer_dup_times in3 print_integer exec_rot (exec_while (exec_noop boolean_yank print_newline boolean_rot) exec_dup () print_integer exec_do*count (boolean_pop exec_when (integer_rot boolean_flush) exec_s_when_autoconstructing () () ())) () ())))))
Lexicase best errors: [1 0 1 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 44
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (integer_div exec_do*range (boolean_pop exec_dup_items exec_yankdup integer_add exec_if () (exec_do*range (boolean_yankdup exec_do*while (integer_pop integer_dup_times in3 print_integer exec_rot (exec_while (exec_noop boolean_yank print_newline boolean_rot) exec_dup () print_integer exec_do*count (boolean_pop exec_when (integer_rot boolean_flush) exec_s_when_autoconstructing () () ())) () ())))))
Zero cases best errors: [1 0 1 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 44
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 684 225 1000 225 1000 1000 1000 683 910)
Population mean number of elite cases: 7.73
Count of perfect (error zero) individuals by case: (0 684 225 0 225 0 0 0 683 910)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Best program: (integer_div integer_fromboolean in1 print_integer)
Errors: [1 1 0 1 0 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 4
Size: 5
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.273
Median total errors in population: 7
Error averages by case: (1.0 0.316 0.775 1.0 0.775 1.0 1.0 1.0 0.317 0.09)
Error minima by case: (1 0 0 1 0 1 1 1 0 0)
Average genome size in population (length): 30.821
Average program size in population (points): 45.478
Average percent parens in population: 0.315
Minimum age in population: 6.5
Maximum age in population: 11.0
Average age in population: 9.00465625
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3612338
--- Timings ---
Current time: 1559314355010 milliseconds
Total Time:          20.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        13.0 seconds, 64.7%
Fitness Testing:      4.8 seconds, 23.8%
Report:               2.2 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: 16                 
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 95                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 63                 
Correct output: 1                   | Program output: 43                 
Correct output: 18                  | Program output: 58                 
Correct output: 1                   | Program output: 69                 
Correct output: 31                  | Program output: 31                 
Correct output: 10                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 26                  | Program output: 98                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 51                 
Correct output: 19                  | Program output: 94                 
Correct output: 0                   | Program output: 47                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 88                 
Correct output: 44                  | Program output: 56                 
Correct output: 16                  | Program output: 54                 
Correct output: 25                  | Program output: 45                 
Correct output: -60                 | Program output: -22                
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -63                 | Program output: -63                
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: -43                
Correct output: -7                  | Program output: -7                 
Correct output: -41                 | Program output: 98                 
Correct output: -92                 | Program output: -60                
Correct output: -2                  | Program output: 51                 
Correct output: -78                 | Program output: -59                
Correct output: -52                 | Program output: 88                 
Correct output: -62                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 70                 
Correct output: -15                 | Program output: 72                 
Correct output: -40                 | Program output: -36                
Correct output: -4                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 76                 
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: 83                 
Correct output: -66                 | Program output: -17                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: 91                 
Correct output: -40                 | Program output: 39                 
Correct output: -95                 | Program output: -50                
Correct output: -100                | Program output: -13                
Correct output: 74                  | Program output: 92                 
Correct output: -45                 | Program output: 87                 
Correct output: -79                 | Program output: -45                
Correct output: -37                 | Program output: 40                 
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -57                
Correct output: -97                 | Program output: -57                
Correct output: -40                 | Program output: 13                 
Correct output: -98                 | Program output: 3                  
Correct output: -70                 | Program output: 91                 
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: 86                 
Correct output: 16                  | Program output: 27                 
Correct output: -48                 | Program output: -3                 
Correct output: -38                 | Program output: -3                 
Correct output: -81                 | Program output: 99                 
Correct output: -41                 | Program output: -5                 
Correct output: -36                 | Program output: 67                 
Correct output: -79                 | Program output: -77                
Correct output: -72                 | Program output: 71                 
Correct output: -97                 | Program output: 89                 
Correct output: -33                 | Program output: 22                 
Correct output: 9                   | Program output: 52                 
Correct output: 29                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Lexicase best program: (integer_div boolean_not in1 print_integer)
Lexicase best errors: [0 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 5
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Zero cases best program: (integer_div boolean_not in1 print_integer)
Zero cases best errors: [0 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 5
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (465 925 1000 465 925 465 1000 459 459 465)
Population mean number of elite cases: 6.63
Count of perfect (error zero) individuals by case: (465 925 0 465 925 465 0 459 459 465)
Population mean number of perfect (error zero) cases: 4.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Best program: (integer_div integer_fromboolean in1 print_integer)
Errors: [0 0 1 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 4
Size: 5
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.372
Median total errors in population: 6
Error averages by case: (0.535 0.075 1.0 0.535 0.075 0.535 1.0 0.541 0.541 0.535)
Error minima by case: (0 0 1 0 0 0 1 0 0 0)
Average genome size in population (length): 25.864
Average program size in population (points): 37.619
Average percent parens in population: 0.292
Minimum age in population: 7.5
Maximum age in population: 12.4375
Average age in population: 10.480296875
Median age in population: 10.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 188
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4010276
--- Timings ---
Current time: 1559314357379 milliseconds
Total Time:          22.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.8 seconds, 66.1%
Fitness Testing:      5.1 seconds, 22.9%
Report:               2.3 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: -22                
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 35                 
Correct output: 18                  | Program output: 38                 
Correct output: 1                   | Program output: 92                 
Correct output: 31                  | Program output: 51                 
Correct output: 10                  | Program output: 83                 
Correct output: 37                  | Program output: 80                 
Correct output: 26                  | Program output: 67                 
Correct output: 16                  | Program output: 76                 
Correct output: 51                  | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 79                 
Correct output: 12                  | Program output: 37                 
Correct output: 17                  | Program output: 64                 
Correct output: 0                   | Program output: 63                 
Correct output: 44                  | Program output: 72                 
Correct output: 16                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: 91                 
Correct output: -97                 | Program output: -7                 
Correct output: -47                 | Program output: 27                 
Correct output: 19                  | Program output: 44                 
Correct output: -63                 | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 72                 
Correct output: -90                 | Program output: 32                 
Correct output: -43                 | Program output: 85                 
Correct output: -7                  | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: 85                 
Correct output: -2                  | Program output: 61                 
Correct output: -78                 | Program output: 17                 
Correct output: -52                 | Program output: -52                
Correct output: -62                 | Program output: -25                
Correct output: -89                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -15                 | Program output: 38                 
Correct output: -40                 | Program output: 71                 
Correct output: -4                  | Program output: 92                 
Correct output: -89                 | Program output: 82                 
Correct output: -20                 | Program output: 13                 
Correct output: -65                 | Program output: 13                 
Correct output: -96                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: 41                 
Correct output: -77                 | Program output: 96                 
Correct output: -58                 | Program output: -25                
Correct output: -36                 | Program output: -36                
Correct output: -66                 | Program output: 70                 
Correct output: -90                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -57                
Correct output: 74                  | Program output: 94                 
Correct output: -45                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -15                
Correct output: -71                 | Program output: 24                 
Correct output: -59                 | Program output: 16                 
Correct output: -97                 | Program output: 89                 
Correct output: -40                 | Program output: 28                 
Correct output: -98                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -78                 | Program output: -41                
Correct output: -58                 | Program output: -53                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 40                 
Correct output: -38                 | Program output: -38                
Correct output: -81                 | Program output: 45                 
Correct output: -41                 | Program output: 99                 
Correct output: -36                 | Program output: 82                 
Correct output: -79                 | Program output: 72                 
Correct output: -72                 | Program output: 26                 
Correct output: -97                 | Program output: -26                
Correct output: -33                 | Program output: -15                
Correct output: 9                   | Program output: 83                 
Correct output: 29                  | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times (integer_gte integer_inc)) exec_swap (exec_if (exec_dup_times (boolean_empty boolean_or exec_do*range (in2 exec_if () (integer_inc) integer_eq exec_empty boolean_flush exec_k (integer_stackdepth boolean_empty boolean_or exec_stackdepth) (integer_lt boolean_shove) integer_lt exec_yank) boolean_stackdepth exec_k_when_autoconstructing (exec_yank integer_fromboolean boolean_yankdup boolean_and boolean_eq integer_empty in4 print_integer) (integer_gt integer_dup_times))) ()) ()))
Lexicase best errors: [1 0 0 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 69
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times (integer_gte integer_inc)) exec_swap (exec_if (exec_dup_times (boolean_empty boolean_or exec_do*range (in2 exec_if () (integer_inc) integer_eq exec_empty boolean_flush exec_k (integer_stackdepth boolean_empty boolean_or exec_stackdepth) (integer_lt boolean_shove) integer_lt exec_yank) boolean_stackdepth exec_k_when_autoconstructing (exec_yank integer_fromboolean boolean_yankdup boolean_and boolean_eq integer_empty in4 print_integer) (integer_gt integer_dup_times))) ()) ()))
Zero cases best errors: [1 0 0 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 69
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (639 1 1 304 1000 640 303 638 1000 1)
Population mean number of elite cases: 4.53
Count of perfect (error zero) individuals by case: (639 1 1 304 0 640 303 638 0 1)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times})
Best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times (integer_gte integer_inc)) exec_swap (exec_if (exec_dup_times (boolean_empty boolean_or exec_do*range (in2 exec_if () (integer_inc) integer_eq exec_empty boolean_flush exec_k (integer_stackdepth boolean_empty boolean_or exec_stackdepth) (integer_lt boolean_shove) integer_lt exec_yank) boolean_stackdepth exec_k_when_autoconstructing (exec_yank integer_fromboolean boolean_yankdup boolean_and boolean_eq integer_empty in4 print_integer) (integer_gt integer_dup_times))) ()) ()))
Errors: [1 0 0 1 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 51
Size: 69
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 7.473
Median total errors in population: 7
Error averages by case: (0.361 0.999 0.999 0.696 1.0 0.36 0.697 0.362 1.0 0.999)
Error minima by case: (0 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 21.894
Average program size in population (points): 31.319
Average percent parens in population: 0.273
Minimum age in population: 9.0
Maximum age in population: 13.765625
Average age in population: 11.938140625
Median age in population: 12.015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 243
Genome diversity (% unique genomes):	 0.515
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 261
Syntactic diversity (% unique Push programs):	 0.505
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4382928
--- Timings ---
Current time: 1559314359719 milliseconds
Total Time:          24.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        16.5 seconds, 67.2%
Fitness Testing:      5.5 seconds, 22.3%
Report:               2.5 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: -22                
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 35                 
Correct output: 18                  | Program output: 38                 
Correct output: 1                   | Program output: 92                 
Correct output: 31                  | Program output: 51                 
Correct output: 10                  | Program output: 83                 
Correct output: 37                  | Program output: 80                 
Correct output: 26                  | Program output: 67                 
Correct output: 16                  | Program output: 76                 
Correct output: 51                  | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 79                 
Correct output: 12                  | Program output: 37                 
Correct output: 17                  | Program output: 64                 
Correct output: 0                   | Program output: 63                 
Correct output: 44                  | Program output: 72                 
Correct output: 16                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: 91                 
Correct output: -97                 | Program output: -7                 
Correct output: -47                 | Program output: 27                 
Correct output: 19                  | Program output: 44                 
Correct output: -63                 | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 72                 
Correct output: -90                 | Program output: 32                 
Correct output: -43                 | Program output: 85                 
Correct output: -7                  | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: 85                 
Correct output: -2                  | Program output: 61                 
Correct output: -78                 | Program output: 17                 
Correct output: -52                 | Program output: -52                
Correct output: -62                 | Program output: -25                
Correct output: -89                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -15                 | Program output: 38                 
Correct output: -40                 | Program output: 71                 
Correct output: -4                  | Program output: 92                 
Correct output: -89                 | Program output: 82                 
Correct output: -20                 | Program output: 13                 
Correct output: -65                 | Program output: 13                 
Correct output: -96                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: 41                 
Correct output: -77                 | Program output: 96                 
Correct output: -58                 | Program output: -25                
Correct output: -36                 | Program output: -36                
Correct output: -66                 | Program output: 70                 
Correct output: -90                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -57                
Correct output: 74                  | Program output: 94                 
Correct output: -45                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -15                
Correct output: -71                 | Program output: 24                 
Correct output: -59                 | Program output: 16                 
Correct output: -97                 | Program output: 89                 
Correct output: -40                 | Program output: 28                 
Correct output: -98                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -78                 | Program output: -41                
Correct output: -58                 | Program output: -53                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 40                 
Correct output: -38                 | Program output: -38                
Correct output: -81                 | Program output: 45                 
Correct output: -41                 | Program output: 99                 
Correct output: -36                 | Program output: 82                 
Correct output: -79                 | Program output: 72                 
Correct output: -72                 | Program output: 26                 
Correct output: -97                 | Program output: -26                
Correct output: -33                 | Program output: -15                
Correct output: 9                   | Program output: 83                 
Correct output: 29                  | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times (integer_gte integer_inc)) exec_swap (exec_if (exec_dup_times (boolean_empty boolean_or exec_do*range (in2 exec_if () (integer_inc) integer_eq exec_empty boolean_flush exec_k (integer_stackdepth boolean_empty boolean_or exec_stackdepth) (integer_lt boolean_shove) integer_lt exec_yank) boolean_stackdepth exec_k_when_autoconstructing (exec_yank integer_fromboolean boolean_yankdup boolean_and boolean_eq integer_empty in4 print_integer) (integer_gt integer_dup_times))) ()) ()))
Lexicase best errors: [0 1 0 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 69
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times (integer_gte integer_inc)) exec_swap (exec_if (exec_dup_times (boolean_empty boolean_or exec_do*range (in2 exec_if () (integer_inc) integer_eq exec_empty boolean_flush exec_k (integer_stackdepth boolean_empty boolean_or exec_stackdepth) (integer_lt boolean_shove) integer_lt exec_yank) boolean_stackdepth exec_k_when_autoconstructing (exec_yank integer_fromboolean boolean_yankdup boolean_and boolean_eq integer_empty in4 print_integer) (integer_gt integer_dup_times))) ()) ()))
Zero cases best errors: [0 1 0 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 69
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (327 1 328 328 1 841 278 327 1 278)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (327 1 328 328 1 841 278 327 1 278)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_inc} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times})
Best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times (integer_gte integer_inc)) integer_inc) exec_swap (exec_if (exec_dup_times (boolean_empty boolean_or exec_do*range (in2 exec_if () (integer_inc) integer_eq exec_empty boolean_flush exec_k (integer_stackdepth boolean_empty boolean_or exec_stackdepth) (integer_lt boolean_shove) integer_lt exec_yank) boolean_stackdepth exec_k_when_autoconstructing (exec_yank integer_fromboolean boolean_yankdup boolean_and boolean_eq integer_empty in4 print_integer) (integer_gt integer_dup_times))) ()) ())
Errors: [0 1 0 0 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 52
Size: 70
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 7.29
Median total errors in population: 7
Error averages by case: (0.673 0.999 0.672 0.672 0.999 0.159 0.722 0.673 0.999 0.722)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.804
Average program size in population (points): 48.574
Average percent parens in population: 0.277
Minimum age in population: 10.0
Maximum age in population: 15.4140625
Average age in population: 13.6600546875
Median age in population: 13.599609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 184
Genome diversity (% unique genomes):	 0.581
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 184
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4746563
--- Timings ---
Current time: 1559314362188 milliseconds
Total Time:          27.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.3 seconds, 67.8%
Fitness Testing:      5.8 seconds, 21.5%
Report:               2.8 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 28                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 5                  
Correct output: 21                  | Program output: 30                 
Correct output: 1                   | Program output: 71                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 62                 
Correct output: 31                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 37                  | Program output: 64                 
Correct output: 26                  | Program output: 48                 
Correct output: 16                  | Program output: 97                 
Correct output: 51                  | Program output: 100                
Correct output: 19                  | Program output: 100                
Correct output: 0                   | Program output: 60                 
Correct output: 12                  | Program output: 100                
Correct output: 17                  | Program output: 97                 
Correct output: 0                   | Program output: 0                  
Correct output: 44                  | Program output: 83                 
Correct output: 16                  | Program output: 16                 
Correct output: 25                  | Program output: 97                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -15                
Correct output: -47                 | Program output: -47                
Correct output: 19                  | Program output: 72                 
Correct output: -63                 | Program output: 0                  
Correct output: 14                  | Program output: 33                 
Correct output: 21                  | Program output: 21                 
Correct output: -90                 | Program output: 56                 
Correct output: -43                 | Program output: 48                 
Correct output: -7                  | Program output: 99                 
Correct output: -41                 | Program output: 43                 
Correct output: -92                 | Program output: -92                
Correct output: -2                  | Program output: 73                 
Correct output: -78                 | Program output: 83                 
Correct output: -52                 | Program output: 24                 
Correct output: -62                 | Program output: 51                 
Correct output: -89                 | Program output: 35                 
Correct output: -12                 | Program output: -4                 
Correct output: -15                 | Program output: -15                
Correct output: -40                 | Program output: 83                 
Correct output: -4                  | Program output: 88                 
Correct output: -89                 | Program output: 35                 
Correct output: -20                 | Program output: 80                 
Correct output: -65                 | Program output: 100                
Correct output: -96                 | Program output: 64                 
Correct output: -99                 | Program output: 6                  
Correct output: -90                 | Program output: 57                 
Correct output: -77                 | Program output: -26                
Correct output: -58                 | Program output: -21                
Correct output: -36                 | Program output: 24                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -46                
Correct output: -92                 | Program output: 65                 
Correct output: -40                 | Program output: -17                
Correct output: -95                 | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: 74                  | Program output: 97                 
Correct output: -45                 | Program output: 77                 
Correct output: -79                 | Program output: 27                 
Correct output: -37                 | Program output: -2                 
Correct output: -71                 | Program output: -67                
Correct output: -59                 | Program output: -15                
Correct output: -97                 | Program output: -63                
Correct output: -40                 | Program output: 56                 
Correct output: -98                 | Program output: -7                 
Correct output: -70                 | Program output: 3                  
Correct output: -78                 | Program output: 89                 
Correct output: -58                 | Program output: 83                 
Correct output: 16                  | Program output: 90                 
Correct output: -48                 | Program output: -48                
Correct output: -38                 | Program output: -1                 
Correct output: -81                 | Program output: 76                 
Correct output: -41                 | Program output: -41                
Correct output: -36                 | Program output: 33                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: 14                 
Correct output: -97                 | Program output: -82                
Correct output: -33                 | Program output: 34                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 39                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_when})
Lexicase best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times (integer_gte integer_inc)) exec_swap (exec_if (exec_dup_times (boolean_empty boolean_or exec_do*range (in2 boolean_rot) exec_dup () print_integer exec_do*count (boolean_pop) exec_when (integer_rot boolean_flush) exec_when ())) ()) ()))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 50
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_when})
Zero cases best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times (integer_gte integer_inc)) exec_swap (exec_if (exec_dup_times (boolean_empty boolean_or exec_do*range (in2 boolean_rot) exec_dup () print_integer exec_do*count (boolean_pop) exec_when (integer_rot boolean_flush) exec_when ())) ()) ()))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 50
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (369 836 253 252 252 468 252 216 838 369)
Population mean number of elite cases: 4.11
Count of perfect (error zero) individuals by case: (369 836 253 252 252 468 252 216 838 369)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_when})
Best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times (integer_gte integer_inc)) exec_swap (exec_if (exec_dup_times (boolean_empty boolean_or exec_do*range (in2 boolean_rot) exec_dup () print_integer exec_do*count (boolean_pop) exec_when (integer_rot boolean_flush) exec_when ())) ()) ()))
Errors: [1 0 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 34
Size: 50
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 5.895
Median total errors in population: 6
Error averages by case: (0.631 0.164 0.747 0.748 0.748 0.532 0.748 0.784 0.162 0.631)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.965
Average program size in population (points): 51.325
Average percent parens in population: 0.274
Minimum age in population: 11.125
Maximum age in population: 16.943359375
Average age in population: 15.45400390625
Median age in population: 15.47265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5065248
--- Timings ---
Current time: 1559314364966 milliseconds
Total Time:          29.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.6 seconds, 68.8%
Fitness Testing:      6.1 seconds, 20.5%
Report:               3.1 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: 16                 
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 95                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 63                 
Correct output: 1                   | Program output: 43                 
Correct output: 18                  | Program output: 58                 
Correct output: 1                   | Program output: 69                 
Correct output: 31                  | Program output: 31                 
Correct output: 10                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 26                  | Program output: 98                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 51                 
Correct output: 19                  | Program output: 94                 
Correct output: 0                   | Program output: 47                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 88                 
Correct output: 44                  | Program output: 56                 
Correct output: 16                  | Program output: 54                 
Correct output: 25                  | Program output: 45                 
Correct output: -60                 | Program output: -22                
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -63                 | Program output: -63                
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: -43                
Correct output: -7                  | Program output: -7                 
Correct output: -41                 | Program output: 98                 
Correct output: -92                 | Program output: -60                
Correct output: -2                  | Program output: 51                 
Correct output: -78                 | Program output: -59                
Correct output: -52                 | Program output: 88                 
Correct output: -62                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 70                 
Correct output: -15                 | Program output: 72                 
Correct output: -40                 | Program output: -36                
Correct output: -4                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 76                 
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: 83                 
Correct output: -66                 | Program output: -17                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: 91                 
Correct output: -40                 | Program output: 39                 
Correct output: -95                 | Program output: -50                
Correct output: -100                | Program output: -13                
Correct output: 74                  | Program output: 92                 
Correct output: -45                 | Program output: 87                 
Correct output: -79                 | Program output: -45                
Correct output: -37                 | Program output: 40                 
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -57                
Correct output: -97                 | Program output: -57                
Correct output: -40                 | Program output: 13                 
Correct output: -98                 | Program output: 3                  
Correct output: -70                 | Program output: 91                 
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: 86                 
Correct output: 16                  | Program output: 27                 
Correct output: -48                 | Program output: -3                 
Correct output: -38                 | Program output: -3                 
Correct output: -81                 | Program output: 99                 
Correct output: -41                 | Program output: -5                 
Correct output: -36                 | Program output: 67                 
Correct output: -79                 | Program output: -77                
Correct output: -72                 | Program output: 71                 
Correct output: -97                 | Program output: 89                 
Correct output: -33                 | Program output: 22                 
Correct output: 9                   | Program output: 52                 
Correct output: 29                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Lexicase best program: (integer_div integer_fromboolean in1 print_integer)
Lexicase best errors: [0 1 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 5
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Zero cases best program: (integer_div integer_fromboolean in1 print_integer)
Zero cases best errors: [0 1 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 5
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (849 1 1000 132 132 1000 1000 219 849 132)
Population mean number of elite cases: 5.31
Count of perfect (error zero) individuals by case: (849 1 0 132 132 0 0 219 849 132)
Population mean number of perfect (error zero) cases: 2.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty})
Best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod in1 print_integer boolean_eq) (exec_shove () boolean_frominteger) exec_k_when_autoconstructing (exec_y (integer_empty)) ()))
Errors: [0 1 1 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 21
Size: 30
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 7.686
Median total errors in population: 8
Error averages by case: (0.151 0.999 1.0 0.868 0.868 1.0 1.0 0.781 0.151 0.868)
Error minima by case: (0 0 1 0 0 1 1 0 0 0)
Average genome size in population (length): 35.052
Average program size in population (points): 49.813
Average percent parens in population: 0.292
Minimum age in population: 14.1640625
Maximum age in population: 18.59375
Average age in population: 17.0668681640625
Median age in population: 17.0458984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 229
Genome diversity (% unique genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 230
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5359808
--- Timings ---
Current time: 1559314368130 milliseconds
Total Time:          32.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        22.8 seconds, 69.8%
Fitness Testing:      6.4 seconds, 19.6%
Report:               3.4 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: 16                 
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 95                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 63                 
Correct output: 1                   | Program output: 43                 
Correct output: 18                  | Program output: 58                 
Correct output: 1                   | Program output: 69                 
Correct output: 31                  | Program output: 31                 
Correct output: 10                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 26                  | Program output: 98                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 51                 
Correct output: 19                  | Program output: 94                 
Correct output: 0                   | Program output: 47                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 88                 
Correct output: 44                  | Program output: 56                 
Correct output: 16                  | Program output: 54                 
Correct output: 25                  | Program output: 45                 
Correct output: -60                 | Program output: -22                
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -63                 | Program output: -63                
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: -43                
Correct output: -7                  | Program output: -7                 
Correct output: -41                 | Program output: 98                 
Correct output: -92                 | Program output: -60                
Correct output: -2                  | Program output: 51                 
Correct output: -78                 | Program output: -59                
Correct output: -52                 | Program output: 88                 
Correct output: -62                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 70                 
Correct output: -15                 | Program output: 72                 
Correct output: -40                 | Program output: -36                
Correct output: -4                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 76                 
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: 83                 
Correct output: -66                 | Program output: -17                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: 91                 
Correct output: -40                 | Program output: 39                 
Correct output: -95                 | Program output: -50                
Correct output: -100                | Program output: -13                
Correct output: 74                  | Program output: 92                 
Correct output: -45                 | Program output: 87                 
Correct output: -79                 | Program output: -45                
Correct output: -37                 | Program output: 40                 
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -57                
Correct output: -97                 | Program output: -57                
Correct output: -40                 | Program output: 13                 
Correct output: -98                 | Program output: 3                  
Correct output: -70                 | Program output: 91                 
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: 86                 
Correct output: 16                  | Program output: 27                 
Correct output: -48                 | Program output: -3                 
Correct output: -38                 | Program output: -3                 
Correct output: -81                 | Program output: 99                 
Correct output: -41                 | Program output: -5                 
Correct output: -36                 | Program output: 67                 
Correct output: -79                 | Program output: -77                
Correct output: -72                 | Program output: 71                 
Correct output: -97                 | Program output: 89                 
Correct output: -33                 | Program output: 22                 
Correct output: 9                   | Program output: 52                 
Correct output: 29                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Lexicase best program: (integer_div integer_fromboolean in1 print_integer)
Lexicase best errors: [1 0 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 5
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Zero cases best program: (integer_div integer_fromboolean in1 print_integer)
Zero cases best errors: [1 0 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 5
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 627 4 627 147 148 627 627 778 627)
Population mean number of elite cases: 5.21
Count of perfect (error zero) individuals by case: (0 627 4 627 147 148 627 627 778 627)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Best program: (integer_div integer_fromboolean in1 print_integer)
Errors: [1 0 1 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 4
Size: 5
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.788
Median total errors in population: 4
Error averages by case: (1.0 0.373 0.996 0.373 0.853 0.852 0.373 0.373 0.222 0.373)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.364
Average program size in population (points): 29.573
Average percent parens in population: 0.250
Minimum age in population: 15.1640625
Maximum age in population: 20.28125
Average age in population: 18.4811396484375
Median age in population: 18.58837890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 301
Genome diversity (% unique genomes):	 0.369
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 337
Syntactic diversity (% unique Push programs):	 0.362
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5699446
--- Timings ---
Current time: 1559314371038 milliseconds
Total Time:          36.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.3 seconds, 70.0%
Fitness Testing:      6.7 seconds, 18.6%
Report:               4.0 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: 16                 
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 95                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 63                 
Correct output: 1                   | Program output: 43                 
Correct output: 18                  | Program output: 58                 
Correct output: 1                   | Program output: 69                 
Correct output: 31                  | Program output: 31                 
Correct output: 10                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 26                  | Program output: 98                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 51                 
Correct output: 19                  | Program output: 94                 
Correct output: 0                   | Program output: 47                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 88                 
Correct output: 44                  | Program output: 56                 
Correct output: 16                  | Program output: 54                 
Correct output: 25                  | Program output: 45                 
Correct output: -60                 | Program output: -22                
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -63                 | Program output: -63                
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: -43                
Correct output: -7                  | Program output: -7                 
Correct output: -41                 | Program output: 98                 
Correct output: -92                 | Program output: -60                
Correct output: -2                  | Program output: 51                 
Correct output: -78                 | Program output: -59                
Correct output: -52                 | Program output: 88                 
Correct output: -62                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 70                 
Correct output: -15                 | Program output: 72                 
Correct output: -40                 | Program output: -36                
Correct output: -4                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 76                 
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: 83                 
Correct output: -66                 | Program output: -17                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: 91                 
Correct output: -40                 | Program output: 39                 
Correct output: -95                 | Program output: -50                
Correct output: -100                | Program output: -13                
Correct output: 74                  | Program output: 92                 
Correct output: -45                 | Program output: 87                 
Correct output: -79                 | Program output: -45                
Correct output: -37                 | Program output: 40                 
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -57                
Correct output: -97                 | Program output: -57                
Correct output: -40                 | Program output: 13                 
Correct output: -98                 | Program output: 3                  
Correct output: -70                 | Program output: 91                 
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: 86                 
Correct output: 16                  | Program output: 27                 
Correct output: -48                 | Program output: -3                 
Correct output: -38                 | Program output: -3                 
Correct output: -81                 | Program output: 99                 
Correct output: -41                 | Program output: -5                 
Correct output: -36                 | Program output: 67                 
Correct output: -79                 | Program output: -77                
Correct output: -72                 | Program output: 71                 
Correct output: -97                 | Program output: 89                 
Correct output: -33                 | Program output: 22                 
Correct output: 9                   | Program output: 52                 
Correct output: 29                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Lexicase best program: (integer_div integer_fromboolean in1 print_integer)
Lexicase best errors: [1 1 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 5
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Zero cases best program: (integer_div integer_fromboolean in1 print_integer)
Zero cases best errors: [1 1 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 5
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 181 1 817 636 1000 180 636 636 636)
Population mean number of elite cases: 4.73
Count of perfect (error zero) individuals by case: (3 181 1 817 636 0 180 636 636 636)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Best program: (integer_div integer_fromboolean in1 print_integer)
Errors: [1 1 1 0 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 4
Size: 5
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.274
Median total errors in population: 5
Error averages by case: (0.997 0.819 0.999 0.183 0.364 1.0 0.82 0.364 0.364 0.364)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 20.166
Average program size in population (points): 27.463
Average percent parens in population: 0.243
Minimum age in population: 16.34765625
Maximum age in population: 22.082275390625
Average age in population: 19.871458984375
Median age in population: 19.9476318359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 290
Genome diversity (% unique genomes):	 0.389
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 333
Syntactic diversity (% unique Push programs):	 0.375
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5917570
--- Timings ---
Current time: 1559314373319 milliseconds
Total Time:          38.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.2 seconds, 70.8%
Fitness Testing:      6.9 seconds, 18.1%
Report:               4.1 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: -22                
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 35                 
Correct output: 18                  | Program output: 38                 
Correct output: 1                   | Program output: 92                 
Correct output: 31                  | Program output: 51                 
Correct output: 10                  | Program output: 83                 
Correct output: 37                  | Program output: 80                 
Correct output: 26                  | Program output: 67                 
Correct output: 16                  | Program output: 76                 
Correct output: 51                  | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 79                 
Correct output: 12                  | Program output: 37                 
Correct output: 17                  | Program output: 64                 
Correct output: 0                   | Program output: 63                 
Correct output: 44                  | Program output: 72                 
Correct output: 16                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: 91                 
Correct output: -97                 | Program output: -7                 
Correct output: -47                 | Program output: 27                 
Correct output: 19                  | Program output: 44                 
Correct output: -63                 | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 72                 
Correct output: -90                 | Program output: 32                 
Correct output: -43                 | Program output: 85                 
Correct output: -7                  | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: 85                 
Correct output: -2                  | Program output: 61                 
Correct output: -78                 | Program output: 17                 
Correct output: -52                 | Program output: -52                
Correct output: -62                 | Program output: -25                
Correct output: -89                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -15                 | Program output: 38                 
Correct output: -40                 | Program output: 71                 
Correct output: -4                  | Program output: 92                 
Correct output: -89                 | Program output: 82                 
Correct output: -20                 | Program output: 13                 
Correct output: -65                 | Program output: 13                 
Correct output: -96                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: 41                 
Correct output: -77                 | Program output: 96                 
Correct output: -58                 | Program output: -25                
Correct output: -36                 | Program output: -36                
Correct output: -66                 | Program output: 70                 
Correct output: -90                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -57                
Correct output: 74                  | Program output: 94                 
Correct output: -45                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -15                
Correct output: -71                 | Program output: 24                 
Correct output: -59                 | Program output: 16                 
Correct output: -97                 | Program output: 89                 
Correct output: -40                 | Program output: 28                 
Correct output: -98                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -78                 | Program output: -41                
Correct output: -58                 | Program output: -53                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 40                 
Correct output: -38                 | Program output: -38                
Correct output: -81                 | Program output: 45                 
Correct output: -41                 | Program output: 99                 
Correct output: -36                 | Program output: 82                 
Correct output: -79                 | Program output: 72                 
Correct output: -72                 | Program output: 26                 
Correct output: -97                 | Program output: -26                
Correct output: -33                 | Program output: -15                
Correct output: 9                   | Program output: 83                 
Correct output: 29                  | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_div integer_fromboolean in1 exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times (integer_gte integer_inc)) exec_swap (integer_shove exec_dup_times (boolean_empty boolean_or exec_do*range (in2 exec_if () (integer_inc) integer_eq exec_empty boolean_flush exec_k (integer_stackdepth boolean_empty boolean_or exec_stackdepth) (integer_lt boolean_shove) integer_lt exec_yank) boolean_stackdepth exec_k_when_autoconstructing (exec_yank integer_fromboolean boolean_yankdup boolean_and boolean_eq integer_empty in4 print_integer) (integer_gt boolean_dup_items))) ())
Lexicase best errors: [0 0 1 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_div integer_fromboolean in1 exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times (integer_gte integer_inc)) exec_swap (integer_shove exec_dup_times (boolean_empty boolean_or exec_do*range (in2 exec_if () (integer_inc) integer_eq exec_empty boolean_flush exec_k (integer_stackdepth boolean_empty boolean_or exec_stackdepth) (integer_lt boolean_shove) integer_lt exec_yank) boolean_stackdepth exec_k_when_autoconstructing (exec_yank integer_fromboolean boolean_yankdup boolean_and boolean_eq integer_empty in4 print_integer) (integer_gt boolean_dup_items))) ())
Zero cases best errors: [0 0 1 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (881 173 507 203 202 169 679 508 1000 173)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (881 173 507 203 202 169 679 508 0 173)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times})
Best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times (integer_gte integer_inc)) exec_swap (exec_if (exec_dup_times (boolean_empty boolean_or exec_do*range (in2 exec_if () (integer_inc) integer_eq exec_empty boolean_flush exec_k (integer_stackdepth boolean_empty boolean_or exec_stackdepth) (integer_lt boolean_shove) integer_lt exec_yank) boolean_stackdepth exec_k_when_autoconstructing (exec_yank integer_fromboolean boolean_yankdup boolean_and boolean_eq integer_empty in4 print_integer) (integer_gt integer_dup_times))) ()) ()))
Errors: [0 0 1 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 51
Size: 69
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 6.505
Median total errors in population: 6
Error averages by case: (0.119 0.827 0.493 0.797 0.798 0.831 0.321 0.492 1.0 0.827)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 18.983
Average program size in population (points): 25.723
Average percent parens in population: 0.241
Minimum age in population: 17.34765625
Maximum age in population: 23.2418212890625
Average age in population: 21.14388415527344
Median age in population: 21.20867919921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 227
Genome diversity (% unique genomes):	 0.393
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 262
Syntactic diversity (% unique Push programs):	 0.381
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6123485
--- Timings ---
Current time: 1559314375481 milliseconds
Total Time:          40.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.9 seconds, 71.5%
Fitness Testing:      7.2 seconds, 17.7%
Report:               4.3 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: 51                 
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 47                 
Correct output: -9                  | Program output: 13                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 62                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 85                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 55                 
Correct output: 10                  | Program output: 30                 
Correct output: 37                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 82                 
Correct output: 51                  | Program output: 94                 
Correct output: 19                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 73                 
Correct output: 17                  | Program output: 58                 
Correct output: 0                   | Program output: 8                  
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 45                 
Correct output: 25                  | Program output: 42                 
Correct output: -60                 | Program output: -13                
Correct output: -97                 | Program output: 79                 
Correct output: -47                 | Program output: 35                 
Correct output: 19                  | Program output: 79                 
Correct output: -63                 | Program output: 44                 
Correct output: 14                  | Program output: 97                 
Correct output: 21                  | Program output: 76                 
Correct output: -90                 | Program output: 58                 
Correct output: -43                 | Program output: -30                
Correct output: -7                  | Program output: 90                 
Correct output: -41                 | Program output: -4                 
Correct output: -92                 | Program output: -84                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -87                
Correct output: -12                 | Program output: 54                 
Correct output: -15                 | Program output: 61                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -82                
Correct output: -20                 | Program output: 35                 
Correct output: -65                 | Program output: -52                
Correct output: -96                 | Program output: -78                
Correct output: -99                 | Program output: 51                 
Correct output: -90                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: 64                 
Correct output: -36                 | Program output: -3                 
Correct output: -66                 | Program output: -23                
Correct output: -90                 | Program output: -60                
Correct output: -92                 | Program output: -56                
Correct output: -40                 | Program output: 51                 
Correct output: -95                 | Program output: 32                 
Correct output: -100                | Program output: -45                
Correct output: 74                  | Program output: 74                 
Correct output: -45                 | Program output: -32                
Correct output: -79                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 7                  
Correct output: -78                 | Program output: 34                 
Correct output: -58                 | Program output: -58                
Correct output: 16                  | Program output: 35                 
Correct output: -48                 | Program output: -24                
Correct output: -38                 | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: 9                   | Program output: 71                 
Correct output: 29                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Lexicase best errors: [0 1 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Zero cases best errors: [0 1 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (879 1000 367 225 368 225 284 225 369 225)
Population mean number of elite cases: 4.17
Count of perfect (error zero) individuals by case: (879 0 367 225 368 225 284 225 369 225)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Errors: [0 1 1 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.833
Median total errors in population: 6
Error averages by case: (0.121 1.0 0.633 0.775 0.632 0.775 0.716 0.775 0.631 0.775)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.792
Average program size in population (points): 37.585
Average percent parens in population: 0.247
Minimum age in population: 19.4453125
Maximum age in population: 24.7662353515625
Average age in population: 22.64108685302734
Median age in population: 22.72021484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 189
Genome diversity (% unique genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.467
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6372669
--- Timings ---
Current time: 1559314377788 milliseconds
Total Time:          42.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        30.8 seconds, 71.9%
Fitness Testing:      7.4 seconds, 17.3%
Report:               4.5 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: -22                
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 35                 
Correct output: 18                  | Program output: 38                 
Correct output: 1                   | Program output: 92                 
Correct output: 31                  | Program output: 51                 
Correct output: 10                  | Program output: 83                 
Correct output: 37                  | Program output: 80                 
Correct output: 26                  | Program output: 67                 
Correct output: 16                  | Program output: 76                 
Correct output: 51                  | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 79                 
Correct output: 12                  | Program output: 37                 
Correct output: 17                  | Program output: 64                 
Correct output: 0                   | Program output: 63                 
Correct output: 44                  | Program output: 72                 
Correct output: 16                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: 91                 
Correct output: -97                 | Program output: -7                 
Correct output: -47                 | Program output: 27                 
Correct output: 19                  | Program output: 44                 
Correct output: -63                 | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 72                 
Correct output: -90                 | Program output: 32                 
Correct output: -43                 | Program output: 85                 
Correct output: -7                  | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: 85                 
Correct output: -2                  | Program output: 61                 
Correct output: -78                 | Program output: 17                 
Correct output: -52                 | Program output: -52                
Correct output: -62                 | Program output: -25                
Correct output: -89                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -15                 | Program output: 38                 
Correct output: -40                 | Program output: 71                 
Correct output: -4                  | Program output: 92                 
Correct output: -89                 | Program output: 82                 
Correct output: -20                 | Program output: 13                 
Correct output: -65                 | Program output: 13                 
Correct output: -96                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: 41                 
Correct output: -77                 | Program output: 96                 
Correct output: -58                 | Program output: -25                
Correct output: -36                 | Program output: -36                
Correct output: -66                 | Program output: 70                 
Correct output: -90                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -57                
Correct output: 74                  | Program output: 94                 
Correct output: -45                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -15                
Correct output: -71                 | Program output: 24                 
Correct output: -59                 | Program output: 16                 
Correct output: -97                 | Program output: 89                 
Correct output: -40                 | Program output: 28                 
Correct output: -98                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -78                 | Program output: -41                
Correct output: -58                 | Program output: -53                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 40                 
Correct output: -38                 | Program output: -38                
Correct output: -81                 | Program output: 45                 
Correct output: -41                 | Program output: 99                 
Correct output: -36                 | Program output: 82                 
Correct output: -79                 | Program output: 72                 
Correct output: -72                 | Program output: 26                 
Correct output: -97                 | Program output: -26                
Correct output: -33                 | Program output: -15                
Correct output: 9                   | Program output: 83                 
Correct output: 29                  | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_gte} {:close 2, :instruction tag_boolean_488} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_gt exec_dup_times (integer_gte) tag_boolean_488)) exec_swap (exec_if (exec_dup_times (boolean_empty boolean_or exec_do*range (in2 exec_if () (integer_inc) integer_eq exec_empty boolean_flush exec_k (integer_stackdepth boolean_empty boolean_or exec_stackdepth integer_lt boolean_shove) (integer_lt exec_yank) boolean_stackdepth exec_k_when_autoconstructing (exec_yank integer_fromboolean boolean_yankdup) (boolean_and boolean_eq integer_empty in4 print_integer) integer_gt integer_dup_times))) ()) ())
Lexicase best errors: [0 1 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 69
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_gte} {:close 2, :instruction tag_boolean_488} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_gt exec_dup_times (integer_gte) tag_boolean_488)) exec_swap (exec_if (exec_dup_times (boolean_empty boolean_or exec_do*range (in2 exec_if () (integer_inc) integer_eq exec_empty boolean_flush exec_k (integer_stackdepth boolean_empty boolean_or exec_stackdepth integer_lt boolean_shove) (integer_lt exec_yank) boolean_stackdepth exec_k_when_autoconstructing (exec_yank integer_fromboolean boolean_yankdup) (boolean_and boolean_eq integer_empty in4 print_integer) integer_gt integer_dup_times))) ()) ())
Zero cases best errors: [0 1 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 69
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (420 452 132 452 290 132 452 287 286 132)
Population mean number of elite cases: 3.04
Count of perfect (error zero) individuals by case: (420 452 132 452 290 132 452 287 286 132)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times})
Best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times (integer_gte integer_inc)) exec_swap (exec_if (exec_dup_times (boolean_shove integer_div exec_do*range (in2 integer_swap) integer_inc) integer_eq exec_empty boolean_flush exec_k (integer_stackdepth boolean_empty boolean_or exec_stackdepth) (integer_lt boolean_shove) integer_lt exec_yank) (boolean_stackdepth exec_k_when_autoconstructing (exec_yank integer_fromboolean boolean_yankdup boolean_and boolean_eq exec_yank) (boolean_stackdepth exec_k_when_autoconstructing (exec_yank integer_fromboolean boolean_yankdup boolean_and boolean_eq integer_empty in4 print_integer) (integer_gt integer_dup_times)))) ()) ()))
Errors: [0 1 1 1 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 63
Size: 83
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 6.965
Median total errors in population: 7
Error averages by case: (0.58 0.548 0.868 0.548 0.71 0.868 0.548 0.713 0.714 0.868)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.803
Average program size in population (points): 32.04
Average percent parens in population: 0.244
Minimum age in population: 21.44189453125
Maximum age in population: 26.269775390625
Average age in population: 24.07171142578125
Median age in population: 24.13461303710938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 340
Genome diversity (% unique genomes):	 0.456
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 350
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6575975
--- Timings ---
Current time: 1559314380566 milliseconds
Total Time:          45.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        33.0 seconds, 72.7%
Fitness Testing:      7.6 seconds, 16.7%
Report:               4.7 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: 16                 
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 95                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 63                 
Correct output: 1                   | Program output: 43                 
Correct output: 18                  | Program output: 58                 
Correct output: 1                   | Program output: 69                 
Correct output: 31                  | Program output: 31                 
Correct output: 10                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 26                  | Program output: 98                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 51                 
Correct output: 19                  | Program output: 94                 
Correct output: 0                   | Program output: 47                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 88                 
Correct output: 44                  | Program output: 56                 
Correct output: 16                  | Program output: 54                 
Correct output: 25                  | Program output: 45                 
Correct output: -60                 | Program output: -22                
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -63                 | Program output: -63                
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: -43                
Correct output: -7                  | Program output: -7                 
Correct output: -41                 | Program output: 98                 
Correct output: -92                 | Program output: -60                
Correct output: -2                  | Program output: 51                 
Correct output: -78                 | Program output: -59                
Correct output: -52                 | Program output: 88                 
Correct output: -62                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 70                 
Correct output: -15                 | Program output: 72                 
Correct output: -40                 | Program output: -36                
Correct output: -4                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 76                 
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: 83                 
Correct output: -66                 | Program output: -17                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: 91                 
Correct output: -40                 | Program output: 39                 
Correct output: -95                 | Program output: -50                
Correct output: -100                | Program output: -13                
Correct output: 74                  | Program output: 92                 
Correct output: -45                 | Program output: 87                 
Correct output: -79                 | Program output: -45                
Correct output: -37                 | Program output: 40                 
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -57                
Correct output: -97                 | Program output: -57                
Correct output: -40                 | Program output: 13                 
Correct output: -98                 | Program output: 3                  
Correct output: -70                 | Program output: 91                 
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: 86                 
Correct output: 16                  | Program output: 27                 
Correct output: -48                 | Program output: -3                 
Correct output: -38                 | Program output: -3                 
Correct output: -81                 | Program output: 99                 
Correct output: -41                 | Program output: -5                 
Correct output: -36                 | Program output: 67                 
Correct output: -79                 | Program output: -77                
Correct output: -72                 | Program output: 71                 
Correct output: -97                 | Program output: 89                 
Correct output: -33                 | Program output: 22                 
Correct output: 9                   | Program output: 52                 
Correct output: 29                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_or exec_do*count (boolean_or integer_dup integer_inc integer_flush exec_dup_items) exec_k (boolean_and boolean_flush integer_mod in1 print_integer boolean_eq) (exec_shove (boolean_frominteger) exec_k_when_autoconstructing (exec_y (integer_empty exec_do*range (exec_yankdup exec_do*times (exec_dup (exec_empty integer_swap boolean_pop) in3 boolean_not boolean_eq) exec_pop () integer_min) exec_yank exec_y_when_autoconstructing (boolean_eq integer_gte) integer_pop boolean_flush) exec_k (integer_empty integer_div) (integer_rot exec_k_when_autoconstructing (boolean_frominteger integer_dup) (exec_if (exec_swap (integer_yank) (boolean_or)) ()))) ()))
Lexicase best errors: [1 1 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 69
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_or exec_do*count (boolean_or integer_dup integer_inc integer_flush exec_dup_items) exec_k (boolean_and boolean_flush integer_mod in1 print_integer boolean_eq) (exec_shove (boolean_frominteger) exec_k_when_autoconstructing (exec_y (integer_empty exec_do*range (exec_yankdup exec_do*times (exec_dup (exec_empty integer_swap boolean_pop) in3 boolean_not boolean_eq) exec_pop () integer_min) exec_yank exec_y_when_autoconstructing (boolean_eq integer_gte) integer_pop boolean_flush) exec_k (integer_empty integer_div) (integer_rot exec_k_when_autoconstructing (boolean_frominteger integer_dup) (exec_if (exec_swap (integer_yank) (boolean_or)) ()))) ()))
Zero cases best errors: [1 1 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 69
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 268 595 1000 267 1000 349 244 349 349)
Population mean number of elite cases: 5.42
Count of perfect (error zero) individuals by case: (0 268 595 0 267 0 349 244 349 349)
Population mean number of perfect (error zero) cases: 2.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Best program: (integer_div integer_fromboolean in1 print_integer)
Errors: [1 1 0 1 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 4
Size: 5
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.579
Median total errors in population: 8
Error averages by case: (1.0 0.732 0.405 1.0 0.733 1.0 0.651 0.756 0.651 0.651)
Error minima by case: (1 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 22.341
Average program size in population (points): 30.198
Average percent parens in population: 0.245
Minimum age in population: 22.44189453125
Maximum age in population: 27.80429077148438
Average age in population: 25.61939659118652
Median age in population: 25.67679595947266
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 187
Genome diversity (% unique genomes):	 0.467
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 198
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6777777
--- Timings ---
Current time: 1559314382878 milliseconds
Total Time:          48.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.0 seconds, 73.0%
Fitness Testing:      7.8 seconds, 16.3%
Report:               5.0 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: 51                 
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 47                 
Correct output: -9                  | Program output: 13                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 62                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 85                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 55                 
Correct output: 10                  | Program output: 30                 
Correct output: 37                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 82                 
Correct output: 51                  | Program output: 94                 
Correct output: 19                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 73                 
Correct output: 17                  | Program output: 58                 
Correct output: 0                   | Program output: 8                  
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 45                 
Correct output: 25                  | Program output: 42                 
Correct output: -60                 | Program output: -13                
Correct output: -97                 | Program output: 79                 
Correct output: -47                 | Program output: 35                 
Correct output: 19                  | Program output: 79                 
Correct output: -63                 | Program output: 44                 
Correct output: 14                  | Program output: 97                 
Correct output: 21                  | Program output: 76                 
Correct output: -90                 | Program output: 58                 
Correct output: -43                 | Program output: -30                
Correct output: -7                  | Program output: 90                 
Correct output: -41                 | Program output: -4                 
Correct output: -92                 | Program output: -84                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -87                
Correct output: -12                 | Program output: 54                 
Correct output: -15                 | Program output: 61                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -82                
Correct output: -20                 | Program output: 35                 
Correct output: -65                 | Program output: -52                
Correct output: -96                 | Program output: -78                
Correct output: -99                 | Program output: 51                 
Correct output: -90                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: 64                 
Correct output: -36                 | Program output: -3                 
Correct output: -66                 | Program output: -23                
Correct output: -90                 | Program output: -60                
Correct output: -92                 | Program output: -56                
Correct output: -40                 | Program output: 51                 
Correct output: -95                 | Program output: 32                 
Correct output: -100                | Program output: -45                
Correct output: 74                  | Program output: 74                 
Correct output: -45                 | Program output: -32                
Correct output: -79                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 7                  
Correct output: -78                 | Program output: 34                 
Correct output: -58                 | Program output: -58                
Correct output: 16                  | Program output: 35                 
Correct output: -48                 | Program output: -24                
Correct output: -38                 | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: 9                   | Program output: 71                 
Correct output: 29                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Lexicase best errors: [0 0 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Zero cases best errors: [0 0 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (791 250 249 114 906 114 250 541 542 114)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (791 250 249 114 906 114 250 541 542 114)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Errors: [0 0 0 1 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.129
Median total errors in population: 6
Error averages by case: (0.209 0.75 0.751 0.886 0.094 0.886 0.75 0.459 0.458 0.886)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.209
Average program size in population (points): 20.616
Average percent parens in population: 0.240
Minimum age in population: 23.951171875
Maximum age in population: 29.15802764892578
Average age in population: 27.07868725585938
Median age in population: 27.16952133178711
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 222
Genome diversity (% unique genomes):	 0.354
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 284
Syntactic diversity (% unique Push programs):	 0.34
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6931254
--- Timings ---
Current time: 1559314385248 milliseconds
Total Time:          50.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.1 seconds, 73.7%
Fitness Testing:      8.0 seconds, 15.9%
Report:               5.1 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: 16                 
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 95                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 63                 
Correct output: 1                   | Program output: 43                 
Correct output: 18                  | Program output: 58                 
Correct output: 1                   | Program output: 69                 
Correct output: 31                  | Program output: 31                 
Correct output: 10                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 26                  | Program output: 98                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 51                 
Correct output: 19                  | Program output: 94                 
Correct output: 0                   | Program output: 47                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 88                 
Correct output: 44                  | Program output: 56                 
Correct output: 16                  | Program output: 54                 
Correct output: 25                  | Program output: 45                 
Correct output: -60                 | Program output: -22                
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -63                 | Program output: -63                
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: -43                
Correct output: -7                  | Program output: -7                 
Correct output: -41                 | Program output: 98                 
Correct output: -92                 | Program output: -60                
Correct output: -2                  | Program output: 51                 
Correct output: -78                 | Program output: -59                
Correct output: -52                 | Program output: 88                 
Correct output: -62                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 70                 
Correct output: -15                 | Program output: 72                 
Correct output: -40                 | Program output: -36                
Correct output: -4                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 76                 
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: 83                 
Correct output: -66                 | Program output: -17                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: 91                 
Correct output: -40                 | Program output: 39                 
Correct output: -95                 | Program output: -50                
Correct output: -100                | Program output: -13                
Correct output: 74                  | Program output: 92                 
Correct output: -45                 | Program output: 87                 
Correct output: -79                 | Program output: -45                
Correct output: -37                 | Program output: 40                 
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -57                
Correct output: -97                 | Program output: -57                
Correct output: -40                 | Program output: 13                 
Correct output: -98                 | Program output: 3                  
Correct output: -70                 | Program output: 91                 
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: 86                 
Correct output: 16                  | Program output: 27                 
Correct output: -48                 | Program output: -3                 
Correct output: -38                 | Program output: -3                 
Correct output: -81                 | Program output: 99                 
Correct output: -41                 | Program output: -5                 
Correct output: -36                 | Program output: 67                 
Correct output: -79                 | Program output: -77                
Correct output: -72                 | Program output: 71                 
Correct output: -97                 | Program output: 89                 
Correct output: -33                 | Program output: 22                 
Correct output: 9                   | Program output: 52                 
Correct output: 29                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Lexicase best program: (integer_div integer_fromboolean in1 print_integer)
Lexicase best errors: [1 0 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 5
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Zero cases best program: (integer_div integer_fromboolean in1 print_integer)
Zero cases best errors: [1 0 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 5
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (268 259 259 269 259 342 268 1000 259 259)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (268 259 259 269 259 342 268 0 259 259)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (boolean_or exec_do*count (exec_noop integer_add exec_if () (exec_do*range (boolean_yankdup exec_do*while (integer_pop integer_dup_times in3 integer_sub boolean_flush integer_mod in1 print_integer boolean_eq) boolean_stackdepth) integer_gte) exec_k_when_autoconstructing (exec_y (integer_empty exec_do*range (exec_yankdup exec_do*times (exec_dup (integer_rot boolean_flush exec_s_when_autoconstructing () () ()))))) ()))
Errors: [1 0 0 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 29
Size: 44
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 7.558
Median total errors in population: 7
Error averages by case: (0.732 0.741 0.741 0.731 0.741 0.658 0.732 1.0 0.741 0.741)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 22.209
Average program size in population (points): 29.944
Average percent parens in population: 0.244
Minimum age in population: 25.3035888671875
Maximum age in population: 30.55104446411133
Average age in population: 28.55797408294678
Median age in population: 28.62097930908203
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 220
Genome diversity (% unique genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 231
Syntactic diversity (% unique Push programs):	 0.438
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7132746
--- Timings ---
Current time: 1559314388059 milliseconds
Total Time:          52.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.1 seconds, 74.2%
Fitness Testing:      8.2 seconds, 15.6%
Report:               5.3 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: 51                 
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 47                 
Correct output: -9                  | Program output: 13                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 62                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 85                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 55                 
Correct output: 10                  | Program output: 30                 
Correct output: 37                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 82                 
Correct output: 51                  | Program output: 94                 
Correct output: 19                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 73                 
Correct output: 17                  | Program output: 58                 
Correct output: 0                   | Program output: 8                  
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 45                 
Correct output: 25                  | Program output: 42                 
Correct output: -60                 | Program output: -13                
Correct output: -97                 | Program output: 79                 
Correct output: -47                 | Program output: 35                 
Correct output: 19                  | Program output: 79                 
Correct output: -63                 | Program output: 44                 
Correct output: 14                  | Program output: 97                 
Correct output: 21                  | Program output: 76                 
Correct output: -90                 | Program output: 58                 
Correct output: -43                 | Program output: -30                
Correct output: -7                  | Program output: 90                 
Correct output: -41                 | Program output: -4                 
Correct output: -92                 | Program output: -84                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -87                
Correct output: -12                 | Program output: 54                 
Correct output: -15                 | Program output: 61                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -82                
Correct output: -20                 | Program output: 35                 
Correct output: -65                 | Program output: -52                
Correct output: -96                 | Program output: -78                
Correct output: -99                 | Program output: 51                 
Correct output: -90                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: 64                 
Correct output: -36                 | Program output: -3                 
Correct output: -66                 | Program output: -23                
Correct output: -90                 | Program output: -60                
Correct output: -92                 | Program output: -56                
Correct output: -40                 | Program output: 51                 
Correct output: -95                 | Program output: 32                 
Correct output: -100                | Program output: -45                
Correct output: 74                  | Program output: 74                 
Correct output: -45                 | Program output: -32                
Correct output: -79                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 7                  
Correct output: -78                 | Program output: 34                 
Correct output: -58                 | Program output: -58                
Correct output: 16                  | Program output: 35                 
Correct output: -48                 | Program output: -24                
Correct output: -38                 | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: 9                   | Program output: 71                 
Correct output: 29                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Lexicase best errors: [1 0 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Zero cases best errors: [1 0 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (265 93 881 884 94 1000 1 787 93 616)
Population mean number of elite cases: 4.71
Count of perfect (error zero) individuals by case: (265 93 881 884 94 0 1 787 93 616)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (boolean_rot integer_min exec_dup_items) print_integer))
Errors: [1 0 0 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.286
Median total errors in population: 6
Error averages by case: (0.735 0.907 0.119 0.116 0.906 1.0 0.999 0.213 0.907 0.384)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 21.614
Average program size in population (points): 29.286
Average percent parens in population: 0.243
Minimum age in population: 27.08673095703125
Maximum age in population: 32.22151565551758
Average age in population: 30.0511406879425
Median age in population: 30.12765789031982
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 225
Genome diversity (% unique genomes):	 0.488
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 281
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7336652
--- Timings ---
Current time: 1559314390424 milliseconds
Total Time:          55.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.1 seconds, 74.1%
Fitness Testing:      8.4 seconds, 15.1%
Report:               5.9 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: 51                 
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 47                 
Correct output: -9                  | Program output: 13                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 62                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 85                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 55                 
Correct output: 10                  | Program output: 30                 
Correct output: 37                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 82                 
Correct output: 51                  | Program output: 94                 
Correct output: 19                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 73                 
Correct output: 17                  | Program output: 58                 
Correct output: 0                   | Program output: 8                  
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 45                 
Correct output: 25                  | Program output: 42                 
Correct output: -60                 | Program output: -13                
Correct output: -97                 | Program output: 79                 
Correct output: -47                 | Program output: 35                 
Correct output: 19                  | Program output: 79                 
Correct output: -63                 | Program output: 44                 
Correct output: 14                  | Program output: 97                 
Correct output: 21                  | Program output: 76                 
Correct output: -90                 | Program output: 58                 
Correct output: -43                 | Program output: -30                
Correct output: -7                  | Program output: 90                 
Correct output: -41                 | Program output: -4                 
Correct output: -92                 | Program output: -84                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -87                
Correct output: -12                 | Program output: 54                 
Correct output: -15                 | Program output: 61                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -82                
Correct output: -20                 | Program output: 35                 
Correct output: -65                 | Program output: -52                
Correct output: -96                 | Program output: -78                
Correct output: -99                 | Program output: 51                 
Correct output: -90                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: 64                 
Correct output: -36                 | Program output: -3                 
Correct output: -66                 | Program output: -23                
Correct output: -90                 | Program output: -60                
Correct output: -92                 | Program output: -56                
Correct output: -40                 | Program output: 51                 
Correct output: -95                 | Program output: 32                 
Correct output: -100                | Program output: -45                
Correct output: 74                  | Program output: 74                 
Correct output: -45                 | Program output: -32                
Correct output: -79                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 7                  
Correct output: -78                 | Program output: 34                 
Correct output: -58                 | Program output: -58                
Correct output: 16                  | Program output: 35                 
Correct output: -48                 | Program output: -24                
Correct output: -38                 | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: 9                   | Program output: 71                 
Correct output: 29                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Lexicase best errors: [1 1 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Zero cases best errors: [1 1 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (103 1 142 103 481 480 481 246 143 480)
Population mean number of elite cases: 2.66
Count of perfect (error zero) individuals by case: (103 1 142 103 481 480 481 246 143 480)
Population mean number of perfect (error zero) cases: 2.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer})
Best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Errors: [1 1 1 1 0 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.34
Median total errors in population: 7
Error averages by case: (0.897 0.999 0.858 0.897 0.519 0.52 0.519 0.754 0.857 0.52)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.575
Average program size in population (points): 22.099
Average percent parens in population: 0.237
Minimum age in population: 28.08673095703125
Maximum age in population: 33.39201354980469
Average age in population: 31.49457883167267
Median age in population: 31.50812911987305
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 249
Genome diversity (% unique genomes):	 0.347
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 276
Syntactic diversity (% unique Push programs):	 0.332
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7477581
--- Timings ---
Current time: 1559314392616 milliseconds
Total Time:          57.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.0 seconds, 74.5%
Fitness Testing:      8.6 seconds, 14.9%
Report:               6.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: 51                 
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 47                 
Correct output: -9                  | Program output: 13                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 62                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 85                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 55                 
Correct output: 10                  | Program output: 30                 
Correct output: 37                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 82                 
Correct output: 51                  | Program output: 94                 
Correct output: 19                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 73                 
Correct output: 17                  | Program output: 58                 
Correct output: 0                   | Program output: 8                  
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 45                 
Correct output: 25                  | Program output: 42                 
Correct output: -60                 | Program output: -13                
Correct output: -97                 | Program output: 79                 
Correct output: -47                 | Program output: 35                 
Correct output: 19                  | Program output: 79                 
Correct output: -63                 | Program output: 44                 
Correct output: 14                  | Program output: 97                 
Correct output: 21                  | Program output: 76                 
Correct output: -90                 | Program output: 58                 
Correct output: -43                 | Program output: -30                
Correct output: -7                  | Program output: 90                 
Correct output: -41                 | Program output: -4                 
Correct output: -92                 | Program output: -84                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -87                
Correct output: -12                 | Program output: 54                 
Correct output: -15                 | Program output: 61                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -82                
Correct output: -20                 | Program output: 35                 
Correct output: -65                 | Program output: -52                
Correct output: -96                 | Program output: -78                
Correct output: -99                 | Program output: 51                 
Correct output: -90                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: 64                 
Correct output: -36                 | Program output: -3                 
Correct output: -66                 | Program output: -23                
Correct output: -90                 | Program output: -60                
Correct output: -92                 | Program output: -56                
Correct output: -40                 | Program output: 51                 
Correct output: -95                 | Program output: 32                 
Correct output: -100                | Program output: -45                
Correct output: 74                  | Program output: 74                 
Correct output: -45                 | Program output: -32                
Correct output: -79                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 7                  
Correct output: -78                 | Program output: 34                 
Correct output: -58                 | Program output: -58                
Correct output: 16                  | Program output: 35                 
Correct output: -48                 | Program output: -24                
Correct output: -38                 | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: 9                   | Program output: 71                 
Correct output: 29                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Lexicase best errors: [0 1 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Zero cases best errors: [0 1 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (384 315 185 97 381 185 384 384 884 384)
Population mean number of elite cases: 3.58
Count of perfect (error zero) individuals by case: (384 315 185 97 381 185 384 384 884 384)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Best program: (boolean_frominteger exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Errors: [0 1 1 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.417
Median total errors in population: 7
Error averages by case: (0.616 0.685 0.815 0.903 0.619 0.815 0.616 0.616 0.116 0.616)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.001
Average program size in population (points): 24.073
Average percent parens in population: 0.237
Minimum age in population: 29.08673095703125
Maximum age in population: 34.97320413589478
Average age in population: 32.95129857730865
Median age in population: 33.00378155708313
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 180
Genome diversity (% unique genomes):	 0.376
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 201
Syntactic diversity (% unique Push programs):	 0.363
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7629125
--- Timings ---
Current time: 1559314395208 milliseconds
Total Time:          60.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.3 seconds, 75.2%
Fitness Testing:      8.7 seconds, 14.5%
Report:               6.1 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: 51                 
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 47                 
Correct output: -9                  | Program output: 13                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 62                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 85                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 55                 
Correct output: 10                  | Program output: 30                 
Correct output: 37                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 82                 
Correct output: 51                  | Program output: 94                 
Correct output: 19                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 73                 
Correct output: 17                  | Program output: 58                 
Correct output: 0                   | Program output: 8                  
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 45                 
Correct output: 25                  | Program output: 42                 
Correct output: -60                 | Program output: -13                
Correct output: -97                 | Program output: 79                 
Correct output: -47                 | Program output: 35                 
Correct output: 19                  | Program output: 79                 
Correct output: -63                 | Program output: 44                 
Correct output: 14                  | Program output: 97                 
Correct output: 21                  | Program output: 76                 
Correct output: -90                 | Program output: 58                 
Correct output: -43                 | Program output: -30                
Correct output: -7                  | Program output: 90                 
Correct output: -41                 | Program output: -4                 
Correct output: -92                 | Program output: -84                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -87                
Correct output: -12                 | Program output: 54                 
Correct output: -15                 | Program output: 61                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -82                
Correct output: -20                 | Program output: 35                 
Correct output: -65                 | Program output: -52                
Correct output: -96                 | Program output: -78                
Correct output: -99                 | Program output: 51                 
Correct output: -90                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: 64                 
Correct output: -36                 | Program output: -3                 
Correct output: -66                 | Program output: -23                
Correct output: -90                 | Program output: -60                
Correct output: -92                 | Program output: -56                
Correct output: -40                 | Program output: 51                 
Correct output: -95                 | Program output: 32                 
Correct output: -100                | Program output: -45                
Correct output: 74                  | Program output: 74                 
Correct output: -45                 | Program output: -32                
Correct output: -79                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 7                  
Correct output: -78                 | Program output: 34                 
Correct output: -58                 | Program output: -58                
Correct output: 16                  | Program output: 35                 
Correct output: -48                 | Program output: -24                
Correct output: -38                 | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: 9                   | Program output: 71                 
Correct output: 29                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Lexicase best errors: [0 0 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Zero cases best errors: [0 0 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (522 891 169 522 194 522 194 193 169 524)
Population mean number of elite cases: 3.90
Count of perfect (error zero) individuals by case: (522 891 169 522 194 522 194 193 169 524)
Population mean number of perfect (error zero) cases: 3.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Errors: [0 0 1 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.1
Median total errors in population: 5
Error averages by case: (0.478 0.109 0.831 0.478 0.806 0.478 0.806 0.807 0.831 0.476)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.414
Average program size in population (points): 23.133
Average percent parens in population: 0.236
Minimum age in population: 31.24478912353516
Maximum age in population: 36.36299586296082
Average age in population: 34.41033943295479
Median age in population: 34.47714734077454
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 230
Genome diversity (% unique genomes):	 0.358
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 257
Syntactic diversity (% unique Push programs):	 0.344
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 7765643
--- Timings ---
Current time: 1559314397786 milliseconds
Total Time:          62.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.6 seconds, 75.8%
Fitness Testing:      8.9 seconds, 14.1%
Report:               6.2 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 28                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 5                  
Correct output: 21                  | Program output: 30                 
Correct output: 1                   | Program output: 71                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 62                 
Correct output: 31                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 37                  | Program output: 64                 
Correct output: 26                  | Program output: 48                 
Correct output: 16                  | Program output: 97                 
Correct output: 51                  | Program output: 100                
Correct output: 19                  | Program output: 100                
Correct output: 0                   | Program output: 60                 
Correct output: 12                  | Program output: 100                
Correct output: 17                  | Program output: 97                 
Correct output: 0                   | Program output: 0                  
Correct output: 44                  | Program output: 83                 
Correct output: 16                  | Program output: 16                 
Correct output: 25                  | Program output: 97                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -15                
Correct output: -47                 | Program output: -47                
Correct output: 19                  | Program output: 72                 
Correct output: -63                 | Program output: 0                  
Correct output: 14                  | Program output: 33                 
Correct output: 21                  | Program output: 21                 
Correct output: -90                 | Program output: 56                 
Correct output: -43                 | Program output: 48                 
Correct output: -7                  | Program output: 99                 
Correct output: -41                 | Program output: 43                 
Correct output: -92                 | Program output: -92                
Correct output: -2                  | Program output: 73                 
Correct output: -78                 | Program output: 83                 
Correct output: -52                 | Program output: 24                 
Correct output: -62                 | Program output: 51                 
Correct output: -89                 | Program output: 35                 
Correct output: -12                 | Program output: -4                 
Correct output: -15                 | Program output: -15                
Correct output: -40                 | Program output: 83                 
Correct output: -4                  | Program output: 88                 
Correct output: -89                 | Program output: 35                 
Correct output: -20                 | Program output: 80                 
Correct output: -65                 | Program output: 100                
Correct output: -96                 | Program output: 64                 
Correct output: -99                 | Program output: 6                  
Correct output: -90                 | Program output: 57                 
Correct output: -77                 | Program output: -26                
Correct output: -58                 | Program output: -21                
Correct output: -36                 | Program output: 24                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -46                
Correct output: -92                 | Program output: 65                 
Correct output: -40                 | Program output: -17                
Correct output: -95                 | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: 74                  | Program output: 97                 
Correct output: -45                 | Program output: 77                 
Correct output: -79                 | Program output: 27                 
Correct output: -37                 | Program output: -2                 
Correct output: -71                 | Program output: -67                
Correct output: -59                 | Program output: -15                
Correct output: -97                 | Program output: -63                
Correct output: -40                 | Program output: 56                 
Correct output: -98                 | Program output: -7                 
Correct output: -70                 | Program output: 3                  
Correct output: -78                 | Program output: 89                 
Correct output: -58                 | Program output: 83                 
Correct output: 16                  | Program output: 90                 
Correct output: -48                 | Program output: -48                
Correct output: -38                 | Program output: -1                 
Correct output: -81                 | Program output: 76                 
Correct output: -41                 | Program output: -41                
Correct output: -36                 | Program output: 33                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: 14                 
Correct output: -97                 | Program output: -82                
Correct output: -33                 | Program output: 34                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 39                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_or exec_do*count (exec_noop in3 in2 exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Lexicase best errors: [1 1 1 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_or exec_do*count (exec_noop in3 in2 exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Zero cases best errors: [1 1 1 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 1000 307 1000 883 307 174 399)
Population mean number of elite cases: 7.07
Count of perfect (error zero) individuals by case: (0 0 0 0 307 0 883 307 174 399)
Population mean number of perfect (error zero) cases: 2.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Best program: (boolean_or exec_do*count (exec_noop in3 in2 exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Errors: [1 1 1 1 0 1 0 0 1 1]
Total: 7
Mean: 0.7
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.93
Median total errors in population: 8
Error averages by case: (1.0 1.0 1.0 1.0 0.693 1.0 0.117 0.693 0.826 0.601)
Error minima by case: (1 1 1 1 0 1 0 0 0 0)
Average genome size in population (length): 17.42
Average program size in population (points): 23.214
Average percent parens in population: 0.239
Minimum age in population: 32.69736671447754
Maximum age in population: 37.74910795688629
Average age in population: 35.84435132288933
Median age in population: 35.89791071414948
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 255
Genome diversity (% unique genomes):	 0.384
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 259
Syntactic diversity (% unique Push programs):	 0.365
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 7903957
--- Timings ---
Current time: 1559314399923 milliseconds
Total Time:          65.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.5 seconds, 76.1%
Fitness Testing:      9.1 seconds, 13.9%
Report:               6.4 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: 51                 
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 47                 
Correct output: -9                  | Program output: 13                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 62                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 85                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 55                 
Correct output: 10                  | Program output: 30                 
Correct output: 37                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 82                 
Correct output: 51                  | Program output: 94                 
Correct output: 19                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 73                 
Correct output: 17                  | Program output: 58                 
Correct output: 0                   | Program output: 8                  
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 45                 
Correct output: 25                  | Program output: 42                 
Correct output: -60                 | Program output: -13                
Correct output: -97                 | Program output: 79                 
Correct output: -47                 | Program output: 35                 
Correct output: 19                  | Program output: 79                 
Correct output: -63                 | Program output: 44                 
Correct output: 14                  | Program output: 97                 
Correct output: 21                  | Program output: 76                 
Correct output: -90                 | Program output: 58                 
Correct output: -43                 | Program output: -30                
Correct output: -7                  | Program output: 90                 
Correct output: -41                 | Program output: -4                 
Correct output: -92                 | Program output: -84                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -87                
Correct output: -12                 | Program output: 54                 
Correct output: -15                 | Program output: 61                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -82                
Correct output: -20                 | Program output: 35                 
Correct output: -65                 | Program output: -52                
Correct output: -96                 | Program output: -78                
Correct output: -99                 | Program output: 51                 
Correct output: -90                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: 64                 
Correct output: -36                 | Program output: -3                 
Correct output: -66                 | Program output: -23                
Correct output: -90                 | Program output: -60                
Correct output: -92                 | Program output: -56                
Correct output: -40                 | Program output: 51                 
Correct output: -95                 | Program output: 32                 
Correct output: -100                | Program output: -45                
Correct output: 74                  | Program output: 74                 
Correct output: -45                 | Program output: -32                
Correct output: -79                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 7                  
Correct output: -78                 | Program output: 34                 
Correct output: -58                 | Program output: -58                
Correct output: 16                  | Program output: 35                 
Correct output: -48                 | Program output: -24                
Correct output: -38                 | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: 9                   | Program output: 71                 
Correct output: 29                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Lexicase best errors: [1 0 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Zero cases best errors: [1 0 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 254 253 253 200 254 253 1000 441 897)
Population mean number of elite cases: 4.80
Count of perfect (error zero) individuals by case: (0 254 253 253 200 254 253 0 441 897)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer})
Best program: (boolean_or integer_fromboolean exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer)
Errors: [1 0 0 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 10
Size: 12
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.195
Median total errors in population: 8
Error averages by case: (1.0 0.746 0.747 0.747 0.8 0.746 0.747 1.0 0.559 0.103)
Error minima by case: (1 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 17.439
Average program size in population (points): 23.219
Average percent parens in population: 0.241
Minimum age in population: 34.05519104003906
Maximum age in population: 38.94001460075378
Average age in population: 37.31808807039261
Median age in population: 37.37888446450233
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 342
Genome diversity (% unique genomes):	 0.37
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 348
Syntactic diversity (% unique Push programs):	 0.354
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 8046463
--- Timings ---
Current time: 1559314402186 milliseconds
Total Time:          67.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.5 seconds, 76.5%
Fitness Testing:      9.2 seconds, 13.7%
Report:               6.5 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 28                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 5                  
Correct output: 21                  | Program output: 30                 
Correct output: 1                   | Program output: 71                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 62                 
Correct output: 31                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 37                  | Program output: 64                 
Correct output: 26                  | Program output: 48                 
Correct output: 16                  | Program output: 97                 
Correct output: 51                  | Program output: 100                
Correct output: 19                  | Program output: 100                
Correct output: 0                   | Program output: 60                 
Correct output: 12                  | Program output: 100                
Correct output: 17                  | Program output: 97                 
Correct output: 0                   | Program output: 0                  
Correct output: 44                  | Program output: 83                 
Correct output: 16                  | Program output: 16                 
Correct output: 25                  | Program output: 97                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -15                
Correct output: -47                 | Program output: -47                
Correct output: 19                  | Program output: 72                 
Correct output: -63                 | Program output: 0                  
Correct output: 14                  | Program output: 33                 
Correct output: 21                  | Program output: 21                 
Correct output: -90                 | Program output: 56                 
Correct output: -43                 | Program output: 48                 
Correct output: -7                  | Program output: 99                 
Correct output: -41                 | Program output: 43                 
Correct output: -92                 | Program output: -92                
Correct output: -2                  | Program output: 73                 
Correct output: -78                 | Program output: 83                 
Correct output: -52                 | Program output: 24                 
Correct output: -62                 | Program output: 51                 
Correct output: -89                 | Program output: 35                 
Correct output: -12                 | Program output: -4                 
Correct output: -15                 | Program output: -15                
Correct output: -40                 | Program output: 83                 
Correct output: -4                  | Program output: 88                 
Correct output: -89                 | Program output: 35                 
Correct output: -20                 | Program output: 80                 
Correct output: -65                 | Program output: 100                
Correct output: -96                 | Program output: 64                 
Correct output: -99                 | Program output: 6                  
Correct output: -90                 | Program output: 57                 
Correct output: -77                 | Program output: -26                
Correct output: -58                 | Program output: -21                
Correct output: -36                 | Program output: 24                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -46                
Correct output: -92                 | Program output: 65                 
Correct output: -40                 | Program output: -17                
Correct output: -95                 | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: 74                  | Program output: 97                 
Correct output: -45                 | Program output: 77                 
Correct output: -79                 | Program output: 27                 
Correct output: -37                 | Program output: -2                 
Correct output: -71                 | Program output: -67                
Correct output: -59                 | Program output: -15                
Correct output: -97                 | Program output: -63                
Correct output: -40                 | Program output: 56                 
Correct output: -98                 | Program output: -7                 
Correct output: -70                 | Program output: 3                  
Correct output: -78                 | Program output: 89                 
Correct output: -58                 | Program output: 83                 
Correct output: 16                  | Program output: 90                 
Correct output: -48                 | Program output: -48                
Correct output: -38                 | Program output: -1                 
Correct output: -81                 | Program output: 76                 
Correct output: -41                 | Program output: -41                
Correct output: -36                 | Program output: 33                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: 14                 
Correct output: -97                 | Program output: -82                
Correct output: -33                 | Program output: 34                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 39                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_or exec_do*count (exec_noop in3 in2 exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Lexicase best errors: [1 0 1 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_or exec_do*count (exec_noop in3 in2 exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Zero cases best errors: [1 0 1 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (671 127 1000 798 102 1000 100 887 1000 125)
Population mean number of elite cases: 5.81
Count of perfect (error zero) individuals by case: (671 127 0 798 102 0 100 887 0 125)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Best program: (boolean_or exec_do*count (exec_noop in3 in2 exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Errors: [1 0 1 0 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.19
Median total errors in population: 7
Error averages by case: (0.329 0.873 1.0 0.202 0.898 1.0 0.9 0.113 1.0 0.875)
Error minima by case: (0 0 1 0 0 1 0 0 1 0)
Average genome size in population (length): 13.703
Average program size in population (points): 18.013
Average percent parens in population: 0.232
Minimum age in population: 35.66337966918945
Maximum age in population: 40.67632380127907
Average age in population: 38.77626187464595
Median age in population: 38.78512227535248
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 252
Genome diversity (% unique genomes):	 0.326
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 274
Syntactic diversity (% unique Push programs):	 0.307
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 8162847
--- Timings ---
Current time: 1559314404591 milliseconds
Total Time:          69.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        53.6 seconds, 77.0%
Fitness Testing:      9.4 seconds, 13.4%
Report:               6.6 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: 51                 
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 47                 
Correct output: -9                  | Program output: 13                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 62                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 85                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 55                 
Correct output: 10                  | Program output: 30                 
Correct output: 37                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 82                 
Correct output: 51                  | Program output: 94                 
Correct output: 19                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 73                 
Correct output: 17                  | Program output: 58                 
Correct output: 0                   | Program output: 8                  
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 45                 
Correct output: 25                  | Program output: 42                 
Correct output: -60                 | Program output: -13                
Correct output: -97                 | Program output: 79                 
Correct output: -47                 | Program output: 35                 
Correct output: 19                  | Program output: 79                 
Correct output: -63                 | Program output: 44                 
Correct output: 14                  | Program output: 97                 
Correct output: 21                  | Program output: 76                 
Correct output: -90                 | Program output: 58                 
Correct output: -43                 | Program output: -30                
Correct output: -7                  | Program output: 90                 
Correct output: -41                 | Program output: -4                 
Correct output: -92                 | Program output: -84                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -87                
Correct output: -12                 | Program output: 54                 
Correct output: -15                 | Program output: 61                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -82                
Correct output: -20                 | Program output: 35                 
Correct output: -65                 | Program output: -52                
Correct output: -96                 | Program output: -78                
Correct output: -99                 | Program output: 51                 
Correct output: -90                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: 64                 
Correct output: -36                 | Program output: -3                 
Correct output: -66                 | Program output: -23                
Correct output: -90                 | Program output: -60                
Correct output: -92                 | Program output: -56                
Correct output: -40                 | Program output: 51                 
Correct output: -95                 | Program output: 32                 
Correct output: -100                | Program output: -45                
Correct output: 74                  | Program output: 74                 
Correct output: -45                 | Program output: -32                
Correct output: -79                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 7                  
Correct output: -78                 | Program output: 34                 
Correct output: -58                 | Program output: -58                
Correct output: 16                  | Program output: 35                 
Correct output: -48                 | Program output: -24                
Correct output: -38                 | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: 9                   | Program output: 71                 
Correct output: 29                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Lexicase best errors: [0 0 1 1 1 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Zero cases best errors: [0 0 1 1 1 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (184 184 1000 1000 283 411 283 184 1000 411)
Population mean number of elite cases: 4.94
Count of perfect (error zero) individuals by case: (184 184 0 0 283 411 283 184 0 411)
Population mean number of perfect (error zero) cases: 1.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer})
Best program: (boolean_or boolean_shove exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer)
Errors: [0 0 1 1 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 10
Size: 12
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 8.06
Median total errors in population: 8
Error averages by case: (0.816 0.816 1.0 1.0 0.717 0.589 0.717 0.816 1.0 0.589)
Error minima by case: (0 0 1 1 0 0 0 0 1 0)
Average genome size in population (length): 20.361
Average program size in population (points): 27.229
Average percent parens in population: 0.245
Minimum age in population: 37.48424482345581
Maximum age in population: 42.09713722765446
Average age in population: 40.2155126671046
Median age in population: 40.27027502655983
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 265
Genome diversity (% unique genomes):	 0.408
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 271
Syntactic diversity (% unique Push programs):	 0.394
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 8321919
--- Timings ---
Current time: 1559314406681 milliseconds
Total Time:          71.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        55.4 seconds, 77.2%
Fitness Testing:      9.5 seconds, 13.3%
Report:               6.7 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: -22                
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 35                 
Correct output: 18                  | Program output: 38                 
Correct output: 1                   | Program output: 92                 
Correct output: 31                  | Program output: 51                 
Correct output: 10                  | Program output: 83                 
Correct output: 37                  | Program output: 80                 
Correct output: 26                  | Program output: 67                 
Correct output: 16                  | Program output: 76                 
Correct output: 51                  | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 79                 
Correct output: 12                  | Program output: 37                 
Correct output: 17                  | Program output: 64                 
Correct output: 0                   | Program output: 63                 
Correct output: 44                  | Program output: 72                 
Correct output: 16                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: 91                 
Correct output: -97                 | Program output: -7                 
Correct output: -47                 | Program output: 27                 
Correct output: 19                  | Program output: 44                 
Correct output: -63                 | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 72                 
Correct output: -90                 | Program output: 32                 
Correct output: -43                 | Program output: 85                 
Correct output: -7                  | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: 85                 
Correct output: -2                  | Program output: 61                 
Correct output: -78                 | Program output: 17                 
Correct output: -52                 | Program output: -52                
Correct output: -62                 | Program output: -25                
Correct output: -89                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -15                 | Program output: 38                 
Correct output: -40                 | Program output: 71                 
Correct output: -4                  | Program output: 92                 
Correct output: -89                 | Program output: 82                 
Correct output: -20                 | Program output: 13                 
Correct output: -65                 | Program output: 13                 
Correct output: -96                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: 41                 
Correct output: -77                 | Program output: 96                 
Correct output: -58                 | Program output: -25                
Correct output: -36                 | Program output: -36                
Correct output: -66                 | Program output: 70                 
Correct output: -90                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -57                
Correct output: 74                  | Program output: 94                 
Correct output: -45                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -15                
Correct output: -71                 | Program output: 24                 
Correct output: -59                 | Program output: 16                 
Correct output: -97                 | Program output: 89                 
Correct output: -40                 | Program output: 28                 
Correct output: -98                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -78                 | Program output: -41                
Correct output: -58                 | Program output: -53                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 40                 
Correct output: -38                 | Program output: -38                
Correct output: -81                 | Program output: 45                 
Correct output: -41                 | Program output: 99                 
Correct output: -36                 | Program output: 82                 
Correct output: -79                 | Program output: 72                 
Correct output: -72                 | Program output: 26                 
Correct output: -97                 | Program output: -26                
Correct output: -33                 | Program output: -15                
Correct output: 9                   | Program output: 83                 
Correct output: 29                  | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_or exec_do*count (integer_eq integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times (integer_gte in4)) exec_dup_times (boolean_empty boolean_or exec_s (exec_eq exec_if () (integer_inc) in4 exec_empty boolean_flush exec_k (integer_stackdepth boolean_empty boolean_or exec_stackdepth) (integer_lt boolean_shove) integer_lte exec_yank) (boolean_stackdepth exec_k_when_autoconstructing (exec_yank exec_s (boolean_yankdup boolean_and boolean_eq integer_empty in4 print_integer) (integer_gt integer_dup_times) ()) ()) ())))
Lexicase best errors: [1 1 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 68
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_or exec_do*count (integer_eq integer_stackdepth boolean_or exec_pop (integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times (integer_gte in4)) exec_dup_times (boolean_empty boolean_or exec_s (exec_eq exec_if () (integer_inc) in4 exec_empty boolean_flush exec_k (integer_stackdepth boolean_empty boolean_or exec_stackdepth) (integer_lt boolean_shove) integer_lte exec_yank) (boolean_stackdepth exec_k_when_autoconstructing (exec_yank exec_s (boolean_yankdup boolean_and boolean_eq integer_empty in4 print_integer) (integer_gt integer_dup_times) ()) ()) ())))
Zero cases best errors: [1 1 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 68
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (249 250 1000 225 225 1000 226 411 1000 1000)
Population mean number of elite cases: 5.59
Count of perfect (error zero) individuals by case: (249 250 0 225 225 0 226 411 0 0)
Population mean number of perfect (error zero) cases: 1.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times})
Best program: (boolean_or boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop (integer_inc) integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times () print_boolean integer_inc) exec_swap (exec_if (exec_dup_times (boolean_empty boolean_or exec_do*range (boolean_eq integer_empty in4 print_integer integer_gt integer_dup_times))) ()) ())
Errors: [1 1 1 0 0 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 8.414
Median total errors in population: 9
Error averages by case: (0.751 0.75 1.0 0.775 0.775 1.0 0.774 0.589 1.0 1.0)
Error minima by case: (0 0 1 0 0 1 0 0 1 1)
Average genome size in population (length): 17.393
Average program size in population (points): 23.191
Average percent parens in population: 0.242
Minimum age in population: 38.89851236343384
Maximum age in population: 43.43152073025703
Average age in population: 41.72919158745557
Median age in population: 41.78071238845587
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.397
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.384
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 8457334
--- Timings ---
Current time: 1559314409335 milliseconds
Total Time:          74.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        57.7 seconds, 77.7%
Fitness Testing:      9.7 seconds, 13.0%
Report:               6.8 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: -22                
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 35                 
Correct output: 18                  | Program output: 38                 
Correct output: 1                   | Program output: 92                 
Correct output: 31                  | Program output: 51                 
Correct output: 10                  | Program output: 83                 
Correct output: 37                  | Program output: 80                 
Correct output: 26                  | Program output: 67                 
Correct output: 16                  | Program output: 76                 
Correct output: 51                  | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 79                 
Correct output: 12                  | Program output: 37                 
Correct output: 17                  | Program output: 64                 
Correct output: 0                   | Program output: 63                 
Correct output: 44                  | Program output: 72                 
Correct output: 16                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: 91                 
Correct output: -97                 | Program output: -7                 
Correct output: -47                 | Program output: 27                 
Correct output: 19                  | Program output: 44                 
Correct output: -63                 | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 72                 
Correct output: -90                 | Program output: 32                 
Correct output: -43                 | Program output: 85                 
Correct output: -7                  | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: 85                 
Correct output: -2                  | Program output: 61                 
Correct output: -78                 | Program output: 17                 
Correct output: -52                 | Program output: -52                
Correct output: -62                 | Program output: -25                
Correct output: -89                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -15                 | Program output: 38                 
Correct output: -40                 | Program output: 71                 
Correct output: -4                  | Program output: 92                 
Correct output: -89                 | Program output: 82                 
Correct output: -20                 | Program output: 13                 
Correct output: -65                 | Program output: 13                 
Correct output: -96                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: 41                 
Correct output: -77                 | Program output: 96                 
Correct output: -58                 | Program output: -25                
Correct output: -36                 | Program output: -36                
Correct output: -66                 | Program output: 70                 
Correct output: -90                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -57                
Correct output: 74                  | Program output: 94                 
Correct output: -45                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -15                
Correct output: -71                 | Program output: 24                 
Correct output: -59                 | Program output: 16                 
Correct output: -97                 | Program output: 89                 
Correct output: -40                 | Program output: 28                 
Correct output: -98                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -78                 | Program output: -41                
Correct output: -58                 | Program output: -53                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 40                 
Correct output: -38                 | Program output: -38                
Correct output: -81                 | Program output: 45                 
Correct output: -41                 | Program output: 99                 
Correct output: -36                 | Program output: 82                 
Correct output: -79                 | Program output: 72                 
Correct output: -72                 | Program output: 26                 
Correct output: -97                 | Program output: -26                
Correct output: -33                 | Program output: -15                
Correct output: 9                   | Program output: 83                 
Correct output: 29                  | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_or exec_do*count (exec_noop in3 in2 exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Lexicase best errors: [1 0 1 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_or exec_do*count (exec_noop in3 in2 exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Zero cases best errors: [1 0 1 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (396 721 398 1000 170 170 325 325 169 1000)
Population mean number of elite cases: 4.67
Count of perfect (error zero) individuals by case: (396 721 398 0 170 170 325 325 169 0)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction print_integer})
Best program: (in4 print_integer)
Errors: [0 0 0 1 1 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 2
Size: 3
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.326
Median total errors in population: 7
Error averages by case: (0.604 0.279 0.602 1.0 0.83 0.83 0.675 0.675 0.831 1.0)
Error minima by case: (0 0 0 1 0 0 0 0 0 1)
Average genome size in population (length): 21.871
Average program size in population (points): 29.318
Average percent parens in population: 0.250
Minimum age in population: 40.3085663318634
Maximum age in population: 45.13088895753026
Average age in population: 43.17344277942553
Median age in population: 43.24480256438255
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.437
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 181
Syntactic diversity (% unique Push programs):	 0.429
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 8631690
--- Timings ---
Current time: 1559314411664 milliseconds
Total Time:          76.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.8 seconds, 77.9%
Fitness Testing:      9.9 seconds, 12.8%
Report:               7.0 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: 51                 
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 47                 
Correct output: -9                  | Program output: 13                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 62                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 85                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 55                 
Correct output: 10                  | Program output: 30                 
Correct output: 37                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 82                 
Correct output: 51                  | Program output: 94                 
Correct output: 19                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 73                 
Correct output: 17                  | Program output: 58                 
Correct output: 0                   | Program output: 8                  
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 45                 
Correct output: 25                  | Program output: 42                 
Correct output: -60                 | Program output: -13                
Correct output: -97                 | Program output: 79                 
Correct output: -47                 | Program output: 35                 
Correct output: 19                  | Program output: 79                 
Correct output: -63                 | Program output: 44                 
Correct output: 14                  | Program output: 97                 
Correct output: 21                  | Program output: 76                 
Correct output: -90                 | Program output: 58                 
Correct output: -43                 | Program output: -30                
Correct output: -7                  | Program output: 90                 
Correct output: -41                 | Program output: -4                 
Correct output: -92                 | Program output: -84                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -87                
Correct output: -12                 | Program output: 54                 
Correct output: -15                 | Program output: 61                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -82                
Correct output: -20                 | Program output: 35                 
Correct output: -65                 | Program output: -52                
Correct output: -96                 | Program output: -78                
Correct output: -99                 | Program output: 51                 
Correct output: -90                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: 64                 
Correct output: -36                 | Program output: -3                 
Correct output: -66                 | Program output: -23                
Correct output: -90                 | Program output: -60                
Correct output: -92                 | Program output: -56                
Correct output: -40                 | Program output: 51                 
Correct output: -95                 | Program output: 32                 
Correct output: -100                | Program output: -45                
Correct output: 74                  | Program output: 74                 
Correct output: -45                 | Program output: -32                
Correct output: -79                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 7                  
Correct output: -78                 | Program output: 34                 
Correct output: -58                 | Program output: -58                
Correct output: 16                  | Program output: 35                 
Correct output: -48                 | Program output: -24                
Correct output: -38                 | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: 9                   | Program output: 71                 
Correct output: 29                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_mod integer_min exec_dup_items) print_integer))
Lexicase best errors: [0 0 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_mod integer_min exec_dup_items) print_integer))
Zero cases best errors: [0 0 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (338 338 870 1 278 339 532 254 338 339)
Population mean number of elite cases: 3.63
Count of perfect (error zero) individuals by case: (338 338 870 1 278 339 532 254 338 339)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Best program: (boolean_or exec_do*count (exec_noop in3 boolean_or exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Errors: [0 0 0 1 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.373
Median total errors in population: 7
Error averages by case: (0.662 0.662 0.13 0.999 0.722 0.661 0.468 0.746 0.662 0.661)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.069
Average program size in population (points): 22.795
Average percent parens in population: 0.245
Minimum age in population: 41.3085663318634
Maximum age in population: 46.67373763397336
Average age in population: 44.66750245800428
Median age in population: 44.72085366491228
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.415
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 8767705
--- Timings ---
Current time: 1559314413871 milliseconds
Total Time:          79.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.7 seconds, 78.2%
Fitness Testing:     10.0 seconds, 12.7%
Report:               7.1 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: -22                
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 35                 
Correct output: 18                  | Program output: 38                 
Correct output: 1                   | Program output: 92                 
Correct output: 31                  | Program output: 51                 
Correct output: 10                  | Program output: 83                 
Correct output: 37                  | Program output: 80                 
Correct output: 26                  | Program output: 67                 
Correct output: 16                  | Program output: 76                 
Correct output: 51                  | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 79                 
Correct output: 12                  | Program output: 37                 
Correct output: 17                  | Program output: 64                 
Correct output: 0                   | Program output: 63                 
Correct output: 44                  | Program output: 72                 
Correct output: 16                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: 91                 
Correct output: -97                 | Program output: -7                 
Correct output: -47                 | Program output: 27                 
Correct output: 19                  | Program output: 44                 
Correct output: -63                 | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 72                 
Correct output: -90                 | Program output: 32                 
Correct output: -43                 | Program output: 85                 
Correct output: -7                  | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: 85                 
Correct output: -2                  | Program output: 61                 
Correct output: -78                 | Program output: 17                 
Correct output: -52                 | Program output: -52                
Correct output: -62                 | Program output: -25                
Correct output: -89                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -15                 | Program output: 38                 
Correct output: -40                 | Program output: 71                 
Correct output: -4                  | Program output: 92                 
Correct output: -89                 | Program output: 82                 
Correct output: -20                 | Program output: 13                 
Correct output: -65                 | Program output: 13                 
Correct output: -96                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: 41                 
Correct output: -77                 | Program output: 96                 
Correct output: -58                 | Program output: -25                
Correct output: -36                 | Program output: -36                
Correct output: -66                 | Program output: 70                 
Correct output: -90                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -57                
Correct output: 74                  | Program output: 94                 
Correct output: -45                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -15                
Correct output: -71                 | Program output: 24                 
Correct output: -59                 | Program output: 16                 
Correct output: -97                 | Program output: 89                 
Correct output: -40                 | Program output: 28                 
Correct output: -98                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -78                 | Program output: -41                
Correct output: -58                 | Program output: -53                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 40                 
Correct output: -38                 | Program output: -38                
Correct output: -81                 | Program output: 45                 
Correct output: -41                 | Program output: 99                 
Correct output: -36                 | Program output: 82                 
Correct output: -79                 | Program output: 72                 
Correct output: -72                 | Program output: 26                 
Correct output: -97                 | Program output: -26                
Correct output: -33                 | Program output: -15                
Correct output: 9                   | Program output: 83                 
Correct output: 29                  | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction print_integer})
Lexicase best program: (in4 print_integer)
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 3
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction print_integer})
Zero cases best program: (in4 print_integer)
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 3
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (893 901 122 142 122 122 122 415 122 151)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (893 901 122 142 122 122 122 415 122 151)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 2, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt})
Best program: (boolean_or exec_do*count (exec_noop integer_stackdepth boolean_or exec_pop () integer_inc integer_flush exec_dup_items) exec_k (integer_lt boolean_flush integer_mod integer_dup_items) (integer_empty exec_dup_times (integer_gte integer_inc)) exec_swap (exec_if (exec_dup_times (boolean_empty in1 exec_do*range () exec_y_when_autoconstructing (exec_if () (integer_rot)) integer_eq exec_empty boolean_flush exec_k (integer_stackdepth boolean_empty integer_pop exec_stackdepth) (integer_lt boolean_shove) integer_lt exec_yank) boolean_stackdepth exec_k_when_autoconstructing (exec_yank integer_fromboolean boolean_yankdup boolean_and boolean_eq integer_empty in4 print_integer integer_gt) ()) ()) ())
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 50
Size: 69
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 6.888
Median total errors in population: 8
Error averages by case: (0.107 0.099 0.878 0.858 0.878 0.878 0.878 0.585 0.878 0.849)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.686
Average program size in population (points): 16.708
Average percent parens in population: 0.236
Minimum age in population: 42.88846343755722
Maximum age in population: 48.24221894145012
Average age in population: 46.38153447863553
Median age in population: 46.50197071442381
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.344
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.323
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 8870441
--- Timings ---
Current time: 1559314416303 milliseconds
Total Time:          81.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.8 seconds, 78.5%
Fitness Testing:     10.1 seconds, 12.5%
Report:               7.2 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: 51                 
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 47                 
Correct output: -9                  | Program output: 13                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 62                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 85                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 55                 
Correct output: 10                  | Program output: 30                 
Correct output: 37                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 82                 
Correct output: 51                  | Program output: 94                 
Correct output: 19                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 73                 
Correct output: 17                  | Program output: 58                 
Correct output: 0                   | Program output: 8                  
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 45                 
Correct output: 25                  | Program output: 42                 
Correct output: -60                 | Program output: -13                
Correct output: -97                 | Program output: 79                 
Correct output: -47                 | Program output: 35                 
Correct output: 19                  | Program output: 79                 
Correct output: -63                 | Program output: 44                 
Correct output: 14                  | Program output: 97                 
Correct output: 21                  | Program output: 76                 
Correct output: -90                 | Program output: 58                 
Correct output: -43                 | Program output: -30                
Correct output: -7                  | Program output: 90                 
Correct output: -41                 | Program output: -4                 
Correct output: -92                 | Program output: -84                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -87                
Correct output: -12                 | Program output: 54                 
Correct output: -15                 | Program output: 61                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -82                
Correct output: -20                 | Program output: 35                 
Correct output: -65                 | Program output: -52                
Correct output: -96                 | Program output: -78                
Correct output: -99                 | Program output: 51                 
Correct output: -90                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: 64                 
Correct output: -36                 | Program output: -3                 
Correct output: -66                 | Program output: -23                
Correct output: -90                 | Program output: -60                
Correct output: -92                 | Program output: -56                
Correct output: -40                 | Program output: 51                 
Correct output: -95                 | Program output: 32                 
Correct output: -100                | Program output: -45                
Correct output: 74                  | Program output: 74                 
Correct output: -45                 | Program output: -32                
Correct output: -79                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 7                  
Correct output: -78                 | Program output: 34                 
Correct output: -58                 | Program output: -58                
Correct output: 16                  | Program output: 35                 
Correct output: -48                 | Program output: -24                
Correct output: -38                 | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: 9                   | Program output: 71                 
Correct output: 29                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Lexicase best program: (in3 boolean_xor exec_pop (integer_inc integer_min exec_dup_items) print_integer)
Lexicase best errors: [0 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 9
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_integer})
Zero cases best program: (in3 boolean_xor exec_pop (integer_inc integer_min exec_dup_items) print_integer)
Zero cases best errors: [0 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 9
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 740 2 2 2 2 123 2 136 874)
Population mean number of elite cases: 1.89
Count of perfect (error zero) individuals by case: (5 740 2 2 2 2 123 2 136 874)
Population mean number of perfect (error zero) cases: 1.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer})
Best program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_dup integer_min exec_dup_items print_integer)
Errors: [0 0 0 0 0 0 1 0 1 0]
Total: 2
Mean: 0.2
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 8.112
Median total errors in population: 8
Error averages by case: (0.995 0.26 0.998 0.998 0.998 0.998 0.877 0.998 0.864 0.126)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.955
Average program size in population (points): 26.894
Average percent parens in population: 0.265
Minimum age in population: 44.73847007751465
Maximum age in population: 49.72665655706078
Average age in population: 47.793354905657
Median age in population: 47.8626072795596
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.359
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 164
Syntactic diversity (% unique Push programs):	 0.345
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 9031508
--- Timings ---
Current time: 1559314418717 milliseconds
Total Time:          83.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.9 seconds, 78.6%
Fitness Testing:     10.3 seconds, 12.3%
Report:               7.5 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: 16                 
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 95                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 63                 
Correct output: 1                   | Program output: 43                 
Correct output: 18                  | Program output: 58                 
Correct output: 1                   | Program output: 69                 
Correct output: 31                  | Program output: 31                 
Correct output: 10                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 26                  | Program output: 98                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 51                 
Correct output: 19                  | Program output: 94                 
Correct output: 0                   | Program output: 47                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 88                 
Correct output: 44                  | Program output: 56                 
Correct output: 16                  | Program output: 54                 
Correct output: 25                  | Program output: 45                 
Correct output: -60                 | Program output: -22                
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: 85                 
Correct output: 19                  | Program output: 19                 
Correct output: -63                 | Program output: -63                
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: -43                
Correct output: -7                  | Program output: -7                 
Correct output: -41                 | Program output: 98                 
Correct output: -92                 | Program output: -60                
Correct output: -2                  | Program output: 51                 
Correct output: -78                 | Program output: -59                
Correct output: -52                 | Program output: 88                 
Correct output: -62                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 70                 
Correct output: -15                 | Program output: 72                 
Correct output: -40                 | Program output: -36                
Correct output: -4                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 76                 
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: 83                 
Correct output: -66                 | Program output: -17                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: 91                 
Correct output: -40                 | Program output: 39                 
Correct output: -95                 | Program output: -50                
Correct output: -100                | Program output: -13                
Correct output: 74                  | Program output: 92                 
Correct output: -45                 | Program output: 87                 
Correct output: -79                 | Program output: -45                
Correct output: -37                 | Program output: 40                 
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -57                
Correct output: -97                 | Program output: -57                
Correct output: -40                 | Program output: 13                 
Correct output: -98                 | Program output: 3                  
Correct output: -70                 | Program output: 91                 
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: 86                 
Correct output: 16                  | Program output: 27                 
Correct output: -48                 | Program output: -3                 
Correct output: -38                 | Program output: -3                 
Correct output: -81                 | Program output: 99                 
Correct output: -41                 | Program output: -5                 
Correct output: -36                 | Program output: 67                 
Correct output: -79                 | Program output: -77                
Correct output: -72                 | Program output: 71                 
Correct output: -97                 | Program output: 89                 
Correct output: -33                 | Program output: 22                 
Correct output: 9                   | Program output: 52                 
Correct output: 29                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_or exec_do*count (integer_yankdup in3 in1 exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Lexicase best errors: [1 1 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_or exec_do*count (integer_yankdup in3 in1 exec_pop (integer_inc integer_min exec_dup_items) print_integer))
Zero cases best errors: [1 1 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (117 1 1 704 115 115 1 117 116 116)
Population mean number of elite cases: 1.40
Count of perfect (error zero) individuals by case: (117 1 1 704 115 115 1 117 116 116)
Population mean number of perfect (error zero) cases: 1.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer})
Best program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop (integer_inc integer_min exec_dup_items) print_integer)
Errors: [1 1 1 1 0 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 8.597
Median total errors in population: 9
Error averages by case: (0.883 0.999 0.999 0.296 0.885 0.885 0.999 0.883 0.884 0.884)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 8.867
Average program size in population (points): 11.506
Average percent parens in population: 0.229
Minimum age in population: 46.53673539310694
Maximum age in population: 50.73708989447914
Average age in population: 49.2037524539833
Median age in population: 49.40185022563674
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 331
Genome diversity (% unique genomes):	 0.154
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 336
Syntactic diversity (% unique Push programs):	 0.141
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 9106536
--- Timings ---
Current time: 1559314420733 milliseconds
Total Time:          85.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.7 seconds, 78.8%
Fitness Testing:     10.4 seconds, 12.1%
Report:               7.6 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: -22                
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 35                 
Correct output: 18                  | Program output: 38                 
Correct output: 1                   | Program output: 92                 
Correct output: 31                  | Program output: 51                 
Correct output: 10                  | Program output: 83                 
Correct output: 37                  | Program output: 80                 
Correct output: 26                  | Program output: 67                 
Correct output: 16                  | Program output: 76                 
Correct output: 51                  | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 79                 
Correct output: 12                  | Program output: 37                 
Correct output: 17                  | Program output: 64                 
Correct output: 0                   | Program output: 63                 
Correct output: 44                  | Program output: 72                 
Correct output: 16                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: 91                 
Correct output: -97                 | Program output: -7                 
Correct output: -47                 | Program output: 27                 
Correct output: 19                  | Program output: 44                 
Correct output: -63                 | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 72                 
Correct output: -90                 | Program output: 32                 
Correct output: -43                 | Program output: 85                 
Correct output: -7                  | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: 85                 
Correct output: -2                  | Program output: 61                 
Correct output: -78                 | Program output: 17                 
Correct output: -52                 | Program output: -52                
Correct output: -62                 | Program output: -25                
Correct output: -89                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -15                 | Program output: 38                 
Correct output: -40                 | Program output: 71                 
Correct output: -4                  | Program output: 92                 
Correct output: -89                 | Program output: 82                 
Correct output: -20                 | Program output: 13                 
Correct output: -65                 | Program output: 13                 
Correct output: -96                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: 41                 
Correct output: -77                 | Program output: 96                 
Correct output: -58                 | Program output: -25                
Correct output: -36                 | Program output: -36                
Correct output: -66                 | Program output: 70                 
Correct output: -90                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -57                
Correct output: 74                  | Program output: 94                 
Correct output: -45                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: -37                 | Program output: -15                
Correct output: -71                 | Program output: 24                 
Correct output: -59                 | Program output: 16                 
Correct output: -97                 | Program output: 89                 
Correct output: -40                 | Program output: 28                 
Correct output: -98                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -78                 | Program output: -41                
Correct output: -58                 | Program output: -53                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 40                 
Correct output: -38                 | Program output: -38                
Correct output: -81                 | Program output: 45                 
Correct output: -41                 | Program output: 99                 
Correct output: -36                 | Program output: 82                 
Correct output: -79                 | Program output: 72                 
Correct output: -72                 | Program output: 26                 
Correct output: -97                 | Program output: -26                
Correct output: -33                 | Program output: -15                
Correct output: 9                   | Program output: 83                 
Correct output: 29                  | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_dup integer_min in4 print_integer)
Lexicase best errors: [0 1 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_dup integer_min in4 print_integer)
Zero cases best errors: [0 1 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (270 578 270 270 270 103 951 194 102 194)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (270 578 270 270 270 103 951 194 102 194)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction print_integer})
Best program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_dup integer_min in4 print_integer)
Errors: [0 1 0 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.798
Median total errors in population: 7
Error averages by case: (0.73 0.422 0.73 0.73 0.73 0.897 0.049 0.806 0.898 0.806)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 9.813
Average program size in population (points): 12.776
Average percent parens in population: 0.233
Minimum age in population: 47.75833822414279
Maximum age in population: 52.40549676772207
Average age in population: 50.94864185776678
Median age in population: 50.88797476812033
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 246
Genome diversity (% unique genomes):	 0.182
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 262
Syntactic diversity (% unique Push programs):	 0.165
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 9191286
--- Timings ---
Current time: 1559314422706 milliseconds
Total Time:          87.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.4 seconds, 79.0%
Fitness Testing:     10.6 seconds, 12.0%
Report:               7.7 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 427
Test mean error for best: 0.42700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 1
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 62                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 31                 
Correct output: 10                  | Program output: 30                 
Correct output: 37                  | Program output: 37                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 51                 
Correct output: 19                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 8                  
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 45                 
Correct output: 25                  | Program output: 42                 
Correct output: -60                 | Program output: -22                
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: 35                 
Correct output: 19                  | Program output: 19                 
Correct output: -63                 | Program output: -63                
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: -43                
Correct output: -7                  | Program output: -7                 
Correct output: -41                 | Program output: -4                 
Correct output: -92                 | Program output: -84                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 54                 
Correct output: -15                 | Program output: 61                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 51                 
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: -3                 
Correct output: -66                 | Program output: -23                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -56                
Correct output: -40                 | Program output: 39                 
Correct output: -95                 | Program output: -50                
Correct output: -100                | Program output: -45                
Correct output: 74                  | Program output: 74                 
Correct output: -45                 | Program output: -32                
Correct output: -79                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 7                  
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: -58                
Correct output: 16                  | Program output: 27                 
Correct output: -48                 | Program output: -24                
Correct output: -38                 | Program output: -3                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: -5                 
Correct output: -36                 | Program output: -36                
Correct output: -79                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: 9                   | Program output: 52                 
Correct output: 29                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_min integer_min boolean_or print_integer)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_min integer_min boolean_or print_integer)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (269 266 269 267 948 267 267 268 269 957)
Population mean number of elite cases: 4.05
Count of perfect (error zero) individuals by case: (269 266 269 267 948 267 267 268 269 957)
Population mean number of perfect (error zero) cases: 4.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 1, :instruction print_integer})
Best program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_min integer_min boolean_or print_integer)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 5.953
Median total errors in population: 8
Error averages by case: (0.731 0.734 0.731 0.733 0.052 0.733 0.733 0.732 0.731 0.043)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 10.062
Average program size in population (points): 13.097
Average percent parens in population: 0.232
Minimum age in population: 48.75833822414279
Maximum age in population: 54.04448984947521
Average age in population: 52.76783253808157
Median age in population: 52.85373857291415
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 346
Genome diversity (% unique genomes):	 0.201
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 360
Syntactic diversity (% unique Push programs):	 0.181
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 9289462
--- Timings ---
Current time: 1559314425277 milliseconds
Total Time:          90.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.7 seconds, 79.4%
Fitness Testing:     10.7 seconds, 11.8%
Report:               7.8 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 35
Successful program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_min integer_min boolean_or print_integer)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 13


Auto-simplifying with starting size: 13
step: 0
program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_min integer_min boolean_or print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 500
program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_min integer_min boolean_or print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 1000
program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_min integer_min boolean_or print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 1500
program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_min integer_min boolean_or print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 2000
program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_min integer_min boolean_or print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 2500
program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_min integer_min boolean_or print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 3000
program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_min integer_min boolean_or print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 3500
program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_min integer_min boolean_or print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 4000
program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_min integer_min boolean_or print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 4500
program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_min integer_min boolean_or print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

step: 5000
program: (boolean_or exec_do*count (integer_yankdup in3 in1) exec_pop () integer_min integer_min boolean_or print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 13

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 427
Test mean error for best: 0.42700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 1
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -64                 | Program output: 91                 
Correct output: 28                  | Program output: 54                 
Correct output: -38                 | Program output: -38                
Correct output: -27                 | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: 22                  | Program output: 62                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 31                 
Correct output: 10                  | Program output: 30                 
Correct output: 37                  | Program output: 37                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 51                 
Correct output: 19                  | Program output: 91                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 8                  
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 45                 
Correct output: 25                  | Program output: 42                 
Correct output: -60                 | Program output: -22                
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: 35                 
Correct output: 19                  | Program output: 19                 
Correct output: -63                 | Program output: -63                
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: -43                
Correct output: -7                  | Program output: -7                 
Correct output: -41                 | Program output: -4                 
Correct output: -92                 | Program output: -84                
Correct output: -2                  | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -52                 | Program output: 40                 
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 54                 
Correct output: -15                 | Program output: 61                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 51                 
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: -3                 
Correct output: -66                 | Program output: -23                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -56                
Correct output: -40                 | Program output: 39                 
Correct output: -95                 | Program output: -50                
Correct output: -100                | Program output: -45                
Correct output: 74                  | Program output: 74                 
Correct output: -45                 | Program output: -32                
Correct output: -79                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 7                  
Correct output: -78                 | Program output: -78                
Correct output: -58                 | Program output: -58                
Correct output: 16                  | Program output: 27                 
Correct output: -48                 | Program output: -24                
Correct output: -38                 | Program output: -3                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: -5                 
Correct output: -36                 | Program output: -36                
Correct output: -79                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: 9                   | Program output: 52                 
Correct output: 29                  | Program output: 29                 
;;******************************
