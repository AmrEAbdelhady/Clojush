Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[71 -52 -52 -52] -52] [[-42 16 -42 -42] -42] [[-35 -35 -35 -76] -76] [[-67 31 31 31] -67] [[-83 -83 -83 27] -83] [[70 -13 70 70] -13] [[49 -59 49 49] -59] [[54 54 54 -79] -79] [[48 -47 -47 -47] -47] [[-21 -21 -21 -77] -77] [(20 20 20 20) 20] [(-11 -11 -11 -11) -11] [(49 49 49 49) 49] [(2 2 2 2) 2] [(-25 -25 -25 -25) -25] [(46 35 52 29) 29] [(92 5 24 98) 5] [(99 60 66 1) 1] [(76 22 41 93) 22] [(90 23 45 5) 5] [(30 79 59 5) 5] [(88 18 35 11) 11] [(37 80 28 25) 25] [(11 45 95 23) 11] [(4 78 24 2) 2] [(91 79 68 25) 25] [(18 50 83 100) 18] [(0 72 85 26) 0] [(60 96 60 5) 5] [(28 5 57 91) 5] [(88 23 79 58) 23] [(97 91 99 97) 91] [(31 24 55 65) 24] [(57 17 84 15) 15] [(61 92 7 44) 7] [(21 46 -37 -92) -92] [(100 23 79 78) 23] [(69 -29 66 73) -29] [(94 25 26 -68) -68] [(-50 97 -99 1) -99] [(81 -53 19 96) -53] [(-47 -57 -32 -99) -99] [(-28 -14 76 -12) -28] [(13 -5 -47 91) -47] [(-100 50 -96 -17) -100] [(-98 -40 -55 -85) -98] [(74 -78 -61 -62) -78] [(90 74 -31 -22) -31] [(-61 4 -51 -33) -61] [(0 -6 99 -99) -99] [(-17 -61 -90 -36) -90] [(28 48 18 -21) -21] [(-96 69 -84 -90) -96] [(-88 -23 -7 -96) -96] [(-39 -29 -100 44) -100] [(30 -50 24 -34) -50] [(-24 -5 -81 63) -81] [(22 30 70 -17) -17] [(85 -53 -99 34) -99] [(13 -16 81 84) -16] [(2 11 -46 -74) -74] [(51 89 68 5) 5] [(-3 -79 -62 12) -79] [(25 14 -8 -42) -42] [(38 40 -7 37) -7] [(86 56 -67 -8) -67] [(-39 86 0 -71) -71] [(94 74 -57 -5) -57] [(-87 78 94 -83) -87] [(10 82 -10 -65) -65] [(-23 89 9 -35) -35] [(-1 57 34 -67) -67] [(99 40 -65 36) -65] [(73 13 -50 -21) -50] [(-89 -74 1 32) -89] [(-67 87 85 -3) -67] [(-65 34 4 47) -65] [(82 4 3 -95) -95] [(45 -68 -72 -51) -72] [(-35 4 99 -14) -35] [(-72 6 -86 63) -86] [(19 91 41 80) 19] [(44 -54 -92 -76) -92] [(-58 -49 99 -37) -58] [(-21 -77 -25 -21) -77] [(2 58 69 3) 2] [(60 -94 48 68) -94] [(-31 -96 90 14) -96] [(86 -75 -14 -92) -92] [(-47 14 2 -74) -74] [(60 -16 16 -37) -37] [(32 30 16 0) 0] [(-17 38 34 -20) -20] [(76 -15 -83 28) -83] [(34 20 -86 51) -86])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[71 -52 -52 -52] -52]
Train Case:   6 | Input/Output: [[-42 16 -42 -42] -42]
Train Case:   7 | Input/Output: [[-35 -35 -35 -76] -76]
Train Case:   8 | Input/Output: [[-67 31 31 31] -67]
Train Case:   9 | Input/Output: [[-83 -83 -83 27] -83]
Train Case:  10 | Input/Output: [[70 -13 70 70] -13]
Train Case:  11 | Input/Output: [[49 -59 49 49] -59]
Train Case:  12 | Input/Output: [[54 54 54 -79] -79]
Train Case:  13 | Input/Output: [[48 -47 -47 -47] -47]
Train Case:  14 | Input/Output: [[-21 -21 -21 -77] -77]
Train Case:  15 | Input/Output: [(20 20 20 20) 20]
Train Case:  16 | Input/Output: [(-11 -11 -11 -11) -11]
Train Case:  17 | Input/Output: [(49 49 49 49) 49]
Train Case:  18 | Input/Output: [(2 2 2 2) 2]
Train Case:  19 | Input/Output: [(-25 -25 -25 -25) -25]
Train Case:  20 | Input/Output: [(46 35 52 29) 29]
Train Case:  21 | Input/Output: [(92 5 24 98) 5]
Train Case:  22 | Input/Output: [(99 60 66 1) 1]
Train Case:  23 | Input/Output: [(76 22 41 93) 22]
Train Case:  24 | Input/Output: [(90 23 45 5) 5]
Train Case:  25 | Input/Output: [(30 79 59 5) 5]
Train Case:  26 | Input/Output: [(88 18 35 11) 11]
Train Case:  27 | Input/Output: [(37 80 28 25) 25]
Train Case:  28 | Input/Output: [(11 45 95 23) 11]
Train Case:  29 | Input/Output: [(4 78 24 2) 2]
Train Case:  30 | Input/Output: [(91 79 68 25) 25]
Train Case:  31 | Input/Output: [(18 50 83 100) 18]
Train Case:  32 | Input/Output: [(0 72 85 26) 0]
Train Case:  33 | Input/Output: [(60 96 60 5) 5]
Train Case:  34 | Input/Output: [(28 5 57 91) 5]
Train Case:  35 | Input/Output: [(88 23 79 58) 23]
Train Case:  36 | Input/Output: [(97 91 99 97) 91]
Train Case:  37 | Input/Output: [(31 24 55 65) 24]
Train Case:  38 | Input/Output: [(57 17 84 15) 15]
Train Case:  39 | Input/Output: [(61 92 7 44) 7]
Train Case:  40 | Input/Output: [(21 46 -37 -92) -92]
Train Case:  41 | Input/Output: [(100 23 79 78) 23]
Train Case:  42 | Input/Output: [(69 -29 66 73) -29]
Train Case:  43 | Input/Output: [(94 25 26 -68) -68]
Train Case:  44 | Input/Output: [(-50 97 -99 1) -99]
Train Case:  45 | Input/Output: [(81 -53 19 96) -53]
Train Case:  46 | Input/Output: [(-47 -57 -32 -99) -99]
Train Case:  47 | Input/Output: [(-28 -14 76 -12) -28]
Train Case:  48 | Input/Output: [(13 -5 -47 91) -47]
Train Case:  49 | Input/Output: [(-100 50 -96 -17) -100]
Train Case:  50 | Input/Output: [(-98 -40 -55 -85) -98]
Train Case:  51 | Input/Output: [(74 -78 -61 -62) -78]
Train Case:  52 | Input/Output: [(90 74 -31 -22) -31]
Train Case:  53 | Input/Output: [(-61 4 -51 -33) -61]
Train Case:  54 | Input/Output: [(0 -6 99 -99) -99]
Train Case:  55 | Input/Output: [(-17 -61 -90 -36) -90]
Train Case:  56 | Input/Output: [(28 48 18 -21) -21]
Train Case:  57 | Input/Output: [(-96 69 -84 -90) -96]
Train Case:  58 | Input/Output: [(-88 -23 -7 -96) -96]
Train Case:  59 | Input/Output: [(-39 -29 -100 44) -100]
Train Case:  60 | Input/Output: [(30 -50 24 -34) -50]
Train Case:  61 | Input/Output: [(-24 -5 -81 63) -81]
Train Case:  62 | Input/Output: [(22 30 70 -17) -17]
Train Case:  63 | Input/Output: [(85 -53 -99 34) -99]
Train Case:  64 | Input/Output: [(13 -16 81 84) -16]
Train Case:  65 | Input/Output: [(2 11 -46 -74) -74]
Train Case:  66 | Input/Output: [(51 89 68 5) 5]
Train Case:  67 | Input/Output: [(-3 -79 -62 12) -79]
Train Case:  68 | Input/Output: [(25 14 -8 -42) -42]
Train Case:  69 | Input/Output: [(38 40 -7 37) -7]
Train Case:  70 | Input/Output: [(86 56 -67 -8) -67]
Train Case:  71 | Input/Output: [(-39 86 0 -71) -71]
Train Case:  72 | Input/Output: [(94 74 -57 -5) -57]
Train Case:  73 | Input/Output: [(-87 78 94 -83) -87]
Train Case:  74 | Input/Output: [(10 82 -10 -65) -65]
Train Case:  75 | Input/Output: [(-23 89 9 -35) -35]
Train Case:  76 | Input/Output: [(-1 57 34 -67) -67]
Train Case:  77 | Input/Output: [(99 40 -65 36) -65]
Train Case:  78 | Input/Output: [(73 13 -50 -21) -50]
Train Case:  79 | Input/Output: [(-89 -74 1 32) -89]
Train Case:  80 | Input/Output: [(-67 87 85 -3) -67]
Train Case:  81 | Input/Output: [(-65 34 4 47) -65]
Train Case:  82 | Input/Output: [(82 4 3 -95) -95]
Train Case:  83 | Input/Output: [(45 -68 -72 -51) -72]
Train Case:  84 | Input/Output: [(-35 4 99 -14) -35]
Train Case:  85 | Input/Output: [(-72 6 -86 63) -86]
Train Case:  86 | Input/Output: [(19 91 41 80) 19]
Train Case:  87 | Input/Output: [(44 -54 -92 -76) -92]
Train Case:  88 | Input/Output: [(-58 -49 99 -37) -58]
Train Case:  89 | Input/Output: [(-21 -77 -25 -21) -77]
Train Case:  90 | Input/Output: [(2 58 69 3) 2]
Train Case:  91 | Input/Output: [(60 -94 48 68) -94]
Train Case:  92 | Input/Output: [(-31 -96 90 14) -96]
Train Case:  93 | Input/Output: [(86 -75 -14 -92) -92]
Train Case:  94 | Input/Output: [(-47 14 2 -74) -74]
Train Case:  95 | Input/Output: [(60 -16 16 -37) -37]
Train Case:  96 | Input/Output: [(32 30 16 0) 0]
Train Case:  97 | Input/Output: [(-17 38 34 -20) -20]
Train Case:  98 | Input/Output: [(76 -15 -83 28) -83]
Train Case:  99 | Input/Output: [(34 20 -86 51) -86]
Test Case:   0 | Input/Output: [[-85 -85 -85 99] -85]
Test Case:   1 | Input/Output: [[-11 66 66 66] -11]
Test Case:   2 | Input/Output: [[29 28 28 28] 28]
Test Case:   3 | Input/Output: [[-22 -8 -8 -8] -22]
Test Case:   4 | Input/Output: [[1 1 1 -55] -55]
Test Case:   5 | Input/Output: [[86 86 86 -18] -18]
Test Case:   6 | Input/Output: [[36 -59 -59 -59] -59]
Test Case:   7 | Input/Output: [[-91 3 3 3] -91]
Test Case:   8 | Input/Output: [[50 50 57 50] 50]
Test Case:   9 | Input/Output: [[-20 -57 -20 -20] -57]
Test Case:  10 | Input/Output: [[59 99 59 59] 59]
Test Case:  11 | Input/Output: [[-58 -58 -58 -46] -58]
Test Case:  12 | Input/Output: [[8 8 70 8] 8]
Test Case:  13 | Input/Output: [[74 -88 -88 -88] -88]
Test Case:  14 | Input/Output: [[-53 -53 81 -53] -53]
Test Case:  15 | Input/Output: [[10 -95 -95 -95] -95]
Test Case:  16 | Input/Output: [[-13 -13 -86 -13] -86]
Test Case:  17 | Input/Output: [[93 32 32 32] 32]
Test Case:  18 | Input/Output: [[94 73 94 94] 73]
Test Case:  19 | Input/Output: [[-7 -7 -7 59] -7]
Test Case:  20 | Input/Output: [[-77 -77 -77 -43] -77]
Test Case:  21 | Input/Output: [[93 -63 -63 -63] -63]
Test Case:  22 | Input/Output: [[18 18 37 18] 18]
Test Case:  23 | Input/Output: [[-81 85 -81 -81] -81]
Test Case:  24 | Input/Output: [[-96 15 -96 -96] -96]
Test Case:  25 | Input/Output: [[51 51 -49 51] -49]
Test Case:  26 | Input/Output: [[-55 2 -55 -55] -55]
Test Case:  27 | Input/Output: [[-70 -70 -73 -70] -73]
Test Case:  28 | Input/Output: [[71 71 -67 71] -67]
Test Case:  29 | Input/Output: [[-77 -77 -46 -77] -77]
Test Case:  30 | Input/Output: [[-27 -27 -27 -19] -27]
Test Case:  31 | Input/Output: [[27 88 27 27] 27]
Test Case:  32 | Input/Output: [[-2 -92 -92 -92] -92]
Test Case:  33 | Input/Output: [[94 -18 94 94] -18]
Test Case:  34 | Input/Output: [[-59 48 48 48] -59]
Test Case:  35 | Input/Output: [[5 5 -28 5] -28]
Test Case:  36 | Input/Output: [[53 -41 -41 -41] -41]
Test Case:  37 | Input/Output: [[33 -44 33 33] -44]
Test Case:  38 | Input/Output: [[37 37 -36 37] -36]
Test Case:  39 | Input/Output: [[-55 -55 -88 -55] -88]
Test Case:  40 | Input/Output: [[-12 11 -12 -12] -12]
Test Case:  41 | Input/Output: [[-22 -22 -22 80] -22]
Test Case:  42 | Input/Output: [[-80 -80 22 -80] -80]
Test Case:  43 | Input/Output: [[24 -32 -32 -32] -32]
Test Case:  44 | Input/Output: [[47 -93 -93 -93] -93]
Test Case:  45 | Input/Output: [[77 77 77 -64] -64]
Test Case:  46 | Input/Output: [[-10 -14 -14 -14] -14]
Test Case:  47 | Input/Output: [[-20 -20 -20 24] -20]
Test Case:  48 | Input/Output: [[7 -63 7 7] -63]
Test Case:  49 | Input/Output: [[-58 -58 -55 -58] -58]
Test Case:  50 | Input/Output: [[96 96 -30 96] -30]
Test Case:  51 | Input/Output: [[25 6 25 25] 6]
Test Case:  52 | Input/Output: [[20 20 20 1] 1]
Test Case:  53 | Input/Output: [[-100 84 84 84] -100]
Test Case:  54 | Input/Output: [[10 -83 10 10] -83]
Test Case:  55 | Input/Output: [[0 0 -18 0] -18]
Test Case:  56 | Input/Output: [[79 12 12 12] 12]
Test Case:  57 | Input/Output: [[-12 -93 -12 -12] -93]
Test Case:  58 | Input/Output: [[68 21 21 21] 21]
Test Case:  59 | Input/Output: [[-67 -67 -89 -67] -89]
Test Case:  60 | Input/Output: [[20 20 20 67] 20]
Test Case:  61 | Input/Output: [[-56 -94 -56 -56] -94]
Test Case:  62 | Input/Output: [[36 36 36 38] 36]
Test Case:  63 | Input/Output: [[-31 -31 -31 -12] -31]
Test Case:  64 | Input/Output: [[-2 -2 -2 98] -2]
Test Case:  65 | Input/Output: [[-81 -81 -81 -34] -81]
Test Case:  66 | Input/Output: [[-49 -4 -49 -49] -49]
Test Case:  67 | Input/Output: [[-66 -36 -36 -36] -66]
Test Case:  68 | Input/Output: [[16 16 16 47] 16]
Test Case:  69 | Input/Output: [[-86 -86 -86 -85] -86]
Test Case:  70 | Input/Output: [[59 80 80 80] 59]
Test Case:  71 | Input/Output: [[37 37 37 34] 34]
Test Case:  72 | Input/Output: [[31 31 -27 31] -27]
Test Case:  73 | Input/Output: [[-93 -93 97 -93] -93]
Test Case:  74 | Input/Output: [[82 76 82 82] 76]
Test Case:  75 | Input/Output: [[-99 74 74 74] -99]
Test Case:  76 | Input/Output: [[69 69 69 -25] -25]
Test Case:  77 | Input/Output: [[66 -99 -99 -99] -99]
Test Case:  78 | Input/Output: [[59 59 -96 59] -96]
Test Case:  79 | Input/Output: [[-96 -72 -72 -72] -96]
Test Case:  80 | Input/Output: [[82 -52 82 82] -52]
Test Case:  81 | Input/Output: [[28 -66 -66 -66] -66]
Test Case:  82 | Input/Output: [[-91 24 24 24] -91]
Test Case:  83 | Input/Output: [[-82 -82 -82 -58] -82]
Test Case:  84 | Input/Output: [[85 85 85 -76] -76]
Test Case:  85 | Input/Output: [[-39 -39 6 -39] -39]
Test Case:  86 | Input/Output: [[55 55 55 -69] -69]
Test Case:  87 | Input/Output: [[-42 -42 -42 86] -42]
Test Case:  88 | Input/Output: [[80 80 80 78] 78]
Test Case:  89 | Input/Output: [[10 10 77 10] 10]
Test Case:  90 | Input/Output: [[-1 -87 -1 -1] -87]
Test Case:  91 | Input/Output: [[12 12 -36 12] -36]
Test Case:  92 | Input/Output: [[59 59 59 -7] -7]
Test Case:  93 | Input/Output: [[-56 -56 -56 57] -56]
Test Case:  94 | Input/Output: [[29 29 -59 29] -59]
Test Case:  95 | Input/Output: [[-8 -8 46 -8] -8]
Test Case:  96 | Input/Output: [[42 42 50 42] 42]
Test Case:  97 | Input/Output: [[86 24 86 86] 24]
Test Case:  98 | Input/Output: [[31 -5 -5 -5] -5]
Test Case:  99 | Input/Output: [[73 -96 73 73] -96]
Test Case: 100 | Input/Output: [(32 32 32 32) 32]
Test Case: 101 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 102 | Input/Output: [(63 63 63 63) 63]
Test Case: 103 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 104 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 105 | Input/Output: [(20 20 20 20) 20]
Test Case: 106 | Input/Output: [(51 51 51 51) 51]
Test Case: 107 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 108 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 109 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 110 | Input/Output: [(84 84 84 84) 84]
Test Case: 111 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 112 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 113 | Input/Output: [(67 67 67 67) 67]
Test Case: 114 | Input/Output: [(6 6 6 6) 6]
Test Case: 115 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 116 | Input/Output: [(44 44 44 44) 44]
Test Case: 117 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 118 | Input/Output: [(60 60 60 60) 60]
Test Case: 119 | Input/Output: [(6 6 6 6) 6]
Test Case: 120 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 121 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 122 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 123 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 124 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 125 | Input/Output: [(18 18 18 18) 18]
Test Case: 126 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 127 | Input/Output: [(52 52 52 52) 52]
Test Case: 128 | Input/Output: [(76 76 76 76) 76]
Test Case: 129 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 130 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 131 | Input/Output: [(42 42 42 42) 42]
Test Case: 132 | Input/Output: [(5 5 5 5) 5]
Test Case: 133 | Input/Output: [(7 7 7 7) 7]
Test Case: 134 | Input/Output: [(66 66 66 66) 66]
Test Case: 135 | Input/Output: [(37 37 37 37) 37]
Test Case: 136 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 137 | Input/Output: [(3 3 3 3) 3]
Test Case: 138 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 139 | Input/Output: [(5 5 5 5) 5]
Test Case: 140 | Input/Output: [(13 13 13 13) 13]
Test Case: 141 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 142 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 143 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 144 | Input/Output: [(3 3 3 3) 3]
Test Case: 145 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 146 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 147 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 148 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 149 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 150 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 151 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 152 | Input/Output: [(54 54 54 54) 54]
Test Case: 153 | Input/Output: [(10 10 10 10) 10]
Test Case: 154 | Input/Output: [(12 12 12 12) 12]
Test Case: 155 | Input/Output: [(80 80 80 80) 80]
Test Case: 156 | Input/Output: [(71 71 71 71) 71]
Test Case: 157 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 158 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 159 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 160 | Input/Output: [(59 59 59 59) 59]
Test Case: 161 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 162 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 163 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 164 | Input/Output: [(84 84 84 84) 84]
Test Case: 165 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 166 | Input/Output: [(18 18 18 18) 18]
Test Case: 167 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 168 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 169 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 170 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 171 | Input/Output: [(4 4 4 4) 4]
Test Case: 172 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 173 | Input/Output: [(98 98 98 98) 98]
Test Case: 174 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 175 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 176 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 177 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 178 | Input/Output: [(18 18 18 18) 18]
Test Case: 179 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 180 | Input/Output: [(95 95 95 95) 95]
Test Case: 181 | Input/Output: [(13 13 13 13) 13]
Test Case: 182 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 183 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 184 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 185 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 186 | Input/Output: [(50 50 50 50) 50]
Test Case: 187 | Input/Output: [(42 42 42 42) 42]
Test Case: 188 | Input/Output: [(26 26 26 26) 26]
Test Case: 189 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 190 | Input/Output: [(80 80 80 80) 80]
Test Case: 191 | Input/Output: [(59 59 59 59) 59]
Test Case: 192 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 193 | Input/Output: [(68 68 68 68) 68]
Test Case: 194 | Input/Output: [(15 15 15 15) 15]
Test Case: 195 | Input/Output: [(12 12 12 12) 12]
Test Case: 196 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 197 | Input/Output: [(81 81 81 81) 81]
Test Case: 198 | Input/Output: [(8 8 8 8) 8]
Test Case: 199 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 200 | Input/Output: [(68 17 42 52) 17]
Test Case: 201 | Input/Output: [(28 38 53 73) 28]
Test Case: 202 | Input/Output: [(88 69 15 33) 15]
Test Case: 203 | Input/Output: [(20 32 50 86) 20]
Test Case: 204 | Input/Output: [(100 16 89 77) 16]
Test Case: 205 | Input/Output: [(14 19 97 30) 14]
Test Case: 206 | Input/Output: [(14 25 50 69) 14]
Test Case: 207 | Input/Output: [(23 25 29 57) 23]
Test Case: 208 | Input/Output: [(41 57 65 59) 41]
Test Case: 209 | Input/Output: [(71 16 19 38) 16]
Test Case: 210 | Input/Output: [(82 46 81 11) 11]
Test Case: 211 | Input/Output: [(47 89 17 62) 17]
Test Case: 212 | Input/Output: [(83 14 80 35) 14]
Test Case: 213 | Input/Output: [(14 28 27 42) 14]
Test Case: 214 | Input/Output: [(91 9 46 40) 9]
Test Case: 215 | Input/Output: [(99 47 1 92) 1]
Test Case: 216 | Input/Output: [(94 29 60 98) 29]
Test Case: 217 | Input/Output: [(19 38 1 76) 1]
Test Case: 218 | Input/Output: [(74 28 78 49) 28]
Test Case: 219 | Input/Output: [(65 18 15 3) 3]
Test Case: 220 | Input/Output: [(80 7 89 21) 7]
Test Case: 221 | Input/Output: [(16 67 70 59) 16]
Test Case: 222 | Input/Output: [(76 57 28 54) 28]
Test Case: 223 | Input/Output: [(23 60 15 49) 15]
Test Case: 224 | Input/Output: [(28 82 39 100) 28]
Test Case: 225 | Input/Output: [(96 67 93 38) 38]
Test Case: 226 | Input/Output: [(8 71 20 20) 8]
Test Case: 227 | Input/Output: [(14 74 16 16) 14]
Test Case: 228 | Input/Output: [(3 99 40 78) 3]
Test Case: 229 | Input/Output: [(97 78 42 86) 42]
Test Case: 230 | Input/Output: [(46 22 30 72) 22]
Test Case: 231 | Input/Output: [(9 7 8 74) 7]
Test Case: 232 | Input/Output: [(62 20 68 89) 20]
Test Case: 233 | Input/Output: [(69 44 4 69) 4]
Test Case: 234 | Input/Output: [(89 53 95 64) 53]
Test Case: 235 | Input/Output: [(57 8 11 97) 8]
Test Case: 236 | Input/Output: [(67 73 16 31) 16]
Test Case: 237 | Input/Output: [(65 62 18 19) 18]
Test Case: 238 | Input/Output: [(45 92 16 39) 16]
Test Case: 239 | Input/Output: [(55 59 71 95) 55]
Test Case: 240 | Input/Output: [(38 41 55 82) 38]
Test Case: 241 | Input/Output: [(83 87 65 63) 63]
Test Case: 242 | Input/Output: [(31 77 94 47) 31]
Test Case: 243 | Input/Output: [(9 55 90 82) 9]
Test Case: 244 | Input/Output: [(36 85 93 83) 36]
Test Case: 245 | Input/Output: [(34 4 23 47) 4]
Test Case: 246 | Input/Output: [(46 93 83 27) 27]
Test Case: 247 | Input/Output: [(90 60 55 96) 55]
Test Case: 248 | Input/Output: [(59 70 43 13) 13]
Test Case: 249 | Input/Output: [(6 92 24 38) 6]
Test Case: 250 | Input/Output: [(78 33 92 54) 33]
Test Case: 251 | Input/Output: [(82 4 95 88) 4]
Test Case: 252 | Input/Output: [(31 82 57 87) 31]
Test Case: 253 | Input/Output: [(83 65 88 33) 33]
Test Case: 254 | Input/Output: [(97 18 87 50) 18]
Test Case: 255 | Input/Output: [(3 41 68 4) 3]
Test Case: 256 | Input/Output: [(70 76 80 74) 70]
Test Case: 257 | Input/Output: [(0 31 65 33) 0]
Test Case: 258 | Input/Output: [(18 91 67 95) 18]
Test Case: 259 | Input/Output: [(82 72 43 76) 43]
Test Case: 260 | Input/Output: [(82 69 40 72) 40]
Test Case: 261 | Input/Output: [(52 24 31 16) 16]
Test Case: 262 | Input/Output: [(76 86 61 41) 41]
Test Case: 263 | Input/Output: [(11 49 87 48) 11]
Test Case: 264 | Input/Output: [(57 33 16 61) 16]
Test Case: 265 | Input/Output: [(99 65 16 73) 16]
Test Case: 266 | Input/Output: [(24 52 91 85) 24]
Test Case: 267 | Input/Output: [(54 22 81 71) 22]
Test Case: 268 | Input/Output: [(95 57 76 15) 15]
Test Case: 269 | Input/Output: [(78 18 41 80) 18]
Test Case: 270 | Input/Output: [(100 72 90 17) 17]
Test Case: 271 | Input/Output: [(73 30 32 60) 30]
Test Case: 272 | Input/Output: [(77 94 51 36) 36]
Test Case: 273 | Input/Output: [(44 57 92 44) 44]
Test Case: 274 | Input/Output: [(4 59 3 60) 3]
Test Case: 275 | Input/Output: [(67 11 84 36) 11]
Test Case: 276 | Input/Output: [(98 84 1 9) 1]
Test Case: 277 | Input/Output: [(6 4 52 24) 4]
Test Case: 278 | Input/Output: [(16 58 15 51) 15]
Test Case: 279 | Input/Output: [(90 36 94 79) 36]
Test Case: 280 | Input/Output: [(56 93 95 27) 27]
Test Case: 281 | Input/Output: [(38 2 83 54) 2]
Test Case: 282 | Input/Output: [(43 63 100 25) 25]
Test Case: 283 | Input/Output: [(74 60 63 6) 6]
Test Case: 284 | Input/Output: [(64 52 31 52) 31]
Test Case: 285 | Input/Output: [(54 89 92 96) 54]
Test Case: 286 | Input/Output: [(80 84 77 73) 73]
Test Case: 287 | Input/Output: [(84 100 3 97) 3]
Test Case: 288 | Input/Output: [(50 66 58 14) 14]
Test Case: 289 | Input/Output: [(37 16 100 33) 16]
Test Case: 290 | Input/Output: [(27 60 21 52) 21]
Test Case: 291 | Input/Output: [(73 75 76 33) 33]
Test Case: 292 | Input/Output: [(63 15 74 73) 15]
Test Case: 293 | Input/Output: [(6 74 9 19) 6]
Test Case: 294 | Input/Output: [(70 96 85 19) 19]
Test Case: 295 | Input/Output: [(90 82 53 26) 26]
Test Case: 296 | Input/Output: [(77 69 36 44) 36]
Test Case: 297 | Input/Output: [(12 100 20 68) 12]
Test Case: 298 | Input/Output: [(18 43 99 21) 18]
Test Case: 299 | Input/Output: [(66 42 67 4) 4]
Test Case: 300 | Input/Output: [(30 40 99 44) 30]
Test Case: 301 | Input/Output: [(100 49 45 62) 45]
Test Case: 302 | Input/Output: [(67 72 43 3) 3]
Test Case: 303 | Input/Output: [(23 12 48 92) 12]
Test Case: 304 | Input/Output: [(12 60 79 10) 10]
Test Case: 305 | Input/Output: [(76 47 4 7) 4]
Test Case: 306 | Input/Output: [(79 37 94 3) 3]
Test Case: 307 | Input/Output: [(16 6 81 28) 6]
Test Case: 308 | Input/Output: [(58 82 23 52) 23]
Test Case: 309 | Input/Output: [(2 79 95 88) 2]
Test Case: 310 | Input/Output: [(92 90 51 75) 51]
Test Case: 311 | Input/Output: [(80 39 29 19) 19]
Test Case: 312 | Input/Output: [(21 33 12 62) 12]
Test Case: 313 | Input/Output: [(36 47 25 41) 25]
Test Case: 314 | Input/Output: [(93 85 86 34) 34]
Test Case: 315 | Input/Output: [(76 89 31 64) 31]
Test Case: 316 | Input/Output: [(50 15 32 87) 15]
Test Case: 317 | Input/Output: [(47 96 86 60) 47]
Test Case: 318 | Input/Output: [(75 47 82 67) 47]
Test Case: 319 | Input/Output: [(95 3 94 100) 3]
Test Case: 320 | Input/Output: [(38 17 0 27) 0]
Test Case: 321 | Input/Output: [(74 14 42 70) 14]
Test Case: 322 | Input/Output: [(27 0 42 94) 0]
Test Case: 323 | Input/Output: [(31 8 41 44) 8]
Test Case: 324 | Input/Output: [(4 75 38 46) 4]
Test Case: 325 | Input/Output: [(84 87 94 40) 40]
Test Case: 326 | Input/Output: [(61 7 48 82) 7]
Test Case: 327 | Input/Output: [(88 90 7 43) 7]
Test Case: 328 | Input/Output: [(22 6 32 94) 6]
Test Case: 329 | Input/Output: [(89 80 0 30) 0]
Test Case: 330 | Input/Output: [(26 20 56 42) 20]
Test Case: 331 | Input/Output: [(96 3 46 48) 3]
Test Case: 332 | Input/Output: [(85 31 2 44) 2]
Test Case: 333 | Input/Output: [(20 54 22 23) 20]
Test Case: 334 | Input/Output: [(78 95 54 70) 54]
Test Case: 335 | Input/Output: [(10 13 16 89) 10]
Test Case: 336 | Input/Output: [(60 48 80 56) 48]
Test Case: 337 | Input/Output: [(62 88 35 53) 35]
Test Case: 338 | Input/Output: [(87 60 95 46) 46]
Test Case: 339 | Input/Output: [(26 78 84 79) 26]
Test Case: 340 | Input/Output: [(61 92 92 9) 9]
Test Case: 341 | Input/Output: [(69 62 30 97) 30]
Test Case: 342 | Input/Output: [(96 31 80 42) 31]
Test Case: 343 | Input/Output: [(63 66 30 37) 30]
Test Case: 344 | Input/Output: [(58 87 60 5) 5]
Test Case: 345 | Input/Output: [(22 33 10 82) 10]
Test Case: 346 | Input/Output: [(98 40 56 50) 40]
Test Case: 347 | Input/Output: [(56 28 38 35) 28]
Test Case: 348 | Input/Output: [(95 64 67 90) 64]
Test Case: 349 | Input/Output: [(78 87 10 36) 10]
Test Case: 350 | Input/Output: [(59 67 36 100) 36]
Test Case: 351 | Input/Output: [(82 8 93 47) 8]
Test Case: 352 | Input/Output: [(38 45 76 46) 38]
Test Case: 353 | Input/Output: [(94 37 43 31) 31]
Test Case: 354 | Input/Output: [(58 27 27 85) 27]
Test Case: 355 | Input/Output: [(100 3 32 43) 3]
Test Case: 356 | Input/Output: [(92 79 3 53) 3]
Test Case: 357 | Input/Output: [(35 21 11 66) 11]
Test Case: 358 | Input/Output: [(56 71 17 53) 17]
Test Case: 359 | Input/Output: [(57 7 76 14) 7]
Test Case: 360 | Input/Output: [(71 79 25 7) 7]
Test Case: 361 | Input/Output: [(99 81 48 70) 48]
Test Case: 362 | Input/Output: [(55 96 70 47) 47]
Test Case: 363 | Input/Output: [(16 44 97 62) 16]
Test Case: 364 | Input/Output: [(66 8 65 41) 8]
Test Case: 365 | Input/Output: [(34 50 44 69) 34]
Test Case: 366 | Input/Output: [(26 20 4 21) 4]
Test Case: 367 | Input/Output: [(90 65 80 71) 65]
Test Case: 368 | Input/Output: [(6 11 98 70) 6]
Test Case: 369 | Input/Output: [(48 85 76 75) 48]
Test Case: 370 | Input/Output: [(21 9 76 15) 9]
Test Case: 371 | Input/Output: [(9 88 94 68) 9]
Test Case: 372 | Input/Output: [(10 73 83 5) 5]
Test Case: 373 | Input/Output: [(49 34 4 13) 4]
Test Case: 374 | Input/Output: [(7 84 46 100) 7]
Test Case: 375 | Input/Output: [(26 95 31 14) 14]
Test Case: 376 | Input/Output: [(7 98 54 44) 7]
Test Case: 377 | Input/Output: [(41 78 18 98) 18]
Test Case: 378 | Input/Output: [(59 75 87 66) 59]
Test Case: 379 | Input/Output: [(92 6 25 67) 6]
Test Case: 380 | Input/Output: [(72 57 36 51) 36]
Test Case: 381 | Input/Output: [(82 86 69 20) 20]
Test Case: 382 | Input/Output: [(78 29 13 45) 13]
Test Case: 383 | Input/Output: [(54 88 52 43) 43]
Test Case: 384 | Input/Output: [(70 79 39 11) 11]
Test Case: 385 | Input/Output: [(83 6 88 55) 6]
Test Case: 386 | Input/Output: [(37 65 94 36) 36]
Test Case: 387 | Input/Output: [(27 3 92 69) 3]
Test Case: 388 | Input/Output: [(22 59 24 27) 22]
Test Case: 389 | Input/Output: [(91 10 89 11) 10]
Test Case: 390 | Input/Output: [(67 30 20 9) 9]
Test Case: 391 | Input/Output: [(58 64 22 45) 22]
Test Case: 392 | Input/Output: [(69 60 94 12) 12]
Test Case: 393 | Input/Output: [(68 52 86 94) 52]
Test Case: 394 | Input/Output: [(1 6 91 85) 1]
Test Case: 395 | Input/Output: [(86 7 36 17) 7]
Test Case: 396 | Input/Output: [(60 82 94 38) 38]
Test Case: 397 | Input/Output: [(21 1 65 42) 1]
Test Case: 398 | Input/Output: [(86 99 56 36) 36]
Test Case: 399 | Input/Output: [(76 96 40 71) 40]
Test Case: 400 | Input/Output: [(0 -91 -59 -48) -91]
Test Case: 401 | Input/Output: [(-12 -66 -90 -67) -90]
Test Case: 402 | Input/Output: [(-20 -39 -47 -44) -47]
Test Case: 403 | Input/Output: [(-25 75 -50 100) -50]
Test Case: 404 | Input/Output: [(1 -21 29 -82) -82]
Test Case: 405 | Input/Output: [(-80 36 -50 69) -80]
Test Case: 406 | Input/Output: [(46 88 44 26) 26]
Test Case: 407 | Input/Output: [(-44 36 -61 40) -61]
Test Case: 408 | Input/Output: [(-25 56 -99 50) -99]
Test Case: 409 | Input/Output: [(-2 -44 62 90) -44]
Test Case: 410 | Input/Output: [(-81 -16 93 91) -81]
Test Case: 411 | Input/Output: [(67 -44 -31 -66) -66]
Test Case: 412 | Input/Output: [(12 92 69 95) 12]
Test Case: 413 | Input/Output: [(62 35 53 60) 35]
Test Case: 414 | Input/Output: [(-91 -8 -87 -4) -91]
Test Case: 415 | Input/Output: [(46 -84 62 39) -84]
Test Case: 416 | Input/Output: [(8 37 -58 39) -58]
Test Case: 417 | Input/Output: [(7 -94 -94 -38) -94]
Test Case: 418 | Input/Output: [(54 -44 89 67) -44]
Test Case: 419 | Input/Output: [(-17 -74 15 43) -74]
Test Case: 420 | Input/Output: [(-45 -71 55 -63) -71]
Test Case: 421 | Input/Output: [(-19 85 -12 35) -19]
Test Case: 422 | Input/Output: [(-97 48 95 -31) -97]
Test Case: 423 | Input/Output: [(36 -45 52 -10) -45]
Test Case: 424 | Input/Output: [(36 22 -68 34) -68]
Test Case: 425 | Input/Output: [(-27 -86 23 68) -86]
Test Case: 426 | Input/Output: [(11 31 -67 -16) -67]
Test Case: 427 | Input/Output: [(-78 33 40 40) -78]
Test Case: 428 | Input/Output: [(-74 -11 60 -97) -97]
Test Case: 429 | Input/Output: [(95 -96 -9 86) -96]
Test Case: 430 | Input/Output: [(47 -63 40 48) -63]
Test Case: 431 | Input/Output: [(9 54 82 68) 9]
Test Case: 432 | Input/Output: [(88 82 24 -59) -59]
Test Case: 433 | Input/Output: [(-92 56 6 -42) -92]
Test Case: 434 | Input/Output: [(-33 16 -84 -30) -84]
Test Case: 435 | Input/Output: [(5 -16 -48 39) -48]
Test Case: 436 | Input/Output: [(68 -83 -52 58) -83]
Test Case: 437 | Input/Output: [(2 13 64 -2) -2]
Test Case: 438 | Input/Output: [(-73 -29 91 -75) -75]
Test Case: 439 | Input/Output: [(-58 9 83 -51) -58]
Test Case: 440 | Input/Output: [(-38 13 -56 -86) -86]
Test Case: 441 | Input/Output: [(-86 -80 -4 -81) -86]
Test Case: 442 | Input/Output: [(-18 -76 -76 32) -76]
Test Case: 443 | Input/Output: [(3 -68 59 2) -68]
Test Case: 444 | Input/Output: [(-39 -74 -79 90) -79]
Test Case: 445 | Input/Output: [(-68 -28 -30 -64) -68]
Test Case: 446 | Input/Output: [(-18 -11 87 1) -18]
Test Case: 447 | Input/Output: [(-25 67 -61 98) -61]
Test Case: 448 | Input/Output: [(56 -74 -38 -45) -74]
Test Case: 449 | Input/Output: [(49 -35 -40 24) -40]
Test Case: 450 | Input/Output: [(-15 92 64 94) -15]
Test Case: 451 | Input/Output: [(37 97 67 -6) -6]
Test Case: 452 | Input/Output: [(-1 -92 11 -88) -92]
Test Case: 453 | Input/Output: [(80 99 43 -87) -87]
Test Case: 454 | Input/Output: [(-28 -65 -6 84) -65]
Test Case: 455 | Input/Output: [(53 -36 -79 -2) -79]
Test Case: 456 | Input/Output: [(-12 -81 -43 -38) -81]
Test Case: 457 | Input/Output: [(-65 39 25 -48) -65]
Test Case: 458 | Input/Output: [(68 -77 7 85) -77]
Test Case: 459 | Input/Output: [(97 -42 88 24) -42]
Test Case: 460 | Input/Output: [(24 -23 18 42) -23]
Test Case: 461 | Input/Output: [(-36 57 90 -62) -62]
Test Case: 462 | Input/Output: [(58 33 -83 -53) -83]
Test Case: 463 | Input/Output: [(36 -67 65 -91) -91]
Test Case: 464 | Input/Output: [(-72 -57 -53 50) -72]
Test Case: 465 | Input/Output: [(-42 -26 -48 -44) -48]
Test Case: 466 | Input/Output: [(-78 58 -71 13) -78]
Test Case: 467 | Input/Output: [(-61 77 -71 -75) -75]
Test Case: 468 | Input/Output: [(-33 36 27 -82) -82]
Test Case: 469 | Input/Output: [(24 68 -58 6) -58]
Test Case: 470 | Input/Output: [(-97 19 40 63) -97]
Test Case: 471 | Input/Output: [(61 -77 90 -1) -77]
Test Case: 472 | Input/Output: [(91 29 -95 53) -95]
Test Case: 473 | Input/Output: [(59 -78 53 -30) -78]
Test Case: 474 | Input/Output: [(62 45 -66 -56) -66]
Test Case: 475 | Input/Output: [(-90 -26 13 100) -90]
Test Case: 476 | Input/Output: [(-69 7 -22 33) -69]
Test Case: 477 | Input/Output: [(22 5 21 -33) -33]
Test Case: 478 | Input/Output: [(-18 27 -54 -13) -54]
Test Case: 479 | Input/Output: [(58 74 40 -77) -77]
Test Case: 480 | Input/Output: [(-37 80 25 -89) -89]
Test Case: 481 | Input/Output: [(-79 95 -34 90) -79]
Test Case: 482 | Input/Output: [(-37 9 -62 0) -62]
Test Case: 483 | Input/Output: [(-6 30 68 -18) -18]
Test Case: 484 | Input/Output: [(-34 -98 69 -60) -98]
Test Case: 485 | Input/Output: [(22 57 -75 52) -75]
Test Case: 486 | Input/Output: [(89 92 86 34) 34]
Test Case: 487 | Input/Output: [(21 -96 -32 65) -96]
Test Case: 488 | Input/Output: [(18 -13 24 -5) -13]
Test Case: 489 | Input/Output: [(-84 68 55 1) -84]
Test Case: 490 | Input/Output: [(87 -59 72 -85) -85]
Test Case: 491 | Input/Output: [(13 -27 2 27) -27]
Test Case: 492 | Input/Output: [(21 42 -22 -75) -75]
Test Case: 493 | Input/Output: [(-81 3 -86 -81) -86]
Test Case: 494 | Input/Output: [(11 93 100 -51) -51]
Test Case: 495 | Input/Output: [(88 36 82 13) 13]
Test Case: 496 | Input/Output: [(8 -8 -30 86) -30]
Test Case: 497 | Input/Output: [(-26 -33 -47 -45) -47]
Test Case: 498 | Input/Output: [(20 12 85 93) 12]
Test Case: 499 | Input/Output: [(26 -89 16 -52) -89]
Test Case: 500 | Input/Output: [(71 -17 -21 66) -21]
Test Case: 501 | Input/Output: [(14 -40 -12 43) -40]
Test Case: 502 | Input/Output: [(-57 -100 -62 -76) -100]
Test Case: 503 | Input/Output: [(35 -8 49 95) -8]
Test Case: 504 | Input/Output: [(51 85 20 7) 7]
Test Case: 505 | Input/Output: [(29 98 -38 65) -38]
Test Case: 506 | Input/Output: [(-39 -96 -20 -34) -96]
Test Case: 507 | Input/Output: [(77 73 -84 -36) -84]
Test Case: 508 | Input/Output: [(-63 -27 -99 96) -99]
Test Case: 509 | Input/Output: [(-55 -13 -99 -50) -99]
Test Case: 510 | Input/Output: [(-83 -1 22 2) -83]
Test Case: 511 | Input/Output: [(42 -3 83 -34) -34]
Test Case: 512 | Input/Output: [(65 -35 12 67) -35]
Test Case: 513 | Input/Output: [(-19 -50 14 55) -50]
Test Case: 514 | Input/Output: [(-92 -73 -66 -26) -92]
Test Case: 515 | Input/Output: [(-61 2 18 76) -61]
Test Case: 516 | Input/Output: [(7 -34 78 -99) -99]
Test Case: 517 | Input/Output: [(-28 11 11 54) -28]
Test Case: 518 | Input/Output: [(-55 65 33 28) -55]
Test Case: 519 | Input/Output: [(51 69 -1 -10) -10]
Test Case: 520 | Input/Output: [(-59 88 48 83) -59]
Test Case: 521 | Input/Output: [(40 21 -32 -47) -47]
Test Case: 522 | Input/Output: [(-4 -18 34 100) -18]
Test Case: 523 | Input/Output: [(-58 56 -85 99) -85]
Test Case: 524 | Input/Output: [(-87 9 -57 -17) -87]
Test Case: 525 | Input/Output: [(29 60 78 9) 9]
Test Case: 526 | Input/Output: [(-3 -78 56 69) -78]
Test Case: 527 | Input/Output: [(-5 -42 36 78) -42]
Test Case: 528 | Input/Output: [(22 -20 2 -1) -20]
Test Case: 529 | Input/Output: [(75 12 83 -38) -38]
Test Case: 530 | Input/Output: [(-79 -21 -12 -57) -79]
Test Case: 531 | Input/Output: [(7 -36 51 71) -36]
Test Case: 532 | Input/Output: [(41 78 76 62) 41]
Test Case: 533 | Input/Output: [(54 92 -92 100) -92]
Test Case: 534 | Input/Output: [(-33 -59 50 43) -59]
Test Case: 535 | Input/Output: [(99 -19 -41 98) -41]
Test Case: 536 | Input/Output: [(-35 40 15 45) -35]
Test Case: 537 | Input/Output: [(31 -75 54 -27) -75]
Test Case: 538 | Input/Output: [(4 27 40 -20) -20]
Test Case: 539 | Input/Output: [(-37 -20 -72 13) -72]
Test Case: 540 | Input/Output: [(22 -97 41 38) -97]
Test Case: 541 | Input/Output: [(86 1 6 -99) -99]
Test Case: 542 | Input/Output: [(-46 -45 86 0) -46]
Test Case: 543 | Input/Output: [(27 -2 88 36) -2]
Test Case: 544 | Input/Output: [(-84 -80 87 40) -84]
Test Case: 545 | Input/Output: [(58 -46 -58 94) -58]
Test Case: 546 | Input/Output: [(-39 -30 64 -81) -81]
Test Case: 547 | Input/Output: [(-74 6 -10 50) -74]
Test Case: 548 | Input/Output: [(-37 50 38 71) -37]
Test Case: 549 | Input/Output: [(52 27 -32 99) -32]
Test Case: 550 | Input/Output: [(-81 -95 8 -90) -95]
Test Case: 551 | Input/Output: [(-6 48 24 83) -6]
Test Case: 552 | Input/Output: [(-42 -25 29 83) -42]
Test Case: 553 | Input/Output: [(60 -19 -59 98) -59]
Test Case: 554 | Input/Output: [(-61 -100 30 -16) -100]
Test Case: 555 | Input/Output: [(90 -24 51 -73) -73]
Test Case: 556 | Input/Output: [(-17 32 -26 26) -26]
Test Case: 557 | Input/Output: [(36 -4 -94 75) -94]
Test Case: 558 | Input/Output: [(57 -7 -37 65) -37]
Test Case: 559 | Input/Output: [(-15 95 -56 3) -56]
Test Case: 560 | Input/Output: [(-18 -82 33 62) -82]
Test Case: 561 | Input/Output: [(79 72 -41 4) -41]
Test Case: 562 | Input/Output: [(64 15 -88 66) -88]
Test Case: 563 | Input/Output: [(55 57 55 -79) -79]
Test Case: 564 | Input/Output: [(-83 -98 29 77) -98]
Test Case: 565 | Input/Output: [(-38 50 -12 88) -38]
Test Case: 566 | Input/Output: [(91 75 60 44) 44]
Test Case: 567 | Input/Output: [(-15 -92 23 47) -92]
Test Case: 568 | Input/Output: [(-68 73 81 93) -68]
Test Case: 569 | Input/Output: [(69 -16 -69 -14) -69]
Test Case: 570 | Input/Output: [(-73 83 17 11) -73]
Test Case: 571 | Input/Output: [(32 86 -83 -85) -85]
Test Case: 572 | Input/Output: [(-100 -68 15 -55) -100]
Test Case: 573 | Input/Output: [(88 11 70 -82) -82]
Test Case: 574 | Input/Output: [(28 66 33 -46) -46]
Test Case: 575 | Input/Output: [(-36 -54 79 -52) -54]
Test Case: 576 | Input/Output: [(-38 87 57 90) -38]
Test Case: 577 | Input/Output: [(-2 54 84 -76) -76]
Test Case: 578 | Input/Output: [(-13 73 81 81) -13]
Test Case: 579 | Input/Output: [(-72 -97 14 37) -97]
Test Case: 580 | Input/Output: [(-74 -64 -68 54) -74]
Test Case: 581 | Input/Output: [(-85 40 -90 72) -90]
Test Case: 582 | Input/Output: [(-98 81 -9 -70) -98]
Test Case: 583 | Input/Output: [(1 -64 2 66) -64]
Test Case: 584 | Input/Output: [(-13 -30 18 72) -30]
Test Case: 585 | Input/Output: [(-6 25 52 81) -6]
Test Case: 586 | Input/Output: [(-35 -39 -83 -100) -100]
Test Case: 587 | Input/Output: [(-28 55 71 -64) -64]
Test Case: 588 | Input/Output: [(48 90 -24 -25) -25]
Test Case: 589 | Input/Output: [(58 -16 72 -3) -16]
Test Case: 590 | Input/Output: [(-23 -5 66 -4) -23]
Test Case: 591 | Input/Output: [(2 98 -7 -51) -51]
Test Case: 592 | Input/Output: [(26 -37 36 -47) -47]
Test Case: 593 | Input/Output: [(-26 -23 58 -82) -82]
Test Case: 594 | Input/Output: [(94 -37 -61 58) -61]
Test Case: 595 | Input/Output: [(83 -23 98 67) -23]
Test Case: 596 | Input/Output: [(97 3 -53 25) -53]
Test Case: 597 | Input/Output: [(39 -9 -36 45) -36]
Test Case: 598 | Input/Output: [(86 -43 68 -71) -71]
Test Case: 599 | Input/Output: [(48 -35 22 -27) -35]
Test Case: 600 | Input/Output: [(-100 65 37 -50) -100]
Test Case: 601 | Input/Output: [(11 -87 -86 -42) -87]
Test Case: 602 | Input/Output: [(92 12 52 -77) -77]
Test Case: 603 | Input/Output: [(-28 13 40 -23) -28]
Test Case: 604 | Input/Output: [(-95 -20 -9 90) -95]
Test Case: 605 | Input/Output: [(-26 -37 -53 32) -53]
Test Case: 606 | Input/Output: [(28 87 -11 33) -11]
Test Case: 607 | Input/Output: [(-55 27 -37 -17) -55]
Test Case: 608 | Input/Output: [(-67 23 23 -43) -67]
Test Case: 609 | Input/Output: [(97 84 11 36) 11]
Test Case: 610 | Input/Output: [(-50 -36 -47 -81) -81]
Test Case: 611 | Input/Output: [(76 -29 -57 62) -57]
Test Case: 612 | Input/Output: [(81 -50 -71 -39) -71]
Test Case: 613 | Input/Output: [(54 -95 2 10) -95]
Test Case: 614 | Input/Output: [(-58 88 -86 46) -86]
Test Case: 615 | Input/Output: [(78 72 -99 -93) -99]
Test Case: 616 | Input/Output: [(-38 59 86 -57) -57]
Test Case: 617 | Input/Output: [(-92 -71 -69 83) -92]
Test Case: 618 | Input/Output: [(64 -45 82 -37) -45]
Test Case: 619 | Input/Output: [(-67 -49 28 -21) -67]
Test Case: 620 | Input/Output: [(26 -70 -1 -94) -94]
Test Case: 621 | Input/Output: [(-75 -14 -9 -54) -75]
Test Case: 622 | Input/Output: [(-62 3 86 99) -62]
Test Case: 623 | Input/Output: [(-24 -63 -3 -78) -78]
Test Case: 624 | Input/Output: [(98 70 4 83) 4]
Test Case: 625 | Input/Output: [(87 30 -74 25) -74]
Test Case: 626 | Input/Output: [(87 94 -12 1) -12]
Test Case: 627 | Input/Output: [(11 -32 67 79) -32]
Test Case: 628 | Input/Output: [(57 41 51 88) 41]
Test Case: 629 | Input/Output: [(-18 2 80 -90) -90]
Test Case: 630 | Input/Output: [(-83 59 -95 -11) -95]
Test Case: 631 | Input/Output: [(86 80 -20 -8) -20]
Test Case: 632 | Input/Output: [(-68 92 -34 -62) -68]
Test Case: 633 | Input/Output: [(29 -9 -99 -56) -99]
Test Case: 634 | Input/Output: [(22 54 -77 18) -77]
Test Case: 635 | Input/Output: [(-36 85 -10 29) -36]
Test Case: 636 | Input/Output: [(59 -6 -46 37) -46]
Test Case: 637 | Input/Output: [(-42 -16 34 -24) -42]
Test Case: 638 | Input/Output: [(-45 -81 44 -61) -81]
Test Case: 639 | Input/Output: [(44 42 -45 -49) -49]
Test Case: 640 | Input/Output: [(-65 -59 -86 -13) -86]
Test Case: 641 | Input/Output: [(-80 -52 -74 -93) -93]
Test Case: 642 | Input/Output: [(-90 -4 -80 -100) -100]
Test Case: 643 | Input/Output: [(-45 -69 42 34) -69]
Test Case: 644 | Input/Output: [(-75 98 -49 -24) -75]
Test Case: 645 | Input/Output: [(-13 58 -36 -82) -82]
Test Case: 646 | Input/Output: [(-43 -39 -96 -76) -96]
Test Case: 647 | Input/Output: [(20 -18 -11 60) -18]
Test Case: 648 | Input/Output: [(29 71 -99 -65) -99]
Test Case: 649 | Input/Output: [(66 -14 -10 37) -14]
Test Case: 650 | Input/Output: [(65 50 -81 -47) -81]
Test Case: 651 | Input/Output: [(85 -29 -28 18) -29]
Test Case: 652 | Input/Output: [(-46 -36 -45 73) -46]
Test Case: 653 | Input/Output: [(-3 -94 27 -39) -94]
Test Case: 654 | Input/Output: [(73 -72 78 -98) -98]
Test Case: 655 | Input/Output: [(52 35 49 15) 15]
Test Case: 656 | Input/Output: [(22 -79 -94 54) -94]
Test Case: 657 | Input/Output: [(-29 52 -42 -68) -68]
Test Case: 658 | Input/Output: [(29 -40 -75 -49) -75]
Test Case: 659 | Input/Output: [(-23 94 -26 -98) -98]
Test Case: 660 | Input/Output: [(-87 91 -95 62) -95]
Test Case: 661 | Input/Output: [(-5 -11 -94 78) -94]
Test Case: 662 | Input/Output: [(-44 -68 39 22) -68]
Test Case: 663 | Input/Output: [(39 -22 -13 37) -22]
Test Case: 664 | Input/Output: [(8 85 -45 60) -45]
Test Case: 665 | Input/Output: [(47 51 30 -41) -41]
Test Case: 666 | Input/Output: [(-41 66 -61 91) -61]
Test Case: 667 | Input/Output: [(10 12 -57 24) -57]
Test Case: 668 | Input/Output: [(-62 -2 -12 -86) -86]
Test Case: 669 | Input/Output: [(-72 31 95 77) -72]
Test Case: 670 | Input/Output: [(-85 74 -77 -68) -85]
Test Case: 671 | Input/Output: [(64 4 -55 19) -55]
Test Case: 672 | Input/Output: [(13 62 46 42) 13]
Test Case: 673 | Input/Output: [(-40 -43 -62 22) -62]
Test Case: 674 | Input/Output: [(-53 94 59 -35) -53]
Test Case: 675 | Input/Output: [(-52 33 -8 -7) -52]
Test Case: 676 | Input/Output: [(88 98 12 96) 12]
Test Case: 677 | Input/Output: [(68 -23 -91 -59) -91]
Test Case: 678 | Input/Output: [(-8 -73 92 -82) -82]
Test Case: 679 | Input/Output: [(44 5 4 -80) -80]
Test Case: 680 | Input/Output: [(-42 -20 49 85) -42]
Test Case: 681 | Input/Output: [(55 81 -51 29) -51]
Test Case: 682 | Input/Output: [(14 1 -16 95) -16]
Test Case: 683 | Input/Output: [(96 33 -57 27) -57]
Test Case: 684 | Input/Output: [(43 -82 -96 -96) -96]
Test Case: 685 | Input/Output: [(46 57 -85 24) -85]
Test Case: 686 | Input/Output: [(0 -69 71 12) -69]
Test Case: 687 | Input/Output: [(-3 -78 40 87) -78]
Test Case: 688 | Input/Output: [(-76 88 27 -23) -76]
Test Case: 689 | Input/Output: [(-54 23 -56 -82) -82]
Test Case: 690 | Input/Output: [(32 62 -73 43) -73]
Test Case: 691 | Input/Output: [(-72 90 38 38) -72]
Test Case: 692 | Input/Output: [(90 -53 10 51) -53]
Test Case: 693 | Input/Output: [(72 -25 16 79) -25]
Test Case: 694 | Input/Output: [(67 63 89 -77) -77]
Test Case: 695 | Input/Output: [(-34 -20 -16 12) -34]
Test Case: 696 | Input/Output: [(-61 31 19 -27) -61]
Test Case: 697 | Input/Output: [(84 -60 44 -47) -60]
Test Case: 698 | Input/Output: [(-1 -90 89 17) -90]
Test Case: 699 | Input/Output: [(76 13 -6 -85) -85]
Test Case: 700 | Input/Output: [(-16 -78 3 -92) -92]
Test Case: 701 | Input/Output: [(49 -53 27 88) -53]
Test Case: 702 | Input/Output: [(36 -2 -44 -1) -44]
Test Case: 703 | Input/Output: [(-14 61 -73 -75) -75]
Test Case: 704 | Input/Output: [(-27 40 -90 -12) -90]
Test Case: 705 | Input/Output: [(52 8 91 -30) -30]
Test Case: 706 | Input/Output: [(-1 13 20 -100) -100]
Test Case: 707 | Input/Output: [(51 56 98 -64) -64]
Test Case: 708 | Input/Output: [(98 -74 37 -27) -74]
Test Case: 709 | Input/Output: [(50 65 -95 -37) -95]
Test Case: 710 | Input/Output: [(13 -70 30 29) -70]
Test Case: 711 | Input/Output: [(2 -87 -30 -82) -87]
Test Case: 712 | Input/Output: [(-67 -33 25 -20) -67]
Test Case: 713 | Input/Output: [(-60 -96 -12 -36) -96]
Test Case: 714 | Input/Output: [(68 -24 -4 31) -24]
Test Case: 715 | Input/Output: [(-32 -48 -42 -71) -71]
Test Case: 716 | Input/Output: [(71 -36 19 80) -36]
Test Case: 717 | Input/Output: [(-43 -76 46 -8) -76]
Test Case: 718 | Input/Output: [(-32 79 -62 -38) -62]
Test Case: 719 | Input/Output: [(-76 33 -100 26) -100]
Test Case: 720 | Input/Output: [(41 6 -42 77) -42]
Test Case: 721 | Input/Output: [(39 -7 38 15) -7]
Test Case: 722 | Input/Output: [(93 25 42 -30) -30]
Test Case: 723 | Input/Output: [(-36 -43 45 19) -43]
Test Case: 724 | Input/Output: [(-36 68 79 -41) -41]
Test Case: 725 | Input/Output: [(36 42 28 -73) -73]
Test Case: 726 | Input/Output: [(42 -48 26 -17) -48]
Test Case: 727 | Input/Output: [(81 -53 17 0) -53]
Test Case: 728 | Input/Output: [(34 23 -90 -41) -90]
Test Case: 729 | Input/Output: [(-27 26 97 -11) -27]
Test Case: 730 | Input/Output: [(-52 81 51 42) -52]
Test Case: 731 | Input/Output: [(-75 -10 -90 78) -90]
Test Case: 732 | Input/Output: [(26 -41 -10 -29) -41]
Test Case: 733 | Input/Output: [(36 32 -78 -99) -99]
Test Case: 734 | Input/Output: [(-98 28 -47 26) -98]
Test Case: 735 | Input/Output: [(66 -73 9 -16) -73]
Test Case: 736 | Input/Output: [(1 -5 -23 70) -23]
Test Case: 737 | Input/Output: [(-19 -12 98 -4) -19]
Test Case: 738 | Input/Output: [(34 58 52 -17) -17]
Test Case: 739 | Input/Output: [(-94 -75 -62 -95) -95]
Test Case: 740 | Input/Output: [(-30 7 67 69) -30]
Test Case: 741 | Input/Output: [(58 -17 19 8) -17]
Test Case: 742 | Input/Output: [(-2 96 -19 -71) -71]
Test Case: 743 | Input/Output: [(-76 19 39 62) -76]
Test Case: 744 | Input/Output: [(10 -21 15 26) -21]
Test Case: 745 | Input/Output: [(51 -16 -14 22) -16]
Test Case: 746 | Input/Output: [(-12 -68 -9 -43) -68]
Test Case: 747 | Input/Output: [(82 54 -74 99) -74]
Test Case: 748 | Input/Output: [(-31 -96 -64 -12) -96]
Test Case: 749 | Input/Output: [(-3 -44 -93 -68) -93]
Test Case: 750 | Input/Output: [(-45 -95 -97 -82) -97]
Test Case: 751 | Input/Output: [(12 -94 38 1) -94]
Test Case: 752 | Input/Output: [(-6 -43 -44 42) -44]
Test Case: 753 | Input/Output: [(-85 48 -56 -73) -85]
Test Case: 754 | Input/Output: [(22 53 77 -34) -34]
Test Case: 755 | Input/Output: [(-1 -5 -67 48) -67]
Test Case: 756 | Input/Output: [(54 16 -81 -80) -81]
Test Case: 757 | Input/Output: [(-43 -34 93 -64) -64]
Test Case: 758 | Input/Output: [(32 -81 -31 -85) -85]
Test Case: 759 | Input/Output: [(71 -21 -55 -78) -78]
Test Case: 760 | Input/Output: [(76 16 -77 -45) -77]
Test Case: 761 | Input/Output: [(41 -21 -50 60) -50]
Test Case: 762 | Input/Output: [(76 56 -21 30) -21]
Test Case: 763 | Input/Output: [(32 -95 40 -71) -95]
Test Case: 764 | Input/Output: [(2 3 95 -82) -82]
Test Case: 765 | Input/Output: [(46 -43 -58 35) -58]
Test Case: 766 | Input/Output: [(18 -58 -53 21) -58]
Test Case: 767 | Input/Output: [(58 -96 -87 -26) -96]
Test Case: 768 | Input/Output: [(72 67 -12 -98) -98]
Test Case: 769 | Input/Output: [(-28 60 12 98) -28]
Test Case: 770 | Input/Output: [(11 -21 -71 -77) -77]
Test Case: 771 | Input/Output: [(-56 -21 72 -4) -56]
Test Case: 772 | Input/Output: [(99 94 -92 -96) -96]
Test Case: 773 | Input/Output: [(-71 -85 -60 12) -85]
Test Case: 774 | Input/Output: [(94 97 -80 75) -80]
Test Case: 775 | Input/Output: [(10 -51 7 28) -51]
Test Case: 776 | Input/Output: [(67 -74 14 -23) -74]
Test Case: 777 | Input/Output: [(-35 80 -22 9) -35]
Test Case: 778 | Input/Output: [(27 53 -59 -23) -59]
Test Case: 779 | Input/Output: [(-31 28 -71 -36) -71]
Test Case: 780 | Input/Output: [(-57 70 -95 58) -95]
Test Case: 781 | Input/Output: [(-12 -95 -53 -23) -95]
Test Case: 782 | Input/Output: [(29 41 -94 -99) -99]
Test Case: 783 | Input/Output: [(100 43 34 -46) -46]
Test Case: 784 | Input/Output: [(-36 17 75 61) -36]
Test Case: 785 | Input/Output: [(-55 -82 -36 -73) -82]
Test Case: 786 | Input/Output: [(-5 -49 46 -44) -49]
Test Case: 787 | Input/Output: [(-91 6 23 -12) -91]
Test Case: 788 | Input/Output: [(-65 87 22 -44) -65]
Test Case: 789 | Input/Output: [(-58 54 58 -14) -58]
Test Case: 790 | Input/Output: [(-91 35 62 60) -91]
Test Case: 791 | Input/Output: [(91 -45 -52 -63) -63]
Test Case: 792 | Input/Output: [(-38 -94 94 -70) -94]
Test Case: 793 | Input/Output: [(85 2 -23 -77) -77]
Test Case: 794 | Input/Output: [(-46 52 -80 41) -80]
Test Case: 795 | Input/Output: [(51 10 -6 -98) -98]
Test Case: 796 | Input/Output: [(-58 -9 33 -14) -58]
Test Case: 797 | Input/Output: [(-6 -81 23 -41) -81]
Test Case: 798 | Input/Output: [(68 12 16 -76) -76]
Test Case: 799 | Input/Output: [(46 -42 -28 60) -42]
Test Case: 800 | Input/Output: [(-63 61 -58 -30) -63]
Test Case: 801 | Input/Output: [(66 -67 79 17) -67]
Test Case: 802 | Input/Output: [(-33 -85 -51 71) -85]
Test Case: 803 | Input/Output: [(92 9 -12 -10) -12]
Test Case: 804 | Input/Output: [(-37 -2 4 58) -37]
Test Case: 805 | Input/Output: [(33 -74 -92 -43) -92]
Test Case: 806 | Input/Output: [(24 39 -69 -86) -86]
Test Case: 807 | Input/Output: [(-52 67 -8 -53) -53]
Test Case: 808 | Input/Output: [(-15 -58 89 -95) -95]
Test Case: 809 | Input/Output: [(-26 28 35 -16) -26]
Test Case: 810 | Input/Output: [(63 5 88 -20) -20]
Test Case: 811 | Input/Output: [(-55 -32 -85 -45) -85]
Test Case: 812 | Input/Output: [(74 -32 -52 23) -52]
Test Case: 813 | Input/Output: [(5 -97 -61 -60) -97]
Test Case: 814 | Input/Output: [(76 -27 59 -92) -92]
Test Case: 815 | Input/Output: [(-22 42 -35 89) -35]
Test Case: 816 | Input/Output: [(26 -6 37 -96) -96]
Test Case: 817 | Input/Output: [(57 53 79 -5) -5]
Test Case: 818 | Input/Output: [(-49 52 -32 -93) -93]
Test Case: 819 | Input/Output: [(-92 83 -10 -85) -92]
Test Case: 820 | Input/Output: [(-91 18 44 -50) -91]
Test Case: 821 | Input/Output: [(17 -39 52 -19) -39]
Test Case: 822 | Input/Output: [(50 73 67 35) 35]
Test Case: 823 | Input/Output: [(-58 82 88 82) -58]
Test Case: 824 | Input/Output: [(12 40 89 -42) -42]
Test Case: 825 | Input/Output: [(-33 -56 85 -79) -79]
Test Case: 826 | Input/Output: [(70 95 40 97) 40]
Test Case: 827 | Input/Output: [(99 -31 99 -23) -31]
Test Case: 828 | Input/Output: [(-18 23 98 35) -18]
Test Case: 829 | Input/Output: [(-40 26 -62 77) -62]
Test Case: 830 | Input/Output: [(-7 -18 20 39) -18]
Test Case: 831 | Input/Output: [(-29 -27 28 -25) -29]
Test Case: 832 | Input/Output: [(27 64 -2 58) -2]
Test Case: 833 | Input/Output: [(65 -18 31 38) -18]
Test Case: 834 | Input/Output: [(18 -23 77 -47) -47]
Test Case: 835 | Input/Output: [(-19 18 -74 0) -74]
Test Case: 836 | Input/Output: [(87 33 97 75) 33]
Test Case: 837 | Input/Output: [(-26 -45 -66 -39) -66]
Test Case: 838 | Input/Output: [(-26 69 51 94) -26]
Test Case: 839 | Input/Output: [(69 -34 -40 -23) -40]
Test Case: 840 | Input/Output: [(76 -63 95 -61) -63]
Test Case: 841 | Input/Output: [(-9 54 26 59) -9]
Test Case: 842 | Input/Output: [(21 -43 -89 -69) -89]
Test Case: 843 | Input/Output: [(66 85 -66 -59) -66]
Test Case: 844 | Input/Output: [(-76 96 -93 83) -93]
Test Case: 845 | Input/Output: [(-15 32 86 65) -15]
Test Case: 846 | Input/Output: [(-1 40 59 55) -1]
Test Case: 847 | Input/Output: [(21 66 79 4) 4]
Test Case: 848 | Input/Output: [(41 -97 -25 -15) -97]
Test Case: 849 | Input/Output: [(56 -40 -13 -26) -40]
Test Case: 850 | Input/Output: [(22 -61 -41 -52) -61]
Test Case: 851 | Input/Output: [(20 28 50 56) 20]
Test Case: 852 | Input/Output: [(95 36 52 -17) -17]
Test Case: 853 | Input/Output: [(6 68 72 80) 6]
Test Case: 854 | Input/Output: [(-75 -67 -98 -55) -98]
Test Case: 855 | Input/Output: [(66 13 97 -45) -45]
Test Case: 856 | Input/Output: [(50 11 59 58) 11]
Test Case: 857 | Input/Output: [(25 28 -37 -98) -98]
Test Case: 858 | Input/Output: [(40 6 84 -95) -95]
Test Case: 859 | Input/Output: [(-80 -42 20 -25) -80]
Test Case: 860 | Input/Output: [(-14 -49 7 28) -49]
Test Case: 861 | Input/Output: [(-20 89 -31 -66) -66]
Test Case: 862 | Input/Output: [(4 50 32 48) 4]
Test Case: 863 | Input/Output: [(-57 -56 68 43) -57]
Test Case: 864 | Input/Output: [(-82 76 59 -57) -82]
Test Case: 865 | Input/Output: [(-65 -90 -31 76) -90]
Test Case: 866 | Input/Output: [(-31 -82 -27 79) -82]
Test Case: 867 | Input/Output: [(-46 -59 -69 15) -69]
Test Case: 868 | Input/Output: [(13 -76 12 31) -76]
Test Case: 869 | Input/Output: [(1 5 -72 65) -72]
Test Case: 870 | Input/Output: [(-79 -26 -23 -100) -100]
Test Case: 871 | Input/Output: [(92 72 -73 -19) -73]
Test Case: 872 | Input/Output: [(39 -20 53 -52) -52]
Test Case: 873 | Input/Output: [(-47 -55 -66 -17) -66]
Test Case: 874 | Input/Output: [(78 -66 37 83) -66]
Test Case: 875 | Input/Output: [(-78 72 84 -65) -78]
Test Case: 876 | Input/Output: [(-7 -94 -20 -42) -94]
Test Case: 877 | Input/Output: [(44 -88 -8 -89) -89]
Test Case: 878 | Input/Output: [(-61 0 13 100) -61]
Test Case: 879 | Input/Output: [(30 -23 23 48) -23]
Test Case: 880 | Input/Output: [(47 -35 -60 84) -60]
Test Case: 881 | Input/Output: [(64 -3 -6 92) -6]
Test Case: 882 | Input/Output: [(-53 -57 -76 70) -76]
Test Case: 883 | Input/Output: [(-53 -61 75 -23) -61]
Test Case: 884 | Input/Output: [(-91 -66 8 42) -91]
Test Case: 885 | Input/Output: [(42 -37 -61 69) -61]
Test Case: 886 | Input/Output: [(-34 -50 88 -91) -91]
Test Case: 887 | Input/Output: [(-92 61 -75 -28) -92]
Test Case: 888 | Input/Output: [(-74 -36 66 50) -74]
Test Case: 889 | Input/Output: [(88 56 -19 -47) -47]
Test Case: 890 | Input/Output: [(-84 77 42 7) -84]
Test Case: 891 | Input/Output: [(51 -45 -6 -58) -58]
Test Case: 892 | Input/Output: [(-72 -68 36 -17) -72]
Test Case: 893 | Input/Output: [(-76 26 -54 8) -76]
Test Case: 894 | Input/Output: [(-73 -46 -72 -53) -73]
Test Case: 895 | Input/Output: [(66 -72 -83 -33) -83]
Test Case: 896 | Input/Output: [(-4 42 91 1) -4]
Test Case: 897 | Input/Output: [(87 -65 27 -78) -78]
Test Case: 898 | Input/Output: [(51 -68 -94 33) -94]
Test Case: 899 | Input/Output: [(54 19 12 88) 12]
Test Case: 900 | Input/Output: [(-67 93 -49 -28) -67]
Test Case: 901 | Input/Output: [(-92 -67 35 86) -92]
Test Case: 902 | Input/Output: [(-36 -7 -54 19) -54]
Test Case: 903 | Input/Output: [(58 -24 -88 -73) -88]
Test Case: 904 | Input/Output: [(25 -33 49 -25) -33]
Test Case: 905 | Input/Output: [(11 -16 95 -25) -25]
Test Case: 906 | Input/Output: [(-74 51 22 17) -74]
Test Case: 907 | Input/Output: [(86 -6 -74 -59) -74]
Test Case: 908 | Input/Output: [(4 -87 -72 -41) -87]
Test Case: 909 | Input/Output: [(70 -33 -65 -62) -65]
Test Case: 910 | Input/Output: [(36 -17 -70 42) -70]
Test Case: 911 | Input/Output: [(-93 -85 -57 10) -93]
Test Case: 912 | Input/Output: [(9 -20 -53 -97) -97]
Test Case: 913 | Input/Output: [(-75 -24 -93 -36) -93]
Test Case: 914 | Input/Output: [(80 71 -72 -1) -72]
Test Case: 915 | Input/Output: [(-38 94 26 -30) -38]
Test Case: 916 | Input/Output: [(92 85 -96 81) -96]
Test Case: 917 | Input/Output: [(72 85 -20 67) -20]
Test Case: 918 | Input/Output: [(54 91 86 -77) -77]
Test Case: 919 | Input/Output: [(37 47 16 -40) -40]
Test Case: 920 | Input/Output: [(-3 60 79 26) -3]
Test Case: 921 | Input/Output: [(-41 57 -39 6) -41]
Test Case: 922 | Input/Output: [(-98 -45 14 92) -98]
Test Case: 923 | Input/Output: [(93 -39 14 81) -39]
Test Case: 924 | Input/Output: [(52 -43 -85 54) -85]
Test Case: 925 | Input/Output: [(16 38 -95 -76) -95]
Test Case: 926 | Input/Output: [(-24 38 29 -93) -93]
Test Case: 927 | Input/Output: [(-44 -4 -15 -59) -59]
Test Case: 928 | Input/Output: [(90 58 -28 -70) -70]
Test Case: 929 | Input/Output: [(-25 55 -19 -7) -25]
Test Case: 930 | Input/Output: [(95 72 -84 -74) -84]
Test Case: 931 | Input/Output: [(66 -89 71 -50) -89]
Test Case: 932 | Input/Output: [(38 8 34 93) 8]
Test Case: 933 | Input/Output: [(-32 32 -27 35) -32]
Test Case: 934 | Input/Output: [(-31 -83 -8 3) -83]
Test Case: 935 | Input/Output: [(-17 -93 61 82) -93]
Test Case: 936 | Input/Output: [(-13 -67 -70 99) -70]
Test Case: 937 | Input/Output: [(-59 -39 -68 -34) -68]
Test Case: 938 | Input/Output: [(-76 -71 19 78) -76]
Test Case: 939 | Input/Output: [(-38 99 49 10) -38]
Test Case: 940 | Input/Output: [(-26 -21 -57 -40) -57]
Test Case: 941 | Input/Output: [(66 -31 -100 -95) -100]
Test Case: 942 | Input/Output: [(-53 -27 -17 67) -53]
Test Case: 943 | Input/Output: [(-70 46 -24 71) -70]
Test Case: 944 | Input/Output: [(12 58 -89 -98) -98]
Test Case: 945 | Input/Output: [(86 -44 78 79) -44]
Test Case: 946 | Input/Output: [(-9 -5 28 43) -9]
Test Case: 947 | Input/Output: [(83 54 94 46) 46]
Test Case: 948 | Input/Output: [(-70 -55 -17 32) -70]
Test Case: 949 | Input/Output: [(72 93 -59 -25) -59]
Test Case: 950 | Input/Output: [(19 -7 73 -60) -60]
Test Case: 951 | Input/Output: [(-69 54 92 76) -69]
Test Case: 952 | Input/Output: [(-94 10 -85 -89) -94]
Test Case: 953 | Input/Output: [(-47 81 -71 1) -71]
Test Case: 954 | Input/Output: [(79 -86 -72 55) -86]
Test Case: 955 | Input/Output: [(25 96 -63 69) -63]
Test Case: 956 | Input/Output: [(63 -67 57 -99) -99]
Test Case: 957 | Input/Output: [(-9 -59 -76 -66) -76]
Test Case: 958 | Input/Output: [(-52 33 -16 -90) -90]
Test Case: 959 | Input/Output: [(-96 90 -22 62) -96]
Test Case: 960 | Input/Output: [(90 -52 -16 -58) -58]
Test Case: 961 | Input/Output: [(-3 51 -5 -94) -94]
Test Case: 962 | Input/Output: [(-17 -10 30 -17) -17]
Test Case: 963 | Input/Output: [(40 75 80 51) 40]
Test Case: 964 | Input/Output: [(-44 -99 -92 -81) -99]
Test Case: 965 | Input/Output: [(-45 -16 81 70) -45]
Test Case: 966 | Input/Output: [(97 -11 -32 99) -32]
Test Case: 967 | Input/Output: [(0 -88 -56 51) -88]
Test Case: 968 | Input/Output: [(56 -37 82 42) -37]
Test Case: 969 | Input/Output: [(-64 -86 24 -71) -86]
Test Case: 970 | Input/Output: [(-97 -61 -36 85) -97]
Test Case: 971 | Input/Output: [(-67 81 58 100) -67]
Test Case: 972 | Input/Output: [(-39 92 9 8) -39]
Test Case: 973 | Input/Output: [(-74 -23 -63 93) -74]
Test Case: 974 | Input/Output: [(-82 -34 -76 29) -82]
Test Case: 975 | Input/Output: [(1 -39 15 -66) -66]
Test Case: 976 | Input/Output: [(-90 97 -89 47) -90]
Test Case: 977 | Input/Output: [(60 -46 11 42) -46]
Test Case: 978 | Input/Output: [(59 -6 11 -100) -100]
Test Case: 979 | Input/Output: [(-50 -57 57 -52) -57]
Test Case: 980 | Input/Output: [(28 33 -62 -64) -64]
Test Case: 981 | Input/Output: [(41 71 51 92) 41]
Test Case: 982 | Input/Output: [(-63 -26 -20 -21) -63]
Test Case: 983 | Input/Output: [(-26 51 -49 72) -49]
Test Case: 984 | Input/Output: [(-82 -63 72 -25) -82]
Test Case: 985 | Input/Output: [(93 -3 -18 86) -18]
Test Case: 986 | Input/Output: [(52 -97 43 16) -97]
Test Case: 987 | Input/Output: [(48 99 68 70) 48]
Test Case: 988 | Input/Output: [(4 25 -55 60) -55]
Test Case: 989 | Input/Output: [(15 -19 58 65) -19]
Test Case: 990 | Input/Output: [(-38 -28 2 0) -38]
Test Case: 991 | Input/Output: [(-53 14 -57 -14) -57]
Test Case: 992 | Input/Output: [(24 93 83 71) 24]
Test Case: 993 | Input/Output: [(-4 -72 0 94) -72]
Test Case: 994 | Input/Output: [(-82 -54 20 -21) -82]
Test Case: 995 | Input/Output: [(-91 -31 -15 86) -91]
Test Case: 996 | Input/Output: [(29 84 59 -13) -13]
Test Case: 997 | Input/Output: [(81 6 24 -91) -91]
Test Case: 998 | Input/Output: [(5 -38 58 83) -38]
Test Case: 999 | Input/Output: [(-62 -51 -32 -44) -62]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = -41 -69 79 -111 -51 -59 -117 67 -63 -26 85 111 77 121 -53 13
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[71 -52 -52 -52] -52] [[-42 16 -42 -42] -42] [[-35 -35 -35 -76] -76] [[-67 31 31 31] -67] [[-83 -83 -83 27] -83] [[70 -13 70 70] -13] [[49 -59 49 49] -59] [[54 54 54 -79] -79] [[48 -47 -47 -47] -47] [[-21 -21 -21 -77] -77] [(20 20 20 20) 20] [(-11 -11 -11 -11) -11] [(49 49 49 49) 49] [(2 2 2 2) 2] [(-25 -25 -25 -25) -25] [(46 35 52 29) 29] [(92 5 24 98) 5] [(99 60 66 1) 1] [(76 22 41 93) 22] [(90 23 45 5) 5] [(30 79 59 5) 5] [(88 18 35 11) 11] [(37 80 28 25) 25] [(11 45 95 23) 11] [(4 78 24 2) 2] [(91 79 68 25) 25] [(18 50 83 100) 18] [(0 72 85 26) 0] [(60 96 60 5) 5] [(28 5 57 91) 5] [(88 23 79 58) 23] [(97 91 99 97) 91] [(31 24 55 65) 24] [(57 17 84 15) 15] [(61 92 7 44) 7] [(21 46 -37 -92) -92] [(100 23 79 78) 23] [(69 -29 66 73) -29] [(94 25 26 -68) -68] [(-50 97 -99 1) -99] [(81 -53 19 96) -53] [(-47 -57 -32 -99) -99] [(-28 -14 76 -12) -28] [(13 -5 -47 91) -47] [(-100 50 -96 -17) -100] [(-98 -40 -55 -85) -98] [(74 -78 -61 -62) -78] [(90 74 -31 -22) -31] [(-61 4 -51 -33) -61] [(0 -6 99 -99) -99] [(-17 -61 -90 -36) -90] [(28 48 18 -21) -21] [(-96 69 -84 -90) -96] [(-88 -23 -7 -96) -96] [(-39 -29 -100 44) -100] [(30 -50 24 -34) -50] [(-24 -5 -81 63) -81] [(22 30 70 -17) -17] [(85 -53 -99 34) -99] [(13 -16 81 84) -16] [(2 11 -46 -74) -74] [(51 89 68 5) 5] [(-3 -79 -62 12) -79] [(25 14 -8 -42) -42] [(38 40 -7 37) -7] [(86 56 -67 -8) -67] [(-39 86 0 -71) -71] [(94 74 -57 -5) -57] [(-87 78 94 -83) -87] [(10 82 -10 -65) -65] [(-23 89 9 -35) -35] [(-1 57 34 -67) -67] [(99 40 -65 36) -65] [(73 13 -50 -21) -50] [(-89 -74 1 32) -89] [(-67 87 85 -3) -67] [(-65 34 4 47) -65] [(82 4 3 -95) -95] [(45 -68 -72 -51) -72] [(-35 4 99 -14) -35] [(-72 6 -86 63) -86] [(19 91 41 80) 19] [(44 -54 -92 -76) -92] [(-58 -49 99 -37) -58] [(-21 -77 -25 -21) -77] [(2 58 69 3) 2] [(60 -94 48 68) -94] [(-31 -96 90 14) -96] [(86 -75 -14 -92) -92] [(-47 14 2 -74) -74] [(60 -16 16 -37) -37] [(32 30 16 0) 0] [(-17 38 34 -20) -20] [(76 -15 -83 28) -83] [(34 20 -86 51) -86])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output: 27                 
Correct output: -13                 | Program output: 70                 
Correct output: -59                 | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 98                 
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 100                
Correct output: 0                   | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 91                 
Correct output: 23                  | Program output: 58                 
Correct output: 91                  | Program output: 97                 
Correct output: 24                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 78                 
Correct output: -29                 | Program output: 73                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 1                  
Correct output: -53                 | Program output: 96                 
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -12                
Correct output: -47                 | Program output: 91                 
Correct output: -100                | Program output: -17                
Correct output: -98                 | Program output: -85                
Correct output: -78                 | Program output: -62                
Correct output: -31                 | Program output: -22                
Correct output: -61                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -36                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: 44                 
Correct output: -50                 | Program output: -34                
Correct output: -81                 | Program output: 63                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: 34                 
Correct output: -16                 | Program output: 84                 
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: 12                 
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 37                 
Correct output: -67                 | Program output: -8                 
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -5                 
Correct output: -87                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: 36                 
Correct output: -50                 | Program output: -21                
Correct output: -89                 | Program output: 32                 
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: 47                 
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -51                
Correct output: -35                 | Program output: -14                
Correct output: -86                 | Program output: 63                 
Correct output: 19                  | Program output: 80                 
Correct output: -92                 | Program output: -76                
Correct output: -58                 | Program output: -37                
Correct output: -77                 | Program output: -21                
Correct output: 2                   | Program output: 3                  
Correct output: -94                 | Program output: 68                 
Correct output: -96                 | Program output: 14                 
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: 28                 
Correct output: -86                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction 71} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_exec_783} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_empty} {:close 1, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction 17} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction print_exec} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction tagged_58} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_rot})
Lexicase best program: (in2 integer_yankdup exec_eq 71 integer_pop print_integer integer_dup_times integer_lte in1 integer_gte exec_do*count (tag_exec_783 (boolean_swap in2 integer_inc integer_eq integer_dup_items exec_noop boolean_frominteger exec_s (integer_fromboolean exec_s () (in1 exec_eq in1 boolean_yank integer_yankdup) (exec_k (integer_swap integer_yank boolean_dup boolean_frominteger exec_when (integer_dup_items) boolean_eq boolean_empty) (in2) exec_stackdepth) integer_pop integer_dec boolean_shove integer_eq integer_yank) () (integer_swap exec_yankdup boolean_or integer_gt boolean_and 17 integer_sub boolean_dup_items integer_dup_items integer_yank integer_stackdepth boolean_shove exec_do*count () exec_k_when_autoconstructing () (exec_if (boolean_not print_exec (exec_shove () exec_dup (exec_stackdepth exec_do*range (print_integer boolean_and) boolean_invert_second_then_and exec_s_when_autoconstructing (integer_sub integer_yank) () (boolean_dup exec_do*times () print_boolean exec_yank) exec_y (integer_mod integer_fromboolean boolean_eq) exec_noop boolean_dup_times integer_dup_times) integer_gt boolean_shove integer_sub in1 exec_k_when_autoconstructing (boolean_flush integer_pop tagged_58) (exec_empty exec_dup_items integer_flush) integer_rot exec_yank exec_pop (print_integer integer_rot in2 exec_rot () () ()))) ())))))
Lexicase best errors: [0 0 1 1 1 1 1 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 131
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction 71} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_exec_783} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_empty} {:close 1, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction 17} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction print_exec} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction tagged_58} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_rot})
Zero cases best program: (in2 integer_yankdup exec_eq 71 integer_pop print_integer integer_dup_times integer_lte in1 integer_gte exec_do*count (tag_exec_783 (boolean_swap in2 integer_inc integer_eq integer_dup_items exec_noop boolean_frominteger exec_s (integer_fromboolean exec_s () (in1 exec_eq in1 boolean_yank integer_yankdup) (exec_k (integer_swap integer_yank boolean_dup boolean_frominteger exec_when (integer_dup_items) boolean_eq boolean_empty) (in2) exec_stackdepth) integer_pop integer_dec boolean_shove integer_eq integer_yank) () (integer_swap exec_yankdup boolean_or integer_gt boolean_and 17 integer_sub boolean_dup_items integer_dup_items integer_yank integer_stackdepth boolean_shove exec_do*count () exec_k_when_autoconstructing () (exec_if (boolean_not print_exec (exec_shove () exec_dup (exec_stackdepth exec_do*range (print_integer boolean_and) boolean_invert_second_then_and exec_s_when_autoconstructing (integer_sub integer_yank) () (boolean_dup exec_do*times () print_boolean exec_yank) exec_y (integer_mod integer_fromboolean boolean_eq) exec_noop boolean_dup_times integer_dup_times) integer_gt boolean_shove integer_sub in1 exec_k_when_autoconstructing (boolean_flush integer_pop tagged_58) (exec_empty exec_dup_items integer_flush) integer_rot exec_yank exec_pop (print_integer integer_rot in2 exec_rot () () ()))) ())))))
Zero cases best errors: [0 0 1 1 1 1 1 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 131
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 5 5 5 2 1 1 4 3)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (3 3 5 5 5 2 1 1 4 3)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank})
Best program: (in4 exec_y_when_autoconstructing (boolean_invert_second_then_and boolean_or integer_max) print_integer boolean_dup exec_eq integer_add integer_gt in4 integer_gt integer_gt exec_rot (exec_pop (boolean_not exec_dup (integer_yank integer_dup_times exec_do*range () exec_do*while () exec_when (boolean_shove integer_dup_items integer_swap exec_s (exec_s_when_autoconstructing (integer_swap) (integer_rot) (exec_shove ()) integer_stackdepth print_exec (exec_dup_items boolean_dup integer_pop print_exec (exec_swap (exec_pop (exec_dup (exec_while () boolean_flush boolean_swap exec_yank exec_yankdup) exec_do*count (integer_gte) integer_min integer_gte integer_dup_items) integer_dup_items exec_s_when_autoconstructing () () (boolean_not integer_gt boolean_yank)) ()))) () ())))) () ())
Errors: [1 1 0 0 0 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 54
Size: 82
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 9.968
Median total errors in population: 10
Error averages by case: (0.997 0.997 0.995 0.995 0.995 0.998 0.999 0.999 0.996 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.624
Average program size in population (points): 66.811
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.272
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 504275
--- Timings ---
Current time: 1559314529543 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.7 seconds, 27.0%
Fitness Testing:      1.8 seconds, 69.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -35                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: 70                 
Correct output: -59                 | Program output: 49                 
Correct output: -79                 | Program output: 54                 
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -21                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 52                 
Correct output: 5                   | Program output: 24                 
Correct output: 1                   | Program output: 66                 
Correct output: 22                  | Program output: 41                 
Correct output: 5                   | Program output: 45                 
Correct output: 5                   | Program output: 59                 
Correct output: 11                  | Program output: 35                 
Correct output: 25                  | Program output: 28                 
Correct output: 11                  | Program output: 95                 
Correct output: 2                   | Program output: 24                 
Correct output: 25                  | Program output: 68                 
Correct output: 18                  | Program output: 83                 
Correct output: 0                   | Program output: 85                 
Correct output: 5                   | Program output: 60                 
Correct output: 5                   | Program output: 57                 
Correct output: 23                  | Program output: 79                 
Correct output: 91                  | Program output: 99                 
Correct output: 24                  | Program output: 55                 
Correct output: 15                  | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: -92                 | Program output: -37                
Correct output: 23                  | Program output: 79                 
Correct output: -29                 | Program output: 66                 
Correct output: -68                 | Program output: 26                 
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: 19                 
Correct output: -99                 | Program output: -32                
Correct output: -28                 | Program output: 76                 
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -96                
Correct output: -98                 | Program output: -55                
Correct output: -78                 | Program output: -61                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: 18                 
Correct output: -96                 | Program output: -84                
Correct output: -96                 | Program output: -7                 
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: 24                 
Correct output: -81                 | Program output: -81                
Correct output: -17                 | Program output: 70                 
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: 81                 
Correct output: -74                 | Program output: -46                
Correct output: 5                   | Program output: 68                 
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -8                 
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: 0                  
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: 94                 
Correct output: -65                 | Program output: -10                
Correct output: -35                 | Program output: 9                  
Correct output: -67                 | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: 1                  
Correct output: -67                 | Program output: 85                 
Correct output: -65                 | Program output: 4                  
Correct output: -95                 | Program output: 3                  
Correct output: -72                 | Program output: -72                
Correct output: -35                 | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 19                  | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: 99                 
Correct output: -77                 | Program output: -25                
Correct output: 2                   | Program output: 69                 
Correct output: -94                 | Program output: 48                 
Correct output: -96                 | Program output: 90                 
Correct output: -92                 | Program output: -14                
Correct output: -74                 | Program output: 2                  
Correct output: -37                 | Program output: 16                 
Correct output: 0                   | Program output: 16                 
Correct output: -20                 | Program output: 34                 
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction -72} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_604} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_dup_items exec_y_when_autoconstructing (exec_eq boolean_frominteger integer_add exec_k_when_autoconstructing (integer_inc -72) (boolean_and integer_lt) integer_add boolean_invert_second_then_and) integer_max tag_integer_604 integer_div exec_do*times (exec_noop) integer_mod in3 print_integer boolean_eq integer_fromboolean boolean_pop integer_yank integer_yank exec_noop exec_do*while (integer_swap integer_gte) boolean_stackdepth exec_noop exec_y (integer_shove boolean_dup integer_lt exec_flush exec_do*range (integer_inc print_newline exec_do*range (boolean_yank integer_mult)) boolean_or boolean_dup exec_s_when_autoconstructing (integer_add integer_dec integer_add boolean_or boolean_frominteger integer_max) (exec_yank integer_sub exec_y (boolean_yankdup in4 integer_stackdepth) integer_rot exec_stackdepth exec_do*count (exec_if (integer_yank integer_pop exec_do*while (integer_empty) integer_div) (integer_lt) exec_do*while ())) ()))
Lexicase best errors: [1 1 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 86
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction -72} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_604} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_dup_items exec_y_when_autoconstructing (exec_eq boolean_frominteger integer_add exec_k_when_autoconstructing (integer_inc -72) (boolean_and integer_lt) integer_add boolean_invert_second_then_and) integer_max tag_integer_604 integer_div exec_do*times (exec_noop) integer_mod in3 print_integer boolean_eq integer_fromboolean boolean_pop integer_yank integer_yank exec_noop exec_do*while (integer_swap integer_gte) boolean_stackdepth exec_noop exec_y (integer_shove boolean_dup integer_lt exec_flush exec_do*range (integer_inc print_newline exec_do*range (boolean_yank integer_mult)) boolean_or boolean_dup exec_s_when_autoconstructing (integer_add integer_dec integer_add boolean_or boolean_frominteger integer_max) (exec_yank integer_sub exec_y (boolean_yankdup in4 integer_stackdepth) integer_rot exec_stackdepth exec_do*count (exec_if (integer_yank integer_pop exec_do*while (integer_empty) integer_div) (integer_lt) exec_do*while ())) ()))
Zero cases best errors: [1 1 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 86
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (179 178 178 163 865 164 685 265 168 613)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (179 178 178 163 865 164 685 265 168 613)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction tagged_301} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_integer_169} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 2, :instruction tag_boolean_163} {:close 0, :instruction print_exec} {:close 0, :instruction integer_min})
Best program: (integer_rot in4 exec_do*times (boolean_dup_items boolean_dup exec_k (boolean_frominteger exec_dup_items exec_do*count (boolean_yank boolean_pop exec_dup_items exec_when (exec_do*range (exec_do*range (integer_div integer_add exec_pop () integer_pop) exec_yank exec_noop) boolean_and print_integer in3 print_integer integer_min integer_dec in1 exec_shove () exec_while (exec_do*while (integer_fromboolean exec_y (integer_add) in2 tagged_301) boolean_not exec_eq) exec_do*range (integer_stackdepth boolean_swap exec_yank exec_dup_items) integer_dup_times integer_shove exec_y (in3) exec_do*range (integer_lte boolean_dup_times)) integer_min exec_flush) integer_swap) (exec_y_when_autoconstructing (exec_rot (integer_gt tag_integer_169 integer_lte integer_rot exec_swap (print_exec (boolean_yankdup) exec_s_when_autoconstructing (boolean_invert_second_then_and integer_dup_items exec_do*range (boolean_yank boolean_empty) exec_do*times () boolean_invert_second_then_and boolean_stackdepth) (exec_y_when_autoconstructing (in4 integer_mod integer_div exec_s (exec_yank boolean_not tag_boolean_163) () (print_exec (integer_min)))) ()) ()) () ()))))
Errors: [1 1 1 0 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 81
Size: 114
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 6.542
Median total errors in population: 6
Error averages by case: (0.821 0.822 0.822 0.837 0.135 0.836 0.315 0.735 0.832 0.387)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.521
Average program size in population (points): 97.069
Average percent parens in population: 0.283
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.493
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 945264
--- Timings ---
Current time: 1559314532672 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.3 seconds, 43.5%
Fitness Testing:      2.6 seconds, 48.6%
Report:               0.3 seconds,  6.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: 71                 
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: 70                 
Correct output: -59                 | Program output: 49                 
Correct output: -79                 | Program output: 54                 
Correct output: -47                 | Program output: 48                 
Correct output: -77                 | Program output: -21                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 46                 
Correct output: 5                   | Program output: 92                 
Correct output: 1                   | Program output: 99                 
Correct output: 22                  | Program output: 76                 
Correct output: 5                   | Program output: 90                 
Correct output: 5                   | Program output: 30                 
Correct output: 11                  | Program output: 88                 
Correct output: 25                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 4                  
Correct output: 25                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 60                 
Correct output: 5                   | Program output: 28                 
Correct output: 23                  | Program output: 88                 
Correct output: 91                  | Program output: 97                 
Correct output: 24                  | Program output: 31                 
Correct output: 15                  | Program output: 57                 
Correct output: 7                   | Program output: 61                 
Correct output: -92                 | Program output: 21                 
Correct output: 23                  | Program output: 100                
Correct output: -29                 | Program output: 69                 
Correct output: -68                 | Program output: 94                 
Correct output: -99                 | Program output: -50                
Correct output: -53                 | Program output: 81                 
Correct output: -99                 | Program output: -47                
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 13                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 74                 
Correct output: -31                 | Program output: 90                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 0                  
Correct output: -90                 | Program output: -17                
Correct output: -21                 | Program output: 28                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -88                
Correct output: -100                | Program output: -39                
Correct output: -50                 | Program output: 30                 
Correct output: -81                 | Program output: -24                
Correct output: -17                 | Program output: 22                 
Correct output: -99                 | Program output: 85                 
Correct output: -16                 | Program output: 13                 
Correct output: -74                 | Program output: 2                  
Correct output: 5                   | Program output: 51                 
Correct output: -79                 | Program output: -3                 
Correct output: -42                 | Program output: 25                 
Correct output: -7                  | Program output: 38                 
Correct output: -67                 | Program output: 86                 
Correct output: -71                 | Program output: -39                
Correct output: -57                 | Program output: 94                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: 10                 
Correct output: -35                 | Program output: -23                
Correct output: -67                 | Program output: -1                 
Correct output: -65                 | Program output: 99                 
Correct output: -50                 | Program output: 73                 
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -95                 | Program output: 82                 
Correct output: -72                 | Program output: 45                 
Correct output: -35                 | Program output: -35                
Correct output: -86                 | Program output: -72                
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: 44                 
Correct output: -58                 | Program output: -58                
Correct output: -77                 | Program output: -21                
Correct output: 2                   | Program output: 2                  
Correct output: -94                 | Program output: 60                 
Correct output: -96                 | Program output: -31                
Correct output: -92                 | Program output: 86                 
Correct output: -74                 | Program output: -47                
Correct output: -37                 | Program output: 60                 
Correct output: 0                   | Program output: 32                 
Correct output: -20                 | Program output: -17                
Correct output: -83                 | Program output: 76                 
Correct output: -86                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_604} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while})
Lexicase best program: (in1 print_integer exec_s (integer_inc exec_empty integer_max tag_integer_604 integer_div exec_do*times (exec_noop) integer_mod) (in3 print_integer boolean_eq integer_fromboolean boolean_pop integer_yank integer_yank) (exec_noop exec_do*while (integer_swap integer_gte) boolean_stackdepth exec_noop exec_y (integer_shove boolean_dup integer_lt exec_flush exec_do*range (integer_inc print_newline exec_do*range (boolean_yank integer_mult)) boolean_or boolean_dup exec_s_when_autoconstructing (integer_add integer_dec integer_add boolean_or boolean_frominteger integer_max) (exec_yank integer_sub exec_y (boolean_yankdup in4 integer_stackdepth) integer_rot exec_stackdepth exec_do*count (exec_if (integer_yank integer_pop exec_do*while (integer_empty) integer_div) (integer_lt) exec_do*while ())) ())))
Lexicase best errors: [0 1 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 79
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_604} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while})
Zero cases best program: (in1 print_integer exec_s (integer_inc exec_empty integer_max tag_integer_604 integer_div exec_do*times (exec_noop) integer_mod) (in3 print_integer boolean_eq integer_fromboolean boolean_pop integer_yank integer_yank) (exec_noop exec_do*while (integer_swap integer_gte) boolean_stackdepth exec_noop exec_y (integer_shove boolean_dup integer_lt exec_flush exec_do*range (integer_inc print_newline exec_do*range (boolean_yank integer_mult)) boolean_or boolean_dup exec_s_when_autoconstructing (integer_add integer_dec integer_add boolean_or boolean_frominteger integer_max) (exec_yank integer_sub exec_y (boolean_yankdup in4 integer_stackdepth) integer_rot exec_stackdepth exec_do*count (exec_if (integer_yank integer_pop exec_do*while (integer_empty) integer_div) (integer_lt) exec_do*while ())) ())))
Zero cases best errors: [0 1 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 79
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (325 387 1 155 869 326 325 154 325 325)
Population mean number of elite cases: 3.19
Count of perfect (error zero) individuals by case: (325 387 1 155 869 326 325 154 325 325)
Population mean number of perfect (error zero) cases: 3.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction -86} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction 80} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup})
Best program: (in1 print_integer exec_s (integer_inc exec_empty integer_lt integer_flush boolean_dup_times boolean_invert_first_then_and boolean_not) (boolean_dup) (exec_while (in3) exec_dup () exec_k_when_autoconstructing (in3 integer_gte exec_shove () exec_if () (integer_yank in4 integer_pop exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq) (boolean_yank exec_do*times (boolean_frominteger boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub exec_rot (integer_gt) (exec_do*count () in4 boolean_dup_items boolean_shove) (exec_k (exec_if (boolean_yank integer_lte boolean_frominteger integer_gt) (integer_min) boolean_pop print_exec (exec_do*range (integer_sub integer_sub exec_while (exec_empty exec_swap (-86 exec_yankdup exec_pop (integer_lt exec_do*times (integer_div) integer_gte) exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_swap integer_pop) (exec_dup_items integer_pop exec_do*range (80 exec_shove (exec_if (boolean_dup_times integer_rot integer_dup integer_dup) ()))) ()) () ()) ())))) ())) ())) ())))
Errors: [0 1 1 1 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 92
Size: 140
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 6.808
Median total errors in population: 8
Error averages by case: (0.675 0.613 0.999 0.845 0.131 0.674 0.675 0.846 0.675 0.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.908
Average program size in population (points): 105.22
Average percent parens in population: 0.293
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.989
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1431491
--- Timings ---
Current time: 1559314536213 milliseconds
Total Time:           9.3 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.8 seconds, 52.0%
Fitness Testing:      3.2 seconds, 34.7%
Report:               1.1 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -35                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: 70                 
Correct output: -59                 | Program output: 49                 
Correct output: -79                 | Program output: 54                 
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -21                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 52                 
Correct output: 5                   | Program output: 24                 
Correct output: 1                   | Program output: 66                 
Correct output: 22                  | Program output: 41                 
Correct output: 5                   | Program output: 45                 
Correct output: 5                   | Program output: 59                 
Correct output: 11                  | Program output: 35                 
Correct output: 25                  | Program output: 28                 
Correct output: 11                  | Program output: 95                 
Correct output: 2                   | Program output: 24                 
Correct output: 25                  | Program output: 68                 
Correct output: 18                  | Program output: 83                 
Correct output: 0                   | Program output: 85                 
Correct output: 5                   | Program output: 60                 
Correct output: 5                   | Program output: 57                 
Correct output: 23                  | Program output: 79                 
Correct output: 91                  | Program output: 99                 
Correct output: 24                  | Program output: 55                 
Correct output: 15                  | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: -92                 | Program output: -37                
Correct output: 23                  | Program output: 79                 
Correct output: -29                 | Program output: 66                 
Correct output: -68                 | Program output: 26                 
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: 19                 
Correct output: -99                 | Program output: -32                
Correct output: -28                 | Program output: 76                 
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -96                
Correct output: -98                 | Program output: -55                
Correct output: -78                 | Program output: -61                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: 18                 
Correct output: -96                 | Program output: -84                
Correct output: -96                 | Program output: -7                 
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: 24                 
Correct output: -81                 | Program output: -81                
Correct output: -17                 | Program output: 70                 
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: 81                 
Correct output: -74                 | Program output: -46                
Correct output: 5                   | Program output: 68                 
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -8                 
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: 0                  
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: 94                 
Correct output: -65                 | Program output: -10                
Correct output: -35                 | Program output: 9                  
Correct output: -67                 | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: 1                  
Correct output: -67                 | Program output: 85                 
Correct output: -65                 | Program output: 4                  
Correct output: -95                 | Program output: 3                  
Correct output: -72                 | Program output: -72                
Correct output: -35                 | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 19                  | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: 99                 
Correct output: -77                 | Program output: -25                
Correct output: 2                   | Program output: 69                 
Correct output: -94                 | Program output: 48                 
Correct output: -96                 | Program output: 90                 
Correct output: -92                 | Program output: -14                
Correct output: -74                 | Program output: 2                  
Correct output: -37                 | Program output: 16                 
Correct output: 0                   | Program output: 16                 
Correct output: -20                 | Program output: 34                 
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_644} {:close 0, :instruction integer_inc} {:close 1, :instruction -72} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_604} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction tagged_301} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_gt} {:close 0, :instruction tag_integer_169} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 2, :instruction tag_boolean_163} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (integer_dup_items exec_y_when_autoconstructing (exec_eq boolean_frominteger integer_add tagged_644 integer_inc -72) boolean_and integer_lt integer_add boolean_invert_second_then_and integer_max tag_integer_604 integer_div exec_do*times (exec_noop) integer_mod in3 print_integer boolean_eq integer_fromboolean boolean_pop integer_yank integer_yank exec_noop exec_do*while (integer_swap integer_gte) boolean_stackdepth exec_noop exec_y (integer_shove boolean_dup integer_lt exec_flush exec_do*range (integer_inc print_newline integer_dup_times boolean_yank tagged_301) boolean_not exec_eq) exec_do*range (integer_stackdepth boolean_swap exec_yank exec_dup_items) integer_dup_times integer_shove exec_y (in3) exec_do*range (integer_lte boolean_dup_times) integer_min exec_pop () integer_swap exec_y_when_autoconstructing (integer_sub integer_gt) tag_integer_169 integer_lte integer_rot exec_swap (print_exec (boolean_yankdup) exec_s_when_autoconstructing (boolean_invert_second_then_and integer_dup_items exec_do*range (boolean_yank boolean_empty) exec_do*times () boolean_invert_second_then_and boolean_stackdepth) (exec_y_when_autoconstructing (in4 integer_mod integer_div exec_s (exec_yank boolean_not tag_boolean_163) () (print_exec (boolean_yankdup)))) ()) ())
Lexicase best errors: [1 0 1 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 111
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_644} {:close 0, :instruction integer_inc} {:close 1, :instruction -72} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_604} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction tagged_301} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_gt} {:close 0, :instruction tag_integer_169} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 2, :instruction tag_boolean_163} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (integer_dup_items exec_y_when_autoconstructing (exec_eq boolean_frominteger integer_add tagged_644 integer_inc -72) boolean_and integer_lt integer_add boolean_invert_second_then_and integer_max tag_integer_604 integer_div exec_do*times (exec_noop) integer_mod in3 print_integer boolean_eq integer_fromboolean boolean_pop integer_yank integer_yank exec_noop exec_do*while (integer_swap integer_gte) boolean_stackdepth exec_noop exec_y (integer_shove boolean_dup integer_lt exec_flush exec_do*range (integer_inc print_newline integer_dup_times boolean_yank tagged_301) boolean_not exec_eq) exec_do*range (integer_stackdepth boolean_swap exec_yank exec_dup_items) integer_dup_times integer_shove exec_y (in3) exec_do*range (integer_lte boolean_dup_times) integer_min exec_pop () integer_swap exec_y_when_autoconstructing (integer_sub integer_gt) tag_integer_169 integer_lte integer_rot exec_swap (print_exec (boolean_yankdup) exec_s_when_autoconstructing (boolean_invert_second_then_and integer_dup_items exec_do*range (boolean_yank boolean_empty) exec_do*times () boolean_invert_second_then_and boolean_stackdepth) (exec_y_when_autoconstructing (in4 integer_mod integer_div exec_s (exec_yank boolean_not tag_boolean_163) () (print_exec (boolean_yankdup)))) ()) ())
Zero cases best errors: [1 0 1 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 111
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (503 83 207 99 208 87 87 395 503 504)
Population mean number of elite cases: 2.68
Count of perfect (error zero) individuals by case: (503 83 207 99 208 87 87 395 503 504)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction -72} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_604} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while})
Best program: (integer_dup_items exec_y_when_autoconstructing (exec_eq boolean_frominteger integer_add exec_k_when_autoconstructing (integer_inc -72) (boolean_and integer_lt) integer_add boolean_invert_second_then_and) integer_max tag_integer_604 integer_div exec_do*times (exec_noop) integer_mod in3 print_integer boolean_eq integer_fromboolean boolean_pop integer_yank integer_yank exec_noop exec_do*while (integer_swap integer_gte) boolean_stackdepth exec_noop exec_y (boolean_eq boolean_dup integer_lt exec_flush exec_do*range (integer_inc integer_lt exec_do*range (boolean_yank integer_mult)) boolean_or boolean_dup exec_s_when_autoconstructing (integer_add integer_dec integer_add boolean_or boolean_frominteger integer_max) (exec_yank integer_sub exec_y (boolean_yankdup in4 integer_stackdepth) integer_rot exec_stackdepth exec_do*count (exec_if (integer_yank integer_pop exec_do*while (integer_empty) integer_div) (integer_lt) exec_do*while ())) ()))
Errors: [1 0 1 1 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 68
Size: 86
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 7.324
Median total errors in population: 7
Error averages by case: (0.497 0.917 0.793 0.901 0.792 0.913 0.913 0.605 0.497 0.496)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.66
Average program size in population (points): 104.264
Average percent parens in population: 0.312
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.52525
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1784439
--- Timings ---
Current time: 1559314539009 milliseconds
Total Time:          12.1 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.8 seconds, 56.3%
Fitness Testing:      3.7 seconds, 30.4%
Report:               1.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output: 27                 
Correct output: -13                 | Program output: 70                 
Correct output: -59                 | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 98                 
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 100                
Correct output: 0                   | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 91                 
Correct output: 23                  | Program output: 58                 
Correct output: 91                  | Program output: 97                 
Correct output: 24                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 78                 
Correct output: -29                 | Program output: 73                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 1                  
Correct output: -53                 | Program output: 96                 
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -12                
Correct output: -47                 | Program output: 91                 
Correct output: -100                | Program output: -17                
Correct output: -98                 | Program output: -85                
Correct output: -78                 | Program output: -62                
Correct output: -31                 | Program output: -22                
Correct output: -61                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -36                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: 44                 
Correct output: -50                 | Program output: -34                
Correct output: -81                 | Program output: 63                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: 34                 
Correct output: -16                 | Program output: 84                 
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: 12                 
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 37                 
Correct output: -67                 | Program output: -8                 
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -5                 
Correct output: -87                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: 36                 
Correct output: -50                 | Program output: -21                
Correct output: -89                 | Program output: 32                 
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: 47                 
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -51                
Correct output: -35                 | Program output: -14                
Correct output: -86                 | Program output: 63                 
Correct output: 19                  | Program output: 80                 
Correct output: -92                 | Program output: -76                
Correct output: -58                 | Program output: -37                
Correct output: -77                 | Program output: -21                
Correct output: 2                   | Program output: 3                  
Correct output: -94                 | Program output: 68                 
Correct output: -96                 | Program output: 14                 
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: 28                 
Correct output: -86                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_rot in4 in4 print_integer exec_rot (integer_rot integer_gte) (exec_yankdup) (boolean_invert_second_then_and integer_lt exec_if (boolean_stackdepth) ()))
Lexicase best errors: [1 1 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_rot in4 in4 print_integer exec_rot (integer_rot integer_gte) (exec_yankdup) (boolean_invert_second_then_and integer_lt exec_if (boolean_stackdepth) ()))
Zero cases best errors: [1 1 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (111 111 297 302 251 228 111 886 228 228)
Population mean number of elite cases: 2.75
Count of perfect (error zero) individuals by case: (111 111 297 302 251 228 111 886 228 228)
Population mean number of perfect (error zero) cases: 2.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 2, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 0, :instruction tag_exec_566} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 2, :instruction tagged_835} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq})
Best program: (in2 integer_gte exec_k (in4) () exec_s (in4 boolean_swap) () (print_integer integer_yankdup integer_swap exec_flush exec_shove (exec_k (boolean_dup_items boolean_shove boolean_pop integer_stackdepth boolean_xor exec_eq print_integer exec_while (integer_sub exec_dup_items)) (boolean_empty exec_y (integer_stackdepth boolean_frominteger) boolean_shove exec_k_when_autoconstructing (integer_empty boolean_dup_times exec_y_when_autoconstructing ()) (integer_mult boolean_swap integer_fromboolean boolean_not boolean_and integer_pop exec_do*while () integer_lt) tag_exec_566 (exec_dup_times (exec_dup_times (boolean_dup integer_stackdepth exec_dup (boolean_yankdup integer_dup exec_do*count (exec_dup_items tagged_835)) integer_lte exec_dup (exec_do*range (boolean_frominteger) exec_dup (exec_do*times ()) integer_inc boolean_dup_times exec_shove (integer_dup_items) integer_gt) print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (boolean_eq)))))))
Errors: [1 1 1 1 1 0 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 68
Size: 95
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 7.247
Median total errors in population: 7
Error averages by case: (0.889 0.889 0.703 0.698 0.749 0.772 0.889 0.114 0.772 0.772)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.477
Average program size in population (points): 94.877
Average percent parens in population: 0.289
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.982625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2240589
--- Timings ---
Current time: 1559314541938 milliseconds
Total Time:          15.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.0 seconds, 59.3%
Fitness Testing:      4.2 seconds, 27.7%
Report:               1.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output: 27                 
Correct output: -13                 | Program output: 70                 
Correct output: -59                 | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 98                 
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 100                
Correct output: 0                   | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 91                 
Correct output: 23                  | Program output: 58                 
Correct output: 91                  | Program output: 97                 
Correct output: 24                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 78                 
Correct output: -29                 | Program output: 73                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 1                  
Correct output: -53                 | Program output: 96                 
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -12                
Correct output: -47                 | Program output: 91                 
Correct output: -100                | Program output: -17                
Correct output: -98                 | Program output: -85                
Correct output: -78                 | Program output: -62                
Correct output: -31                 | Program output: -22                
Correct output: -61                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -36                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: 44                 
Correct output: -50                 | Program output: -34                
Correct output: -81                 | Program output: 63                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: 34                 
Correct output: -16                 | Program output: 84                 
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: 12                 
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 37                 
Correct output: -67                 | Program output: -8                 
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -5                 
Correct output: -87                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: 36                 
Correct output: -50                 | Program output: -21                
Correct output: -89                 | Program output: 32                 
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: 47                 
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -51                
Correct output: -35                 | Program output: -14                
Correct output: -86                 | Program output: 63                 
Correct output: 19                  | Program output: 80                 
Correct output: -92                 | Program output: -76                
Correct output: -58                 | Program output: -37                
Correct output: -77                 | Program output: -21                
Correct output: 2                   | Program output: 3                  
Correct output: -94                 | Program output: 68                 
Correct output: -96                 | Program output: 14                 
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: 28                 
Correct output: -86                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 2, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k})
Lexicase best program: (integer_stackdepth exec_do*while (in3) exec_s_when_autoconstructing (boolean_flush boolean_not) (exec_swap (boolean_dup_items) (integer_lt in4 exec_k (print_integer integer_swap) (integer_flush integer_inc integer_dup_items print_boolean print_exec (print_exec (exec_k () ()))))) ())
Lexicase best errors: [1 1 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.394
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 2, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k})
Zero cases best program: (integer_stackdepth exec_do*while (in3) exec_s_when_autoconstructing (boolean_flush boolean_not) (exec_swap (boolean_dup_items) (integer_lt in4 exec_k (print_integer integer_swap) (integer_flush integer_inc integer_dup_items print_boolean print_exec (print_exec (exec_k () ()))))) ())
Zero cases best errors: [1 1 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.394
--- Lexicase Population Statistics ---
Count of elite individuals by case: (294 101 189 193 309 189 309 103 309 309)
Population mean number of elite cases: 2.31
Count of perfect (error zero) individuals by case: (294 101 189 193 309 189 309 103 309 309)
Population mean number of perfect (error zero) cases: 2.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 2, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 0, :instruction tag_exec_566} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 1, :instruction tagged_835} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq})
Best program: (boolean_invert_first_then_and in2 integer_gte exec_k (in4) () exec_s (in4 boolean_swap) () (print_integer integer_yankdup integer_swap exec_flush exec_shove (exec_k (boolean_dup_items boolean_shove boolean_pop integer_stackdepth boolean_xor) (exec_y (print_integer integer_pop) integer_sub exec_dup_items)) boolean_empty exec_y (integer_stackdepth boolean_frominteger) boolean_shove exec_k_when_autoconstructing (exec_rot (boolean_dup_times exec_y_when_autoconstructing ()) (integer_mult boolean_swap integer_fromboolean boolean_not boolean_and integer_pop exec_do*while () integer_lt) (tag_exec_566 (exec_dup_times (exec_dup_times () boolean_dup integer_stackdepth exec_dup (boolean_yankdup integer_dup exec_do*count () exec_dup_items tagged_835) integer_lte exec_dup (exec_do*range (boolean_frominteger) exec_dup (exec_do*times ()) integer_inc integer_mod exec_shove (integer_dup_items) integer_gt) print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (boolean_eq)))) ()))
Errors: [1 1 1 1 0 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 69
Size: 99
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 7.695
Median total errors in population: 8
Error averages by case: (0.706 0.899 0.811 0.807 0.691 0.811 0.691 0.897 0.691 0.691)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.892
Average program size in population (points): 88.245
Average percent parens in population: 0.280
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.4938125
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2650232
--- Timings ---
Current time: 1559314544958 milliseconds
Total Time:          18.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.3 seconds, 62.2%
Fitness Testing:      4.6 seconds, 25.4%
Report:               2.1 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output: 27                 
Correct output: -13                 | Program output: 70                 
Correct output: -59                 | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 98                 
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 100                
Correct output: 0                   | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 91                 
Correct output: 23                  | Program output: 58                 
Correct output: 91                  | Program output: 97                 
Correct output: 24                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 78                 
Correct output: -29                 | Program output: 73                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 1                  
Correct output: -53                 | Program output: 96                 
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -12                
Correct output: -47                 | Program output: 91                 
Correct output: -100                | Program output: -17                
Correct output: -98                 | Program output: -85                
Correct output: -78                 | Program output: -62                
Correct output: -31                 | Program output: -22                
Correct output: -61                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -36                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: 44                 
Correct output: -50                 | Program output: -34                
Correct output: -81                 | Program output: 63                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: 34                 
Correct output: -16                 | Program output: 84                 
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: 12                 
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 37                 
Correct output: -67                 | Program output: -8                 
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -5                 
Correct output: -87                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: 36                 
Correct output: -50                 | Program output: -21                
Correct output: -89                 | Program output: 32                 
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: 47                 
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -51                
Correct output: -35                 | Program output: -14                
Correct output: -86                 | Program output: 63                 
Correct output: 19                  | Program output: 80                 
Correct output: -92                 | Program output: -76                
Correct output: -58                 | Program output: -37                
Correct output: -77                 | Program output: -21                
Correct output: 2                   | Program output: 3                  
Correct output: -94                 | Program output: 68                 
Correct output: -96                 | Program output: 14                 
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: 28                 
Correct output: -86                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 2, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_stackdepth integer_dec in3 exec_s_when_autoconstructing (boolean_flush boolean_not) (exec_swap (boolean_dup_items) (integer_lt in4 exec_k (print_integer integer_swap) (exec_do*count (integer_inc integer_dup_items print_boolean print_exec (print_exec (exec_k (integer_yank integer_stackdepth boolean_flush) ())))))) ())
Lexicase best errors: [0 0 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.361
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 2, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_stackdepth integer_dec in3 exec_s_when_autoconstructing (boolean_flush boolean_not) (exec_swap (boolean_dup_items) (integer_lt in4 exec_k (print_integer integer_swap) (exec_do*count (integer_inc integer_dup_items print_boolean print_exec (print_exec (exec_k (integer_yank integer_stackdepth boolean_flush) ())))))) ())
Zero cases best errors: [0 0 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.361
--- Lexicase Population Statistics ---
Count of elite individuals by case: (380 378 380 98 379 98 742 164 265 98)
Population mean number of elite cases: 2.98
Count of perfect (error zero) individuals by case: (380 378 380 98 379 98 742 164 265 98)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_rot in4 in4 print_integer exec_rot (integer_rot integer_gte exec_yankdup) (boolean_invert_second_then_and) (integer_lt) exec_if (boolean_stackdepth) ())
Errors: [0 0 0 1 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 12
Size: 18
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.018
Median total errors in population: 8
Error averages by case: (0.62 0.622 0.62 0.902 0.621 0.902 0.258 0.836 0.735 0.902)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.411
Average program size in population (points): 82.017
Average percent parens in population: 0.292
Minimum age in population: 6.5
Maximum age in population: 10.9375
Average age in population: 8.9620625
Median age in population: 9.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3050346
--- Timings ---
Current time: 1559314547924 milliseconds
Total Time:          21.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.6 seconds, 64.3%
Fitness Testing:      5.0 seconds, 23.8%
Report:               2.4 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -35                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: 70                 
Correct output: -59                 | Program output: 49                 
Correct output: -79                 | Program output: 54                 
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -21                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 52                 
Correct output: 5                   | Program output: 24                 
Correct output: 1                   | Program output: 66                 
Correct output: 22                  | Program output: 41                 
Correct output: 5                   | Program output: 45                 
Correct output: 5                   | Program output: 59                 
Correct output: 11                  | Program output: 35                 
Correct output: 25                  | Program output: 28                 
Correct output: 11                  | Program output: 95                 
Correct output: 2                   | Program output: 24                 
Correct output: 25                  | Program output: 68                 
Correct output: 18                  | Program output: 83                 
Correct output: 0                   | Program output: 85                 
Correct output: 5                   | Program output: 60                 
Correct output: 5                   | Program output: 57                 
Correct output: 23                  | Program output: 79                 
Correct output: 91                  | Program output: 99                 
Correct output: 24                  | Program output: 55                 
Correct output: 15                  | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: -92                 | Program output: -37                
Correct output: 23                  | Program output: 79                 
Correct output: -29                 | Program output: 66                 
Correct output: -68                 | Program output: 26                 
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: 19                 
Correct output: -99                 | Program output: -32                
Correct output: -28                 | Program output: 76                 
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -96                
Correct output: -98                 | Program output: -55                
Correct output: -78                 | Program output: -61                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: 18                 
Correct output: -96                 | Program output: -84                
Correct output: -96                 | Program output: -7                 
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: 24                 
Correct output: -81                 | Program output: -81                
Correct output: -17                 | Program output: 70                 
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: 81                 
Correct output: -74                 | Program output: -46                
Correct output: 5                   | Program output: 68                 
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -8                 
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: 0                  
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: 94                 
Correct output: -65                 | Program output: -10                
Correct output: -35                 | Program output: 9                  
Correct output: -67                 | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: 1                  
Correct output: -67                 | Program output: 85                 
Correct output: -65                 | Program output: 4                  
Correct output: -95                 | Program output: 3                  
Correct output: -72                 | Program output: -72                
Correct output: -35                 | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 19                  | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: 99                 
Correct output: -77                 | Program output: -25                
Correct output: 2                   | Program output: 69                 
Correct output: -94                 | Program output: 48                 
Correct output: -96                 | Program output: 90                 
Correct output: -92                 | Program output: -14                
Correct output: -74                 | Program output: 2                  
Correct output: -37                 | Program output: 16                 
Correct output: 0                   | Program output: 16                 
Correct output: -20                 | Program output: 34                 
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction -72} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_604} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_dup_items exec_y_when_autoconstructing (exec_eq boolean_frominteger integer_add exec_k_when_autoconstructing (integer_inc -72) (boolean_and integer_lt) integer_add boolean_invert_second_then_and) integer_max tag_integer_604 integer_lt exec_do*times (exec_noop) integer_mod in3 print_integer boolean_eq integer_fromboolean boolean_pop integer_yank integer_yank exec_noop exec_do*while (integer_swap integer_gte) boolean_stackdepth exec_noop exec_y (integer_shove boolean_dup integer_lt) exec_flush exec_do*range (integer_inc boolean_dup_items exec_do*range (boolean_yank integer_mult) boolean_or boolean_dup exec_s_when_autoconstructing (integer_add integer_dec integer_add boolean_or boolean_frominteger integer_max) (exec_yank boolean_and integer_dup_items boolean_yankdup in4 integer_stackdepth) (integer_rot exec_stackdepth exec_do*count (exec_if (integer_yank exec_k (exec_do*while (integer_empty) integer_div) (integer_lt) exec_do*while ()) ()))))
Lexicase best errors: [0 1 1 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 87
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction -72} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_604} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_dup_items exec_y_when_autoconstructing (exec_eq boolean_frominteger integer_add exec_k_when_autoconstructing (integer_inc -72) (boolean_and integer_lt) integer_add boolean_invert_second_then_and) integer_max tag_integer_604 integer_lt exec_do*times (exec_noop) integer_mod in3 print_integer boolean_eq integer_fromboolean boolean_pop integer_yank integer_yank exec_noop exec_do*while (integer_swap integer_gte) boolean_stackdepth exec_noop exec_y (integer_shove boolean_dup integer_lt) exec_flush exec_do*range (integer_inc boolean_dup_items exec_do*range (boolean_yank integer_mult) boolean_or boolean_dup exec_s_when_autoconstructing (integer_add integer_dec integer_add boolean_or boolean_frominteger integer_max) (exec_yank boolean_and integer_dup_items boolean_yankdup in4 integer_stackdepth) (integer_rot exec_stackdepth exec_do*count (exec_if (integer_yank exec_k (exec_do*while (integer_empty) integer_div) (integer_lt) exec_do*while ()) ()))))
Zero cases best errors: [0 1 1 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 87
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 88 422 285 288 88 423 94 96 899)
Population mean number of elite cases: 2.78
Count of perfect (error zero) individuals by case: (101 88 422 285 288 88 423 94 96 899)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction -72} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_604} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while})
Best program: (integer_dup_times boolean_yankdup integer_stackdepth exec_empty exec_when (integer_gte print_boolean integer_min integer_gt) integer_add exec_k_when_autoconstructing (integer_inc -72) (boolean_and integer_lt) integer_add boolean_invert_second_then_and integer_max tag_integer_604 integer_div exec_do*times (exec_noop) integer_mod in3 print_integer boolean_eq integer_fromboolean boolean_pop integer_yank integer_yank boolean_rot exec_do*while (integer_swap integer_gte) boolean_stackdepth exec_noop exec_y (integer_shove boolean_dup integer_lt exec_flush exec_do*range (integer_inc print_newline exec_do*range (boolean_yank integer_mult)) boolean_or boolean_dup exec_s_when_autoconstructing (integer_add integer_dec integer_add boolean_or boolean_frominteger integer_max) (exec_yank print_newline exec_y (boolean_yankdup in4 integer_stackdepth) integer_rot exec_stackdepth exec_do*count (exec_if (integer_yank integer_pop exec_do*while (integer_empty) integer_div) (integer_lt) exec_do*while ())) ()))
Errors: [0 1 1 1 1 1 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 73
Size: 91
Percent parens: 0.198
--- Population Statistics ---
Average total errors in population: 7.216
Median total errors in population: 7
Error averages by case: (0.899 0.912 0.578 0.715 0.712 0.912 0.577 0.906 0.904 0.101)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.717
Average program size in population (points): 76.034
Average percent parens in population: 0.286
Minimum age in population: 7.5
Maximum age in population: 12.5
Average age in population: 10.46959375
Median age in population: 10.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3406586
--- Timings ---
Current time: 1559314550792 milliseconds
Total Time:          23.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.8 seconds, 65.9%
Fitness Testing:      5.4 seconds, 22.6%
Report:               2.6 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output: 27                 
Correct output: -13                 | Program output: 70                 
Correct output: -59                 | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 98                 
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 100                
Correct output: 0                   | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 91                 
Correct output: 23                  | Program output: 58                 
Correct output: 91                  | Program output: 97                 
Correct output: 24                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 78                 
Correct output: -29                 | Program output: 73                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 1                  
Correct output: -53                 | Program output: 96                 
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -12                
Correct output: -47                 | Program output: 91                 
Correct output: -100                | Program output: -17                
Correct output: -98                 | Program output: -85                
Correct output: -78                 | Program output: -62                
Correct output: -31                 | Program output: -22                
Correct output: -61                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -36                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: 44                 
Correct output: -50                 | Program output: -34                
Correct output: -81                 | Program output: 63                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: 34                 
Correct output: -16                 | Program output: 84                 
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: 12                 
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 37                 
Correct output: -67                 | Program output: -8                 
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -5                 
Correct output: -87                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: 36                 
Correct output: -50                 | Program output: -21                
Correct output: -89                 | Program output: 32                 
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: 47                 
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -51                
Correct output: -35                 | Program output: -14                
Correct output: -86                 | Program output: 63                 
Correct output: 19                  | Program output: 80                 
Correct output: -92                 | Program output: -76                
Correct output: -58                 | Program output: -37                
Correct output: -77                 | Program output: -21                
Correct output: 2                   | Program output: 3                  
Correct output: -94                 | Program output: 68                 
Correct output: -96                 | Program output: 14                 
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: 28                 
Correct output: -86                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush})
Lexicase best program: (in3 exec_s_when_autoconstructing (boolean_rot boolean_not) (exec_swap (boolean_dup_items) (integer_lt in4 exec_k (print_integer integer_swap) (exec_do*count (integer_inc integer_dup_items print_boolean print_exec (print_exec (integer_mod integer_yank integer_stackdepth boolean_flush)))))) ())
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 32
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush})
Zero cases best program: (in3 exec_s_when_autoconstructing (boolean_rot boolean_not) (exec_swap (boolean_dup_items) (integer_lt in4 exec_k (print_integer integer_swap) (exec_do*count (integer_inc integer_dup_items print_boolean print_exec (print_exec (integer_mod integer_yank integer_stackdepth boolean_flush)))))) ())
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 32
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (199 197 909 200 900 199 909 199 199 717)
Population mean number of elite cases: 4.63
Count of perfect (error zero) individuals by case: (199 197 909 200 900 199 909 199 199 717)
Population mean number of perfect (error zero) cases: 4.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_rot in4 in4 print_integer exec_rot (integer_min integer_gte exec_yankdup) (boolean_invert_second_then_and integer_lt) (exec_if (boolean_stackdepth) ()))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 12
Size: 18
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.372
Median total errors in population: 6
Error averages by case: (0.801 0.803 0.091 0.8 0.1 0.801 0.091 0.801 0.801 0.283)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.035
Average program size in population (points): 82.698
Average percent parens in population: 0.274
Minimum age in population: 8.9375
Maximum age in population: 14.0
Average age in population: 11.986828125
Median age in population: 12.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3841877
--- Timings ---
Current time: 1559314553362 milliseconds
Total Time:          26.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.7 seconds, 66.5%
Fitness Testing:      5.8 seconds, 22.0%
Report:               3.0 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: 71                 
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: 70                 
Correct output: -59                 | Program output: 49                 
Correct output: -79                 | Program output: 54                 
Correct output: -47                 | Program output: 48                 
Correct output: -77                 | Program output: -21                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 46                 
Correct output: 5                   | Program output: 92                 
Correct output: 1                   | Program output: 99                 
Correct output: 22                  | Program output: 76                 
Correct output: 5                   | Program output: 90                 
Correct output: 5                   | Program output: 30                 
Correct output: 11                  | Program output: 88                 
Correct output: 25                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 4                  
Correct output: 25                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 60                 
Correct output: 5                   | Program output: 28                 
Correct output: 23                  | Program output: 88                 
Correct output: 91                  | Program output: 97                 
Correct output: 24                  | Program output: 31                 
Correct output: 15                  | Program output: 57                 
Correct output: 7                   | Program output: 61                 
Correct output: -92                 | Program output: 21                 
Correct output: 23                  | Program output: 100                
Correct output: -29                 | Program output: 69                 
Correct output: -68                 | Program output: 94                 
Correct output: -99                 | Program output: -50                
Correct output: -53                 | Program output: 81                 
Correct output: -99                 | Program output: -47                
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: 13                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 74                 
Correct output: -31                 | Program output: 90                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 0                  
Correct output: -90                 | Program output: -17                
Correct output: -21                 | Program output: 28                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -88                
Correct output: -100                | Program output: -39                
Correct output: -50                 | Program output: 30                 
Correct output: -81                 | Program output: -24                
Correct output: -17                 | Program output: 22                 
Correct output: -99                 | Program output: 85                 
Correct output: -16                 | Program output: 13                 
Correct output: -74                 | Program output: 2                  
Correct output: 5                   | Program output: 51                 
Correct output: -79                 | Program output: -3                 
Correct output: -42                 | Program output: 25                 
Correct output: -7                  | Program output: 38                 
Correct output: -67                 | Program output: 86                 
Correct output: -71                 | Program output: -39                
Correct output: -57                 | Program output: 94                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: 10                 
Correct output: -35                 | Program output: -23                
Correct output: -67                 | Program output: -1                 
Correct output: -65                 | Program output: 99                 
Correct output: -50                 | Program output: 73                 
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -95                 | Program output: 82                 
Correct output: -72                 | Program output: 45                 
Correct output: -35                 | Program output: -35                
Correct output: -86                 | Program output: -72                
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: 44                 
Correct output: -58                 | Program output: -58                
Correct output: -77                 | Program output: -21                
Correct output: 2                   | Program output: 2                  
Correct output: -94                 | Program output: 60                 
Correct output: -96                 | Program output: -31                
Correct output: -92                 | Program output: 86                 
Correct output: -74                 | Program output: -47                
Correct output: -37                 | Program output: 60                 
Correct output: 0                   | Program output: 32                 
Correct output: -20                 | Program output: -17                
Correct output: -83                 | Program output: 76                 
Correct output: -86                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_7} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction -86} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction 80} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup})
Lexicase best program: (in1 print_integer exec_flush integer_inc exec_empty integer_lt integer_flush boolean_dup_times integer_dup_items boolean_not boolean_dup exec_while (in3) exec_dup () exec_k_when_autoconstructing (in3 integer_gte exec_shove () boolean_invert_second_then_and) (boolean_frominteger in4 integer_pop exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_do*range () exec_yank in3 exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq) boolean_yank exec_do*times (boolean_frominteger boolean_invert_second_then_and) exec_k (tagged_7 exec_do*range (-6 exec_swap (integer_sub exec_rot (integer_gt) (exec_do*count () integer_dup boolean_dup_items boolean_shove) (exec_k (exec_if (integer_dup_times integer_lte boolean_frominteger boolean_dup) (integer_min) boolean_pop print_exec (exec_do*range (integer_sub integer_sub exec_while (exec_empty exec_swap (-86 exec_yankdup exec_pop (integer_lt exec_do*times (integer_div) integer_gte) exec_dup_items exec_s_when_autoconstructing (boolean_swap integer_pop) (integer_gte integer_pop exec_do*range (80 exec_shove (exec_if (boolean_dup_times integer_rot integer_dup integer_dup) ()))) ()) ())))) ())) ())) ())
Lexicase best errors: [0 1 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 133
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_7} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction -86} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction 80} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup})
Zero cases best program: (in1 print_integer exec_flush integer_inc exec_empty integer_lt integer_flush boolean_dup_times integer_dup_items boolean_not boolean_dup exec_while (in3) exec_dup () exec_k_when_autoconstructing (in3 integer_gte exec_shove () boolean_invert_second_then_and) (boolean_frominteger in4 integer_pop exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_do*range () exec_yank in3 exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq) boolean_yank exec_do*times (boolean_frominteger boolean_invert_second_then_and) exec_k (tagged_7 exec_do*range (-6 exec_swap (integer_sub exec_rot (integer_gt) (exec_do*count () integer_dup boolean_dup_items boolean_shove) (exec_k (exec_if (integer_dup_times integer_lte boolean_frominteger boolean_dup) (integer_min) boolean_pop print_exec (exec_do*range (integer_sub integer_sub exec_while (exec_empty exec_swap (-86 exec_yankdup exec_pop (integer_lt exec_do*times (integer_div) integer_gte) exec_dup_items exec_s_when_autoconstructing (boolean_swap integer_pop) (integer_gte integer_pop exec_do*range (80 exec_shove (exec_if (boolean_dup_times integer_rot integer_dup integer_dup) ()))) ()) ())))) ())) ())) ())
Zero cases best errors: [0 1 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 133
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (152 1000 1000 783 1 152 152 780 151 781)
Population mean number of elite cases: 4.95
Count of perfect (error zero) individuals by case: (152 0 0 783 1 152 152 780 151 781)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction -86} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction 80} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction 80} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if})
Best program: (in1 print_integer exec_s (integer_inc exec_empty integer_lt integer_flush boolean_xor exec_y (print_integer integer_pop) exec_shove () exec_while (exec_do*while (integer_fromboolean exec_y (integer_add) in2 integer_eq) boolean_not exec_eq) exec_do*range (integer_dup boolean_swap exec_yank exec_noop exec_do*while (integer_swap integer_gte) boolean_stackdepth integer_dup_items exec_y (integer_shove boolean_dup integer_lt exec_flush exec_do*while (integer_inc print_newline exec_do*range (boolean_yank boolean_dup_items)) boolean_or boolean_dup exec_s_when_autoconstructing (integer_add integer_dec integer_sub boolean_or boolean_frominteger integer_max) (exec_yank integer_sub exec_y (boolean_yankdup in4 integer_stackdepth) integer_rot exec_stackdepth exec_do*count (exec_if (integer_yank integer_pop exec_do*while (exec_if (integer_dup_times integer_lte boolean_frominteger integer_gt) (integer_min) boolean_pop print_exec (exec_do*range (integer_sub integer_sub exec_while (exec_empty exec_swap (-86 exec_yankdup exec_pop (integer_lt exec_do*times (integer_div) integer_gte) exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_swap integer_pop) (exec_dup_items integer_pop exec_do*range (80 exec_shove (exec_if (80 exec_shove (exec_if () ())) ()))) ()) () ()) ()))))) ())) ()))) () ())
Errors: [0 1 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 98
Size: 142
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.048
Median total errors in population: 7
Error averages by case: (0.848 1.0 1.0 0.217 0.999 0.848 0.848 0.22 0.849 0.219)
Error minima by case: (0 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 38.813
Average program size in population (points): 57.067
Average percent parens in population: 0.325
Minimum age in population: 10.1875
Maximum age in population: 15.26171875
Average age in population: 13.448328125
Median age in population: 13.525390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4092669
--- Timings ---
Current time: 1559314556304 milliseconds
Total Time:          29.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.7 seconds, 67.6%
Fitness Testing:      6.1 seconds, 21.1%
Report:               3.2 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 489
Test mean error for best: 0.48900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -35                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: -13                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -21                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output:                    
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 50                 
Correct output: 0                   | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 91                  | Program output: 91                 
Correct output: 24                  | Program output: 24                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 1                  
Correct output: -53                 | Program output: -53                
Correct output: -99                 | Program output: -57                
Correct output: -28                 | Program output: -14                
Correct output: -47                 | Program output: -5                 
Correct output: -100                | Program output: -17                
Correct output: -98                 | Program output: -40                
Correct output: -78                 | Program output: -78                
Correct output: -31                 | Program output: -22                
Correct output: -61                 | Program output: -33                
Correct output: -99                 | Program output: -6                 
Correct output: -90                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -90                
Correct output: -96                 | Program output: -23                
Correct output: -100                | Program output: -29                
Correct output: -50                 | Program output: -50                
Correct output: -81                 | Program output: -5                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -53                
Correct output: -16                 | Program output: -16                
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 37                 
Correct output: -67                 | Program output: -8                 
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -5                 
Correct output: -87                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: 36                 
Correct output: -50                 | Program output: -21                
Correct output: -89                 | Program output: -74                
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: 34                 
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -68                
Correct output: -35                 | Program output: -14                
Correct output: -86                 | Program output: 6                  
Correct output: 19                  | Program output: 80                 
Correct output: -92                 | Program output: -54                
Correct output: -58                 | Program output: -49                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 3                  
Correct output: -94                 | Program output: -94                
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -75                
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output: -16                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: -15                
Correct output: -86                 | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq})
Lexicase best program: (in2 integer_gte exec_k (in4) () exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () in4 boolean_dup_items boolean_shove) (exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (boolean_eq)) () ())) ())
Lexicase best errors: [1 0 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 110
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq})
Zero cases best program: (in2 integer_gte exec_k (in4) () exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () in4 boolean_dup_items boolean_shove) (exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (boolean_eq)) () ())) ())
Zero cases best errors: [1 0 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 110
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (353 218 538 352 352 328 327 1 537 327)
Population mean number of elite cases: 3.33
Count of perfect (error zero) individuals by case: (353 218 538 352 352 328 327 1 537 327)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq})
Best program: (in2 integer_gte exec_k (in4) () exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () in4 boolean_dup_items boolean_shove) (exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (boolean_eq)) () ())) ())
Errors: [1 0 0 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 75
Size: 110
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 6.667
Median total errors in population: 7
Error averages by case: (0.647 0.782 0.462 0.648 0.648 0.672 0.673 0.999 0.463 0.673)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.322
Average program size in population (points): 76.708
Average percent parens in population: 0.319
Minimum age in population: 12.25
Maximum age in population: 16.748046875
Average age in population: 14.58961328125
Median age in population: 14.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.709
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4474411
--- Timings ---
Current time: 1559314558613 milliseconds
Total Time:          31.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.3 seconds, 67.1%
Fitness Testing:      6.5 seconds, 20.6%
Report:               3.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 386
Test mean error for best: 0.38600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -35                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: -13                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -21                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 41                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 83                 
Correct output: 0                   | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 57                 
Correct output: 23                  | Program output: 58                 
Correct output: 91                  | Program output: 97                 
Correct output: 24                  | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 78                 
Correct output: -29                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: -53                
Correct output: -99                 | Program output: -32                
Correct output: -28                 | Program output:                    
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -96                
Correct output: -98                 | Program output: -55                
Correct output: -78                 | Program output: -61                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output:                    
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -90                
Correct output: -96                 | Program output: -7                 
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output:                    
Correct output: -81                 | Program output: -81                
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -74                
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -72                
Correct output: -35                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: 19                  | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output:                    
Correct output: -77                 | Program output: -25                
Correct output: 2                   | Program output: 3                  
Correct output: -94                 | Program output: -94                
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -14                
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output: -16                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq})
Lexicase best program: (in2 integer_gte exec_k (in4) () exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_min exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () in4 boolean_dup_items boolean_shove) (exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (boolean_eq)) () ())) ())
Lexicase best errors: [0 0 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 110
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq})
Zero cases best program: (in2 integer_gte exec_k (in4) () exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_min exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () in4 boolean_dup_items boolean_shove) (exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (boolean_eq)) () ())) ())
Zero cases best errors: [0 0 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 110
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (409 412 446 93 293 411 414 93 454 29)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (409 412 446 93 293 411 414 93 454 29)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank})
Best program: (in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () in4 boolean_dup_items boolean_shove) (exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (exec_yank)) () ())) ())
Errors: [0 0 1 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 75
Size: 108
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.946
Median total errors in population: 8
Error averages by case: (0.591 0.588 0.554 0.907 0.707 0.589 0.586 0.907 0.546 0.971)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.149
Average program size in population (points): 98.216
Average percent parens in population: 0.316
Minimum age in population: 14.064453125
Maximum age in population: 17.69921875
Average age in population: 15.3286708984375
Median age in population: 15.41015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4781333
--- Timings ---
Current time: 1559314561484 milliseconds
Total Time:          34.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.5 seconds, 67.9%
Fitness Testing:      6.9 seconds, 20.0%
Report:               4.1 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 386
Test mean error for best: 0.38600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -35                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: -13                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -21                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 41                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 83                 
Correct output: 0                   | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 57                 
Correct output: 23                  | Program output: 58                 
Correct output: 91                  | Program output: 97                 
Correct output: 24                  | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 78                 
Correct output: -29                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: -53                
Correct output: -99                 | Program output: -32                
Correct output: -28                 | Program output:                    
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -96                
Correct output: -98                 | Program output: -55                
Correct output: -78                 | Program output: -61                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output:                    
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -90                
Correct output: -96                 | Program output: -7                 
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output:                    
Correct output: -81                 | Program output: -81                
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -74                
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -72                
Correct output: -35                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: 19                  | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output:                    
Correct output: -77                 | Program output: -25                
Correct output: 2                   | Program output: 3                  
Correct output: -94                 | Program output: -94                
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -14                
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output: -16                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq})
Lexicase best program: (in2 in1 exec_k (in4) () exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () in4 boolean_dup_items boolean_shove) (exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (boolean_eq)) () ())) ())
Lexicase best errors: [1 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 110
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq})
Zero cases best program: (in2 in1 exec_k (in4) () exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () in4 boolean_dup_items boolean_shove) (exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (boolean_eq)) () ())) ())
Zero cases best errors: [1 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 110
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (275 118 277 120 645 276 716 121 718 720)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (275 118 277 120 645 276 716 121 718 720)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank})
Best program: (in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () in4 boolean_dup_items boolean_shove) (exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (exec_yank)) () ())) ())
Errors: [0 1 0 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 75
Size: 108
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.014
Median total errors in population: 6
Error averages by case: (0.725 0.882 0.723 0.88 0.355 0.724 0.284 0.879 0.282 0.28)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 75.646
Average program size in population (points): 110.393
Average percent parens in population: 0.314
Minimum age in population: 15.41015625
Maximum age in population: 18.8388671875
Average age in population: 17.49320556640625
Median age in population: 17.62451171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5079456
--- Timings ---
Current time: 1559314564058 milliseconds
Total Time:          37.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.3 seconds, 68.2%
Fitness Testing:      7.2 seconds, 19.5%
Report:               4.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 409
Test mean error for best: 0.40900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output:                    
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: -13                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output:                    
Correct output: -77                 | Program output: -21                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 28                 
Correct output: 23                  | Program output: 58                 
Correct output: 91                  | Program output: 97                 
Correct output: 24                  | Program output: 31                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 78                 
Correct output: -29                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -99                 | Program output: -47                
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: -5                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output:                    
Correct output: -31                 | Program output: -22                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 0                  
Correct output: -90                 | Program output: -17                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -88                
Correct output: -100                | Program output: -39                
Correct output: -50                 | Program output:                    
Correct output: -81                 | Program output: -24                
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -53                
Correct output: -16                 | Program output: -16                
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 37                 
Correct output: -67                 | Program output: -8                 
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -5                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: 36                 
Correct output: -50                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output:                    
Correct output: -35                 | Program output: -35                
Correct output: -86                 | Program output: -72                
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output:                    
Correct output: -58                 | Program output: -58                
Correct output: -77                 | Program output: -21                
Correct output: 2                   | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output:                    
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output:                    
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: -15                
Correct output: -86                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq})
Lexicase best program: (in2 in1 exec_k (in4) () exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () in4 boolean_dup_items boolean_shove) (exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (boolean_eq)) () ())) ())
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 110
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq})
Zero cases best program: (in2 in1 exec_k (in4) () exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () in4 boolean_dup_items boolean_shove) (exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (boolean_eq)) () ())) ())
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 110
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (120 736 345 780 708 732 735 337 739 739)
Population mean number of elite cases: 5.97
Count of perfect (error zero) individuals by case: (120 736 345 780 708 732 735 337 739 739)
Population mean number of perfect (error zero) cases: 5.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank})
Best program: (in2 in1 exec_k (in4) () exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () boolean_shove) (exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) integer_shove) (print_boolean) (exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (exec_yank)))) ())
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 73
Size: 106
Percent parens: 0.311
--- Population Statistics ---
Average total errors in population: 4.029
Median total errors in population: 3
Error averages by case: (0.88 0.264 0.655 0.22 0.292 0.268 0.265 0.663 0.261 0.261)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 75.387
Average program size in population (points): 109.493
Average percent parens in population: 0.311
Minimum age in population: 17.41015625
Maximum age in population: 20.8388671875
Average age in population: 19.06255029296875
Median age in population: 19.12451171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.01
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5340047
--- Timings ---
Current time: 1559314566756 milliseconds
Total Time:          39.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.3 seconds, 68.6%
Fitness Testing:      7.5 seconds, 18.9%
Report:               4.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 357
Test mean error for best: 0.35700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output:                    
Correct output: -13                 | Program output: 70                 
Correct output: -59                 | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 28                 
Correct output: 23                  | Program output: 58                 
Correct output: 91                  | Program output: 97                 
Correct output: 24                  | Program output: 31                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 78                 
Correct output: -29                 | Program output: 69                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output:                    
Correct output: -53                 | Program output: 81                 
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -96                
Correct output: -98                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: 13                 
Correct output: -74                 | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: 0                  
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 9                  
Correct output: -67                 | Program output:                    
Correct output: -65                 | Program output: -65                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output:                    
Correct output: -67                 | Program output:                    
Correct output: -65                 | Program output:                    
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -72                
Correct output: -35                 | Program output: -35                
Correct output: -86                 | Program output: -86                
Correct output: 19                  | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -77                 | Program output: -21                
Correct output: 2                   | Program output: 2                  
Correct output: -94                 | Program output: 60                 
Correct output: -96                 | Program output: -31                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: 2                  
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output:                    
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank})
Lexicase best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in1 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) boolean_invert_second_then_and exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (exec_yank)) () ()) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 100
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank})
Zero cases best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in1 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) boolean_invert_second_then_and exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (exec_yank)) () ()) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 100
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 814 702 609 210 841 132 491 475 666)
Population mean number of elite cases: 5.15
Count of perfect (error zero) individuals by case: (210 814 702 609 210 841 132 491 475 666)
Population mean number of perfect (error zero) cases: 5.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank})
Best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in1 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) boolean_invert_second_then_and exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (exec_yank)) () ()) ())
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 71
Size: 100
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 4.85
Median total errors in population: 4
Error averages by case: (0.79 0.186 0.298 0.391 0.79 0.159 0.868 0.509 0.525 0.334)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.82
Average program size in population (points): 106.917
Average percent parens in population: 0.309
Minimum age in population: 18.41015625
Maximum age in population: 22.12451171875
Average age in population: 20.20602453613281
Median age in population: 20.267333984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.01
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5693618
--- Timings ---
Current time: 1559314569315 milliseconds
Total Time:          42.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.1 seconds, 68.7%
Fitness Testing:      7.9 seconds, 18.7%
Report:               5.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 385
Test mean error for best: 0.38500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output:                    
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -35                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: -13                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output:                    
Correct output: -77                 | Program output: -21                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 41                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 83                 
Correct output: 0                   | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 57                 
Correct output: 23                  | Program output: 58                 
Correct output: 91                  | Program output: 97                 
Correct output: 24                  | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 78                 
Correct output: -29                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: -53                
Correct output: -99                 | Program output: -47                
Correct output: -28                 | Program output: -28                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output:                    
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: 0                  
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -90                
Correct output: -96                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output:                    
Correct output: -81                 | Program output: -81                
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -74                
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output:                    
Correct output: -35                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: 19                  | Program output: 41                 
Correct output: -92                 | Program output:                    
Correct output: -58                 | Program output: -58                
Correct output: -77                 | Program output: -25                
Correct output: 2                   | Program output: 3                  
Correct output: -94                 | Program output: -94                
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output:                    
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output:                    
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank})
Lexicase best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in1 boolean_swap) (in4) () exec_s (in1 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) boolean_invert_second_then_and exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_lte boolean_dup_times) () integer_min exec_flush integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (exec_yank)) () ())
Lexicase best errors: [0 0 0 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 112
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank})
Zero cases best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in1 boolean_swap) (in4) () exec_s (in1 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) boolean_invert_second_then_and exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_lte boolean_dup_times) () integer_min exec_flush integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (exec_yank)) () ())
Zero cases best errors: [0 0 0 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 112
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (117 589 256 158 311 387 573 158 590 517)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (117 589 256 158 311 387 573 158 590 517)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank})
Best program: (in2 in1 exec_k (in4) () exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_eq exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) in3 integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () in4 boolean_dup_items boolean_shove) (exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth exec_k (exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (exec_yank)) ()) () ())) ())
Errors: [1 0 0 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 75
Size: 112
Percent parens: 0.330
--- Population Statistics ---
Average total errors in population: 6.344
Median total errors in population: 5
Error averages by case: (0.883 0.411 0.744 0.842 0.689 0.613 0.427 0.842 0.41 0.483)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.761
Average program size in population (points): 102.876
Average percent parens in population: 0.302
Minimum age in population: 20.12451171875
Maximum age in population: 23.47467041015625
Average age in population: 21.8612763671875
Median age in population: 21.93701171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 173
Genome diversity (% unique genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 175
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.007
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.157
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6036818
--- Timings ---
Current time: 1559314571909 milliseconds
Total Time:          45.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.0 seconds, 68.8%
Fitness Testing:      8.3 seconds, 18.4%
Report:               5.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 330
Test mean error for best: 0.33000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -35                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: -13                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output:                    
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -21                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 35                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 23                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 45                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 50                 
Correct output: 0                   | Program output: 72                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 91                  | Program output: 91                 
Correct output: 24                  | Program output: 24                 
Correct output: 15                  | Program output: 17                 
Correct output: 7                   | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -68                 | Program output:                    
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: -53                
Correct output: -99                 | Program output: -57                
Correct output: -28                 | Program output: -14                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -96                
Correct output: -98                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: -6                 
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -90                
Correct output: -96                 | Program output: -23                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -81                 | Program output: -81                
Correct output: -17                 | Program output: 30                 
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output:                    
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -74                
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -72                
Correct output: -35                 | Program output: 4                  
Correct output: -86                 | Program output: -86                
Correct output: 19                  | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -49                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 58                 
Correct output: -94                 | Program output: -94                
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -75                
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output: -16                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove})
Lexicase best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (integer_add) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) boolean_invert_second_then_and exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (integer_shove)))) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 84
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove})
Zero cases best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (integer_add) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) boolean_invert_second_then_and exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (integer_shove)))) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 84
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (394 255 395 815 405 255 529 421 386 387)
Population mean number of elite cases: 4.24
Count of perfect (error zero) individuals by case: (394 255 395 815 405 255 529 421 386 387)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank})
Best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (integer_add) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) boolean_invert_second_then_and exec_k (integer_flush exec_do*range (boolean_dup_times)) (integer_min exec_flush) integer_swap integer_sub exec_rot (boolean_stackdepth exec_k (exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (exec_yank)) ()) () ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 64
Size: 91
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 5.758
Median total errors in population: 5
Error averages by case: (0.606 0.745 0.605 0.185 0.595 0.745 0.471 0.579 0.614 0.613)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.809
Average program size in population (points): 103.878
Average percent parens in population: 0.308
Minimum age in population: 21.481689453125
Maximum age in population: 24.69595336914062
Average age in population: 23.53303131103516
Median age in population: 23.481689453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.732
Total error diversity:				 0.009
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6379475
--- Timings ---
Current time: 1559314574520 milliseconds
Total Time:          47.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.8 seconds, 68.9%
Fitness Testing:      8.7 seconds, 18.2%
Report:               6.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 330
Test mean error for best: 0.33000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -35                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: -13                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output:                    
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -21                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 35                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 23                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 45                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 50                 
Correct output: 0                   | Program output: 72                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 91                  | Program output: 91                 
Correct output: 24                  | Program output: 24                 
Correct output: 15                  | Program output: 17                 
Correct output: 7                   | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -68                 | Program output:                    
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: -53                
Correct output: -99                 | Program output: -57                
Correct output: -28                 | Program output: -14                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -96                
Correct output: -98                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: -6                 
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -90                
Correct output: -96                 | Program output: -23                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -81                 | Program output: -81                
Correct output: -17                 | Program output: 30                 
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output:                    
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -74                
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -72                
Correct output: -35                 | Program output: 4                  
Correct output: -86                 | Program output: -86                
Correct output: 19                  | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -49                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 58                 
Correct output: -94                 | Program output: -94                
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -75                
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output: -16                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank})
Lexicase best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (integer_add) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () in4 boolean_dup_items boolean_shove) (exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth exec_k (exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (exec_yank)) ()) () ())) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 111
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank})
Zero cases best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (integer_add) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () in4 boolean_dup_items boolean_shove) (exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth exec_k (exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (exec_yank)) ()) () ())) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 111
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (550 580 791 42 751 553 580 747 677 579)
Population mean number of elite cases: 5.85
Count of perfect (error zero) individuals by case: (550 580 791 42 751 553 580 747 677 579)
Population mean number of perfect (error zero) cases: 5.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank})
Best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (integer_add) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) boolean_invert_second_then_and exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (exec_yank)) () ()) ())
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 71
Size: 100
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 4.15
Median total errors in population: 3
Error averages by case: (0.45 0.42 0.209 0.958 0.249 0.447 0.42 0.253 0.323 0.421)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.45
Average program size in population (points): 100.517
Average percent parens in population: 0.289
Minimum age in population: 22.481689453125
Maximum age in population: 26.51516723632812
Average age in population: 24.54924156188965
Median age in population: 24.58657836914062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.01
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6692564
--- Timings ---
Current time: 1559314577014 milliseconds
Total Time:          50.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.6 seconds, 69.0%
Fitness Testing:      9.0 seconds, 18.0%
Report:               6.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 288
Test mean error for best: 0.28800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output:                    
Correct output: -13                 | Program output: -13                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 50                 
Correct output: 0                   | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 91                  | Program output: 91                 
Correct output: 24                  | Program output: 24                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: -53                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -14                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -96                
Correct output: -98                 | Program output: -55                
Correct output: -78                 | Program output: -62                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -81                 | Program output: -81                
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output:                    
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -72                
Correct output: -35                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: 19                  | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -49                
Correct output: -77                 | Program output: -21                
Correct output: 2                   | Program output: 3                  
Correct output: -94                 | Program output: -94                
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove})
Lexicase best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_dup_times exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (in3 boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (in3) (integer_sub exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) integer_min exec_flush) integer_swap) (integer_sub boolean_dup_times) integer_min exec_flush integer_swap integer_sub exec_rot (boolean_stackdepth exec_k (exec_shove ()) ()) () ())
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 91
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove})
Zero cases best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_dup_times exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (in3 boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (in3) (integer_sub exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) integer_min exec_flush) integer_swap) (integer_sub boolean_dup_times) integer_min exec_flush integer_swap integer_sub exec_rot (boolean_stackdepth exec_k (exec_shove ()) ()) () ())
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 91
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (74 681 684 156 158 560 183 527 525 673)
Population mean number of elite cases: 4.22
Count of perfect (error zero) individuals by case: (74 681 684 156 158 560 183 527 525 673)
Population mean number of perfect (error zero) cases: 4.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k})
Best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_dup_times exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (in3 boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_flush exec_do*range (-6 exec_swap (integer_sub exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap) integer_sub boolean_dup_times) () integer_min exec_flush) integer_swap) (integer_sub exec_rot (boolean_stackdepth exec_k () ()) () ()))
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 71
Size: 100
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 5.779
Median total errors in population: 4
Error averages by case: (0.926 0.319 0.316 0.844 0.842 0.44 0.817 0.473 0.475 0.327)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.39
Average program size in population (points): 99.394
Average percent parens in population: 0.292
Minimum age in population: 23.481689453125
Maximum age in population: 27.71381378173828
Average age in population: 25.83279058074951
Median age in population: 25.92698669433594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.009
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7004844
--- Timings ---
Current time: 1559314579575 milliseconds
Total Time:          52.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.4 seconds, 69.2%
Fitness Testing:      9.4 seconds, 17.8%
Report:               6.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 288
Test mean error for best: 0.28800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output:                    
Correct output: -13                 | Program output: -13                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 50                 
Correct output: 0                   | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 91                  | Program output: 91                 
Correct output: 24                  | Program output: 24                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: -53                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -14                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -96                
Correct output: -98                 | Program output: -55                
Correct output: -78                 | Program output: -62                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -81                 | Program output: -81                
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output:                    
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -72                
Correct output: -35                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: 19                  | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -49                
Correct output: -77                 | Program output: -21                
Correct output: 2                   | Program output: 3                  
Correct output: -94                 | Program output: -94                
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq})
Lexicase best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times print_integer integer_yankdup integer_eq exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () print_newline exec_dup (in3) exec_do*range (integer_lte exec_eq boolean_shove) exec_k (integer_lte exec_dup (in3) in4 integer_lte boolean_dup_times) () integer_min exec_flush) (integer_min) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (boolean_eq)) () ())) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 121
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq})
Zero cases best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times print_integer integer_yankdup integer_eq exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (integer_gte boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (integer_sub print_exec (integer_gt) exec_do*count () print_newline exec_dup (in3) exec_do*range (integer_lte exec_eq boolean_shove) exec_k (integer_lte exec_dup (in3) in4 integer_lte boolean_dup_times) () integer_min exec_flush) (integer_min) integer_sub exec_rot (boolean_stackdepth integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing () (print_boolean) exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (boolean_eq)) () ())) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 121
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (547 644 560 232 810 559 381 392 542 314)
Population mean number of elite cases: 4.98
Count of perfect (error zero) individuals by case: (547 644 560 232 810 559 381 392 542 314)
Population mean number of perfect (error zero) cases: 4.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove})
Best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_dup_times exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (in3 boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (in3) (integer_sub exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) integer_min exec_flush) integer_swap) (integer_sub boolean_dup_times) integer_min exec_flush integer_swap integer_sub exec_rot (boolean_stackdepth exec_k (exec_shove ()) ()) () ())
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 65
Size: 91
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 5.019
Median total errors in population: 5
Error averages by case: (0.453 0.356 0.44 0.768 0.19 0.441 0.619 0.608 0.458 0.686)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.971
Average program size in population (points): 100.918
Average percent parens in population: 0.286
Minimum age in population: 25.481689453125
Maximum age in population: 29.29130554199219
Average age in population: 27.58212196731567
Median age in population: 27.70153427124023
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.715
Total error diversity:				 0.009
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7296405
--- Timings ---
Current time: 1559314582139 milliseconds
Total Time:          55.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.3 seconds, 69.3%
Fitness Testing:      9.7 seconds, 17.6%
Report:               7.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 369
Test mean error for best: 0.36900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: -13                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output:                    
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -21                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 35                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output:                    
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 23                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 91                  | Program output: 91                 
Correct output: 24                  | Program output: 24                 
Correct output: 15                  | Program output: 17                 
Correct output: 7                   | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -68                 | Program output:                    
Correct output: -99                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -99                 | Program output: -57                
Correct output: -28                 | Program output: -14                
Correct output: -47                 | Program output: -5                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -78                
Correct output: -31                 | Program output: -22                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -6                 
Correct output: -90                 | Program output: -17                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -23                
Correct output: -100                | Program output: -39                
Correct output: -50                 | Program output: -50                
Correct output: -81                 | Program output: -24                
Correct output: -17                 | Program output:                    
Correct output: -99                 | Program output: -53                
Correct output: -16                 | Program output: -16                
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 37                 
Correct output: -67                 | Program output: -8                 
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -5                 
Correct output: -87                 | Program output:                    
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: 36                 
Correct output: -50                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output:                    
Correct output: -35                 | Program output: -35                
Correct output: -86                 | Program output: -72                
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output:                    
Correct output: -58                 | Program output: -49                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 2                  
Correct output: -94                 | Program output: -94                
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -75                
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output: -16                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: -15                
Correct output: -86                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank})
Lexicase best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 in1 exec_k (in4) () exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (exec_shove (boolean_not) boolean_dup) exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) integer_empty integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq) (boolean_yank in3) (exec_do*range (integer_lte boolean_dup_times)) integer_min exec_flush integer_swap integer_sub exec_rot (integer_swap) (integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing (print_boolean) (exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (exec_yank)))) ()) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 115
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank})
Zero cases best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 in1 exec_k (in4) () exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (exec_shove (boolean_not) boolean_dup) exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) integer_empty integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq) (boolean_yank in3) (exec_do*range (integer_lte boolean_dup_times)) integer_min exec_flush integer_swap integer_sub exec_rot (integer_swap) (integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing (print_boolean) (exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (exec_yank)))) ()) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 115
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (482 565 376 517 526 233 288 313 280 525)
Population mean number of elite cases: 4.11
Count of perfect (error zero) individuals by case: (482 565 376 517 526 233 288 313 280 525)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank})
Best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 in1 exec_k (in4) () exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup_times exec_shove (boolean_not) boolean_dup) (exec_while (exec_shove (boolean_not) boolean_dup) exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) integer_empty integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq) (boolean_yank in3) (exec_do*range (integer_lte boolean_dup_times)) integer_min exec_flush integer_swap integer_sub exec_rot (integer_swap) (integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items) exec_k_when_autoconstructing (print_boolean) (exec_do*count (boolean_shove boolean_yank) exec_y_when_autoconstructing (exec_yank)))) ()) ())
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 80
Size: 115
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 5.895
Median total errors in population: 5
Error averages by case: (0.518 0.435 0.624 0.483 0.474 0.767 0.712 0.687 0.72 0.475)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.254
Average program size in population (points): 104.646
Average percent parens in population: 0.289
Minimum age in population: 27.23614501953125
Maximum age in population: 31.06645393371582
Average age in population: 29.22177984046936
Median age in population: 29.24952697753906
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.78
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.01
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7640411
--- Timings ---
Current time: 1559314584748 milliseconds
Total Time:          57.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.0 seconds, 69.3%
Fitness Testing:     10.1 seconds, 17.5%
Report:               7.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 281
Test mean error for best: 0.28100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output:                    
Correct output: -13                 | Program output: -13                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 50                 
Correct output: 0                   | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 91                  | Program output: 91                 
Correct output: 24                  | Program output: 24                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: -53                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -14                
Correct output: -47                 | Program output:                    
Correct output: -100                | Program output: -96                
Correct output: -98                 | Program output: -85                
Correct output: -78                 | Program output: -78                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output:                    
Correct output: -50                 | Program output: -50                
Correct output: -81                 | Program output:                    
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output:                    
Correct output: -16                 | Program output: -16                
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output:                    
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output:                    
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -72                
Correct output: -35                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: 19                  | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -49                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 3                  
Correct output: -94                 | Program output: -94                
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output:                    
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove})
Lexicase best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (in4 exec_do*times (boolean_yankdup)) boolean_or integer_min) boolean_dup_times exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (in3 boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (in3) (boolean_invert_first_then_and exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) integer_min exec_flush) integer_swap) (integer_sub boolean_dup_times) integer_min exec_flush integer_swap integer_sub exec_rot (boolean_stackdepth exec_k (exec_shove ()) ()) () ())
Lexicase best errors: [0 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 91
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove})
Zero cases best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (in4 exec_do*times (boolean_yankdup)) boolean_or integer_min) boolean_dup_times exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (in3 boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (in3) (boolean_invert_first_then_and exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) integer_min exec_flush) integer_swap) (integer_sub boolean_dup_times) integer_min exec_flush integer_swap integer_sub exec_rot (boolean_stackdepth exec_k (exec_shove ()) ()) () ())
Zero cases best errors: [0 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 91
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (142 248 622 622 590 526 630 590 517 252)
Population mean number of elite cases: 4.74
Count of perfect (error zero) individuals by case: (142 248 622 622 590 526 630 590 517 252)
Population mean number of perfect (error zero) cases: 4.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction -6} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove})
Best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_yankdup integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and exec_y_when_autoconstructing () exec_shove (in4 exec_do*times (boolean_yankdup)) boolean_or integer_min) boolean_dup_times exec_flush boolean_invert_second_then_and boolean_eq boolean_yank exec_do*times (in3 boolean_invert_second_then_and) exec_k (integer_flush exec_do*range (-6 exec_swap (in3) (boolean_invert_first_then_and exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) integer_min exec_flush) integer_swap) (integer_sub boolean_dup_times) integer_min exec_flush integer_swap integer_sub exec_rot (boolean_stackdepth exec_k (exec_shove ()) ()) () ())
Errors: [0 0 0 0 0 1 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 65
Size: 91
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 5.261
Median total errors in population: 3
Error averages by case: (0.858 0.752 0.378 0.378 0.41 0.474 0.37 0.41 0.483 0.748)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 75.445
Average program size in population (points): 107.322
Average percent parens in population: 0.296
Minimum age in population: 28.23614501953125
Maximum age in population: 32.15243911743164
Average age in population: 31.0389612493515
Median age in population: 30.99674606323242
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 184
Genome diversity (% unique genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 184
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.009
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8030909
--- Timings ---
Current time: 1559314587457 milliseconds
Total Time:          60.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.9 seconds, 69.2%
Fitness Testing:     10.6 seconds, 17.5%
Report:               7.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 288
Test mean error for best: 0.28800
Test Case    0 | Error: 1
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output:                    
Correct output: -13                 | Program output: -13                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 50                 
Correct output: 0                   | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 91                  | Program output: 91                 
Correct output: 24                  | Program output: 24                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: -53                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -14                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -96                
Correct output: -98                 | Program output: -55                
Correct output: -78                 | Program output: -62                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -81                 | Program output: -81                
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output:                    
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -72                
Correct output: -35                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: 19                  | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -49                
Correct output: -77                 | Program output: -21                
Correct output: 2                   | Program output: 3                  
Correct output: -94                 | Program output: -94                
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_lte integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and) exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq print_integer exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 91
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_lte integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and) exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq print_integer exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 91
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (348 445 634 536 552 496 446 796 305 128)
Population mean number of elite cases: 4.69
Count of perfect (error zero) individuals by case: (348 445 634 536 552 496 446 796 305 128)
Population mean number of perfect (error zero) cases: 4.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items})
Best program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_lte integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and) exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq print_integer exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 65
Size: 91
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 5.314
Median total errors in population: 4
Error averages by case: (0.652 0.555 0.366 0.464 0.448 0.504 0.554 0.204 0.695 0.872)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.959
Average program size in population (points): 103.74
Average percent parens in population: 0.296
Minimum age in population: 29.94483947753906
Maximum age in population: 33.99674606323242
Average age in population: 32.85169407081604
Median age in population: 32.99674606323242
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.011
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 8485610
--- Timings ---
Current time: 1559314590210 milliseconds
Total Time:          63.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.7 seconds, 69.2%
Fitness Testing:     11.1 seconds, 17.5%
Report:               8.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 22
Successful program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_lte integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and) exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq print_integer exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 91


Auto-simplifying with starting size: 91
step: 0
program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_lte integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and) exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq print_integer exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 91

step: 500
program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_lte integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and) exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq print_integer exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 91

step: 1000
program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_lte integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and) exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq print_integer exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 91

step: 1500
program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_lte integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and) exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq print_integer exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 91

step: 2000
program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_lte integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and) exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq print_integer exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 91

step: 2500
program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_lte integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and) exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq print_integer exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 91

step: 3000
program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_lte integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and) exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq print_integer exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 91

step: 3500
program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_lte integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and) exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq print_integer exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 91

step: 4000
program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_lte integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and) exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq print_integer exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 91

step: 4500
program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_lte integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and) exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq print_integer exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 91

step: 5000
program: (in2 integer_gte in3 in2 integer_gte in3 in4 exec_s (in2 boolean_swap) (print_integer integer_lte integer_swap exec_flush boolean_dup) (exec_while (in3) exec_dup () exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_y_when_autoconstructing (exec_swap () (boolean_yankdup boolean_dup_times) exec_eq) exec_yank boolean_invert_first_then_and) exec_y_when_autoconstructing () exec_shove (integer_yankdup exec_do*times (boolean_and)) boolean_or integer_min) boolean_yank exec_flush boolean_invert_second_then_and boolean_eq print_integer exec_k (integer_lte exec_dup (in3) exec_do*range (integer_lte boolean_dup_times)) (integer_min exec_flush) integer_swap integer_sub exec_rot (boolean_stackdepth integer_mod integer_swap integer_dup_items) (exec_k_when_autoconstructing () (boolean_eq) exec_do*count (boolean_shove boolean_yank integer_mod exec_shove (integer_dup_items))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 91

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 288
Test mean error for best: 0.28800
Test Case    0 | Error: 1
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 31                 
Correct output: -83                 | Program output:                    
Correct output: -13                 | Program output: -13                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: 20                  | Program output: 20                 
Correct output: -11                 | Program output: -11                
Correct output: 49                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: -25                 | Program output: -25                
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 11                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 18                  | Program output: 50                 
Correct output: 0                   | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 23                  | Program output: 23                 
Correct output: 91                  | Program output: 91                 
Correct output: 24                  | Program output: 24                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -53                 | Program output: -53                
Correct output: -99                 | Program output: -99                
Correct output: -28                 | Program output: -14                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -96                
Correct output: -98                 | Program output: -55                
Correct output: -78                 | Program output: -62                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -81                 | Program output: -81                
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -99                
Correct output: -16                 | Program output: -16                
Correct output: -74                 | Program output: -74                
Correct output: 5                   | Program output: 5                  
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -83                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output:                    
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -72                
Correct output: -35                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: 19                  | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -49                
Correct output: -77                 | Program output: -21                
Correct output: 2                   | Program output: 3                  
Correct output: -94                 | Program output: -94                
Correct output: -96                 | Program output: -96                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
;;******************************
