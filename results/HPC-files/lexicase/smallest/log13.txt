Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-54 -54 -54 -20] -54] [[17 -35 17 17] -35] [[79 79 79 -39] -39] [[84 -97 -97 -97] -97] [[-85 -29 -85 -85] -85] [[-83 -58 -83 -83] -83] [[47 -6 -6 -6] -6] [[-20 54 54 54] -20] [[-39 -39 -39 38] -39] [[-64 -64 -64 36] -64] [(-73 -73 -73 -73) -73] [(-64 -64 -64 -64) -64] [(74 74 74 74) 74] [(-30 -30 -30 -30) -30] [(-99 -99 -99 -99) -99] [(21 82 90 51) 21] [(27 20 14 29) 14] [(38 89 63 89) 38] [(65 4 86 47) 4] [(88 95 97 54) 54] [(51 35 20 93) 20] [(31 8 28 94) 8] [(52 13 4 74) 4] [(74 100 43 74) 43] [(52 80 90 86) 52] [(34 54 35 73) 34] [(39 84 60 59) 39] [(65 62 22 52) 22] [(74 89 81 74) 74] [(15 63 92 57) 15] [(3 79 30 20) 3] [(89 38 74 74) 38] [(88 92 4 55) 4] [(36 8 61 46) 8] [(43 25 23 87) 23] [(-19 33 -32 100) -32] [(66 40 70 -18) -18] [(22 21 75 -26) -26] [(69 16 14 17) 14] [(-77 -92 -82 58) -92] [(-88 -53 2 -47) -88] [(61 -56 -12 -47) -56] [(-36 96 -10 -83) -83] [(97 -1 -27 -4) -27] [(-47 30 46 20) -47] [(8 -65 -14 82) -65] [(83 63 41 25) 25] [(-72 -75 25 -31) -75] [(-60 -73 59 23) -73] [(-35 7 64 -9) -35] [(-77 -5 20 47) -77] [(0 56 -60 1) -60] [(61 -90 -71 -84) -90] [(-63 46 -52 15) -63] [(-43 -33 -31 87) -43] [(93 48 0 -3) -3] [(-14 -18 13 88) -18] [(73 85 1 80) 1] [(-91 -4 -52 -17) -91] [(-4 45 -23 3) -23] [(40 67 47 -42) -42] [(97 79 34 -24) -24] [(-82 -21 -10 -44) -82] [(30 -32 -82 -29) -82] [(-23 -83 -5 98) -83] [(92 25 -54 56) -54] [(-61 62 26 -36) -61] [(87 92 -75 44) -75] [(-71 94 67 23) -71] [(95 -58 49 -51) -58] [(27 85 93 54) 27] [(-71 -5 -66 36) -71] [(-13 66 91 73) -13] [(-57 -56 -30 -45) -57] [(-60 -60 -61 76) -61] [(24 -7 19 49) -7] [(88 -84 -91 -19) -91] [(21 -37 77 84) -37] [(42 96 -10 -68) -68] [(72 90 27 -29) -29] [(-40 31 61 -28) -40] [(98 35 88 73) 35] [(-93 91 36 53) -93] [(-19 -77 -93 -11) -93] [(82 -86 -80 87) -86] [(51 -90 -82 36) -90] [(71 58 -61 -17) -61] [(-15 -96 -78 -41) -96] [(1 52 8 62) 1] [(-69 10 -11 -64) -69] [(-72 77 70 -94) -94] [(16 -48 57 -34) -48] [(-82 31 3 -19) -82] [(34 -76 88 -27) -76] [(34 99 -7 -76) -76])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-54 -54 -54 -20] -54]
Train Case:   6 | Input/Output: [[17 -35 17 17] -35]
Train Case:   7 | Input/Output: [[79 79 79 -39] -39]
Train Case:   8 | Input/Output: [[84 -97 -97 -97] -97]
Train Case:   9 | Input/Output: [[-85 -29 -85 -85] -85]
Train Case:  10 | Input/Output: [[-83 -58 -83 -83] -83]
Train Case:  11 | Input/Output: [[47 -6 -6 -6] -6]
Train Case:  12 | Input/Output: [[-20 54 54 54] -20]
Train Case:  13 | Input/Output: [[-39 -39 -39 38] -39]
Train Case:  14 | Input/Output: [[-64 -64 -64 36] -64]
Train Case:  15 | Input/Output: [(-73 -73 -73 -73) -73]
Train Case:  16 | Input/Output: [(-64 -64 -64 -64) -64]
Train Case:  17 | Input/Output: [(74 74 74 74) 74]
Train Case:  18 | Input/Output: [(-30 -30 -30 -30) -30]
Train Case:  19 | Input/Output: [(-99 -99 -99 -99) -99]
Train Case:  20 | Input/Output: [(21 82 90 51) 21]
Train Case:  21 | Input/Output: [(27 20 14 29) 14]
Train Case:  22 | Input/Output: [(38 89 63 89) 38]
Train Case:  23 | Input/Output: [(65 4 86 47) 4]
Train Case:  24 | Input/Output: [(88 95 97 54) 54]
Train Case:  25 | Input/Output: [(51 35 20 93) 20]
Train Case:  26 | Input/Output: [(31 8 28 94) 8]
Train Case:  27 | Input/Output: [(52 13 4 74) 4]
Train Case:  28 | Input/Output: [(74 100 43 74) 43]
Train Case:  29 | Input/Output: [(52 80 90 86) 52]
Train Case:  30 | Input/Output: [(34 54 35 73) 34]
Train Case:  31 | Input/Output: [(39 84 60 59) 39]
Train Case:  32 | Input/Output: [(65 62 22 52) 22]
Train Case:  33 | Input/Output: [(74 89 81 74) 74]
Train Case:  34 | Input/Output: [(15 63 92 57) 15]
Train Case:  35 | Input/Output: [(3 79 30 20) 3]
Train Case:  36 | Input/Output: [(89 38 74 74) 38]
Train Case:  37 | Input/Output: [(88 92 4 55) 4]
Train Case:  38 | Input/Output: [(36 8 61 46) 8]
Train Case:  39 | Input/Output: [(43 25 23 87) 23]
Train Case:  40 | Input/Output: [(-19 33 -32 100) -32]
Train Case:  41 | Input/Output: [(66 40 70 -18) -18]
Train Case:  42 | Input/Output: [(22 21 75 -26) -26]
Train Case:  43 | Input/Output: [(69 16 14 17) 14]
Train Case:  44 | Input/Output: [(-77 -92 -82 58) -92]
Train Case:  45 | Input/Output: [(-88 -53 2 -47) -88]
Train Case:  46 | Input/Output: [(61 -56 -12 -47) -56]
Train Case:  47 | Input/Output: [(-36 96 -10 -83) -83]
Train Case:  48 | Input/Output: [(97 -1 -27 -4) -27]
Train Case:  49 | Input/Output: [(-47 30 46 20) -47]
Train Case:  50 | Input/Output: [(8 -65 -14 82) -65]
Train Case:  51 | Input/Output: [(83 63 41 25) 25]
Train Case:  52 | Input/Output: [(-72 -75 25 -31) -75]
Train Case:  53 | Input/Output: [(-60 -73 59 23) -73]
Train Case:  54 | Input/Output: [(-35 7 64 -9) -35]
Train Case:  55 | Input/Output: [(-77 -5 20 47) -77]
Train Case:  56 | Input/Output: [(0 56 -60 1) -60]
Train Case:  57 | Input/Output: [(61 -90 -71 -84) -90]
Train Case:  58 | Input/Output: [(-63 46 -52 15) -63]
Train Case:  59 | Input/Output: [(-43 -33 -31 87) -43]
Train Case:  60 | Input/Output: [(93 48 0 -3) -3]
Train Case:  61 | Input/Output: [(-14 -18 13 88) -18]
Train Case:  62 | Input/Output: [(73 85 1 80) 1]
Train Case:  63 | Input/Output: [(-91 -4 -52 -17) -91]
Train Case:  64 | Input/Output: [(-4 45 -23 3) -23]
Train Case:  65 | Input/Output: [(40 67 47 -42) -42]
Train Case:  66 | Input/Output: [(97 79 34 -24) -24]
Train Case:  67 | Input/Output: [(-82 -21 -10 -44) -82]
Train Case:  68 | Input/Output: [(30 -32 -82 -29) -82]
Train Case:  69 | Input/Output: [(-23 -83 -5 98) -83]
Train Case:  70 | Input/Output: [(92 25 -54 56) -54]
Train Case:  71 | Input/Output: [(-61 62 26 -36) -61]
Train Case:  72 | Input/Output: [(87 92 -75 44) -75]
Train Case:  73 | Input/Output: [(-71 94 67 23) -71]
Train Case:  74 | Input/Output: [(95 -58 49 -51) -58]
Train Case:  75 | Input/Output: [(27 85 93 54) 27]
Train Case:  76 | Input/Output: [(-71 -5 -66 36) -71]
Train Case:  77 | Input/Output: [(-13 66 91 73) -13]
Train Case:  78 | Input/Output: [(-57 -56 -30 -45) -57]
Train Case:  79 | Input/Output: [(-60 -60 -61 76) -61]
Train Case:  80 | Input/Output: [(24 -7 19 49) -7]
Train Case:  81 | Input/Output: [(88 -84 -91 -19) -91]
Train Case:  82 | Input/Output: [(21 -37 77 84) -37]
Train Case:  83 | Input/Output: [(42 96 -10 -68) -68]
Train Case:  84 | Input/Output: [(72 90 27 -29) -29]
Train Case:  85 | Input/Output: [(-40 31 61 -28) -40]
Train Case:  86 | Input/Output: [(98 35 88 73) 35]
Train Case:  87 | Input/Output: [(-93 91 36 53) -93]
Train Case:  88 | Input/Output: [(-19 -77 -93 -11) -93]
Train Case:  89 | Input/Output: [(82 -86 -80 87) -86]
Train Case:  90 | Input/Output: [(51 -90 -82 36) -90]
Train Case:  91 | Input/Output: [(71 58 -61 -17) -61]
Train Case:  92 | Input/Output: [(-15 -96 -78 -41) -96]
Train Case:  93 | Input/Output: [(1 52 8 62) 1]
Train Case:  94 | Input/Output: [(-69 10 -11 -64) -69]
Train Case:  95 | Input/Output: [(-72 77 70 -94) -94]
Train Case:  96 | Input/Output: [(16 -48 57 -34) -48]
Train Case:  97 | Input/Output: [(-82 31 3 -19) -82]
Train Case:  98 | Input/Output: [(34 -76 88 -27) -76]
Train Case:  99 | Input/Output: [(34 99 -7 -76) -76]
Test Case:   0 | Input/Output: [[94 94 72 94] 72]
Test Case:   1 | Input/Output: [[-77 16 -77 -77] -77]
Test Case:   2 | Input/Output: [[11 11 85 11] 11]
Test Case:   3 | Input/Output: [[-51 25 -51 -51] -51]
Test Case:   4 | Input/Output: [[89 89 89 -23] -23]
Test Case:   5 | Input/Output: [[-73 -73 -73 90] -73]
Test Case:   6 | Input/Output: [[63 -38 63 63] -38]
Test Case:   7 | Input/Output: [[-61 -61 -61 24] -61]
Test Case:   8 | Input/Output: [[-21 -21 86 -21] -21]
Test Case:   9 | Input/Output: [[-60 76 76 76] -60]
Test Case:  10 | Input/Output: [[-66 61 -66 -66] -66]
Test Case:  11 | Input/Output: [[-20 -20 -21 -20] -21]
Test Case:  12 | Input/Output: [[-47 -47 -47 -6] -47]
Test Case:  13 | Input/Output: [[-72 -72 83 -72] -72]
Test Case:  14 | Input/Output: [[21 21 21 -19] -19]
Test Case:  15 | Input/Output: [[10 10 -75 10] -75]
Test Case:  16 | Input/Output: [[-9 -9 -9 -79] -79]
Test Case:  17 | Input/Output: [[27 27 0 27] 0]
Test Case:  18 | Input/Output: [[57 57 57 51] 51]
Test Case:  19 | Input/Output: [[-53 23 23 23] -53]
Test Case:  20 | Input/Output: [[-76 -76 -63 -76] -76]
Test Case:  21 | Input/Output: [[50 50 50 76] 50]
Test Case:  22 | Input/Output: [[91 -99 91 91] -99]
Test Case:  23 | Input/Output: [[24 -77 24 24] -77]
Test Case:  24 | Input/Output: [[56 56 -29 56] -29]
Test Case:  25 | Input/Output: [[-22 51 -22 -22] -22]
Test Case:  26 | Input/Output: [[86 17 17 17] 17]
Test Case:  27 | Input/Output: [[80 29 80 80] 29]
Test Case:  28 | Input/Output: [[99 99 99 -10] -10]
Test Case:  29 | Input/Output: [[-21 50 50 50] -21]
Test Case:  30 | Input/Output: [[95 -6 95 95] -6]
Test Case:  31 | Input/Output: [[-44 -52 -44 -44] -52]
Test Case:  32 | Input/Output: [[82 -54 82 82] -54]
Test Case:  33 | Input/Output: [[67 -48 -48 -48] -48]
Test Case:  34 | Input/Output: [[9 9 -69 9] -69]
Test Case:  35 | Input/Output: [[-24 78 -24 -24] -24]
Test Case:  36 | Input/Output: [[-91 -91 -91 -90] -91]
Test Case:  37 | Input/Output: [[56 -62 56 56] -62]
Test Case:  38 | Input/Output: [[-83 -83 -83 22] -83]
Test Case:  39 | Input/Output: [[-73 -2 -73 -73] -73]
Test Case:  40 | Input/Output: [[49 -84 49 49] -84]
Test Case:  41 | Input/Output: [[-75 -75 80 -75] -75]
Test Case:  42 | Input/Output: [[-87 -87 -86 -87] -87]
Test Case:  43 | Input/Output: [[-58 -73 -73 -73] -73]
Test Case:  44 | Input/Output: [[92 92 -93 92] -93]
Test Case:  45 | Input/Output: [[-8 -8 -90 -8] -90]
Test Case:  46 | Input/Output: [[-23 -23 -23 89] -23]
Test Case:  47 | Input/Output: [[30 30 30 29] 29]
Test Case:  48 | Input/Output: [[-34 -34 59 -34] -34]
Test Case:  49 | Input/Output: [[95 49 95 95] 49]
Test Case:  50 | Input/Output: [[-70 -70 -70 -42] -70]
Test Case:  51 | Input/Output: [[10 28 28 28] 10]
Test Case:  52 | Input/Output: [[-92 -92 -92 65] -92]
Test Case:  53 | Input/Output: [[59 -15 59 59] -15]
Test Case:  54 | Input/Output: [[73 73 44 73] 44]
Test Case:  55 | Input/Output: [[-30 18 18 18] -30]
Test Case:  56 | Input/Output: [[-34 -96 -96 -96] -96]
Test Case:  57 | Input/Output: [[-79 -79 -45 -79] -79]
Test Case:  58 | Input/Output: [[-56 -56 -56 61] -56]
Test Case:  59 | Input/Output: [[84 84 51 84] 51]
Test Case:  60 | Input/Output: [[57 56 57 57] 56]
Test Case:  61 | Input/Output: [[-68 -80 -80 -80] -80]
Test Case:  62 | Input/Output: [[-13 -13 -45 -13] -45]
Test Case:  63 | Input/Output: [[55 55 55 26] 26]
Test Case:  64 | Input/Output: [[8 81 81 81] 8]
Test Case:  65 | Input/Output: [[-88 -43 -43 -43] -88]
Test Case:  66 | Input/Output: [[60 60 60 -80] -80]
Test Case:  67 | Input/Output: [[-42 -42 -32 -42] -42]
Test Case:  68 | Input/Output: [[-49 -49 -49 66] -49]
Test Case:  69 | Input/Output: [[95 95 95 89] 89]
Test Case:  70 | Input/Output: [[-62 -39 -39 -39] -62]
Test Case:  71 | Input/Output: [[85 -35 -35 -35] -35]
Test Case:  72 | Input/Output: [[61 61 61 -98] -98]
Test Case:  73 | Input/Output: [[-49 17 17 17] -49]
Test Case:  74 | Input/Output: [[52 -4 52 52] -4]
Test Case:  75 | Input/Output: [[2 -86 -86 -86] -86]
Test Case:  76 | Input/Output: [[-10 -10 -36 -10] -36]
Test Case:  77 | Input/Output: [[10 -75 -75 -75] -75]
Test Case:  78 | Input/Output: [[-1 -1 -1 -12] -12]
Test Case:  79 | Input/Output: [[27 27 27 -43] -43]
Test Case:  80 | Input/Output: [[-73 -73 -73 18] -73]
Test Case:  81 | Input/Output: [[-53 80 80 80] -53]
Test Case:  82 | Input/Output: [[-44 -26 -44 -44] -44]
Test Case:  83 | Input/Output: [[-23 -55 -23 -23] -55]
Test Case:  84 | Input/Output: [[0 -44 0 0] -44]
Test Case:  85 | Input/Output: [[85 87 85 85] 85]
Test Case:  86 | Input/Output: [[76 -76 -76 -76] -76]
Test Case:  87 | Input/Output: [[-54 -54 89 -54] -54]
Test Case:  88 | Input/Output: [[6 95 95 95] 6]
Test Case:  89 | Input/Output: [[-2 -85 -2 -2] -85]
Test Case:  90 | Input/Output: [[89 89 89 -76] -76]
Test Case:  91 | Input/Output: [[-93 -93 -93 -89] -93]
Test Case:  92 | Input/Output: [[-35 -35 6 -35] -35]
Test Case:  93 | Input/Output: [[84 48 84 84] 48]
Test Case:  94 | Input/Output: [[-74 -74 -74 85] -74]
Test Case:  95 | Input/Output: [[89 17 89 89] 17]
Test Case:  96 | Input/Output: [[-20 -20 -20 35] -20]
Test Case:  97 | Input/Output: [[-71 74 -71 -71] -71]
Test Case:  98 | Input/Output: [[-36 -36 -96 -36] -96]
Test Case:  99 | Input/Output: [[-22 95 -22 -22] -22]
Test Case: 100 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 101 | Input/Output: [(92 92 92 92) 92]
Test Case: 102 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 103 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 104 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 105 | Input/Output: [(96 96 96 96) 96]
Test Case: 106 | Input/Output: [(94 94 94 94) 94]
Test Case: 107 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 108 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 109 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 110 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 111 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 112 | Input/Output: [(50 50 50 50) 50]
Test Case: 113 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 114 | Input/Output: [(82 82 82 82) 82]
Test Case: 115 | Input/Output: [(27 27 27 27) 27]
Test Case: 116 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 117 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 118 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 119 | Input/Output: [(4 4 4 4) 4]
Test Case: 120 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 121 | Input/Output: [(86 86 86 86) 86]
Test Case: 122 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 123 | Input/Output: [(92 92 92 92) 92]
Test Case: 124 | Input/Output: [(72 72 72 72) 72]
Test Case: 125 | Input/Output: [(86 86 86 86) 86]
Test Case: 126 | Input/Output: [(51 51 51 51) 51]
Test Case: 127 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 128 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 129 | Input/Output: [(9 9 9 9) 9]
Test Case: 130 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 131 | Input/Output: [(32 32 32 32) 32]
Test Case: 132 | Input/Output: [(47 47 47 47) 47]
Test Case: 133 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 134 | Input/Output: [(0 0 0 0) 0]
Test Case: 135 | Input/Output: [(15 15 15 15) 15]
Test Case: 136 | Input/Output: [(73 73 73 73) 73]
Test Case: 137 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 138 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 139 | Input/Output: [(19 19 19 19) 19]
Test Case: 140 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 141 | Input/Output: [(7 7 7 7) 7]
Test Case: 142 | Input/Output: [(44 44 44 44) 44]
Test Case: 143 | Input/Output: [(2 2 2 2) 2]
Test Case: 144 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 145 | Input/Output: [(19 19 19 19) 19]
Test Case: 146 | Input/Output: [(60 60 60 60) 60]
Test Case: 147 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 148 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 149 | Input/Output: [(14 14 14 14) 14]
Test Case: 150 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 151 | Input/Output: [(51 51 51 51) 51]
Test Case: 152 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 153 | Input/Output: [(34 34 34 34) 34]
Test Case: 154 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 155 | Input/Output: [(66 66 66 66) 66]
Test Case: 156 | Input/Output: [(39 39 39 39) 39]
Test Case: 157 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 158 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 159 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 160 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 161 | Input/Output: [(38 38 38 38) 38]
Test Case: 162 | Input/Output: [(48 48 48 48) 48]
Test Case: 163 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 164 | Input/Output: [(5 5 5 5) 5]
Test Case: 165 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 166 | Input/Output: [(39 39 39 39) 39]
Test Case: 167 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 168 | Input/Output: [(36 36 36 36) 36]
Test Case: 169 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 170 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 171 | Input/Output: [(18 18 18 18) 18]
Test Case: 172 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 173 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 174 | Input/Output: [(35 35 35 35) 35]
Test Case: 175 | Input/Output: [(4 4 4 4) 4]
Test Case: 176 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 177 | Input/Output: [(5 5 5 5) 5]
Test Case: 178 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 179 | Input/Output: [(85 85 85 85) 85]
Test Case: 180 | Input/Output: [(63 63 63 63) 63]
Test Case: 181 | Input/Output: [(4 4 4 4) 4]
Test Case: 182 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 183 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 184 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 185 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 186 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 187 | Input/Output: [(27 27 27 27) 27]
Test Case: 188 | Input/Output: [(0 0 0 0) 0]
Test Case: 189 | Input/Output: [(98 98 98 98) 98]
Test Case: 190 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 191 | Input/Output: [(84 84 84 84) 84]
Test Case: 192 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 193 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 194 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 195 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 196 | Input/Output: [(97 97 97 97) 97]
Test Case: 197 | Input/Output: [(50 50 50 50) 50]
Test Case: 198 | Input/Output: [(28 28 28 28) 28]
Test Case: 199 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 200 | Input/Output: [(48 36 16 8) 8]
Test Case: 201 | Input/Output: [(11 3 75 79) 3]
Test Case: 202 | Input/Output: [(71 97 80 52) 52]
Test Case: 203 | Input/Output: [(35 0 97 42) 0]
Test Case: 204 | Input/Output: [(45 22 91 85) 22]
Test Case: 205 | Input/Output: [(30 58 65 6) 6]
Test Case: 206 | Input/Output: [(37 58 99 38) 37]
Test Case: 207 | Input/Output: [(13 37 81 14) 13]
Test Case: 208 | Input/Output: [(22 89 19 20) 19]
Test Case: 209 | Input/Output: [(76 5 25 20) 5]
Test Case: 210 | Input/Output: [(0 29 46 41) 0]
Test Case: 211 | Input/Output: [(53 18 10 85) 10]
Test Case: 212 | Input/Output: [(64 84 15 40) 15]
Test Case: 213 | Input/Output: [(90 16 100 46) 16]
Test Case: 214 | Input/Output: [(23 0 29 42) 0]
Test Case: 215 | Input/Output: [(47 86 97 71) 47]
Test Case: 216 | Input/Output: [(64 6 3 33) 3]
Test Case: 217 | Input/Output: [(9 98 57 47) 9]
Test Case: 218 | Input/Output: [(33 23 9 78) 9]
Test Case: 219 | Input/Output: [(39 26 87 20) 20]
Test Case: 220 | Input/Output: [(90 17 63 56) 17]
Test Case: 221 | Input/Output: [(7 38 40 27) 7]
Test Case: 222 | Input/Output: [(83 4 86 4) 4]
Test Case: 223 | Input/Output: [(26 52 75 99) 26]
Test Case: 224 | Input/Output: [(86 14 2 96) 2]
Test Case: 225 | Input/Output: [(51 92 25 35) 25]
Test Case: 226 | Input/Output: [(63 35 54 81) 35]
Test Case: 227 | Input/Output: [(31 3 24 54) 3]
Test Case: 228 | Input/Output: [(28 67 51 92) 28]
Test Case: 229 | Input/Output: [(20 55 7 70) 7]
Test Case: 230 | Input/Output: [(64 10 77 99) 10]
Test Case: 231 | Input/Output: [(37 26 38 92) 26]
Test Case: 232 | Input/Output: [(30 55 39 91) 30]
Test Case: 233 | Input/Output: [(45 79 65 50) 45]
Test Case: 234 | Input/Output: [(29 61 95 49) 29]
Test Case: 235 | Input/Output: [(22 28 26 10) 10]
Test Case: 236 | Input/Output: [(67 73 6 31) 6]
Test Case: 237 | Input/Output: [(27 73 62 42) 27]
Test Case: 238 | Input/Output: [(50 59 61 90) 50]
Test Case: 239 | Input/Output: [(28 13 23 31) 13]
Test Case: 240 | Input/Output: [(82 65 78 66) 65]
Test Case: 241 | Input/Output: [(87 85 83 72) 72]
Test Case: 242 | Input/Output: [(78 3 50 11) 3]
Test Case: 243 | Input/Output: [(90 78 49 32) 32]
Test Case: 244 | Input/Output: [(87 63 23 68) 23]
Test Case: 245 | Input/Output: [(19 67 68 90) 19]
Test Case: 246 | Input/Output: [(92 2 59 35) 2]
Test Case: 247 | Input/Output: [(38 79 91 54) 38]
Test Case: 248 | Input/Output: [(25 87 57 11) 11]
Test Case: 249 | Input/Output: [(34 36 74 67) 34]
Test Case: 250 | Input/Output: [(84 11 100 57) 11]
Test Case: 251 | Input/Output: [(88 39 40 43) 39]
Test Case: 252 | Input/Output: [(40 36 46 67) 36]
Test Case: 253 | Input/Output: [(12 68 81 13) 12]
Test Case: 254 | Input/Output: [(1 55 56 77) 1]
Test Case: 255 | Input/Output: [(66 73 92 30) 30]
Test Case: 256 | Input/Output: [(32 58 9 47) 9]
Test Case: 257 | Input/Output: [(35 13 31 79) 13]
Test Case: 258 | Input/Output: [(58 100 69 41) 41]
Test Case: 259 | Input/Output: [(17 10 33 98) 10]
Test Case: 260 | Input/Output: [(43 28 5 98) 5]
Test Case: 261 | Input/Output: [(19 80 1 32) 1]
Test Case: 262 | Input/Output: [(87 93 97 54) 54]
Test Case: 263 | Input/Output: [(49 69 69 20) 20]
Test Case: 264 | Input/Output: [(4 95 89 0) 0]
Test Case: 265 | Input/Output: [(52 10 54 71) 10]
Test Case: 266 | Input/Output: [(63 92 55 57) 55]
Test Case: 267 | Input/Output: [(77 38 86 6) 6]
Test Case: 268 | Input/Output: [(99 15 19 56) 15]
Test Case: 269 | Input/Output: [(52 8 93 32) 8]
Test Case: 270 | Input/Output: [(90 86 59 67) 59]
Test Case: 271 | Input/Output: [(15 99 4 39) 4]
Test Case: 272 | Input/Output: [(5 91 79 39) 5]
Test Case: 273 | Input/Output: [(6 71 15 100) 6]
Test Case: 274 | Input/Output: [(0 82 25 34) 0]
Test Case: 275 | Input/Output: [(54 1 80 14) 1]
Test Case: 276 | Input/Output: [(1 94 19 100) 1]
Test Case: 277 | Input/Output: [(57 89 81 97) 57]
Test Case: 278 | Input/Output: [(69 96 63 60) 60]
Test Case: 279 | Input/Output: [(13 0 87 41) 0]
Test Case: 280 | Input/Output: [(49 19 89 40) 19]
Test Case: 281 | Input/Output: [(85 99 13 4) 4]
Test Case: 282 | Input/Output: [(10 82 100 90) 10]
Test Case: 283 | Input/Output: [(66 75 99 7) 7]
Test Case: 284 | Input/Output: [(54 88 78 5) 5]
Test Case: 285 | Input/Output: [(83 37 91 86) 37]
Test Case: 286 | Input/Output: [(33 62 85 57) 33]
Test Case: 287 | Input/Output: [(100 65 98 30) 30]
Test Case: 288 | Input/Output: [(27 15 10 53) 10]
Test Case: 289 | Input/Output: [(74 34 96 42) 34]
Test Case: 290 | Input/Output: [(59 68 6 62) 6]
Test Case: 291 | Input/Output: [(70 47 56 3) 3]
Test Case: 292 | Input/Output: [(81 47 8 76) 8]
Test Case: 293 | Input/Output: [(24 17 45 68) 17]
Test Case: 294 | Input/Output: [(75 40 91 65) 40]
Test Case: 295 | Input/Output: [(6 91 18 56) 6]
Test Case: 296 | Input/Output: [(39 47 40 1) 1]
Test Case: 297 | Input/Output: [(16 66 63 87) 16]
Test Case: 298 | Input/Output: [(55 5 8 5) 5]
Test Case: 299 | Input/Output: [(3 23 52 66) 3]
Test Case: 300 | Input/Output: [(86 53 47 14) 14]
Test Case: 301 | Input/Output: [(42 93 78 25) 25]
Test Case: 302 | Input/Output: [(57 42 100 57) 42]
Test Case: 303 | Input/Output: [(52 56 47 50) 47]
Test Case: 304 | Input/Output: [(56 0 95 13) 0]
Test Case: 305 | Input/Output: [(69 49 13 88) 13]
Test Case: 306 | Input/Output: [(54 57 98 56) 54]
Test Case: 307 | Input/Output: [(49 0 59 64) 0]
Test Case: 308 | Input/Output: [(92 37 1 77) 1]
Test Case: 309 | Input/Output: [(93 36 52 31) 31]
Test Case: 310 | Input/Output: [(42 31 7 38) 7]
Test Case: 311 | Input/Output: [(96 94 0 16) 0]
Test Case: 312 | Input/Output: [(74 74 82 80) 74]
Test Case: 313 | Input/Output: [(76 13 19 76) 13]
Test Case: 314 | Input/Output: [(20 56 94 59) 20]
Test Case: 315 | Input/Output: [(98 96 21 98) 21]
Test Case: 316 | Input/Output: [(70 71 8 36) 8]
Test Case: 317 | Input/Output: [(64 67 43 53) 43]
Test Case: 318 | Input/Output: [(12 60 20 25) 12]
Test Case: 319 | Input/Output: [(32 43 19 28) 19]
Test Case: 320 | Input/Output: [(33 60 7 50) 7]
Test Case: 321 | Input/Output: [(18 44 3 50) 3]
Test Case: 322 | Input/Output: [(6 67 23 61) 6]
Test Case: 323 | Input/Output: [(25 32 11 21) 11]
Test Case: 324 | Input/Output: [(97 9 18 50) 9]
Test Case: 325 | Input/Output: [(87 82 48 25) 25]
Test Case: 326 | Input/Output: [(13 80 79 37) 13]
Test Case: 327 | Input/Output: [(98 75 33 56) 33]
Test Case: 328 | Input/Output: [(69 6 1 76) 1]
Test Case: 329 | Input/Output: [(92 20 90 80) 20]
Test Case: 330 | Input/Output: [(60 43 97 86) 43]
Test Case: 331 | Input/Output: [(39 26 92 80) 26]
Test Case: 332 | Input/Output: [(86 10 45 38) 10]
Test Case: 333 | Input/Output: [(63 17 33 93) 17]
Test Case: 334 | Input/Output: [(82 27 28 80) 27]
Test Case: 335 | Input/Output: [(80 96 28 15) 15]
Test Case: 336 | Input/Output: [(57 4 44 75) 4]
Test Case: 337 | Input/Output: [(44 10 82 80) 10]
Test Case: 338 | Input/Output: [(75 23 50 56) 23]
Test Case: 339 | Input/Output: [(68 34 42 61) 34]
Test Case: 340 | Input/Output: [(96 11 77 81) 11]
Test Case: 341 | Input/Output: [(70 66 49 84) 49]
Test Case: 342 | Input/Output: [(64 50 28 70) 28]
Test Case: 343 | Input/Output: [(43 20 12 76) 12]
Test Case: 344 | Input/Output: [(6 71 93 22) 6]
Test Case: 345 | Input/Output: [(35 45 57 26) 26]
Test Case: 346 | Input/Output: [(39 55 19 41) 19]
Test Case: 347 | Input/Output: [(63 78 52 34) 34]
Test Case: 348 | Input/Output: [(28 79 74 83) 28]
Test Case: 349 | Input/Output: [(20 23 53 35) 20]
Test Case: 350 | Input/Output: [(76 76 72 57) 57]
Test Case: 351 | Input/Output: [(46 45 74 35) 35]
Test Case: 352 | Input/Output: [(46 38 0 59) 0]
Test Case: 353 | Input/Output: [(36 100 16 96) 16]
Test Case: 354 | Input/Output: [(8 88 73 48) 8]
Test Case: 355 | Input/Output: [(56 78 87 95) 56]
Test Case: 356 | Input/Output: [(59 71 9 52) 9]
Test Case: 357 | Input/Output: [(81 1 50 94) 1]
Test Case: 358 | Input/Output: [(37 18 81 47) 18]
Test Case: 359 | Input/Output: [(58 81 18 84) 18]
Test Case: 360 | Input/Output: [(5 86 66 10) 5]
Test Case: 361 | Input/Output: [(70 50 13 66) 13]
Test Case: 362 | Input/Output: [(54 7 97 24) 7]
Test Case: 363 | Input/Output: [(86 36 29 75) 29]
Test Case: 364 | Input/Output: [(74 58 89 43) 43]
Test Case: 365 | Input/Output: [(20 3 95 28) 3]
Test Case: 366 | Input/Output: [(72 34 70 0) 0]
Test Case: 367 | Input/Output: [(18 4 46 3) 3]
Test Case: 368 | Input/Output: [(18 91 0 43) 0]
Test Case: 369 | Input/Output: [(0 45 91 19) 0]
Test Case: 370 | Input/Output: [(25 92 3 82) 3]
Test Case: 371 | Input/Output: [(41 42 100 55) 41]
Test Case: 372 | Input/Output: [(65 37 15 85) 15]
Test Case: 373 | Input/Output: [(96 90 6 45) 6]
Test Case: 374 | Input/Output: [(30 68 31 9) 9]
Test Case: 375 | Input/Output: [(53 86 95 97) 53]
Test Case: 376 | Input/Output: [(54 1 24 70) 1]
Test Case: 377 | Input/Output: [(50 97 7 18) 7]
Test Case: 378 | Input/Output: [(43 7 98 23) 7]
Test Case: 379 | Input/Output: [(13 1 20 73) 1]
Test Case: 380 | Input/Output: [(14 75 44 57) 14]
Test Case: 381 | Input/Output: [(70 43 15 88) 15]
Test Case: 382 | Input/Output: [(84 45 93 11) 11]
Test Case: 383 | Input/Output: [(19 41 87 20) 19]
Test Case: 384 | Input/Output: [(12 27 85 73) 12]
Test Case: 385 | Input/Output: [(18 88 16 97) 16]
Test Case: 386 | Input/Output: [(44 73 70 62) 44]
Test Case: 387 | Input/Output: [(61 39 31 57) 31]
Test Case: 388 | Input/Output: [(29 71 28 44) 28]
Test Case: 389 | Input/Output: [(50 13 4 45) 4]
Test Case: 390 | Input/Output: [(11 21 58 10) 10]
Test Case: 391 | Input/Output: [(62 95 62 3) 3]
Test Case: 392 | Input/Output: [(18 34 35 92) 18]
Test Case: 393 | Input/Output: [(22 1 43 82) 1]
Test Case: 394 | Input/Output: [(33 94 4 73) 4]
Test Case: 395 | Input/Output: [(37 84 2 33) 2]
Test Case: 396 | Input/Output: [(20 76 86 54) 20]
Test Case: 397 | Input/Output: [(18 87 59 94) 18]
Test Case: 398 | Input/Output: [(73 50 77 26) 26]
Test Case: 399 | Input/Output: [(19 25 31 55) 19]
Test Case: 400 | Input/Output: [(35 74 -44 83) -44]
Test Case: 401 | Input/Output: [(-61 17 -16 6) -61]
Test Case: 402 | Input/Output: [(46 85 -62 54) -62]
Test Case: 403 | Input/Output: [(0 46 46 24) 0]
Test Case: 404 | Input/Output: [(84 35 -53 -80) -80]
Test Case: 405 | Input/Output: [(-34 -16 25 -27) -34]
Test Case: 406 | Input/Output: [(-48 -6 30 60) -48]
Test Case: 407 | Input/Output: [(-93 -67 -52 -46) -93]
Test Case: 408 | Input/Output: [(97 -98 -95 58) -98]
Test Case: 409 | Input/Output: [(51 61 11 87) 11]
Test Case: 410 | Input/Output: [(-7 -55 21 72) -55]
Test Case: 411 | Input/Output: [(-72 50 -18 47) -72]
Test Case: 412 | Input/Output: [(87 -14 -27 -65) -65]
Test Case: 413 | Input/Output: [(-69 11 40 -72) -72]
Test Case: 414 | Input/Output: [(22 25 -71 34) -71]
Test Case: 415 | Input/Output: [(-45 -88 95 63) -88]
Test Case: 416 | Input/Output: [(-67 59 -47 97) -67]
Test Case: 417 | Input/Output: [(-27 -15 -93 51) -93]
Test Case: 418 | Input/Output: [(-5 92 -18 -18) -18]
Test Case: 419 | Input/Output: [(58 60 22 -37) -37]
Test Case: 420 | Input/Output: [(50 26 -84 81) -84]
Test Case: 421 | Input/Output: [(-67 91 -26 29) -67]
Test Case: 422 | Input/Output: [(72 -25 78 49) -25]
Test Case: 423 | Input/Output: [(-64 36 86 88) -64]
Test Case: 424 | Input/Output: [(-93 81 -99 66) -99]
Test Case: 425 | Input/Output: [(40 -64 -26 -20) -64]
Test Case: 426 | Input/Output: [(-35 95 76 78) -35]
Test Case: 427 | Input/Output: [(-20 -36 13 46) -36]
Test Case: 428 | Input/Output: [(-62 -30 -52 57) -62]
Test Case: 429 | Input/Output: [(100 5 71 36) 5]
Test Case: 430 | Input/Output: [(59 -74 -58 61) -74]
Test Case: 431 | Input/Output: [(96 21 -42 -13) -42]
Test Case: 432 | Input/Output: [(-78 -37 -43 34) -78]
Test Case: 433 | Input/Output: [(-79 -53 54 80) -79]
Test Case: 434 | Input/Output: [(-91 85 -65 -53) -91]
Test Case: 435 | Input/Output: [(61 -5 -73 69) -73]
Test Case: 436 | Input/Output: [(4 -90 -70 60) -90]
Test Case: 437 | Input/Output: [(-3 26 -48 -76) -76]
Test Case: 438 | Input/Output: [(53 -27 11 72) -27]
Test Case: 439 | Input/Output: [(-48 56 39 59) -48]
Test Case: 440 | Input/Output: [(-38 73 -32 -73) -73]
Test Case: 441 | Input/Output: [(60 27 86 -29) -29]
Test Case: 442 | Input/Output: [(36 19 -64 54) -64]
Test Case: 443 | Input/Output: [(99 -41 88 -14) -41]
Test Case: 444 | Input/Output: [(23 -72 57 40) -72]
Test Case: 445 | Input/Output: [(-71 -64 -84 -50) -84]
Test Case: 446 | Input/Output: [(70 62 -99 2) -99]
Test Case: 447 | Input/Output: [(91 -26 45 29) -26]
Test Case: 448 | Input/Output: [(39 -70 80 -54) -70]
Test Case: 449 | Input/Output: [(77 -20 4 75) -20]
Test Case: 450 | Input/Output: [(23 -30 6 92) -30]
Test Case: 451 | Input/Output: [(-20 23 20 -71) -71]
Test Case: 452 | Input/Output: [(91 -34 19 -45) -45]
Test Case: 453 | Input/Output: [(-88 79 -7 -98) -98]
Test Case: 454 | Input/Output: [(-37 -39 72 -89) -89]
Test Case: 455 | Input/Output: [(-78 50 -65 -14) -78]
Test Case: 456 | Input/Output: [(100 51 95 -32) -32]
Test Case: 457 | Input/Output: [(-62 -56 93 -84) -84]
Test Case: 458 | Input/Output: [(15 100 82 -80) -80]
Test Case: 459 | Input/Output: [(-5 35 66 67) -5]
Test Case: 460 | Input/Output: [(21 -77 57 -48) -77]
Test Case: 461 | Input/Output: [(15 42 52 -21) -21]
Test Case: 462 | Input/Output: [(97 -97 54 -87) -97]
Test Case: 463 | Input/Output: [(-3 -74 -9 71) -74]
Test Case: 464 | Input/Output: [(51 70 -16 -5) -16]
Test Case: 465 | Input/Output: [(-72 90 -37 16) -72]
Test Case: 466 | Input/Output: [(37 31 -72 -60) -72]
Test Case: 467 | Input/Output: [(-58 -98 -5 66) -98]
Test Case: 468 | Input/Output: [(88 -80 -3 -2) -80]
Test Case: 469 | Input/Output: [(25 -85 -42 64) -85]
Test Case: 470 | Input/Output: [(10 82 -2 -78) -78]
Test Case: 471 | Input/Output: [(62 54 14 49) 14]
Test Case: 472 | Input/Output: [(-76 55 -3 -81) -81]
Test Case: 473 | Input/Output: [(-29 -31 65 -82) -82]
Test Case: 474 | Input/Output: [(8 -27 -90 -65) -90]
Test Case: 475 | Input/Output: [(51 -79 -38 3) -79]
Test Case: 476 | Input/Output: [(-59 10 -99 -88) -99]
Test Case: 477 | Input/Output: [(29 71 50 73) 29]
Test Case: 478 | Input/Output: [(77 -51 -72 -77) -77]
Test Case: 479 | Input/Output: [(-72 -78 -87 58) -87]
Test Case: 480 | Input/Output: [(5 -89 -13 -61) -89]
Test Case: 481 | Input/Output: [(-91 -40 -56 86) -91]
Test Case: 482 | Input/Output: [(-75 -47 46 67) -75]
Test Case: 483 | Input/Output: [(-2 -37 63 -5) -37]
Test Case: 484 | Input/Output: [(-76 68 -54 -26) -76]
Test Case: 485 | Input/Output: [(-99 -14 94 73) -99]
Test Case: 486 | Input/Output: [(15 -79 33 -50) -79]
Test Case: 487 | Input/Output: [(-4 35 -36 34) -36]
Test Case: 488 | Input/Output: [(77 -28 78 100) -28]
Test Case: 489 | Input/Output: [(-50 93 -16 -16) -50]
Test Case: 490 | Input/Output: [(-21 42 -75 -23) -75]
Test Case: 491 | Input/Output: [(38 -81 90 -70) -81]
Test Case: 492 | Input/Output: [(95 55 -83 -8) -83]
Test Case: 493 | Input/Output: [(68 97 99 24) 24]
Test Case: 494 | Input/Output: [(38 33 -78 20) -78]
Test Case: 495 | Input/Output: [(16 97 13 -87) -87]
Test Case: 496 | Input/Output: [(41 30 -72 68) -72]
Test Case: 497 | Input/Output: [(-82 25 79 -97) -97]
Test Case: 498 | Input/Output: [(32 82 -63 -36) -63]
Test Case: 499 | Input/Output: [(25 79 15 -76) -76]
Test Case: 500 | Input/Output: [(33 79 -41 -97) -97]
Test Case: 501 | Input/Output: [(91 -42 17 -63) -63]
Test Case: 502 | Input/Output: [(-15 -80 83 46) -80]
Test Case: 503 | Input/Output: [(-13 -78 -16 -78) -78]
Test Case: 504 | Input/Output: [(-25 -78 98 15) -78]
Test Case: 505 | Input/Output: [(-38 58 62 60) -38]
Test Case: 506 | Input/Output: [(-40 79 -30 43) -40]
Test Case: 507 | Input/Output: [(0 -45 95 33) -45]
Test Case: 508 | Input/Output: [(74 -27 55 26) -27]
Test Case: 509 | Input/Output: [(95 -75 16 22) -75]
Test Case: 510 | Input/Output: [(-82 44 95 -74) -82]
Test Case: 511 | Input/Output: [(47 20 0 -30) -30]
Test Case: 512 | Input/Output: [(22 77 14 -2) -2]
Test Case: 513 | Input/Output: [(-5 -34 -53 -52) -53]
Test Case: 514 | Input/Output: [(56 -4 -1 20) -4]
Test Case: 515 | Input/Output: [(-93 54 100 -55) -93]
Test Case: 516 | Input/Output: [(-89 84 39 -99) -99]
Test Case: 517 | Input/Output: [(64 38 -75 29) -75]
Test Case: 518 | Input/Output: [(-35 -80 -36 12) -80]
Test Case: 519 | Input/Output: [(-96 -4 -91 5) -96]
Test Case: 520 | Input/Output: [(11 -13 72 54) -13]
Test Case: 521 | Input/Output: [(-41 -97 -95 28) -97]
Test Case: 522 | Input/Output: [(-27 43 96 -50) -50]
Test Case: 523 | Input/Output: [(-21 13 -98 -44) -98]
Test Case: 524 | Input/Output: [(-16 66 48 -48) -48]
Test Case: 525 | Input/Output: [(83 60 -73 3) -73]
Test Case: 526 | Input/Output: [(42 -37 26 85) -37]
Test Case: 527 | Input/Output: [(99 97 -28 -74) -74]
Test Case: 528 | Input/Output: [(54 69 20 16) 16]
Test Case: 529 | Input/Output: [(-59 64 75 62) -59]
Test Case: 530 | Input/Output: [(52 -72 -55 5) -72]
Test Case: 531 | Input/Output: [(-42 -44 -54 -74) -74]
Test Case: 532 | Input/Output: [(-92 -38 -36 92) -92]
Test Case: 533 | Input/Output: [(-76 37 -26 9) -76]
Test Case: 534 | Input/Output: [(-27 16 31 -92) -92]
Test Case: 535 | Input/Output: [(-86 -2 63 -15) -86]
Test Case: 536 | Input/Output: [(1 99 -11 -48) -48]
Test Case: 537 | Input/Output: [(-30 50 -10 -77) -77]
Test Case: 538 | Input/Output: [(86 58 21 -48) -48]
Test Case: 539 | Input/Output: [(-88 28 37 47) -88]
Test Case: 540 | Input/Output: [(62 -92 89 44) -92]
Test Case: 541 | Input/Output: [(-51 14 -29 -89) -89]
Test Case: 542 | Input/Output: [(-73 68 -71 -9) -73]
Test Case: 543 | Input/Output: [(47 -46 93 57) -46]
Test Case: 544 | Input/Output: [(54 -29 88 73) -29]
Test Case: 545 | Input/Output: [(79 20 68 -73) -73]
Test Case: 546 | Input/Output: [(-56 28 -100 96) -100]
Test Case: 547 | Input/Output: [(-72 72 -60 -97) -97]
Test Case: 548 | Input/Output: [(46 17 -98 -83) -98]
Test Case: 549 | Input/Output: [(63 56 84 -17) -17]
Test Case: 550 | Input/Output: [(72 13 -64 -67) -67]
Test Case: 551 | Input/Output: [(41 98 68 -59) -59]
Test Case: 552 | Input/Output: [(-71 -65 57 -21) -71]
Test Case: 553 | Input/Output: [(16 -24 -11 1) -24]
Test Case: 554 | Input/Output: [(34 -82 -21 -1) -82]
Test Case: 555 | Input/Output: [(-13 -76 -98 25) -98]
Test Case: 556 | Input/Output: [(-93 -66 65 -69) -93]
Test Case: 557 | Input/Output: [(19 -100 -85 -47) -100]
Test Case: 558 | Input/Output: [(17 -43 46 33) -43]
Test Case: 559 | Input/Output: [(-12 -13 44 39) -13]
Test Case: 560 | Input/Output: [(23 19 26 53) 19]
Test Case: 561 | Input/Output: [(-27 -91 -88 20) -91]
Test Case: 562 | Input/Output: [(-39 88 64 75) -39]
Test Case: 563 | Input/Output: [(-84 23 -19 -59) -84]
Test Case: 564 | Input/Output: [(12 83 -51 48) -51]
Test Case: 565 | Input/Output: [(-21 16 -19 43) -21]
Test Case: 566 | Input/Output: [(-76 54 86 -12) -76]
Test Case: 567 | Input/Output: [(77 27 24 -72) -72]
Test Case: 568 | Input/Output: [(48 45 62 -71) -71]
Test Case: 569 | Input/Output: [(60 81 0 54) 0]
Test Case: 570 | Input/Output: [(-69 67 9 94) -69]
Test Case: 571 | Input/Output: [(-5 74 37 -41) -41]
Test Case: 572 | Input/Output: [(3 17 91 45) 3]
Test Case: 573 | Input/Output: [(68 -8 -71 65) -71]
Test Case: 574 | Input/Output: [(-70 48 -54 -62) -70]
Test Case: 575 | Input/Output: [(66 -83 47 -66) -83]
Test Case: 576 | Input/Output: [(-78 88 -71 39) -78]
Test Case: 577 | Input/Output: [(-73 -8 57 24) -73]
Test Case: 578 | Input/Output: [(7 59 -31 27) -31]
Test Case: 579 | Input/Output: [(6 35 31 -28) -28]
Test Case: 580 | Input/Output: [(-37 -25 -94 -59) -94]
Test Case: 581 | Input/Output: [(37 31 38 -92) -92]
Test Case: 582 | Input/Output: [(33 26 35 80) 26]
Test Case: 583 | Input/Output: [(-59 -7 -90 95) -90]
Test Case: 584 | Input/Output: [(-93 -84 19 -36) -93]
Test Case: 585 | Input/Output: [(29 10 2 -3) -3]
Test Case: 586 | Input/Output: [(-27 -66 10 32) -66]
Test Case: 587 | Input/Output: [(53 -57 -89 49) -89]
Test Case: 588 | Input/Output: [(-48 -6 87 82) -48]
Test Case: 589 | Input/Output: [(-68 -58 77 -49) -68]
Test Case: 590 | Input/Output: [(-40 -70 -19 -61) -70]
Test Case: 591 | Input/Output: [(-85 -18 -6 21) -85]
Test Case: 592 | Input/Output: [(-59 -48 6 93) -59]
Test Case: 593 | Input/Output: [(-52 -32 22 14) -52]
Test Case: 594 | Input/Output: [(-91 -12 -14 13) -91]
Test Case: 595 | Input/Output: [(-42 37 68 -48) -48]
Test Case: 596 | Input/Output: [(-7 -18 -63 -41) -63]
Test Case: 597 | Input/Output: [(31 76 41 100) 31]
Test Case: 598 | Input/Output: [(77 39 92 23) 23]
Test Case: 599 | Input/Output: [(92 -94 -58 -30) -94]
Test Case: 600 | Input/Output: [(-5 2 -31 75) -31]
Test Case: 601 | Input/Output: [(94 -40 91 75) -40]
Test Case: 602 | Input/Output: [(77 33 -20 -6) -20]
Test Case: 603 | Input/Output: [(1 26 89 55) 1]
Test Case: 604 | Input/Output: [(69 -53 34 -87) -87]
Test Case: 605 | Input/Output: [(-65 -60 19 -14) -65]
Test Case: 606 | Input/Output: [(30 32 -35 -10) -35]
Test Case: 607 | Input/Output: [(-32 19 83 -31) -32]
Test Case: 608 | Input/Output: [(75 -61 -60 -56) -61]
Test Case: 609 | Input/Output: [(-63 -72 -84 -69) -84]
Test Case: 610 | Input/Output: [(94 86 66 -39) -39]
Test Case: 611 | Input/Output: [(4 18 -84 60) -84]
Test Case: 612 | Input/Output: [(36 70 76 -21) -21]
Test Case: 613 | Input/Output: [(-70 -46 91 76) -70]
Test Case: 614 | Input/Output: [(94 10 -25 -50) -50]
Test Case: 615 | Input/Output: [(95 30 -40 44) -40]
Test Case: 616 | Input/Output: [(-44 -53 -79 -31) -79]
Test Case: 617 | Input/Output: [(-4 -43 90 -11) -43]
Test Case: 618 | Input/Output: [(-62 82 -29 -72) -72]
Test Case: 619 | Input/Output: [(-48 -46 79 -37) -48]
Test Case: 620 | Input/Output: [(40 22 -59 100) -59]
Test Case: 621 | Input/Output: [(-32 90 -20 -75) -75]
Test Case: 622 | Input/Output: [(95 -47 -42 82) -47]
Test Case: 623 | Input/Output: [(67 -90 -5 3) -90]
Test Case: 624 | Input/Output: [(79 36 26 15) 15]
Test Case: 625 | Input/Output: [(-95 1 -31 -98) -98]
Test Case: 626 | Input/Output: [(0 -39 93 -92) -92]
Test Case: 627 | Input/Output: [(80 -93 59 -8) -93]
Test Case: 628 | Input/Output: [(80 -23 -34 -83) -83]
Test Case: 629 | Input/Output: [(-17 -61 -15 -82) -82]
Test Case: 630 | Input/Output: [(-26 57 -80 21) -80]
Test Case: 631 | Input/Output: [(-60 37 81 35) -60]
Test Case: 632 | Input/Output: [(11 35 83 76) 11]
Test Case: 633 | Input/Output: [(42 -95 74 -87) -95]
Test Case: 634 | Input/Output: [(40 66 -33 -6) -33]
Test Case: 635 | Input/Output: [(13 -93 -18 62) -93]
Test Case: 636 | Input/Output: [(55 -50 -15 73) -50]
Test Case: 637 | Input/Output: [(100 45 72 -42) -42]
Test Case: 638 | Input/Output: [(46 29 -12 0) -12]
Test Case: 639 | Input/Output: [(-29 17 14 -70) -70]
Test Case: 640 | Input/Output: [(-33 50 -93 27) -93]
Test Case: 641 | Input/Output: [(-51 52 -2 -3) -51]
Test Case: 642 | Input/Output: [(96 21 -13 63) -13]
Test Case: 643 | Input/Output: [(27 -46 36 75) -46]
Test Case: 644 | Input/Output: [(-52 24 47 63) -52]
Test Case: 645 | Input/Output: [(-62 -90 98 -52) -90]
Test Case: 646 | Input/Output: [(-32 -45 96 -53) -53]
Test Case: 647 | Input/Output: [(97 -45 -37 -52) -52]
Test Case: 648 | Input/Output: [(-46 -93 76 46) -93]
Test Case: 649 | Input/Output: [(100 -56 -7 96) -56]
Test Case: 650 | Input/Output: [(-64 4 -84 -91) -91]
Test Case: 651 | Input/Output: [(48 -62 39 82) -62]
Test Case: 652 | Input/Output: [(34 -15 -73 60) -73]
Test Case: 653 | Input/Output: [(-41 -63 -53 -31) -63]
Test Case: 654 | Input/Output: [(-17 11 63 -91) -91]
Test Case: 655 | Input/Output: [(67 -79 88 80) -79]
Test Case: 656 | Input/Output: [(33 -56 90 -73) -73]
Test Case: 657 | Input/Output: [(90 5 -33 31) -33]
Test Case: 658 | Input/Output: [(18 -55 81 16) -55]
Test Case: 659 | Input/Output: [(20 62 -100 -81) -100]
Test Case: 660 | Input/Output: [(-46 96 27 -30) -46]
Test Case: 661 | Input/Output: [(-90 -60 -73 16) -90]
Test Case: 662 | Input/Output: [(63 -54 70 -99) -99]
Test Case: 663 | Input/Output: [(-24 -24 12 -46) -46]
Test Case: 664 | Input/Output: [(39 -85 -29 46) -85]
Test Case: 665 | Input/Output: [(88 40 40 -23) -23]
Test Case: 666 | Input/Output: [(26 -76 42 -23) -76]
Test Case: 667 | Input/Output: [(73 38 50 -83) -83]
Test Case: 668 | Input/Output: [(72 37 -7 -65) -65]
Test Case: 669 | Input/Output: [(8 47 12 -59) -59]
Test Case: 670 | Input/Output: [(-73 85 95 -12) -73]
Test Case: 671 | Input/Output: [(-30 -10 -40 55) -40]
Test Case: 672 | Input/Output: [(-84 -60 -73 7) -84]
Test Case: 673 | Input/Output: [(30 28 43 -96) -96]
Test Case: 674 | Input/Output: [(-8 -70 -10 27) -70]
Test Case: 675 | Input/Output: [(14 72 96 54) 14]
Test Case: 676 | Input/Output: [(-21 93 -44 38) -44]
Test Case: 677 | Input/Output: [(-71 -83 -64 38) -83]
Test Case: 678 | Input/Output: [(-75 13 5 -19) -75]
Test Case: 679 | Input/Output: [(75 -72 90 0) -72]
Test Case: 680 | Input/Output: [(-66 34 31 -99) -99]
Test Case: 681 | Input/Output: [(35 -70 -80 -44) -80]
Test Case: 682 | Input/Output: [(4 -18 95 64) -18]
Test Case: 683 | Input/Output: [(-28 -32 35 -15) -32]
Test Case: 684 | Input/Output: [(28 65 56 -59) -59]
Test Case: 685 | Input/Output: [(77 -36 8 47) -36]
Test Case: 686 | Input/Output: [(9 -59 -23 61) -59]
Test Case: 687 | Input/Output: [(98 87 87 20) 20]
Test Case: 688 | Input/Output: [(-53 31 37 -70) -70]
Test Case: 689 | Input/Output: [(58 19 64 72) 19]
Test Case: 690 | Input/Output: [(40 72 -94 37) -94]
Test Case: 691 | Input/Output: [(76 -93 90 57) -93]
Test Case: 692 | Input/Output: [(-39 -98 26 -93) -98]
Test Case: 693 | Input/Output: [(71 3 4 69) 3]
Test Case: 694 | Input/Output: [(19 93 -49 33) -49]
Test Case: 695 | Input/Output: [(24 85 20 -7) -7]
Test Case: 696 | Input/Output: [(29 71 72 -75) -75]
Test Case: 697 | Input/Output: [(-73 -24 26 28) -73]
Test Case: 698 | Input/Output: [(64 -25 30 -79) -79]
Test Case: 699 | Input/Output: [(-63 2 11 34) -63]
Test Case: 700 | Input/Output: [(-17 45 19 73) -17]
Test Case: 701 | Input/Output: [(91 61 78 75) 61]
Test Case: 702 | Input/Output: [(-30 -77 -69 41) -77]
Test Case: 703 | Input/Output: [(47 52 -92 -7) -92]
Test Case: 704 | Input/Output: [(-21 25 66 17) -21]
Test Case: 705 | Input/Output: [(-60 -11 23 35) -60]
Test Case: 706 | Input/Output: [(3 43 65 64) 3]
Test Case: 707 | Input/Output: [(-37 -34 96 -96) -96]
Test Case: 708 | Input/Output: [(-98 98 95 82) -98]
Test Case: 709 | Input/Output: [(28 97 -31 -53) -53]
Test Case: 710 | Input/Output: [(-40 -35 87 69) -40]
Test Case: 711 | Input/Output: [(-25 81 29 42) -25]
Test Case: 712 | Input/Output: [(-37 -74 -85 65) -85]
Test Case: 713 | Input/Output: [(58 -68 -49 -27) -68]
Test Case: 714 | Input/Output: [(88 99 -23 -5) -23]
Test Case: 715 | Input/Output: [(-95 -90 40 74) -95]
Test Case: 716 | Input/Output: [(-27 70 73 15) -27]
Test Case: 717 | Input/Output: [(-26 -27 -27 67) -27]
Test Case: 718 | Input/Output: [(-30 42 80 -24) -30]
Test Case: 719 | Input/Output: [(-77 -21 30 7) -77]
Test Case: 720 | Input/Output: [(48 -85 -65 -68) -85]
Test Case: 721 | Input/Output: [(82 -1 -5 -64) -64]
Test Case: 722 | Input/Output: [(-6 -17 91 69) -17]
Test Case: 723 | Input/Output: [(-65 -52 -47 82) -65]
Test Case: 724 | Input/Output: [(97 52 59 16) 16]
Test Case: 725 | Input/Output: [(13 -83 57 93) -83]
Test Case: 726 | Input/Output: [(-68 -16 94 64) -68]
Test Case: 727 | Input/Output: [(12 -74 -19 -100) -100]
Test Case: 728 | Input/Output: [(95 34 -82 24) -82]
Test Case: 729 | Input/Output: [(69 42 -89 -26) -89]
Test Case: 730 | Input/Output: [(-98 66 -26 74) -98]
Test Case: 731 | Input/Output: [(-59 53 37 -38) -59]
Test Case: 732 | Input/Output: [(52 -79 65 4) -79]
Test Case: 733 | Input/Output: [(-32 -48 -36 16) -48]
Test Case: 734 | Input/Output: [(90 55 -91 -4) -91]
Test Case: 735 | Input/Output: [(32 55 -66 -64) -66]
Test Case: 736 | Input/Output: [(7 43 89 89) 7]
Test Case: 737 | Input/Output: [(-1 3 1 76) -1]
Test Case: 738 | Input/Output: [(-3 -32 -79 25) -79]
Test Case: 739 | Input/Output: [(-24 62 58 -100) -100]
Test Case: 740 | Input/Output: [(-18 -2 100 -94) -94]
Test Case: 741 | Input/Output: [(69 -6 -17 -55) -55]
Test Case: 742 | Input/Output: [(-22 -40 -84 -91) -91]
Test Case: 743 | Input/Output: [(-76 97 46 23) -76]
Test Case: 744 | Input/Output: [(-97 -48 -52 29) -97]
Test Case: 745 | Input/Output: [(69 35 27 -37) -37]
Test Case: 746 | Input/Output: [(52 -29 93 -41) -41]
Test Case: 747 | Input/Output: [(-51 66 4 7) -51]
Test Case: 748 | Input/Output: [(9 47 88 -28) -28]
Test Case: 749 | Input/Output: [(67 40 81 -42) -42]
Test Case: 750 | Input/Output: [(87 64 -63 14) -63]
Test Case: 751 | Input/Output: [(-61 14 -93 -26) -93]
Test Case: 752 | Input/Output: [(89 76 -72 -65) -72]
Test Case: 753 | Input/Output: [(9 -30 -46 -27) -46]
Test Case: 754 | Input/Output: [(-51 47 62 3) -51]
Test Case: 755 | Input/Output: [(-33 9 13 -64) -64]
Test Case: 756 | Input/Output: [(0 -3 100 6) -3]
Test Case: 757 | Input/Output: [(-2 23 -30 -51) -51]
Test Case: 758 | Input/Output: [(-51 -16 -68 33) -68]
Test Case: 759 | Input/Output: [(-31 94 24 9) -31]
Test Case: 760 | Input/Output: [(14 79 30 -59) -59]
Test Case: 761 | Input/Output: [(-26 58 75 6) -26]
Test Case: 762 | Input/Output: [(23 -1 74 -67) -67]
Test Case: 763 | Input/Output: [(30 -76 -36 -79) -79]
Test Case: 764 | Input/Output: [(-66 34 -23 21) -66]
Test Case: 765 | Input/Output: [(-24 90 59 21) -24]
Test Case: 766 | Input/Output: [(-74 36 -76 52) -76]
Test Case: 767 | Input/Output: [(-21 -11 -57 -54) -57]
Test Case: 768 | Input/Output: [(99 -63 -66 -23) -66]
Test Case: 769 | Input/Output: [(-91 40 -17 90) -91]
Test Case: 770 | Input/Output: [(7 94 96 18) 7]
Test Case: 771 | Input/Output: [(1 -55 0 -43) -55]
Test Case: 772 | Input/Output: [(-81 -23 20 -93) -93]
Test Case: 773 | Input/Output: [(-6 48 -15 74) -15]
Test Case: 774 | Input/Output: [(89 -69 8 -33) -69]
Test Case: 775 | Input/Output: [(-81 -86 -60 51) -86]
Test Case: 776 | Input/Output: [(18 46 94 59) 18]
Test Case: 777 | Input/Output: [(-48 19 13 18) -48]
Test Case: 778 | Input/Output: [(-10 23 -92 -45) -92]
Test Case: 779 | Input/Output: [(32 -9 15 46) -9]
Test Case: 780 | Input/Output: [(34 15 60 -30) -30]
Test Case: 781 | Input/Output: [(29 16 9 87) 9]
Test Case: 782 | Input/Output: [(11 -66 -14 27) -66]
Test Case: 783 | Input/Output: [(8 -6 -68 -27) -68]
Test Case: 784 | Input/Output: [(-71 19 63 -77) -77]
Test Case: 785 | Input/Output: [(-85 -36 2 -38) -85]
Test Case: 786 | Input/Output: [(72 82 -13 14) -13]
Test Case: 787 | Input/Output: [(97 44 73 51) 44]
Test Case: 788 | Input/Output: [(-72 -63 10 -73) -73]
Test Case: 789 | Input/Output: [(-80 94 77 -57) -80]
Test Case: 790 | Input/Output: [(1 34 -23 -99) -99]
Test Case: 791 | Input/Output: [(29 86 6 -87) -87]
Test Case: 792 | Input/Output: [(63 -89 -94 -41) -94]
Test Case: 793 | Input/Output: [(14 79 25 -83) -83]
Test Case: 794 | Input/Output: [(41 50 12 26) 12]
Test Case: 795 | Input/Output: [(-62 -42 7 -77) -77]
Test Case: 796 | Input/Output: [(73 26 -36 8) -36]
Test Case: 797 | Input/Output: [(-11 56 -8 -46) -46]
Test Case: 798 | Input/Output: [(61 54 34 16) 16]
Test Case: 799 | Input/Output: [(-62 40 -15 77) -62]
Test Case: 800 | Input/Output: [(14 67 -16 5) -16]
Test Case: 801 | Input/Output: [(82 -62 29 35) -62]
Test Case: 802 | Input/Output: [(24 -46 -13 -50) -50]
Test Case: 803 | Input/Output: [(18 55 97 61) 18]
Test Case: 804 | Input/Output: [(-97 -16 63 -75) -97]
Test Case: 805 | Input/Output: [(21 -79 -74 8) -79]
Test Case: 806 | Input/Output: [(-21 -63 -10 63) -63]
Test Case: 807 | Input/Output: [(-77 -81 -26 -66) -81]
Test Case: 808 | Input/Output: [(19 -68 10 -3) -68]
Test Case: 809 | Input/Output: [(-25 92 30 64) -25]
Test Case: 810 | Input/Output: [(-43 73 18 36) -43]
Test Case: 811 | Input/Output: [(-84 39 -80 26) -84]
Test Case: 812 | Input/Output: [(-64 34 32 -80) -80]
Test Case: 813 | Input/Output: [(46 -14 97 39) -14]
Test Case: 814 | Input/Output: [(71 65 -38 -28) -38]
Test Case: 815 | Input/Output: [(4 27 70 43) 4]
Test Case: 816 | Input/Output: [(2 -53 75 88) -53]
Test Case: 817 | Input/Output: [(73 -72 24 36) -72]
Test Case: 818 | Input/Output: [(-28 71 -71 4) -71]
Test Case: 819 | Input/Output: [(7 -77 -89 76) -89]
Test Case: 820 | Input/Output: [(82 -100 -57 28) -100]
Test Case: 821 | Input/Output: [(19 -80 -15 38) -80]
Test Case: 822 | Input/Output: [(16 21 -44 -46) -46]
Test Case: 823 | Input/Output: [(-22 53 -83 53) -83]
Test Case: 824 | Input/Output: [(-15 -11 -67 6) -67]
Test Case: 825 | Input/Output: [(75 24 -2 6) -2]
Test Case: 826 | Input/Output: [(-9 78 -33 45) -33]
Test Case: 827 | Input/Output: [(-43 36 -49 7) -49]
Test Case: 828 | Input/Output: [(-98 -1 37 -24) -98]
Test Case: 829 | Input/Output: [(11 56 -38 -66) -66]
Test Case: 830 | Input/Output: [(-94 -33 -79 -29) -94]
Test Case: 831 | Input/Output: [(-72 -99 -79 18) -99]
Test Case: 832 | Input/Output: [(-72 -79 9 90) -79]
Test Case: 833 | Input/Output: [(-60 51 44 100) -60]
Test Case: 834 | Input/Output: [(-60 25 -88 -21) -88]
Test Case: 835 | Input/Output: [(-81 47 -29 -67) -81]
Test Case: 836 | Input/Output: [(35 42 -11 -40) -40]
Test Case: 837 | Input/Output: [(25 20 -81 39) -81]
Test Case: 838 | Input/Output: [(-49 -48 70 -57) -57]
Test Case: 839 | Input/Output: [(-26 -34 -4 89) -34]
Test Case: 840 | Input/Output: [(-73 76 -34 79) -73]
Test Case: 841 | Input/Output: [(-6 53 67 12) -6]
Test Case: 842 | Input/Output: [(68 62 -75 -60) -75]
Test Case: 843 | Input/Output: [(-13 17 -7 28) -13]
Test Case: 844 | Input/Output: [(-97 -9 49 74) -97]
Test Case: 845 | Input/Output: [(-50 -26 98 -23) -50]
Test Case: 846 | Input/Output: [(31 -82 -79 70) -82]
Test Case: 847 | Input/Output: [(-36 -43 -2 41) -43]
Test Case: 848 | Input/Output: [(-53 -56 -79 64) -79]
Test Case: 849 | Input/Output: [(-65 87 23 -77) -77]
Test Case: 850 | Input/Output: [(-21 53 25 -64) -64]
Test Case: 851 | Input/Output: [(-83 31 64 30) -83]
Test Case: 852 | Input/Output: [(-76 80 -12 -75) -76]
Test Case: 853 | Input/Output: [(64 -54 75 76) -54]
Test Case: 854 | Input/Output: [(18 52 76 -41) -41]
Test Case: 855 | Input/Output: [(49 20 48 -44) -44]
Test Case: 856 | Input/Output: [(57 -76 87 93) -76]
Test Case: 857 | Input/Output: [(-91 -40 73 -17) -91]
Test Case: 858 | Input/Output: [(-80 6 81 -22) -80]
Test Case: 859 | Input/Output: [(-45 -41 -72 37) -72]
Test Case: 860 | Input/Output: [(-100 6 57 60) -100]
Test Case: 861 | Input/Output: [(-69 -99 -50 -56) -99]
Test Case: 862 | Input/Output: [(9 -31 30 -63) -63]
Test Case: 863 | Input/Output: [(47 75 -45 -91) -91]
Test Case: 864 | Input/Output: [(75 81 -1 97) -1]
Test Case: 865 | Input/Output: [(-95 -22 -99 -74) -99]
Test Case: 866 | Input/Output: [(61 -18 43 -2) -18]
Test Case: 867 | Input/Output: [(91 -32 -36 -21) -36]
Test Case: 868 | Input/Output: [(-15 -57 7 -24) -57]
Test Case: 869 | Input/Output: [(8 -71 7 57) -71]
Test Case: 870 | Input/Output: [(-8 -42 -86 58) -86]
Test Case: 871 | Input/Output: [(82 9 39 28) 9]
Test Case: 872 | Input/Output: [(12 66 53 -17) -17]
Test Case: 873 | Input/Output: [(-33 60 9 -61) -61]
Test Case: 874 | Input/Output: [(-81 25 26 49) -81]
Test Case: 875 | Input/Output: [(-77 15 71 -69) -77]
Test Case: 876 | Input/Output: [(-85 10 -98 -28) -98]
Test Case: 877 | Input/Output: [(45 31 -82 -75) -82]
Test Case: 878 | Input/Output: [(31 -49 66 -33) -49]
Test Case: 879 | Input/Output: [(22 79 -49 -1) -49]
Test Case: 880 | Input/Output: [(80 91 33 -50) -50]
Test Case: 881 | Input/Output: [(58 13 41 78) 13]
Test Case: 882 | Input/Output: [(-32 67 4 96) -32]
Test Case: 883 | Input/Output: [(-28 -78 78 17) -78]
Test Case: 884 | Input/Output: [(78 -18 8 2) -18]
Test Case: 885 | Input/Output: [(40 8 64 -50) -50]
Test Case: 886 | Input/Output: [(99 18 4 -2) -2]
Test Case: 887 | Input/Output: [(91 35 44 53) 35]
Test Case: 888 | Input/Output: [(-35 -84 70 -67) -84]
Test Case: 889 | Input/Output: [(-84 -3 -1 36) -84]
Test Case: 890 | Input/Output: [(-76 -64 96 45) -76]
Test Case: 891 | Input/Output: [(97 10 38 59) 10]
Test Case: 892 | Input/Output: [(-72 -66 23 -18) -72]
Test Case: 893 | Input/Output: [(-11 60 82 15) -11]
Test Case: 894 | Input/Output: [(5 -3 79 98) -3]
Test Case: 895 | Input/Output: [(-82 -13 -67 -58) -82]
Test Case: 896 | Input/Output: [(8 -28 -67 -56) -67]
Test Case: 897 | Input/Output: [(-47 90 -67 23) -67]
Test Case: 898 | Input/Output: [(-48 60 -69 66) -69]
Test Case: 899 | Input/Output: [(43 -44 -72 55) -72]
Test Case: 900 | Input/Output: [(84 -87 -100 -88) -100]
Test Case: 901 | Input/Output: [(79 -11 -13 -58) -58]
Test Case: 902 | Input/Output: [(-99 -5 -7 39) -99]
Test Case: 903 | Input/Output: [(-32 -91 -99 23) -99]
Test Case: 904 | Input/Output: [(-73 -85 73 -20) -85]
Test Case: 905 | Input/Output: [(13 37 62 47) 13]
Test Case: 906 | Input/Output: [(47 -30 20 92) -30]
Test Case: 907 | Input/Output: [(-45 74 74 -81) -81]
Test Case: 908 | Input/Output: [(-17 44 39 58) -17]
Test Case: 909 | Input/Output: [(7 4 -74 59) -74]
Test Case: 910 | Input/Output: [(53 31 -11 17) -11]
Test Case: 911 | Input/Output: [(72 87 -99 -36) -99]
Test Case: 912 | Input/Output: [(-6 53 -32 38) -32]
Test Case: 913 | Input/Output: [(87 -21 -3 -27) -27]
Test Case: 914 | Input/Output: [(-48 59 91 -64) -64]
Test Case: 915 | Input/Output: [(34 -94 42 -53) -94]
Test Case: 916 | Input/Output: [(44 91 -2 82) -2]
Test Case: 917 | Input/Output: [(53 56 20 -11) -11]
Test Case: 918 | Input/Output: [(77 -34 9 -3) -34]
Test Case: 919 | Input/Output: [(64 98 65 -38) -38]
Test Case: 920 | Input/Output: [(7 -16 13 83) -16]
Test Case: 921 | Input/Output: [(84 27 -35 -59) -59]
Test Case: 922 | Input/Output: [(87 22 32 98) 22]
Test Case: 923 | Input/Output: [(51 -8 28 68) -8]
Test Case: 924 | Input/Output: [(87 89 -75 -3) -75]
Test Case: 925 | Input/Output: [(40 24 -90 -70) -90]
Test Case: 926 | Input/Output: [(36 -32 -54 -37) -54]
Test Case: 927 | Input/Output: [(9 -40 6 24) -40]
Test Case: 928 | Input/Output: [(-81 13 9 51) -81]
Test Case: 929 | Input/Output: [(-69 -92 -16 -94) -94]
Test Case: 930 | Input/Output: [(-50 -89 -56 23) -89]
Test Case: 931 | Input/Output: [(-84 91 -23 48) -84]
Test Case: 932 | Input/Output: [(64 -44 -98 56) -98]
Test Case: 933 | Input/Output: [(8 21 72 -59) -59]
Test Case: 934 | Input/Output: [(-86 -82 -64 -70) -86]
Test Case: 935 | Input/Output: [(-53 -57 89 -27) -57]
Test Case: 936 | Input/Output: [(-2 42 9 3) -2]
Test Case: 937 | Input/Output: [(-14 -17 -73 8) -73]
Test Case: 938 | Input/Output: [(-62 49 -18 71) -62]
Test Case: 939 | Input/Output: [(15 -77 -91 -70) -91]
Test Case: 940 | Input/Output: [(-83 76 2 -73) -83]
Test Case: 941 | Input/Output: [(41 39 98 -80) -80]
Test Case: 942 | Input/Output: [(-50 50 -15 -33) -50]
Test Case: 943 | Input/Output: [(-50 86 -53 94) -53]
Test Case: 944 | Input/Output: [(35 4 -90 93) -90]
Test Case: 945 | Input/Output: [(-86 100 20 -20) -86]
Test Case: 946 | Input/Output: [(87 15 41 -75) -75]
Test Case: 947 | Input/Output: [(-23 86 -44 -2) -44]
Test Case: 948 | Input/Output: [(-15 -67 66 17) -67]
Test Case: 949 | Input/Output: [(-47 77 -23 0) -47]
Test Case: 950 | Input/Output: [(-6 -1 -60 75) -60]
Test Case: 951 | Input/Output: [(63 -6 -46 12) -46]
Test Case: 952 | Input/Output: [(16 -85 -12 90) -85]
Test Case: 953 | Input/Output: [(53 18 68 18) 18]
Test Case: 954 | Input/Output: [(8 -74 33 77) -74]
Test Case: 955 | Input/Output: [(-11 2 -51 26) -51]
Test Case: 956 | Input/Output: [(-29 25 65 -96) -96]
Test Case: 957 | Input/Output: [(44 -78 60 -21) -78]
Test Case: 958 | Input/Output: [(-87 90 -15 86) -87]
Test Case: 959 | Input/Output: [(28 46 -54 -80) -80]
Test Case: 960 | Input/Output: [(41 52 88 66) 41]
Test Case: 961 | Input/Output: [(-48 -28 -7 -41) -48]
Test Case: 962 | Input/Output: [(25 -71 58 72) -71]
Test Case: 963 | Input/Output: [(-58 -61 17 -84) -84]
Test Case: 964 | Input/Output: [(42 -71 84 -78) -78]
Test Case: 965 | Input/Output: [(58 13 33 35) 13]
Test Case: 966 | Input/Output: [(28 76 -67 -23) -67]
Test Case: 967 | Input/Output: [(11 -10 -81 28) -81]
Test Case: 968 | Input/Output: [(-66 91 -33 -20) -66]
Test Case: 969 | Input/Output: [(9 -87 -56 5) -87]
Test Case: 970 | Input/Output: [(-44 -67 -7 18) -67]
Test Case: 971 | Input/Output: [(42 -28 44 -13) -28]
Test Case: 972 | Input/Output: [(67 91 -73 23) -73]
Test Case: 973 | Input/Output: [(-50 -52 39 14) -52]
Test Case: 974 | Input/Output: [(-63 0 -39 73) -63]
Test Case: 975 | Input/Output: [(18 -49 -70 97) -70]
Test Case: 976 | Input/Output: [(-92 81 91 -93) -93]
Test Case: 977 | Input/Output: [(-36 62 20 -37) -37]
Test Case: 978 | Input/Output: [(59 -84 8 75) -84]
Test Case: 979 | Input/Output: [(-94 77 -63 -91) -94]
Test Case: 980 | Input/Output: [(23 53 88 86) 23]
Test Case: 981 | Input/Output: [(-61 -20 21 -46) -61]
Test Case: 982 | Input/Output: [(-46 -45 51 -82) -82]
Test Case: 983 | Input/Output: [(48 30 -53 -23) -53]
Test Case: 984 | Input/Output: [(-79 -81 95 61) -81]
Test Case: 985 | Input/Output: [(30 53 -69 56) -69]
Test Case: 986 | Input/Output: [(73 77 44 -15) -15]
Test Case: 987 | Input/Output: [(73 81 -67 -56) -67]
Test Case: 988 | Input/Output: [(-2 82 27 -91) -91]
Test Case: 989 | Input/Output: [(27 -97 31 23) -97]
Test Case: 990 | Input/Output: [(-7 19 14 60) -7]
Test Case: 991 | Input/Output: [(-79 39 56 -85) -85]
Test Case: 992 | Input/Output: [(81 -95 71 34) -95]
Test Case: 993 | Input/Output: [(-82 -22 -96 -53) -96]
Test Case: 994 | Input/Output: [(-56 -13 -4 17) -56]
Test Case: 995 | Input/Output: [(-69 5 -82 4) -82]
Test Case: 996 | Input/Output: [(13 62 -59 10) -59]
Test Case: 997 | Input/Output: [(-52 -75 76 50) -75]
Test Case: 998 | Input/Output: [(-17 -35 8 94) -35]
Test Case: 999 | Input/Output: [(47 29 -5 5) -5]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -42 20 104 36 123 117 -87 -104 58 32 112 81 38 93 49 -117
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-54 -54 -54 -20] -54] [[17 -35 17 17] -35] [[79 79 79 -39] -39] [[84 -97 -97 -97] -97] [[-85 -29 -85 -85] -85] [[-83 -58 -83 -83] -83] [[47 -6 -6 -6] -6] [[-20 54 54 54] -20] [[-39 -39 -39 38] -39] [[-64 -64 -64 36] -64] [(-73 -73 -73 -73) -73] [(-64 -64 -64 -64) -64] [(74 74 74 74) 74] [(-30 -30 -30 -30) -30] [(-99 -99 -99 -99) -99] [(21 82 90 51) 21] [(27 20 14 29) 14] [(38 89 63 89) 38] [(65 4 86 47) 4] [(88 95 97 54) 54] [(51 35 20 93) 20] [(31 8 28 94) 8] [(52 13 4 74) 4] [(74 100 43 74) 43] [(52 80 90 86) 52] [(34 54 35 73) 34] [(39 84 60 59) 39] [(65 62 22 52) 22] [(74 89 81 74) 74] [(15 63 92 57) 15] [(3 79 30 20) 3] [(89 38 74 74) 38] [(88 92 4 55) 4] [(36 8 61 46) 8] [(43 25 23 87) 23] [(-19 33 -32 100) -32] [(66 40 70 -18) -18] [(22 21 75 -26) -26] [(69 16 14 17) 14] [(-77 -92 -82 58) -92] [(-88 -53 2 -47) -88] [(61 -56 -12 -47) -56] [(-36 96 -10 -83) -83] [(97 -1 -27 -4) -27] [(-47 30 46 20) -47] [(8 -65 -14 82) -65] [(83 63 41 25) 25] [(-72 -75 25 -31) -75] [(-60 -73 59 23) -73] [(-35 7 64 -9) -35] [(-77 -5 20 47) -77] [(0 56 -60 1) -60] [(61 -90 -71 -84) -90] [(-63 46 -52 15) -63] [(-43 -33 -31 87) -43] [(93 48 0 -3) -3] [(-14 -18 13 88) -18] [(73 85 1 80) 1] [(-91 -4 -52 -17) -91] [(-4 45 -23 3) -23] [(40 67 47 -42) -42] [(97 79 34 -24) -24] [(-82 -21 -10 -44) -82] [(30 -32 -82 -29) -82] [(-23 -83 -5 98) -83] [(92 25 -54 56) -54] [(-61 62 26 -36) -61] [(87 92 -75 44) -75] [(-71 94 67 23) -71] [(95 -58 49 -51) -58] [(27 85 93 54) 27] [(-71 -5 -66 36) -71] [(-13 66 91 73) -13] [(-57 -56 -30 -45) -57] [(-60 -60 -61 76) -61] [(24 -7 19 49) -7] [(88 -84 -91 -19) -91] [(21 -37 77 84) -37] [(42 96 -10 -68) -68] [(72 90 27 -29) -29] [(-40 31 61 -28) -40] [(98 35 88 73) 35] [(-93 91 36 53) -93] [(-19 -77 -93 -11) -93] [(82 -86 -80 87) -86] [(51 -90 -82 36) -90] [(71 58 -61 -17) -61] [(-15 -96 -78 -41) -96] [(1 52 8 62) 1] [(-69 10 -11 -64) -69] [(-72 77 70 -94) -94] [(16 -48 57 -34) -48] [(-82 31 3 -19) -82] [(34 -76 88 -27) -76] [(34 99 -7 -76) -76])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: 84                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: 47                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 27                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 65                 
Correct output: 54                  | Program output: 88                 
Correct output: 20                  | Program output: 51                 
Correct output: 8                   | Program output: 31                 
Correct output: 4                   | Program output: 52                 
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 65                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 88                 
Correct output: 8                   | Program output: 36                 
Correct output: 23                  | Program output: 43                 
Correct output: -32                 | Program output: -19                
Correct output: -18                 | Program output: 66                 
Correct output: -26                 | Program output: 22                 
Correct output: 14                  | Program output: 69                 
Correct output: -92                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: 61                 
Correct output: -83                 | Program output: -36                
Correct output: -27                 | Program output: 97                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 8                  
Correct output: 25                  | Program output: 83                 
Correct output: -75                 | Program output: -72                
Correct output: -73                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: 61                 
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: 93                 
Correct output: -18                 | Program output: -14                
Correct output: 1                   | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -4                 
Correct output: -42                 | Program output: 40                 
Correct output: -24                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: 30                 
Correct output: -83                 | Program output: -23                
Correct output: -54                 | Program output: 92                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: 87                 
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: 24                 
Correct output: -91                 | Program output: 88                 
Correct output: -37                 | Program output: 21                 
Correct output: -68                 | Program output: 42                 
Correct output: -29                 | Program output: 72                 
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 98                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -19                
Correct output: -86                 | Program output: 82                 
Correct output: -90                 | Program output: 51                 
Correct output: -61                 | Program output: 71                 
Correct output: -96                 | Program output: -15                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -72                
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: 34                 
Correct output: -76                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_532} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (exec_y (exec_do*times (exec_dup (integer_stackdepth exec_rot (boolean_dup_times exec_dup_items integer_max exec_if (boolean_frominteger print_boolean exec_rot (exec_yank integer_eq boolean_invert_second_then_and exec_shove (exec_empty) exec_shove () exec_flush exec_eq integer_min) (boolean_yank exec_pop () integer_mod) (in1 tag_boolean_532 print_integer exec_k_when_autoconstructing (exec_dup_times (exec_eq) integer_mod print_exec (exec_rot (exec_do*range (boolean_xor exec_s_when_autoconstructing () (integer_shove integer_fromboolean boolean_invert_first_then_and) (boolean_stackdepth integer_gt integer_stackdepth) integer_min)) () ())) ())) ()) () ()))))
Lexicase best errors: [1 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 69
Percent parens: 0.377
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_532} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (exec_y (exec_do*times (exec_dup (integer_stackdepth exec_rot (boolean_dup_times exec_dup_items integer_max exec_if (boolean_frominteger print_boolean exec_rot (exec_yank integer_eq boolean_invert_second_then_and exec_shove (exec_empty) exec_shove () exec_flush exec_eq integer_min) (boolean_yank exec_pop () integer_mod) (in1 tag_boolean_532 print_integer exec_k_when_autoconstructing (exec_dup_times (exec_eq) integer_mod print_exec (exec_rot (exec_do*range (boolean_xor exec_s_when_autoconstructing () (integer_shove integer_fromboolean boolean_invert_first_then_and) (boolean_stackdepth integer_gt integer_stackdepth) integer_min)) () ())) ())) ()) () ()))))
Zero cases best errors: [1 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 69
Percent parens: 0.377
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 5 8 10 4 4 4 5 4 1)
Population mean number of elite cases: 1.04
Count of perfect (error zero) individuals by case: (0 5 8 10 4 4 4 5 4 1)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_not} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not})
Best program: (boolean_not boolean_yank integer_shove boolean_yank integer_inc boolean_xor boolean_yank integer_shove in1 integer_mod print_boolean integer_sub print_integer integer_yankdup boolean_not)
Errors: [1 0 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 15
Size: 16
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 9.955
Median total errors in population: 10
Error averages by case: (1.0 0.995 0.992 0.99 0.996 0.996 0.996 0.995 0.996 0.999)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.1
Average program size in population (points): 70.4
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 465014
--- Timings ---
Current time: 1559314320399 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 32.1%
Fitness Testing:      1.7 seconds, 63.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 90                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 63                 
Correct output: 4                   | Program output: 86                 
Correct output: 54                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 43                  | Program output: 43                 
Correct output: 52                  | Program output: 90                 
Correct output: 34                  | Program output: 35                 
Correct output: 39                  | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: 74                  | Program output: 81                 
Correct output: 15                  | Program output: 92                 
Correct output: 3                   | Program output: 30                 
Correct output: 38                  | Program output: 74                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 61                 
Correct output: 23                  | Program output: 23                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 70                 
Correct output: -26                 | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: -92                 | Program output: -82                
Correct output: -88                 | Program output: 2                  
Correct output: -56                 | Program output: -12                
Correct output: -83                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -47                 | Program output: 46                 
Correct output: -65                 | Program output: -14                
Correct output: 25                  | Program output: 41                 
Correct output: -75                 | Program output: 25                 
Correct output: -73                 | Program output: 59                 
Correct output: -35                 | Program output: 64                 
Correct output: -77                 | Program output: 20                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -71                
Correct output: -63                 | Program output: -52                
Correct output: -43                 | Program output: -31                
Correct output: -3                  | Program output: 0                  
Correct output: -18                 | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -52                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 47                 
Correct output: -24                 | Program output: 34                 
Correct output: -82                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: 26                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: 67                 
Correct output: -58                 | Program output: 49                 
Correct output: 27                  | Program output: 93                 
Correct output: -71                 | Program output: -66                
Correct output: -13                 | Program output: 91                 
Correct output: -57                 | Program output: -30                
Correct output: -61                 | Program output: -61                
Correct output: -7                  | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -37                 | Program output: 77                 
Correct output: -68                 | Program output: -10                
Correct output: -29                 | Program output: 27                 
Correct output: -40                 | Program output: 61                 
Correct output: 35                  | Program output: 88                 
Correct output: -93                 | Program output: 36                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -80                
Correct output: -90                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -78                
Correct output: 1                   | Program output: 8                  
Correct output: -69                 | Program output: -11                
Correct output: -94                 | Program output: 70                 
Correct output: -48                 | Program output: 57                 
Correct output: -82                 | Program output: 3                  
Correct output: -76                 | Program output: 88                 
Correct output: -76                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Lexicase best program: (boolean_yankdup boolean_and boolean_pop integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod exec_stackdepth) (integer_fromboolean) (boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot)) print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank exec_when () boolean_swap integer_dup boolean_invert_first_then_and exec_dup_times () integer_empty boolean_shove in1 exec_do*range (in3 boolean_rot) boolean_invert_second_then_and print_integer integer_dup_times boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot (exec_yank) () (exec_yankdup integer_max boolean_not) boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt integer_sub print_integer boolean_xor exec_yankdup integer_gt) (boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush) exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and) exec_dup_times (exec_shove (exec_k () ())))))
Lexicase best errors: [1 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 101
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Zero cases best program: (boolean_yankdup boolean_and boolean_pop integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod exec_stackdepth) (integer_fromboolean) (boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot)) print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank exec_when () boolean_swap integer_dup boolean_invert_first_then_and exec_dup_times () integer_empty boolean_shove in1 exec_do*range (in3 boolean_rot) boolean_invert_second_then_and print_integer integer_dup_times boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot (exec_yank) () (exec_yankdup integer_max boolean_not) boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt integer_sub print_integer boolean_xor exec_yankdup integer_gt) (boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush) exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and) exec_dup_times (exec_shove (exec_k () ())))))
Zero cases best errors: [1 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 101
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 831 246 738 1000 248 1000 246 246)
Population mean number of elite cases: 6.55
Count of perfect (error zero) individuals by case: (0 0 831 246 738 0 248 0 246 246)
Population mean number of perfect (error zero) cases: 2.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Best program: (boolean_yankdup boolean_and boolean_pop integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod in3) (integer_fromboolean) (boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup boolean_invert_first_then_and exec_dup_times () integer_empty boolean_shove in1 exec_do*range (in3 boolean_rot) boolean_invert_second_then_and print_integer integer_dup_times boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot (exec_yank) () (exec_yankdup integer_max boolean_not) boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt integer_sub print_integer boolean_xor exec_yankdup integer_gt) (boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush) exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and) exec_dup_times (exec_shove (exec_k () ())))))
Errors: [1 1 0 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 77
Size: 101
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.445
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.169 0.754 0.262 1.0 0.752 1.0 0.754 0.754)
Error minima by case: (1 1 0 0 0 1 0 1 0 0)
Average genome size in population (length): 45.157
Average program size in population (points): 61.082
Average percent parens in population: 0.249
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.494
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.506
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.493
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 856990
--- Timings ---
Current time: 1559314322981 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.5 seconds, 48.5%
Fitness Testing:      2.2 seconds, 43.4%
Report:               0.3 seconds,  6.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 90                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 63                 
Correct output: 4                   | Program output: 86                 
Correct output: 54                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 43                  | Program output: 43                 
Correct output: 52                  | Program output: 90                 
Correct output: 34                  | Program output: 35                 
Correct output: 39                  | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: 74                  | Program output: 81                 
Correct output: 15                  | Program output: 92                 
Correct output: 3                   | Program output: 30                 
Correct output: 38                  | Program output: 74                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 61                 
Correct output: 23                  | Program output: 23                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 70                 
Correct output: -26                 | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: -92                 | Program output: -82                
Correct output: -88                 | Program output: 2                  
Correct output: -56                 | Program output: -12                
Correct output: -83                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -47                 | Program output: 46                 
Correct output: -65                 | Program output: -14                
Correct output: 25                  | Program output: 41                 
Correct output: -75                 | Program output: 25                 
Correct output: -73                 | Program output: 59                 
Correct output: -35                 | Program output: 64                 
Correct output: -77                 | Program output: 20                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -71                
Correct output: -63                 | Program output: -52                
Correct output: -43                 | Program output: -31                
Correct output: -3                  | Program output: 0                  
Correct output: -18                 | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -52                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 47                 
Correct output: -24                 | Program output: 34                 
Correct output: -82                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: 26                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: 67                 
Correct output: -58                 | Program output: 49                 
Correct output: 27                  | Program output: 93                 
Correct output: -71                 | Program output: -66                
Correct output: -13                 | Program output: 91                 
Correct output: -57                 | Program output: -30                
Correct output: -61                 | Program output: -61                
Correct output: -7                  | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -37                 | Program output: 77                 
Correct output: -68                 | Program output: -10                
Correct output: -29                 | Program output: 27                 
Correct output: -40                 | Program output: 61                 
Correct output: 35                  | Program output: 88                 
Correct output: -93                 | Program output: 36                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -80                
Correct output: -90                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -78                
Correct output: 1                   | Program output: 8                  
Correct output: -69                 | Program output: -11                
Correct output: -94                 | Program output: 70                 
Correct output: -48                 | Program output: 57                 
Correct output: -82                 | Program output: 3                  
Correct output: -76                 | Program output: 88                 
Correct output: -76                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction -61} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty})
Lexicase best program: (boolean_frominteger exec_if (integer_pop integer_gt boolean_xor exec_do*count (boolean_invert_first_then_and) in3 integer_pop) (boolean_yank) integer_inc boolean_pop boolean_eq boolean_dup_times exec_noop integer_inc exec_noop integer_fromboolean in3 exec_s (print_integer) (integer_flush boolean_shove integer_dec exec_when (exec_yankdup) boolean_dup_items boolean_dup_items -61 integer_dec exec_empty) ())
Lexicase best errors: [0 1 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 39
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction -61} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty})
Zero cases best program: (boolean_frominteger exec_if (integer_pop integer_gt boolean_xor exec_do*count (boolean_invert_first_then_and) in3 integer_pop) (boolean_yank) integer_inc boolean_pop boolean_eq boolean_dup_times exec_noop integer_inc exec_noop integer_fromboolean in3 exec_s (print_integer) (integer_flush boolean_shove integer_dec exec_when (exec_yankdup) boolean_dup_items boolean_dup_items -61 integer_dec exec_empty) ())
Zero cases best errors: [0 1 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 39
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (871 2 1000 1000 869 870 1000 1000 2 874)
Population mean number of elite cases: 7.49
Count of perfect (error zero) individuals by case: (871 2 0 0 869 870 0 0 2 874)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction -82} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap})
Best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716 boolean_rot in3) (boolean_or boolean_yank integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) integer_eq exec_dup_items) (integer_dec boolean_dup_times) (boolean_frominteger boolean_dup_times) integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k (integer_inc boolean_empty integer_shove in2 boolean_frominteger -82 boolean_yank exec_dup (boolean_pop integer_flush exec_empty) integer_add) (integer_fromboolean exec_do*times () exec_rot (boolean_dup integer_lte integer_min integer_yankdup exec_do*count () integer_swap integer_flush integer_dup boolean_yank boolean_not) (integer_empty integer_gte) (exec_yankdup integer_dup_times in3 boolean_stackdepth integer_swap))))
Errors: [0 1 1 1 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 64
Size: 82
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.512
Median total errors in population: 6
Error averages by case: (0.129 0.998 1.0 1.0 0.131 0.13 1.0 1.0 0.998 0.126)
Error minima by case: (0 0 1 1 0 0 1 1 0 0)
Average genome size in population (length): 50.797
Average program size in population (points): 64.575
Average percent parens in population: 0.211
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9485
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 138
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 153
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1293182
--- Timings ---
Current time: 1559314326193 milliseconds
Total Time:           8.3 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.9 seconds, 58.2%
Fitness Testing:      2.7 seconds, 31.9%
Report:               0.7 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 90                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 63                 
Correct output: 4                   | Program output: 86                 
Correct output: 54                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 43                  | Program output: 43                 
Correct output: 52                  | Program output: 90                 
Correct output: 34                  | Program output: 35                 
Correct output: 39                  | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: 74                  | Program output: 81                 
Correct output: 15                  | Program output: 92                 
Correct output: 3                   | Program output: 30                 
Correct output: 38                  | Program output: 74                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 61                 
Correct output: 23                  | Program output: 23                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 70                 
Correct output: -26                 | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: -92                 | Program output: -82                
Correct output: -88                 | Program output: 2                  
Correct output: -56                 | Program output: -12                
Correct output: -83                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -47                 | Program output: 46                 
Correct output: -65                 | Program output: -14                
Correct output: 25                  | Program output: 41                 
Correct output: -75                 | Program output: 25                 
Correct output: -73                 | Program output: 59                 
Correct output: -35                 | Program output: 64                 
Correct output: -77                 | Program output: 20                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -71                
Correct output: -63                 | Program output: -52                
Correct output: -43                 | Program output: -31                
Correct output: -3                  | Program output: 0                  
Correct output: -18                 | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -52                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 47                 
Correct output: -24                 | Program output: 34                 
Correct output: -82                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: 26                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: 67                 
Correct output: -58                 | Program output: 49                 
Correct output: 27                  | Program output: 93                 
Correct output: -71                 | Program output: -66                
Correct output: -13                 | Program output: 91                 
Correct output: -57                 | Program output: -30                
Correct output: -61                 | Program output: -61                
Correct output: -7                  | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -37                 | Program output: 77                 
Correct output: -68                 | Program output: -10                
Correct output: -29                 | Program output: 27                 
Correct output: -40                 | Program output: 61                 
Correct output: 35                  | Program output: 88                 
Correct output: -93                 | Program output: 36                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -80                
Correct output: -90                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -78                
Correct output: 1                   | Program output: 8                  
Correct output: -69                 | Program output: -11                
Correct output: -94                 | Program output: 70                 
Correct output: -48                 | Program output: 57                 
Correct output: -82                 | Program output: 3                  
Correct output: -76                 | Program output: 88                 
Correct output: -76                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 3, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Lexicase best program: (boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod exec_stackdepth) (integer_fromboolean) (boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot (exec_yank) () () exec_yankdup integer_max boolean_not boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) () integer_yank exec_swap (boolean_and integer_lt integer_sub) (print_integer boolean_xor exec_yankdup) integer_gt boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and exec_dup_times (exec_shove (exec_k () ())))))
Lexicase best errors: [0 0 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 102
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 3, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Zero cases best program: (boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod exec_stackdepth) (integer_fromboolean) (boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot (exec_yank) () () exec_yankdup integer_max boolean_not boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) () integer_yank exec_swap (boolean_and integer_lt integer_sub) (print_integer boolean_xor exec_yankdup) integer_gt boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and exec_dup_times (exec_shove (exec_k () ())))))
Zero cases best errors: [0 0 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 102
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (374 376 461 836 837 460 377 375 461 460)
Population mean number of elite cases: 5.02
Count of perfect (error zero) individuals by case: (374 376 461 836 837 460 377 375 461 460)
Population mean number of perfect (error zero) cases: 5.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Best program: (boolean_yankdup boolean_and boolean_pop integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_dup_items) (integer_fromboolean) (boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup boolean_invert_first_then_and exec_dup_times () integer_empty boolean_shove in1 exec_do*range (in3 boolean_rot) boolean_invert_second_then_and print_integer integer_dup_times boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot (exec_yank) () (exec_yankdup integer_max boolean_not) boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt integer_sub print_integer boolean_xor exec_yankdup integer_gt) (boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush) exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and) exec_dup_times (exec_shove (exec_k () ())))))
Errors: [1 1 0 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 77
Size: 101
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 4.983
Median total errors in population: 4
Error averages by case: (0.626 0.624 0.539 0.164 0.163 0.54 0.623 0.625 0.539 0.54)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.272
Average program size in population (points): 66.725
Average percent parens in population: 0.231
Minimum age in population: 3.0
Maximum age in population: 5.75
Average age in population: 4.56575
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1764840
--- Timings ---
Current time: 1559314328661 milliseconds
Total Time:          10.7 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.4 seconds, 59.7%
Fitness Testing:      3.2 seconds, 29.4%
Report:               1.1 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: 84                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: 47                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 27                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 65                 
Correct output: 54                  | Program output: 88                 
Correct output: 20                  | Program output: 51                 
Correct output: 8                   | Program output: 31                 
Correct output: 4                   | Program output: 52                 
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 65                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 88                 
Correct output: 8                   | Program output: 36                 
Correct output: 23                  | Program output: 43                 
Correct output: -32                 | Program output: -19                
Correct output: -18                 | Program output: 66                 
Correct output: -26                 | Program output: 22                 
Correct output: 14                  | Program output: 69                 
Correct output: -92                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: 61                 
Correct output: -83                 | Program output: -36                
Correct output: -27                 | Program output: 97                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 8                  
Correct output: 25                  | Program output: 83                 
Correct output: -75                 | Program output: -72                
Correct output: -73                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: 61                 
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: 93                 
Correct output: -18                 | Program output: -14                
Correct output: 1                   | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -4                 
Correct output: -42                 | Program output: 40                 
Correct output: -24                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: 30                 
Correct output: -83                 | Program output: -23                
Correct output: -54                 | Program output: 92                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: 87                 
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: 24                 
Correct output: -91                 | Program output: 88                 
Correct output: -37                 | Program output: 21                 
Correct output: -68                 | Program output: 42                 
Correct output: -29                 | Program output: 72                 
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 98                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -19                
Correct output: -86                 | Program output: 82                 
Correct output: -90                 | Program output: 51                 
Correct output: -61                 | Program output: 71                 
Correct output: -96                 | Program output: -15                
Correct output: 1                   | Program output: 12                 
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -72                
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -822               
Correct output: -76                 | Program output: 34                 
Correct output: -76                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_827} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Lexicase best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_827 boolean_rot exec_dup_times () boolean_invert_first_then_and boolean_yank) (integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) integer_eq exec_dup_items) () (integer_dec boolean_dup_times) boolean_frominteger boolean_dup_times) exec_dup_times (exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ()))
Lexicase best errors: [0 0 1 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 46
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_827} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Zero cases best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_827 boolean_rot exec_dup_times () boolean_invert_first_then_and boolean_yank) (integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) integer_eq exec_dup_items) () (integer_dec boolean_dup_times) boolean_frominteger boolean_dup_times) exec_dup_times (exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ()))
Zero cases best errors: [0 0 1 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 46
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (398 847 1 390 390 445 1000 1 444 1000)
Population mean number of elite cases: 4.92
Count of perfect (error zero) individuals by case: (398 847 1 390 390 445 0 1 444 0)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Best program: (boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod exec_stackdepth) (integer_fromboolean) (boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot (exec_yank) () (exec_yankdup) integer_max boolean_not boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt integer_sub) (print_integer boolean_xor exec_yankdup integer_gt) boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and exec_dup_times (exec_shove (exec_k () ()))))))
Errors: [0 0 1 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 77
Size: 102
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 7.084
Median total errors in population: 7
Error averages by case: (0.602 0.153 0.999 0.61 0.61 0.555 1.0 0.999 0.556 1.0)
Error minima by case: (0 0 0 0 0 0 1 0 0 1)
Average genome size in population (length): 49.926
Average program size in population (points): 65.168
Average percent parens in population: 0.233
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.990875
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2236365
--- Timings ---
Current time: 1559314331730 milliseconds
Total Time:          13.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.6 seconds, 62.3%
Fitness Testing:      3.6 seconds, 26.3%
Report:               1.5 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -29                
Correct output: -83                 | Program output: -58                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 82                 
Correct output: 14                  | Program output: 20                 
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 4                  
Correct output: 54                  | Program output: 95                 
Correct output: 20                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 13                 
Correct output: 43                  | Program output: 100                
Correct output: 52                  | Program output: 80                 
Correct output: 34                  | Program output: 54                 
Correct output: 39                  | Program output: 84                 
Correct output: 22                  | Program output: 62                 
Correct output: 74                  | Program output: 89                 
Correct output: 15                  | Program output: 63                 
Correct output: 3                   | Program output: 79                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 23                  | Program output: 25                 
Correct output: -32                 | Program output: 33                 
Correct output: -18                 | Program output: 40                 
Correct output: -26                 | Program output: 21                 
Correct output: 14                  | Program output: 16                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: 96                 
Correct output: -27                 | Program output: -1                 
Correct output: -47                 | Program output: 30                 
Correct output: -65                 | Program output: -65                
Correct output: 25                  | Program output: 63                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -35                 | Program output: 7                  
Correct output: -77                 | Program output: -5                 
Correct output: -60                 | Program output: 56                 
Correct output: -90                 | Program output: -90                
Correct output: -63                 | Program output: 46                 
Correct output: -43                 | Program output: -33                
Correct output: -3                  | Program output: 48                 
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 85                 
Correct output: -91                 | Program output: -4                 
Correct output: -23                 | Program output: 45                 
Correct output: -42                 | Program output: 67                 
Correct output: -24                 | Program output: 79                 
Correct output: -82                 | Program output: -21                
Correct output: -82                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 25                 
Correct output: -61                 | Program output: 62                 
Correct output: -75                 | Program output: 92                 
Correct output: -71                 | Program output: 94                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 85                 
Correct output: -71                 | Program output: -5                 
Correct output: -13                 | Program output: 66                 
Correct output: -57                 | Program output: -56                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: -7                 
Correct output: -91                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: 96                 
Correct output: -29                 | Program output: 90                 
Correct output: -40                 | Program output: 31                 
Correct output: 35                  | Program output: 35                 
Correct output: -93                 | Program output: 91                 
Correct output: -93                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -61                 | Program output: 58                 
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 52                 
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: 77                 
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: 31                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Lexicase best program: (boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min) boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_not boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt integer_sub) (print_integer boolean_xor exec_yankdup integer_gt) boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and exec_dup_times (exec_shove (exec_k () ()))))))
Lexicase best errors: [0 1 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 103
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Zero cases best program: (boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min) boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_not boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt integer_sub) (print_integer boolean_xor exec_yankdup integer_gt) boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and exec_dup_times (exec_shove (exec_k () ()))))))
Zero cases best errors: [0 1 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 103
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 6 180 1 357 1 1 292 661 279)
Population mean number of elite cases: 1.78
Count of perfect (error zero) individuals by case: (1 6 180 1 357 1 1 292 661 279)
Population mean number of perfect (error zero) cases: 1.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Best program: (boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min) boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_not boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt integer_sub) (print_integer boolean_xor exec_yankdup integer_gt) boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and exec_dup_times (exec_shove (exec_k () ()))))))
Errors: [0 1 1 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 77
Size: 103
Percent parens: 0.252
--- Population Statistics ---
Average total errors in population: 8.221
Median total errors in population: 8
Error averages by case: (0.999 0.994 0.82 0.999 0.643 0.999 0.999 0.708 0.339 0.721)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.763
Average program size in population (points): 57.568
Average percent parens in population: 0.240
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.7304375
Median age in population: 7.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2726232
--- Timings ---
Current time: 1559314334668 milliseconds
Total Time:          16.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.8 seconds, 63.7%
Fitness Testing:      4.1 seconds, 24.2%
Report:               1.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: 84                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: 47                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 27                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 65                 
Correct output: 54                  | Program output: 88                 
Correct output: 20                  | Program output: 51                 
Correct output: 8                   | Program output: 31                 
Correct output: 4                   | Program output: 5213               
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 65                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 8892               
Correct output: 8                   | Program output: 36                 
Correct output: 23                  | Program output: 43                 
Correct output: -32                 | Program output: -19                
Correct output: -18                 | Program output: 66                 
Correct output: -26                 | Program output: 22                 
Correct output: 14                  | Program output: 69                 
Correct output: -92                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: 61                 
Correct output: -83                 | Program output: -36                
Correct output: -27                 | Program output: 97                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 8                  
Correct output: 25                  | Program output: 83                 
Correct output: -75                 | Program output: -72                
Correct output: -73                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: 61                 
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: 93                 
Correct output: -18                 | Program output: -14                
Correct output: 1                   | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -4                 
Correct output: -42                 | Program output: 40                 
Correct output: -24                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: 30                 
Correct output: -83                 | Program output: -23                
Correct output: -54                 | Program output: 92                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: 87                 
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: 24                 
Correct output: -91                 | Program output: 88                 
Correct output: -37                 | Program output: 21                 
Correct output: -68                 | Program output: 42                 
Correct output: -29                 | Program output: 72                 
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 98                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -19                
Correct output: -86                 | Program output: 82                 
Correct output: -90                 | Program output: 51                 
Correct output: -61                 | Program output: 71                 
Correct output: -96                 | Program output: -15                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -72                
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: 34                 
Correct output: -76                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_k})
Lexicase best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716 boolean_rot in3) (boolean_invert_first_then_and boolean_yank) (integer_yankdup integer_swap print_integer) boolean_dup_times exec_noop) (integer_eq exec_dup_items) () integer_dec boolean_dup_times) boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 in1 exec_k () ())
Lexicase best errors: [1 0 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 44
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_k})
Zero cases best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716 boolean_rot in3) (boolean_invert_first_then_and boolean_yank) (integer_yankdup integer_swap print_integer) boolean_dup_times exec_noop) (integer_eq exec_dup_items) () integer_dec boolean_dup_times) boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 in1 exec_k () ())
Zero cases best errors: [1 0 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 44
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (168 91 332 332 90 189 63 332 191 90)
Population mean number of elite cases: 1.88
Count of perfect (error zero) individuals by case: (168 91 332 332 90 189 63 332 191 90)
Population mean number of perfect (error zero) cases: 1.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Best program: (boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod exec_stackdepth) (integer_fromboolean) (boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min integer_lte in2 exec_rot (exec_yank) () (exec_yankdup) integer_max boolean_not boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt integer_sub) (print_integer boolean_xor exec_yankdup integer_gt) boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and exec_dup_times (exec_shove (exec_k () ()))))))
Errors: [1 0 1 1 0 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 80
Size: 105
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 8.122
Median total errors in population: 8
Error averages by case: (0.832 0.909 0.668 0.668 0.91 0.811 0.937 0.668 0.809 0.91)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.259
Average program size in population (points): 73.558
Average percent parens in population: 0.224
Minimum age in population: 6.5
Maximum age in population: 10.875
Average age in population: 9.0620625
Median age in population: 8.984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 165
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3131394
--- Timings ---
Current time: 1559314337680 milliseconds
Total Time:          19.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.9 seconds, 65.5%
Fitness Testing:      4.5 seconds, 22.8%
Report:               2.2 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -29                
Correct output: -83                 | Program output: -58                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 82                 
Correct output: 14                  | Program output: 20                 
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 4                  
Correct output: 54                  | Program output: 95                 
Correct output: 20                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 13                 
Correct output: 43                  | Program output: 100                
Correct output: 52                  | Program output: 80                 
Correct output: 34                  | Program output: 54                 
Correct output: 39                  | Program output: 84                 
Correct output: 22                  | Program output: 62                 
Correct output: 74                  | Program output: 89                 
Correct output: 15                  | Program output: 63                 
Correct output: 3                   | Program output: 79                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 23                  | Program output: 25                 
Correct output: -32                 | Program output: 33                 
Correct output: -18                 | Program output: 40                 
Correct output: -26                 | Program output: 21                 
Correct output: 14                  | Program output: 16                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: 96                 
Correct output: -27                 | Program output: -1                 
Correct output: -47                 | Program output: 30                 
Correct output: -65                 | Program output: -65                
Correct output: 25                  | Program output: 63                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -35                 | Program output: 7                  
Correct output: -77                 | Program output: -5                 
Correct output: -60                 | Program output: 56                 
Correct output: -90                 | Program output: -90                
Correct output: -63                 | Program output: 46                 
Correct output: -43                 | Program output: -33                
Correct output: -3                  | Program output: 48                 
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 85                 
Correct output: -91                 | Program output: -4                 
Correct output: -23                 | Program output: 45                 
Correct output: -42                 | Program output: 67                 
Correct output: -24                 | Program output: 79                 
Correct output: -82                 | Program output: -21                
Correct output: -82                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 25                 
Correct output: -61                 | Program output: 62                 
Correct output: -75                 | Program output: 92                 
Correct output: -71                 | Program output: 94                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 85                 
Correct output: -71                 | Program output: -5                 
Correct output: -13                 | Program output: 66                 
Correct output: -57                 | Program output: -56                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: -7                 
Correct output: -91                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: 96                 
Correct output: -29                 | Program output: 90                 
Correct output: -40                 | Program output: 31                 
Correct output: 35                  | Program output: 35                 
Correct output: -93                 | Program output: 91                 
Correct output: -93                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -61                 | Program output: 58                 
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 52                 
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: 77                 
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: 31                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Lexicase best program: (boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min) boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_not boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt integer_sub) (print_integer boolean_xor exec_yankdup integer_gt) boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and exec_dup_times (exec_shove (exec_k () ()))))))
Lexicase best errors: [0 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 103
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Zero cases best program: (boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min) boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_not boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt integer_sub) (print_integer boolean_xor exec_yankdup integer_gt) boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and exec_dup_times (exec_shove (exec_k () ()))))))
Zero cases best errors: [0 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 103
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (800 194 195 328 194 196 800 328 196 195)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (800 194 195 328 194 196 800 328 196 195)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Best program: (boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range (in3 exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min) boolean_stackdepth) integer_flush exec_dup_items integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_not boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt integer_sub) (print_integer boolean_xor exec_yankdup integer_gt) boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and exec_dup_times (exec_shove (exec_k () ()))))))
Errors: [0 0 1 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 84
Size: 113
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 6.574
Median total errors in population: 6
Error averages by case: (0.2 0.806 0.805 0.672 0.806 0.804 0.2 0.672 0.804 0.805)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.259
Average program size in population (points): 63.641
Average percent parens in population: 0.238
Minimum age in population: 8.0
Maximum age in population: 12.3125
Average age in population: 10.54909375
Median age in population: 10.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3517856
--- Timings ---
Current time: 1559314340461 milliseconds
Total Time:          22.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.0 seconds, 66.3%
Fitness Testing:      4.9 seconds, 21.5%
Report:               2.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: 84                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: 47                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 27                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 65                 
Correct output: 54                  | Program output: 88                 
Correct output: 20                  | Program output: 51                 
Correct output: 8                   | Program output: 31                 
Correct output: 4                   | Program output: 52                 
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 65                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 88                 
Correct output: 8                   | Program output: 36                 
Correct output: 23                  | Program output: 43                 
Correct output: -32                 | Program output: -19                
Correct output: -18                 | Program output: 66                 
Correct output: -26                 | Program output: 22                 
Correct output: 14                  | Program output: 69                 
Correct output: -92                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: 61                 
Correct output: -83                 | Program output: -36                
Correct output: -27                 | Program output: 97                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 8                  
Correct output: 25                  | Program output: 83                 
Correct output: -75                 | Program output: -72                
Correct output: -73                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: 61                 
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: 93                 
Correct output: -18                 | Program output: -14                
Correct output: 1                   | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -4                 
Correct output: -42                 | Program output: 40                 
Correct output: -24                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: 30                 
Correct output: -83                 | Program output: -23                
Correct output: -54                 | Program output: 92                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: 87                 
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: 24                 
Correct output: -91                 | Program output: 88                 
Correct output: -37                 | Program output: 21                 
Correct output: -68                 | Program output: 42                 
Correct output: -29                 | Program output: 72                 
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 98                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -19                
Correct output: -86                 | Program output: 82                 
Correct output: -90                 | Program output: 51                 
Correct output: -61                 | Program output: 71                 
Correct output: -96                 | Program output: -15                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -72                
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: 34                 
Correct output: -76                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716 boolean_rot exec_when () boolean_invert_first_then_and boolean_yank) (integer_yankdup integer_swap print_integer) () boolean_dup_times exec_noop) (integer_eq exec_dup_items) () integer_dec boolean_dup_times) boolean_frominteger)
Lexicase best errors: [1 1 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716 boolean_rot exec_when () boolean_invert_first_then_and boolean_yank) (integer_yankdup integer_swap print_integer) () boolean_dup_times exec_noop) (integer_eq exec_dup_items) () integer_dec boolean_dup_times) boolean_frominteger)
Zero cases best errors: [1 1 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (126 419 210 210 338 422 412 760 211 210)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (126 419 210 210 338 422 412 760 211 210)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_k})
Best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716 boolean_rot in3) (boolean_invert_first_then_and boolean_yank) (integer_yankdup integer_swap print_integer) boolean_dup_times exec_noop integer_eq exec_dup_items) () (integer_dec boolean_dup_times) boolean_frominteger boolean_dup_times) integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 in1 exec_k () ())
Errors: [1 1 0 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 44
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.682
Median total errors in population: 6
Error averages by case: (0.874 0.581 0.79 0.79 0.662 0.578 0.588 0.24 0.789 0.79)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.213
Average program size in population (points): 78.79
Average percent parens in population: 0.248
Minimum age in population: 9.0
Maximum age in population: 13.7734375
Average age in population: 12.0632890625
Median age in population: 12.1015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3900374
--- Timings ---
Current time: 1559314343523 milliseconds
Total Time:          25.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.4 seconds, 67.7%
Fitness Testing:      5.2 seconds, 20.4%
Report:               3.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: 84                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: 47                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 27                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 65                 
Correct output: 54                  | Program output: 88                 
Correct output: 20                  | Program output: 51                 
Correct output: 8                   | Program output: 31                 
Correct output: 4                   | Program output: 52                 
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 65                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 88                 
Correct output: 8                   | Program output: 36                 
Correct output: 23                  | Program output: 43                 
Correct output: -32                 | Program output: -19                
Correct output: -18                 | Program output: 66                 
Correct output: -26                 | Program output: 22                 
Correct output: 14                  | Program output: 69                 
Correct output: -92                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: 61                 
Correct output: -83                 | Program output: -36                
Correct output: -27                 | Program output: 97                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 8                  
Correct output: 25                  | Program output: 83                 
Correct output: -75                 | Program output: -72                
Correct output: -73                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: 61                 
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: 93                 
Correct output: -18                 | Program output: -14                
Correct output: 1                   | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -4                 
Correct output: -42                 | Program output: 40                 
Correct output: -24                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: 30                 
Correct output: -83                 | Program output: -23                
Correct output: -54                 | Program output: 92                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: 87                 
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: 24                 
Correct output: -91                 | Program output: 88                 
Correct output: -37                 | Program output: 21                 
Correct output: -68                 | Program output: 42                 
Correct output: -29                 | Program output: 72                 
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 98                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -19                
Correct output: -86                 | Program output: 82                 
Correct output: -90                 | Program output: 51                 
Correct output: -61                 | Program output: 71                 
Correct output: -96                 | Program output: -15                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -72                
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: 34                 
Correct output: -76                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (integer_yank) (boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) integer_empty boolean_swap integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer)
Lexicase best errors: [1 1 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (integer_yank) (boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) integer_empty boolean_swap integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer)
Zero cases best errors: [1 1 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (197 130 786 454 131 453 785 134 2 452)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (197 130 786 454 131 453 785 134 2 452)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716 boolean_rot in3) (boolean_invert_first_then_and boolean_yank) (integer_yankdup integer_swap print_integer) boolean_dup_times exec_noop) (integer_eq exec_dup_items) () integer_dec boolean_dup_times) boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ())
Errors: [1 1 0 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 32
Size: 44
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.476
Median total errors in population: 5
Error averages by case: (0.803 0.87 0.214 0.546 0.869 0.547 0.215 0.866 0.998 0.548)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.573
Average program size in population (points): 63.72
Average percent parens in population: 0.255
Minimum age in population: 11.1875
Maximum age in population: 15.453125
Average age in population: 13.53184375
Median age in population: 13.59375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4281851
--- Timings ---
Current time: 1559314346488 milliseconds
Total Time:          28.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.7 seconds, 68.7%
Fitness Testing:      5.6 seconds, 19.5%
Report:               3.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: 84                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: 47                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 27                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 65                 
Correct output: 54                  | Program output: 88                 
Correct output: 20                  | Program output: 51                 
Correct output: 8                   | Program output: 31                 
Correct output: 4                   | Program output: 52                 
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 65                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 88                 
Correct output: 8                   | Program output: 36                 
Correct output: 23                  | Program output: 43                 
Correct output: -32                 | Program output: -19                
Correct output: -18                 | Program output: 66                 
Correct output: -26                 | Program output: 22                 
Correct output: 14                  | Program output: 69                 
Correct output: -92                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: 61                 
Correct output: -83                 | Program output: -36                
Correct output: -27                 | Program output: 97                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 8                  
Correct output: 25                  | Program output: 83                 
Correct output: -75                 | Program output: -72                
Correct output: -73                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: 61                 
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: 93                 
Correct output: -18                 | Program output: -14                
Correct output: 1                   | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -4                 
Correct output: -42                 | Program output: 40                 
Correct output: -24                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: 30                 
Correct output: -83                 | Program output: -23                
Correct output: -54                 | Program output: 92                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: 87                 
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: 24                 
Correct output: -91                 | Program output: 88                 
Correct output: -37                 | Program output: 21                 
Correct output: -68                 | Program output: 42                 
Correct output: -29                 | Program output: 72                 
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 98                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -19                
Correct output: -86                 | Program output: 82                 
Correct output: -90                 | Program output: 51                 
Correct output: -61                 | Program output: 71                 
Correct output: -96                 | Program output: -15                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -72                
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: 34                 
Correct output: -76                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Lexicase best program: (exec_if () (exec_rot (in1 exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range () in3 boolean_rot) exec_dup_items print_integer integer_min) (boolean_stackdepth integer_flush exec_dup_items) (integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_not) boolean_and integer_mult) exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt integer_sub) (print_integer boolean_xor exec_yankdup integer_gt) boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and exec_dup_times (exec_shove (exec_k () ()))))))
Lexicase best errors: [1 1 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 103
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Zero cases best program: (exec_if () (exec_rot (in1 exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range () in3 boolean_rot) exec_dup_items print_integer integer_min) (boolean_stackdepth integer_flush exec_dup_items) (integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_not) boolean_and integer_mult) exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt integer_sub) (print_integer boolean_xor exec_yankdup integer_gt) boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and exec_dup_times (exec_shove (exec_k () ()))))))
Zero cases best errors: [1 1 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 103
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 322 321 87 357 360 361 357 368 359)
Population mean number of elite cases: 2.98
Count of perfect (error zero) individuals by case: (87 322 321 87 357 360 361 357 368 359)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716 boolean_rot exec_when () boolean_invert_first_then_and boolean_yank) (integer_yankdup integer_swap print_integer) () boolean_dup_times exec_noop) (integer_eq exec_dup_items) () integer_dec boolean_dup_times) boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ())
Errors: [1 1 1 1 0 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 45
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 7.021
Median total errors in population: 8
Error averages by case: (0.913 0.678 0.679 0.913 0.643 0.64 0.639 0.643 0.632 0.641)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.941
Average program size in population (points): 55.44
Average percent parens in population: 0.243
Minimum age in population: 12.375
Maximum age in population: 16.8828125
Average age in population: 15.006212890625
Median age in population: 15.0703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4689644
--- Timings ---
Current time: 1559314349184 milliseconds
Total Time:          31.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.7 seconds, 69.3%
Fitness Testing:      6.0 seconds, 19.1%
Report:               3.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -29                
Correct output: -83                 | Program output: -58                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 82                 
Correct output: 14                  | Program output: 20                 
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 4                  
Correct output: 54                  | Program output: 95                 
Correct output: 20                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 13                 
Correct output: 43                  | Program output: 100                
Correct output: 52                  | Program output: 80                 
Correct output: 34                  | Program output: 54                 
Correct output: 39                  | Program output: 84                 
Correct output: 22                  | Program output: 62                 
Correct output: 74                  | Program output: 89                 
Correct output: 15                  | Program output: 63                 
Correct output: 3                   | Program output: 79                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 23                  | Program output: 25                 
Correct output: -32                 | Program output: 33                 
Correct output: -18                 | Program output: 40                 
Correct output: -26                 | Program output: 21                 
Correct output: 14                  | Program output: 16                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: 96                 
Correct output: -27                 | Program output: -1                 
Correct output: -47                 | Program output: 30                 
Correct output: -65                 | Program output: -65                
Correct output: 25                  | Program output: 63                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -35                 | Program output: 7                  
Correct output: -77                 | Program output: -5                 
Correct output: -60                 | Program output: 56                 
Correct output: -90                 | Program output: -90                
Correct output: -63                 | Program output: 46                 
Correct output: -43                 | Program output: -33                
Correct output: -3                  | Program output: 48                 
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 85                 
Correct output: -91                 | Program output: -4                 
Correct output: -23                 | Program output: 45                 
Correct output: -42                 | Program output: 67                 
Correct output: -24                 | Program output: 79                 
Correct output: -82                 | Program output: -21                
Correct output: -82                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 25                 
Correct output: -61                 | Program output: 62                 
Correct output: -75                 | Program output: 92                 
Correct output: -71                 | Program output: 94                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 85                 
Correct output: -71                 | Program output: -5                 
Correct output: -13                 | Program output: 66                 
Correct output: -57                 | Program output: -56                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: -7                 
Correct output: -91                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: 96                 
Correct output: -29                 | Program output: 90                 
Correct output: -40                 | Program output: 31                 
Correct output: 35                  | Program output: 35                 
Correct output: -93                 | Program output: 91                 
Correct output: -93                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -61                 | Program output: 58                 
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 52                 
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: 77                 
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: 31                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Lexicase best program: (boolean_yankdup boolean_and boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush print_integer exec_do*times () in4 integer_fromboolean integer_dup integer_rot print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) (exec_when () in2 integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items boolean_frominteger integer_min) boolean_stackdepth) integer_flush exec_dup_items integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_not boolean_and boolean_and integer_lt integer_sub print_integer boolean_xor exec_if (integer_gt) (boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and exec_dup_times (exec_shove (exec_k () ()))))))
Lexicase best errors: [0 0 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 97
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Zero cases best program: (boolean_yankdup boolean_and boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush print_integer exec_do*times () in4 integer_fromboolean integer_dup integer_rot print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) (exec_when () in2 integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items boolean_frominteger integer_min) boolean_stackdepth) integer_flush exec_dup_items integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_not boolean_and boolean_and integer_lt integer_sub print_integer boolean_xor exec_if (integer_gt) (boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and exec_dup_times (exec_shove (exec_k () ()))))))
Zero cases best errors: [0 0 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 97
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (143 841 185 145 141 142 141 505 505 506)
Population mean number of elite cases: 3.25
Count of perfect (error zero) individuals by case: (143 841 185 145 141 142 141 505 505 506)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k})
Best program: (boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (exec_empty boolean_yankdup) (exec_when () boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_invert_second_then_and integer_dup exec_do*times (exec_dup_times () integer_empty) boolean_shove in1 exec_do*range (in3 boolean_not) exec_dup_items exec_noop integer_min) boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_flush boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_eq boolean_and integer_lt integer_sub) print_integer boolean_xor exec_yankdup integer_gt boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush exec_while (exec_y_when_autoconstructing () integer_rot tagged_13 boolean_invert_second_then_and exec_dup_times (exec_shove (exec_k () ())))))
Errors: [0 0 1 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 77
Size: 101
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.746
Median total errors in population: 6
Error averages by case: (0.857 0.159 0.815 0.855 0.859 0.858 0.859 0.495 0.495 0.494)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.629
Average program size in population (points): 55.794
Average percent parens in population: 0.255
Minimum age in population: 13.375
Maximum age in population: 18.5078125
Average age in population: 16.4466103515625
Median age in population: 16.490234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5057481
--- Timings ---
Current time: 1559314351812 milliseconds
Total Time:          34.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.7 seconds, 69.7%
Fitness Testing:      6.3 seconds, 18.7%
Report:               3.9 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: 84                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: 47                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 27                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 65                 
Correct output: 54                  | Program output: 88                 
Correct output: 20                  | Program output: 51                 
Correct output: 8                   | Program output: 31                 
Correct output: 4                   | Program output: 52                 
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 65                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 88                 
Correct output: 8                   | Program output: 36                 
Correct output: 23                  | Program output: 43                 
Correct output: -32                 | Program output: -19                
Correct output: -18                 | Program output: 66                 
Correct output: -26                 | Program output: 22                 
Correct output: 14                  | Program output: 69                 
Correct output: -92                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: 61                 
Correct output: -83                 | Program output: -36                
Correct output: -27                 | Program output: 97                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 8                  
Correct output: 25                  | Program output: 83                 
Correct output: -75                 | Program output: -72                
Correct output: -73                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: 61                 
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: 93                 
Correct output: -18                 | Program output: -14                
Correct output: 1                   | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -4                 
Correct output: -42                 | Program output: 40                 
Correct output: -24                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: 30                 
Correct output: -83                 | Program output: -23                
Correct output: -54                 | Program output: 92                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: 87                 
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: 24                 
Correct output: -91                 | Program output: 88                 
Correct output: -37                 | Program output: 21                 
Correct output: -68                 | Program output: 42                 
Correct output: -29                 | Program output: 72                 
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 98                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -19                
Correct output: -86                 | Program output: 82                 
Correct output: -90                 | Program output: 51                 
Correct output: -61                 | Program output: 71                 
Correct output: -96                 | Program output: -15                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -72                
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: 34                 
Correct output: -76                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Lexicase best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716 boolean_rot in3) (boolean_invert_first_then_and boolean_yank) (integer_yankdup integer_swap print_integer) boolean_dup_times exec_noop) (integer_eq exec_dup_items) () integer_dec boolean_dup_times) boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ())
Lexicase best errors: [0 0 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Zero cases best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716 boolean_rot in3) (boolean_invert_first_then_and boolean_yank) (integer_yankdup integer_swap print_integer) boolean_dup_times exec_noop) (integer_eq exec_dup_items) () integer_dec boolean_dup_times) boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ())
Zero cases best errors: [0 0 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (763 408 773 134 274 355 353 272 405 767)
Population mean number of elite cases: 4.50
Count of perfect (error zero) individuals by case: (763 408 773 134 274 355 353 272 405 767)
Population mean number of perfect (error zero) cases: 4.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_k})
Best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716 boolean_rot in3) (boolean_invert_first_then_and boolean_yank) (integer_yankdup integer_swap print_integer) boolean_dup_times exec_noop) (integer_eq exec_dup_items) () integer_dec boolean_dup_times) boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 in1 exec_k () ())
Errors: [0 0 0 1 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 32
Size: 44
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 5.496
Median total errors in population: 5
Error averages by case: (0.237 0.592 0.227 0.866 0.726 0.645 0.647 0.728 0.595 0.233)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.481
Average program size in population (points): 69.651
Average percent parens in population: 0.248
Minimum age in population: 14.375
Maximum age in population: 19.84375
Average age in population: 17.8963359375
Median age in population: 17.97509765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5428324
--- Timings ---
Current time: 1559314354447 milliseconds
Total Time:          36.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.7 seconds, 70.2%
Fitness Testing:      6.7 seconds, 18.3%
Report:               4.1 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 90                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 63                 
Correct output: 4                   | Program output: 86                 
Correct output: 54                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 43                  | Program output: 43                 
Correct output: 52                  | Program output: 90                 
Correct output: 34                  | Program output: 35                 
Correct output: 39                  | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: 74                  | Program output: 81                 
Correct output: 15                  | Program output: 92                 
Correct output: 3                   | Program output: 30                 
Correct output: 38                  | Program output: 74                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 61                 
Correct output: 23                  | Program output: 23                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 70                 
Correct output: -26                 | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: -92                 | Program output: -82                
Correct output: -88                 | Program output: 2                  
Correct output: -56                 | Program output: -12                
Correct output: -83                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -47                 | Program output: 46                 
Correct output: -65                 | Program output: -14                
Correct output: 25                  | Program output: 41                 
Correct output: -75                 | Program output: 25                 
Correct output: -73                 | Program output: 59                 
Correct output: -35                 | Program output: 64                 
Correct output: -77                 | Program output: 20                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -71                
Correct output: -63                 | Program output: -52                
Correct output: -43                 | Program output: -31                
Correct output: -3                  | Program output: 0                  
Correct output: -18                 | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -52                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 47                 
Correct output: -24                 | Program output: 34                 
Correct output: -82                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: 26                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: 67                 
Correct output: -58                 | Program output: 49                 
Correct output: 27                  | Program output: 93                 
Correct output: -71                 | Program output: -66                
Correct output: -13                 | Program output: 91                 
Correct output: -57                 | Program output: -30                
Correct output: -61                 | Program output: -61                
Correct output: -7                  | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -37                 | Program output: 77                 
Correct output: -68                 | Program output: -10                
Correct output: -29                 | Program output: 27                 
Correct output: -40                 | Program output: 61                 
Correct output: 35                  | Program output: 88                 
Correct output: -93                 | Program output: 36                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -80                
Correct output: -90                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -78                
Correct output: 1                   | Program output: 8                  
Correct output: -69                 | Program output: -11                
Correct output: -94                 | Program output: 70                 
Correct output: -48                 | Program output: 57                 
Correct output: -82                 | Program output: 3                  
Correct output: -76                 | Program output: 88                 
Correct output: -76                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup})
Lexicase best program: (boolean_yankdup in3 print_integer integer_pop integer_pop integer_pop exec_k_when_autoconstructing (integer_gte boolean_invert_first_then_and exec_k (integer_lte exec_noop integer_mod) (boolean_dup_times boolean_dup_items boolean_shove boolean_frominteger)) (exec_when (integer_flush integer_stackdepth) boolean_frominteger print_integer exec_stackdepth integer_shove boolean_frominteger boolean_rot) exec_stackdepth integer_pop integer_pop boolean_shove exec_shove (exec_dup (integer_lt exec_empty integer_stackdepth integer_gt exec_noop integer_eq)) integer_mod integer_div integer_dup_times exec_eq boolean_dup_times integer_yank integer_sub integer_dec boolean_dup_items integer_eq boolean_swap integer_yankdup)
Lexicase best errors: [1 1 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 58
Percent parens: 0.138
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup})
Zero cases best program: (boolean_yankdup in3 print_integer integer_pop integer_pop integer_pop exec_k_when_autoconstructing (integer_gte boolean_invert_first_then_and exec_k (integer_lte exec_noop integer_mod) (boolean_dup_times boolean_dup_items boolean_shove boolean_frominteger)) (exec_when (integer_flush integer_stackdepth) boolean_frominteger print_integer exec_stackdepth integer_shove boolean_frominteger boolean_rot) exec_stackdepth integer_pop integer_pop boolean_shove exec_shove (exec_dup (integer_lt exec_empty integer_stackdepth integer_gt exec_noop integer_eq)) integer_mod integer_div integer_dup_times exec_eq boolean_dup_times integer_yank integer_sub integer_dec boolean_dup_items integer_eq boolean_swap integer_yankdup)
Zero cases best errors: [1 1 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 401 217 829 222 426 215 208 216 208)
Population mean number of elite cases: 2.94
Count of perfect (error zero) individuals by case: (1 401 217 829 222 426 215 208 216 208)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_min} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_eq})
Best program: (exec_yankdup integer_min exec_eq exec_y_when_autoconstructing () boolean_not in3 print_integer integer_pop integer_pop integer_pop exec_k_when_autoconstructing (integer_gte boolean_invert_first_then_and exec_k (integer_lte) (exec_while (integer_mod) boolean_dup_times boolean_dup_items boolean_shove boolean_or) exec_when (boolean_shove boolean_or) exec_when (integer_flush integer_stackdepth) boolean_frominteger print_integer exec_stackdepth integer_shove boolean_frominteger boolean_rot) (integer_add) integer_pop integer_pop boolean_shove exec_shove (exec_pop (integer_lt exec_empty integer_stackdepth) integer_gt exec_noop integer_eq))
Errors: [1 1 0 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 45
Size: 56
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 7.057
Median total errors in population: 8
Error averages by case: (0.999 0.599 0.783 0.171 0.778 0.574 0.785 0.792 0.784 0.792)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.336
Average program size in population (points): 59.118
Average percent parens in population: 0.252
Minimum age in population: 16.46875
Maximum age in population: 21.505126953125
Average age in population: 19.32595385742188
Median age in population: 19.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5782603
--- Timings ---
Current time: 1559314357025 milliseconds
Total Time:          39.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.7 seconds, 70.5%
Fitness Testing:      7.0 seconds, 18.0%
Report:               4.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 90                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 63                 
Correct output: 4                   | Program output: 86                 
Correct output: 54                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 43                  | Program output: 43                 
Correct output: 52                  | Program output: 90                 
Correct output: 34                  | Program output: 35                 
Correct output: 39                  | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: 74                  | Program output: 81                 
Correct output: 15                  | Program output: 92                 
Correct output: 3                   | Program output: 30                 
Correct output: 38                  | Program output: 74                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 61                 
Correct output: 23                  | Program output: 23                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 70                 
Correct output: -26                 | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: -92                 | Program output: -82                
Correct output: -88                 | Program output: 2                  
Correct output: -56                 | Program output: -12                
Correct output: -83                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -47                 | Program output: 46                 
Correct output: -65                 | Program output: -14                
Correct output: 25                  | Program output: 41                 
Correct output: -75                 | Program output: 25                 
Correct output: -73                 | Program output: 59                 
Correct output: -35                 | Program output: 64                 
Correct output: -77                 | Program output: 20                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -71                
Correct output: -63                 | Program output: -52                
Correct output: -43                 | Program output: -31                
Correct output: -3                  | Program output: 0                  
Correct output: -18                 | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -52                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 47                 
Correct output: -24                 | Program output: 34                 
Correct output: -82                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: 26                 
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: 67                 
Correct output: -58                 | Program output: 49                 
Correct output: 27                  | Program output: 93                 
Correct output: -71                 | Program output: -66                
Correct output: -13                 | Program output: 91                 
Correct output: -57                 | Program output: -30                
Correct output: -61                 | Program output: -61                
Correct output: -7                  | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -37                 | Program output: 77                 
Correct output: -68                 | Program output: -10                
Correct output: -29                 | Program output: 27                 
Correct output: -40                 | Program output: 61                 
Correct output: 35                  | Program output: 88                 
Correct output: -93                 | Program output: 36                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -80                
Correct output: -90                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -78                
Correct output: 1                   | Program output: 8                  
Correct output: -69                 | Program output: -11                
Correct output: -94                 | Program output: 70                 
Correct output: -48                 | Program output: 57                 
Correct output: -82                 | Program output: 3                  
Correct output: -76                 | Program output: 88                 
Correct output: -76                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Lexicase best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716 boolean_rot in3) (boolean_invert_first_then_and boolean_yank) (integer_yankdup boolean_yankdup print_integer) boolean_dup_times exec_noop) () (integer_eq exec_dup_items)) integer_dec boolean_dup_times boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ())
Lexicase best errors: [0 1 0 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Zero cases best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716 boolean_rot in3) (boolean_invert_first_then_and boolean_yank) (integer_yankdup boolean_yankdup print_integer) boolean_dup_times exec_noop) () (integer_eq exec_dup_items)) integer_dec boolean_dup_times boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ())
Zero cases best errors: [0 1 0 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (716 158 113 112 441 716 441 113 440 161)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (716 158 113 112 441 716 441 113 440 161)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 1, :instruction tag_integer_509} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Best program: (boolean_yankdup boolean_and exec_dup_items integer_swap exec_while (boolean_rot) integer_inc exec_eq exec_y_when_autoconstructing () boolean_not in3 print_integer integer_gt tag_integer_509 integer_pop exec_k_when_autoconstructing (integer_gte boolean_invert_first_then_and exec_k (integer_lte) (exec_while (integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ()))) ())
Errors: [0 1 1 1 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 28
Size: 38
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 6.589
Median total errors in population: 5
Error averages by case: (0.284 0.842 0.887 0.888 0.559 0.284 0.559 0.887 0.56 0.839)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.164
Average program size in population (points): 52.328
Average percent parens in population: 0.225
Minimum age in population: 18.0390625
Maximum age in population: 22.6434326171875
Average age in population: 20.61011584472656
Median age in population: 20.67254638671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6122775
--- Timings ---
Current time: 1559314359589 milliseconds
Total Time:          41.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.7 seconds, 71.0%
Fitness Testing:      7.4 seconds, 17.6%
Report:               4.7 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 550
Test mean error for best: 0.55000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 27                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 65                 
Correct output: 54                  | Program output: 88                 
Correct output: 20                  | Program output: 51                 
Correct output: 8                   | Program output: 31                 
Correct output: 4                   | Program output: 52                 
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 65                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 88                 
Correct output: 8                   | Program output: 36                 
Correct output: 23                  | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 66                 
Correct output: -26                 | Program output: 22                 
Correct output: 14                  | Program output: 69                 
Correct output: -92                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -12                
Correct output: -83                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -14                
Correct output: 25                  | Program output: 83                 
Correct output: -75                 | Program output: -72                
Correct output: -73                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -71                
Correct output: -63                 | Program output: -52                
Correct output: -43                 | Program output: -31                
Correct output: -3                  | Program output: 0                  
Correct output: -18                 | Program output: -14                
Correct output: 1                   | Program output: 73                 
Correct output: -91                 | Program output: -52                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 40                 
Correct output: -24                 | Program output: 97                 
Correct output: -82                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -66                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -30                
Correct output: -61                 | Program output: -61                
Correct output: -7                  | Program output: 24                 
Correct output: -91                 | Program output: -91                
Correct output: -37                 | Program output: 21                 
Correct output: -68                 | Program output: -10                
Correct output: -29                 | Program output: 72                 
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 98                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -80                
Correct output: -90                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -78                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -11                
Correct output: -94                 | Program output: -72                
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: 34                 
Correct output: -76                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Lexicase best program: (exec_if () (exec_rot (in1 integer_eq) (integer_eq exec_rot (in3 tagged_716 boolean_rot in3 boolean_invert_first_then_and boolean_yank) (integer_yankdup boolean_or print_integer) (boolean_dup_times exec_noop) integer_eq exec_dup_items) () integer_dec boolean_dup_times) boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ())
Lexicase best errors: [1 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Zero cases best program: (exec_if () (exec_rot (in1 integer_eq) (integer_eq exec_rot (in3 tagged_716 boolean_rot in3 boolean_invert_first_then_and boolean_yank) (integer_yankdup boolean_or print_integer) (boolean_dup_times exec_noop) integer_eq exec_dup_items) () integer_dec boolean_dup_times) boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ())
Zero cases best errors: [1 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (153 458 822 305 305 822 359 1 152 362)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (153 458 822 305 305 822 359 1 152 362)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Best program: (exec_if () (exec_rot (in1 integer_eq) (integer_eq exec_rot (in3 tagged_716 boolean_rot in3 boolean_invert_first_then_and boolean_yank) (integer_yankdup boolean_or print_integer) (boolean_dup_times exec_noop) integer_eq exec_dup_items) () integer_dec boolean_dup_times) boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ())
Errors: [1 1 0 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 44
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.261
Median total errors in population: 6
Error averages by case: (0.847 0.542 0.178 0.695 0.695 0.178 0.641 0.999 0.848 0.638)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.397
Average program size in population (points): 54.768
Average percent parens in population: 0.244
Minimum age in population: 19.0390625
Maximum age in population: 24.25372314453125
Average age in population: 22.14768280029297
Median age in population: 22.241455078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6476287
--- Timings ---
Current time: 1559314362205 milliseconds
Total Time:          44.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.7 seconds, 71.4%
Fitness Testing:      7.7 seconds, 17.4%
Report:               4.9 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: 84                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: 47                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 27                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 65                 
Correct output: 54                  | Program output: 88                 
Correct output: 20                  | Program output: 51                 
Correct output: 8                   | Program output: 31                 
Correct output: 4                   | Program output: 52                 
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 65                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 88                 
Correct output: 8                   | Program output: 36                 
Correct output: 23                  | Program output: 43                 
Correct output: -32                 | Program output: -19                
Correct output: -18                 | Program output: 66                 
Correct output: -26                 | Program output: 22                 
Correct output: 14                  | Program output: 69                 
Correct output: -92                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: 61                 
Correct output: -83                 | Program output: -36                
Correct output: -27                 | Program output: 97                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 8                  
Correct output: 25                  | Program output: 83                 
Correct output: -75                 | Program output: -72                
Correct output: -73                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: 61                 
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: 93                 
Correct output: -18                 | Program output: -14                
Correct output: 1                   | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -4                 
Correct output: -42                 | Program output: 40                 
Correct output: -24                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: 30                 
Correct output: -83                 | Program output: -23                
Correct output: -54                 | Program output: 92                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: 87                 
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: 24                 
Correct output: -91                 | Program output: 88                 
Correct output: -37                 | Program output: 21                 
Correct output: -68                 | Program output: 42                 
Correct output: -29                 | Program output: 72                 
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 98                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -19                
Correct output: -86                 | Program output: 82                 
Correct output: -90                 | Program output: 51                 
Correct output: -61                 | Program output: 71                 
Correct output: -96                 | Program output: -15                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -72                
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: 34                 
Correct output: -76                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup})
Lexicase best program: (exec_if () (exec_rot (in1 integer_eq integer_eq integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max boolean_yank) exec_when (boolean_swap integer_dup)) ()))
Lexicase best errors: [1 0 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup})
Zero cases best program: (exec_if () (exec_rot (in1 integer_eq integer_eq integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max boolean_yank) exec_when (boolean_swap integer_dup)) ()))
Zero cases best errors: [1 0 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (231 793 69 474 145 471 492 72 570 229)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (231 793 69 474 145 471 492 72 570 229)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty})
Best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716 boolean_rot in3) (boolean_invert_first_then_and boolean_yank) (integer_yankdup integer_swap print_integer) boolean_dup_times exec_noop) (integer_eq exec_dup_items) () integer_dec) boolean_dup_times exec_if (boolean_dup_times) (integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush boolean_empty))
Errors: [1 0 1 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 30
Size: 42
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.454
Median total errors in population: 6
Error averages by case: (0.769 0.207 0.931 0.526 0.855 0.529 0.508 0.928 0.43 0.771)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.265
Average program size in population (points): 63.432
Average percent parens in population: 0.259
Minimum age in population: 21.1619873046875
Maximum age in population: 25.510009765625
Average age in population: 23.43772357177734
Median age in population: 23.53439331054688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 245
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 248
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6902593
--- Timings ---
Current time: 1559314364892 milliseconds
Total Time:          47.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.8 seconds, 71.6%
Fitness Testing:      8.1 seconds, 17.2%
Report:               5.2 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: 84                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: 47                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 27                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 65                 
Correct output: 54                  | Program output: 88                 
Correct output: 20                  | Program output: 51                 
Correct output: 8                   | Program output: 31                 
Correct output: 4                   | Program output: 52                 
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 65                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 88                 
Correct output: 8                   | Program output: 36                 
Correct output: 23                  | Program output: 43                 
Correct output: -32                 | Program output: -19                
Correct output: -18                 | Program output: 66                 
Correct output: -26                 | Program output: 22                 
Correct output: 14                  | Program output: 69                 
Correct output: -92                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: 61                 
Correct output: -83                 | Program output: -36                
Correct output: -27                 | Program output: 97                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 8                  
Correct output: 25                  | Program output: 83                 
Correct output: -75                 | Program output: -72                
Correct output: -73                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: 61                 
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: 93                 
Correct output: -18                 | Program output: -14                
Correct output: 1                   | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -4                 
Correct output: -42                 | Program output: 40                 
Correct output: -24                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: 30                 
Correct output: -83                 | Program output: -23                
Correct output: -54                 | Program output: 92                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: 87                 
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: 24                 
Correct output: -91                 | Program output: 88                 
Correct output: -37                 | Program output: 21                 
Correct output: -68                 | Program output: 42                 
Correct output: -29                 | Program output: 72                 
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 98                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -19                
Correct output: -86                 | Program output: 82                 
Correct output: -90                 | Program output: 51                 
Correct output: -61                 | Program output: 71                 
Correct output: -96                 | Program output: -15                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -72                
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: 34                 
Correct output: -76                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_if () (exec_rot (in1 integer_eq) (print_integer) (boolean_dup_times exec_noop) integer_eq exec_dup_items) boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush boolean_stackdepth in4 integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times ()))
Lexicase best errors: [1 1 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 51
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_if () (exec_rot (in1 integer_eq) (print_integer) (boolean_dup_times exec_noop) integer_eq exec_dup_items) boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush boolean_stackdepth in4 integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times ()))
Zero cases best errors: [1 1 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 51
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (127 26 430 648 432 428 429 28 448 129)
Population mean number of elite cases: 3.13
Count of perfect (error zero) individuals by case: (127 26 430 648 432 428 429 28 448 129)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Best program: (exec_if (exec_rot (in1 integer_eq) (integer_eq exec_rot (in3 tagged_716 boolean_rot in3 boolean_invert_first_then_and boolean_yank) (integer_yankdup) (integer_swap print_integer) boolean_dup_times exec_noop) (integer_eq exec_dup_items)) (integer_dec boolean_dup_times) boolean_frominteger exec_swap (integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ()) ())
Errors: [1 1 0 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 32
Size: 46
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 6.875
Median total errors in population: 7
Error averages by case: (0.873 0.974 0.57 0.352 0.568 0.572 0.571 0.972 0.552 0.871)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.752
Average program size in population (points): 63.993
Average percent parens in population: 0.259
Minimum age in population: 22.35906982421875
Maximum age in population: 26.55157470703125
Average age in population: 24.94618078613281
Median age in population: 24.98297119140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7437381
--- Timings ---
Current time: 1559314367668 milliseconds
Total Time:          49.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.8 seconds, 71.7%
Fitness Testing:      8.6 seconds, 17.3%
Report:               5.4 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -29                
Correct output: -83                 | Program output: -58                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 82                 
Correct output: 14                  | Program output: 20                 
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 4                  
Correct output: 54                  | Program output: 95                 
Correct output: 20                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 13                 
Correct output: 43                  | Program output: 100                
Correct output: 52                  | Program output: 80                 
Correct output: 34                  | Program output: 54                 
Correct output: 39                  | Program output: 84                 
Correct output: 22                  | Program output: 62                 
Correct output: 74                  | Program output: 89                 
Correct output: 15                  | Program output: 63                 
Correct output: 3                   | Program output: 79                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 23                  | Program output: 25                 
Correct output: -32                 | Program output: 33                 
Correct output: -18                 | Program output: 40                 
Correct output: -26                 | Program output: 21                 
Correct output: 14                  | Program output: 16                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: 96                 
Correct output: -27                 | Program output: -1                 
Correct output: -47                 | Program output: 30                 
Correct output: -65                 | Program output: -65                
Correct output: 25                  | Program output: 63                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -35                 | Program output: 7                  
Correct output: -77                 | Program output: -5                 
Correct output: -60                 | Program output: 56                 
Correct output: -90                 | Program output: -90                
Correct output: -63                 | Program output: 46                 
Correct output: -43                 | Program output: -33                
Correct output: -3                  | Program output: 48                 
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 85                 
Correct output: -91                 | Program output: -4                 
Correct output: -23                 | Program output: 45                 
Correct output: -42                 | Program output: 67                 
Correct output: -24                 | Program output: 79                 
Correct output: -82                 | Program output: -21                
Correct output: -82                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 25                 
Correct output: -61                 | Program output: 62                 
Correct output: -75                 | Program output: 92                 
Correct output: -71                 | Program output: 94                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 85                 
Correct output: -71                 | Program output: -5                 
Correct output: -13                 | Program output: 66                 
Correct output: -57                 | Program output: -56                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: -7                 
Correct output: -91                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: 96                 
Correct output: -29                 | Program output: 90                 
Correct output: -40                 | Program output: 31                 
Correct output: 35                  | Program output: 35                 
Correct output: -93                 | Program output: 91                 
Correct output: -93                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -61                 | Program output: 58                 
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 52                 
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: 77                 
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: 31                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y})
Lexicase best program: (boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_do*times (exec_dup_times (integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min) boolean_stackdepth) integer_flush exec_dup_items integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_not boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt boolean_stackdepth) (print_integer boolean_xor integer_gt integer_dup_items) boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush tagged_13 boolean_invert_second_then_and exec_dup_times (boolean_invert_second_then_and exec_yankdup exec_shove (exec_y ())))))
Lexicase best errors: [1 0 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 95
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_13} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y})
Zero cases best program: (boolean_yankdup boolean_and exec_dup_items integer_swap exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_do*times (exec_dup_times (integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min) boolean_stackdepth) integer_flush exec_dup_items integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_not boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt boolean_stackdepth) (print_integer boolean_xor integer_gt integer_dup_items) boolean_dup_times integer_gte integer_gte exec_shove (boolean_flush tagged_13 boolean_invert_second_then_and exec_dup_times (boolean_invert_second_then_and exec_yankdup exec_shove (exec_y ())))))
Zero cases best errors: [1 0 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 95
Percent parens: 0.232
--- Lexicase Population Statistics ---
Count of elite individuals by case: (18 825 133 2 330 18 671 358 132 133)
Population mean number of elite cases: 2.62
Count of perfect (error zero) individuals by case: (18 825 133 2 330 18 671 358 132 133)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup})
Best program: (boolean_yankdup boolean_and exec_dup_items integer_swap integer_empty boolean_frominteger exec_dup_items integer_fromboolean exec_dup (boolean_rot) integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_yank boolean_yankdup) (exec_when () boolean_flush boolean_stackdepth in4 integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times (exec_dup_times () integer_lt) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min) boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_not boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (integer_sub integer_lt integer_sub) (print_integer boolean_xor exec_yankdup)))
Errors: [1 0 0 1 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 66
Size: 85
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 7.38
Median total errors in population: 7
Error averages by case: (0.982 0.175 0.867 0.998 0.67 0.982 0.329 0.642 0.868 0.867)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.551
Average program size in population (points): 53.471
Average percent parens in population: 0.267
Minimum age in population: 23.35906982421875
Maximum age in population: 28.3350830078125
Average age in population: 26.0436227645874
Median age in population: 26.03123474121094
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7806470
--- Timings ---
Current time: 1559314370322 milliseconds
Total Time:          52.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.8 seconds, 71.9%
Fitness Testing:      9.0 seconds, 17.1%
Report:               5.7 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -29                
Correct output: -83                 | Program output: -58                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 82                 
Correct output: 14                  | Program output: 20                 
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 4                  
Correct output: 54                  | Program output: 95                 
Correct output: 20                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 13                 
Correct output: 43                  | Program output: 100                
Correct output: 52                  | Program output: 80                 
Correct output: 34                  | Program output: 54                 
Correct output: 39                  | Program output: 84                 
Correct output: 22                  | Program output: 62                 
Correct output: 74                  | Program output: 89                 
Correct output: 15                  | Program output: 63                 
Correct output: 3                   | Program output: 79                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 23                  | Program output: 25                 
Correct output: -32                 | Program output: 33                 
Correct output: -18                 | Program output: 40                 
Correct output: -26                 | Program output: 21                 
Correct output: 14                  | Program output: 16                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: 96                 
Correct output: -27                 | Program output: -1                 
Correct output: -47                 | Program output: 30                 
Correct output: -65                 | Program output: -65                
Correct output: 25                  | Program output: 63                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -35                 | Program output: 7                  
Correct output: -77                 | Program output: -5                 
Correct output: -60                 | Program output: 56                 
Correct output: -90                 | Program output: -90                
Correct output: -63                 | Program output: 46                 
Correct output: -43                 | Program output: -33                
Correct output: -3                  | Program output: 48                 
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 85                 
Correct output: -91                 | Program output: -4                 
Correct output: -23                 | Program output: 45                 
Correct output: -42                 | Program output: 67                 
Correct output: -24                 | Program output: 79                 
Correct output: -82                 | Program output: -21                
Correct output: -82                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 25                 
Correct output: -61                 | Program output: 62                 
Correct output: -75                 | Program output: 92                 
Correct output: -71                 | Program output: 94                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 85                 
Correct output: -71                 | Program output: -5                 
Correct output: -13                 | Program output: 66                 
Correct output: -57                 | Program output: -56                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: -7                 
Correct output: -91                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: 96                 
Correct output: -29                 | Program output: 90                 
Correct output: -40                 | Program output: 31                 
Correct output: 35                  | Program output: 35                 
Correct output: -93                 | Program output: 91                 
Correct output: -93                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -61                 | Program output: 58                 
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 52                 
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: 77                 
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: 31                 
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor})
Lexicase best program: (boolean_yankdup boolean_and exec_dup_items boolean_dup_times exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times (integer_min integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min) boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_not boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and exec_if (integer_sub) (print_integer boolean_xor)) ()))
Lexicase best errors: [0 0 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 77
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor})
Zero cases best program: (boolean_yankdup boolean_and exec_dup_items boolean_dup_times exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times (integer_min integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min) boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_not boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and exec_if (integer_sub) (print_integer boolean_xor)) ()))
Zero cases best errors: [0 0 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 77
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (233 233 234 344 248 338 155 338 233 215)
Population mean number of elite cases: 2.57
Count of perfect (error zero) individuals by case: (233 233 234 344 248 338 155 338 233 215)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer})
Best program: (boolean_yankdup boolean_and exec_dup_items integer_yankdup exec_empty boolean_rot integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod boolean_yankdup) (exec_when () boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) (print_integer integer_div exec_yankdup exec_pop (integer_max) boolean_yank) exec_when () boolean_swap integer_dup exec_do*times (exec_dup_times (integer_empty) boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min) boolean_stackdepth) integer_flush exec_dup_items integer_yank in2 exec_rot (integer_yankdup) () (exec_stackdepth) integer_max boolean_not boolean_and integer_mult exec_k_when_autoconstructing (boolean_empty integer_lt) (integer_yank exec_swap (boolean_and integer_lt integer_sub) (print_integer)))
Errors: [0 0 0 1 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 61
Size: 80
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.429
Median total errors in population: 7
Error averages by case: (0.767 0.767 0.766 0.656 0.752 0.662 0.845 0.662 0.767 0.785)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.693
Average program size in population (points): 58.944
Average percent parens in population: 0.264
Minimum age in population: 25.60758972167969
Maximum age in population: 29.50382995605469
Average age in population: 27.47274227523804
Median age in population: 27.50349426269531
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8179836
--- Timings ---
Current time: 1559314372912 milliseconds
Total Time:          55.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.7 seconds, 72.0%
Fitness Testing:      9.4 seconds, 17.0%
Report:               6.0 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: 84                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: 47                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 27                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 65                 
Correct output: 54                  | Program output: 88                 
Correct output: 20                  | Program output: 51                 
Correct output: 8                   | Program output: 31                 
Correct output: 4                   | Program output: 52                 
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 65                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 88                 
Correct output: 8                   | Program output: 36                 
Correct output: 23                  | Program output: 43                 
Correct output: -32                 | Program output: -19                
Correct output: -18                 | Program output: 66                 
Correct output: -26                 | Program output: 22                 
Correct output: 14                  | Program output: 69                 
Correct output: -92                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: 61                 
Correct output: -83                 | Program output: -36                
Correct output: -27                 | Program output: 97                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 8                  
Correct output: 25                  | Program output: 83                 
Correct output: -75                 | Program output: -72                
Correct output: -73                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: 61                 
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: 93                 
Correct output: -18                 | Program output: -14                
Correct output: 1                   | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -4                 
Correct output: -42                 | Program output: 40                 
Correct output: -24                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: 30                 
Correct output: -83                 | Program output: -23                
Correct output: -54                 | Program output: 92                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: 87                 
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: 24                 
Correct output: -91                 | Program output: 88                 
Correct output: -37                 | Program output: 21                 
Correct output: -68                 | Program output: 42                 
Correct output: -29                 | Program output: 72                 
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 98                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -19                
Correct output: -86                 | Program output: 82                 
Correct output: -90                 | Program output: 51                 
Correct output: -61                 | Program output: 71                 
Correct output: -96                 | Program output: -15                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -72                
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: 34                 
Correct output: -76                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_dup_times})
Lexicase best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (integer_empty integer_yank boolean_rot in3) (boolean_invert_first_then_and boolean_yank) () integer_yankdup) (integer_swap print_integer) (boolean_dup_times exec_noop) integer_eq exec_dup_items) integer_dec boolean_dup_times)
Lexicase best errors: [0 1 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_dup_times})
Zero cases best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (integer_empty integer_yank boolean_rot in3) (boolean_invert_first_then_and boolean_yank) () integer_yankdup) (integer_swap print_integer) (boolean_dup_times exec_noop) integer_eq exec_dup_items) integer_dec boolean_dup_times)
Zero cases best errors: [0 1 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (83 342 82 79 4 79 348 793 352 792)
Population mean number of elite cases: 2.95
Count of perfect (error zero) individuals by case: (83 342 82 79 4 79 348 793 352 792)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot})
Best program: (boolean_yankdup boolean_and exec_dup_items integer_yankdup integer_sub exec_yank integer_inc exec_eq exec_y_when_autoconstructing (exec_rot (integer_mod integer_dup_times) (exec_when () boolean_flush boolean_stackdepth exec_do*times () in4 integer_fromboolean boolean_or integer_rot) (print_integer integer_empty exec_yankdup exec_pop (integer_max) boolean_yank) boolean_rot) exec_stackdepth integer_dup exec_do*times (exec_dup_times ()) integer_empty boolean_shove in1 exec_do*range (in3 boolean_rot) exec_dup_items print_integer integer_min boolean_stackdepth integer_flush exec_dup_items integer_yank in2 exec_rot () () ())
Errors: [0 1 0 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 46
Size: 60
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.046
Median total errors in population: 7
Error averages by case: (0.917 0.658 0.918 0.921 0.996 0.921 0.652 0.207 0.648 0.208)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.431
Average program size in population (points): 65.819
Average percent parens in population: 0.253
Minimum age in population: 26.67120361328125
Maximum age in population: 30.74950218200684
Average age in population: 28.9663276424408
Median age in population: 29.02320194244385
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8567098
--- Timings ---
Current time: 1559314375945 milliseconds
Total Time:          57.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.8 seconds, 72.2%
Fitness Testing:      9.7 seconds, 16.8%
Report:               6.2 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 550
Test mean error for best: 0.55000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 27                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 65                 
Correct output: 54                  | Program output: 88                 
Correct output: 20                  | Program output: 51                 
Correct output: 8                   | Program output: 31                 
Correct output: 4                   | Program output: 52                 
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 65                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 88                 
Correct output: 8                   | Program output: 36                 
Correct output: 23                  | Program output: 43                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 66                 
Correct output: -26                 | Program output: 22                 
Correct output: 14                  | Program output: 69                 
Correct output: -92                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -12                
Correct output: -83                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -14                
Correct output: 25                  | Program output: 83                 
Correct output: -75                 | Program output: -72                
Correct output: -73                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -71                
Correct output: -63                 | Program output: -52                
Correct output: -43                 | Program output: -31                
Correct output: -3                  | Program output: 0                  
Correct output: -18                 | Program output: -14                
Correct output: 1                   | Program output: 73                 
Correct output: -91                 | Program output: -52                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 40                 
Correct output: -24                 | Program output: 97                 
Correct output: -82                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -66                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -30                
Correct output: -61                 | Program output: -61                
Correct output: -7                  | Program output: 24                 
Correct output: -91                 | Program output: -91                
Correct output: -37                 | Program output: 21                 
Correct output: -68                 | Program output: -10                
Correct output: -29                 | Program output: 72                 
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 98                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -80                
Correct output: -90                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -78                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -11                
Correct output: -94                 | Program output: -72                
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: 34                 
Correct output: -76                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Lexicase best program: (exec_if () (exec_rot (in1 integer_eq) (integer_eq exec_rot () () (in3 tagged_716 boolean_rot in3 boolean_invert_first_then_and boolean_yank integer_yankdup boolean_or print_integer boolean_dup_times exec_swap (integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ()) ())) ()))
Lexicase best errors: [1 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 40
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Zero cases best program: (exec_if () (exec_rot (in1 integer_eq) (integer_eq exec_rot () () (in3 tagged_716 boolean_rot in3 boolean_invert_first_then_and boolean_yank integer_yankdup boolean_or print_integer boolean_dup_times exec_swap (integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ()) ())) ()))
Zero cases best errors: [1 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 40
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (98 94 651 92 486 759 856 391 759 573)
Population mean number of elite cases: 4.76
Count of perfect (error zero) individuals by case: (98 94 651 92 486 759 856 391 759 573)
Population mean number of perfect (error zero) cases: 4.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Best program: (exec_if () (exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716 exec_if (exec_rot (in1 integer_eq exec_rot (in3 tagged_716 boolean_rot) (in3 boolean_invert_first_then_and) (integer_lte) integer_yankdup boolean_or print_integer boolean_dup_times exec_noop) (integer_eq exec_dup_items) () integer_dec boolean_dup_times) (boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ())) () ()) () ()))
Errors: [1 1 0 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 59
Percent parens: 0.339
--- Population Statistics ---
Average total errors in population: 5.241
Median total errors in population: 5
Error averages by case: (0.902 0.906 0.349 0.908 0.514 0.241 0.144 0.609 0.241 0.427)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.274
Average program size in population (points): 50.391
Average percent parens in population: 0.287
Minimum age in population: 27.83251953125
Maximum age in population: 32.2623233795166
Average age in population: 30.5621348400116
Median age in population: 30.66580629348755
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8925241
--- Timings ---
Current time: 1559314378572 milliseconds
Total Time:          60.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.7 seconds, 72.0%
Fitness Testing:     10.1 seconds, 16.6%
Report:               6.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 51                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 63                 
Correct output: 4                   | Program output: 47                 
Correct output: 54                  | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 43                  | Program output: 43                 
Correct output: 52                  | Program output: 86                 
Correct output: 34                  | Program output: 35                 
Correct output: 39                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 57                 
Correct output: 3                   | Program output: 20                 
Correct output: 38                  | Program output: 74                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: -18                
Correct output: -26                 | Program output: -26                
Correct output: 14                  | Program output: 14                 
Correct output: -92                 | Program output: -82                
Correct output: -88                 | Program output: -47                
Correct output: -56                 | Program output: -47                
Correct output: -83                 | Program output: -83                
Correct output: -27                 | Program output: -27                
Correct output: -47                 | Program output: 20                 
Correct output: -65                 | Program output: -14                
Correct output: 25                  | Program output: 25                 
Correct output: -75                 | Program output: -31                
Correct output: -73                 | Program output: 23                 
Correct output: -35                 | Program output: -9                 
Correct output: -77                 | Program output: 20                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -84                
Correct output: -63                 | Program output: -52                
Correct output: -43                 | Program output: -31                
Correct output: -3                  | Program output: -3                 
Correct output: -18                 | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -52                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -42                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -44                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -5                 
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -36                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: 23                 
Correct output: -58                 | Program output: -51                
Correct output: 27                  | Program output: 54                 
Correct output: -71                 | Program output: -66                
Correct output: -13                 | Program output: 73                 
Correct output: -57                 | Program output: -45                
Correct output: -61                 | Program output: -61                
Correct output: -7                  | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -37                 | Program output: 77                 
Correct output: -68                 | Program output: -68                
Correct output: -29                 | Program output: -29                
Correct output: -40                 | Program output: -28                
Correct output: 35                  | Program output: 73                 
Correct output: -93                 | Program output: 36                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -80                
Correct output: -90                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -78                
Correct output: 1                   | Program output: 8                  
Correct output: -69                 | Program output: -64                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -34                
Correct output: -82                 | Program output: -19                
Correct output: -76                 | Program output: -27                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Lexicase best program: (exec_if () (exec_rot (in1 integer_eq exec_noop exec_rot (in3 tagged_716 boolean_rot integer_min) (boolean_invert_first_then_and boolean_invert_first_then_and boolean_yank) () boolean_invert_first_then_and boolean_yank) (integer_yankdup boolean_or print_integer) (boolean_dup_times exec_noop) integer_eq exec_dup_items) integer_dec boolean_dup_times boolean_dup_times boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ())
Lexicase best errors: [0 1 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 48
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Zero cases best program: (exec_if () (exec_rot (in1 integer_eq exec_noop exec_rot (in3 tagged_716 boolean_rot integer_min) (boolean_invert_first_then_and boolean_invert_first_then_and boolean_yank) () boolean_invert_first_then_and boolean_yank) (integer_yankdup boolean_or print_integer) (boolean_dup_times exec_noop) integer_eq exec_dup_items) integer_dec boolean_dup_times boolean_dup_times boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ())
Zero cases best errors: [0 1 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 48
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (444 100 445 444 99 243 244 29 98 245)
Population mean number of elite cases: 2.39
Count of perfect (error zero) individuals by case: (444 100 445 444 99 243 244 29 98 245)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Best program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_flush integer_add integer_flush in4 boolean_empty exec_k () ())) () ())
Errors: [1 0 1 1 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 20
Size: 29
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.609
Median total errors in population: 7
Error averages by case: (0.556 0.9 0.555 0.556 0.901 0.757 0.756 0.971 0.902 0.755)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.111
Average program size in population (points): 58.266
Average percent parens in population: 0.287
Minimum age in population: 29.56992340087891
Maximum age in population: 34.00543546676636
Average age in population: 32.05969806814194
Median age in population: 32.10526561737061
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.005
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 9307015
--- Timings ---
Current time: 1559314381123 milliseconds
Total Time:          63.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.7 seconds, 72.0%
Fitness Testing:     10.5 seconds, 16.6%
Report:               7.1 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 408
Test mean error for best: 0.40800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 20                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 54                  | Program output: 88                 
Correct output: 20                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 13                 
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 62                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 23                  | Program output: 25                 
Correct output: -32                 | Program output: -19                
Correct output: -18                 | Program output: 40                 
Correct output: -26                 | Program output: 21                 
Correct output: 14                  | Program output: 16                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: -36                
Correct output: -27                 | Program output: -1                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: 25                  | Program output: 63                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: -90                
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: 48                 
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -4                 
Correct output: -42                 | Program output: 40                 
Correct output: -24                 | Program output: 79                 
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 25                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: 87                 
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: -7                 
Correct output: -91                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: 42                 
Correct output: -29                 | Program output: 72                 
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 35                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -61                 | Program output: 58                 
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Lexicase best program: (integer_eq exec_rot (in1 integer_eq integer_eq in2 in3 tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()))
Lexicase best errors: [0 1 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Zero cases best program: (integer_eq exec_rot (in1 integer_eq integer_eq in2 in3 tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()))
Zero cases best errors: [0 1 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 305 218 850 312 218 613 609 312 852)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (218 305 218 850 312 218 613 609 312 852)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Best program: (exec_if () (exec_rot (in1 integer_eq exec_noop exec_rot (in2 tagged_716 boolean_rot integer_min) (boolean_invert_first_then_and boolean_invert_first_then_and boolean_yank) () boolean_invert_first_then_and boolean_yank) (integer_yankdup boolean_or print_integer) (boolean_dup_times exec_noop) integer_eq exec_dup_items) integer_dec boolean_dup_times boolean_dup_times boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ())
Errors: [0 1 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 36
Size: 48
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.493
Median total errors in population: 5
Error averages by case: (0.782 0.695 0.782 0.15 0.688 0.782 0.387 0.391 0.688 0.148)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.436
Average program size in population (points): 49.118
Average percent parens in population: 0.270
Minimum age in population: 31.19941329956055
Maximum age in population: 35.02070355415344
Average age in population: 33.64165744280815
Median age in population: 33.56242609024048
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 260
Genome diversity (% unique genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 262
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 9615381
--- Timings ---
Current time: 1559314383693 milliseconds
Total Time:          65.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.7 seconds, 72.3%
Fitness Testing:     10.8 seconds, 16.4%
Report:               7.4 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 200
Test mean error for best: 0.20000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 54                  | Program output: 88                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 43                  | Program output: 43                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 22                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 23                  | Program output: 23                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 40                 
Correct output: -26                 | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: -36                
Correct output: -27                 | Program output: -27                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: 25                  | Program output: 41                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: 0                  
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 40                 
Correct output: -24                 | Program output: 34                 
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -61                
Correct output: -7                  | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -10                
Correct output: -29                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 35                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Lexicase best program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times integer_eq exec_noop exec_rot (in2 tagged_716 boolean_rot integer_min) (boolean_invert_first_then_and boolean_invert_first_then_and boolean_yank) () boolean_invert_first_then_and boolean_yank) integer_yankdup boolean_or print_integer) (boolean_dup_times exec_noop) (integer_eq exec_dup_items) integer_dec boolean_dup_times boolean_dup_times boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 59
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Zero cases best program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times integer_eq exec_noop exec_rot (in2 tagged_716 boolean_rot integer_min) (boolean_invert_first_then_and boolean_invert_first_then_and boolean_yank) () boolean_invert_first_then_and boolean_yank) integer_yankdup boolean_or print_integer) (boolean_dup_times exec_noop) (integer_eq exec_dup_items) integer_dec boolean_dup_times boolean_dup_times boolean_frominteger boolean_dup_times integer_flush exec_do*times () integer_add integer_dup_items integer_add integer_flush in4 boolean_empty exec_k () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 59
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (573 497 495 575 564 574 564 640 498 142)
Population mean number of elite cases: 5.12
Count of perfect (error zero) individuals by case: (573 497 495 575 564 574 564 640 498 142)
Population mean number of perfect (error zero) cases: 5.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Best program: (integer_eq exec_rot (in1 integer_eq integer_eq in2 in3 tagged_716 integer_min integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times integer_add integer_flush in4 boolean_empty exec_k () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 19
Size: 25
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 4.878
Median total errors in population: 5
Error averages by case: (0.427 0.503 0.505 0.425 0.436 0.426 0.436 0.36 0.502 0.858)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.153
Average program size in population (points): 37.769
Average percent parens in population: 0.255
Minimum age in population: 33.65699005126953
Maximum age in population: 36.7039942741394
Average age in population: 35.63667908549309
Median age in population: 35.51705312728882
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 222
Genome diversity (% unique genomes):	 0.41
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.392
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9908115
--- Timings ---
Current time: 1559314386113 milliseconds
Total Time:          68.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.6 seconds, 72.5%
Fitness Testing:     11.1 seconds, 16.2%
Report:               7.6 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 51                 
Correct output: 14                  | Program output: 20                 
Correct output: 38                  | Program output: 89                 
Correct output: 4                   | Program output: 4                  
Correct output: 54                  | Program output: 54                 
Correct output: 20                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 13                 
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 80                 
Correct output: 34                  | Program output: 54                 
Correct output: 39                  | Program output: 59                 
Correct output: 22                  | Program output: 52                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 57                 
Correct output: 3                   | Program output: 20                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 23                  | Program output: 25                 
Correct output: -32                 | Program output: 33                 
Correct output: -18                 | Program output: -18                
Correct output: -26                 | Program output: -26                
Correct output: 14                  | Program output: 16                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -27                 | Program output: -4                 
Correct output: -47                 | Program output: 20                 
Correct output: -65                 | Program output: -65                
Correct output: 25                  | Program output: 25                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -35                 | Program output: -9                 
Correct output: -77                 | Program output: -5                 
Correct output: -60                 | Program output: 1                  
Correct output: -90                 | Program output: -90                
Correct output: -63                 | Program output: 15                 
Correct output: -43                 | Program output: -33                
Correct output: -3                  | Program output: -3                 
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 80                 
Correct output: -91                 | Program output: -17                
Correct output: -23                 | Program output: 3                  
Correct output: -42                 | Program output: -42                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -44                
Correct output: -82                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 25                 
Correct output: -61                 | Program output: -36                
Correct output: -75                 | Program output: 44                 
Correct output: -71                 | Program output: 23                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 54                 
Correct output: -71                 | Program output: -5                 
Correct output: -13                 | Program output: 66                 
Correct output: -57                 | Program output: -56                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: -7                 
Correct output: -91                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -29                 | Program output: -29                
Correct output: -40                 | Program output: -28                
Correct output: 35                  | Program output: 35                 
Correct output: -93                 | Program output: 53                 
Correct output: -93                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -61                 | Program output: -17                
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 52                 
Correct output: -69                 | Program output: -64                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: -19                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Lexicase best program: (exec_if () (exec_rot (in1 integer_eq exec_noop exec_rot (in2 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ())) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 33
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Zero cases best program: (exec_if () (exec_rot (in1 integer_eq exec_noop exec_rot (in2 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ())) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 33
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (808 173 172 172 808 172 924 767 924 808)
Population mean number of elite cases: 5.73
Count of perfect (error zero) individuals by case: (808 173 172 172 808 172 924 767 924 808)
Population mean number of perfect (error zero) cases: 5.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Best program: (exec_if () (exec_rot (in1 integer_eq exec_noop exec_rot (in2 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ())) () ()))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 22
Size: 33
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.272
Median total errors in population: 4
Error averages by case: (0.192 0.827 0.828 0.828 0.192 0.828 0.076 0.233 0.076 0.192)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.854
Average program size in population (points): 39.459
Average percent parens in population: 0.250
Minimum age in population: 35.21562671661377
Maximum age in population: 38.36633992195129
Average age in population: 37.1559071816802
Median age in population: 37.21562671661377
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 302
Genome diversity (% unique genomes):	 0.37
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 308
Syntactic diversity (% unique Push programs):	 0.356
Total error diversity:				 0.009
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 10215062
--- Timings ---
Current time: 1559314388511 milliseconds
Total Time:          70.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.5 seconds, 72.7%
Fitness Testing:     11.4 seconds, 16.1%
Report:               7.8 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: 17                 
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 27                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 47                 
Correct output: 54                  | Program output: 54                 
Correct output: 20                  | Program output: 51                 
Correct output: 8                   | Program output: 31                 
Correct output: 4                   | Program output: 52                 
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 52                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 74                 
Correct output: 4                   | Program output: 55                 
Correct output: 8                   | Program output: 36                 
Correct output: 23                  | Program output: 43                 
Correct output: -32                 | Program output: -19                
Correct output: -18                 | Program output: -18                
Correct output: -26                 | Program output: -26                
Correct output: 14                  | Program output: 17                 
Correct output: -92                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -47                
Correct output: -83                 | Program output: -83                
Correct output: -27                 | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 8                  
Correct output: 25                  | Program output: 25                 
Correct output: -75                 | Program output: -72                
Correct output: -73                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: -3                 
Correct output: -18                 | Program output: -14                
Correct output: 1                   | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -4                 
Correct output: -42                 | Program output: -42                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: -29                
Correct output: -83                 | Program output: -23                
Correct output: -54                 | Program output: 56                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: 44                 
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: -51                
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: 24                 
Correct output: -91                 | Program output: -19                
Correct output: -37                 | Program output: 21                 
Correct output: -68                 | Program output: -68                
Correct output: -29                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -19                
Correct output: -86                 | Program output: 82                 
Correct output: -90                 | Program output: 36                 
Correct output: -61                 | Program output: -17                
Correct output: -96                 | Program output: -41                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -34                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -27                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Lexicase best program: (exec_if () (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ())))
Lexicase best errors: [0 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Zero cases best program: (exec_if () (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ())))
Zero cases best errors: [0 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (178 178 178 712 713 322 724 724 724 725)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (178 178 178 712 713 322 724 724 724 725)
Population mean number of perfect (error zero) cases: 5.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Best program: (exec_if () (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ())))
Errors: [0 0 0 1 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 4.822
Median total errors in population: 4
Error averages by case: (0.822 0.822 0.822 0.288 0.287 0.678 0.276 0.276 0.276 0.275)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.16
Average program size in population (points): 33.639
Average percent parens in population: 0.314
Minimum age in population: 36.59726130962372
Maximum age in population: 40.36633992195129
Average age in population: 38.90414009451866
Median age in population: 38.98180061578751
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 409
Genome diversity (% unique genomes):	 0.338
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 410
Syntactic diversity (% unique Push programs):	 0.331
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 10450120
--- Timings ---
Current time: 1559314390813 milliseconds
Total Time:          73.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.4 seconds, 73.0%
Fitness Testing:     11.7 seconds, 16.0%
Report:               8.0 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 200
Test mean error for best: 0.20000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -39                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 54                  | Program output: 88                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 43                  | Program output: 43                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 22                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 23                  | Program output: 23                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 40                 
Correct output: -26                 | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: -36                
Correct output: -27                 | Program output: -27                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: 25                  | Program output: 41                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: 0                  
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 40                 
Correct output: -24                 | Program output: 34                 
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -61                
Correct output: -7                  | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -10                
Correct output: -29                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 35                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Lexicase best program: (integer_eq exec_rot (in1 integer_eq integer_eq in2 in3 tagged_716 integer_min integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times integer_add integer_flush in4 boolean_empty exec_k () ()) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 25
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Zero cases best program: (integer_eq exec_rot (in1 integer_eq integer_eq in2 in3 tagged_716 integer_min integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times integer_add integer_flush in4 boolean_empty exec_k () ()) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 25
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (623 429 947 611 947 886 345 947 624 428)
Population mean number of elite cases: 6.79
Count of perfect (error zero) individuals by case: (623 429 947 611 947 886 345 947 624 428)
Population mean number of perfect (error zero) cases: 6.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger})
Best program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times integer_eq exec_noop exec_rot (in2 tagged_716 boolean_rot integer_min) (boolean_invert_first_then_and boolean_invert_first_then_and boolean_yank) () boolean_invert_first_then_and boolean_yank) integer_yankdup boolean_or print_integer) (boolean_dup_times exec_noop) (integer_eq exec_dup_items) integer_dec boolean_dup_times boolean_dup_times boolean_frominteger)
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 3.213
Median total errors in population: 3
Error averages by case: (0.377 0.571 0.053 0.389 0.053 0.114 0.655 0.053 0.376 0.572)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.121
Average program size in population (points): 31.04
Average percent parens in population: 0.292
Minimum age in population: 37.97889590263367
Maximum age in population: 42.02883805334568
Average age in population: 40.64318996714056
Median age in population: 40.67261791229248
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 297
Genome diversity (% unique genomes):	 0.376
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 297
Syntactic diversity (% unique Push programs):	 0.372
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 10673359
--- Timings ---
Current time: 1559314393192 milliseconds
Total Time:          75.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.3 seconds, 73.3%
Fitness Testing:     11.9 seconds, 15.8%
Report:               8.2 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 207
Test mean error for best: 0.20700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 20                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 54                  | Program output: 54                 
Correct output: 20                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 13                 
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 52                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 23                  | Program output: 25                 
Correct output: -32                 | Program output: -19                
Correct output: -18                 | Program output: -18                
Correct output: -26                 | Program output: -26                
Correct output: 14                  | Program output: 16                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -27                 | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: 25                  | Program output: 25                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: -90                
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: -3                 
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -4                 
Correct output: -42                 | Program output: -42                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 25                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: 44                 
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: -7                 
Correct output: -91                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -29                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 35                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -61                 | Program output: -17                
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction tagged_716} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Lexicase best program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_shove integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ())) () ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 45
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction tagged_716} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Zero cases best program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_shove integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ())) () ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 45
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (653 653 726 748 719 350 927 924 927 250)
Population mean number of elite cases: 6.88
Count of perfect (error zero) individuals by case: (653 653 726 748 719 350 927 924 927 250)
Population mean number of perfect (error zero) cases: 6.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction tagged_716} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Best program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_shove integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ())) () ())
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 33
Size: 45
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 3.123
Median total errors in population: 2
Error averages by case: (0.347 0.347 0.274 0.252 0.281 0.65 0.073 0.076 0.073 0.75)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.063
Average program size in population (points): 33.729
Average percent parens in population: 0.260
Minimum age in population: 38.97889590263367
Maximum age in population: 43.82720926403999
Average age in population: 42.04227006847411
Median age in population: 42.13255478441715
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 135
Genome diversity (% unique genomes):	 0.417
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.408
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 10927913
--- Timings ---
Current time: 1559314395597 milliseconds
Total Time:          77.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.2 seconds, 73.4%
Fitness Testing:     12.2 seconds, 15.6%
Report:               8.4 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 207
Test mean error for best: 0.20700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 20                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 54                  | Program output: 54                 
Correct output: 20                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 13                 
Correct output: 43                  | Program output: 74                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 52                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 23                  | Program output: 25                 
Correct output: -32                 | Program output: -19                
Correct output: -18                 | Program output: -18                
Correct output: -26                 | Program output: -26                
Correct output: 14                  | Program output: 16                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -27                 | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: 25                  | Program output: 25                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: -90                
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: -3                 
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 73                 
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -4                 
Correct output: -42                 | Program output: -42                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 25                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: 44                 
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -60                
Correct output: -7                  | Program output: -7                 
Correct output: -91                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -29                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 35                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -61                 | Program output: -17                
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction tagged_716} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Lexicase best program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_shove integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ())) () ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 45
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction tagged_716} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Zero cases best program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_shove integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ())) () ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 45
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (716 707 710 431 708 836 707 841 586 932)
Population mean number of elite cases: 7.17
Count of perfect (error zero) individuals by case: (716 707 710 431 708 836 707 841 586 932)
Population mean number of perfect (error zero) cases: 7.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction tagged_716} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Best program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_shove integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ())) () ())
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 33
Size: 45
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 2.826
Median total errors in population: 1
Error averages by case: (0.284 0.293 0.29 0.569 0.292 0.164 0.293 0.159 0.414 0.068)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.421
Average program size in population (points): 41.485
Average percent parens in population: 0.267
Minimum age in population: 39.97889590263367
Maximum age in population: 45.61652341485023
Average age in population: 44.41265607906133
Median age in population: 44.57720926403999
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 324
Genome diversity (% unique genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 325
Syntactic diversity (% unique Push programs):	 0.433
Total error diversity:				 0.01
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 11239502
--- Timings ---
Current time: 1559314398035 milliseconds
Total Time:          80.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.1 seconds, 73.6%
Fitness Testing:     12.5 seconds, 15.6%
Report:               8.6 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 54                  | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 43                  | Program output: 43                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 22                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 23                  | Program output: 23                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: -18                
Correct output: -26                 | Program output: -26                
Correct output: 14                  | Program output: 14                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -27                 | Program output: -27                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: 25                  | Program output: 25                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: -3                 
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -42                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -61                
Correct output: -7                  | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -29                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 35                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction tagged_716} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Lexicase best program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 52
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction tagged_716} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Zero cases best program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 52
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (491 536 854 692 493 932 852 938 854 536)
Population mean number of elite cases: 7.18
Count of perfect (error zero) individuals by case: (491 536 854 692 493 932 852 938 854 536)
Population mean number of perfect (error zero) cases: 7.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction tagged_716} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_716} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction tagged_716} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k})
Best program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 40
Size: 52
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 2.822
Median total errors in population: 2
Error averages by case: (0.509 0.464 0.146 0.308 0.507 0.068 0.148 0.062 0.146 0.464)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.545
Average program size in population (points): 40.222
Average percent parens in population: 0.265
Minimum age in population: 40.97889590263367
Maximum age in population: 47.57720926403999
Average age in population: 46.00080733939633
Median age in population: 46.07720926403999
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 205
Genome diversity (% unique genomes):	 0.478
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 208
Syntactic diversity (% unique Push programs):	 0.473
Total error diversity:				 0.01
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 11541038
--- Timings ---
Current time: 1559314400482 milliseconds
Total Time:          82.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.9 seconds, 73.7%
Fitness Testing:     12.8 seconds, 15.5%
Report:               8.9 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 30
Successful program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 52


Auto-simplifying with starting size: 52
step: 0
program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 500
program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 1000
program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 1500
program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 2000
program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 2500
program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 3000
program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 3500
program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 4000
program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 4500
program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 5000
program: (integer_eq exec_rot (in1 integer_eq integer_eq exec_rot (in3 tagged_716) (exec_rot (in1 tagged_716 boolean_rot tagged_716 integer_min integer_yankdup integer_swap print_integer) (boolean_dup_times exec_noop) (integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty integer_add in2 tagged_716 boolean_rot integer_min) boolean_invert_first_then_and exec_noop) (integer_shove integer_add integer_flush in4 boolean_empty exec_k () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -54                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -6                  | Program output: -6                 
Correct output: -20                 | Program output: -20                
Correct output: -39                 | Program output: -39                
Correct output: -64                 | Program output: -64                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: 74                  | Program output: 74                 
Correct output: -30                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 54                  | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 43                  | Program output: 43                 
Correct output: 52                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 22                  | Program output: 22                 
Correct output: 74                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 23                  | Program output: 23                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: -18                
Correct output: -26                 | Program output: -26                
Correct output: 14                  | Program output: 14                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -27                 | Program output: -27                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: 25                  | Program output: 25                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -63                 | Program output: -63                
Correct output: -43                 | Program output: -43                
Correct output: -3                  | Program output: -3                 
Correct output: -18                 | Program output: -18                
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -91                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -42                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -61                 | Program output: -61                
Correct output: -7                  | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -29                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 35                  | Program output: 35                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: 1                   | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -76                 | Program output: -76                
;;******************************
