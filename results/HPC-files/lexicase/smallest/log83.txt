Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-30 42 42 42] -30] [[70 70 70 70] 70] [[46 86 46 46] 46] [[-18 8 8 8] -18] [[-89 63 63 63] -89] [[-56 -56 -42 -56] -56] [[-12 5 5 5] -12] [[-69 25 -69 -69] -69] [[-73 -73 -73 5] -73] [[49 -91 49 49] -91] [(-64 -64 -64 -64) -64] [(99 99 99 99) 99] [(-2 -2 -2 -2) -2] [(-36 -36 -36 -36) -36] [(81 81 81 81) 81] [(4 56 39 35) 4] [(94 87 52 86) 52] [(100 73 33 17) 17] [(2 87 44 49) 2] [(50 14 43 4) 4] [(63 21 14 36) 14] [(78 93 82 8) 8] [(91 23 70 20) 20] [(83 11 12 59) 11] [(93 8 64 18) 8] [(77 54 66 78) 54] [(8 62 97 25) 8] [(56 68 14 82) 14] [(65 27 53 91) 27] [(7 39 52 80) 7] [(28 17 72 11) 11] [(87 67 44 63) 44] [(21 25 95 49) 21] [(53 51 63 15) 15] [(56 26 79 90) 26] [(-4 15 -97 68) -97] [(63 68 -94 -36) -94] [(-30 94 63 -93) -93] [(-30 -29 27 -9) -30] [(-66 97 -74 13) -74] [(2 44 37 -6) -6] [(42 63 38 53) 38] [(-51 -97 37 -66) -97] [(91 67 -21 -56) -56] [(14 -21 48 22) -21] [(39 35 -4 55) -4] [(10 44 -86 82) -86] [(85 23 39 73) 23] [(65 43 41 -15) -15] [(77 -36 78 84) -36] [(-95 49 -65 87) -95] [(-68 -43 87 -77) -77] [(48 35 9 -17) -17] [(81 39 78 27) 27] [(27 -52 -100 -50) -100] [(-78 -76 -75 93) -78] [(27 -9 78 56) -9] [(90 48 -8 -50) -50] [(12 61 -76 -43) -76] [(60 -94 72 -80) -94] [(-37 -75 87 -57) -75] [(-2 -3 -9 -65) -65] [(-96 -34 -51 95) -96] [(36 -93 -26 69) -93] [(38 87 83 97) 38] [(-85 22 -64 34) -85] [(-80 95 26 -10) -80] [(-40 33 68 87) -40] [(-36 4 -67 -21) -67] [(-25 56 42 56) -25] [(-25 -13 -60 -50) -60] [(68 -28 41 -13) -28] [(91 23 -31 22) -31] [(-81 -31 -17 -61) -81] [(-49 59 25 84) -49] [(-63 -83 4 7) -83] [(92 78 -2 61) -2] [(41 -20 -82 -45) -82] [(57 -4 -27 85) -27] [(-33 -61 -50 -20) -61] [(-83 29 -93 -94) -94] [(-92 -88 -88 -82) -92] [(-27 -53 18 33) -53] [(26 -49 29 -69) -69] [(69 41 35 -81) -81] [(-39 -69 -11 25) -69] [(-9 -43 -32 48) -43] [(-12 2 -44 97) -44] [(-12 -49 -7 -58) -58] [(33 -36 42 -28) -36] [(98 -16 -51 45) -51] [(12 49 -4 90) -4] [(-29 -75 -93 34) -93] [(-77 46 98 -52) -77] [(-73 24 42 51) -73])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-30 42 42 42] -30]
Train Case:   6 | Input/Output: [[70 70 70 70] 70]
Train Case:   7 | Input/Output: [[46 86 46 46] 46]
Train Case:   8 | Input/Output: [[-18 8 8 8] -18]
Train Case:   9 | Input/Output: [[-89 63 63 63] -89]
Train Case:  10 | Input/Output: [[-56 -56 -42 -56] -56]
Train Case:  11 | Input/Output: [[-12 5 5 5] -12]
Train Case:  12 | Input/Output: [[-69 25 -69 -69] -69]
Train Case:  13 | Input/Output: [[-73 -73 -73 5] -73]
Train Case:  14 | Input/Output: [[49 -91 49 49] -91]
Train Case:  15 | Input/Output: [(-64 -64 -64 -64) -64]
Train Case:  16 | Input/Output: [(99 99 99 99) 99]
Train Case:  17 | Input/Output: [(-2 -2 -2 -2) -2]
Train Case:  18 | Input/Output: [(-36 -36 -36 -36) -36]
Train Case:  19 | Input/Output: [(81 81 81 81) 81]
Train Case:  20 | Input/Output: [(4 56 39 35) 4]
Train Case:  21 | Input/Output: [(94 87 52 86) 52]
Train Case:  22 | Input/Output: [(100 73 33 17) 17]
Train Case:  23 | Input/Output: [(2 87 44 49) 2]
Train Case:  24 | Input/Output: [(50 14 43 4) 4]
Train Case:  25 | Input/Output: [(63 21 14 36) 14]
Train Case:  26 | Input/Output: [(78 93 82 8) 8]
Train Case:  27 | Input/Output: [(91 23 70 20) 20]
Train Case:  28 | Input/Output: [(83 11 12 59) 11]
Train Case:  29 | Input/Output: [(93 8 64 18) 8]
Train Case:  30 | Input/Output: [(77 54 66 78) 54]
Train Case:  31 | Input/Output: [(8 62 97 25) 8]
Train Case:  32 | Input/Output: [(56 68 14 82) 14]
Train Case:  33 | Input/Output: [(65 27 53 91) 27]
Train Case:  34 | Input/Output: [(7 39 52 80) 7]
Train Case:  35 | Input/Output: [(28 17 72 11) 11]
Train Case:  36 | Input/Output: [(87 67 44 63) 44]
Train Case:  37 | Input/Output: [(21 25 95 49) 21]
Train Case:  38 | Input/Output: [(53 51 63 15) 15]
Train Case:  39 | Input/Output: [(56 26 79 90) 26]
Train Case:  40 | Input/Output: [(-4 15 -97 68) -97]
Train Case:  41 | Input/Output: [(63 68 -94 -36) -94]
Train Case:  42 | Input/Output: [(-30 94 63 -93) -93]
Train Case:  43 | Input/Output: [(-30 -29 27 -9) -30]
Train Case:  44 | Input/Output: [(-66 97 -74 13) -74]
Train Case:  45 | Input/Output: [(2 44 37 -6) -6]
Train Case:  46 | Input/Output: [(42 63 38 53) 38]
Train Case:  47 | Input/Output: [(-51 -97 37 -66) -97]
Train Case:  48 | Input/Output: [(91 67 -21 -56) -56]
Train Case:  49 | Input/Output: [(14 -21 48 22) -21]
Train Case:  50 | Input/Output: [(39 35 -4 55) -4]
Train Case:  51 | Input/Output: [(10 44 -86 82) -86]
Train Case:  52 | Input/Output: [(85 23 39 73) 23]
Train Case:  53 | Input/Output: [(65 43 41 -15) -15]
Train Case:  54 | Input/Output: [(77 -36 78 84) -36]
Train Case:  55 | Input/Output: [(-95 49 -65 87) -95]
Train Case:  56 | Input/Output: [(-68 -43 87 -77) -77]
Train Case:  57 | Input/Output: [(48 35 9 -17) -17]
Train Case:  58 | Input/Output: [(81 39 78 27) 27]
Train Case:  59 | Input/Output: [(27 -52 -100 -50) -100]
Train Case:  60 | Input/Output: [(-78 -76 -75 93) -78]
Train Case:  61 | Input/Output: [(27 -9 78 56) -9]
Train Case:  62 | Input/Output: [(90 48 -8 -50) -50]
Train Case:  63 | Input/Output: [(12 61 -76 -43) -76]
Train Case:  64 | Input/Output: [(60 -94 72 -80) -94]
Train Case:  65 | Input/Output: [(-37 -75 87 -57) -75]
Train Case:  66 | Input/Output: [(-2 -3 -9 -65) -65]
Train Case:  67 | Input/Output: [(-96 -34 -51 95) -96]
Train Case:  68 | Input/Output: [(36 -93 -26 69) -93]
Train Case:  69 | Input/Output: [(38 87 83 97) 38]
Train Case:  70 | Input/Output: [(-85 22 -64 34) -85]
Train Case:  71 | Input/Output: [(-80 95 26 -10) -80]
Train Case:  72 | Input/Output: [(-40 33 68 87) -40]
Train Case:  73 | Input/Output: [(-36 4 -67 -21) -67]
Train Case:  74 | Input/Output: [(-25 56 42 56) -25]
Train Case:  75 | Input/Output: [(-25 -13 -60 -50) -60]
Train Case:  76 | Input/Output: [(68 -28 41 -13) -28]
Train Case:  77 | Input/Output: [(91 23 -31 22) -31]
Train Case:  78 | Input/Output: [(-81 -31 -17 -61) -81]
Train Case:  79 | Input/Output: [(-49 59 25 84) -49]
Train Case:  80 | Input/Output: [(-63 -83 4 7) -83]
Train Case:  81 | Input/Output: [(92 78 -2 61) -2]
Train Case:  82 | Input/Output: [(41 -20 -82 -45) -82]
Train Case:  83 | Input/Output: [(57 -4 -27 85) -27]
Train Case:  84 | Input/Output: [(-33 -61 -50 -20) -61]
Train Case:  85 | Input/Output: [(-83 29 -93 -94) -94]
Train Case:  86 | Input/Output: [(-92 -88 -88 -82) -92]
Train Case:  87 | Input/Output: [(-27 -53 18 33) -53]
Train Case:  88 | Input/Output: [(26 -49 29 -69) -69]
Train Case:  89 | Input/Output: [(69 41 35 -81) -81]
Train Case:  90 | Input/Output: [(-39 -69 -11 25) -69]
Train Case:  91 | Input/Output: [(-9 -43 -32 48) -43]
Train Case:  92 | Input/Output: [(-12 2 -44 97) -44]
Train Case:  93 | Input/Output: [(-12 -49 -7 -58) -58]
Train Case:  94 | Input/Output: [(33 -36 42 -28) -36]
Train Case:  95 | Input/Output: [(98 -16 -51 45) -51]
Train Case:  96 | Input/Output: [(12 49 -4 90) -4]
Train Case:  97 | Input/Output: [(-29 -75 -93 34) -93]
Train Case:  98 | Input/Output: [(-77 46 98 -52) -77]
Train Case:  99 | Input/Output: [(-73 24 42 51) -73]
Test Case:   0 | Input/Output: [[-98 -98 -98 64] -98]
Test Case:   1 | Input/Output: [[-8 -73 -8 -8] -73]
Test Case:   2 | Input/Output: [[70 70 70 44] 44]
Test Case:   3 | Input/Output: [[-50 -50 -50 100] -50]
Test Case:   4 | Input/Output: [[-41 -54 -41 -41] -54]
Test Case:   5 | Input/Output: [[-26 11 11 11] -26]
Test Case:   6 | Input/Output: [[-8 -8 -8 -22] -22]
Test Case:   7 | Input/Output: [[38 -33 38 38] -33]
Test Case:   8 | Input/Output: [[27 27 86 27] 27]
Test Case:   9 | Input/Output: [[-75 -75 -38 -75] -75]
Test Case:  10 | Input/Output: [[-23 -72 -72 -72] -72]
Test Case:  11 | Input/Output: [[82 -64 -64 -64] -64]
Test Case:  12 | Input/Output: [[56 56 -99 56] -99]
Test Case:  13 | Input/Output: [[-28 -93 -93 -93] -93]
Test Case:  14 | Input/Output: [[49 -8 49 49] -8]
Test Case:  15 | Input/Output: [[25 25 -12 25] -12]
Test Case:  16 | Input/Output: [[-40 -52 -52 -52] -52]
Test Case:  17 | Input/Output: [[-65 -65 -13 -65] -65]
Test Case:  18 | Input/Output: [[73 -51 73 73] -51]
Test Case:  19 | Input/Output: [[68 68 64 68] 64]
Test Case:  20 | Input/Output: [[-6 -6 -6 45] -6]
Test Case:  21 | Input/Output: [[-23 -8 -8 -8] -23]
Test Case:  22 | Input/Output: [[-5 -5 74 -5] -5]
Test Case:  23 | Input/Output: [[45 -16 -16 -16] -16]
Test Case:  24 | Input/Output: [[5 90 90 90] 5]
Test Case:  25 | Input/Output: [[55 55 83 55] 55]
Test Case:  26 | Input/Output: [[-30 -30 -38 -30] -38]
Test Case:  27 | Input/Output: [[54 54 54 -89] -89]
Test Case:  28 | Input/Output: [[-27 -27 -69 -27] -69]
Test Case:  29 | Input/Output: [[66 -22 66 66] -22]
Test Case:  30 | Input/Output: [[-83 -83 -81 -83] -83]
Test Case:  31 | Input/Output: [[-49 -3 -49 -49] -49]
Test Case:  32 | Input/Output: [[-5 82 -5 -5] -5]
Test Case:  33 | Input/Output: [[50 -80 -80 -80] -80]
Test Case:  34 | Input/Output: [[92 -100 92 92] -100]
Test Case:  35 | Input/Output: [[2 2 2 10] 2]
Test Case:  36 | Input/Output: [[38 -34 38 38] -34]
Test Case:  37 | Input/Output: [[-65 -65 -65 -96] -96]
Test Case:  38 | Input/Output: [[36 -52 -52 -52] -52]
Test Case:  39 | Input/Output: [[-98 -98 -98 -38] -98]
Test Case:  40 | Input/Output: [[52 -23 52 52] -23]
Test Case:  41 | Input/Output: [[61 -96 -96 -96] -96]
Test Case:  42 | Input/Output: [[80 80 80 14] 14]
Test Case:  43 | Input/Output: [[37 -40 37 37] -40]
Test Case:  44 | Input/Output: [[-12 82 -12 -12] -12]
Test Case:  45 | Input/Output: [[58 -59 -59 -59] -59]
Test Case:  46 | Input/Output: [[21 11 11 11] 11]
Test Case:  47 | Input/Output: [[36 36 -58 36] -58]
Test Case:  48 | Input/Output: [[-51 -51 -41 -51] -51]
Test Case:  49 | Input/Output: [[-12 -12 -38 -12] -38]
Test Case:  50 | Input/Output: [[72 63 63 63] 63]
Test Case:  51 | Input/Output: [[-88 -88 -99 -88] -99]
Test Case:  52 | Input/Output: [[-87 -87 -17 -87] -87]
Test Case:  53 | Input/Output: [[68 68 -79 68] -79]
Test Case:  54 | Input/Output: [[90 19 90 90] 19]
Test Case:  55 | Input/Output: [[41 -8 -8 -8] -8]
Test Case:  56 | Input/Output: [[60 60 60 -84] -84]
Test Case:  57 | Input/Output: [[79 79 -34 79] -34]
Test Case:  58 | Input/Output: [[-49 -33 -49 -49] -49]
Test Case:  59 | Input/Output: [[-45 -45 -29 -45] -45]
Test Case:  60 | Input/Output: [[54 54 -31 54] -31]
Test Case:  61 | Input/Output: [[-83 -83 -79 -83] -83]
Test Case:  62 | Input/Output: [[-79 -79 94 -79] -79]
Test Case:  63 | Input/Output: [[15 15 15 30] 15]
Test Case:  64 | Input/Output: [[-7 -7 12 -7] -7]
Test Case:  65 | Input/Output: [[9 9 9 2] 2]
Test Case:  66 | Input/Output: [[-15 -17 -17 -17] -17]
Test Case:  67 | Input/Output: [[-94 54 54 54] -94]
Test Case:  68 | Input/Output: [[62 62 59 62] 59]
Test Case:  69 | Input/Output: [[-26 -26 48 -26] -26]
Test Case:  70 | Input/Output: [[-55 33 -55 -55] -55]
Test Case:  71 | Input/Output: [[-56 -56 39 -56] -56]
Test Case:  72 | Input/Output: [[85 -64 -64 -64] -64]
Test Case:  73 | Input/Output: [[28 28 92 28] 28]
Test Case:  74 | Input/Output: [[-20 27 -20 -20] -20]
Test Case:  75 | Input/Output: [[75 35 35 35] 35]
Test Case:  76 | Input/Output: [[15 -44 15 15] -44]
Test Case:  77 | Input/Output: [[22 58 22 22] 22]
Test Case:  78 | Input/Output: [[26 26 -66 26] -66]
Test Case:  79 | Input/Output: [[-61 -61 -93 -61] -93]
Test Case:  80 | Input/Output: [[-89 -89 -89 -87] -89]
Test Case:  81 | Input/Output: [[68 -98 68 68] -98]
Test Case:  82 | Input/Output: [[15 -73 15 15] -73]
Test Case:  83 | Input/Output: [[-91 -91 -91 59] -91]
Test Case:  84 | Input/Output: [[-92 46 -92 -92] -92]
Test Case:  85 | Input/Output: [[35 100 100 100] 35]
Test Case:  86 | Input/Output: [[73 73 73 -99] -99]
Test Case:  87 | Input/Output: [[-47 -10 -10 -10] -47]
Test Case:  88 | Input/Output: [[-48 -48 -48 78] -48]
Test Case:  89 | Input/Output: [[-52 -52 -9 -52] -52]
Test Case:  90 | Input/Output: [[17 17 -36 17] -36]
Test Case:  91 | Input/Output: [[-48 -85 -48 -48] -85]
Test Case:  92 | Input/Output: [[7 67 7 7] 7]
Test Case:  93 | Input/Output: [[-83 -90 -83 -83] -90]
Test Case:  94 | Input/Output: [[-34 -91 -91 -91] -91]
Test Case:  95 | Input/Output: [[-63 -63 -63 -14] -63]
Test Case:  96 | Input/Output: [[-62 34 34 34] -62]
Test Case:  97 | Input/Output: [[13 13 28 13] 13]
Test Case:  98 | Input/Output: [[-85 -85 -85 53] -85]
Test Case:  99 | Input/Output: [[57 69 57 57] 57]
Test Case: 100 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 101 | Input/Output: [(97 97 97 97) 97]
Test Case: 102 | Input/Output: [(52 52 52 52) 52]
Test Case: 103 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 104 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 105 | Input/Output: [(33 33 33 33) 33]
Test Case: 106 | Input/Output: [(23 23 23 23) 23]
Test Case: 107 | Input/Output: [(4 4 4 4) 4]
Test Case: 108 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 109 | Input/Output: [(92 92 92 92) 92]
Test Case: 110 | Input/Output: [(35 35 35 35) 35]
Test Case: 111 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 112 | Input/Output: [(5 5 5 5) 5]
Test Case: 113 | Input/Output: [(91 91 91 91) 91]
Test Case: 114 | Input/Output: [(30 30 30 30) 30]
Test Case: 115 | Input/Output: [(92 92 92 92) 92]
Test Case: 116 | Input/Output: [(96 96 96 96) 96]
Test Case: 117 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 118 | Input/Output: [(35 35 35 35) 35]
Test Case: 119 | Input/Output: [(33 33 33 33) 33]
Test Case: 120 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 121 | Input/Output: [(63 63 63 63) 63]
Test Case: 122 | Input/Output: [(79 79 79 79) 79]
Test Case: 123 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 124 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 125 | Input/Output: [(79 79 79 79) 79]
Test Case: 126 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 127 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 128 | Input/Output: [(99 99 99 99) 99]
Test Case: 129 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 130 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 131 | Input/Output: [(11 11 11 11) 11]
Test Case: 132 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 133 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 134 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 135 | Input/Output: [(32 32 32 32) 32]
Test Case: 136 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 137 | Input/Output: [(72 72 72 72) 72]
Test Case: 138 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 139 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 140 | Input/Output: [(34 34 34 34) 34]
Test Case: 141 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 142 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 143 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 144 | Input/Output: [(66 66 66 66) 66]
Test Case: 145 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 146 | Input/Output: [(22 22 22 22) 22]
Test Case: 147 | Input/Output: [(66 66 66 66) 66]
Test Case: 148 | Input/Output: [(93 93 93 93) 93]
Test Case: 149 | Input/Output: [(12 12 12 12) 12]
Test Case: 150 | Input/Output: [(60 60 60 60) 60]
Test Case: 151 | Input/Output: [(28 28 28 28) 28]
Test Case: 152 | Input/Output: [(64 64 64 64) 64]
Test Case: 153 | Input/Output: [(12 12 12 12) 12]
Test Case: 154 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 155 | Input/Output: [(6 6 6 6) 6]
Test Case: 156 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 157 | Input/Output: [(45 45 45 45) 45]
Test Case: 158 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 159 | Input/Output: [(88 88 88 88) 88]
Test Case: 160 | Input/Output: [(50 50 50 50) 50]
Test Case: 161 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 162 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 163 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 164 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 165 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 166 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 167 | Input/Output: [(95 95 95 95) 95]
Test Case: 168 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 169 | Input/Output: [(67 67 67 67) 67]
Test Case: 170 | Input/Output: [(97 97 97 97) 97]
Test Case: 171 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 172 | Input/Output: [(10 10 10 10) 10]
Test Case: 173 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 174 | Input/Output: [(57 57 57 57) 57]
Test Case: 175 | Input/Output: [(44 44 44 44) 44]
Test Case: 176 | Input/Output: [(70 70 70 70) 70]
Test Case: 177 | Input/Output: [(9 9 9 9) 9]
Test Case: 178 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 179 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 180 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 181 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 182 | Input/Output: [(75 75 75 75) 75]
Test Case: 183 | Input/Output: [(85 85 85 85) 85]
Test Case: 184 | Input/Output: [(35 35 35 35) 35]
Test Case: 185 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 186 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 187 | Input/Output: [(44 44 44 44) 44]
Test Case: 188 | Input/Output: [(14 14 14 14) 14]
Test Case: 189 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 190 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 191 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 192 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 193 | Input/Output: [(46 46 46 46) 46]
Test Case: 194 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 195 | Input/Output: [(60 60 60 60) 60]
Test Case: 196 | Input/Output: [(74 74 74 74) 74]
Test Case: 197 | Input/Output: [(11 11 11 11) 11]
Test Case: 198 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 199 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 200 | Input/Output: [(17 70 51 37) 17]
Test Case: 201 | Input/Output: [(2 41 86 58) 2]
Test Case: 202 | Input/Output: [(50 13 37 66) 13]
Test Case: 203 | Input/Output: [(65 93 83 54) 54]
Test Case: 204 | Input/Output: [(52 64 99 84) 52]
Test Case: 205 | Input/Output: [(8 27 59 60) 8]
Test Case: 206 | Input/Output: [(4 19 90 76) 4]
Test Case: 207 | Input/Output: [(74 68 13 63) 13]
Test Case: 208 | Input/Output: [(27 84 98 43) 27]
Test Case: 209 | Input/Output: [(90 97 83 98) 83]
Test Case: 210 | Input/Output: [(0 49 71 12) 0]
Test Case: 211 | Input/Output: [(72 12 11 79) 11]
Test Case: 212 | Input/Output: [(5 88 29 33) 5]
Test Case: 213 | Input/Output: [(24 73 56 0) 0]
Test Case: 214 | Input/Output: [(34 48 68 16) 16]
Test Case: 215 | Input/Output: [(43 21 23 81) 21]
Test Case: 216 | Input/Output: [(17 50 44 78) 17]
Test Case: 217 | Input/Output: [(16 80 50 79) 16]
Test Case: 218 | Input/Output: [(11 38 64 50) 11]
Test Case: 219 | Input/Output: [(43 93 34 61) 34]
Test Case: 220 | Input/Output: [(6 78 51 56) 6]
Test Case: 221 | Input/Output: [(80 53 7 80) 7]
Test Case: 222 | Input/Output: [(75 74 93 95) 74]
Test Case: 223 | Input/Output: [(62 57 45 50) 45]
Test Case: 224 | Input/Output: [(53 28 37 42) 28]
Test Case: 225 | Input/Output: [(47 4 21 92) 4]
Test Case: 226 | Input/Output: [(90 7 29 46) 7]
Test Case: 227 | Input/Output: [(11 3 65 75) 3]
Test Case: 228 | Input/Output: [(94 80 23 86) 23]
Test Case: 229 | Input/Output: [(1 78 79 100) 1]
Test Case: 230 | Input/Output: [(55 25 15 52) 15]
Test Case: 231 | Input/Output: [(55 26 97 97) 26]
Test Case: 232 | Input/Output: [(55 22 1 3) 1]
Test Case: 233 | Input/Output: [(62 36 40 95) 36]
Test Case: 234 | Input/Output: [(61 59 58 80) 58]
Test Case: 235 | Input/Output: [(15 44 86 89) 15]
Test Case: 236 | Input/Output: [(86 76 36 17) 17]
Test Case: 237 | Input/Output: [(87 95 86 62) 62]
Test Case: 238 | Input/Output: [(98 34 38 55) 34]
Test Case: 239 | Input/Output: [(78 98 63 71) 63]
Test Case: 240 | Input/Output: [(100 31 66 38) 31]
Test Case: 241 | Input/Output: [(33 14 71 40) 14]
Test Case: 242 | Input/Output: [(93 52 4 88) 4]
Test Case: 243 | Input/Output: [(74 69 8 66) 8]
Test Case: 244 | Input/Output: [(39 99 89 12) 12]
Test Case: 245 | Input/Output: [(14 49 68 13) 13]
Test Case: 246 | Input/Output: [(92 35 65 6) 6]
Test Case: 247 | Input/Output: [(34 89 14 26) 14]
Test Case: 248 | Input/Output: [(85 6 9 35) 6]
Test Case: 249 | Input/Output: [(16 40 100 87) 16]
Test Case: 250 | Input/Output: [(60 14 33 14) 14]
Test Case: 251 | Input/Output: [(77 66 23 30) 23]
Test Case: 252 | Input/Output: [(80 3 41 75) 3]
Test Case: 253 | Input/Output: [(67 41 27 76) 27]
Test Case: 254 | Input/Output: [(86 94 26 48) 26]
Test Case: 255 | Input/Output: [(55 54 1 20) 1]
Test Case: 256 | Input/Output: [(6 70 89 99) 6]
Test Case: 257 | Input/Output: [(29 93 58 10) 10]
Test Case: 258 | Input/Output: [(100 58 16 24) 16]
Test Case: 259 | Input/Output: [(59 23 44 46) 23]
Test Case: 260 | Input/Output: [(65 36 30 11) 11]
Test Case: 261 | Input/Output: [(1 83 48 26) 1]
Test Case: 262 | Input/Output: [(17 1 44 17) 1]
Test Case: 263 | Input/Output: [(18 38 35 24) 18]
Test Case: 264 | Input/Output: [(90 65 52 46) 46]
Test Case: 265 | Input/Output: [(97 95 2 14) 2]
Test Case: 266 | Input/Output: [(67 35 54 34) 34]
Test Case: 267 | Input/Output: [(11 73 83 1) 1]
Test Case: 268 | Input/Output: [(39 45 67 93) 39]
Test Case: 269 | Input/Output: [(94 62 12 82) 12]
Test Case: 270 | Input/Output: [(21 1 17 38) 1]
Test Case: 271 | Input/Output: [(41 45 99 10) 10]
Test Case: 272 | Input/Output: [(96 92 54 73) 54]
Test Case: 273 | Input/Output: [(13 86 44 43) 13]
Test Case: 274 | Input/Output: [(34 22 83 100) 22]
Test Case: 275 | Input/Output: [(43 20 66 25) 20]
Test Case: 276 | Input/Output: [(7 69 17 85) 7]
Test Case: 277 | Input/Output: [(87 12 58 31) 12]
Test Case: 278 | Input/Output: [(77 28 64 59) 28]
Test Case: 279 | Input/Output: [(17 89 37 52) 17]
Test Case: 280 | Input/Output: [(54 40 78 40) 40]
Test Case: 281 | Input/Output: [(13 78 13 47) 13]
Test Case: 282 | Input/Output: [(0 39 17 31) 0]
Test Case: 283 | Input/Output: [(0 100 64 51) 0]
Test Case: 284 | Input/Output: [(92 73 60 96) 60]
Test Case: 285 | Input/Output: [(26 91 53 82) 26]
Test Case: 286 | Input/Output: [(24 100 55 68) 24]
Test Case: 287 | Input/Output: [(45 96 43 26) 26]
Test Case: 288 | Input/Output: [(12 5 60 89) 5]
Test Case: 289 | Input/Output: [(84 88 7 48) 7]
Test Case: 290 | Input/Output: [(25 91 22 89) 22]
Test Case: 291 | Input/Output: [(73 22 19 38) 19]
Test Case: 292 | Input/Output: [(58 40 0 2) 0]
Test Case: 293 | Input/Output: [(73 76 18 86) 18]
Test Case: 294 | Input/Output: [(20 41 47 94) 20]
Test Case: 295 | Input/Output: [(52 74 46 96) 46]
Test Case: 296 | Input/Output: [(73 50 0 95) 0]
Test Case: 297 | Input/Output: [(66 53 81 29) 29]
Test Case: 298 | Input/Output: [(9 58 70 40) 9]
Test Case: 299 | Input/Output: [(10 3 17 99) 3]
Test Case: 300 | Input/Output: [(41 49 97 4) 4]
Test Case: 301 | Input/Output: [(92 44 36 9) 9]
Test Case: 302 | Input/Output: [(45 38 15 80) 15]
Test Case: 303 | Input/Output: [(25 55 54 94) 25]
Test Case: 304 | Input/Output: [(83 4 42 42) 4]
Test Case: 305 | Input/Output: [(96 51 89 87) 51]
Test Case: 306 | Input/Output: [(41 44 12 41) 12]
Test Case: 307 | Input/Output: [(4 49 64 44) 4]
Test Case: 308 | Input/Output: [(94 29 68 4) 4]
Test Case: 309 | Input/Output: [(51 17 5 33) 5]
Test Case: 310 | Input/Output: [(81 62 43 75) 43]
Test Case: 311 | Input/Output: [(29 65 72 35) 29]
Test Case: 312 | Input/Output: [(60 45 24 8) 8]
Test Case: 313 | Input/Output: [(62 33 89 3) 3]
Test Case: 314 | Input/Output: [(84 6 89 77) 6]
Test Case: 315 | Input/Output: [(15 98 74 65) 15]
Test Case: 316 | Input/Output: [(37 19 32 88) 19]
Test Case: 317 | Input/Output: [(64 78 72 9) 9]
Test Case: 318 | Input/Output: [(64 22 38 77) 22]
Test Case: 319 | Input/Output: [(76 22 32 41) 22]
Test Case: 320 | Input/Output: [(22 100 92 100) 22]
Test Case: 321 | Input/Output: [(29 82 21 73) 21]
Test Case: 322 | Input/Output: [(64 80 63 15) 15]
Test Case: 323 | Input/Output: [(8 75 78 55) 8]
Test Case: 324 | Input/Output: [(98 29 0 67) 0]
Test Case: 325 | Input/Output: [(50 15 33 67) 15]
Test Case: 326 | Input/Output: [(4 18 14 77) 4]
Test Case: 327 | Input/Output: [(87 78 52 77) 52]
Test Case: 328 | Input/Output: [(3 9 57 99) 3]
Test Case: 329 | Input/Output: [(18 79 84 33) 18]
Test Case: 330 | Input/Output: [(93 91 57 95) 57]
Test Case: 331 | Input/Output: [(83 79 93 77) 77]
Test Case: 332 | Input/Output: [(15 56 78 67) 15]
Test Case: 333 | Input/Output: [(7 36 61 63) 7]
Test Case: 334 | Input/Output: [(5 96 7 12) 5]
Test Case: 335 | Input/Output: [(40 64 88 20) 20]
Test Case: 336 | Input/Output: [(95 14 27 57) 14]
Test Case: 337 | Input/Output: [(76 69 93 7) 7]
Test Case: 338 | Input/Output: [(90 88 15 88) 15]
Test Case: 339 | Input/Output: [(58 94 79 73) 58]
Test Case: 340 | Input/Output: [(74 48 47 36) 36]
Test Case: 341 | Input/Output: [(70 20 71 88) 20]
Test Case: 342 | Input/Output: [(28 49 50 76) 28]
Test Case: 343 | Input/Output: [(82 42 69 42) 42]
Test Case: 344 | Input/Output: [(34 36 57 50) 34]
Test Case: 345 | Input/Output: [(51 39 96 9) 9]
Test Case: 346 | Input/Output: [(68 4 57 21) 4]
Test Case: 347 | Input/Output: [(2 29 80 38) 2]
Test Case: 348 | Input/Output: [(100 34 31 17) 17]
Test Case: 349 | Input/Output: [(28 10 88 43) 10]
Test Case: 350 | Input/Output: [(44 81 58 42) 42]
Test Case: 351 | Input/Output: [(82 20 56 17) 17]
Test Case: 352 | Input/Output: [(68 91 22 88) 22]
Test Case: 353 | Input/Output: [(38 77 53 1) 1]
Test Case: 354 | Input/Output: [(70 72 69 37) 37]
Test Case: 355 | Input/Output: [(79 51 60 71) 51]
Test Case: 356 | Input/Output: [(59 68 96 15) 15]
Test Case: 357 | Input/Output: [(9 51 30 66) 9]
Test Case: 358 | Input/Output: [(8 92 17 47) 8]
Test Case: 359 | Input/Output: [(76 46 29 98) 29]
Test Case: 360 | Input/Output: [(51 44 50 19) 19]
Test Case: 361 | Input/Output: [(45 19 23 37) 19]
Test Case: 362 | Input/Output: [(20 57 74 34) 20]
Test Case: 363 | Input/Output: [(81 6 72 32) 6]
Test Case: 364 | Input/Output: [(28 76 13 88) 13]
Test Case: 365 | Input/Output: [(76 13 7 18) 7]
Test Case: 366 | Input/Output: [(45 19 18 68) 18]
Test Case: 367 | Input/Output: [(54 46 3 19) 3]
Test Case: 368 | Input/Output: [(19 4 64 99) 4]
Test Case: 369 | Input/Output: [(57 37 26 32) 26]
Test Case: 370 | Input/Output: [(18 37 79 11) 11]
Test Case: 371 | Input/Output: [(100 49 79 51) 49]
Test Case: 372 | Input/Output: [(83 33 73 18) 18]
Test Case: 373 | Input/Output: [(61 36 69 18) 18]
Test Case: 374 | Input/Output: [(25 37 16 78) 16]
Test Case: 375 | Input/Output: [(60 17 35 70) 17]
Test Case: 376 | Input/Output: [(75 79 64 57) 57]
Test Case: 377 | Input/Output: [(79 59 22 5) 5]
Test Case: 378 | Input/Output: [(45 56 82 72) 45]
Test Case: 379 | Input/Output: [(61 95 93 66) 61]
Test Case: 380 | Input/Output: [(3 56 93 48) 3]
Test Case: 381 | Input/Output: [(12 42 71 56) 12]
Test Case: 382 | Input/Output: [(84 71 2 43) 2]
Test Case: 383 | Input/Output: [(2 80 63 34) 2]
Test Case: 384 | Input/Output: [(97 99 91 43) 43]
Test Case: 385 | Input/Output: [(57 84 4 97) 4]
Test Case: 386 | Input/Output: [(77 73 51 65) 51]
Test Case: 387 | Input/Output: [(93 58 67 51) 51]
Test Case: 388 | Input/Output: [(42 70 19 53) 19]
Test Case: 389 | Input/Output: [(98 35 80 51) 35]
Test Case: 390 | Input/Output: [(54 25 31 67) 25]
Test Case: 391 | Input/Output: [(15 63 72 91) 15]
Test Case: 392 | Input/Output: [(49 34 30 39) 30]
Test Case: 393 | Input/Output: [(87 16 82 39) 16]
Test Case: 394 | Input/Output: [(28 6 67 45) 6]
Test Case: 395 | Input/Output: [(21 73 36 32) 21]
Test Case: 396 | Input/Output: [(51 33 74 92) 33]
Test Case: 397 | Input/Output: [(13 80 74 100) 13]
Test Case: 398 | Input/Output: [(30 2 98 64) 2]
Test Case: 399 | Input/Output: [(73 68 3 52) 3]
Test Case: 400 | Input/Output: [(-95 -61 -88 29) -95]
Test Case: 401 | Input/Output: [(94 22 67 10) 10]
Test Case: 402 | Input/Output: [(77 -29 -62 -35) -62]
Test Case: 403 | Input/Output: [(-20 18 28 -57) -57]
Test Case: 404 | Input/Output: [(-44 33 -33 -54) -54]
Test Case: 405 | Input/Output: [(-35 79 63 40) -35]
Test Case: 406 | Input/Output: [(29 62 -9 84) -9]
Test Case: 407 | Input/Output: [(99 -8 77 -5) -8]
Test Case: 408 | Input/Output: [(56 21 -97 91) -97]
Test Case: 409 | Input/Output: [(47 -62 2 -6) -62]
Test Case: 410 | Input/Output: [(-59 -2 85 65) -59]
Test Case: 411 | Input/Output: [(-73 16 -60 59) -73]
Test Case: 412 | Input/Output: [(-5 -79 4 57) -79]
Test Case: 413 | Input/Output: [(-43 37 73 77) -43]
Test Case: 414 | Input/Output: [(6 -37 -56 8) -56]
Test Case: 415 | Input/Output: [(-93 34 -57 -14) -93]
Test Case: 416 | Input/Output: [(12 3 -13 -6) -13]
Test Case: 417 | Input/Output: [(-19 -31 76 3) -31]
Test Case: 418 | Input/Output: [(54 4 25 -86) -86]
Test Case: 419 | Input/Output: [(34 -100 70 72) -100]
Test Case: 420 | Input/Output: [(70 -3 -9 -24) -24]
Test Case: 421 | Input/Output: [(-76 -21 91 70) -76]
Test Case: 422 | Input/Output: [(9 94 -84 40) -84]
Test Case: 423 | Input/Output: [(-30 -69 -30 19) -69]
Test Case: 424 | Input/Output: [(-41 96 -16 31) -41]
Test Case: 425 | Input/Output: [(-89 29 71 -30) -89]
Test Case: 426 | Input/Output: [(77 -98 -98 33) -98]
Test Case: 427 | Input/Output: [(17 19 -26 25) -26]
Test Case: 428 | Input/Output: [(-20 -18 -32 55) -32]
Test Case: 429 | Input/Output: [(-51 93 13 64) -51]
Test Case: 430 | Input/Output: [(-64 -94 -74 17) -94]
Test Case: 431 | Input/Output: [(-99 77 8 26) -99]
Test Case: 432 | Input/Output: [(42 27 -18 -63) -63]
Test Case: 433 | Input/Output: [(68 21 0 -12) -12]
Test Case: 434 | Input/Output: [(-78 81 -13 -22) -78]
Test Case: 435 | Input/Output: [(-76 43 74 -49) -76]
Test Case: 436 | Input/Output: [(-44 76 -95 -2) -95]
Test Case: 437 | Input/Output: [(68 -30 -18 14) -30]
Test Case: 438 | Input/Output: [(12 13 -88 -44) -88]
Test Case: 439 | Input/Output: [(92 20 23 74) 20]
Test Case: 440 | Input/Output: [(-60 -14 -27 -83) -83]
Test Case: 441 | Input/Output: [(11 -42 -47 -43) -47]
Test Case: 442 | Input/Output: [(-61 29 14 -58) -61]
Test Case: 443 | Input/Output: [(-74 93 -29 2) -74]
Test Case: 444 | Input/Output: [(27 -30 72 27) -30]
Test Case: 445 | Input/Output: [(-66 50 37 -35) -66]
Test Case: 446 | Input/Output: [(-5 78 -46 -65) -65]
Test Case: 447 | Input/Output: [(-5 56 19 -97) -97]
Test Case: 448 | Input/Output: [(-99 97 -54 -97) -99]
Test Case: 449 | Input/Output: [(52 34 -5 -43) -43]
Test Case: 450 | Input/Output: [(91 49 -32 -91) -91]
Test Case: 451 | Input/Output: [(-77 -26 -41 92) -77]
Test Case: 452 | Input/Output: [(-47 40 12 -91) -91]
Test Case: 453 | Input/Output: [(86 21 -62 -64) -64]
Test Case: 454 | Input/Output: [(-85 -4 -33 -45) -85]
Test Case: 455 | Input/Output: [(49 94 -44 -54) -54]
Test Case: 456 | Input/Output: [(-27 21 -84 15) -84]
Test Case: 457 | Input/Output: [(-86 19 -91 24) -91]
Test Case: 458 | Input/Output: [(-62 -79 -84 98) -84]
Test Case: 459 | Input/Output: [(14 -7 -24 -77) -77]
Test Case: 460 | Input/Output: [(-59 50 -10 41) -59]
Test Case: 461 | Input/Output: [(-76 -45 29 -73) -76]
Test Case: 462 | Input/Output: [(-100 -74 84 -93) -100]
Test Case: 463 | Input/Output: [(-25 -26 -49 -99) -99]
Test Case: 464 | Input/Output: [(-52 -60 19 13) -60]
Test Case: 465 | Input/Output: [(-67 -16 81 -94) -94]
Test Case: 466 | Input/Output: [(-4 -61 100 -36) -61]
Test Case: 467 | Input/Output: [(-20 23 68 -95) -95]
Test Case: 468 | Input/Output: [(-98 20 -9 18) -98]
Test Case: 469 | Input/Output: [(13 70 19 61) 13]
Test Case: 470 | Input/Output: [(-13 11 -33 -91) -91]
Test Case: 471 | Input/Output: [(-45 -42 -31 -48) -48]
Test Case: 472 | Input/Output: [(20 -11 35 11) -11]
Test Case: 473 | Input/Output: [(18 -52 66 53) -52]
Test Case: 474 | Input/Output: [(-71 -7 61 41) -71]
Test Case: 475 | Input/Output: [(79 62 23 11) 11]
Test Case: 476 | Input/Output: [(-45 64 94 63) -45]
Test Case: 477 | Input/Output: [(72 -70 9 -99) -99]
Test Case: 478 | Input/Output: [(85 -35 -65 -13) -65]
Test Case: 479 | Input/Output: [(-48 -87 94 -48) -87]
Test Case: 480 | Input/Output: [(-71 -52 -13 -27) -71]
Test Case: 481 | Input/Output: [(46 59 83 32) 32]
Test Case: 482 | Input/Output: [(-38 -98 -50 -31) -98]
Test Case: 483 | Input/Output: [(88 -76 -67 74) -76]
Test Case: 484 | Input/Output: [(87 -7 -9 88) -9]
Test Case: 485 | Input/Output: [(-25 -37 1 -68) -68]
Test Case: 486 | Input/Output: [(-63 92 -2 -60) -63]
Test Case: 487 | Input/Output: [(-5 1 -97 9) -97]
Test Case: 488 | Input/Output: [(93 -5 27 28) -5]
Test Case: 489 | Input/Output: [(-59 79 -82 -100) -100]
Test Case: 490 | Input/Output: [(-100 21 95 -68) -100]
Test Case: 491 | Input/Output: [(-37 35 -47 47) -47]
Test Case: 492 | Input/Output: [(40 51 -15 -28) -28]
Test Case: 493 | Input/Output: [(-16 -36 98 84) -36]
Test Case: 494 | Input/Output: [(50 83 97 -54) -54]
Test Case: 495 | Input/Output: [(61 38 -47 89) -47]
Test Case: 496 | Input/Output: [(-81 0 -14 -9) -81]
Test Case: 497 | Input/Output: [(-55 69 15 -20) -55]
Test Case: 498 | Input/Output: [(-1 7 65 12) -1]
Test Case: 499 | Input/Output: [(-1 28 -18 68) -18]
Test Case: 500 | Input/Output: [(-17 -36 62 84) -36]
Test Case: 501 | Input/Output: [(-48 55 27 70) -48]
Test Case: 502 | Input/Output: [(-45 21 -79 -4) -79]
Test Case: 503 | Input/Output: [(61 81 -78 32) -78]
Test Case: 504 | Input/Output: [(13 44 -31 46) -31]
Test Case: 505 | Input/Output: [(92 -7 25 95) -7]
Test Case: 506 | Input/Output: [(-8 54 -75 -49) -75]
Test Case: 507 | Input/Output: [(-87 34 -47 -91) -91]
Test Case: 508 | Input/Output: [(-42 -90 -86 -93) -93]
Test Case: 509 | Input/Output: [(73 -68 58 92) -68]
Test Case: 510 | Input/Output: [(-9 -52 -81 -49) -81]
Test Case: 511 | Input/Output: [(-62 92 -56 -40) -62]
Test Case: 512 | Input/Output: [(-96 59 53 -96) -96]
Test Case: 513 | Input/Output: [(44 -42 30 -98) -98]
Test Case: 514 | Input/Output: [(-30 15 4 53) -30]
Test Case: 515 | Input/Output: [(27 100 -39 93) -39]
Test Case: 516 | Input/Output: [(-76 66 -13 -82) -82]
Test Case: 517 | Input/Output: [(60 -24 -17 -93) -93]
Test Case: 518 | Input/Output: [(-35 76 49 -13) -35]
Test Case: 519 | Input/Output: [(73 -32 -76 21) -76]
Test Case: 520 | Input/Output: [(-76 -99 -2 -13) -99]
Test Case: 521 | Input/Output: [(-89 52 47 -58) -89]
Test Case: 522 | Input/Output: [(38 -76 -40 60) -76]
Test Case: 523 | Input/Output: [(11 62 41 87) 11]
Test Case: 524 | Input/Output: [(-79 20 -45 -42) -79]
Test Case: 525 | Input/Output: [(13 96 68 67) 13]
Test Case: 526 | Input/Output: [(-49 35 71 -53) -53]
Test Case: 527 | Input/Output: [(-14 -35 14 99) -35]
Test Case: 528 | Input/Output: [(8 78 59 -69) -69]
Test Case: 529 | Input/Output: [(-7 25 6 -72) -72]
Test Case: 530 | Input/Output: [(74 56 60 68) 56]
Test Case: 531 | Input/Output: [(-86 -88 -85 91) -88]
Test Case: 532 | Input/Output: [(93 80 77 97) 77]
Test Case: 533 | Input/Output: [(-5 -8 -53 9) -53]
Test Case: 534 | Input/Output: [(24 -5 53 20) -5]
Test Case: 535 | Input/Output: [(-38 -15 -66 -70) -70]
Test Case: 536 | Input/Output: [(-100 100 15 29) -100]
Test Case: 537 | Input/Output: [(-65 -42 68 100) -65]
Test Case: 538 | Input/Output: [(28 4 -2 99) -2]
Test Case: 539 | Input/Output: [(-65 -17 -92 -41) -92]
Test Case: 540 | Input/Output: [(-36 -60 88 -1) -60]
Test Case: 541 | Input/Output: [(-47 -32 44 -18) -47]
Test Case: 542 | Input/Output: [(63 96 3 18) 3]
Test Case: 543 | Input/Output: [(-20 5 13 -69) -69]
Test Case: 544 | Input/Output: [(55 -86 -89 35) -89]
Test Case: 545 | Input/Output: [(23 62 86 -41) -41]
Test Case: 546 | Input/Output: [(-29 27 -9 57) -29]
Test Case: 547 | Input/Output: [(-29 61 -65 -22) -65]
Test Case: 548 | Input/Output: [(11 -94 -46 -70) -94]
Test Case: 549 | Input/Output: [(-85 -62 20 66) -85]
Test Case: 550 | Input/Output: [(-71 46 58 76) -71]
Test Case: 551 | Input/Output: [(-85 72 -57 100) -85]
Test Case: 552 | Input/Output: [(-90 32 51 13) -90]
Test Case: 553 | Input/Output: [(-38 -61 52 63) -61]
Test Case: 554 | Input/Output: [(-81 -46 -35 -88) -88]
Test Case: 555 | Input/Output: [(-33 66 72 -7) -33]
Test Case: 556 | Input/Output: [(45 17 -5 84) -5]
Test Case: 557 | Input/Output: [(69 -32 37 41) -32]
Test Case: 558 | Input/Output: [(26 23 49 3) 3]
Test Case: 559 | Input/Output: [(-34 66 7 39) -34]
Test Case: 560 | Input/Output: [(-96 21 -50 21) -96]
Test Case: 561 | Input/Output: [(8 -8 -40 -58) -58]
Test Case: 562 | Input/Output: [(78 39 -83 0) -83]
Test Case: 563 | Input/Output: [(-39 -43 -86 80) -86]
Test Case: 564 | Input/Output: [(92 47 24 -87) -87]
Test Case: 565 | Input/Output: [(63 53 -59 56) -59]
Test Case: 566 | Input/Output: [(-98 58 67 -58) -98]
Test Case: 567 | Input/Output: [(54 -83 -49 -4) -83]
Test Case: 568 | Input/Output: [(45 -13 20 -44) -44]
Test Case: 569 | Input/Output: [(63 62 68 24) 24]
Test Case: 570 | Input/Output: [(17 -7 -59 -37) -59]
Test Case: 571 | Input/Output: [(-51 -55 -3 79) -55]
Test Case: 572 | Input/Output: [(-55 -65 26 2) -65]
Test Case: 573 | Input/Output: [(29 38 -67 40) -67]
Test Case: 574 | Input/Output: [(-70 -53 85 -68) -70]
Test Case: 575 | Input/Output: [(95 52 -32 44) -32]
Test Case: 576 | Input/Output: [(-31 -85 91 23) -85]
Test Case: 577 | Input/Output: [(-70 -3 -57 -20) -70]
Test Case: 578 | Input/Output: [(-58 -66 31 28) -66]
Test Case: 579 | Input/Output: [(-63 52 -11 -7) -63]
Test Case: 580 | Input/Output: [(95 40 -73 90) -73]
Test Case: 581 | Input/Output: [(-83 -91 -21 3) -91]
Test Case: 582 | Input/Output: [(-24 -6 -12 66) -24]
Test Case: 583 | Input/Output: [(-55 31 97 36) -55]
Test Case: 584 | Input/Output: [(81 -60 -56 -6) -60]
Test Case: 585 | Input/Output: [(73 -32 96 70) -32]
Test Case: 586 | Input/Output: [(45 69 65 30) 30]
Test Case: 587 | Input/Output: [(27 -52 -30 84) -52]
Test Case: 588 | Input/Output: [(-16 46 -39 13) -39]
Test Case: 589 | Input/Output: [(49 -79 67 -25) -79]
Test Case: 590 | Input/Output: [(-93 -1 -27 -27) -93]
Test Case: 591 | Input/Output: [(34 -5 -89 45) -89]
Test Case: 592 | Input/Output: [(-95 -11 -71 -52) -95]
Test Case: 593 | Input/Output: [(-22 40 -53 9) -53]
Test Case: 594 | Input/Output: [(-9 -30 -4 74) -30]
Test Case: 595 | Input/Output: [(87 36 -70 -8) -70]
Test Case: 596 | Input/Output: [(-9 55 31 -72) -72]
Test Case: 597 | Input/Output: [(-51 -58 20 -74) -74]
Test Case: 598 | Input/Output: [(-45 -27 74 -78) -78]
Test Case: 599 | Input/Output: [(54 52 -35 -37) -37]
Test Case: 600 | Input/Output: [(100 39 14 -47) -47]
Test Case: 601 | Input/Output: [(-2 -21 97 -94) -94]
Test Case: 602 | Input/Output: [(-53 59 -33 -7) -53]
Test Case: 603 | Input/Output: [(-25 20 -38 91) -38]
Test Case: 604 | Input/Output: [(38 -49 86 82) -49]
Test Case: 605 | Input/Output: [(31 -86 28 -1) -86]
Test Case: 606 | Input/Output: [(-52 -35 60 57) -52]
Test Case: 607 | Input/Output: [(21 -18 -9 59) -18]
Test Case: 608 | Input/Output: [(95 39 35 42) 35]
Test Case: 609 | Input/Output: [(-67 46 78 -17) -67]
Test Case: 610 | Input/Output: [(100 -82 -40 52) -82]
Test Case: 611 | Input/Output: [(-5 -45 100 84) -45]
Test Case: 612 | Input/Output: [(60 -99 -34 -24) -99]
Test Case: 613 | Input/Output: [(-81 -95 -12 80) -95]
Test Case: 614 | Input/Output: [(94 -81 36 -8) -81]
Test Case: 615 | Input/Output: [(-2 -33 34 -1) -33]
Test Case: 616 | Input/Output: [(93 -1 -43 38) -43]
Test Case: 617 | Input/Output: [(-93 94 37 28) -93]
Test Case: 618 | Input/Output: [(35 -47 -81 25) -81]
Test Case: 619 | Input/Output: [(88 -79 -2 -43) -79]
Test Case: 620 | Input/Output: [(-92 -54 91 -22) -92]
Test Case: 621 | Input/Output: [(33 66 27 24) 24]
Test Case: 622 | Input/Output: [(7 -76 -83 -1) -83]
Test Case: 623 | Input/Output: [(37 45 20 -88) -88]
Test Case: 624 | Input/Output: [(4 -28 -41 -39) -41]
Test Case: 625 | Input/Output: [(87 -56 -46 -54) -56]
Test Case: 626 | Input/Output: [(70 -15 -21 54) -21]
Test Case: 627 | Input/Output: [(-89 -98 -52 -43) -98]
Test Case: 628 | Input/Output: [(93 -72 -100 -23) -100]
Test Case: 629 | Input/Output: [(14 -62 2 12) -62]
Test Case: 630 | Input/Output: [(-24 77 -55 -13) -55]
Test Case: 631 | Input/Output: [(59 -53 51 -32) -53]
Test Case: 632 | Input/Output: [(-1 -68 11 -90) -90]
Test Case: 633 | Input/Output: [(-74 -39 -3 68) -74]
Test Case: 634 | Input/Output: [(-31 -18 -66 84) -66]
Test Case: 635 | Input/Output: [(83 -3 -86 -14) -86]
Test Case: 636 | Input/Output: [(27 56 -67 -89) -89]
Test Case: 637 | Input/Output: [(-37 -78 -58 72) -78]
Test Case: 638 | Input/Output: [(81 71 42 -48) -48]
Test Case: 639 | Input/Output: [(88 17 0 -11) -11]
Test Case: 640 | Input/Output: [(-5 -81 19 -62) -81]
Test Case: 641 | Input/Output: [(-52 43 -31 -88) -88]
Test Case: 642 | Input/Output: [(-38 -94 -95 -13) -95]
Test Case: 643 | Input/Output: [(-72 85 -69 -95) -95]
Test Case: 644 | Input/Output: [(-78 69 3 -21) -78]
Test Case: 645 | Input/Output: [(-52 23 79 8) -52]
Test Case: 646 | Input/Output: [(-36 76 -72 10) -72]
Test Case: 647 | Input/Output: [(96 -24 38 -65) -65]
Test Case: 648 | Input/Output: [(14 47 -2 -25) -25]
Test Case: 649 | Input/Output: [(-58 52 46 -60) -60]
Test Case: 650 | Input/Output: [(87 49 -3 -17) -17]
Test Case: 651 | Input/Output: [(-46 -49 -54 -80) -80]
Test Case: 652 | Input/Output: [(24 71 -38 -37) -38]
Test Case: 653 | Input/Output: [(36 54 37 -56) -56]
Test Case: 654 | Input/Output: [(67 -35 -88 40) -88]
Test Case: 655 | Input/Output: [(-98 -93 51 -51) -98]
Test Case: 656 | Input/Output: [(-6 25 49 6) -6]
Test Case: 657 | Input/Output: [(-65 -84 -19 20) -84]
Test Case: 658 | Input/Output: [(-41 31 -51 6) -51]
Test Case: 659 | Input/Output: [(75 59 -48 -92) -92]
Test Case: 660 | Input/Output: [(-27 93 70 -46) -46]
Test Case: 661 | Input/Output: [(-42 -79 81 -46) -79]
Test Case: 662 | Input/Output: [(66 -11 -42 44) -42]
Test Case: 663 | Input/Output: [(14 42 63 -79) -79]
Test Case: 664 | Input/Output: [(-57 20 -16 -13) -57]
Test Case: 665 | Input/Output: [(-68 -26 -16 19) -68]
Test Case: 666 | Input/Output: [(42 82 71 7) 7]
Test Case: 667 | Input/Output: [(29 17 -81 -93) -93]
Test Case: 668 | Input/Output: [(90 55 20 -20) -20]
Test Case: 669 | Input/Output: [(-6 13 68 30) -6]
Test Case: 670 | Input/Output: [(91 81 46 -56) -56]
Test Case: 671 | Input/Output: [(-67 41 34 38) -67]
Test Case: 672 | Input/Output: [(-21 64 -79 87) -79]
Test Case: 673 | Input/Output: [(63 87 -82 37) -82]
Test Case: 674 | Input/Output: [(87 -47 -67 85) -67]
Test Case: 675 | Input/Output: [(-49 29 52 -7) -49]
Test Case: 676 | Input/Output: [(-92 50 65 35) -92]
Test Case: 677 | Input/Output: [(95 44 81 -58) -58]
Test Case: 678 | Input/Output: [(33 -98 -31 65) -98]
Test Case: 679 | Input/Output: [(-14 4 83 73) -14]
Test Case: 680 | Input/Output: [(-91 -59 -49 -81) -91]
Test Case: 681 | Input/Output: [(79 -11 74 54) -11]
Test Case: 682 | Input/Output: [(-51 -20 14 -82) -82]
Test Case: 683 | Input/Output: [(-3 85 0 -77) -77]
Test Case: 684 | Input/Output: [(-15 69 38 -12) -15]
Test Case: 685 | Input/Output: [(20 81 43 -8) -8]
Test Case: 686 | Input/Output: [(-63 0 -49 -64) -64]
Test Case: 687 | Input/Output: [(27 -74 90 -60) -74]
Test Case: 688 | Input/Output: [(75 48 -72 -16) -72]
Test Case: 689 | Input/Output: [(81 -31 -46 29) -46]
Test Case: 690 | Input/Output: [(-67 -4 -3 -6) -67]
Test Case: 691 | Input/Output: [(92 63 -39 100) -39]
Test Case: 692 | Input/Output: [(-15 60 1 -3) -15]
Test Case: 693 | Input/Output: [(90 46 71 -16) -16]
Test Case: 694 | Input/Output: [(4 91 -97 -80) -97]
Test Case: 695 | Input/Output: [(-27 25 61 15) -27]
Test Case: 696 | Input/Output: [(31 25 90 -92) -92]
Test Case: 697 | Input/Output: [(12 -46 -32 17) -46]
Test Case: 698 | Input/Output: [(64 -62 -85 -59) -85]
Test Case: 699 | Input/Output: [(41 73 4 32) 4]
Test Case: 700 | Input/Output: [(97 -29 79 -63) -63]
Test Case: 701 | Input/Output: [(-5 -26 -90 82) -90]
Test Case: 702 | Input/Output: [(-24 67 79 48) -24]
Test Case: 703 | Input/Output: [(-10 4 20 -3) -10]
Test Case: 704 | Input/Output: [(-42 -54 7 -5) -54]
Test Case: 705 | Input/Output: [(100 -35 72 95) -35]
Test Case: 706 | Input/Output: [(-62 -98 -67 -30) -98]
Test Case: 707 | Input/Output: [(-87 -64 66 -86) -87]
Test Case: 708 | Input/Output: [(-28 40 -41 80) -41]
Test Case: 709 | Input/Output: [(-5 -100 36 12) -100]
Test Case: 710 | Input/Output: [(31 86 -13 4) -13]
Test Case: 711 | Input/Output: [(75 -91 -77 -87) -91]
Test Case: 712 | Input/Output: [(67 -49 -32 42) -49]
Test Case: 713 | Input/Output: [(61 51 51 -85) -85]
Test Case: 714 | Input/Output: [(-100 -94 -78 64) -100]
Test Case: 715 | Input/Output: [(57 17 55 67) 17]
Test Case: 716 | Input/Output: [(15 72 -45 -62) -62]
Test Case: 717 | Input/Output: [(-65 80 -46 -32) -65]
Test Case: 718 | Input/Output: [(-97 85 -30 -52) -97]
Test Case: 719 | Input/Output: [(-57 -21 41 -47) -57]
Test Case: 720 | Input/Output: [(-61 -3 64 15) -61]
Test Case: 721 | Input/Output: [(51 -98 54 44) -98]
Test Case: 722 | Input/Output: [(68 -63 24 -37) -63]
Test Case: 723 | Input/Output: [(13 -32 100 9) -32]
Test Case: 724 | Input/Output: [(-81 -2 -53 -4) -81]
Test Case: 725 | Input/Output: [(-57 -43 -69 -9) -69]
Test Case: 726 | Input/Output: [(14 1 27 -52) -52]
Test Case: 727 | Input/Output: [(49 4 23 28) 4]
Test Case: 728 | Input/Output: [(44 -44 -27 80) -44]
Test Case: 729 | Input/Output: [(14 -4 58 42) -4]
Test Case: 730 | Input/Output: [(4 -86 -66 75) -86]
Test Case: 731 | Input/Output: [(-88 1 -24 -61) -88]
Test Case: 732 | Input/Output: [(40 -1 38 -27) -27]
Test Case: 733 | Input/Output: [(-15 60 98 61) -15]
Test Case: 734 | Input/Output: [(-9 82 83 -69) -69]
Test Case: 735 | Input/Output: [(7 19 -81 -29) -81]
Test Case: 736 | Input/Output: [(-3 -20 -26 37) -26]
Test Case: 737 | Input/Output: [(17 -77 74 64) -77]
Test Case: 738 | Input/Output: [(40 -80 47 -97) -97]
Test Case: 739 | Input/Output: [(85 52 24 82) 24]
Test Case: 740 | Input/Output: [(64 33 -79 21) -79]
Test Case: 741 | Input/Output: [(-56 48 21 47) -56]
Test Case: 742 | Input/Output: [(71 -35 -39 -59) -59]
Test Case: 743 | Input/Output: [(45 -58 -33 -26) -58]
Test Case: 744 | Input/Output: [(51 -72 -44 -14) -72]
Test Case: 745 | Input/Output: [(-69 -24 63 -55) -69]
Test Case: 746 | Input/Output: [(-17 2 -22 54) -22]
Test Case: 747 | Input/Output: [(62 1 96 -10) -10]
Test Case: 748 | Input/Output: [(-77 62 32 -23) -77]
Test Case: 749 | Input/Output: [(-18 -62 65 -97) -97]
Test Case: 750 | Input/Output: [(9 50 -61 38) -61]
Test Case: 751 | Input/Output: [(53 59 14 72) 14]
Test Case: 752 | Input/Output: [(72 -40 -19 -8) -40]
Test Case: 753 | Input/Output: [(-54 78 -24 65) -54]
Test Case: 754 | Input/Output: [(-21 -69 -39 -31) -69]
Test Case: 755 | Input/Output: [(-42 -47 -25 100) -47]
Test Case: 756 | Input/Output: [(51 56 0 -33) -33]
Test Case: 757 | Input/Output: [(-97 67 -37 49) -97]
Test Case: 758 | Input/Output: [(-75 -7 76 -76) -76]
Test Case: 759 | Input/Output: [(15 -61 25 54) -61]
Test Case: 760 | Input/Output: [(12 -11 56 -11) -11]
Test Case: 761 | Input/Output: [(-2 89 -30 6) -30]
Test Case: 762 | Input/Output: [(3 -37 84 92) -37]
Test Case: 763 | Input/Output: [(74 67 -84 47) -84]
Test Case: 764 | Input/Output: [(53 -91 87 17) -91]
Test Case: 765 | Input/Output: [(66 30 90 12) 12]
Test Case: 766 | Input/Output: [(-30 67 -83 -85) -85]
Test Case: 767 | Input/Output: [(39 -48 -48 23) -48]
Test Case: 768 | Input/Output: [(-28 -95 -86 -95) -95]
Test Case: 769 | Input/Output: [(47 71 -27 100) -27]
Test Case: 770 | Input/Output: [(-19 -18 -76 -88) -88]
Test Case: 771 | Input/Output: [(1 62 -68 2) -68]
Test Case: 772 | Input/Output: [(4 -24 61 98) -24]
Test Case: 773 | Input/Output: [(-56 81 74 3) -56]
Test Case: 774 | Input/Output: [(-26 84 -46 -51) -51]
Test Case: 775 | Input/Output: [(7 53 94 -24) -24]
Test Case: 776 | Input/Output: [(27 -23 -57 40) -57]
Test Case: 777 | Input/Output: [(5 -47 96 16) -47]
Test Case: 778 | Input/Output: [(11 20 -83 50) -83]
Test Case: 779 | Input/Output: [(-9 1 95 26) -9]
Test Case: 780 | Input/Output: [(-3 -68 -80 -36) -80]
Test Case: 781 | Input/Output: [(39 -16 -42 -95) -95]
Test Case: 782 | Input/Output: [(-96 -64 37 -78) -96]
Test Case: 783 | Input/Output: [(59 -8 44 -38) -38]
Test Case: 784 | Input/Output: [(-39 -88 -46 -58) -88]
Test Case: 785 | Input/Output: [(-41 9 54 22) -41]
Test Case: 786 | Input/Output: [(-6 3 3 13) -6]
Test Case: 787 | Input/Output: [(76 76 -35 70) -35]
Test Case: 788 | Input/Output: [(11 -40 20 44) -40]
Test Case: 789 | Input/Output: [(86 -91 70 7) -91]
Test Case: 790 | Input/Output: [(1 -23 19 8) -23]
Test Case: 791 | Input/Output: [(-78 64 -47 -92) -92]
Test Case: 792 | Input/Output: [(26 -63 57 26) -63]
Test Case: 793 | Input/Output: [(-68 27 30 -76) -76]
Test Case: 794 | Input/Output: [(10 -61 26 -41) -61]
Test Case: 795 | Input/Output: [(80 50 97 14) 14]
Test Case: 796 | Input/Output: [(37 -76 62 -93) -93]
Test Case: 797 | Input/Output: [(66 -83 100 -82) -83]
Test Case: 798 | Input/Output: [(4 6 -43 40) -43]
Test Case: 799 | Input/Output: [(74 7 17 62) 7]
Test Case: 800 | Input/Output: [(30 -61 58 52) -61]
Test Case: 801 | Input/Output: [(24 -68 51 78) -68]
Test Case: 802 | Input/Output: [(25 97 -8 -56) -56]
Test Case: 803 | Input/Output: [(-92 35 4 39) -92]
Test Case: 804 | Input/Output: [(-3 -33 91 -37) -37]
Test Case: 805 | Input/Output: [(58 67 93 -94) -94]
Test Case: 806 | Input/Output: [(0 2 -62 -19) -62]
Test Case: 807 | Input/Output: [(-20 57 33 6) -20]
Test Case: 808 | Input/Output: [(92 38 16 89) 16]
Test Case: 809 | Input/Output: [(98 -96 18 -71) -96]
Test Case: 810 | Input/Output: [(-53 47 -54 32) -54]
Test Case: 811 | Input/Output: [(-39 -53 -80 -5) -80]
Test Case: 812 | Input/Output: [(48 23 -56 -62) -62]
Test Case: 813 | Input/Output: [(89 -72 -66 7) -72]
Test Case: 814 | Input/Output: [(37 -30 34 -1) -30]
Test Case: 815 | Input/Output: [(31 -6 29 23) -6]
Test Case: 816 | Input/Output: [(-12 68 80 39) -12]
Test Case: 817 | Input/Output: [(-18 59 53 7) -18]
Test Case: 818 | Input/Output: [(83 93 -13 69) -13]
Test Case: 819 | Input/Output: [(-90 83 37 -58) -90]
Test Case: 820 | Input/Output: [(78 5 0 68) 0]
Test Case: 821 | Input/Output: [(-4 -67 79 -25) -67]
Test Case: 822 | Input/Output: [(-62 12 -34 -76) -76]
Test Case: 823 | Input/Output: [(-100 60 16 -50) -100]
Test Case: 824 | Input/Output: [(68 -29 -29 -68) -68]
Test Case: 825 | Input/Output: [(68 -99 32 24) -99]
Test Case: 826 | Input/Output: [(46 -76 75 -88) -88]
Test Case: 827 | Input/Output: [(61 -32 83 -93) -93]
Test Case: 828 | Input/Output: [(-58 -9 -93 50) -93]
Test Case: 829 | Input/Output: [(-93 -68 -94 93) -94]
Test Case: 830 | Input/Output: [(36 58 -31 -97) -97]
Test Case: 831 | Input/Output: [(94 -77 25 -24) -77]
Test Case: 832 | Input/Output: [(-32 -58 -34 64) -58]
Test Case: 833 | Input/Output: [(-74 -22 90 22) -74]
Test Case: 834 | Input/Output: [(45 -73 -49 11) -73]
Test Case: 835 | Input/Output: [(-76 -99 -67 -72) -99]
Test Case: 836 | Input/Output: [(-99 -63 -37 -99) -99]
Test Case: 837 | Input/Output: [(69 -12 -97 60) -97]
Test Case: 838 | Input/Output: [(37 51 15 -22) -22]
Test Case: 839 | Input/Output: [(6 57 30 37) 6]
Test Case: 840 | Input/Output: [(18 62 -79 9) -79]
Test Case: 841 | Input/Output: [(73 21 -20 100) -20]
Test Case: 842 | Input/Output: [(21 71 72 -94) -94]
Test Case: 843 | Input/Output: [(15 24 42 -28) -28]
Test Case: 844 | Input/Output: [(-44 2 59 -13) -44]
Test Case: 845 | Input/Output: [(68 48 -32 -98) -98]
Test Case: 846 | Input/Output: [(-92 -48 -33 64) -92]
Test Case: 847 | Input/Output: [(-18 -38 -93 51) -93]
Test Case: 848 | Input/Output: [(-72 70 -32 77) -72]
Test Case: 849 | Input/Output: [(48 -18 12 14) -18]
Test Case: 850 | Input/Output: [(-13 80 0 79) -13]
Test Case: 851 | Input/Output: [(-53 -4 -62 -79) -79]
Test Case: 852 | Input/Output: [(40 -56 47 16) -56]
Test Case: 853 | Input/Output: [(-52 -39 -90 -29) -90]
Test Case: 854 | Input/Output: [(71 75 -84 70) -84]
Test Case: 855 | Input/Output: [(-18 92 -17 12) -18]
Test Case: 856 | Input/Output: [(-73 46 39 -70) -73]
Test Case: 857 | Input/Output: [(75 74 -30 34) -30]
Test Case: 858 | Input/Output: [(48 -89 34 -96) -96]
Test Case: 859 | Input/Output: [(-51 -4 89 -60) -60]
Test Case: 860 | Input/Output: [(85 -29 76 99) -29]
Test Case: 861 | Input/Output: [(-26 -36 -33 -53) -53]
Test Case: 862 | Input/Output: [(-19 59 7 70) -19]
Test Case: 863 | Input/Output: [(-26 -14 -55 68) -55]
Test Case: 864 | Input/Output: [(-56 66 4 17) -56]
Test Case: 865 | Input/Output: [(18 64 52 28) 18]
Test Case: 866 | Input/Output: [(-35 -31 -33 -93) -93]
Test Case: 867 | Input/Output: [(66 45 -8 -70) -70]
Test Case: 868 | Input/Output: [(-29 -25 -17 84) -29]
Test Case: 869 | Input/Output: [(-87 -87 42 85) -87]
Test Case: 870 | Input/Output: [(-80 16 24 -72) -80]
Test Case: 871 | Input/Output: [(8 -15 -39 -33) -39]
Test Case: 872 | Input/Output: [(-35 0 -55 91) -55]
Test Case: 873 | Input/Output: [(43 23 -62 93) -62]
Test Case: 874 | Input/Output: [(30 -20 -93 82) -93]
Test Case: 875 | Input/Output: [(39 -23 -23 -60) -60]
Test Case: 876 | Input/Output: [(-44 3 43 31) -44]
Test Case: 877 | Input/Output: [(-63 -74 8 -59) -74]
Test Case: 878 | Input/Output: [(-86 69 -42 26) -86]
Test Case: 879 | Input/Output: [(20 -21 -100 -36) -100]
Test Case: 880 | Input/Output: [(-88 -69 -65 -62) -88]
Test Case: 881 | Input/Output: [(94 -3 89 43) -3]
Test Case: 882 | Input/Output: [(98 99 -9 -80) -80]
Test Case: 883 | Input/Output: [(99 -96 72 43) -96]
Test Case: 884 | Input/Output: [(-79 -69 24 76) -79]
Test Case: 885 | Input/Output: [(-93 -94 18 -88) -94]
Test Case: 886 | Input/Output: [(-14 -17 -69 -62) -69]
Test Case: 887 | Input/Output: [(95 89 62 -30) -30]
Test Case: 888 | Input/Output: [(81 -19 -17 61) -19]
Test Case: 889 | Input/Output: [(-85 55 -86 35) -86]
Test Case: 890 | Input/Output: [(79 71 -99 9) -99]
Test Case: 891 | Input/Output: [(-80 73 -20 -77) -80]
Test Case: 892 | Input/Output: [(-5 -30 19 46) -30]
Test Case: 893 | Input/Output: [(45 -94 -48 -28) -94]
Test Case: 894 | Input/Output: [(56 -23 87 58) -23]
Test Case: 895 | Input/Output: [(-2 28 88 -67) -67]
Test Case: 896 | Input/Output: [(-81 -72 5 -14) -81]
Test Case: 897 | Input/Output: [(45 43 -25 40) -25]
Test Case: 898 | Input/Output: [(18 -66 -96 -49) -96]
Test Case: 899 | Input/Output: [(-64 -73 18 -19) -73]
Test Case: 900 | Input/Output: [(-49 -96 -26 79) -96]
Test Case: 901 | Input/Output: [(71 36 34 -54) -54]
Test Case: 902 | Input/Output: [(85 -48 56 -11) -48]
Test Case: 903 | Input/Output: [(-41 27 -88 3) -88]
Test Case: 904 | Input/Output: [(-76 -46 -76 23) -76]
Test Case: 905 | Input/Output: [(95 93 -89 -29) -89]
Test Case: 906 | Input/Output: [(-30 -22 -43 27) -43]
Test Case: 907 | Input/Output: [(5 84 63 -84) -84]
Test Case: 908 | Input/Output: [(-35 87 3 -94) -94]
Test Case: 909 | Input/Output: [(-82 -85 74 -15) -85]
Test Case: 910 | Input/Output: [(-66 -35 45 -65) -66]
Test Case: 911 | Input/Output: [(41 -79 17 -46) -79]
Test Case: 912 | Input/Output: [(26 24 -53 -55) -55]
Test Case: 913 | Input/Output: [(45 77 9 -2) -2]
Test Case: 914 | Input/Output: [(-18 -57 -86 -15) -86]
Test Case: 915 | Input/Output: [(59 47 26 82) 26]
Test Case: 916 | Input/Output: [(44 -38 94 -81) -81]
Test Case: 917 | Input/Output: [(62 45 90 -96) -96]
Test Case: 918 | Input/Output: [(-95 10 -28 -65) -95]
Test Case: 919 | Input/Output: [(45 -16 10 89) -16]
Test Case: 920 | Input/Output: [(52 -71 9 -95) -95]
Test Case: 921 | Input/Output: [(13 68 28 -73) -73]
Test Case: 922 | Input/Output: [(-54 -28 68 46) -54]
Test Case: 923 | Input/Output: [(-8 -84 -58 -19) -84]
Test Case: 924 | Input/Output: [(-66 -96 85 -25) -96]
Test Case: 925 | Input/Output: [(-22 -61 -97 38) -97]
Test Case: 926 | Input/Output: [(57 -24 92 -92) -92]
Test Case: 927 | Input/Output: [(-36 -74 -10 46) -74]
Test Case: 928 | Input/Output: [(3 53 40 -41) -41]
Test Case: 929 | Input/Output: [(35 87 93 -39) -39]
Test Case: 930 | Input/Output: [(-17 -27 6 -3) -27]
Test Case: 931 | Input/Output: [(17 35 -20 84) -20]
Test Case: 932 | Input/Output: [(-25 -68 -25 -66) -68]
Test Case: 933 | Input/Output: [(-23 -71 -13 83) -71]
Test Case: 934 | Input/Output: [(-100 -36 -14 -60) -100]
Test Case: 935 | Input/Output: [(-66 99 85 -11) -66]
Test Case: 936 | Input/Output: [(-96 -44 62 36) -96]
Test Case: 937 | Input/Output: [(78 -21 15 88) -21]
Test Case: 938 | Input/Output: [(87 77 11 84) 11]
Test Case: 939 | Input/Output: [(83 -49 -80 11) -80]
Test Case: 940 | Input/Output: [(96 -64 68 71) -64]
Test Case: 941 | Input/Output: [(-95 92 -31 -56) -95]
Test Case: 942 | Input/Output: [(71 38 38 30) 30]
Test Case: 943 | Input/Output: [(64 -92 50 -90) -92]
Test Case: 944 | Input/Output: [(56 87 -99 46) -99]
Test Case: 945 | Input/Output: [(67 -27 58 -96) -96]
Test Case: 946 | Input/Output: [(-29 -59 15 -95) -95]
Test Case: 947 | Input/Output: [(-22 2 26 82) -22]
Test Case: 948 | Input/Output: [(70 26 34 -55) -55]
Test Case: 949 | Input/Output: [(-16 -39 35 -55) -55]
Test Case: 950 | Input/Output: [(-42 -88 -30 -56) -88]
Test Case: 951 | Input/Output: [(37 48 -25 25) -25]
Test Case: 952 | Input/Output: [(32 -17 -35 63) -35]
Test Case: 953 | Input/Output: [(-53 -93 90 4) -93]
Test Case: 954 | Input/Output: [(94 58 -78 14) -78]
Test Case: 955 | Input/Output: [(13 66 -63 9) -63]
Test Case: 956 | Input/Output: [(-33 -41 78 -96) -96]
Test Case: 957 | Input/Output: [(60 87 -53 89) -53]
Test Case: 958 | Input/Output: [(-89 -20 -92 19) -92]
Test Case: 959 | Input/Output: [(28 4 55 37) 4]
Test Case: 960 | Input/Output: [(-72 -52 -72 76) -72]
Test Case: 961 | Input/Output: [(-79 7 15 20) -79]
Test Case: 962 | Input/Output: [(97 45 -73 -96) -96]
Test Case: 963 | Input/Output: [(44 -12 -37 87) -37]
Test Case: 964 | Input/Output: [(-24 62 32 -6) -24]
Test Case: 965 | Input/Output: [(-81 44 75 -79) -81]
Test Case: 966 | Input/Output: [(40 23 17 -42) -42]
Test Case: 967 | Input/Output: [(68 38 4 37) 4]
Test Case: 968 | Input/Output: [(-7 -76 58 12) -76]
Test Case: 969 | Input/Output: [(-93 -16 -44 -98) -98]
Test Case: 970 | Input/Output: [(27 8 -97 -32) -97]
Test Case: 971 | Input/Output: [(-97 -98 -44 -9) -98]
Test Case: 972 | Input/Output: [(-47 -24 22 -21) -47]
Test Case: 973 | Input/Output: [(92 -5 -97 50) -97]
Test Case: 974 | Input/Output: [(-99 -57 -76 -76) -99]
Test Case: 975 | Input/Output: [(-79 -21 -53 42) -79]
Test Case: 976 | Input/Output: [(86 77 70 -90) -90]
Test Case: 977 | Input/Output: [(-33 16 -70 65) -70]
Test Case: 978 | Input/Output: [(75 24 -87 -10) -87]
Test Case: 979 | Input/Output: [(-68 27 86 84) -68]
Test Case: 980 | Input/Output: [(-57 -26 42 90) -57]
Test Case: 981 | Input/Output: [(65 74 100 0) 0]
Test Case: 982 | Input/Output: [(35 -60 30 -86) -86]
Test Case: 983 | Input/Output: [(-20 2 65 42) -20]
Test Case: 984 | Input/Output: [(26 -60 85 70) -60]
Test Case: 985 | Input/Output: [(12 -34 -1 7) -34]
Test Case: 986 | Input/Output: [(-94 4 61 -85) -94]
Test Case: 987 | Input/Output: [(-88 -6 -6 -60) -88]
Test Case: 988 | Input/Output: [(89 15 -45 33) -45]
Test Case: 989 | Input/Output: [(43 97 -39 42) -39]
Test Case: 990 | Input/Output: [(-91 -86 52 63) -91]
Test Case: 991 | Input/Output: [(8 0 77 -3) -3]
Test Case: 992 | Input/Output: [(-23 69 -76 -45) -76]
Test Case: 993 | Input/Output: [(-87 -43 -29 4) -87]
Test Case: 994 | Input/Output: [(75 -78 -33 -56) -78]
Test Case: 995 | Input/Output: [(-17 -71 -96 -5) -96]
Test Case: 996 | Input/Output: [(79 -43 -75 24) -75]
Test Case: 997 | Input/Output: [(56 -96 -23 83) -96]
Test Case: 998 | Input/Output: [(75 35 -92 -94) -94]
Test Case: 999 | Input/Output: [(94 -97 33 -81) -97]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = -88 11 3 71 -105 31 0 -58 108 96 68 -113 -106 -17 15 119
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-30 42 42 42] -30] [[70 70 70 70] 70] [[46 86 46 46] 46] [[-18 8 8 8] -18] [[-89 63 63 63] -89] [[-56 -56 -42 -56] -56] [[-12 5 5 5] -12] [[-69 25 -69 -69] -69] [[-73 -73 -73 5] -73] [[49 -91 49 49] -91] [(-64 -64 -64 -64) -64] [(99 99 99 99) 99] [(-2 -2 -2 -2) -2] [(-36 -36 -36 -36) -36] [(81 81 81 81) 81] [(4 56 39 35) 4] [(94 87 52 86) 52] [(100 73 33 17) 17] [(2 87 44 49) 2] [(50 14 43 4) 4] [(63 21 14 36) 14] [(78 93 82 8) 8] [(91 23 70 20) 20] [(83 11 12 59) 11] [(93 8 64 18) 8] [(77 54 66 78) 54] [(8 62 97 25) 8] [(56 68 14 82) 14] [(65 27 53 91) 27] [(7 39 52 80) 7] [(28 17 72 11) 11] [(87 67 44 63) 44] [(21 25 95 49) 21] [(53 51 63 15) 15] [(56 26 79 90) 26] [(-4 15 -97 68) -97] [(63 68 -94 -36) -94] [(-30 94 63 -93) -93] [(-30 -29 27 -9) -30] [(-66 97 -74 13) -74] [(2 44 37 -6) -6] [(42 63 38 53) 38] [(-51 -97 37 -66) -97] [(91 67 -21 -56) -56] [(14 -21 48 22) -21] [(39 35 -4 55) -4] [(10 44 -86 82) -86] [(85 23 39 73) 23] [(65 43 41 -15) -15] [(77 -36 78 84) -36] [(-95 49 -65 87) -95] [(-68 -43 87 -77) -77] [(48 35 9 -17) -17] [(81 39 78 27) 27] [(27 -52 -100 -50) -100] [(-78 -76 -75 93) -78] [(27 -9 78 56) -9] [(90 48 -8 -50) -50] [(12 61 -76 -43) -76] [(60 -94 72 -80) -94] [(-37 -75 87 -57) -75] [(-2 -3 -9 -65) -65] [(-96 -34 -51 95) -96] [(36 -93 -26 69) -93] [(38 87 83 97) 38] [(-85 22 -64 34) -85] [(-80 95 26 -10) -80] [(-40 33 68 87) -40] [(-36 4 -67 -21) -67] [(-25 56 42 56) -25] [(-25 -13 -60 -50) -60] [(68 -28 41 -13) -28] [(91 23 -31 22) -31] [(-81 -31 -17 -61) -81] [(-49 59 25 84) -49] [(-63 -83 4 7) -83] [(92 78 -2 61) -2] [(41 -20 -82 -45) -82] [(57 -4 -27 85) -27] [(-33 -61 -50 -20) -61] [(-83 29 -93 -94) -94] [(-92 -88 -88 -82) -92] [(-27 -53 18 33) -53] [(26 -49 29 -69) -69] [(69 41 35 -81) -81] [(-39 -69 -11 25) -69] [(-9 -43 -32 48) -43] [(-12 2 -44 97) -44] [(-12 -49 -7 -58) -58] [(33 -36 42 -28) -36] [(98 -16 -51 45) -51] [(12 49 -4 90) -4] [(-29 -75 -93 34) -93] [(-77 46 98 -52) -77] [(-73 24 42 51) -73])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 94                 
Correct output: 17                  | Program output: 100                
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 50                 
Correct output: 14                  | Program output: 63                 
Correct output: 8                   | Program output: 78                 
Correct output: 20                  | Program output: 91                 
Correct output: 11                  | Program output: 83                 
Correct output: 8                   | Program output: 93                 
Correct output: 54                  | Program output: 77                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 56                 
Correct output: 27                  | Program output: 65                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 28                 
Correct output: 44                  | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 15                  | Program output: 53                 
Correct output: 26                  | Program output: 56                 
Correct output: -97                 | Program output: -4                 
Correct output: -94                 | Program output:                    
Correct output: -93                 | Program output: -30                
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -66                
Correct output: -6                  | Program output: 2                  
Correct output: 38                  | Program output: 42                 
Correct output: -97                 | Program output: -51                
Correct output: -56                 | Program output:                    
Correct output: -21                 | Program output: 14                 
Correct output: -4                  | Program output:                    
Correct output: -86                 | Program output:                    
Correct output: 23                  | Program output: 85                 
Correct output: -15                 | Program output: 65                 
Correct output: -36                 | Program output: 77                 
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -68                
Correct output: -17                 | Program output: 48                 
Correct output: 27                  | Program output: 81                 
Correct output: -100                | Program output:                    
Correct output: -78                 | Program output: -78                
Correct output: -9                  | Program output: 27                 
Correct output: -50                 | Program output:                    
Correct output: -76                 | Program output:                    
Correct output: -94                 | Program output: 60                 
Correct output: -75                 | Program output: -37                
Correct output: -65                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output:                    
Correct output: 38                  | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -67                 | Program output: -36                
Correct output: -25                 | Program output: -25                
Correct output: -60                 | Program output: -25                
Correct output: -28                 | Program output: 68                 
Correct output: -31                 | Program output:                    
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -63                
Correct output: -2                  | Program output:                    
Correct output: -82                 | Program output:                    
Correct output: -27                 | Program output:                    
Correct output: -61                 | Program output: -33                
Correct output: -94                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -27                
Correct output: -69                 | Program output: 26                 
Correct output: -81                 | Program output: 69                 
Correct output: -69                 | Program output: -39                
Correct output: -43                 | Program output: -9                 
Correct output: -44                 | Program output: -12                
Correct output: -58                 | Program output: -12                
Correct output: -36                 | Program output: 33                 
Correct output: -51                 | Program output:                    
Correct output: -4                  | Program output:                    
Correct output: -93                 | Program output: -29                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 2, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_integer_541} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty})
Lexicase best program: (exec_stackdepth boolean_invert_second_then_and integer_mult boolean_dup integer_lt boolean_swap in3 integer_yank exec_s () (integer_sub) (boolean_dup_items) integer_eq exec_yank integer_fromboolean boolean_dup in1 integer_max integer_yankdup integer_shove exec_empty print_integer integer_gt in2 boolean_eq exec_do*times (tag_integer_541 boolean_and boolean_empty integer_dec boolean_swap boolean_invert_first_then_and integer_swap boolean_eq exec_swap (exec_s (boolean_xor boolean_flush) (integer_swap) (integer_stackdepth integer_rot) boolean_swap exec_y (exec_dup_items exec_empty boolean_yankdup exec_stackdepth integer_min) integer_pop integer_dup_times) (integer_swap) exec_eq in1 exec_s (exec_empty) (print_exec (exec_do*while (boolean_shove) in1 integer_dec) integer_lte integer_div integer_yankdup) (exec_noop exec_y_when_autoconstructing (boolean_stackdepth exec_flush integer_gte integer_max exec_do*count (exec_do*range (boolean_dup_items exec_when (exec_while (boolean_shove exec_eq integer_dup_times exec_s (boolean_invert_second_then_and exec_stackdepth) () (exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_empty) () ()) () ())))))))))
Lexicase best errors: [1 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 112
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 2, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_integer_541} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty})
Zero cases best program: (exec_stackdepth boolean_invert_second_then_and integer_mult boolean_dup integer_lt boolean_swap in3 integer_yank exec_s () (integer_sub) (boolean_dup_items) integer_eq exec_yank integer_fromboolean boolean_dup in1 integer_max integer_yankdup integer_shove exec_empty print_integer integer_gt in2 boolean_eq exec_do*times (tag_integer_541 boolean_and boolean_empty integer_dec boolean_swap boolean_invert_first_then_and integer_swap boolean_eq exec_swap (exec_s (boolean_xor boolean_flush) (integer_swap) (integer_stackdepth integer_rot) boolean_swap exec_y (exec_dup_items exec_empty boolean_yankdup exec_stackdepth integer_min) integer_pop integer_dup_times) (integer_swap) exec_eq in1 exec_s (exec_empty) (print_exec (exec_do*while (boolean_shove) in1 integer_dec) integer_lte integer_div integer_yankdup) (exec_noop exec_y_when_autoconstructing (boolean_stackdepth exec_flush integer_gte integer_max exec_do*count (exec_do*range (boolean_dup_items exec_when (exec_while (boolean_shove exec_eq integer_dup_times exec_s (boolean_invert_second_then_and exec_stackdepth) () (exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_empty) () ()) () ())))))))))
Zero cases best errors: [1 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 112
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 4 19 10 5 7 15 16 6 7)
Population mean number of elite cases: 0.09
Count of perfect (error zero) individuals by case: (4 4 19 10 5 7 15 16 6 7)
Population mean number of perfect (error zero) cases: 0.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_exec_918} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction -7} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max})
Best program: (integer_eq boolean_shove exec_dup_items integer_stackdepth integer_mod integer_eq exec_yankdup boolean_dup_items exec_stackdepth tag_exec_918 (exec_do*while (print_newline boolean_frominteger integer_lte) boolean_dup_items) integer_sub integer_lte exec_do*while () exec_yankdup boolean_eq integer_yankdup in3 boolean_yank integer_stackdepth -7 boolean_rot integer_swap boolean_yankdup exec_s () (print_integer boolean_flush) (exec_k_when_autoconstructing (boolean_empty exec_while (boolean_dup_items exec_shove (exec_yank boolean_shove exec_shove (integer_gte boolean_empty exec_do*range (exec_swap (boolean_dup_items exec_y_when_autoconstructing () exec_when (integer_lte boolean_eq in1 integer_fromboolean boolean_eq integer_max)) ()))))) ()))
Errors: [1 1 0 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 52
Size: 69
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 9.907
Median total errors in population: 10
Error averages by case: (0.996 0.996 0.981 0.99 0.995 0.993 0.985 0.984 0.994 0.993)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.729
Average program size in population (points): 71.355
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 500299
--- Timings ---
Current time: 1559314697893 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.9 seconds, 31.1%
Fitness Testing:      1.8 seconds, 65.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 42                 
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: 8                  
Correct output: -89                 | Program output: 63                 
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 35                 
Correct output: 52                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 21                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 20                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 25                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 63                 
Correct output: 21                  | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: 15                 
Correct output: -94                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -29                
Correct output: -74                 | Program output: 13                 
Correct output: -6                  | Program output: -6                 
Correct output: 38                  | Program output: 53                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: 35                 
Correct output: -86                 | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: 27                  | Program output: 27                 
Correct output: -100                | Program output: -52                
Correct output: -78                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 87                 
Correct output: -85                 | Program output: 22                 
Correct output: -80                 | Program output: -10                
Correct output: -40                 | Program output: 33                 
Correct output: -67                 | Program output: -21                
Correct output: -25                 | Program output: 56                 
Correct output: -60                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: 22                 
Correct output: -81                 | Program output: -61                
Correct output: -49                 | Program output: 59                 
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: 61                 
Correct output: -82                 | Program output: -45                
Correct output: -27                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: 2                  
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -16                
Correct output: -4                  | Program output: 49                 
Correct output: -93                 | Program output: -75                
Correct output: -77                 | Program output: -52                
Correct output: -73                 | Program output: 24                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_gte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_586} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 1, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_gte integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and exec_do*range ()) in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (exec_rot (exec_empty integer_eq) (in2 exec_shove (boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) (exec_swap (exec_noop boolean_pop boolean_invert_second_then_and exec_k () (integer_gte 78 exec_dup (print_exec (boolean_empty boolean_stackdepth integer_lt exec_k (print_integer boolean_invert_second_then_and tag_exec_586 (integer_fromboolean exec_k_when_autoconstructing (exec_yankdup) (print_exec () print_boolean boolean_yank integer_inc integer_empty exec_y (boolean_empty exec_rot () (integer_dup_items exec_yankdup integer_sub) () boolean_frominteger print_newline) exec_rot (integer_eq integer_lt) (boolean_frominteger) ()))) ())))) ())))) ()))) ())) ())))
Lexicase best errors: [0 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 139
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_gte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_586} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 1, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_gte integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and exec_do*range ()) in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (exec_rot (exec_empty integer_eq) (in2 exec_shove (boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) (exec_swap (exec_noop boolean_pop boolean_invert_second_then_and exec_k () (integer_gte 78 exec_dup (print_exec (boolean_empty boolean_stackdepth integer_lt exec_k (print_integer boolean_invert_second_then_and tag_exec_586 (integer_fromboolean exec_k_when_autoconstructing (exec_yankdup) (print_exec () print_boolean boolean_yank integer_inc integer_empty exec_y (boolean_empty exec_rot () (integer_dup_items exec_yankdup integer_sub) () boolean_frominteger print_newline) exec_rot (integer_eq integer_lt) (boolean_frominteger) ()))) ())))) ())))) ()))) ())) ())))
Zero cases best errors: [0 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 139
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (331 881 327 331 327 275 329 268 543 276)
Population mean number of elite cases: 3.89
Count of perfect (error zero) individuals by case: (331 881 327 331 327 275 329 268 543 276)
Population mean number of perfect (error zero) cases: 3.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_gte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_586} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 1, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_frominteger})
Best program: (integer_gte integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and exec_do*range ()) in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (exec_rot (exec_empty integer_eq in2 exec_shove (boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) (exec_swap (exec_noop boolean_pop boolean_invert_second_then_and exec_k () (integer_gte 78 exec_dup (print_exec (boolean_empty boolean_stackdepth integer_lt exec_k (print_integer boolean_invert_second_then_and tag_exec_586 (integer_fromboolean exec_k_when_autoconstructing (exec_yankdup) (print_exec () print_boolean boolean_yank integer_inc integer_empty exec_y (boolean_empty exec_rot () (integer_dup_items exec_yankdup integer_sub) () boolean_frominteger print_newline) exec_rot (integer_eq integer_lt) (boolean_frominteger) ()))) ())))) ())))) ()))) () ())) ())))
Errors: [0 0 0 0 0 1 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 91
Size: 139
Percent parens: 0.345
--- Population Statistics ---
Average total errors in population: 6.112
Median total errors in population: 6
Error averages by case: (0.669 0.119 0.673 0.669 0.673 0.725 0.671 0.732 0.457 0.724)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.419
Average program size in population (points): 88.259
Average percent parens in population: 0.292
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.511
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 850705
--- Timings ---
Current time: 1559314700662 milliseconds
Total Time:           6.0 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.8 seconds, 47.0%
Fitness Testing:      2.3 seconds, 38.7%
Report:               0.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: 42                 
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: 8                  
Correct output: -89                 | Program output: 63                 
Correct output: -56                 | Program output: -42                
Correct output: -12                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 39                 
Correct output: 52                  | Program output: 52                 
Correct output: 17                  | Program output: 33                 
Correct output: 2                   | Program output: 44                 
Correct output: 4                   | Program output: 43                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 82                 
Correct output: 20                  | Program output: 70                 
Correct output: 11                  | Program output: 12                 
Correct output: 8                   | Program output: 64                 
Correct output: 54                  | Program output: 66                 
Correct output: 8                   | Program output: 97                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 53                 
Correct output: 7                   | Program output: 52                 
Correct output: 11                  | Program output: 72                 
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 95                 
Correct output: 15                  | Program output: 63                 
Correct output: 26                  | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 63                 
Correct output: -30                 | Program output: 27                 
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: 37                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: 37                 
Correct output: -56                 | Program output: -21                
Correct output: -21                 | Program output: 48                 
Correct output: -4                  | Program output: -4                 
Correct output: -86                 | Program output: -86                
Correct output: 23                  | Program output: 39                 
Correct output: -15                 | Program output: 41                 
Correct output: -36                 | Program output: 78                 
Correct output: -95                 | Program output: -65                
Correct output: -77                 | Program output: 87                 
Correct output: -17                 | Program output: 9                  
Correct output: 27                  | Program output: 78                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -75                
Correct output: -9                  | Program output: 78                 
Correct output: -50                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: 72                 
Correct output: -75                 | Program output: 87                 
Correct output: -65                 | Program output: -9                 
Correct output: -96                 | Program output: -51                
Correct output: -93                 | Program output: -26                
Correct output: 38                  | Program output: 83                 
Correct output: -85                 | Program output: -64                
Correct output: -80                 | Program output: 26                 
Correct output: -40                 | Program output: 68                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -28                 | Program output: 41                 
Correct output: -31                 | Program output: -31                
Correct output: -81                 | Program output: -17                
Correct output: -49                 | Program output: 25                 
Correct output: -83                 | Program output: 4                  
Correct output: -2                  | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -61                 | Program output: -50                
Correct output: -94                 | Program output: -93                
Correct output: -92                 | Program output: -88                
Correct output: -53                 | Program output: 18                 
Correct output: -69                 | Program output: 29                 
Correct output: -81                 | Program output: 35                 
Correct output: -69                 | Program output: -11                
Correct output: -43                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -58                 | Program output: -7                 
Correct output: -36                 | Program output: 42                 
Correct output: -51                 | Program output: -51                
Correct output: -4                  | Program output: -4                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: 98                 
Correct output: -73                 | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_gte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove})
Lexicase best program: (integer_gte integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and exec_do*range ()) in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove ()))
Lexicase best errors: [1 0 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_gte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove})
Zero cases best program: (integer_gte integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and exec_do*range ()) in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove ()))
Zero cases best errors: [1 0 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (244 426 917 657 244 245 660 242 242 659)
Population mean number of elite cases: 4.54
Count of perfect (error zero) individuals by case: (244 426 917 657 244 245 660 242 242 659)
Population mean number of perfect (error zero) cases: 4.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 2, :instruction print_integer} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_966} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_529} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup})
Best program: (integer_pop tag_boolean_888 exec_dup_items in3 integer_dup_times in3 exec_y_when_autoconstructing (integer_yank exec_do*range (print_integer)) integer_fromboolean integer_dup exec_do*range (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_pop ()) in4 exec_stackdepth boolean_yank) integer_pop print_integer boolean_pop boolean_shove integer_gt integer_min integer_sub boolean_or exec_dup_times (boolean_flush integer_shove in4 exec_dup_times (boolean_empty integer_pop integer_dup tag_exec_966 (integer_stackdepth exec_shove (exec_dup_times (print_integer in4 boolean_empty integer_empty) print_boolean integer_lt integer_max boolean_swap exec_while (integer_empty) exec_do*range (integer_stackdepth) exec_dup_times (integer_dec) boolean_invert_first_then_and exec_stackdepth in2 exec_do*while (boolean_yankdup boolean_pop tagged_529) exec_y (integer_eq integer_dup))))))
Errors: [0 1 0 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 77
Size: 93
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 5.464
Median total errors in population: 5
Error averages by case: (0.756 0.574 0.083 0.343 0.756 0.755 0.34 0.758 0.758 0.341)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.339
Average program size in population (points): 97.546
Average percent parens in population: 0.313
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.09
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1091900
--- Timings ---
Current time: 1559314703272 milliseconds
Total Time:           8.6 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.8 seconds, 56.0%
Fitness Testing:      2.7 seconds, 30.9%
Report:               1.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 87                 
Correct output: 17                  | Program output: 73                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 14                 
Correct output: 14                  | Program output: 21                 
Correct output: 8                   | Program output: 78                 
Correct output: 20                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 56                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 17                 
Correct output: 44                  | Program output: 67                 
Correct output: 21                  | Program output: 21                 
Correct output: 15                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: -4                 
Correct output: -94                 | Program output: 63                 
Correct output: -93                 | Program output: -30                
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -66                
Correct output: -6                  | Program output: 2                  
Correct output: 38                  | Program output: 42                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: 67                 
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: 35                 
Correct output: -86                 | Program output: 10                 
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: 43                 
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -68                
Correct output: -17                 | Program output: 35                 
Correct output: 27                  | Program output: 39                 
Correct output: -100                | Program output: -52                
Correct output: -78                 | Program output: -78                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: 48                 
Correct output: -76                 | Program output: 12                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -67                 | Program output: -36                
Correct output: -25                 | Program output: -25                
Correct output: -60                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: 23                 
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: 78                 
Correct output: -82                 | Program output: -20                
Correct output: -27                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: -81                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: -12                
Correct output: -58                 | Program output: -49                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -16                
Correct output: -4                  | Program output: 12                 
Correct output: -93                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k})
Lexicase best program: (integer_sub integer_yankdup boolean_dup boolean_dup_items exec_dup_times (exec_dup (in1 integer_max in2 integer_min) print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor) integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (integer_dup exec_empty integer_eq in2 exec_shove (boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (print_integer) (boolean_eq) (in4 boolean_yankdup) boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) (print_integer exec_noop boolean_pop boolean_invert_second_then_and exec_k () (integer_gte 78 exec_dup (print_exec (boolean_empty boolean_stackdepth integer_lt exec_k () ())))))) ())))) ())))
Lexicase best errors: [1 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 99
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k})
Zero cases best program: (integer_sub integer_yankdup boolean_dup boolean_dup_items exec_dup_times (exec_dup (in1 integer_max in2 integer_min) print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor) integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (integer_dup exec_empty integer_eq in2 exec_shove (boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (print_integer) (boolean_eq) (in4 boolean_yankdup) boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) (print_integer exec_noop boolean_pop boolean_invert_second_then_and exec_k () (integer_gte 78 exec_dup (print_exec (boolean_empty boolean_stackdepth integer_lt exec_k () ())))))) ())))) ())))
Zero cases best errors: [1 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 99
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (406 406 248 493 248 498 406 500 248 493)
Population mean number of elite cases: 3.95
Count of perfect (error zero) individuals by case: (406 406 248 493 248 498 406 500 248 493)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k})
Best program: (integer_sub boolean_dup_times boolean_dup boolean_dup_items exec_dup_times (exec_dup (in1 integer_max in2 integer_min) print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor) integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (integer_dup exec_empty integer_eq in2 boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup boolean_and boolean_or integer_dec exec_swap (boolean_stackdepth) (print_integer exec_noop boolean_pop boolean_invert_second_then_and exec_k () (integer_gte 78 exec_dup (print_exec (boolean_empty boolean_stackdepth integer_lt exec_k () ()))))))) ()))) ())))
Errors: [1 1 0 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 68
Size: 98
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.054
Median total errors in population: 7
Error averages by case: (0.594 0.594 0.752 0.507 0.752 0.502 0.594 0.5 0.752 0.507)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.69
Average program size in population (points): 81.78
Average percent parens in population: 0.299
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.57975
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1336957
--- Timings ---
Current time: 1559314705793 milliseconds
Total Time:          11.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.8 seconds, 60.9%
Fitness Testing:      3.0 seconds, 26.5%
Report:               1.3 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 87                 
Correct output: 17                  | Program output: 73                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 14                 
Correct output: 14                  | Program output: 21                 
Correct output: 8                   | Program output: 78                 
Correct output: 20                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 56                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 17                 
Correct output: 44                  | Program output: 67                 
Correct output: 21                  | Program output: 21                 
Correct output: 15                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: -4                 
Correct output: -94                 | Program output: 63                 
Correct output: -93                 | Program output: -30                
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -66                
Correct output: -6                  | Program output: 2                  
Correct output: 38                  | Program output: 42                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: 67                 
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: 35                 
Correct output: -86                 | Program output: 10                 
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: 43                 
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -68                
Correct output: -17                 | Program output: 35                 
Correct output: 27                  | Program output: 39                 
Correct output: -100                | Program output: -52                
Correct output: -78                 | Program output: -78                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: 48                 
Correct output: -76                 | Program output: 12                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -67                 | Program output: -36                
Correct output: -25                 | Program output: -25                
Correct output: -60                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: 23                 
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: 78                 
Correct output: -82                 | Program output: -20                
Correct output: -27                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: -81                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: -12                
Correct output: -58                 | Program output: -49                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -16                
Correct output: -4                  | Program output: 12                 
Correct output: -93                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_586} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_pop tag_boolean_888 exec_dup_items in3 integer_dup_times in3 boolean_invert_second_then_and integer_sub integer_yankdup boolean_dup boolean_dup_items exec_dup_times (exec_dup (in1 integer_max in2 integer_min) boolean_invert_second_then_and exec_do*range ()) in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (exec_rot (exec_do*range (integer_eq in2 exec_shove (boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) (exec_swap (exec_noop boolean_pop boolean_invert_second_then_and exec_k (integer_gte 78 exec_dup (print_exec (boolean_empty boolean_stackdepth integer_lt exec_k (print_integer boolean_invert_second_then_and tag_exec_586 (integer_fromboolean exec_k_when_autoconstructing (exec_yankdup) (print_exec (print_boolean boolean_yank integer_inc integer_empty exec_y (boolean_empty exec_rot () (integer_dup_items exec_yankdup integer_sub) () boolean_frominteger print_newline)) exec_rot (integer_eq integer_lt boolean_frominteger) () ()))) ()))) ()) ())))) ())))) () ())) ())))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 152
Percent parens: 0.322
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_586} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_pop tag_boolean_888 exec_dup_items in3 integer_dup_times in3 boolean_invert_second_then_and integer_sub integer_yankdup boolean_dup boolean_dup_items exec_dup_times (exec_dup (in1 integer_max in2 integer_min) boolean_invert_second_then_and exec_do*range ()) in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (exec_rot (exec_do*range (integer_eq in2 exec_shove (boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) (exec_swap (exec_noop boolean_pop boolean_invert_second_then_and exec_k (integer_gte 78 exec_dup (print_exec (boolean_empty boolean_stackdepth integer_lt exec_k (print_integer boolean_invert_second_then_and tag_exec_586 (integer_fromboolean exec_k_when_autoconstructing (exec_yankdup) (print_exec (print_boolean boolean_yank integer_inc integer_empty exec_y (boolean_empty exec_rot () (integer_dup_items exec_yankdup integer_sub) () boolean_frominteger print_newline)) exec_rot (integer_eq integer_lt boolean_frominteger) () ()))) ()))) ()) ())))) ())))) () ())) ())))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 152
Percent parens: 0.322
--- Lexicase Population Statistics ---
Count of elite individuals by case: (929 1 923 932 458 924 459 931 1 466)
Population mean number of elite cases: 6.02
Count of perfect (error zero) individuals by case: (929 1 923 932 458 924 459 931 1 466)
Population mean number of perfect (error zero) cases: 6.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_sub integer_yankdup boolean_dup boolean_dup_items exec_dup_times (exec_dup (in1 integer_max in2 integer_min) print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor) integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) boolean_pop exec_do*range (integer_pop exec_k (boolean_dup_items integer_eq integer_empty exec_noop exec_if (exec_do*while () exec_dup () integer_dup exec_empty integer_eq in2 exec_shove (boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) (print_integer exec_noop boolean_pop boolean_invert_second_then_and exec_k () (integer_gte 78 exec_dup (print_exec (boolean_empty boolean_stackdepth integer_lt exec_k (print_integer boolean_invert_second_then_and) ()))))))) ()))) ()) ()))
Errors: [0 1 0 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 71
Size: 102
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 3.976
Median total errors in population: 4
Error averages by case: (0.071 0.999 0.077 0.068 0.542 0.076 0.541 0.069 0.999 0.534)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.277
Average program size in population (points): 104.979
Average percent parens in population: 0.297
Minimum age in population: 4.25
Maximum age in population: 7.75
Average age in population: 6.34625
Median age in population: 6.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1605709
--- Timings ---
Current time: 1559314708595 milliseconds
Total Time:          13.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.9 seconds, 64.2%
Fitness Testing:      3.3 seconds, 23.7%
Report:               1.6 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 42                 
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: 88                 
Correct output: -89                 | Program output: 63                 
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 35                 
Correct output: 52                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 21                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 20                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 25                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 63                 
Correct output: 21                  | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: 15                 
Correct output: -94                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -29                
Correct output: -74                 | Program output: 13                 
Correct output: -6                  | Program output: -6                 
Correct output: 38                  | Program output: 53                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: 35                 
Correct output: -86                 | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: 27                  | Program output: 27                 
Correct output: -100                | Program output: -52                
Correct output: -78                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 87                 
Correct output: -85                 | Program output: 22                 
Correct output: -80                 | Program output: -10                
Correct output: -40                 | Program output: 33                 
Correct output: -67                 | Program output: -21                
Correct output: -25                 | Program output: 56                 
Correct output: -60                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: 22                 
Correct output: -81                 | Program output: -61                
Correct output: -49                 | Program output: 59                 
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: 61                 
Correct output: -82                 | Program output: -45                
Correct output: -27                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: 2                  
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -16                
Correct output: -4                  | Program output: 49                 
Correct output: -93                 | Program output: -75                
Correct output: -77                 | Program output: -52                
Correct output: -73                 | Program output: 24                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_966} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_529} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_pop tag_boolean_888 exec_dup_items in3 exec_dup_items integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and exec_do*range ()) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_pop ()) in4 exec_stackdepth boolean_yank) integer_pop print_integer boolean_pop boolean_shove integer_gt integer_min integer_sub exec_k_when_autoconstructing () (exec_dup_times (boolean_flush integer_flush in4 exec_dup_times (boolean_empty integer_pop integer_dup tag_exec_966 (integer_stackdepth exec_shove (exec_dup_times (print_integer in4 boolean_empty integer_empty) print_boolean integer_lt integer_max boolean_swap exec_while (integer_empty) exec_do*range (integer_stackdepth) integer_fromboolean integer_dec) boolean_invert_first_then_and exec_stackdepth in2 exec_do*while (boolean_yankdup boolean_pop tagged_529) exec_y (integer_eq integer_dup))))))
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 97
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_966} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_529} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_pop tag_boolean_888 exec_dup_items in3 exec_dup_items integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and exec_do*range ()) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_pop ()) in4 exec_stackdepth boolean_yank) integer_pop print_integer boolean_pop boolean_shove integer_gt integer_min integer_sub exec_k_when_autoconstructing () (exec_dup_times (boolean_flush integer_flush in4 exec_dup_times (boolean_empty integer_pop integer_dup tag_exec_966 (integer_stackdepth exec_shove (exec_dup_times (print_integer in4 boolean_empty integer_empty) print_boolean integer_lt integer_max boolean_swap exec_while (integer_empty) exec_do*range (integer_stackdepth) integer_fromboolean integer_dec) boolean_invert_first_then_and exec_stackdepth in2 exec_do*while (boolean_yankdup boolean_pop tagged_529) exec_y (integer_eq integer_dup))))))
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 97
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (923 923 933 365 219 181 365 922 358 357)
Population mean number of elite cases: 5.55
Count of perfect (error zero) individuals by case: (923 923 933 365 219 181 365 922 358 357)
Population mean number of perfect (error zero) cases: 5.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_966} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_529} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup})
Best program: (integer_pop tag_boolean_888 exec_dup_items in3 exec_dup_items integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and exec_do*range ()) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_pop ()) in4 integer_lt boolean_yank) integer_pop print_integer boolean_pop integer_add integer_gt integer_min integer_sub exec_k_when_autoconstructing () (exec_dup_times (boolean_flush integer_flush in4 exec_dup_times (boolean_empty integer_pop integer_dup tag_exec_966 (integer_stackdepth exec_shove (integer_flush print_integer in4 boolean_empty integer_empty) print_boolean integer_lt integer_max boolean_swap exec_while (integer_empty) exec_do*range (integer_stackdepth) integer_fromboolean integer_dec) boolean_invert_first_then_and exec_stackdepth in2 exec_do*while (boolean_yankdup boolean_pop tagged_529) exec_y (integer_eq integer_dup)))))
Errors: [0 0 0 0 1 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 79
Size: 96
Percent parens: 0.177
--- Population Statistics ---
Average total errors in population: 4.454
Median total errors in population: 4
Error averages by case: (0.077 0.077 0.067 0.635 0.781 0.819 0.635 0.078 0.642 0.643)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.891
Average program size in population (points): 101.298
Average percent parens in population: 0.256
Minimum age in population: 5.5
Maximum age in population: 9.625
Average age in population: 7.2906875
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1857610
--- Timings ---
Current time: 1559314711034 milliseconds
Total Time:          16.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.8 seconds, 65.8%
Fitness Testing:      3.5 seconds, 21.6%
Report:               2.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: 42                 
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: 8                  
Correct output: -89                 | Program output: 63                 
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 39                 
Correct output: 52                  | Program output: 52                 
Correct output: 17                  | Program output: 33                 
Correct output: 2                   | Program output: 44                 
Correct output: 4                   | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 82                 
Correct output: 20                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 62                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 39                 
Correct output: 11                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 25                 
Correct output: 15                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 63                 
Correct output: -30                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: 37                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -21                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: -4                 
Correct output: -86                 | Program output: -86                
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: 41                 
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: -65                
Correct output: -77                 | Program output: -43                
Correct output: -17                 | Program output: 9                  
Correct output: 27                  | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -96                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 83                 
Correct output: -85                 | Program output: -64                
Correct output: -80                 | Program output: 26                 
Correct output: -40                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: -31                
Correct output: -81                 | Program output: -31                
Correct output: -49                 | Program output: 25                 
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -93                
Correct output: -92                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: -81                 | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: -44                
Correct output: -58                 | Program output: -49                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -51                
Correct output: -4                  | Program output: -4                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: 46                 
Correct output: -73                 | Program output: 24                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_swap integer_gte integer_flush integer_gt in3 integer_fromboolean boolean_dup in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_gte exec_noop exec_if (exec_do*while () integer_mod) (integer_dup exec_empty integer_eq in2 exec_shove (boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or) integer_dec exec_swap (boolean_stackdepth) (print_integer exec_noop exec_if (boolean_invert_second_then_and exec_k (integer_gte 78 exec_dup (print_exec (boolean_empty boolean_stackdepth integer_lt exec_k (print_integer boolean_invert_second_then_and) ()))) ()) ()))) ())))) ())))
Lexicase best errors: [0 1 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 101
Percent parens: 0.307
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_swap integer_gte integer_flush integer_gt in3 integer_fromboolean boolean_dup in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_gte exec_noop exec_if (exec_do*while () integer_mod) (integer_dup exec_empty integer_eq in2 exec_shove (boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or) integer_dec exec_swap (boolean_stackdepth) (print_integer exec_noop exec_if (boolean_invert_second_then_and exec_k (integer_gte 78 exec_dup (print_exec (boolean_empty boolean_stackdepth integer_lt exec_k (print_integer boolean_invert_second_then_and) ()))) ()) ()))) ())))) ())))
Zero cases best errors: [0 1 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 101
Percent parens: 0.307
--- Lexicase Population Statistics ---
Count of elite individuals by case: (916 600 310 600 310 315 606 1000 1000 1000)
Population mean number of elite cases: 6.66
Count of perfect (error zero) individuals by case: (916 600 310 600 310 315 606 0 0 0)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (boolean_swap exec_dup_items integer_flush integer_gt in3 integer_fromboolean boolean_dup in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (integer_dup exec_empty integer_eq in2 exec_shove (boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) (print_integer exec_noop exec_if (boolean_invert_second_then_and boolean_eq integer_gte 78 exec_dup (print_exec (boolean_empty boolean_stackdepth integer_lt exec_k (print_integer boolean_invert_second_then_and) ()))) ())))) ())))) ())))
Errors: [0 1 0 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 70
Size: 99
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 6.343
Median total errors in population: 6
Error averages by case: (0.084 0.4 0.69 0.4 0.69 0.685 0.394 1.0 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 1 1 1)
Average genome size in population (length): 77.993
Average program size in population (points): 102.418
Average percent parens in population: 0.232
Minimum age in population: 7.0
Maximum age in population: 10.875
Average age in population: 8.61125
Median age in population: 8.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2081403
--- Timings ---
Current time: 1559314713510 milliseconds
Total Time:          18.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.7 seconds, 67.5%
Fitness Testing:      3.8 seconds, 20.1%
Report:               2.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 42                 
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: 88                 
Correct output: -89                 | Program output: 63                 
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 35                 
Correct output: 52                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 21                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 20                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 25                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 63                 
Correct output: 21                  | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: 15                 
Correct output: -94                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -29                
Correct output: -74                 | Program output: 13                 
Correct output: -6                  | Program output: -6                 
Correct output: 38                  | Program output: 53                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: 35                 
Correct output: -86                 | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: 27                  | Program output: 27                 
Correct output: -100                | Program output: -52                
Correct output: -78                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 87                 
Correct output: -85                 | Program output: 22                 
Correct output: -80                 | Program output: -10                
Correct output: -40                 | Program output: 33                 
Correct output: -67                 | Program output: -21                
Correct output: -25                 | Program output: 56                 
Correct output: -60                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: 22                 
Correct output: -81                 | Program output: -61                
Correct output: -49                 | Program output: 59                 
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: 61                 
Correct output: -82                 | Program output: -45                
Correct output: -27                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: 2                  
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -16                
Correct output: -4                  | Program output: 49                 
Correct output: -93                 | Program output: -75                
Correct output: -77                 | Program output: -52                
Correct output: -73                 | Program output: 24                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -66} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_pop tag_boolean_888 exec_dup_items exec_s_when_autoconstructing (exec_dup_items) (integer_max) (exec_k (in4 integer_dup_times) (boolean_invert_second_then_and exec_do*range ()) in2 integer_min) print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (exec_rot (exec_empty integer_eq exec_shove (boolean_dup_times -66 exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_eq) (in4 boolean_yankdup) boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) (exec_swap (exec_noop boolean_pop boolean_invert_second_then_and exec_k () (integer_gte 78 exec_dup (print_exec (exec_y (integer_eq integer_dup))))) ())))) ()))) () ())) ()))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 112
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -66} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_pop tag_boolean_888 exec_dup_items exec_s_when_autoconstructing (exec_dup_items) (integer_max) (exec_k (in4 integer_dup_times) (boolean_invert_second_then_and exec_do*range ()) in2 integer_min) print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (exec_rot (exec_empty integer_eq exec_shove (boolean_dup_times -66 exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_eq) (in4 boolean_yankdup) boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) (exec_swap (exec_noop boolean_pop boolean_invert_second_then_and exec_k () (integer_gte 78 exec_dup (print_exec (exec_y (integer_eq integer_dup))))) ())))) ()))) () ())) ()))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 112
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (429 428 420 464 1000 882 904 903 897 904)
Population mean number of elite cases: 7.23
Count of perfect (error zero) individuals by case: (429 428 420 464 0 882 904 903 897 904)
Population mean number of perfect (error zero) cases: 6.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_966} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_529} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup})
Best program: (integer_pop tag_boolean_888 exec_dup_items in3 exec_dup_items integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and exec_do*range ()) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_pop ()) in4 exec_stackdepth boolean_yank) integer_pop print_integer boolean_pop boolean_shove integer_gt integer_min integer_sub exec_k_when_autoconstructing () (exec_dup_times (boolean_flush integer_flush in4 exec_dup_times (boolean_empty integer_pop integer_dup tag_exec_966 (integer_stackdepth exec_shove (exec_dup_times (print_integer in4 boolean_empty integer_empty) print_boolean integer_lt integer_max exec_empty exec_while (integer_empty) exec_do*range (integer_stackdepth) integer_fromboolean boolean_flush) boolean_invert_first_then_and exec_stackdepth in2 exec_do*while (boolean_yankdup boolean_pop tagged_529) exec_y (integer_eq integer_dup))))))
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 79
Size: 97
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 3.769
Median total errors in population: 4
Error averages by case: (0.571 0.572 0.58 0.536 1.0 0.118 0.096 0.097 0.103 0.096)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 77.647
Average program size in population (points): 104.447
Average percent parens in population: 0.249
Minimum age in population: 8.0
Maximum age in population: 12.3125
Average age in population: 10.281875
Median age in population: 10.328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.009
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2365268
--- Timings ---
Current time: 1559314716386 milliseconds
Total Time:          21.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.0 seconds, 69.2%
Fitness Testing:      4.1 seconds, 18.9%
Report:               2.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: 42                 
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: 8                  
Correct output: -89                 | Program output: 63                 
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 39                 
Correct output: 52                  | Program output: 52                 
Correct output: 17                  | Program output: 33                 
Correct output: 2                   | Program output: 44                 
Correct output: 4                   | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 82                 
Correct output: 20                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 62                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 39                 
Correct output: 11                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 25                 
Correct output: 15                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 63                 
Correct output: -30                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: 37                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -21                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: -4                 
Correct output: -86                 | Program output: -86                
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: 41                 
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: -65                
Correct output: -77                 | Program output: -43                
Correct output: -17                 | Program output: 9                  
Correct output: 27                  | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -96                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 83                 
Correct output: -85                 | Program output: -64                
Correct output: -80                 | Program output: 26                 
Correct output: -40                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: -31                
Correct output: -81                 | Program output: -31                
Correct output: -49                 | Program output: 25                 
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -93                
Correct output: -92                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: -81                 | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: -44                
Correct output: -58                 | Program output: -49                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -51                
Correct output: -4                  | Program output: -4                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: 46                 
Correct output: -73                 | Program output: 24                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth})
Lexicase best program: (boolean_swap exec_dup_items integer_flush integer_gt in3 integer_fromboolean boolean_dup in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (integer_dup exec_empty integer_eq in2 exec_shove (boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) ()))) ())))) ())))
Lexicase best errors: [1 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 78
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth})
Zero cases best program: (boolean_swap exec_dup_items integer_flush integer_gt in3 integer_fromboolean boolean_dup in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (integer_dup exec_empty integer_eq in2 exec_shove (boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) ()))) ())))) ())))
Zero cases best errors: [1 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 78
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (671 945 222 921 222 219 696 1000 902 219)
Population mean number of elite cases: 6.02
Count of perfect (error zero) individuals by case: (671 945 222 921 222 219 696 0 902 219)
Population mean number of perfect (error zero) cases: 5.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_966} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_529} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup})
Best program: (integer_pop tag_boolean_888 boolean_yank in3 integer_dup_times in3 exec_y_when_autoconstructing (integer_yank exec_do*range ()) in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (exec_rot (exec_empty boolean_yankdup in2 boolean_yank) () (integer_pop print_integer boolean_pop) boolean_shove integer_gt integer_min integer_sub exec_k_when_autoconstructing () (exec_dup_times (boolean_flush integer_flush boolean_and exec_dup_times (boolean_empty integer_pop integer_dup tag_exec_966 (integer_stackdepth exec_shove (exec_dup_times (print_integer in4 boolean_empty integer_empty) print_boolean integer_lt integer_max boolean_swap print_integer in4 boolean_empty in4) print_boolean integer_lt integer_max boolean_swap exec_while (integer_empty) exec_do*range (integer_stackdepth) integer_fromboolean integer_dec) boolean_invert_first_then_and exec_stackdepth in2 exec_do*while (boolean_yankdup boolean_pop tagged_529) exec_y (integer_eq integer_dup)))))) ())))
Errors: [1 0 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 92
Size: 119
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 4.983
Median total errors in population: 5
Error averages by case: (0.329 0.055 0.778 0.079 0.778 0.781 0.304 1.0 0.098 0.781)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 77.846
Average program size in population (points): 101.569
Average percent parens in population: 0.229
Minimum age in population: 9.0
Maximum age in population: 13.6953125
Average age in population: 11.6118671875
Median age in population: 11.703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2607896
--- Timings ---
Current time: 1559314718883 milliseconds
Total Time:          24.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.0 seconds, 70.0%
Fitness Testing:      4.4 seconds, 18.1%
Report:               2.8 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 42                 
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: 88                 
Correct output: -89                 | Program output: 63                 
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 35                 
Correct output: 52                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 21                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 20                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 25                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 63                 
Correct output: 21                  | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: 15                 
Correct output: -94                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -29                
Correct output: -74                 | Program output: 13                 
Correct output: -6                  | Program output: -6                 
Correct output: 38                  | Program output: 53                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: 35                 
Correct output: -86                 | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: 27                  | Program output: 27                 
Correct output: -100                | Program output: -52                
Correct output: -78                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 87                 
Correct output: -85                 | Program output: 22                 
Correct output: -80                 | Program output: -10                
Correct output: -40                 | Program output: 33                 
Correct output: -67                 | Program output: -21                
Correct output: -25                 | Program output: 56                 
Correct output: -60                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: 22                 
Correct output: -81                 | Program output: -61                
Correct output: -49                 | Program output: 59                 
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: 61                 
Correct output: -82                 | Program output: -45                
Correct output: -27                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: 2                  
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -16                
Correct output: -4                  | Program output: 49                 
Correct output: -93                 | Program output: -75                
Correct output: -77                 | Program output: -52                
Correct output: -73                 | Program output: 24                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_sub in3 exec_dup_items in3 exec_dup_items integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and exec_do*range ()) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_pop ()) in4 exec_stackdepth boolean_yank) exec_s (print_integer boolean_pop) (boolean_shove integer_gt integer_min integer_sub exec_k_when_autoconstructing () (exec_dup_times (boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (exec_yank boolean_yankdup) (boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) (print_integer exec_noop boolean_pop boolean_invert_second_then_and exec_k () (integer_lt 78 exec_dup (print_exec (boolean_empty boolean_stackdepth integer_gt exec_k (print_integer boolean_invert_second_then_and) ()))))))) ())))) ())
Lexicase best errors: [0 0 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 107
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_sub in3 exec_dup_items in3 exec_dup_items integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and exec_do*range ()) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_pop ()) in4 exec_stackdepth boolean_yank) exec_s (print_integer boolean_pop) (boolean_shove integer_gt integer_min integer_sub exec_k_when_autoconstructing () (exec_dup_times (boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (exec_yank boolean_yankdup) (boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) (print_integer exec_noop boolean_pop boolean_invert_second_then_and exec_k () (integer_lt 78 exec_dup (print_exec (boolean_empty boolean_stackdepth integer_gt exec_k (print_integer boolean_invert_second_then_and) ()))))))) ())))) ())
Zero cases best errors: [0 0 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 107
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (320 922 918 939 1000 587 939 925 321 1000)
Population mean number of elite cases: 7.87
Count of perfect (error zero) individuals by case: (320 922 918 939 0 587 939 925 321 0)
Population mean number of perfect (error zero) cases: 5.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_966} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_pop} {:close 1, :instruction tagged_529} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup})
Best program: (integer_pop tag_boolean_888 exec_dup_items in3 exec_dup_items integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and exec_do*range ()) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot) boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_dup boolean_rot boolean_dup) in4 exec_stackdepth boolean_yank integer_pop print_integer boolean_pop boolean_shove integer_gt integer_min integer_sub exec_k_when_autoconstructing () (exec_dup_times () boolean_flush integer_flush in4 exec_dup_times (boolean_empty integer_pop integer_dup tag_exec_966 (integer_stackdepth exec_shove (exec_dup_times (print_integer in4 boolean_empty integer_empty) print_boolean integer_lt integer_max boolean_swap exec_while (integer_empty) exec_do*range (integer_stackdepth) integer_fromboolean integer_dec) in2 exec_do*while (boolean_yankdup boolean_pop) tagged_529) exec_y (integer_eq integer_dup))))
Errors: [0 0 0 0 1 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 77
Size: 94
Percent parens: 0.181
--- Population Statistics ---
Average total errors in population: 4.129
Median total errors in population: 4
Error averages by case: (0.68 0.078 0.082 0.061 1.0 0.413 0.061 0.075 0.679 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 77.017
Average program size in population (points): 104.663
Average percent parens in population: 0.258
Minimum age in population: 10.0
Maximum age in population: 15.1875
Average age in population: 13.219890625
Median age in population: 13.255859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 2887862
--- Timings ---
Current time: 1559314721383 milliseconds
Total Time:          26.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.9 seconds, 70.7%
Fitness Testing:      4.7 seconds, 17.5%
Report:               3.1 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: 42                 
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: 8                  
Correct output: -89                 | Program output: 63                 
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 39                 
Correct output: 52                  | Program output: 52                 
Correct output: 17                  | Program output: 33                 
Correct output: 2                   | Program output: 44                 
Correct output: 4                   | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 82                 
Correct output: 20                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 62                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 39                 
Correct output: 11                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 25                 
Correct output: 15                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 63                 
Correct output: -30                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: 37                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -21                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: -4                 
Correct output: -86                 | Program output: -86                
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: 41                 
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: -65                
Correct output: -77                 | Program output: -43                
Correct output: -17                 | Program output: 9                  
Correct output: 27                  | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -96                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 83                 
Correct output: -85                 | Program output: -64                
Correct output: -80                 | Program output: 26                 
Correct output: -40                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: -31                
Correct output: -81                 | Program output: -31                
Correct output: -49                 | Program output: 25                 
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -93                
Correct output: -92                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: -81                 | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: -44                
Correct output: -58                 | Program output: -49                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -51                
Correct output: -4                  | Program output: -4                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: 46                 
Correct output: -73                 | Program output: 24                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction tagged_763} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction tagged_763} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_pop tag_boolean_888 exec_dup_items in3 integer_max in2 integer_min print_integer exec_do*count (print_integer integer_rot print_boolean) in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k () (boolean_dup_items boolean_dup boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or integer_dec exec_swap (tagged_763) (boolean_or integer_dec exec_swap (tagged_763) (print_integer exec_noop boolean_pop boolean_invert_second_then_and exec_k () (integer_gte 78 exec_dup (print_exec (exec_flush boolean_stackdepth integer_lt exec_k (print_integer boolean_invert_second_then_and) ())))))) ())) ())))))
Lexicase best errors: [0 0 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 89
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction tagged_763} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction tagged_763} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_pop tag_boolean_888 exec_dup_items in3 integer_max in2 integer_min print_integer exec_do*count (print_integer integer_rot print_boolean) in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k () (boolean_dup_items boolean_dup boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or integer_dec exec_swap (tagged_763) (boolean_or integer_dec exec_swap (tagged_763) (print_integer exec_noop boolean_pop boolean_invert_second_then_and exec_k () (integer_gte 78 exec_dup (print_exec (exec_flush boolean_stackdepth integer_lt exec_k (print_integer boolean_invert_second_then_and) ())))))) ())) ())))))
Zero cases best errors: [0 0 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 89
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (289 917 291 286 615 927 617 944 1000 909)
Population mean number of elite cases: 6.80
Count of perfect (error zero) individuals by case: (289 917 291 286 615 927 617 944 0 909)
Population mean number of perfect (error zero) cases: 5.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_586} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 1, :instruction exec_yankdup} {:close 1, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y})
Best program: (integer_pop tag_boolean_888 exec_dup_items in3 integer_dup_times in3 exec_y_when_autoconstructing (integer_yank exec_do*range ()) in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_swap boolean_dup exec_dup (exec_noop exec_if (exec_yankdup) (integer_mod) exec_rot (exec_empty integer_eq exec_noop boolean_dup_times exec_do*while (exec_flush exec_shove (exec_s () (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (exec_s (exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) (exec_swap (exec_noop boolean_pop boolean_invert_second_then_and exec_k () (integer_gte 78 exec_dup (print_exec (boolean_empty boolean_stackdepth integer_lt exec_k (print_integer boolean_invert_second_then_and tag_exec_586 (integer_fromboolean in4 exec_yankdup) print_exec () print_boolean boolean_yank integer_inc integer_empty exec_y ()) ())))) ())) () ()))) ()))) () ())) ())))
Errors: [0 0 0 0 1 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 81
Size: 123
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 4.205
Median total errors in population: 4
Error averages by case: (0.711 0.083 0.709 0.714 0.385 0.073 0.383 0.056 1.0 0.091)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 77.273
Average program size in population (points): 102.632
Average percent parens in population: 0.242
Minimum age in population: 11.25
Maximum age in population: 16.625
Average age in population: 14.620515625
Median age in population: 14.7060546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3151677
--- Timings ---
Current time: 1559314723839 milliseconds
Total Time:          29.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.8 seconds, 71.2%
Fitness Testing:      5.0 seconds, 17.0%
Report:               3.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: 42                 
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: 8                  
Correct output: -89                 | Program output: 63                 
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 39                 
Correct output: 52                  | Program output: 52                 
Correct output: 17                  | Program output: 33                 
Correct output: 2                   | Program output: 44                 
Correct output: 4                   | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 82                 
Correct output: 20                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 62                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 39                 
Correct output: 11                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 25                 
Correct output: 15                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 63                 
Correct output: -30                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: 37                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -21                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: -4                 
Correct output: -86                 | Program output: -86                
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: 41                 
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: -65                
Correct output: -77                 | Program output: -43                
Correct output: -17                 | Program output: 9                  
Correct output: 27                  | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -96                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 83                 
Correct output: -85                 | Program output: -64                
Correct output: -80                 | Program output: 26                 
Correct output: -40                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: -31                
Correct output: -81                 | Program output: -31                
Correct output: -49                 | Program output: 25                 
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -93                
Correct output: -92                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: -81                 | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: -44                
Correct output: -58                 | Program output: -49                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -51                
Correct output: -4                  | Program output: -4                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: 46                 
Correct output: -73                 | Program output: 24                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_966} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_529} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_pop tag_boolean_888 exec_dup_items in3 integer_max in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot) exec_pop (exec_do*range (integer_pop exec_empty boolean_dup_items boolean_dup boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (in4 exec_stackdepth boolean_yank) () integer_pop print_integer boolean_pop) boolean_shove integer_gt integer_min integer_sub exec_k_when_autoconstructing () (exec_dup_times (boolean_flush exec_eq in4 exec_dup_times (boolean_empty boolean_not integer_dup tag_exec_966 (integer_stackdepth exec_shove (exec_dup_times (print_integer in4 boolean_empty integer_empty) print_boolean boolean_invert_second_then_and integer_max boolean_yankdup exec_while (integer_empty) exec_do*range (integer_stackdepth) integer_fromboolean integer_dec) boolean_invert_first_then_and exec_stackdepth in2 exec_do*while (boolean_yankdup boolean_pop tagged_529) exec_y (integer_eq integer_dup)))))))))
Lexicase best errors: [0 0 1 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 99
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_966} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_529} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_pop tag_boolean_888 exec_dup_items in3 integer_max in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot) exec_pop (exec_do*range (integer_pop exec_empty boolean_dup_items boolean_dup boolean_dup_times boolean_flush exec_flush exec_shove (exec_s () (in4 exec_stackdepth boolean_yank) () integer_pop print_integer boolean_pop) boolean_shove integer_gt integer_min integer_sub exec_k_when_autoconstructing () (exec_dup_times (boolean_flush exec_eq in4 exec_dup_times (boolean_empty boolean_not integer_dup tag_exec_966 (integer_stackdepth exec_shove (exec_dup_times (print_integer in4 boolean_empty integer_empty) print_boolean boolean_invert_second_then_and integer_max boolean_yankdup exec_while (integer_empty) exec_do*range (integer_stackdepth) integer_fromboolean integer_dec) boolean_invert_first_then_and exec_stackdepth in2 exec_do*while (boolean_yankdup boolean_pop tagged_529) exec_y (integer_eq integer_dup)))))))))
Zero cases best errors: [0 0 1 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 99
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (540 937 1000 1000 1000 1000 939 1000 1000 1000)
Population mean number of elite cases: 9.42
Count of perfect (error zero) individuals by case: (540 937 0 0 0 0 939 0 0 0)
Population mean number of perfect (error zero) cases: 2.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_586} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup})
Best program: (integer_pop tag_boolean_888 exec_dup_items in3 integer_dup_times in3 boolean_invert_second_then_and exec_do*range () in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty) (exec_noop exec_if (exec_do*while () integer_mod) (exec_rot (exec_do*range (integer_eq in2 exec_shove (boolean_dup_times boolean_yankdup exec_flush exec_shove (exec_s () (integer_yank exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or integer_dec exec_swap (integer_fromboolean) (exec_swap (exec_noop boolean_pop boolean_invert_second_then_and exec_k (integer_gte 78 exec_dup (print_exec (boolean_empty boolean_stackdepth integer_lt exec_k (exec_empty boolean_invert_second_then_and tag_exec_586 (integer_fromboolean exec_k_when_autoconstructing (exec_yankdup) (print_exec (print_boolean exec_s (integer_inc integer_empty exec_y (boolean_empty) exec_rot () (boolean_flush exec_yankdup) ()) () ())))) ()))) ()) ()))) ())))) () ())))))
Errors: [0 0 1 1 1 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 85
Size: 131
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 7.584
Median total errors in population: 7
Error averages by case: (0.46 0.063 1.0 1.0 1.0 1.0 0.061 1.0 1.0 1.0)
Error minima by case: (0 0 1 1 1 1 0 1 1 1)
Average genome size in population (length): 75.959
Average program size in population (points): 102.803
Average percent parens in population: 0.256
Minimum age in population: 13.21875
Maximum age in population: 18.01171875
Average age in population: 16.16859375
Median age in population: 16.244140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3426540
--- Timings ---
Current time: 1559314726350 milliseconds
Total Time:          31.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.7 seconds, 71.7%
Fitness Testing:      5.2 seconds, 16.6%
Report:               3.6 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: 42                 
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: 8                  
Correct output: -89                 | Program output: 63                 
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 39                 
Correct output: 52                  | Program output: 52                 
Correct output: 17                  | Program output: 33                 
Correct output: 2                   | Program output: 44                 
Correct output: 4                   | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 82                 
Correct output: 20                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 62                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 39                 
Correct output: 11                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 25                 
Correct output: 15                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 63                 
Correct output: -30                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: 37                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -21                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: -4                 
Correct output: -86                 | Program output: -86                
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: 41                 
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: -65                
Correct output: -77                 | Program output: -43                
Correct output: -17                 | Program output: 9                  
Correct output: 27                  | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -96                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 83                 
Correct output: -85                 | Program output: -64                
Correct output: -80                 | Program output: 26                 
Correct output: -40                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: -31                
Correct output: -81                 | Program output: -31                
Correct output: -49                 | Program output: 25                 
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -93                
Correct output: -92                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: -81                 | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: -44                
Correct output: -58                 | Program output: -49                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -51                
Correct output: -4                  | Program output: -4                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: 46                 
Correct output: -73                 | Program output: 24                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -66} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_613} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 1, :instruction exec_yankdup})
Lexicase best program: (integer_dec tag_boolean_888 exec_dup_items in3 boolean_invert_first_then_and in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor exec_yankdup integer_div integer_sub exec_pop (integer_sub exec_pop (exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (exec_rot (exec_empty integer_eq in2 boolean_not boolean_dup_times -66 exec_flush boolean_dup_times boolean_dup_times) (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (print_newline boolean_yankdup) (boolean_yankdup exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) (exec_swap (exec_noop boolean_pop boolean_invert_second_then_and exec_k () (integer_gte 78 exec_dup (print_exec (boolean_empty boolean_stackdepth exec_dup_times (exec_k (print_integer boolean_invert_second_then_and tag_exec_613 (integer_fromboolean in4 exec_yankdup)) ()))))) ()))))) ())) ())))))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 118
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -66} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction 78} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_613} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 1, :instruction exec_yankdup})
Zero cases best program: (integer_dec tag_boolean_888 exec_dup_items in3 boolean_invert_first_then_and in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor exec_yankdup integer_div integer_sub exec_pop (integer_sub exec_pop (exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (exec_rot (exec_empty integer_eq in2 boolean_not boolean_dup_times -66 exec_flush boolean_dup_times boolean_dup_times) (print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (print_newline boolean_yankdup) (boolean_yankdup exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or integer_dec exec_swap (boolean_stackdepth) (exec_swap (exec_noop boolean_pop boolean_invert_second_then_and exec_k () (integer_gte 78 exec_dup (print_exec (boolean_empty boolean_stackdepth exec_dup_times (exec_k (print_integer boolean_invert_second_then_and tag_exec_613 (integer_fromboolean in4 exec_yankdup)) ()))))) ()))))) ())) ())))))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 118
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (919 903 904 913 898 900 930 1000 913 1000)
Population mean number of elite cases: 9.28
Count of perfect (error zero) individuals by case: (919 903 904 913 898 900 930 0 913 0)
Population mean number of perfect (error zero) cases: 7.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction 78})
Best program: (integer_pop tag_boolean_888 exec_dup_items in3 integer_max in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup boolean_dup_times integer_div integer_sub exec_pop (exec_shove (integer_rot)) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (integer_dup exec_empty integer_eq in2 exec_shove (boolean_dup_times boolean_flush exec_flush exec_shove (integer_gte) print_exec (exec_s (exec_y_when_autoconstructing () boolean_eq) (in4 boolean_yankdup) (boolean_yankdup exec_noop boolean_or boolean_stackdepth) print_integer exec_noop integer_gte 78)))) ()))) ())))
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 67
Size: 91
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 2.72
Median total errors in population: 2
Error averages by case: (0.081 0.097 0.096 0.087 0.102 0.1 0.07 1.0 0.087 1.0)
Error minima by case: (0 0 0 0 0 0 0 1 0 1)
Average genome size in population (length): 75.911
Average program size in population (points): 105.622
Average percent parens in population: 0.277
Minimum age in population: 14.21875
Maximum age in population: 19.48046875
Average age in population: 17.75423046875
Median age in population: 17.8583984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 3777549
--- Timings ---
Current time: 1559314728725 milliseconds
Total Time:          34.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.4 seconds, 71.7%
Fitness Testing:      5.6 seconds, 16.5%
Report:               3.9 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: 42                 
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: 8                  
Correct output: -89                 | Program output: 63                 
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 39                 
Correct output: 52                  | Program output: 52                 
Correct output: 17                  | Program output: 33                 
Correct output: 2                   | Program output: 44                 
Correct output: 4                   | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 82                 
Correct output: 20                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 62                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 39                 
Correct output: 11                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 25                 
Correct output: 15                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 63                 
Correct output: -30                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: 37                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -21                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: -4                 
Correct output: -86                 | Program output: -86                
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: 41                 
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: -65                
Correct output: -77                 | Program output: -43                
Correct output: -17                 | Program output: 9                  
Correct output: 27                  | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -96                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 83                 
Correct output: -85                 | Program output: -64                
Correct output: -80                 | Program output: 26                 
Correct output: -40                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: -31                
Correct output: -81                 | Program output: -31                
Correct output: -49                 | Program output: 25                 
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -93                
Correct output: -92                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: -81                 | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: -44                
Correct output: -58                 | Program output: -49                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -51                
Correct output: -4                  | Program output: -4                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: 46                 
Correct output: -73                 | Program output: 24                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -66} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_966} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_529} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_exec_586} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4})
Lexicase best program: (integer_pop tag_boolean_888 exec_dup_items in3 integer_dup_times in3 exec_y_when_autoconstructing (integer_yank exec_do*range ()) in2 integer_min print_integer exec_do*count (print_integer) integer_pop print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (integer_inc integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (integer_mult exec_empty integer_eq in2 exec_shove (boolean_dup_times) -66 boolean_pop exec_shove (exec_s (print_exec (exec_s (exec_y_when_autoconstructing (boolean_eq integer_gt boolean_empty integer_pop integer_dup tag_exec_966 (integer_stackdepth exec_shove (exec_dup_times (print_integer in4 boolean_empty integer_empty) print_boolean integer_lt integer_max boolean_swap exec_while (integer_gte) exec_do*range (integer_stackdepth) integer_fromboolean integer_dec) boolean_invert_first_then_and integer_gte in2 exec_do*while (boolean_yankdup boolean_pop integer_pop) boolean_invert_first_then_and exec_stackdepth in2 exec_do*while (boolean_yankdup boolean_pop tagged_529) exec_y (integer_eq tag_exec_586 (integer_fromboolean in4))))) () ())) () ()))) ()))
Lexicase best errors: [1 1 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 116
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -66} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_966} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_529} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_exec_586} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4})
Zero cases best program: (integer_pop tag_boolean_888 exec_dup_items in3 integer_dup_times in3 exec_y_when_autoconstructing (integer_yank exec_do*range ()) in2 integer_min print_integer exec_do*count (print_integer) integer_pop print_boolean in3 boolean_xor integer_add integer_div integer_sub exec_pop (integer_inc integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (integer_mult exec_empty integer_eq in2 exec_shove (boolean_dup_times) -66 boolean_pop exec_shove (exec_s (print_exec (exec_s (exec_y_when_autoconstructing (boolean_eq integer_gt boolean_empty integer_pop integer_dup tag_exec_966 (integer_stackdepth exec_shove (exec_dup_times (print_integer in4 boolean_empty integer_empty) print_boolean integer_lt integer_max boolean_swap exec_while (integer_gte) exec_do*range (integer_stackdepth) integer_fromboolean integer_dec) boolean_invert_first_then_and integer_gte in2 exec_do*while (boolean_yankdup boolean_pop integer_pop) boolean_invert_first_then_and exec_stackdepth in2 exec_do*while (boolean_yankdup boolean_pop tagged_529) exec_y (integer_eq tag_exec_586 (integer_fromboolean in4))))) () ())) () ()))) ()))
Zero cases best errors: [1 1 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 116
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 1000 916 1000 939 920 926 1)
Population mean number of elite cases: 8.70
Count of perfect (error zero) individuals by case: (0 0 0 0 916 0 939 920 926 1)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_966} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction in4})
Best program: (boolean_swap exec_dup_items integer_flush integer_gt in3 integer_fromboolean boolean_dup in2 integer_min print_integer exec_do*count (print_integer) integer_rot print_boolean in3 boolean_xor integer_add boolean_frominteger integer_sub boolean_dup_items exec_shove (integer_rot) exec_pop (exec_do*range (integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while () integer_mod) (integer_dup exec_empty integer_eq in2 exec_shove (boolean_shove integer_gt integer_min integer_yank exec_k_when_autoconstructing () (exec_dup_times (boolean_flush integer_flush in4 exec_dup_times (boolean_shove exec_k_when_autoconstructing () (exec_dup_times (boolean_flush integer_flush in4 exec_dup_times (boolean_empty integer_pop integer_dup tag_exec_966 (integer_stackdepth exec_shove (exec_dup_times (print_integer in4)))))))))))) ())))
Errors: [1 1 1 1 0 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 64
Size: 86
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 6.298
Median total errors in population: 6
Error averages by case: (1.0 1.0 1.0 1.0 0.084 1.0 0.061 0.08 0.074 0.999)
Error minima by case: (1 1 1 1 0 1 0 0 0 0)
Average genome size in population (length): 75.116
Average program size in population (points): 104.619
Average percent parens in population: 0.278
Minimum age in population: 16.080078125
Maximum age in population: 21.0859375
Average age in population: 19.24802270507812
Median age in population: 19.3583984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4089641
--- Timings ---
Current time: 1559314731170 milliseconds
Total Time:          36.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.3 seconds, 71.9%
Fitness Testing:      6.0 seconds, 16.3%
Report:               4.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 586
Test mean error for best: 0.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30-30-30-30-30-3042
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output:                    
Correct output: -89                 | Program output: -89-89-89-89-89-89-89-89
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 432                
Correct output: 52                  | Program output: 87                 
Correct output: 17                  | Program output: 73                 
Correct output: 2                   | Program output: 211111             
Correct output: 4                   | Program output: 14                 
Correct output: 14                  | Program output: 21                 
Correct output: 8                   | Program output: 78                 
Correct output: 20                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 87                 
Correct output: 14                  | Program output: 56                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 76                 
Correct output: 11                  | Program output: 17                 
Correct output: 44                  | Program output: 67                 
Correct output: 21                  | Program output: 21                 
Correct output: 15                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: 15                 
Correct output: -94                 | Program output: -36                
Correct output: -93                 | Program output: -30-30-30-30-30-30-30-30
Correct output: -30                 | Program output: -30-30-30-30-30-30-29
Correct output: -74                 | Program output: 13                 
Correct output: -6                  | Program output: 22222              
Correct output: 38                  | Program output: 42                 
Correct output: -97                 | Program output: -97-97-97-97-97-97-97-97
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: 35                 
Correct output: -86                 | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: 43                 
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: 49                 
Correct output: -77                 | Program output: -68-68-68-68-68-68-68-68
Correct output: -17                 | Program output:                    
Correct output: 27                  | Program output: 39                 
Correct output: -100                | Program output: -52                
Correct output: -78                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75-75-75-75-75-75-75-75
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 38                 
Correct output: -85                 | Program output: 22                 
Correct output: -80                 | Program output: -80-80-80-80-80-80-10-10
Correct output: -40                 | Program output: -40-40-40-40-40-40-40-40
Correct output: -67                 | Program output: -21                
Correct output: -25                 | Program output: -25-25-25-25-25-2556
Correct output: -60                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: 22                 
Correct output: -81                 | Program output: -61                
Correct output: -49                 | Program output: -49-49-49-49-49-49-49-49
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: 61                 
Correct output: -82                 | Program output: -45                
Correct output: -27                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -88                
Correct output: -53                 | Program output: -53-53-53-53-53-53 
Correct output: -69                 | Program output: -49                
Correct output: -81                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: 2                  
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -16                
Correct output: -4                  | Program output: 49                 
Correct output: -93                 | Program output: -75                
Correct output: -77                 | Program output: -77-77-77-77-77-77-77-77
Correct output: -73                 | Program output: -73-73-73-73-73-7324
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop})
Lexicase best program: (integer_pop tag_boolean_888 exec_dup_items in3 integer_dup_times in3 exec_y_when_autoconstructing (integer_dec exec_do*range ()) in2 integer_min integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) exec_do*range () in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_pop ())))
Lexicase best errors: [0 0 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.173
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop})
Zero cases best program: (integer_pop tag_boolean_888 exec_dup_items in3 integer_dup_times in3 exec_y_when_autoconstructing (integer_dec exec_do*range ()) in2 integer_min integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) exec_do*range () in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_pop ())))
Zero cases best errors: [0 0 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (647 929 1000 1000 1000 1000 623 1000 306 938)
Population mean number of elite cases: 8.44
Count of perfect (error zero) individuals by case: (647 929 0 0 0 0 623 0 306 938)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -66} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec})
Best program: (integer_pop tag_boolean_888 in1 in3 integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) exec_do*range () in2 integer_min print_integer exec_do*count (boolean_empty exec_s () () (exec_pop (exec_shove (integer_rot)) exec_pop (integer_min integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while (integer_mod) integer_lte exec_empty integer_eq in2 exec_shove (boolean_dup_times -66 exec_flush exec_shove (exec_s () (print_exec ()) ()))) ()) ()))))
Errors: [0 0 1 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 46
Size: 68
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.557
Median total errors in population: 6
Error averages by case: (0.353 0.071 1.0 1.0 1.0 1.0 0.377 1.0 0.694 0.062)
Error minima by case: (0 0 1 1 1 1 0 1 0 0)
Average genome size in population (length): 84.671
Average program size in population (points): 116.126
Average percent parens in population: 0.270
Minimum age in population: 17.728515625
Maximum age in population: 22.6671142578125
Average age in population: 20.99010314941406
Median age in population: 21.0087890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4407559
--- Timings ---
Current time: 1559314734186 milliseconds
Total Time:          39.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.2 seconds, 72.2%
Fitness Testing:      6.3 seconds, 16.1%
Report:               4.5 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12-12             
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 87                 
Correct output: 17                  | Program output: 73                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 14                 
Correct output: 14                  | Program output: 21                 
Correct output: 8                   | Program output: 78                 
Correct output: 20                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 56                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 17                 
Correct output: 44                  | Program output: 67                 
Correct output: 21                  | Program output: 21                 
Correct output: 15                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: 15                 
Correct output: -94                 | Program output: -36                
Correct output: -93                 | Program output: -30                
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: 13                 
Correct output: -6                  | Program output: 2                  
Correct output: 38                  | Program output: 42                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: 35                 
Correct output: -86                 | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: 43                 
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: 49                 
Correct output: -77                 | Program output: -68                
Correct output: -17                 | Program output: 35                 
Correct output: 27                  | Program output: 39                 
Correct output: -100                | Program output: -52                
Correct output: -78                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 38                 
Correct output: -85                 | Program output: 22                 
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -67                 | Program output: -21                
Correct output: -25                 | Program output: -25                
Correct output: -60                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: 22                 
Correct output: -81                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: 61                 
Correct output: -82                 | Program output: -45                
Correct output: -27                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: -81                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: 2                  
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -16                
Correct output: -4                  | Program output: 49                 
Correct output: -93                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop})
Lexicase best program: (integer_pop tag_boolean_888 in1 in3 integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) exec_do*range () in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_pop ())))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 43
Percent parens: 0.163
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop})
Zero cases best program: (integer_pop tag_boolean_888 in1 in3 integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) exec_do*range () in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_pop ())))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 43
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (919 9 919 860 9 470 7 934 870 945)
Population mean number of elite cases: 5.94
Count of perfect (error zero) individuals by case: (919 9 919 860 9 470 7 934 870 945)
Population mean number of perfect (error zero) cases: 5.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -66} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction print_exec})
Best program: (integer_pop tag_boolean_888 in1 in3 integer_dup_times in3 exec_shove (in3 exec_dup_items integer_max) exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) exec_do*range () in2 integer_min print_integer exec_do*count (boolean_empty exec_s () () (exec_pop (exec_shove (integer_rot)) exec_pop (integer_min integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while (integer_mod) integer_lte exec_empty integer_eq in2 exec_shove (boolean_dup_times -66 exec_flush exec_shove (exec_s () (print_exec ()) ()))) ()) ()))))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 46
Size: 69
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.058
Median total errors in population: 4
Error averages by case: (0.081 0.991 0.081 0.14 0.991 0.53 0.993 0.066 0.13 0.055)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.752
Average program size in population (points): 60.475
Average percent parens in population: 0.250
Minimum age in population: 21.208984375
Maximum age in population: 22.780029296875
Average age in population: 22.00222534179688
Median age in population: 22.208984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 256
Genome diversity (% unique genomes):	 0.486
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 262
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 4971309
--- Timings ---
Current time: 1559314737206 milliseconds
Total Time:          42.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.1 seconds, 71.0%
Fitness Testing:      7.0 seconds, 16.5%
Report:               5.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 576
Test mean error for best: 0.57600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 94                 
Correct output: 17                  | Program output: 100                
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 50                 
Correct output: 14                  | Program output: 63                 
Correct output: 8                   | Program output: 78                 
Correct output: 20                  | Program output: 91                 
Correct output: 11                  | Program output: 83                 
Correct output: 8                   | Program output: 93                 
Correct output: 54                  | Program output: 77                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 56                 
Correct output: 27                  | Program output: 65                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 28                 
Correct output: 44                  | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 15                  | Program output: 53                 
Correct output: 26                  | Program output: 56                 
Correct output: -97                 | Program output: -4                 
Correct output: -94                 | Program output: 63                 
Correct output: -93                 | Program output: -30                
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -66                
Correct output: -6                  | Program output: 2                  
Correct output: 38                  | Program output: 42                 
Correct output: -97                 | Program output: -51                
Correct output: -56                 | Program output: 67                 
Correct output: -21                 | Program output: 14                 
Correct output: -4                  | Program output: 35                 
Correct output: -86                 | Program output: 10                 
Correct output: 23                  | Program output: 85                 
Correct output: -15                 | Program output: 65                 
Correct output: -36                 | Program output: 77                 
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -68                
Correct output: -17                 | Program output: 48                 
Correct output: 27                  | Program output: 81                 
Correct output: -100                | Program output: -52                
Correct output: -78                 | Program output: -78                
Correct output: -9                  | Program output: 27                 
Correct output: -50                 | Program output: 48                 
Correct output: -76                 | Program output: 12                 
Correct output: -94                 | Program output: 60                 
Correct output: -75                 | Program output: -37                
Correct output: -65                 | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -67                 | Program output: -36                
Correct output: -25                 | Program output: -25                
Correct output: -60                 | Program output: -25                
Correct output: -28                 | Program output: 68                 
Correct output: -31                 | Program output: 23                 
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -63                
Correct output: -2                  | Program output: 78                 
Correct output: -82                 | Program output: -20                
Correct output: -27                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -27                
Correct output: -69                 | Program output: 26                 
Correct output: -81                 | Program output: 69                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: -12                
Correct output: -58                 | Program output: -49                
Correct output: -36                 | Program output: 33                 
Correct output: -51                 | Program output: -16                
Correct output: -4                  | Program output: 12                 
Correct output: -93                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop})
Lexicase best program: (integer_pop tag_boolean_888 in1 in3 integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) exec_do*range () in2 in1 print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot integer_gte boolean_rot exec_pop ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 45
Percent parens: 0.156
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop})
Zero cases best program: (integer_pop tag_boolean_888 in1 in3 integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) exec_do*range () in2 in1 print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot integer_gte boolean_rot exec_pop ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 45
Percent parens: 0.156
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 930 865 933 15 692 695 150 912 713)
Population mean number of elite cases: 5.91
Count of perfect (error zero) individuals by case: (5 930 865 933 15 692 695 150 912 713)
Population mean number of perfect (error zero) cases: 5.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -66} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction print_exec})
Best program: (integer_pop tag_boolean_888 in1 in3 exec_do*times (in3 exec_shove (exec_k (exec_dup_items integer_max) (exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) exec_do*range ()) in2 integer_min) print_integer exec_do*count (boolean_empty exec_s () () (exec_pop (exec_shove (integer_rot)) exec_pop (integer_min integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while (integer_mod) integer_lte exec_empty integer_eq in2 exec_shove (boolean_dup_times -66 exec_flush exec_shove (in4) print_exec ())) ()) ())))))
Errors: [0 0 0 0 1 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 46
Size: 69
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.09
Median total errors in population: 3
Error averages by case: (0.995 0.07 0.135 0.067 0.985 0.308 0.305 0.85 0.088 0.287)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.547
Average program size in population (points): 56.048
Average percent parens in population: 0.242
Minimum age in population: 22.208984375
Maximum age in population: 24.780029296875
Average age in population: 23.55698547363281
Median age in population: 23.63726806640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 233
Genome diversity (% unique genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 241
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5344788
--- Timings ---
Current time: 1559314740137 milliseconds
Total Time:          45.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.0 seconds, 70.7%
Fitness Testing:      7.4 seconds, 16.4%
Report:               5.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 493
Test mean error for best: 0.49300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -69                 | Program output: 25                 
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 87                 
Correct output: 17                  | Program output: 73                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 14                 
Correct output: 14                  | Program output: 21                 
Correct output: 8                   | Program output: 78                 
Correct output: 20                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 56                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 17                 
Correct output: 44                  | Program output: 67                 
Correct output: 21                  | Program output: 21                 
Correct output: 15                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: -4                 
Correct output: -94                 | Program output: 68                 
Correct output: -93                 | Program output: 94                 
Correct output: -30                 | Program output: -29                
Correct output: -74                 | Program output: -66                
Correct output: -6                  | Program output: 44                 
Correct output: 38                  | Program output: 42                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: 67                 
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: 35                 
Correct output: -86                 | Program output: 10                 
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: 43                 
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -43                
Correct output: -17                 | Program output: 35                 
Correct output: 27                  | Program output: 39                 
Correct output: -100                | Program output: -52                
Correct output: -78                 | Program output: -78                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: 48                 
Correct output: -76                 | Program output: 61                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: 95                 
Correct output: -40                 | Program output: -40                
Correct output: -67                 | Program output: 4                  
Correct output: -25                 | Program output: -25                
Correct output: -60                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: 23                 
Correct output: -81                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: 78                 
Correct output: -82                 | Program output: -20                
Correct output: -27                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 29                 
Correct output: -92                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: -81                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: -12                
Correct output: -58                 | Program output: -49                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -16                
Correct output: -4                  | Program output: 12                 
Correct output: -93                 | Program output: -75                
Correct output: -77                 | Program output: 46                 
Correct output: -73                 | Program output: -73                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -66} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction print_exec})
Lexicase best program: (integer_pop tag_boolean_888 in1 in3 integer_dup_times integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) exec_do*range () in2 integer_min print_integer exec_do*count (boolean_empty exec_s () () (exec_pop (exec_shove (integer_rot)) exec_pop (integer_min integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while (integer_mod) integer_lte exec_empty integer_eq in2 exec_shove (boolean_dup_times -66 exec_flush exec_shove (in4) print_exec ())) ()) ()))))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 61
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -66} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction print_exec})
Zero cases best program: (integer_pop tag_boolean_888 in1 in3 integer_dup_times integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) exec_do*range () in2 integer_min print_integer exec_do*count (boolean_empty exec_s () () (exec_pop (exec_shove (integer_rot)) exec_pop (integer_min integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while (integer_mod) integer_lte exec_empty integer_eq in2 exec_shove (boolean_dup_times -66 exec_flush exec_shove (in4) print_exec ())) ()) ()))))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 61
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (942 583 58 942 813 310 314 589 265 599)
Population mean number of elite cases: 5.41
Count of perfect (error zero) individuals by case: (942 583 58 942 813 310 314 589 265 599)
Population mean number of perfect (error zero) cases: 5.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop})
Best program: (integer_pop tag_boolean_888 in1 exec_swap (integer_max) (exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) exec_do*range ()) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_pop ())))
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 4.585
Median total errors in population: 4
Error averages by case: (0.058 0.417 0.942 0.058 0.187 0.69 0.686 0.411 0.735 0.401)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.715
Average program size in population (points): 56.277
Average percent parens in population: 0.243
Minimum age in population: 23.208984375
Maximum age in population: 26.63726806640625
Average age in population: 24.97971472167969
Median age in population: 25.35174560546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 185
Genome diversity (% unique genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.495
Total error diversity:				 0.009
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 5948059
--- Timings ---
Current time: 1559314742931 milliseconds
Total Time:          48.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.9 seconds, 70.1%
Fitness Testing:      8.1 seconds, 16.8%
Report:               6.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 438
Test mean error for best: 0.43800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 42                 
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: 8                  
Correct output: -89                 | Program output: 63                 
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 35                 
Correct output: 52                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 21                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 20                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 25                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 63                 
Correct output: 21                  | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: 15                 
Correct output: -94                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -29                
Correct output: -74                 | Program output: 13                 
Correct output: -6                  | Program output: -6                 
Correct output: 38                  | Program output: 53                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: 35                 
Correct output: -86                 | Program output: 4444               
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: 27                  | Program output: 27                 
Correct output: -100                | Program output: -52                
Correct output: -78                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 87                 
Correct output: -85                 | Program output: 22                 
Correct output: -80                 | Program output: -10                
Correct output: -40                 | Program output: 33                 
Correct output: -67                 | Program output: -21                
Correct output: -25                 | Program output: 56                 
Correct output: -60                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: 22                 
Correct output: -81                 | Program output: -61                
Correct output: -49                 | Program output: 59                 
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: 61                 
Correct output: -82                 | Program output: -45                
Correct output: -27                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: 2                  
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -16                
Correct output: -4                  | Program output: 49                 
Correct output: -93                 | Program output: -75                
Correct output: -77                 | Program output: -52                
Correct output: -73                 | Program output: 24                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop})
Lexicase best program: (integer_pop tag_boolean_888 in1 in3 exec_do*times (in3 exec_shove (exec_k (integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) in3) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_pop ()))))
Lexicase best errors: [1 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 51
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop})
Zero cases best program: (integer_pop tag_boolean_888 in1 in3 exec_do*times (in3 exec_shove (exec_k (integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) in3) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_pop ()))))
Zero cases best errors: [1 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 51
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 620 711 628 627 468 4 5 251 250)
Population mean number of elite cases: 3.77
Count of perfect (error zero) individuals by case: (210 620 711 628 627 468 4 5 251 250)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count})
Best program: (integer_pop tag_boolean_888 in1 exec_dup_items integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) exec_do*range () in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
Errors: [0 0 0 0 0 1 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 31
Size: 38
Percent parens: 0.184
--- Population Statistics ---
Average total errors in population: 6.226
Median total errors in population: 6
Error averages by case: (0.79 0.38 0.289 0.372 0.373 0.532 0.996 0.995 0.749 0.75)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.061
Average program size in population (points): 54.309
Average percent parens in population: 0.253
Minimum age in population: 24.208984375
Maximum age in population: 27.88726806640625
Average age in population: 26.02549641418457
Median age in population: 25.97674560546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 132
Genome diversity (% unique genomes):	 0.535
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.521
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6580131
--- Timings ---
Current time: 1559314745684 milliseconds
Total Time:          51.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.7 seconds, 69.9%
Fitness Testing:      8.8 seconds, 17.2%
Report:               6.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 87                 
Correct output: 17                  | Program output: 73                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 14                 
Correct output: 14                  | Program output: 21                 
Correct output: 8                   | Program output: 78                 
Correct output: 20                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 56                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 17                 
Correct output: 44                  | Program output: 67                 
Correct output: 21                  | Program output: 21                 
Correct output: 15                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: 15                 
Correct output: -94                 | Program output: -36                
Correct output: -93                 | Program output: -30                
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: 13                 
Correct output: -6                  | Program output: 2                  
Correct output: 38                  | Program output: 42                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: 35                 
Correct output: -86                 | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: 43                 
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: 49                 
Correct output: -77                 | Program output: -68                
Correct output: -17                 | Program output: 35                 
Correct output: 27                  | Program output: 39                 
Correct output: -100                | Program output: -52                
Correct output: -78                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 38                 
Correct output: -85                 | Program output: 22                 
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -67                 | Program output: -21                
Correct output: -25                 | Program output: -25                
Correct output: -60                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: 22                 
Correct output: -81                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: 61                 
Correct output: -82                 | Program output: -45                
Correct output: -27                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: -81                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: 2                  
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -16                
Correct output: -4                  | Program output: 49                 
Correct output: -93                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -66} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_pop tag_boolean_888 in1 in3 integer_dup_times integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) exec_do*range () in2 integer_min print_integer exec_do*count (boolean_empty exec_s () () (exec_pop (exec_shove (integer_rot)) exec_pop (integer_min integer_pop exec_k (boolean_dup_times boolean_dup integer_empty exec_noop boolean_xor exec_do*while (integer_mod) integer_lte exec_empty integer_eq in2 exec_shove (boolean_dup_times -66 exec_flush)) ()))))
Lexicase best errors: [0 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 54
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -66} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_pop tag_boolean_888 in1 in3 integer_dup_times integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) exec_do*range () in2 integer_min print_integer exec_do*count (boolean_empty exec_s () () (exec_pop (exec_shove (integer_rot)) exec_pop (integer_min integer_pop exec_k (boolean_dup_times boolean_dup integer_empty exec_noop boolean_xor exec_do*while (integer_mod) integer_lte exec_empty integer_eq in2 exec_shove (boolean_dup_times -66 exec_flush)) ()))))
Zero cases best errors: [0 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 54
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (534 849 7 425 849 437 58 533 173 434)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (534 849 7 425 849 437 58 533 173 434)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -66} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction print_exec})
Best program: (integer_pop tag_boolean_888 in1 in3 integer_dup_times integer_max tag_boolean_888 in1 in3 integer_dup_times integer_max exec_k (in4 integer_dup_times) (boolean_invert_second_then_and) exec_do*range () in2 integer_min print_integer exec_do*count (boolean_empty exec_s () () (exec_pop (exec_shove (integer_rot)) exec_pop (integer_min integer_pop exec_k (boolean_dup_items boolean_dup integer_empty exec_noop exec_if (exec_do*while (integer_mod) integer_lte exec_empty integer_eq boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_eq in2 exec_shove (boolean_dup_times -66 exec_flush exec_shove (in4) print_exec ())) ()) ()))))
Errors: [0 0 1 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 53
Size: 72
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 5.701
Median total errors in population: 6
Error averages by case: (0.466 0.151 0.993 0.575 0.151 0.563 0.942 0.467 0.827 0.566)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.242
Average program size in population (points): 54.175
Average percent parens in population: 0.250
Minimum age in population: 25.60174560546875
Maximum age in population: 29.45881652832031
Average age in population: 27.56582835388184
Median age in population: 27.61510848999023
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.535
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.008
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 6979319
--- Timings ---
Current time: 1559314748570 milliseconds
Total Time:          53.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.6 seconds, 70.1%
Fitness Testing:      9.3 seconds, 17.3%
Report:               6.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 94                 
Correct output: 17                  | Program output: 100                
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 50                 
Correct output: 14                  | Program output: 63                 
Correct output: 8                   | Program output: 78                 
Correct output: 20                  | Program output: 91                 
Correct output: 11                  | Program output: 83                 
Correct output: 8                   | Program output: 93                 
Correct output: 54                  | Program output: 77                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 56                 
Correct output: 27                  | Program output: 65                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 28                 
Correct output: 44                  | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 15                  | Program output: 53                 
Correct output: 26                  | Program output: 56                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -30                
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: 2                  
Correct output: 38                  | Program output: 42                 
Correct output: -97                 | Program output: -51                
Correct output: -56                 | Program output: -21                
Correct output: -21                 | Program output: 14                 
Correct output: -4                  | Program output: -4                 
Correct output: -86                 | Program output: -86                
Correct output: 23                  | Program output: 85                 
Correct output: -15                 | Program output: 65                 
Correct output: -36                 | Program output: 77                 
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -68                
Correct output: -17                 | Program output: 48                 
Correct output: 27                  | Program output: 81                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -9                  | Program output: 27                 
Correct output: -50                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: 60                 
Correct output: -75                 | Program output: -37                
Correct output: -65                 | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -25                
Correct output: -60                 | Program output: -60                
Correct output: -28                 | Program output: 68                 
Correct output: -31                 | Program output: -31                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -63                
Correct output: -2                  | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -27                
Correct output: -69                 | Program output: 26                 
Correct output: -81                 | Program output: 69                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: -44                
Correct output: -58                 | Program output: -49                
Correct output: -36                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -4                  | Program output: -4                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count})
Lexicase best program: (integer_pop tag_boolean_888 in1 in3 exec_do*times (in3 exec_shove (exec_k (integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min) print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ()))))
Lexicase best errors: [0 0 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 44
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count})
Zero cases best program: (integer_pop tag_boolean_888 in1 in3 exec_do*times (in3 exec_shove (exec_k (integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min) print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ()))))
Zero cases best errors: [0 0 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 44
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (230 587 924 6 458 496 587 477 642 6)
Population mean number of elite cases: 4.41
Count of perfect (error zero) individuals by case: (230 587 924 6 458 496 587 477 642 6)
Population mean number of perfect (error zero) cases: 4.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count})
Best program: (integer_pop tag_boolean_888 in1 in3 exec_do*times (in3 exec_shove (exec_k (integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min) print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ()))))
Errors: [0 0 0 1 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 36
Size: 44
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 5.587
Median total errors in population: 4
Error averages by case: (0.77 0.413 0.076 0.994 0.542 0.504 0.413 0.523 0.358 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.865
Average program size in population (points): 56.783
Average percent parens in population: 0.239
Minimum age in population: 26.60174560546875
Maximum age in population: 31.22666168212891
Average age in population: 28.78648019790649
Median age in population: 28.79812622070312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7382596
--- Timings ---
Current time: 1559314751226 milliseconds
Total Time:          56.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.6 seconds, 69.9%
Fitness Testing:      9.7 seconds, 17.2%
Report:               7.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 235
Test mean error for best: 0.23500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output:                    
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 52                 
Correct output: 17                  | Program output: 33                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 78                 
Correct output: 20                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 15                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -30                
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: 2                  
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -21                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: -4                 
Correct output: -86                 | Program output: -86                
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: 41                 
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -68                
Correct output: -17                 | Program output: 9                  
Correct output: 27                  | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -25                
Correct output: -60                 | Program output: -60                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: -31                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output:                    
Correct output: -2                  | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: -81                 | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: -44                
Correct output: -58                 | Program output: -49                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -51                
Correct output: -4                  | Program output: -4                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count})
Lexicase best program: (in3 tag_boolean_888 in1 integer_min integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 35
Percent parens: 0.114
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count})
Zero cases best program: (in3 tag_boolean_888 in1 integer_min integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (19 627 948 361 661 531 356 516 662 195)
Population mean number of elite cases: 4.88
Count of perfect (error zero) individuals by case: (19 627 948 361 661 531 356 516 662 195)
Population mean number of perfect (error zero) cases: 4.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count})
Best program: (in3 tag_boolean_888 in1 integer_min integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 31
Size: 35
Percent parens: 0.114
--- Population Statistics ---
Average total errors in population: 5.124
Median total errors in population: 4
Error averages by case: (0.981 0.373 0.052 0.639 0.339 0.469 0.644 0.484 0.338 0.805)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.592
Average program size in population (points): 49.947
Average percent parens in population: 0.221
Minimum age in population: 28.60174560546875
Maximum age in population: 32.44545364379883
Average age in population: 30.72917648124695
Median age in population: 30.79255485534668
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.513
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.009
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7652587
--- Timings ---
Current time: 1559314753650 milliseconds
Total Time:          59.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.5 seconds, 70.3%
Fitness Testing:     10.1 seconds, 17.1%
Report:               7.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 235
Test mean error for best: 0.23500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output:                    
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 52                 
Correct output: 17                  | Program output: 33                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 78                 
Correct output: 20                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 15                  | Program output: 51                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -30                
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: 2                  
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -21                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: -4                 
Correct output: -86                 | Program output: -86                
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: 41                 
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -68                
Correct output: -17                 | Program output: 9                  
Correct output: 27                  | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -25                
Correct output: -60                 | Program output: -60                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: -31                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output:                    
Correct output: -2                  | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -49                
Correct output: -81                 | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: -44                
Correct output: -58                 | Program output: -49                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -51                
Correct output: -4                  | Program output: -4                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count})
Lexicase best program: (in3 tag_boolean_888 in1 integer_min integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
Lexicase best errors: [1 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 35
Percent parens: 0.114
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count})
Zero cases best program: (in3 tag_boolean_888 in1 integer_min integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
Zero cases best errors: [1 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 759 319 895 421 582 942 657 657 432)
Population mean number of elite cases: 5.68
Count of perfect (error zero) individuals by case: (14 759 319 895 421 582 942 657 657 432)
Population mean number of perfect (error zero) cases: 5.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count})
Best program: (in3 tag_boolean_888 in1 integer_min integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
Errors: [1 0 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 31
Size: 35
Percent parens: 0.114
--- Population Statistics ---
Average total errors in population: 4.322
Median total errors in population: 4
Error averages by case: (0.986 0.241 0.681 0.105 0.579 0.418 0.058 0.343 0.343 0.568)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.644
Average program size in population (points): 41.079
Average percent parens in population: 0.152
Minimum age in population: 31.67984962463379
Maximum age in population: 33.59948348999023
Average age in population: 32.73601127815247
Median age in population: 32.67984962463379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 274
Genome diversity (% unique genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 285
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.009
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7893084
--- Timings ---
Current time: 1559314756054 milliseconds
Total Time:          61.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.4 seconds, 70.6%
Fitness Testing:     10.4 seconds, 16.8%
Report:               7.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 213
Test mean error for best: 0.21300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 86                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 21                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 20                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 56                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 63                 
Correct output: 21                  | Program output: 21                 
Correct output: 15                  | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: -4                 
Correct output: -94                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -66                
Correct output: -6                  | Program output: -6                 
Correct output: 38                  | Program output: 42                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: 35                 
Correct output: -86                 | Program output: 10                 
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: 27                  | Program output: 27                 
Correct output: -100                | Program output: -52                
Correct output: -78                 | Program output: -78                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -67                 | Program output: -36                
Correct output: -25                 | Program output: -25                
Correct output: -60                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: 22                 
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: 61                 
Correct output: -82                 | Program output: -45                
Correct output: -27                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: -12                
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -16                
Correct output: -4                  | Program output: 12                 
Correct output: -93                 | Program output: -75                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count})
Lexicase best program: (in3 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 in1 integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 43
Percent parens: 0.140
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count})
Zero cases best program: (in3 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 in1 integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 43
Percent parens: 0.140
--- Lexicase Population Statistics ---
Count of elite individuals by case: (950 731 956 530 170 943 517 372 374 950)
Population mean number of elite cases: 6.49
Count of perfect (error zero) individuals by case: (950 731 956 530 170 943 517 372 374 950)
Population mean number of perfect (error zero) cases: 6.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count})
Best program: (in3 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 in1 integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 37
Size: 43
Percent parens: 0.140
--- Population Statistics ---
Average total errors in population: 3.507
Median total errors in population: 3
Error averages by case: (0.05 0.269 0.044 0.47 0.83 0.057 0.483 0.628 0.626 0.05)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.971
Average program size in population (points): 40.064
Average percent parens in population: 0.147
Minimum age in population: 32.67984962463379
Maximum age in population: 35.49905204772949
Average age in population: 34.38603290987015
Median age in population: 34.49905204772949
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 238
Genome diversity (% unique genomes):	 0.481
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 266
Syntactic diversity (% unique Push programs):	 0.443
Total error diversity:				 0.01
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8123206
--- Timings ---
Current time: 1559314758399 milliseconds
Total Time:          63.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.3 seconds, 71.0%
Fitness Testing:     10.6 seconds, 16.6%
Report:               7.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 20                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 15                  | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: -6                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: -4                 
Correct output: -86                 | Program output: -86                
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: 27                  | Program output: 27                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -25                
Correct output: -60                 | Program output: -60                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: -31                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: -44                
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -51                
Correct output: -4                  | Program output: -4                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count})
Lexicase best program: (in3 tag_boolean_888 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot boolean_not integer_gte boolean_rot exec_do*count ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 46
Percent parens: 0.130
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count})
Zero cases best program: (in3 tag_boolean_888 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot boolean_not integer_gte boolean_rot exec_do*count ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 46
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (944 164 165 910 625 168 763 937 764 166)
Population mean number of elite cases: 5.61
Count of perfect (error zero) individuals by case: (944 164 165 910 625 168 763 937 764 166)
Population mean number of perfect (error zero) cases: 5.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction tag_boolean_888} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count})
Best program: (in3 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 integer_empty integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 37
Size: 43
Percent parens: 0.140
--- Population Statistics ---
Average total errors in population: 4.394
Median total errors in population: 4
Error averages by case: (0.056 0.836 0.835 0.09 0.375 0.832 0.237 0.063 0.236 0.834)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.126
Average program size in population (points): 42.549
Average percent parens in population: 0.149
Minimum age in population: 34.21892786026001
Maximum age in population: 37.49905204772949
Average age in population: 36.48503165864944
Median age in population: 36.49905204772949
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 384
Genome diversity (% unique genomes):	 0.47
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 394
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.011
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 8345646
--- Timings ---
Current time: 1559314760793 milliseconds
Total Time:          66.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.3 seconds, 71.4%
Fitness Testing:     10.9 seconds, 16.4%
Report:               8.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 24
Successful program: (in3 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 integer_empty integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 43


Auto-simplifying with starting size: 43
step: 0
program: (in3 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 integer_empty integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 500
program: (in3 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 integer_empty integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 1000
program: (in3 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 integer_empty integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 1500
program: (in3 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 integer_empty integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 2000
program: (in3 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 integer_empty integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 2500
program: (in3 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 integer_empty integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 3000
program: (in3 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 integer_empty integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 3500
program: (in3 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 integer_empty integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 4000
program: (in3 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 integer_empty integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 4500
program: (in3 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 integer_empty integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 5000
program: (in3 tag_boolean_888 in1 integer_min integer_dup_times integer_max exec_k (in4 integer_empty integer_min) (integer_dup_times in3 exec_dup_items in3 exec_dup_items integer_max) in2 integer_min print_integer exec_do*count (boolean_empty boolean_invert_first_then_and exec_flush boolean_stackdepth exec_stackdepth integer_empty integer_add boolean_rot boolean_and integer_inc exec_do*times (in4 exec_yank boolean_not integer_gte boolean_rot exec_do*count ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: 70                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -69                 | Program output: -69                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: 99                  | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -36                 | Program output: -36                
Correct output: 81                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 20                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 15                  | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: -6                 
Correct output: 38                  | Program output: 38                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -4                  | Program output: -4                 
Correct output: -86                 | Program output: -86                
Correct output: 23                  | Program output: 23                 
Correct output: -15                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -17                 | Program output: -17                
Correct output: 27                  | Program output: 27                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -9                  | Program output: -9                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: 38                  | Program output: 38                 
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -25                
Correct output: -60                 | Program output: -60                
Correct output: -28                 | Program output: -28                
Correct output: -31                 | Program output: -31                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -2                  | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -44                 | Program output: -44                
Correct output: -58                 | Program output: -58                
Correct output: -36                 | Program output: -36                
Correct output: -51                 | Program output: -51                
Correct output: -4                  | Program output: -4                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -73                 | Program output: -73                
;;******************************
