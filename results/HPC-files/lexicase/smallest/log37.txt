Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x1397b141 clojush.problems.software.smallest$fn__7460@1397b141] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x30b9728f clojush.instructions.tag$tag_instruction_erc$fn__2160@30b9728f] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x453a30f8 clojush.instructions.tag$tagged_instruction_erc$fn__2166@453a30f8] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x29ccab93 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@29ccab93]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x6c49ea0c clojush.problems.software.smallest$smallest_initial_report@6c49ea0c]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x20be793a clojush.problems.software.smallest$smallest_report@20be793a]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[78 78 78 -53] -53] [[46 63 46 46] 46] [[-85 44 -85 -85] -85] [[96 96 85 96] 85] [[83 83 83 -49] -49] [[55 55 40 55] 40] [[-59 -59 -59 26] -59] [[-5 -5 -69 -5] -69] [[-96 -56 -56 -56] -96] [[-46 -90 -46 -46] -90] [(78 78 78 78) 78] [(-41 -41 -41 -41) -41] [(14 14 14 14) 14] [(81 81 81 81) 81] [(61 61 61 61) 61] [(88 66 51 58) 51] [(76 28 1 68) 1] [(49 37 67 31) 31] [(1 48 28 14) 1] [(5 37 37 4) 4] [(65 48 2 87) 2] [(19 66 46 41) 19] [(41 43 30 18) 18] [(6 72 23 65) 6] [(10 89 95 92) 10] [(12 14 2 9) 2] [(91 12 18 62) 12] [(83 1 30 96) 1] [(59 11 72 71) 11] [(89 51 34 16) 16] [(50 34 43 67) 34] [(87 37 6 20) 6] [(60 94 96 87) 60] [(23 50 97 92) 23] [(71 47 53 57) 47] [(1 42 -92 -20) -92] [(97 -57 72 14) -57] [(60 -48 -86 -5) -86] [(-93 20 29 50) -93] [(29 -82 -11 -86) -86] [(-33 22 -62 -87) -87] [(91 -86 80 -95) -95] [(-8 4 25 38) -8] [(54 12 28 22) 12] [(-64 91 -5 72) -64] [(-73 -77 -27 -9) -77] [(49 -80 -83 -17) -83] [(-19 -84 -71 38) -84] [(81 79 70 -40) -40] [(18 -59 -82 -16) -82] [(-59 -12 -61 53) -61] [(-80 -21 73 43) -80] [(42 89 -66 -44) -66] [(-83 43 21 -64) -83] [(5 -72 -15 -89) -89] [(4 -24 82 -97) -97] [(76 -40 -90 76) -90] [(-9 -94 21 -34) -94] [(-81 46 26 -67) -81] [(60 -32 -46 -35) -46] [(72 -15 20 70) -15] [(100 -3 10 11) -3] [(50 47 -84 -57) -84] [(89 -17 87 18) -17] [(-27 -60 -58 -89) -89] [(0 -5 -4 89) -5] [(41 -24 73 -47) -47] [(-49 68 -20 -89) -89] [(45 -18 -6 -83) -83] [(-81 -35 -77 -81) -81] [(-48 -20 46 -77) -77] [(55 -66 8 20) -66] [(2 13 46 -73) -73] [(-1 -88 21 95) -88] [(55 -97 -8 30) -97] [(65 32 42 -43) -43] [(-59 93 90 86) -59] [(-23 -62 89 16) -62] [(-41 48 41 -40) -41] [(57 75 96 -90) -90] [(84 -31 -97 47) -97] [(-41 -40 37 19) -41] [(-88 -64 -69 24) -88] [(-88 -60 14 73) -88] [(7 85 -42 6) -42] [(98 95 -41 -70) -70] [(63 -75 95 -68) -75] [(90 -94 77 72) -94] [(13 -1 91 11) -1] [(67 -69 -80 91) -80] [(-52 32 87 22) -52] [(-89 40 89 97) -89] [(-76 14 -5 -67) -76] [(24 82 -68 77) -68] [(-5 -99 -84 79) -99])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[78 78 78 -53] -53]
Train Case:   6 | Input/Output: [[46 63 46 46] 46]
Train Case:   7 | Input/Output: [[-85 44 -85 -85] -85]
Train Case:   8 | Input/Output: [[96 96 85 96] 85]
Train Case:   9 | Input/Output: [[83 83 83 -49] -49]
Train Case:  10 | Input/Output: [[55 55 40 55] 40]
Train Case:  11 | Input/Output: [[-59 -59 -59 26] -59]
Train Case:  12 | Input/Output: [[-5 -5 -69 -5] -69]
Train Case:  13 | Input/Output: [[-96 -56 -56 -56] -96]
Train Case:  14 | Input/Output: [[-46 -90 -46 -46] -90]
Train Case:  15 | Input/Output: [(78 78 78 78) 78]
Train Case:  16 | Input/Output: [(-41 -41 -41 -41) -41]
Train Case:  17 | Input/Output: [(14 14 14 14) 14]
Train Case:  18 | Input/Output: [(81 81 81 81) 81]
Train Case:  19 | Input/Output: [(61 61 61 61) 61]
Train Case:  20 | Input/Output: [(88 66 51 58) 51]
Train Case:  21 | Input/Output: [(76 28 1 68) 1]
Train Case:  22 | Input/Output: [(49 37 67 31) 31]
Train Case:  23 | Input/Output: [(1 48 28 14) 1]
Train Case:  24 | Input/Output: [(5 37 37 4) 4]
Train Case:  25 | Input/Output: [(65 48 2 87) 2]
Train Case:  26 | Input/Output: [(19 66 46 41) 19]
Train Case:  27 | Input/Output: [(41 43 30 18) 18]
Train Case:  28 | Input/Output: [(6 72 23 65) 6]
Train Case:  29 | Input/Output: [(10 89 95 92) 10]
Train Case:  30 | Input/Output: [(12 14 2 9) 2]
Train Case:  31 | Input/Output: [(91 12 18 62) 12]
Train Case:  32 | Input/Output: [(83 1 30 96) 1]
Train Case:  33 | Input/Output: [(59 11 72 71) 11]
Train Case:  34 | Input/Output: [(89 51 34 16) 16]
Train Case:  35 | Input/Output: [(50 34 43 67) 34]
Train Case:  36 | Input/Output: [(87 37 6 20) 6]
Train Case:  37 | Input/Output: [(60 94 96 87) 60]
Train Case:  38 | Input/Output: [(23 50 97 92) 23]
Train Case:  39 | Input/Output: [(71 47 53 57) 47]
Train Case:  40 | Input/Output: [(1 42 -92 -20) -92]
Train Case:  41 | Input/Output: [(97 -57 72 14) -57]
Train Case:  42 | Input/Output: [(60 -48 -86 -5) -86]
Train Case:  43 | Input/Output: [(-93 20 29 50) -93]
Train Case:  44 | Input/Output: [(29 -82 -11 -86) -86]
Train Case:  45 | Input/Output: [(-33 22 -62 -87) -87]
Train Case:  46 | Input/Output: [(91 -86 80 -95) -95]
Train Case:  47 | Input/Output: [(-8 4 25 38) -8]
Train Case:  48 | Input/Output: [(54 12 28 22) 12]
Train Case:  49 | Input/Output: [(-64 91 -5 72) -64]
Train Case:  50 | Input/Output: [(-73 -77 -27 -9) -77]
Train Case:  51 | Input/Output: [(49 -80 -83 -17) -83]
Train Case:  52 | Input/Output: [(-19 -84 -71 38) -84]
Train Case:  53 | Input/Output: [(81 79 70 -40) -40]
Train Case:  54 | Input/Output: [(18 -59 -82 -16) -82]
Train Case:  55 | Input/Output: [(-59 -12 -61 53) -61]
Train Case:  56 | Input/Output: [(-80 -21 73 43) -80]
Train Case:  57 | Input/Output: [(42 89 -66 -44) -66]
Train Case:  58 | Input/Output: [(-83 43 21 -64) -83]
Train Case:  59 | Input/Output: [(5 -72 -15 -89) -89]
Train Case:  60 | Input/Output: [(4 -24 82 -97) -97]
Train Case:  61 | Input/Output: [(76 -40 -90 76) -90]
Train Case:  62 | Input/Output: [(-9 -94 21 -34) -94]
Train Case:  63 | Input/Output: [(-81 46 26 -67) -81]
Train Case:  64 | Input/Output: [(60 -32 -46 -35) -46]
Train Case:  65 | Input/Output: [(72 -15 20 70) -15]
Train Case:  66 | Input/Output: [(100 -3 10 11) -3]
Train Case:  67 | Input/Output: [(50 47 -84 -57) -84]
Train Case:  68 | Input/Output: [(89 -17 87 18) -17]
Train Case:  69 | Input/Output: [(-27 -60 -58 -89) -89]
Train Case:  70 | Input/Output: [(0 -5 -4 89) -5]
Train Case:  71 | Input/Output: [(41 -24 73 -47) -47]
Train Case:  72 | Input/Output: [(-49 68 -20 -89) -89]
Train Case:  73 | Input/Output: [(45 -18 -6 -83) -83]
Train Case:  74 | Input/Output: [(-81 -35 -77 -81) -81]
Train Case:  75 | Input/Output: [(-48 -20 46 -77) -77]
Train Case:  76 | Input/Output: [(55 -66 8 20) -66]
Train Case:  77 | Input/Output: [(2 13 46 -73) -73]
Train Case:  78 | Input/Output: [(-1 -88 21 95) -88]
Train Case:  79 | Input/Output: [(55 -97 -8 30) -97]
Train Case:  80 | Input/Output: [(65 32 42 -43) -43]
Train Case:  81 | Input/Output: [(-59 93 90 86) -59]
Train Case:  82 | Input/Output: [(-23 -62 89 16) -62]
Train Case:  83 | Input/Output: [(-41 48 41 -40) -41]
Train Case:  84 | Input/Output: [(57 75 96 -90) -90]
Train Case:  85 | Input/Output: [(84 -31 -97 47) -97]
Train Case:  86 | Input/Output: [(-41 -40 37 19) -41]
Train Case:  87 | Input/Output: [(-88 -64 -69 24) -88]
Train Case:  88 | Input/Output: [(-88 -60 14 73) -88]
Train Case:  89 | Input/Output: [(7 85 -42 6) -42]
Train Case:  90 | Input/Output: [(98 95 -41 -70) -70]
Train Case:  91 | Input/Output: [(63 -75 95 -68) -75]
Train Case:  92 | Input/Output: [(90 -94 77 72) -94]
Train Case:  93 | Input/Output: [(13 -1 91 11) -1]
Train Case:  94 | Input/Output: [(67 -69 -80 91) -80]
Train Case:  95 | Input/Output: [(-52 32 87 22) -52]
Train Case:  96 | Input/Output: [(-89 40 89 97) -89]
Train Case:  97 | Input/Output: [(-76 14 -5 -67) -76]
Train Case:  98 | Input/Output: [(24 82 -68 77) -68]
Train Case:  99 | Input/Output: [(-5 -99 -84 79) -99]
Test Case:   0 | Input/Output: [[-21 -21 -21 86] -21]
Test Case:   1 | Input/Output: [[-66 -66 72 -66] -66]
Test Case:   2 | Input/Output: [[27 -11 27 27] -11]
Test Case:   3 | Input/Output: [[87 87 66 87] 66]
Test Case:   4 | Input/Output: [[69 -50 69 69] -50]
Test Case:   5 | Input/Output: [[43 43 -33 43] -33]
Test Case:   6 | Input/Output: [[-64 -64 -64 65] -64]
Test Case:   7 | Input/Output: [[-92 -92 31 -92] -92]
Test Case:   8 | Input/Output: [[-97 -97 -97 99] -97]
Test Case:   9 | Input/Output: [[-99 69 69 69] -99]
Test Case:  10 | Input/Output: [[48 -77 -77 -77] -77]
Test Case:  11 | Input/Output: [[10 67 10 10] 10]
Test Case:  12 | Input/Output: [[-26 71 -26 -26] -26]
Test Case:  13 | Input/Output: [[90 -45 90 90] -45]
Test Case:  14 | Input/Output: [[-85 -85 -85 74] -85]
Test Case:  15 | Input/Output: [[-27 -27 16 -27] -27]
Test Case:  16 | Input/Output: [[-51 -51 -51 72] -51]
Test Case:  17 | Input/Output: [[82 17 17 17] 17]
Test Case:  18 | Input/Output: [[25 25 90 25] 25]
Test Case:  19 | Input/Output: [[98 28 98 98] 28]
Test Case:  20 | Input/Output: [[-19 98 -19 -19] -19]
Test Case:  21 | Input/Output: [[-93 48 48 48] -93]
Test Case:  22 | Input/Output: [[86 86 86 62] 62]
Test Case:  23 | Input/Output: [[91 91 78 91] 78]
Test Case:  24 | Input/Output: [[94 94 74 94] 74]
Test Case:  25 | Input/Output: [[-78 -78 -78 20] -78]
Test Case:  26 | Input/Output: [[57 -89 57 57] -89]
Test Case:  27 | Input/Output: [[-35 -35 -19 -35] -35]
Test Case:  28 | Input/Output: [[-27 10 10 10] -27]
Test Case:  29 | Input/Output: [[-28 -27 -27 -27] -28]
Test Case:  30 | Input/Output: [[24 24 -10 24] -10]
Test Case:  31 | Input/Output: [[-40 -21 -21 -21] -40]
Test Case:  32 | Input/Output: [[-23 -23 -23 -57] -57]
Test Case:  33 | Input/Output: [[19 -71 19 19] -71]
Test Case:  34 | Input/Output: [[95 95 95 -35] -35]
Test Case:  35 | Input/Output: [[78 78 78 -6] -6]
Test Case:  36 | Input/Output: [[59 25 25 25] 25]
Test Case:  37 | Input/Output: [[34 25 25 25] 25]
Test Case:  38 | Input/Output: [[-75 -75 -75 -78] -78]
Test Case:  39 | Input/Output: [[15 15 -53 15] -53]
Test Case:  40 | Input/Output: [[-2 -2 29 -2] -2]
Test Case:  41 | Input/Output: [[64 64 31 64] 31]
Test Case:  42 | Input/Output: [[24 24 -82 24] -82]
Test Case:  43 | Input/Output: [[24 63 24 24] 24]
Test Case:  44 | Input/Output: [[-34 -34 -34 21] -34]
Test Case:  45 | Input/Output: [[6 28 28 28] 6]
Test Case:  46 | Input/Output: [[-34 -34 -34 -89] -89]
Test Case:  47 | Input/Output: [[-62 -62 -62 31] -62]
Test Case:  48 | Input/Output: [[-67 -78 -67 -67] -78]
Test Case:  49 | Input/Output: [[72 -31 72 72] -31]
Test Case:  50 | Input/Output: [[43 -90 -90 -90] -90]
Test Case:  51 | Input/Output: [[11 -73 -73 -73] -73]
Test Case:  52 | Input/Output: [[-85 37 37 37] -85]
Test Case:  53 | Input/Output: [[-73 8 -73 -73] -73]
Test Case:  54 | Input/Output: [[-12 -100 -100 -100] -100]
Test Case:  55 | Input/Output: [[57 57 57 83] 57]
Test Case:  56 | Input/Output: [[-12 85 -12 -12] -12]
Test Case:  57 | Input/Output: [[40 26 40 40] 26]
Test Case:  58 | Input/Output: [[53 -24 53 53] -24]
Test Case:  59 | Input/Output: [[-23 -6 -23 -23] -23]
Test Case:  60 | Input/Output: [[-10 -10 -10 -57] -57]
Test Case:  61 | Input/Output: [[77 77 77 -41] -41]
Test Case:  62 | Input/Output: [[-66 28 -66 -66] -66]
Test Case:  63 | Input/Output: [[5 5 22 5] 5]
Test Case:  64 | Input/Output: [[92 97 97 97] 92]
Test Case:  65 | Input/Output: [[7 7 74 7] 7]
Test Case:  66 | Input/Output: [[7 7 67 7] 7]
Test Case:  67 | Input/Output: [[-88 -88 -88 -88] -88]
Test Case:  68 | Input/Output: [[43 -51 43 43] -51]
Test Case:  69 | Input/Output: [[-19 -19 -19 19] -19]
Test Case:  70 | Input/Output: [[49 8 49 49] 8]
Test Case:  71 | Input/Output: [[54 54 54 2] 2]
Test Case:  72 | Input/Output: [[-68 62 62 62] -68]
Test Case:  73 | Input/Output: [[7 7 -97 7] -97]
Test Case:  74 | Input/Output: [[51 -94 51 51] -94]
Test Case:  75 | Input/Output: [[62 -45 -45 -45] -45]
Test Case:  76 | Input/Output: [[77 77 77 78] 77]
Test Case:  77 | Input/Output: [[51 63 51 51] 51]
Test Case:  78 | Input/Output: [[77 77 -7 77] -7]
Test Case:  79 | Input/Output: [[-24 47 47 47] -24]
Test Case:  80 | Input/Output: [[-50 100 100 100] -50]
Test Case:  81 | Input/Output: [[88 88 -3 88] -3]
Test Case:  82 | Input/Output: [[-32 -32 35 -32] -32]
Test Case:  83 | Input/Output: [[89 -21 -21 -21] -21]
Test Case:  84 | Input/Output: [[34 34 34 26] 26]
Test Case:  85 | Input/Output: [[-42 -42 -42 84] -42]
Test Case:  86 | Input/Output: [[51 66 66 66] 51]
Test Case:  87 | Input/Output: [[-93 -93 -83 -93] -93]
Test Case:  88 | Input/Output: [[54 80 80 80] 54]
Test Case:  89 | Input/Output: [[-35 -35 -43 -35] -43]
Test Case:  90 | Input/Output: [[-56 -56 86 -56] -56]
Test Case:  91 | Input/Output: [[54 63 54 54] 54]
Test Case:  92 | Input/Output: [[29 2 29 29] 2]
Test Case:  93 | Input/Output: [[20 -30 -30 -30] -30]
Test Case:  94 | Input/Output: [[-22 -22 -22 88] -22]
Test Case:  95 | Input/Output: [[41 58 41 41] 41]
Test Case:  96 | Input/Output: [[-3 -3 78 -3] -3]
Test Case:  97 | Input/Output: [[71 -85 71 71] -85]
Test Case:  98 | Input/Output: [[69 69 -41 69] -41]
Test Case:  99 | Input/Output: [[-44 60 -44 -44] -44]
Test Case: 100 | Input/Output: [(73 73 73 73) 73]
Test Case: 101 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 102 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 103 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 104 | Input/Output: [(34 34 34 34) 34]
Test Case: 105 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 106 | Input/Output: [(25 25 25 25) 25]
Test Case: 107 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 108 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 109 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 110 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 111 | Input/Output: [(82 82 82 82) 82]
Test Case: 112 | Input/Output: [(67 67 67 67) 67]
Test Case: 113 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 114 | Input/Output: [(1 1 1 1) 1]
Test Case: 115 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 116 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 117 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 118 | Input/Output: [(57 57 57 57) 57]
Test Case: 119 | Input/Output: [(69 69 69 69) 69]
Test Case: 120 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 121 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 122 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 123 | Input/Output: [(20 20 20 20) 20]
Test Case: 124 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 125 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 126 | Input/Output: [(21 21 21 21) 21]
Test Case: 127 | Input/Output: [(90 90 90 90) 90]
Test Case: 128 | Input/Output: [(62 62 62 62) 62]
Test Case: 129 | Input/Output: [(3 3 3 3) 3]
Test Case: 130 | Input/Output: [(76 76 76 76) 76]
Test Case: 131 | Input/Output: [(80 80 80 80) 80]
Test Case: 132 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 133 | Input/Output: [(96 96 96 96) 96]
Test Case: 134 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 135 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 136 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 137 | Input/Output: [(84 84 84 84) 84]
Test Case: 138 | Input/Output: [(20 20 20 20) 20]
Test Case: 139 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 140 | Input/Output: [(88 88 88 88) 88]
Test Case: 141 | Input/Output: [(26 26 26 26) 26]
Test Case: 142 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 143 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 144 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 145 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 146 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 147 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 148 | Input/Output: [(81 81 81 81) 81]
Test Case: 149 | Input/Output: [(30 30 30 30) 30]
Test Case: 150 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 151 | Input/Output: [(39 39 39 39) 39]
Test Case: 152 | Input/Output: [(66 66 66 66) 66]
Test Case: 153 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 154 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 155 | Input/Output: [(53 53 53 53) 53]
Test Case: 156 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 157 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 158 | Input/Output: [(19 19 19 19) 19]
Test Case: 159 | Input/Output: [(47 47 47 47) 47]
Test Case: 160 | Input/Output: [(74 74 74 74) 74]
Test Case: 161 | Input/Output: [(79 79 79 79) 79]
Test Case: 162 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 163 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 164 | Input/Output: [(45 45 45 45) 45]
Test Case: 165 | Input/Output: [(11 11 11 11) 11]
Test Case: 166 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 167 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 168 | Input/Output: [(80 80 80 80) 80]
Test Case: 169 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 170 | Input/Output: [(4 4 4 4) 4]
Test Case: 171 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 172 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 173 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 174 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 175 | Input/Output: [(97 97 97 97) 97]
Test Case: 176 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 177 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 178 | Input/Output: [(30 30 30 30) 30]
Test Case: 179 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 180 | Input/Output: [(94 94 94 94) 94]
Test Case: 181 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 182 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 183 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 184 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 185 | Input/Output: [(72 72 72 72) 72]
Test Case: 186 | Input/Output: [(89 89 89 89) 89]
Test Case: 187 | Input/Output: [(5 5 5 5) 5]
Test Case: 188 | Input/Output: [(82 82 82 82) 82]
Test Case: 189 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 190 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 191 | Input/Output: [(29 29 29 29) 29]
Test Case: 192 | Input/Output: [(73 73 73 73) 73]
Test Case: 193 | Input/Output: [(60 60 60 60) 60]
Test Case: 194 | Input/Output: [(68 68 68 68) 68]
Test Case: 195 | Input/Output: [(86 86 86 86) 86]
Test Case: 196 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 197 | Input/Output: [(11 11 11 11) 11]
Test Case: 198 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 199 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 200 | Input/Output: [(8 26 25 80) 8]
Test Case: 201 | Input/Output: [(31 66 35 67) 31]
Test Case: 202 | Input/Output: [(74 20 76 8) 8]
Test Case: 203 | Input/Output: [(49 77 61 72) 49]
Test Case: 204 | Input/Output: [(19 78 40 55) 19]
Test Case: 205 | Input/Output: [(47 23 11 61) 11]
Test Case: 206 | Input/Output: [(84 63 16 3) 3]
Test Case: 207 | Input/Output: [(90 35 73 95) 35]
Test Case: 208 | Input/Output: [(62 73 66 52) 52]
Test Case: 209 | Input/Output: [(57 96 24 3) 3]
Test Case: 210 | Input/Output: [(97 64 9 22) 9]
Test Case: 211 | Input/Output: [(98 49 68 32) 32]
Test Case: 212 | Input/Output: [(78 75 100 75) 75]
Test Case: 213 | Input/Output: [(2 80 85 45) 2]
Test Case: 214 | Input/Output: [(5 32 40 69) 5]
Test Case: 215 | Input/Output: [(35 64 18 38) 18]
Test Case: 216 | Input/Output: [(35 40 11 42) 11]
Test Case: 217 | Input/Output: [(94 46 74 64) 46]
Test Case: 218 | Input/Output: [(40 65 8 40) 8]
Test Case: 219 | Input/Output: [(53 43 28 29) 28]
Test Case: 220 | Input/Output: [(11 60 32 10) 10]
Test Case: 221 | Input/Output: [(53 65 83 18) 18]
Test Case: 222 | Input/Output: [(60 21 68 56) 21]
Test Case: 223 | Input/Output: [(92 18 36 75) 18]
Test Case: 224 | Input/Output: [(47 39 4 70) 4]
Test Case: 225 | Input/Output: [(95 88 84 76) 76]
Test Case: 226 | Input/Output: [(35 73 67 82) 35]
Test Case: 227 | Input/Output: [(62 88 29 9) 9]
Test Case: 228 | Input/Output: [(46 16 33 13) 13]
Test Case: 229 | Input/Output: [(78 54 71 33) 33]
Test Case: 230 | Input/Output: [(4 43 49 46) 4]
Test Case: 231 | Input/Output: [(81 18 100 41) 18]
Test Case: 232 | Input/Output: [(97 97 74 49) 49]
Test Case: 233 | Input/Output: [(46 69 40 39) 39]
Test Case: 234 | Input/Output: [(32 39 5 53) 5]
Test Case: 235 | Input/Output: [(67 56 29 69) 29]
Test Case: 236 | Input/Output: [(84 35 23 34) 23]
Test Case: 237 | Input/Output: [(31 28 85 49) 28]
Test Case: 238 | Input/Output: [(74 33 100 48) 33]
Test Case: 239 | Input/Output: [(13 67 99 70) 13]
Test Case: 240 | Input/Output: [(12 80 44 5) 5]
Test Case: 241 | Input/Output: [(51 30 40 79) 30]
Test Case: 242 | Input/Output: [(63 64 61 4) 4]
Test Case: 243 | Input/Output: [(79 61 57 95) 57]
Test Case: 244 | Input/Output: [(33 76 54 60) 33]
Test Case: 245 | Input/Output: [(48 24 54 17) 17]
Test Case: 246 | Input/Output: [(26 27 14 60) 14]
Test Case: 247 | Input/Output: [(17 33 38 63) 17]
Test Case: 248 | Input/Output: [(9 89 27 100) 9]
Test Case: 249 | Input/Output: [(50 13 48 61) 13]
Test Case: 250 | Input/Output: [(76 66 32 47) 32]
Test Case: 251 | Input/Output: [(44 75 72 74) 44]
Test Case: 252 | Input/Output: [(14 9 90 39) 9]
Test Case: 253 | Input/Output: [(32 64 83 39) 32]
Test Case: 254 | Input/Output: [(67 89 95 91) 67]
Test Case: 255 | Input/Output: [(48 82 7 10) 7]
Test Case: 256 | Input/Output: [(96 27 58 27) 27]
Test Case: 257 | Input/Output: [(47 64 51 95) 47]
Test Case: 258 | Input/Output: [(42 72 61 35) 35]
Test Case: 259 | Input/Output: [(15 86 8 49) 8]
Test Case: 260 | Input/Output: [(6 36 19 52) 6]
Test Case: 261 | Input/Output: [(54 52 99 96) 52]
Test Case: 262 | Input/Output: [(92 90 87 24) 24]
Test Case: 263 | Input/Output: [(82 5 27 82) 5]
Test Case: 264 | Input/Output: [(86 57 17 43) 17]
Test Case: 265 | Input/Output: [(36 58 55 79) 36]
Test Case: 266 | Input/Output: [(38 5 96 45) 5]
Test Case: 267 | Input/Output: [(77 20 98 30) 20]
Test Case: 268 | Input/Output: [(19 58 83 51) 19]
Test Case: 269 | Input/Output: [(8 6 96 0) 0]
Test Case: 270 | Input/Output: [(23 50 42 36) 23]
Test Case: 271 | Input/Output: [(17 79 51 96) 17]
Test Case: 272 | Input/Output: [(52 4 53 60) 4]
Test Case: 273 | Input/Output: [(81 23 54 33) 23]
Test Case: 274 | Input/Output: [(98 81 6 7) 6]
Test Case: 275 | Input/Output: [(20 62 59 83) 20]
Test Case: 276 | Input/Output: [(45 24 88 95) 24]
Test Case: 277 | Input/Output: [(70 69 27 4) 4]
Test Case: 278 | Input/Output: [(44 24 34 73) 24]
Test Case: 279 | Input/Output: [(96 37 79 81) 37]
Test Case: 280 | Input/Output: [(48 38 82 62) 38]
Test Case: 281 | Input/Output: [(58 66 84 21) 21]
Test Case: 282 | Input/Output: [(11 94 90 55) 11]
Test Case: 283 | Input/Output: [(61 5 46 3) 3]
Test Case: 284 | Input/Output: [(69 29 24 31) 24]
Test Case: 285 | Input/Output: [(37 38 73 37) 37]
Test Case: 286 | Input/Output: [(54 92 82 94) 54]
Test Case: 287 | Input/Output: [(11 57 20 22) 11]
Test Case: 288 | Input/Output: [(97 98 19 93) 19]
Test Case: 289 | Input/Output: [(66 74 45 12) 12]
Test Case: 290 | Input/Output: [(29 88 13 80) 13]
Test Case: 291 | Input/Output: [(49 38 83 75) 38]
Test Case: 292 | Input/Output: [(29 41 65 29) 29]
Test Case: 293 | Input/Output: [(45 54 14 93) 14]
Test Case: 294 | Input/Output: [(91 48 17 94) 17]
Test Case: 295 | Input/Output: [(30 28 20 98) 20]
Test Case: 296 | Input/Output: [(31 38 100 41) 31]
Test Case: 297 | Input/Output: [(62 27 68 12) 12]
Test Case: 298 | Input/Output: [(21 85 50 27) 21]
Test Case: 299 | Input/Output: [(33 59 42 52) 33]
Test Case: 300 | Input/Output: [(94 51 26 16) 16]
Test Case: 301 | Input/Output: [(54 72 25 28) 25]
Test Case: 302 | Input/Output: [(68 25 64 83) 25]
Test Case: 303 | Input/Output: [(44 59 46 5) 5]
Test Case: 304 | Input/Output: [(47 71 86 29) 29]
Test Case: 305 | Input/Output: [(24 83 76 88) 24]
Test Case: 306 | Input/Output: [(73 81 37 22) 22]
Test Case: 307 | Input/Output: [(35 48 19 15) 15]
Test Case: 308 | Input/Output: [(13 15 57 37) 13]
Test Case: 309 | Input/Output: [(91 14 99 53) 14]
Test Case: 310 | Input/Output: [(57 22 96 90) 22]
Test Case: 311 | Input/Output: [(27 95 13 2) 2]
Test Case: 312 | Input/Output: [(63 58 75 99) 58]
Test Case: 313 | Input/Output: [(100 7 22 55) 7]
Test Case: 314 | Input/Output: [(52 52 47 45) 45]
Test Case: 315 | Input/Output: [(81 15 32 7) 7]
Test Case: 316 | Input/Output: [(52 68 40 1) 1]
Test Case: 317 | Input/Output: [(69 86 7 14) 7]
Test Case: 318 | Input/Output: [(95 43 53 56) 43]
Test Case: 319 | Input/Output: [(12 12 3 44) 3]
Test Case: 320 | Input/Output: [(7 50 61 87) 7]
Test Case: 321 | Input/Output: [(59 15 42 63) 15]
Test Case: 322 | Input/Output: [(58 89 95 48) 48]
Test Case: 323 | Input/Output: [(2 20 20 45) 2]
Test Case: 324 | Input/Output: [(37 79 67 67) 37]
Test Case: 325 | Input/Output: [(0 77 56 40) 0]
Test Case: 326 | Input/Output: [(67 3 68 6) 3]
Test Case: 327 | Input/Output: [(23 8 77 97) 8]
Test Case: 328 | Input/Output: [(32 86 48 20) 20]
Test Case: 329 | Input/Output: [(99 81 46 82) 46]
Test Case: 330 | Input/Output: [(70 67 35 26) 26]
Test Case: 331 | Input/Output: [(9 84 90 79) 9]
Test Case: 332 | Input/Output: [(84 61 17 52) 17]
Test Case: 333 | Input/Output: [(38 76 46 8) 8]
Test Case: 334 | Input/Output: [(6 94 15 85) 6]
Test Case: 335 | Input/Output: [(68 99 35 85) 35]
Test Case: 336 | Input/Output: [(10 62 6 24) 6]
Test Case: 337 | Input/Output: [(95 91 59 26) 26]
Test Case: 338 | Input/Output: [(62 53 20 92) 20]
Test Case: 339 | Input/Output: [(78 34 50 48) 34]
Test Case: 340 | Input/Output: [(97 68 44 18) 18]
Test Case: 341 | Input/Output: [(75 30 80 21) 21]
Test Case: 342 | Input/Output: [(6 1 34 10) 1]
Test Case: 343 | Input/Output: [(72 26 2 38) 2]
Test Case: 344 | Input/Output: [(13 0 80 57) 0]
Test Case: 345 | Input/Output: [(3 36 57 61) 3]
Test Case: 346 | Input/Output: [(34 38 62 99) 34]
Test Case: 347 | Input/Output: [(52 7 56 23) 7]
Test Case: 348 | Input/Output: [(30 5 79 83) 5]
Test Case: 349 | Input/Output: [(1 52 45 66) 1]
Test Case: 350 | Input/Output: [(39 96 45 14) 14]
Test Case: 351 | Input/Output: [(58 25 32 86) 25]
Test Case: 352 | Input/Output: [(32 15 0 100) 0]
Test Case: 353 | Input/Output: [(77 31 41 4) 4]
Test Case: 354 | Input/Output: [(49 64 90 97) 49]
Test Case: 355 | Input/Output: [(23 18 8 20) 8]
Test Case: 356 | Input/Output: [(46 14 1 37) 1]
Test Case: 357 | Input/Output: [(87 78 86 55) 55]
Test Case: 358 | Input/Output: [(71 2 1 91) 1]
Test Case: 359 | Input/Output: [(40 70 41 7) 7]
Test Case: 360 | Input/Output: [(38 20 92 91) 20]
Test Case: 361 | Input/Output: [(81 44 29 19) 19]
Test Case: 362 | Input/Output: [(38 70 83 43) 38]
Test Case: 363 | Input/Output: [(42 82 32 1) 1]
Test Case: 364 | Input/Output: [(55 59 26 80) 26]
Test Case: 365 | Input/Output: [(16 52 34 38) 16]
Test Case: 366 | Input/Output: [(69 99 19 43) 19]
Test Case: 367 | Input/Output: [(73 16 60 79) 16]
Test Case: 368 | Input/Output: [(44 7 89 58) 7]
Test Case: 369 | Input/Output: [(84 80 70 32) 32]
Test Case: 370 | Input/Output: [(17 65 49 34) 17]
Test Case: 371 | Input/Output: [(48 57 62 8) 8]
Test Case: 372 | Input/Output: [(44 59 25 40) 25]
Test Case: 373 | Input/Output: [(11 43 90 94) 11]
Test Case: 374 | Input/Output: [(23 87 67 2) 2]
Test Case: 375 | Input/Output: [(83 76 18 41) 18]
Test Case: 376 | Input/Output: [(49 15 91 55) 15]
Test Case: 377 | Input/Output: [(5 88 40 90) 5]
Test Case: 378 | Input/Output: [(83 22 12 10) 10]
Test Case: 379 | Input/Output: [(100 18 53 85) 18]
Test Case: 380 | Input/Output: [(19 9 65 23) 9]
Test Case: 381 | Input/Output: [(49 35 83 24) 24]
Test Case: 382 | Input/Output: [(39 94 80 8) 8]
Test Case: 383 | Input/Output: [(71 84 64 34) 34]
Test Case: 384 | Input/Output: [(38 47 24 85) 24]
Test Case: 385 | Input/Output: [(48 22 8 42) 8]
Test Case: 386 | Input/Output: [(33 67 71 11) 11]
Test Case: 387 | Input/Output: [(33 5 78 80) 5]
Test Case: 388 | Input/Output: [(80 96 0 79) 0]
Test Case: 389 | Input/Output: [(8 29 68 2) 2]
Test Case: 390 | Input/Output: [(50 48 14 6) 6]
Test Case: 391 | Input/Output: [(75 62 51 56) 51]
Test Case: 392 | Input/Output: [(81 53 15 65) 15]
Test Case: 393 | Input/Output: [(20 39 2 16) 2]
Test Case: 394 | Input/Output: [(80 31 12 99) 12]
Test Case: 395 | Input/Output: [(41 58 39 51) 39]
Test Case: 396 | Input/Output: [(90 71 77 43) 43]
Test Case: 397 | Input/Output: [(71 82 4 23) 4]
Test Case: 398 | Input/Output: [(45 19 60 24) 19]
Test Case: 399 | Input/Output: [(35 19 9 95) 9]
Test Case: 400 | Input/Output: [(97 38 -35 95) -35]
Test Case: 401 | Input/Output: [(-68 65 -80 -54) -80]
Test Case: 402 | Input/Output: [(-55 -35 50 -16) -55]
Test Case: 403 | Input/Output: [(41 -64 -40 -20) -64]
Test Case: 404 | Input/Output: [(19 34 68 -26) -26]
Test Case: 405 | Input/Output: [(65 7 -30 -73) -73]
Test Case: 406 | Input/Output: [(98 -70 36 7) -70]
Test Case: 407 | Input/Output: [(-56 -88 21 48) -88]
Test Case: 408 | Input/Output: [(-11 30 92 58) -11]
Test Case: 409 | Input/Output: [(-81 38 4 -1) -81]
Test Case: 410 | Input/Output: [(24 -8 53 -56) -56]
Test Case: 411 | Input/Output: [(-79 -24 -43 68) -79]
Test Case: 412 | Input/Output: [(51 51 -1 42) -1]
Test Case: 413 | Input/Output: [(61 77 17 52) 17]
Test Case: 414 | Input/Output: [(-55 -86 14 1) -86]
Test Case: 415 | Input/Output: [(-67 8 -89 80) -89]
Test Case: 416 | Input/Output: [(-49 -53 -39 31) -53]
Test Case: 417 | Input/Output: [(-37 32 6 48) -37]
Test Case: 418 | Input/Output: [(63 96 -54 -71) -71]
Test Case: 419 | Input/Output: [(-98 -43 -95 77) -98]
Test Case: 420 | Input/Output: [(28 28 -21 4) -21]
Test Case: 421 | Input/Output: [(13 -25 -11 -88) -88]
Test Case: 422 | Input/Output: [(-37 100 40 -95) -95]
Test Case: 423 | Input/Output: [(37 0 1 -55) -55]
Test Case: 424 | Input/Output: [(-61 48 52 -1) -61]
Test Case: 425 | Input/Output: [(80 -72 87 -73) -73]
Test Case: 426 | Input/Output: [(-20 57 86 18) -20]
Test Case: 427 | Input/Output: [(85 47 53 91) 47]
Test Case: 428 | Input/Output: [(-19 -90 -64 -2) -90]
Test Case: 429 | Input/Output: [(-38 1 56 62) -38]
Test Case: 430 | Input/Output: [(16 -85 2 37) -85]
Test Case: 431 | Input/Output: [(90 -6 -17 -81) -81]
Test Case: 432 | Input/Output: [(11 -24 70 -22) -24]
Test Case: 433 | Input/Output: [(49 -78 38 44) -78]
Test Case: 434 | Input/Output: [(-84 -3 -14 -80) -84]
Test Case: 435 | Input/Output: [(-92 97 59 -73) -92]
Test Case: 436 | Input/Output: [(81 -77 6 76) -77]
Test Case: 437 | Input/Output: [(93 -62 -11 -81) -81]
Test Case: 438 | Input/Output: [(2 33 85 -55) -55]
Test Case: 439 | Input/Output: [(-25 -99 24 59) -99]
Test Case: 440 | Input/Output: [(46 37 20 -45) -45]
Test Case: 441 | Input/Output: [(20 90 -28 -19) -28]
Test Case: 442 | Input/Output: [(26 58 -97 22) -97]
Test Case: 443 | Input/Output: [(28 6 88 33) 6]
Test Case: 444 | Input/Output: [(75 17 22 -27) -27]
Test Case: 445 | Input/Output: [(-97 -38 79 -36) -97]
Test Case: 446 | Input/Output: [(24 59 51 32) 24]
Test Case: 447 | Input/Output: [(-16 26 -36 -74) -74]
Test Case: 448 | Input/Output: [(-5 35 -29 46) -29]
Test Case: 449 | Input/Output: [(-90 -24 11 47) -90]
Test Case: 450 | Input/Output: [(13 100 80 -87) -87]
Test Case: 451 | Input/Output: [(34 31 47 26) 26]
Test Case: 452 | Input/Output: [(73 69 81 -68) -68]
Test Case: 453 | Input/Output: [(19 -39 -19 77) -39]
Test Case: 454 | Input/Output: [(13 44 -24 -21) -24]
Test Case: 455 | Input/Output: [(81 -14 47 -58) -58]
Test Case: 456 | Input/Output: [(0 48 11 47) 0]
Test Case: 457 | Input/Output: [(17 24 -97 4) -97]
Test Case: 458 | Input/Output: [(-25 6 -99 -70) -99]
Test Case: 459 | Input/Output: [(-63 -83 -46 -51) -83]
Test Case: 460 | Input/Output: [(77 7 -42 92) -42]
Test Case: 461 | Input/Output: [(42 17 56 -99) -99]
Test Case: 462 | Input/Output: [(9 51 -100 -14) -100]
Test Case: 463 | Input/Output: [(26 -3 -46 18) -46]
Test Case: 464 | Input/Output: [(40 49 99 6) 6]
Test Case: 465 | Input/Output: [(-40 -97 84 82) -97]
Test Case: 466 | Input/Output: [(-85 14 2 89) -85]
Test Case: 467 | Input/Output: [(72 81 22 7) 7]
Test Case: 468 | Input/Output: [(-78 79 -10 68) -78]
Test Case: 469 | Input/Output: [(-49 -27 88 -98) -98]
Test Case: 470 | Input/Output: [(83 24 -51 -21) -51]
Test Case: 471 | Input/Output: [(-77 -76 -81 48) -81]
Test Case: 472 | Input/Output: [(-65 7 -41 -96) -96]
Test Case: 473 | Input/Output: [(-74 -10 -1 100) -74]
Test Case: 474 | Input/Output: [(-31 -6 -33 44) -33]
Test Case: 475 | Input/Output: [(-59 -36 -90 73) -90]
Test Case: 476 | Input/Output: [(-4 -41 27 79) -41]
Test Case: 477 | Input/Output: [(71 55 -8 27) -8]
Test Case: 478 | Input/Output: [(-47 -14 66 -1) -47]
Test Case: 479 | Input/Output: [(-63 -91 -64 -55) -91]
Test Case: 480 | Input/Output: [(-46 -87 -26 16) -87]
Test Case: 481 | Input/Output: [(27 -9 40 38) -9]
Test Case: 482 | Input/Output: [(-8 58 4 25) -8]
Test Case: 483 | Input/Output: [(-42 -1 -41 -16) -42]
Test Case: 484 | Input/Output: [(-14 70 -65 -88) -88]
Test Case: 485 | Input/Output: [(65 82 72 -81) -81]
Test Case: 486 | Input/Output: [(-87 -56 94 68) -87]
Test Case: 487 | Input/Output: [(-27 -37 91 -85) -85]
Test Case: 488 | Input/Output: [(-82 -63 76 -85) -85]
Test Case: 489 | Input/Output: [(-58 53 -58 85) -58]
Test Case: 490 | Input/Output: [(100 -23 100 9) -23]
Test Case: 491 | Input/Output: [(33 38 -63 56) -63]
Test Case: 492 | Input/Output: [(-72 -12 63 -76) -76]
Test Case: 493 | Input/Output: [(-1 10 66 -62) -62]
Test Case: 494 | Input/Output: [(26 -100 -91 13) -100]
Test Case: 495 | Input/Output: [(49 82 68 10) 10]
Test Case: 496 | Input/Output: [(79 40 -49 12) -49]
Test Case: 497 | Input/Output: [(-7 57 13 -90) -90]
Test Case: 498 | Input/Output: [(-7 -93 -50 -65) -93]
Test Case: 499 | Input/Output: [(-45 36 -15 24) -45]
Test Case: 500 | Input/Output: [(-12 -19 87 -6) -19]
Test Case: 501 | Input/Output: [(-70 -37 -41 39) -70]
Test Case: 502 | Input/Output: [(97 44 18 46) 18]
Test Case: 503 | Input/Output: [(56 83 -81 -34) -81]
Test Case: 504 | Input/Output: [(50 94 -100 21) -100]
Test Case: 505 | Input/Output: [(-83 44 52 66) -83]
Test Case: 506 | Input/Output: [(-66 74 50 45) -66]
Test Case: 507 | Input/Output: [(-93 -94 58 -8) -94]
Test Case: 508 | Input/Output: [(35 21 -28 4) -28]
Test Case: 509 | Input/Output: [(43 -93 4 50) -93]
Test Case: 510 | Input/Output: [(-82 49 -43 -98) -98]
Test Case: 511 | Input/Output: [(-49 99 34 16) -49]
Test Case: 512 | Input/Output: [(99 -34 -29 55) -34]
Test Case: 513 | Input/Output: [(-50 93 40 -59) -59]
Test Case: 514 | Input/Output: [(4 32 92 -28) -28]
Test Case: 515 | Input/Output: [(40 77 -59 7) -59]
Test Case: 516 | Input/Output: [(-43 -70 -100 17) -100]
Test Case: 517 | Input/Output: [(-7 -68 71 34) -68]
Test Case: 518 | Input/Output: [(-28 -71 7 96) -71]
Test Case: 519 | Input/Output: [(-65 59 82 58) -65]
Test Case: 520 | Input/Output: [(36 44 53 -98) -98]
Test Case: 521 | Input/Output: [(96 -56 80 64) -56]
Test Case: 522 | Input/Output: [(49 -58 88 -84) -84]
Test Case: 523 | Input/Output: [(-33 36 67 -12) -33]
Test Case: 524 | Input/Output: [(76 -71 61 25) -71]
Test Case: 525 | Input/Output: [(-19 27 -42 -6) -42]
Test Case: 526 | Input/Output: [(18 12 11 40) 11]
Test Case: 527 | Input/Output: [(36 11 -31 -82) -82]
Test Case: 528 | Input/Output: [(-59 94 -43 -38) -59]
Test Case: 529 | Input/Output: [(59 -41 11 82) -41]
Test Case: 530 | Input/Output: [(-65 -25 2 -4) -65]
Test Case: 531 | Input/Output: [(67 31 -7 25) -7]
Test Case: 532 | Input/Output: [(94 16 -63 83) -63]
Test Case: 533 | Input/Output: [(82 96 23 -60) -60]
Test Case: 534 | Input/Output: [(35 -57 11 -54) -57]
Test Case: 535 | Input/Output: [(-83 -71 64 -15) -83]
Test Case: 536 | Input/Output: [(-18 -86 -78 -36) -86]
Test Case: 537 | Input/Output: [(-7 27 -85 94) -85]
Test Case: 538 | Input/Output: [(46 44 68 12) 12]
Test Case: 539 | Input/Output: [(-2 9 -53 -19) -53]
Test Case: 540 | Input/Output: [(24 -30 99 35) -30]
Test Case: 541 | Input/Output: [(-79 31 -20 -12) -79]
Test Case: 542 | Input/Output: [(39 -67 32 -48) -67]
Test Case: 543 | Input/Output: [(-28 74 31 82) -28]
Test Case: 544 | Input/Output: [(83 -69 77 -43) -69]
Test Case: 545 | Input/Output: [(-68 -37 58 95) -68]
Test Case: 546 | Input/Output: [(-28 -58 -76 -98) -98]
Test Case: 547 | Input/Output: [(53 72 17 20) 17]
Test Case: 548 | Input/Output: [(89 71 61 -74) -74]
Test Case: 549 | Input/Output: [(61 16 34 35) 16]
Test Case: 550 | Input/Output: [(64 -9 -49 -60) -60]
Test Case: 551 | Input/Output: [(-42 11 -42 32) -42]
Test Case: 552 | Input/Output: [(27 0 -29 3) -29]
Test Case: 553 | Input/Output: [(78 -47 -65 8) -65]
Test Case: 554 | Input/Output: [(-6 -38 -27 -40) -40]
Test Case: 555 | Input/Output: [(54 23 4 91) 4]
Test Case: 556 | Input/Output: [(-99 -23 76 11) -99]
Test Case: 557 | Input/Output: [(-92 -40 50 -73) -92]
Test Case: 558 | Input/Output: [(43 61 -100 84) -100]
Test Case: 559 | Input/Output: [(-51 -77 34 79) -77]
Test Case: 560 | Input/Output: [(96 26 -91 -3) -91]
Test Case: 561 | Input/Output: [(-7 5 -37 -46) -46]
Test Case: 562 | Input/Output: [(11 56 1 -55) -55]
Test Case: 563 | Input/Output: [(-84 5 94 57) -84]
Test Case: 564 | Input/Output: [(-27 64 -73 -84) -84]
Test Case: 565 | Input/Output: [(-44 96 83 -24) -44]
Test Case: 566 | Input/Output: [(-98 15 17 70) -98]
Test Case: 567 | Input/Output: [(-61 32 -31 47) -61]
Test Case: 568 | Input/Output: [(45 35 33 -51) -51]
Test Case: 569 | Input/Output: [(60 -39 74 75) -39]
Test Case: 570 | Input/Output: [(69 -69 -48 -15) -69]
Test Case: 571 | Input/Output: [(76 -20 83 57) -20]
Test Case: 572 | Input/Output: [(27 -12 34 68) -12]
Test Case: 573 | Input/Output: [(96 50 -20 -62) -62]
Test Case: 574 | Input/Output: [(-73 -11 -38 6) -73]
Test Case: 575 | Input/Output: [(-71 -12 49 92) -71]
Test Case: 576 | Input/Output: [(-77 -52 15 98) -77]
Test Case: 577 | Input/Output: [(-48 6 73 1) -48]
Test Case: 578 | Input/Output: [(-13 -58 -27 46) -58]
Test Case: 579 | Input/Output: [(-44 -65 91 -91) -91]
Test Case: 580 | Input/Output: [(-45 -85 -50 -50) -85]
Test Case: 581 | Input/Output: [(25 -77 -1 49) -77]
Test Case: 582 | Input/Output: [(-3 42 -78 84) -78]
Test Case: 583 | Input/Output: [(92 37 -59 73) -59]
Test Case: 584 | Input/Output: [(-73 32 29 -24) -73]
Test Case: 585 | Input/Output: [(34 69 -30 21) -30]
Test Case: 586 | Input/Output: [(-24 98 52 80) -24]
Test Case: 587 | Input/Output: [(-88 -64 -65 -10) -88]
Test Case: 588 | Input/Output: [(2 30 -23 -22) -23]
Test Case: 589 | Input/Output: [(-14 -39 -70 3) -70]
Test Case: 590 | Input/Output: [(-36 -34 -47 23) -47]
Test Case: 591 | Input/Output: [(9 82 -68 -46) -68]
Test Case: 592 | Input/Output: [(68 -75 100 61) -75]
Test Case: 593 | Input/Output: [(-94 -3 2 -74) -94]
Test Case: 594 | Input/Output: [(44 -18 -39 -15) -39]
Test Case: 595 | Input/Output: [(-81 -76 -41 100) -81]
Test Case: 596 | Input/Output: [(86 -82 38 48) -82]
Test Case: 597 | Input/Output: [(79 -14 -56 72) -56]
Test Case: 598 | Input/Output: [(-31 37 -71 84) -71]
Test Case: 599 | Input/Output: [(27 66 -93 -55) -93]
Test Case: 600 | Input/Output: [(-79 -66 -56 -1) -79]
Test Case: 601 | Input/Output: [(-67 -70 -91 33) -91]
Test Case: 602 | Input/Output: [(72 -70 -100 96) -100]
Test Case: 603 | Input/Output: [(-42 -70 -81 -71) -81]
Test Case: 604 | Input/Output: [(-18 41 3 -39) -39]
Test Case: 605 | Input/Output: [(59 -18 67 72) -18]
Test Case: 606 | Input/Output: [(-27 42 -25 -36) -36]
Test Case: 607 | Input/Output: [(50 0 -13 83) -13]
Test Case: 608 | Input/Output: [(29 -99 11 24) -99]
Test Case: 609 | Input/Output: [(-90 18 89 62) -90]
Test Case: 610 | Input/Output: [(-43 -66 23 -10) -66]
Test Case: 611 | Input/Output: [(-88 19 43 100) -88]
Test Case: 612 | Input/Output: [(37 -43 -73 -31) -73]
Test Case: 613 | Input/Output: [(71 29 87 -88) -88]
Test Case: 614 | Input/Output: [(-53 -57 74 30) -57]
Test Case: 615 | Input/Output: [(40 26 -53 -19) -53]
Test Case: 616 | Input/Output: [(47 -24 -22 -51) -51]
Test Case: 617 | Input/Output: [(26 21 95 -72) -72]
Test Case: 618 | Input/Output: [(55 -98 93 -66) -98]
Test Case: 619 | Input/Output: [(-20 -3 -40 7) -40]
Test Case: 620 | Input/Output: [(-64 31 87 -6) -64]
Test Case: 621 | Input/Output: [(4 10 -60 -46) -60]
Test Case: 622 | Input/Output: [(-90 -30 -94 -17) -94]
Test Case: 623 | Input/Output: [(31 -48 -71 -18) -71]
Test Case: 624 | Input/Output: [(29 -83 49 -90) -90]
Test Case: 625 | Input/Output: [(19 50 -26 -42) -42]
Test Case: 626 | Input/Output: [(100 -83 63 40) -83]
Test Case: 627 | Input/Output: [(-74 -48 43 93) -74]
Test Case: 628 | Input/Output: [(-24 5 40 69) -24]
Test Case: 629 | Input/Output: [(6 -8 78 -92) -92]
Test Case: 630 | Input/Output: [(-4 -79 99 -78) -79]
Test Case: 631 | Input/Output: [(77 -20 -9 40) -20]
Test Case: 632 | Input/Output: [(-99 74 -22 58) -99]
Test Case: 633 | Input/Output: [(36 -55 -92 38) -92]
Test Case: 634 | Input/Output: [(16 53 -29 53) -29]
Test Case: 635 | Input/Output: [(40 -75 85 83) -75]
Test Case: 636 | Input/Output: [(-91 14 -46 15) -91]
Test Case: 637 | Input/Output: [(-30 -27 -8 39) -30]
Test Case: 638 | Input/Output: [(-69 -19 36 10) -69]
Test Case: 639 | Input/Output: [(80 19 -37 -87) -87]
Test Case: 640 | Input/Output: [(74 -28 6 23) -28]
Test Case: 641 | Input/Output: [(-43 99 29 76) -43]
Test Case: 642 | Input/Output: [(-9 76 97 60) -9]
Test Case: 643 | Input/Output: [(5 0 -6 24) -6]
Test Case: 644 | Input/Output: [(-8 -20 18 100) -20]
Test Case: 645 | Input/Output: [(-97 -94 14 64) -97]
Test Case: 646 | Input/Output: [(45 -65 92 11) -65]
Test Case: 647 | Input/Output: [(-57 -40 -38 -37) -57]
Test Case: 648 | Input/Output: [(-27 46 20 -4) -27]
Test Case: 649 | Input/Output: [(-52 25 -59 38) -59]
Test Case: 650 | Input/Output: [(-85 -24 79 -29) -85]
Test Case: 651 | Input/Output: [(27 -15 -84 78) -84]
Test Case: 652 | Input/Output: [(-6 49 91 43) -6]
Test Case: 653 | Input/Output: [(-51 -53 -17 44) -53]
Test Case: 654 | Input/Output: [(-13 19 20 2) -13]
Test Case: 655 | Input/Output: [(-53 3 30 40) -53]
Test Case: 656 | Input/Output: [(27 -78 -96 -47) -96]
Test Case: 657 | Input/Output: [(72 -36 -28 -72) -72]
Test Case: 658 | Input/Output: [(8 11 -25 31) -25]
Test Case: 659 | Input/Output: [(-50 -100 81 -30) -100]
Test Case: 660 | Input/Output: [(24 -57 3 34) -57]
Test Case: 661 | Input/Output: [(-57 30 99 76) -57]
Test Case: 662 | Input/Output: [(79 93 83 -63) -63]
Test Case: 663 | Input/Output: [(-88 -11 96 -93) -93]
Test Case: 664 | Input/Output: [(-71 2 51 53) -71]
Test Case: 665 | Input/Output: [(39 56 -39 -76) -76]
Test Case: 666 | Input/Output: [(73 -10 -66 -76) -76]
Test Case: 667 | Input/Output: [(-65 4 -56 51) -65]
Test Case: 668 | Input/Output: [(-68 48 -63 79) -68]
Test Case: 669 | Input/Output: [(3 -82 -59 -1) -82]
Test Case: 670 | Input/Output: [(7 -68 81 82) -68]
Test Case: 671 | Input/Output: [(3 -91 -29 14) -91]
Test Case: 672 | Input/Output: [(99 37 0 -94) -94]
Test Case: 673 | Input/Output: [(-40 -67 -45 1) -67]
Test Case: 674 | Input/Output: [(31 60 74 92) 31]
Test Case: 675 | Input/Output: [(-67 79 -95 53) -95]
Test Case: 676 | Input/Output: [(27 -43 -49 -9) -49]
Test Case: 677 | Input/Output: [(-85 -52 78 -2) -85]
Test Case: 678 | Input/Output: [(35 -2 25 -67) -67]
Test Case: 679 | Input/Output: [(-16 -54 -25 84) -54]
Test Case: 680 | Input/Output: [(54 38 89 -75) -75]
Test Case: 681 | Input/Output: [(-79 93 0 -84) -84]
Test Case: 682 | Input/Output: [(84 92 -73 100) -73]
Test Case: 683 | Input/Output: [(36 100 -72 -72) -72]
Test Case: 684 | Input/Output: [(32 -70 -78 84) -78]
Test Case: 685 | Input/Output: [(24 -94 45 -16) -94]
Test Case: 686 | Input/Output: [(28 -8 -96 -52) -96]
Test Case: 687 | Input/Output: [(-77 -60 -11 -28) -77]
Test Case: 688 | Input/Output: [(90 -96 -89 5) -96]
Test Case: 689 | Input/Output: [(38 1 -37 56) -37]
Test Case: 690 | Input/Output: [(95 -35 71 46) -35]
Test Case: 691 | Input/Output: [(-20 19 64 -50) -50]
Test Case: 692 | Input/Output: [(-51 -13 64 -49) -51]
Test Case: 693 | Input/Output: [(27 -46 -38 -59) -59]
Test Case: 694 | Input/Output: [(24 89 67 -39) -39]
Test Case: 695 | Input/Output: [(-43 -43 28 4) -43]
Test Case: 696 | Input/Output: [(-52 -40 21 79) -52]
Test Case: 697 | Input/Output: [(-42 -63 20 40) -63]
Test Case: 698 | Input/Output: [(-42 43 22 36) -42]
Test Case: 699 | Input/Output: [(-81 16 -61 70) -81]
Test Case: 700 | Input/Output: [(-43 -32 71 39) -43]
Test Case: 701 | Input/Output: [(36 -25 76 56) -25]
Test Case: 702 | Input/Output: [(52 54 74 20) 20]
Test Case: 703 | Input/Output: [(33 -61 42 -2) -61]
Test Case: 704 | Input/Output: [(7 -73 32 96) -73]
Test Case: 705 | Input/Output: [(-4 49 -77 -41) -77]
Test Case: 706 | Input/Output: [(44 61 -98 -52) -98]
Test Case: 707 | Input/Output: [(50 4 28 75) 4]
Test Case: 708 | Input/Output: [(-70 46 9 -70) -70]
Test Case: 709 | Input/Output: [(63 -47 -71 -18) -71]
Test Case: 710 | Input/Output: [(63 21 50 -28) -28]
Test Case: 711 | Input/Output: [(-68 75 18 83) -68]
Test Case: 712 | Input/Output: [(-6 -61 18 61) -61]
Test Case: 713 | Input/Output: [(18 2 -26 -14) -26]
Test Case: 714 | Input/Output: [(-1 31 -81 -100) -100]
Test Case: 715 | Input/Output: [(-56 35 57 -13) -56]
Test Case: 716 | Input/Output: [(59 -27 -44 18) -44]
Test Case: 717 | Input/Output: [(90 38 -55 30) -55]
Test Case: 718 | Input/Output: [(96 49 -75 -17) -75]
Test Case: 719 | Input/Output: [(-74 21 76 -41) -74]
Test Case: 720 | Input/Output: [(52 46 -34 -25) -34]
Test Case: 721 | Input/Output: [(79 6 91 92) 6]
Test Case: 722 | Input/Output: [(-52 84 29 -61) -61]
Test Case: 723 | Input/Output: [(-63 -35 18 -29) -63]
Test Case: 724 | Input/Output: [(53 86 -38 -5) -38]
Test Case: 725 | Input/Output: [(23 23 13 -37) -37]
Test Case: 726 | Input/Output: [(28 40 77 66) 28]
Test Case: 727 | Input/Output: [(-36 -24 67 32) -36]
Test Case: 728 | Input/Output: [(21 -19 14 93) -19]
Test Case: 729 | Input/Output: [(-44 -77 98 -21) -77]
Test Case: 730 | Input/Output: [(-88 8 -87 -69) -88]
Test Case: 731 | Input/Output: [(-22 30 -37 16) -37]
Test Case: 732 | Input/Output: [(51 88 -19 52) -19]
Test Case: 733 | Input/Output: [(40 -79 -57 -27) -79]
Test Case: 734 | Input/Output: [(-92 -37 34 41) -92]
Test Case: 735 | Input/Output: [(-88 -36 78 -94) -94]
Test Case: 736 | Input/Output: [(-78 36 -26 -10) -78]
Test Case: 737 | Input/Output: [(54 -12 -60 -85) -85]
Test Case: 738 | Input/Output: [(86 -2 68 99) -2]
Test Case: 739 | Input/Output: [(-47 68 74 -11) -47]
Test Case: 740 | Input/Output: [(16 100 -40 59) -40]
Test Case: 741 | Input/Output: [(69 -84 -87 -53) -87]
Test Case: 742 | Input/Output: [(56 98 -46 -41) -46]
Test Case: 743 | Input/Output: [(47 -45 -41 -24) -45]
Test Case: 744 | Input/Output: [(-39 -40 -91 -52) -91]
Test Case: 745 | Input/Output: [(-42 -49 -75 -37) -75]
Test Case: 746 | Input/Output: [(-66 -97 17 -100) -100]
Test Case: 747 | Input/Output: [(-96 58 71 -75) -96]
Test Case: 748 | Input/Output: [(-7 90 83 -74) -74]
Test Case: 749 | Input/Output: [(74 77 -46 -51) -51]
Test Case: 750 | Input/Output: [(100 -59 -50 -42) -59]
Test Case: 751 | Input/Output: [(81 22 35 -10) -10]
Test Case: 752 | Input/Output: [(-87 -81 99 85) -87]
Test Case: 753 | Input/Output: [(76 -85 -21 -77) -85]
Test Case: 754 | Input/Output: [(92 -31 82 -54) -54]
Test Case: 755 | Input/Output: [(25 -78 -18 -27) -78]
Test Case: 756 | Input/Output: [(90 -21 -65 -81) -81]
Test Case: 757 | Input/Output: [(-24 20 45 87) -24]
Test Case: 758 | Input/Output: [(-60 -77 -41 93) -77]
Test Case: 759 | Input/Output: [(-2 34 46 50) -2]
Test Case: 760 | Input/Output: [(-14 82 68 51) -14]
Test Case: 761 | Input/Output: [(26 -24 91 42) -24]
Test Case: 762 | Input/Output: [(-59 70 61 -55) -59]
Test Case: 763 | Input/Output: [(-69 -92 87 30) -92]
Test Case: 764 | Input/Output: [(-5 -79 -9 28) -79]
Test Case: 765 | Input/Output: [(-2 -81 100 0) -81]
Test Case: 766 | Input/Output: [(79 -60 72 -59) -60]
Test Case: 767 | Input/Output: [(88 81 -18 84) -18]
Test Case: 768 | Input/Output: [(-1 -78 63 -69) -78]
Test Case: 769 | Input/Output: [(95 -56 -19 -59) -59]
Test Case: 770 | Input/Output: [(15 4 -47 81) -47]
Test Case: 771 | Input/Output: [(-11 -49 -45 92) -49]
Test Case: 772 | Input/Output: [(-40 73 66 26) -40]
Test Case: 773 | Input/Output: [(89 -47 31 -39) -47]
Test Case: 774 | Input/Output: [(-82 -23 0 35) -82]
Test Case: 775 | Input/Output: [(-78 -36 -50 -50) -78]
Test Case: 776 | Input/Output: [(27 14 -39 -41) -41]
Test Case: 777 | Input/Output: [(30 50 9 -18) -18]
Test Case: 778 | Input/Output: [(-82 90 96 -72) -82]
Test Case: 779 | Input/Output: [(32 68 -69 78) -69]
Test Case: 780 | Input/Output: [(9 -76 -1 28) -76]
Test Case: 781 | Input/Output: [(15 14 -99 -96) -99]
Test Case: 782 | Input/Output: [(-82 -54 43 64) -82]
Test Case: 783 | Input/Output: [(64 -51 83 -86) -86]
Test Case: 784 | Input/Output: [(55 9 -33 -99) -99]
Test Case: 785 | Input/Output: [(73 43 -61 -97) -97]
Test Case: 786 | Input/Output: [(94 -79 -53 93) -79]
Test Case: 787 | Input/Output: [(-18 8 -5 -25) -25]
Test Case: 788 | Input/Output: [(37 48 32 81) 32]
Test Case: 789 | Input/Output: [(-63 -18 23 24) -63]
Test Case: 790 | Input/Output: [(87 71 27 75) 27]
Test Case: 791 | Input/Output: [(-79 82 85 79) -79]
Test Case: 792 | Input/Output: [(33 -25 77 -46) -46]
Test Case: 793 | Input/Output: [(57 -27 -58 -48) -58]
Test Case: 794 | Input/Output: [(-76 -57 -87 -62) -87]
Test Case: 795 | Input/Output: [(-88 43 -4 42) -88]
Test Case: 796 | Input/Output: [(38 51 5 -21) -21]
Test Case: 797 | Input/Output: [(-20 -5 -52 98) -52]
Test Case: 798 | Input/Output: [(79 -60 -52 38) -60]
Test Case: 799 | Input/Output: [(-99 -48 -8 89) -99]
Test Case: 800 | Input/Output: [(-19 -94 -90 -4) -94]
Test Case: 801 | Input/Output: [(49 -91 74 -1) -91]
Test Case: 802 | Input/Output: [(72 -54 46 72) -54]
Test Case: 803 | Input/Output: [(-82 89 59 -67) -82]
Test Case: 804 | Input/Output: [(-52 40 -98 88) -98]
Test Case: 805 | Input/Output: [(19 32 63 -97) -97]
Test Case: 806 | Input/Output: [(91 -3 -25 100) -25]
Test Case: 807 | Input/Output: [(92 0 77 -59) -59]
Test Case: 808 | Input/Output: [(67 10 49 36) 10]
Test Case: 809 | Input/Output: [(-94 37 -78 77) -94]
Test Case: 810 | Input/Output: [(-69 -87 -39 13) -87]
Test Case: 811 | Input/Output: [(-79 18 -39 -1) -79]
Test Case: 812 | Input/Output: [(-78 61 -87 75) -87]
Test Case: 813 | Input/Output: [(40 -100 30 58) -100]
Test Case: 814 | Input/Output: [(-94 52 98 100) -94]
Test Case: 815 | Input/Output: [(59 94 29 29) 29]
Test Case: 816 | Input/Output: [(-27 12 -94 -10) -94]
Test Case: 817 | Input/Output: [(29 -34 -83 -92) -92]
Test Case: 818 | Input/Output: [(84 38 -39 -90) -90]
Test Case: 819 | Input/Output: [(-68 -87 32 -34) -87]
Test Case: 820 | Input/Output: [(21 11 71 -19) -19]
Test Case: 821 | Input/Output: [(42 35 -42 27) -42]
Test Case: 822 | Input/Output: [(25 1 -62 100) -62]
Test Case: 823 | Input/Output: [(-12 -9 45 70) -12]
Test Case: 824 | Input/Output: [(25 -38 -54 -7) -54]
Test Case: 825 | Input/Output: [(-73 36 53 60) -73]
Test Case: 826 | Input/Output: [(-38 -80 -26 17) -80]
Test Case: 827 | Input/Output: [(-2 -18 92 38) -18]
Test Case: 828 | Input/Output: [(9 -20 14 -42) -42]
Test Case: 829 | Input/Output: [(-86 4 62 -88) -88]
Test Case: 830 | Input/Output: [(-52 67 -54 -20) -54]
Test Case: 831 | Input/Output: [(27 8 -54 0) -54]
Test Case: 832 | Input/Output: [(-25 -69 40 43) -69]
Test Case: 833 | Input/Output: [(-33 -73 46 -12) -73]
Test Case: 834 | Input/Output: [(-12 -51 12 -87) -87]
Test Case: 835 | Input/Output: [(96 63 -14 -92) -92]
Test Case: 836 | Input/Output: [(-75 2 70 -22) -75]
Test Case: 837 | Input/Output: [(-95 -2 -87 77) -95]
Test Case: 838 | Input/Output: [(18 -93 -56 94) -93]
Test Case: 839 | Input/Output: [(74 -9 100 -80) -80]
Test Case: 840 | Input/Output: [(-31 -25 59 87) -31]
Test Case: 841 | Input/Output: [(-75 17 -91 -36) -91]
Test Case: 842 | Input/Output: [(-78 87 36 68) -78]
Test Case: 843 | Input/Output: [(-29 93 -85 -59) -85]
Test Case: 844 | Input/Output: [(-7 -89 -42 73) -89]
Test Case: 845 | Input/Output: [(-76 31 -25 4) -76]
Test Case: 846 | Input/Output: [(44 60 -5 -77) -77]
Test Case: 847 | Input/Output: [(-80 0 14 -8) -80]
Test Case: 848 | Input/Output: [(-74 -9 -48 -81) -81]
Test Case: 849 | Input/Output: [(47 -71 -58 -5) -71]
Test Case: 850 | Input/Output: [(3 -73 -89 51) -89]
Test Case: 851 | Input/Output: [(-63 89 61 -66) -66]
Test Case: 852 | Input/Output: [(-23 75 -18 -25) -25]
Test Case: 853 | Input/Output: [(31 16 37 -75) -75]
Test Case: 854 | Input/Output: [(44 -42 -3 12) -42]
Test Case: 855 | Input/Output: [(3 -65 -57 6) -65]
Test Case: 856 | Input/Output: [(18 85 76 49) 18]
Test Case: 857 | Input/Output: [(-19 -90 94 62) -90]
Test Case: 858 | Input/Output: [(-58 72 6 -32) -58]
Test Case: 859 | Input/Output: [(15 -78 15 -72) -78]
Test Case: 860 | Input/Output: [(29 67 15 -41) -41]
Test Case: 861 | Input/Output: [(-73 70 37 84) -73]
Test Case: 862 | Input/Output: [(-19 60 89 -16) -19]
Test Case: 863 | Input/Output: [(-94 -91 51 12) -94]
Test Case: 864 | Input/Output: [(51 96 56 5) 5]
Test Case: 865 | Input/Output: [(37 52 -91 59) -91]
Test Case: 866 | Input/Output: [(-57 40 70 96) -57]
Test Case: 867 | Input/Output: [(-3 50 -61 78) -61]
Test Case: 868 | Input/Output: [(100 -86 44 54) -86]
Test Case: 869 | Input/Output: [(28 61 73 -72) -72]
Test Case: 870 | Input/Output: [(94 -48 -60 -81) -81]
Test Case: 871 | Input/Output: [(-82 95 -55 -95) -95]
Test Case: 872 | Input/Output: [(76 -14 -84 94) -84]
Test Case: 873 | Input/Output: [(12 96 -99 -1) -99]
Test Case: 874 | Input/Output: [(-98 90 90 -42) -98]
Test Case: 875 | Input/Output: [(19 -43 -8 -42) -43]
Test Case: 876 | Input/Output: [(25 7 -69 71) -69]
Test Case: 877 | Input/Output: [(6 74 95 25) 6]
Test Case: 878 | Input/Output: [(-12 -17 -39 27) -39]
Test Case: 879 | Input/Output: [(-71 -46 91 39) -71]
Test Case: 880 | Input/Output: [(-77 -30 -24 77) -77]
Test Case: 881 | Input/Output: [(-13 45 -38 57) -38]
Test Case: 882 | Input/Output: [(80 64 -41 63) -41]
Test Case: 883 | Input/Output: [(-66 -62 -70 -13) -70]
Test Case: 884 | Input/Output: [(92 -35 86 59) -35]
Test Case: 885 | Input/Output: [(47 73 -69 -43) -69]
Test Case: 886 | Input/Output: [(98 46 -75 -88) -88]
Test Case: 887 | Input/Output: [(16 96 27 -78) -78]
Test Case: 888 | Input/Output: [(39 55 -95 -85) -95]
Test Case: 889 | Input/Output: [(25 44 -47 87) -47]
Test Case: 890 | Input/Output: [(54 -55 58 92) -55]
Test Case: 891 | Input/Output: [(56 -17 -23 69) -23]
Test Case: 892 | Input/Output: [(76 -1 69 11) -1]
Test Case: 893 | Input/Output: [(-72 71 54 -51) -72]
Test Case: 894 | Input/Output: [(98 8 81 91) 8]
Test Case: 895 | Input/Output: [(70 57 90 -25) -25]
Test Case: 896 | Input/Output: [(-20 40 -39 -1) -39]
Test Case: 897 | Input/Output: [(-71 -45 -79 -1) -79]
Test Case: 898 | Input/Output: [(-64 -99 16 86) -99]
Test Case: 899 | Input/Output: [(-84 0 -41 -98) -98]
Test Case: 900 | Input/Output: [(23 -1 -44 31) -44]
Test Case: 901 | Input/Output: [(-3 -79 -57 -53) -79]
Test Case: 902 | Input/Output: [(91 -43 -3 -36) -43]
Test Case: 903 | Input/Output: [(-30 25 68 95) -30]
Test Case: 904 | Input/Output: [(-61 59 -34 67) -61]
Test Case: 905 | Input/Output: [(85 -53 -45 17) -53]
Test Case: 906 | Input/Output: [(76 -67 96 -89) -89]
Test Case: 907 | Input/Output: [(-48 84 -82 94) -82]
Test Case: 908 | Input/Output: [(-64 79 53 6) -64]
Test Case: 909 | Input/Output: [(-64 -21 -14 27) -64]
Test Case: 910 | Input/Output: [(-77 -40 92 -75) -77]
Test Case: 911 | Input/Output: [(11 52 16 -69) -69]
Test Case: 912 | Input/Output: [(-49 72 -96 75) -96]
Test Case: 913 | Input/Output: [(-83 82 -92 97) -92]
Test Case: 914 | Input/Output: [(9 -41 -74 5) -74]
Test Case: 915 | Input/Output: [(-17 57 85 -30) -30]
Test Case: 916 | Input/Output: [(64 8 -28 -71) -71]
Test Case: 917 | Input/Output: [(84 15 21 80) 15]
Test Case: 918 | Input/Output: [(90 -99 -86 -83) -99]
Test Case: 919 | Input/Output: [(-97 -96 25 93) -97]
Test Case: 920 | Input/Output: [(89 72 -98 -8) -98]
Test Case: 921 | Input/Output: [(60 43 -55 -48) -55]
Test Case: 922 | Input/Output: [(32 91 88 97) 32]
Test Case: 923 | Input/Output: [(-56 33 -83 84) -83]
Test Case: 924 | Input/Output: [(34 99 18 -30) -30]
Test Case: 925 | Input/Output: [(-22 33 -24 -83) -83]
Test Case: 926 | Input/Output: [(-30 7 -12 -99) -99]
Test Case: 927 | Input/Output: [(93 54 95 53) 53]
Test Case: 928 | Input/Output: [(88 12 90 5) 5]
Test Case: 929 | Input/Output: [(96 -61 -50 -13) -61]
Test Case: 930 | Input/Output: [(-41 55 -95 -88) -95]
Test Case: 931 | Input/Output: [(-66 -55 -75 -88) -88]
Test Case: 932 | Input/Output: [(23 -77 54 89) -77]
Test Case: 933 | Input/Output: [(82 -71 62 -82) -82]
Test Case: 934 | Input/Output: [(22 70 -88 64) -88]
Test Case: 935 | Input/Output: [(-84 36 69 94) -84]
Test Case: 936 | Input/Output: [(26 63 20 -8) -8]
Test Case: 937 | Input/Output: [(-33 65 97 0) -33]
Test Case: 938 | Input/Output: [(74 -74 76 -30) -74]
Test Case: 939 | Input/Output: [(3 -75 66 62) -75]
Test Case: 940 | Input/Output: [(-72 15 -49 88) -72]
Test Case: 941 | Input/Output: [(22 2 22 -81) -81]
Test Case: 942 | Input/Output: [(27 44 -41 88) -41]
Test Case: 943 | Input/Output: [(45 -2 51 -3) -3]
Test Case: 944 | Input/Output: [(55 -82 -88 -54) -88]
Test Case: 945 | Input/Output: [(-3 22 -56 -55) -56]
Test Case: 946 | Input/Output: [(83 18 10 -36) -36]
Test Case: 947 | Input/Output: [(-36 58 79 100) -36]
Test Case: 948 | Input/Output: [(82 -7 23 -96) -96]
Test Case: 949 | Input/Output: [(-26 81 -8 2) -26]
Test Case: 950 | Input/Output: [(64 -66 38 79) -66]
Test Case: 951 | Input/Output: [(29 -50 -5 -40) -50]
Test Case: 952 | Input/Output: [(73 61 -54 33) -54]
Test Case: 953 | Input/Output: [(8 -27 -46 -94) -94]
Test Case: 954 | Input/Output: [(-16 -36 -22 -70) -70]
Test Case: 955 | Input/Output: [(15 -97 -15 -17) -97]
Test Case: 956 | Input/Output: [(41 -77 -64 -57) -77]
Test Case: 957 | Input/Output: [(94 4 73 -23) -23]
Test Case: 958 | Input/Output: [(-8 45 -34 -42) -42]
Test Case: 959 | Input/Output: [(-9 61 -70 58) -70]
Test Case: 960 | Input/Output: [(86 -94 -75 -89) -94]
Test Case: 961 | Input/Output: [(74 -54 -98 -98) -98]
Test Case: 962 | Input/Output: [(53 69 -72 -2) -72]
Test Case: 963 | Input/Output: [(66 59 -90 67) -90]
Test Case: 964 | Input/Output: [(49 18 -81 -18) -81]
Test Case: 965 | Input/Output: [(24 -97 40 42) -97]
Test Case: 966 | Input/Output: [(44 49 -81 -82) -82]
Test Case: 967 | Input/Output: [(30 41 -36 1) -36]
Test Case: 968 | Input/Output: [(-21 -24 8 -4) -24]
Test Case: 969 | Input/Output: [(-100 17 51 94) -100]
Test Case: 970 | Input/Output: [(-28 -58 37 66) -58]
Test Case: 971 | Input/Output: [(-51 -72 -5 -95) -95]
Test Case: 972 | Input/Output: [(-13 22 -31 -33) -33]
Test Case: 973 | Input/Output: [(-52 92 -20 69) -52]
Test Case: 974 | Input/Output: [(-67 -59 -54 15) -67]
Test Case: 975 | Input/Output: [(89 -47 -86 -63) -86]
Test Case: 976 | Input/Output: [(80 -89 22 17) -89]
Test Case: 977 | Input/Output: [(84 -71 32 -86) -86]
Test Case: 978 | Input/Output: [(59 -6 95 -24) -24]
Test Case: 979 | Input/Output: [(-12 -47 -75 -86) -86]
Test Case: 980 | Input/Output: [(49 83 -31 -34) -34]
Test Case: 981 | Input/Output: [(-20 57 -29 23) -29]
Test Case: 982 | Input/Output: [(-22 18 -49 94) -49]
Test Case: 983 | Input/Output: [(42 -81 32 24) -81]
Test Case: 984 | Input/Output: [(-40 10 -95 70) -95]
Test Case: 985 | Input/Output: [(4 77 9 9) 4]
Test Case: 986 | Input/Output: [(10 27 -47 -76) -76]
Test Case: 987 | Input/Output: [(-45 93 93 -99) -99]
Test Case: 988 | Input/Output: [(74 29 34 71) 29]
Test Case: 989 | Input/Output: [(-37 -40 13 -37) -40]
Test Case: 990 | Input/Output: [(-88 -36 25 80) -88]
Test Case: 991 | Input/Output: [(-21 24 -7 -100) -100]
Test Case: 992 | Input/Output: [(-65 68 -65 3) -65]
Test Case: 993 | Input/Output: [(74 51 36 58) 36]
Test Case: 994 | Input/Output: [(-77 63 83 6) -77]
Test Case: 995 | Input/Output: [(-16 26 69 -29) -29]
Test Case: 996 | Input/Output: [(79 -24 64 48) -24]
Test Case: 997 | Input/Output: [(-33 5 -91 91) -91]
Test Case: 998 | Input/Output: [(-95 21 86 -57) -95]
Test Case: 999 | Input/Output: [(95 -82 80 57) -82]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x1397b141 clojush.problems.software.smallest$fn__7460@1397b141] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x30b9728f clojush.instructions.tag$tag_instruction_erc$fn__2160@30b9728f] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x453a30f8 clojush.instructions.tag$tagged_instruction_erc$fn__2166@453a30f8] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x29ccab93 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@29ccab93]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x6c49ea0c clojush.problems.software.smallest$smallest_initial_report@6c49ea0c]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x20be793a clojush.problems.software.smallest$smallest_report@20be793a]
random-screen = false
random-seed = -41 56 73 56 -16 62 -61 102 -88 -85 25 1 92 -6 43 -24
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[78 78 78 -53] -53] [[46 63 46 46] 46] [[-85 44 -85 -85] -85] [[96 96 85 96] 85] [[83 83 83 -49] -49] [[55 55 40 55] 40] [[-59 -59 -59 26] -59] [[-5 -5 -69 -5] -69] [[-96 -56 -56 -56] -96] [[-46 -90 -46 -46] -90] [(78 78 78 78) 78] [(-41 -41 -41 -41) -41] [(14 14 14 14) 14] [(81 81 81 81) 81] [(61 61 61 61) 61] [(88 66 51 58) 51] [(76 28 1 68) 1] [(49 37 67 31) 31] [(1 48 28 14) 1] [(5 37 37 4) 4] [(65 48 2 87) 2] [(19 66 46 41) 19] [(41 43 30 18) 18] [(6 72 23 65) 6] [(10 89 95 92) 10] [(12 14 2 9) 2] [(91 12 18 62) 12] [(83 1 30 96) 1] [(59 11 72 71) 11] [(89 51 34 16) 16] [(50 34 43 67) 34] [(87 37 6 20) 6] [(60 94 96 87) 60] [(23 50 97 92) 23] [(71 47 53 57) 47] [(1 42 -92 -20) -92] [(97 -57 72 14) -57] [(60 -48 -86 -5) -86] [(-93 20 29 50) -93] [(29 -82 -11 -86) -86] [(-33 22 -62 -87) -87] [(91 -86 80 -95) -95] [(-8 4 25 38) -8] [(54 12 28 22) 12] [(-64 91 -5 72) -64] [(-73 -77 -27 -9) -77] [(49 -80 -83 -17) -83] [(-19 -84 -71 38) -84] [(81 79 70 -40) -40] [(18 -59 -82 -16) -82] [(-59 -12 -61 53) -61] [(-80 -21 73 43) -80] [(42 89 -66 -44) -66] [(-83 43 21 -64) -83] [(5 -72 -15 -89) -89] [(4 -24 82 -97) -97] [(76 -40 -90 76) -90] [(-9 -94 21 -34) -94] [(-81 46 26 -67) -81] [(60 -32 -46 -35) -46] [(72 -15 20 70) -15] [(100 -3 10 11) -3] [(50 47 -84 -57) -84] [(89 -17 87 18) -17] [(-27 -60 -58 -89) -89] [(0 -5 -4 89) -5] [(41 -24 73 -47) -47] [(-49 68 -20 -89) -89] [(45 -18 -6 -83) -83] [(-81 -35 -77 -81) -81] [(-48 -20 46 -77) -77] [(55 -66 8 20) -66] [(2 13 46 -73) -73] [(-1 -88 21 95) -88] [(55 -97 -8 30) -97] [(65 32 42 -43) -43] [(-59 93 90 86) -59] [(-23 -62 89 16) -62] [(-41 48 41 -40) -41] [(57 75 96 -90) -90] [(84 -31 -97 47) -97] [(-41 -40 37 19) -41] [(-88 -64 -69 24) -88] [(-88 -60 14 73) -88] [(7 85 -42 6) -42] [(98 95 -41 -70) -70] [(63 -75 95 -68) -75] [(90 -94 77 72) -94] [(13 -1 91 11) -1] [(67 -69 -80 91) -80] [(-52 32 87 22) -52] [(-89 40 89 97) -89] [(-76 14 -5 -67) -76] [(24 82 -68 77) -68] [(-5 -99 -84 79) -99])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 63                 
Correct output: -85                 | Program output: 44                 
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 48                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 66                 
Correct output: 18                  | Program output: 43                 
Correct output: 6                   | Program output: 72                 
Correct output: 10                  | Program output: 89                 
Correct output: 2                   | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 94                 
Correct output: 23                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: 20                 
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: 22                 
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: 91                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -12                
Correct output: -80                 | Program output: -21                
Correct output: -66                 | Program output: 89                 
Correct output: -83                 | Program output: 43                 
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 46                 
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: 68                 
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -35                
Correct output: -77                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: 93                 
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: 48                 
Correct output: -90                 | Program output: 75                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -64                
Correct output: -88                 | Program output: -60                
Correct output: -42                 | Program output: 85                 
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: 32                 
Correct output: -89                 | Program output: 40                 
Correct output: -76                 | Program output: 14                 
Correct output: -68                 | Program output: 82                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_boolean_160} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 0, :instruction -96} {:close 0, :instruction tagged_428} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_855} {:close 0, :instruction in4})
Lexicase best program: (boolean_not integer_dup_items integer_swap exec_yankdup integer_max integer_flush exec_k_when_autoconstructing (boolean_stackdepth) (in2 print_integer) boolean_stackdepth integer_mult exec_k_when_autoconstructing (exec_dup_times (boolean_dup boolean_yankdup boolean_pop integer_fromboolean) integer_inc exec_do*times (boolean_invert_second_then_and exec_s_when_autoconstructing (tag_boolean_160 boolean_dup) (integer_empty boolean_stackdepth integer_dup_items exec_swap (boolean_and integer_lt integer_swap) (exec_do*count () exec_empty integer_stackdepth exec_rot (integer_pop integer_yank integer_gte integer_flush boolean_xor) (boolean_pop) (integer_pop) integer_pop exec_noop exec_dup_times (exec_pop (boolean_empty boolean_invert_first_then_and boolean_rot boolean_dup boolean_rot boolean_dup exec_y_when_autoconstructing () exec_k (exec_k_when_autoconstructing (integer_min boolean_or) (boolean_stackdepth boolean_eq) exec_when (boolean_stackdepth exec_do*count (integer_gt) integer_mult integer_gt exec_yankdup exec_do*range (exec_y (integer_gt exec_flush integer_div boolean_yank boolean_dup_items boolean_and integer_flush in4 boolean_swap) print_newline -96 tagged_428 integer_shove integer_dup_items) exec_dup_items integer_dup_items) exec_eq in1 boolean_and) (integer_sub print_boolean exec_if (boolean_xor tagged_855 in4) ()))))) ())) ())
Lexicase best errors: [0 1 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 122
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_boolean_160} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 0, :instruction -96} {:close 0, :instruction tagged_428} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_855} {:close 0, :instruction in4})
Zero cases best program: (boolean_not integer_dup_items integer_swap exec_yankdup integer_max integer_flush exec_k_when_autoconstructing (boolean_stackdepth) (in2 print_integer) boolean_stackdepth integer_mult exec_k_when_autoconstructing (exec_dup_times (boolean_dup boolean_yankdup boolean_pop integer_fromboolean) integer_inc exec_do*times (boolean_invert_second_then_and exec_s_when_autoconstructing (tag_boolean_160 boolean_dup) (integer_empty boolean_stackdepth integer_dup_items exec_swap (boolean_and integer_lt integer_swap) (exec_do*count () exec_empty integer_stackdepth exec_rot (integer_pop integer_yank integer_gte integer_flush boolean_xor) (boolean_pop) (integer_pop) integer_pop exec_noop exec_dup_times (exec_pop (boolean_empty boolean_invert_first_then_and boolean_rot boolean_dup boolean_rot boolean_dup exec_y_when_autoconstructing () exec_k (exec_k_when_autoconstructing (integer_min boolean_or) (boolean_stackdepth boolean_eq) exec_when (boolean_stackdepth exec_do*count (integer_gt) integer_mult integer_gt exec_yankdup exec_do*range (exec_y (integer_gt exec_flush integer_div boolean_yank boolean_dup_items boolean_and integer_flush in4 boolean_swap) print_newline -96 tagged_428 integer_shove integer_dup_items) exec_dup_items integer_dup_items) exec_eq in1 boolean_and) (integer_sub print_boolean exec_if (boolean_xor tagged_855 in4) ()))))) ())) ())
Zero cases best errors: [0 1 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 122
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 5 5 2 3 3 4 2 4 4)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (4 5 5 2 3 3 4 2 4 4)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_523} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_integer_13} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction exec_pop})
Best program: (integer_mod boolean_frominteger exec_while (tagged_523 boolean_frominteger) integer_sub exec_stackdepth integer_flush exec_dup_items exec_yank integer_gte exec_k (exec_pop (in3 integer_lt exec_do*count (exec_swap (integer_stackdepth) () exec_noop boolean_dup_times print_boolean integer_mod integer_swap boolean_flush integer_sub boolean_frominteger tag_integer_13) boolean_invert_first_then_and in3) in2 integer_div boolean_yankdup exec_do*range (print_integer integer_inc boolean_yankdup exec_dup (boolean_yank integer_swap integer_div exec_while () exec_empty boolean_flush integer_dup integer_add) boolean_and exec_swap (exec_y_when_autoconstructing (integer_lt integer_swap integer_pop)) (exec_do*while (exec_k () (exec_do*range (integer_mod) integer_add integer_dup boolean_pop integer_div) exec_if (in2 boolean_or exec_rot () (exec_do*range (integer_yankdup) exec_yank integer_lt exec_noop exec_empty integer_dec exec_flush exec_s (exec_dup () exec_empty exec_y_when_autoconstructing (exec_when () exec_pop ())) () ()) ()) ())))) ())
Errors: [0 1 1 1 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 77
Size: 108
Percent parens: 0.287
--- Population Statistics ---
Average total errors in population: 9.964
Median total errors in population: 10
Error averages by case: (0.996 0.995 0.995 0.998 0.997 0.997 0.996 0.998 0.996 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.428
Average program size in population (points): 68.409
Average percent parens in population: 0.284
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 441789
--- Timings ---
Current time: 1559314347267 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.7 seconds, 26.9%
Fitness Testing:      1.9 seconds, 69.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 63                 
Correct output: -85                 | Program output: 44                 
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 48                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 66                 
Correct output: 18                  | Program output: 43                 
Correct output: 6                   | Program output: 72                 
Correct output: 10                  | Program output: 89                 
Correct output: 2                   | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 94                 
Correct output: 23                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: 20                 
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: 22                 
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: 91                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -12                
Correct output: -80                 | Program output: -21                
Correct output: -66                 | Program output: 89                 
Correct output: -83                 | Program output: 43                 
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 46                 
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: 68                 
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -35                
Correct output: -77                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: 93                 
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: 48                 
Correct output: -90                 | Program output: 75                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -64                
Correct output: -88                 | Program output: -60                
Correct output: -42                 | Program output: 85                 
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: 32                 
Correct output: -89                 | Program output: 40                 
Correct output: -76                 | Program output: 14                 
Correct output: -68                 | Program output: 82                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_973} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_boolean_990} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty})
Lexicase best program: (integer_inc in4 boolean_invert_first_then_and integer_sub exec_s (in3 exec_y_when_autoconstructing (print_integer exec_k_when_autoconstructing (boolean_eq boolean_eq tag_boolean_973) (integer_dup_items exec_dup_times (integer_empty) exec_pop (tag_boolean_990 exec_do*times (integer_gte integer_shove) exec_swap (boolean_pop in1 in2) (boolean_invert_first_then_and integer_lt integer_yankdup boolean_empty))))) () ())
Lexicase best errors: [0 1 0 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_973} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_boolean_990} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty})
Zero cases best program: (integer_inc in4 boolean_invert_first_then_and integer_sub exec_s (in3 exec_y_when_autoconstructing (print_integer exec_k_when_autoconstructing (boolean_eq boolean_eq tag_boolean_973) (integer_dup_items exec_dup_times (integer_empty) exec_pop (tag_boolean_990 exec_do*times (integer_gte integer_shove) exec_swap (boolean_pop in1 in2) (boolean_invert_first_then_and integer_lt integer_yankdup boolean_empty))))) () ())
Zero cases best errors: [0 1 0 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (843 343 548 344 105 344 105 602 289 290)
Population mean number of elite cases: 3.81
Count of perfect (error zero) individuals by case: (843 343 548 344 105 344 105 602 289 290)
Population mean number of perfect (error zero) cases: 3.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction print_newline} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2})
Best program: (boolean_dup_items integer_pop integer_pop exec_dup_items boolean_swap integer_inc boolean_shove integer_rot integer_swap integer_add in2 print_integer integer_sub integer_shove integer_sub integer_min exec_do*while (integer_lte integer_stackdepth integer_rot) exec_flush integer_mod integer_mod boolean_and integer_dup_items exec_eq exec_empty boolean_shove integer_dup_times integer_gt print_newline exec_do*while (exec_k_when_autoconstructing (exec_yank integer_eq boolean_swap boolean_stackdepth) (exec_k (exec_k_when_autoconstructing (exec_rot (integer_lt exec_yank exec_shove () in1) (integer_sub) (boolean_invert_second_then_and integer_empty exec_dup_times (integer_max) exec_y_when_autoconstructing (integer_add exec_y (integer_gte boolean_eq integer_mod exec_shove ()) boolean_pop) boolean_dup_times integer_div) exec_yankdup exec_stackdepth) (exec_k (integer_rot integer_empty boolean_yank integer_lt exec_k (exec_pop (exec_do*times () integer_yank integer_rot integer_div integer_inc exec_if (integer_gte boolean_frominteger boolean_rot exec_stackdepth boolean_frominteger exec_do*times (exec_s (exec_eq) (print_integer in4 boolean_empty integer_dec) (exec_do*range (integer_dup_times boolean_or integer_div integer_sub) exec_s_when_autoconstructing (exec_yank integer_div boolean_dup_times exec_stackdepth exec_do*times (boolean_yank boolean_eq in2)) () ()))) ())) ()) ())) ())))
Errors: [0 0 1 0 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 100
Size: 134
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 6.187
Median total errors in population: 6
Error averages by case: (0.157 0.657 0.452 0.656 0.895 0.656 0.895 0.398 0.711 0.71)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.402
Average program size in population (points): 75.999
Average percent parens in population: 0.273
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.475
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1049693
--- Timings ---
Current time: 1559314350100 milliseconds
Total Time:           5.8 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.4 seconds, 40.9%
Fitness Testing:      2.8 seconds, 48.2%
Report:               0.5 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 63                 
Correct output: -85                 | Program output: 44                 
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 48                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 66                 
Correct output: 18                  | Program output: 43                 
Correct output: 6                   | Program output: 72                 
Correct output: 10                  | Program output: 89                 
Correct output: 2                   | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 94                 
Correct output: 23                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: 20                 
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: 22                 
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: 91                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -12                
Correct output: -80                 | Program output: -21                
Correct output: -66                 | Program output: 89                 
Correct output: -83                 | Program output: 43                 
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 46                 
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: 68                 
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -35                
Correct output: -77                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: 93                 
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: 48                 
Correct output: -90                 | Program output: 75                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -64                
Correct output: -88                 | Program output: -60                
Correct output: -42                 | Program output: 85                 
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: 32                 
Correct output: -89                 | Program output: 40                 
Correct output: -76                 | Program output: 14                 
Correct output: -68                 | Program output: 82                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dec})
Lexicase best program: (exec_noop boolean_yankdup integer_lte exec_eq exec_stackdepth print_boolean integer_div exec_s_when_autoconstructing (integer_yankdup) (in2 boolean_pop integer_dup print_integer) (exec_do*count (exec_eq integer_shove exec_flush integer_yank integer_dup_items integer_dec)))
Lexicase best errors: [1 1 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dec})
Zero cases best program: (exec_noop boolean_yankdup integer_lte exec_eq exec_stackdepth print_boolean integer_div exec_s_when_autoconstructing (integer_yankdup) (in2 boolean_pop integer_dup print_integer) (exec_do*count (exec_eq integer_shove exec_flush integer_yank integer_dup_items integer_dec)))
Zero cases best errors: [1 1 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (317 317 318 318 317 318 318 275 2 317)
Population mean number of elite cases: 2.82
Count of perfect (error zero) individuals by case: (317 317 318 318 317 318 318 275 2 317)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction print_newline} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction 100} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction -77} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction -3} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_111} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4})
Best program: (boolean_dup_items integer_pop integer_pop exec_dup_items boolean_swap integer_inc boolean_shove integer_rot integer_swap integer_add in2 print_integer integer_sub integer_shove integer_sub integer_min exec_do*while (integer_lte integer_stackdepth integer_rot) exec_flush integer_mod integer_mod boolean_and integer_dup_items exec_eq exec_empty boolean_shove integer_dup_times integer_gt print_newline exec_do*while (exec_k_when_autoconstructing (exec_yank integer_eq boolean_swap boolean_swap exec_dup () exec_yankdup integer_sub) (boolean_xor exec_do*range (integer_yankdup boolean_rot) integer_lt exec_dup_times () exec_when (boolean_invert_second_then_and integer_inc 100 exec_s_when_autoconstructing (boolean_xor) (boolean_rot integer_stackdepth exec_do*range () exec_flush exec_shove (print_exec (exec_dup_items) exec_y (exec_yankdup print_boolean boolean_flush exec_do*times () exec_dup () boolean_yankdup boolean_yank boolean_or boolean_yankdup) in2) integer_max boolean_invert_second_then_and exec_empty) (exec_dup_items -77) boolean_eq exec_do*while () boolean_swap exec_flush integer_dec) print_exec (integer_lt integer_min exec_pop (boolean_dup_items exec_s_when_autoconstructing (print_newline exec_s_when_autoconstructing (boolean_swap -3 boolean_shove exec_dup_times () exec_if (tag_exec_111 () integer_gte exec_y (boolean_yank in4)) ()) () ()) () ())))))
Errors: [1 1 0 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 98
Size: 130
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 7.183
Median total errors in population: 7
Error averages by case: (0.683 0.683 0.682 0.682 0.683 0.682 0.682 0.725 0.998 0.683)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.311
Average program size in population (points): 66.188
Average percent parens in population: 0.272
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0225
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1612749
--- Timings ---
Current time: 1559314353332 milliseconds
Total Time:           9.0 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.6 seconds, 50.5%
Fitness Testing:      3.6 seconds, 39.4%
Report:               0.8 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop})
Lexicase best program: (exec_noop integer_rot in3 print_integer integer_gte integer_mult integer_dup_items exec_swap (boolean_frominteger boolean_flush boolean_flush exec_shove (integer_gte exec_y_when_autoconstructing (exec_flush exec_shove (integer_pop boolean_swap integer_flush integer_gte boolean_pop)))) ())
Lexicase best errors: [0 0 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop})
Zero cases best program: (exec_noop integer_rot in3 print_integer integer_gte integer_mult integer_dup_items exec_swap (boolean_frominteger boolean_flush boolean_flush exec_shove (integer_gte exec_y_when_autoconstructing (exec_flush exec_shove (integer_pop boolean_swap integer_flush integer_gte boolean_pop)))) ())
Zero cases best errors: [0 0 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (293 293 838 102 102 102 1000 443 293 293)
Population mean number of elite cases: 3.76
Count of perfect (error zero) individuals by case: (293 293 838 102 102 102 0 443 293 293)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_973} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty})
Best program: (integer_inc in4 boolean_invert_first_then_and integer_sub exec_s (in3 exec_y_when_autoconstructing (print_integer exec_k_when_autoconstructing (boolean_eq boolean_eq tag_boolean_973) (integer_dup_items exec_dup_times (integer_empty) integer_dup integer_yank exec_do*times (integer_gte integer_shove) exec_swap (boolean_pop exec_yank in2) (boolean_invert_first_then_and integer_lt integer_yankdup boolean_empty)))) () ())
Errors: [0 0 0 1 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 39
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 7.241
Median total errors in population: 8
Error averages by case: (0.707 0.707 0.162 0.898 0.898 0.898 1.0 0.557 0.707 0.707)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 46.241
Average program size in population (points): 62.825
Average percent parens in population: 0.257
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.6175
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2040072
--- Timings ---
Current time: 1559314356230 milliseconds
Total Time:          11.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.6 seconds, 55.9%
Fitness Testing:      4.1 seconds, 34.5%
Report:               1.0 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: 26                 
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 58                 
Correct output: 1                   | Program output: 68                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 87                 
Correct output: 19                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 65                 
Correct output: 10                  | Program output: 92                 
Correct output: 2                   | Program output: 9                  
Correct output: 12                  | Program output: 62                 
Correct output: 1                   | Program output: 96                 
Correct output: 11                  | Program output: 71                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 67                 
Correct output: 6                   | Program output: 20                 
Correct output: 60                  | Program output: 87                 
Correct output: 23                  | Program output: 92                 
Correct output: 47                  | Program output: 57                 
Correct output: -92                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -86                 | Program output: -5                 
Correct output: -93                 | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: 38                 
Correct output: 12                  | Program output: 22                 
Correct output: -64                 | Program output: 72                 
Correct output: -77                 | Program output: -9                 
Correct output: -83                 | Program output: -17                
Correct output: -84                 | Program output: 38                 
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -16                
Correct output: -61                 | Program output: 53                 
Correct output: -80                 | Program output: 43                 
Correct output: -66                 | Program output: -44                
Correct output: -83                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 76                 
Correct output: -94                 | Program output: -34                
Correct output: -81                 | Program output: -67                
Correct output: -46                 | Program output: -35                
Correct output: -15                 | Program output: 70                 
Correct output: -3                  | Program output: 11                 
Correct output: -84                 | Program output: -57                
Correct output: -17                 | Program output: 18                 
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: 89                 
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: 20                 
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 95                 
Correct output: -97                 | Program output: 30                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: 86                 
Correct output: -62                 | Program output: 16                 
Correct output: -41                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: 47                 
Correct output: -41                 | Program output: 19                 
Correct output: -88                 | Program output: 24                 
Correct output: -88                 | Program output: 73                 
Correct output: -42                 | Program output: 6                  
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -68                
Correct output: -94                 | Program output: 72                 
Correct output: -1                  | Program output: 11                 
Correct output: -80                 | Program output: 91                 
Correct output: -52                 | Program output: 22                 
Correct output: -89                 | Program output: 97                 
Correct output: -76                 | Program output: -67                
Correct output: -68                 | Program output: 77                 
Correct output: -99                 | Program output: 79                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_do*count () in4 integer_lt integer_mod print_integer in1 exec_yank exec_y (boolean_empty) exec_rot (exec_noop boolean_swap) (print_integer boolean_empty integer_yank exec_s_when_autoconstructing () () ()) ())
Lexicase best errors: [1 1 0 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 25
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_do*count () in4 integer_lt integer_mod print_integer in1 exec_yank exec_y (boolean_empty) exec_rot (exec_noop boolean_swap) (print_integer boolean_empty integer_yank exec_s_when_autoconstructing () () ()) ())
Zero cases best errors: [1 1 0 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 25
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 441 377 118 1000 1000 378 1000 117 441)
Population mean number of elite cases: 5.87
Count of perfect (error zero) individuals by case: (0 441 377 118 0 0 378 0 117 441)
Population mean number of perfect (error zero) cases: 1.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction tag_integer_347} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction 100} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot})
Best program: (exec_when (boolean_yank in3) in4 print_integer integer_max integer_shove integer_dup_times integer_mult boolean_xor integer_stackdepth print_boolean integer_sub in2 exec_y (exec_y_when_autoconstructing (exec_noop exec_s (exec_dup_items boolean_shove exec_y (boolean_xor tag_integer_347) tag_integer_829 exec_flush in4) (boolean_yank exec_dup_items boolean_and exec_while (integer_lt integer_dup_items) exec_pop (boolean_rot exec_noop integer_fromboolean) exec_yank exec_dup (boolean_swap exec_dup () exec_yankdup integer_sub) boolean_xor) (exec_do*count (integer_yankdup boolean_rot integer_lt exec_dup_times () exec_when (boolean_invert_second_then_and integer_inc 100 exec_s_when_autoconstructing (boolean_xor boolean_rot integer_stackdepth exec_do*range () exec_flush exec_shove (print_exec (exec_dup_items) exec_y (exec_yankdup print_boolean boolean_flush exec_do*times () exec_dup () boolean_yankdup exec_rot () () ()))) () ()))))))
Errors: [1 1 0 1 1 1 0 1 1 1]
Total: 8
Mean: 0.8
Genome size: 69
Size: 96
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 8.128
Median total errors in population: 8
Error averages by case: (1.0 0.559 0.623 0.882 1.0 1.0 0.622 1.0 0.883 0.559)
Error minima by case: (1 0 0 0 1 1 0 1 0 0)
Average genome size in population (length): 38.77
Average program size in population (points): 53.622
Average percent parens in population: 0.282
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.048625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.003
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2669769
--- Timings ---
Current time: 1559314359954 milliseconds
Total Time:          15.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.8 seconds, 58.3%
Fitness Testing:      4.8 seconds, 32.2%
Report:               1.3 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: 26                 
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 58                 
Correct output: 1                   | Program output: 68                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 87                 
Correct output: 19                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 65                 
Correct output: 10                  | Program output: 92                 
Correct output: 2                   | Program output: 9                  
Correct output: 12                  | Program output: 62                 
Correct output: 1                   | Program output: 96                 
Correct output: 11                  | Program output: 71                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 67                 
Correct output: 6                   | Program output: 20                 
Correct output: 60                  | Program output: 87                 
Correct output: 23                  | Program output: 92                 
Correct output: 47                  | Program output: 57                 
Correct output: -92                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -86                 | Program output: -5                 
Correct output: -93                 | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: 38                 
Correct output: 12                  | Program output: 22                 
Correct output: -64                 | Program output: 72                 
Correct output: -77                 | Program output: -9                 
Correct output: -83                 | Program output: -17                
Correct output: -84                 | Program output: 38                 
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -16                
Correct output: -61                 | Program output: 53                 
Correct output: -80                 | Program output: 43                 
Correct output: -66                 | Program output: -44                
Correct output: -83                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 76                 
Correct output: -94                 | Program output: -34                
Correct output: -81                 | Program output: -67                
Correct output: -46                 | Program output: -35                
Correct output: -15                 | Program output: 70                 
Correct output: -3                  | Program output: 11                 
Correct output: -84                 | Program output: -57                
Correct output: -17                 | Program output: 18                 
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: 89                 
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: 20                 
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 95                 
Correct output: -97                 | Program output: 30                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: 86                 
Correct output: -62                 | Program output: 16                 
Correct output: -41                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: 47                 
Correct output: -41                 | Program output: 19                 
Correct output: -88                 | Program output: 24                 
Correct output: -88                 | Program output: 73                 
Correct output: -42                 | Program output: 6                  
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -68                
Correct output: -94                 | Program output: 72                 
Correct output: -1                  | Program output: 11                 
Correct output: -80                 | Program output: 91                 
Correct output: -52                 | Program output: 22                 
Correct output: -89                 | Program output: 97                 
Correct output: -76                 | Program output: -67                
Correct output: -68                 | Program output: 77                 
Correct output: -99                 | Program output: 79                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_do*count () in4 integer_lt integer_mod print_integer in1 exec_yank exec_y (boolean_empty) exec_rot (exec_noop boolean_swap) (print_integer boolean_empty integer_yank exec_s_when_autoconstructing () () ()) ())
Lexicase best errors: [1 0 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_do*count () in4 integer_lt integer_mod print_integer in1 exec_yank exec_y (boolean_empty) exec_rot (exec_noop boolean_swap) (print_integer boolean_empty integer_yank exec_s_when_autoconstructing () () ()) ())
Zero cases best errors: [1 0 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 922 318 307 307 319 1000 625 319 300)
Population mean number of elite cases: 5.42
Count of perfect (error zero) individuals by case: (0 922 318 307 307 319 0 625 319 300)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop})
Best program: (exec_when (boolean_yank in3) in4 print_integer integer_max integer_shove integer_dup_times integer_mult boolean_xor integer_stackdepth print_boolean integer_sub in2 exec_y (exec_y_when_autoconstructing (exec_noop exec_s (exec_dup_items boolean_shove exec_y (boolean_xor boolean_pop)) () ())))
Errors: [1 0 0 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 31
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.583
Median total errors in population: 6
Error averages by case: (1.0 0.078 0.682 0.693 0.693 0.681 1.0 0.375 0.681 0.7)
Error minima by case: (1 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 41.644
Average program size in population (points): 56.891
Average percent parens in population: 0.269
Minimum age in population: 5.0
Maximum age in population: 9.5
Average age in population: 7.555875
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3245315
--- Timings ---
Current time: 1559314363225 milliseconds
Total Time:          18.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.7 seconds, 57.9%
Fitness Testing:      5.5 seconds, 29.6%
Report:               2.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 63                 
Correct output: -85                 | Program output: 44                 
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 48                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 66                 
Correct output: 18                  | Program output: 43                 
Correct output: 6                   | Program output: 72                 
Correct output: 10                  | Program output: 89                 
Correct output: 2                   | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 94                 
Correct output: 23                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: 20                 
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: 22                 
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: 91                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -12                
Correct output: -80                 | Program output: -21                
Correct output: -66                 | Program output: 89                 
Correct output: -83                 | Program output: 43                 
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 46                 
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: 68                 
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -35                
Correct output: -77                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: 93                 
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: 48                 
Correct output: -90                 | Program output: 75                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -64                
Correct output: -88                 | Program output: -60                
Correct output: -42                 | Program output: 85                 
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: 32                 
Correct output: -89                 | Program output: 40                 
Correct output: -76                 | Program output: 14                 
Correct output: -68                 | Program output: 82                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items exec_swap (boolean_frominteger boolean_flush boolean_flush exec_shove (integer_gte exec_y_when_autoconstructing (exec_flush exec_shove (integer_pop boolean_swap integer_flush integer_gte boolean_pop)))) ())
Lexicase best errors: [1 1 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items exec_swap (boolean_frominteger boolean_flush boolean_flush exec_shove (integer_gte exec_y_when_autoconstructing (exec_flush exec_shove (integer_pop boolean_swap integer_flush integer_gte boolean_pop)))) ())
Zero cases best errors: [1 1 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (116 509 1000 314 314 314 1000 508 116 116)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (116 509 0 314 314 314 0 508 116 116)
Population mean number of perfect (error zero) cases: 2.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_boolean_160} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction -13} {:close 0, :instruction exec_dup_items} {:close 1, :instruction -77} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction -3} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_111} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4})
Best program: (boolean_dup_items integer_pop integer_pop exec_dup_items boolean_swap integer_inc boolean_shove integer_rot integer_swap integer_add in2 print_integer exec_dup_times (boolean_dup boolean_yankdup boolean_pop integer_fromboolean) integer_inc exec_do*times (boolean_invert_second_then_and exec_s_when_autoconstructing (tag_boolean_160 exec_yankdup) (integer_empty boolean_stackdepth integer_dup_items exec_swap (boolean_and integer_lt integer_swap) (exec_do*count () exec_empty integer_stackdepth exec_rot (integer_pop integer_yank integer_gte integer_flush exec_while (integer_fromboolean) exec_yank exec_dup (boolean_swap exec_dup () exec_yankdup integer_sub) exec_dup_times () exec_when (boolean_invert_second_then_and integer_inc boolean_xor) boolean_rot integer_stackdepth exec_do*range () exec_flush exec_shove (print_exec (exec_dup_items) exec_y (exec_yankdup print_boolean boolean_flush exec_do*times () exec_dup () boolean_yankdup boolean_yank boolean_or boolean_yankdup) in2 integer_max) boolean_invert_second_then_and -13) (exec_dup_items -77) (boolean_eq exec_do*while () boolean_swap exec_flush integer_dec) print_exec (integer_lt exec_s_when_autoconstructing (print_newline exec_s_when_autoconstructing (boolean_flush -3 boolean_shove exec_dup_times () exec_if (tag_exec_111 () integer_gte exec_y (boolean_yank in4)) ()) () ()) () ()))) ()))
Errors: [0 1 1 1 1 1 1 1 0 0]
Total: 7
Mean: 0.7
Genome size: 94
Size: 130
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 7.693
Median total errors in population: 8
Error averages by case: (0.884 0.491 1.0 0.686 0.686 0.686 1.0 0.492 0.884 0.884)
Error minima by case: (0 0 1 0 0 0 1 0 0 0)
Average genome size in population (length): 35.638
Average program size in population (points): 49.14
Average percent parens in population: 0.281
Minimum age in population: 6.0
Maximum age in population: 10.9375
Average age in population: 9.0484375
Median age in population: 9.09375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3928684
--- Timings ---
Current time: 1559314366468 milliseconds
Total Time:          22.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.9 seconds, 58.3%
Fitness Testing:      6.2 seconds, 28.2%
Report:               2.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop})
Lexicase best program: (exec_noop exec_shove (exec_do*count () in4 integer_rot) in3 print_integer integer_gte integer_mult integer_dup_items boolean_dup_items boolean_frominteger boolean_flush boolean_flush exec_shove (integer_gte exec_y_when_autoconstructing (exec_flush exec_shove (integer_pop boolean_swap integer_flush integer_gte boolean_pop))))
Lexicase best errors: [0 1 1 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 30
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop})
Zero cases best program: (exec_noop exec_shove (exec_do*count () in4 integer_rot) in3 print_integer integer_gte integer_mult integer_dup_items boolean_dup_items boolean_frominteger boolean_flush boolean_flush exec_shove (integer_gte exec_y_when_autoconstructing (exec_flush exec_shove (integer_pop boolean_swap integer_flush integer_gte boolean_pop))))
Zero cases best errors: [0 1 1 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 30
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (361 243 318 361 318 361 1000 1000 361 318)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (361 243 318 361 318 361 0 0 361 318)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction tag_integer_347} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count})
Best program: (exec_when (boolean_yank in3) boolean_eq print_integer integer_max integer_shove integer_dup_times integer_mult boolean_xor integer_stackdepth print_boolean integer_sub in2 exec_y (exec_y_when_autoconstructing (exec_noop exec_s (exec_dup_items boolean_shove exec_y (boolean_xor tag_integer_347) tag_integer_829 exec_flush in4) (boolean_yank exec_dup_items boolean_and exec_while (integer_lt integer_dup_items) exec_pop (boolean_rot exec_while (integer_fromboolean) exec_yank exec_dup (boolean_swap exec_dup () exec_yankdup integer_sub) boolean_xor exec_do*count ())) ())))
Errors: [0 1 1 0 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 44
Size: 58
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 7.359
Median total errors in population: 7
Error averages by case: (0.639 0.757 0.682 0.639 0.682 0.639 1.0 1.0 0.639 0.682)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 36.824
Average program size in population (points): 50.398
Average percent parens in population: 0.268
Minimum age in population: 7.0
Maximum age in population: 12.53125
Average age in population: 10.51503125
Median age in population: 10.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4427828
--- Timings ---
Current time: 1559314370566 milliseconds
Total Time:          25.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.5 seconds, 60.7%
Fitness Testing:      6.8 seconds, 26.6%
Report:               3.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: 26                 
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 58                 
Correct output: 1                   | Program output: 68                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 87                 
Correct output: 19                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 65                 
Correct output: 10                  | Program output: 92                 
Correct output: 2                   | Program output: 9                  
Correct output: 12                  | Program output: 62                 
Correct output: 1                   | Program output: 96                 
Correct output: 11                  | Program output: 71                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 67                 
Correct output: 6                   | Program output: 20                 
Correct output: 60                  | Program output: 87                 
Correct output: 23                  | Program output: 92                 
Correct output: 47                  | Program output: 57                 
Correct output: -92                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -86                 | Program output: -5                 
Correct output: -93                 | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: 38                 
Correct output: 12                  | Program output: 22                 
Correct output: -64                 | Program output: 72                 
Correct output: -77                 | Program output: -9                 
Correct output: -83                 | Program output: -17                
Correct output: -84                 | Program output: 38                 
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -16                
Correct output: -61                 | Program output: 53                 
Correct output: -80                 | Program output: 43                 
Correct output: -66                 | Program output: -44                
Correct output: -83                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 76                 
Correct output: -94                 | Program output: -34                
Correct output: -81                 | Program output: -67                
Correct output: -46                 | Program output: -35                
Correct output: -15                 | Program output: 70                 
Correct output: -3                  | Program output: 11                 
Correct output: -84                 | Program output: -57                
Correct output: -17                 | Program output: 18                 
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: 89                 
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: 20                 
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 95                 
Correct output: -97                 | Program output: 30                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: 86                 
Correct output: -62                 | Program output: 16                 
Correct output: -41                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: 47                 
Correct output: -41                 | Program output: 19                 
Correct output: -88                 | Program output: 24                 
Correct output: -88                 | Program output: 73                 
Correct output: -42                 | Program output: 6                  
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -68                
Correct output: -94                 | Program output: 72                 
Correct output: -1                  | Program output: 11                 
Correct output: -80                 | Program output: 91                 
Correct output: -52                 | Program output: 22                 
Correct output: -89                 | Program output: 97                 
Correct output: -76                 | Program output: -67                
Correct output: -68                 | Program output: 77                 
Correct output: -99                 | Program output: 79                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction tag_integer_347} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_times})
Lexicase best program: (exec_when (boolean_yank in3 in4 print_integer integer_max integer_shove integer_dup_times integer_mult boolean_xor integer_stackdepth print_boolean integer_sub in2) exec_y (exec_y_when_autoconstructing (exec_noop) exec_s (exec_dup_items exec_k (exec_y (boolean_xor tag_integer_347) tag_integer_829 exec_flush in4) (boolean_yank exec_dup_items boolean_and exec_while (integer_lt integer_dup_items) exec_pop (boolean_rot exec_while (integer_fromboolean) exec_yank exec_dup (boolean_swap exec_dup () exec_yankdup integer_sub boolean_xor exec_do*count (integer_yankdup boolean_rot integer_lt exec_dup_times ()))))) () ()))
Lexicase best errors: [0 0 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 65
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction tag_integer_347} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_times})
Zero cases best program: (exec_when (boolean_yank in3 in4 print_integer integer_max integer_shove integer_dup_times integer_mult boolean_xor integer_stackdepth print_boolean integer_sub in2) exec_y (exec_y_when_autoconstructing (exec_noop) exec_s (exec_dup_items exec_k (exec_y (boolean_xor tag_integer_347) tag_integer_829 exec_flush in4) (boolean_yank exec_dup_items boolean_and exec_while (integer_lt integer_dup_items) exec_pop (boolean_rot exec_while (integer_fromboolean) exec_yank exec_dup (boolean_swap exec_dup () exec_yankdup integer_sub boolean_xor exec_do*count (integer_yankdup boolean_rot integer_lt exec_dup_times ()))))) () ()))
Zero cases best errors: [0 0 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 65
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (946 118 476 117 118 476 352 944 118 1000)
Population mean number of elite cases: 4.66
Count of perfect (error zero) individuals by case: (946 118 476 117 118 476 352 944 118 0)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction tag_integer_347} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_times})
Best program: (exec_when (boolean_yank in3) in4 print_integer integer_max integer_shove integer_dup_times integer_mult boolean_xor integer_stackdepth print_boolean integer_div in2 exec_y (exec_y_when_autoconstructing (exec_noop exec_s (exec_dup_items integer_rot exec_y (boolean_xor tag_integer_347) tag_integer_829 exec_flush in4) (boolean_yank exec_dup_items boolean_and exec_while (integer_lt integer_dup_items) exec_pop (boolean_rot exec_while (integer_fromboolean) exec_yank exec_dup (boolean_swap exec_dup () exec_eq integer_sub) boolean_xor exec_do*count (integer_yankdup boolean_rot) integer_lt exec_dup_times ())) ())))
Errors: [0 0 1 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 48
Size: 63
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.335
Median total errors in population: 6
Error averages by case: (0.054 0.882 0.524 0.883 0.882 0.524 0.648 0.056 0.882 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 37.039
Average program size in population (points): 50.487
Average percent parens in population: 0.264
Minimum age in population: 9.0
Maximum age in population: 13.921875
Average age in population: 11.9128359375
Median age in population: 11.94921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4844781
--- Timings ---
Current time: 1559314373877 milliseconds
Total Time:          29.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.5 seconds, 60.5%
Fitness Testing:      7.3 seconds, 25.2%
Report:               4.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 63                 
Correct output: -85                 | Program output: 44                 
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 48                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 66                 
Correct output: 18                  | Program output: 43                 
Correct output: 6                   | Program output: 72                 
Correct output: 10                  | Program output: 89                 
Correct output: 2                   | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 94                 
Correct output: 23                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: 20                 
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: 22                 
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: 91                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -12                
Correct output: -80                 | Program output: -21                
Correct output: -66                 | Program output: 89                 
Correct output: -83                 | Program output: 43                 
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 46                 
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: 68                 
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -35                
Correct output: -77                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: 93                 
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: 48                 
Correct output: -90                 | Program output: 75                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -64                
Correct output: -88                 | Program output: -60                
Correct output: -42                 | Program output: 85                 
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: 32                 
Correct output: -89                 | Program output: 40                 
Correct output: -76                 | Program output: 14                 
Correct output: -68                 | Program output: 82                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_boolean_160} {:close 1, :instruction integer_swap})
Lexicase best program: (boolean_not integer_dup_items integer_swap exec_yankdup integer_max integer_flush exec_k_when_autoconstructing (boolean_stackdepth) (in2 print_integer) boolean_stackdepth integer_mult exec_k_when_autoconstructing (exec_dup_times (boolean_dup boolean_yankdup boolean_pop integer_fromboolean) integer_inc integer_div boolean_invert_second_then_and exec_s_when_autoconstructing (tag_boolean_160 integer_swap) () ()) ())
Lexicase best errors: [1 0 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_boolean_160} {:close 1, :instruction integer_swap})
Zero cases best program: (boolean_not integer_dup_items integer_swap exec_yankdup integer_max integer_flush exec_k_when_autoconstructing (boolean_stackdepth) (in2 print_integer) boolean_stackdepth integer_mult exec_k_when_autoconstructing (exec_dup_times (boolean_dup boolean_yankdup boolean_pop integer_fromboolean) integer_inc integer_div boolean_invert_second_then_and exec_s_when_autoconstructing (tag_boolean_160 integer_swap) () ()) ())
Zero cases best errors: [1 0 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (533 125 272 1 534 272 126 533 125 399)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (533 125 272 1 534 272 126 533 125 399)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (boolean_not integer_dup_items integer_swap exec_yankdup integer_max integer_flush exec_k_when_autoconstructing (boolean_stackdepth) (in2 print_integer) boolean_stackdepth integer_mult exec_k_when_autoconstructing (exec_dup_times (boolean_dup boolean_yankdup exec_yankdup exec_do*range () integer_inc exec_do*times (boolean_swap) print_integer exec_pop (integer_yank exec_s_when_autoconstructing () () ()))) ())
Errors: [1 0 1 1 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 25
Size: 37
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 7.08
Median total errors in population: 7
Error averages by case: (0.467 0.875 0.728 0.999 0.466 0.728 0.874 0.467 0.875 0.601)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.292
Average program size in population (points): 42.931
Average percent parens in population: 0.277
Minimum age in population: 10.5546875
Maximum age in population: 15.55078125
Average age in population: 13.41421484375
Median age in population: 13.4765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5482677
--- Timings ---
Current time: 1559314376626 milliseconds
Total Time:          32.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.4 seconds, 59.8%
Fitness Testing:      8.0 seconds, 24.8%
Report:               4.9 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 88                 
Correct output: 1                   | Program output: 76                 
Correct output: 31                  | Program output: 49                 
Correct output: 1                   | Program output: 114                
Correct output: 4                   | Program output: 5                  
Correct output: 2                   | Program output: 65                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 12                 
Correct output: 12                  | Program output: 91                 
Correct output: 1                   | Program output: 83                 
Correct output: 11                  | Program output: 59                 
Correct output: 16                  | Program output: 89                 
Correct output: 34                  | Program output: 50                 
Correct output: 6                   | Program output: 87                 
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 71                 
Correct output: -92                 | Program output: 1-20               
Correct output: -57                 | Program output: 97                 
Correct output: -86                 | Program output: 60                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: 29                 
Correct output: -87                 | Program output: -33                
Correct output: -95                 | Program output: 91                 
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 54                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -73                
Correct output: -83                 | Program output: 49                 
Correct output: -84                 | Program output: -19                
Correct output: -40                 | Program output: 81                 
Correct output: -82                 | Program output: 18                 
Correct output: -61                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: 42                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 5                  
Correct output: -97                 | Program output: 4-97               
Correct output: -90                 | Program output: 76                 
Correct output: -94                 | Program output: -9                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 60                 
Correct output: -15                 | Program output: 72                 
Correct output: -3                  | Program output: 100                
Correct output: -84                 | Program output: 50                 
Correct output: -17                 | Program output: 89                 
Correct output: -89                 | Program output: -27                
Correct output: -5                  | Program output: 0                  
Correct output: -47                 | Program output: 41                 
Correct output: -89                 | Program output: -49                
Correct output: -83                 | Program output: 45                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -48                
Correct output: -66                 | Program output: 55                 
Correct output: -73                 | Program output: 2                  
Correct output: -88                 | Program output: -1                 
Correct output: -97                 | Program output: 55                 
Correct output: -43                 | Program output: 65                 
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 57                 
Correct output: -97                 | Program output: 84                 
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: 7                  
Correct output: -70                 | Program output: 98                 
Correct output: -75                 | Program output: 63                 
Correct output: -94                 | Program output: 90                 
Correct output: -1                  | Program output: 13                 
Correct output: -80                 | Program output: 67                 
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: 24                 
Correct output: -99                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_do*count () in4 integer_lt in1 print_integer in1 exec_yank exec_y (boolean_empty) exec_rot (exec_noop boolean_swap) (print_integer boolean_empty integer_yank exec_s_when_autoconstructing () () ()) ())
Lexicase best errors: [1 1 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_do*count () in4 integer_lt in1 print_integer in1 exec_yank exec_y (boolean_empty) exec_rot (exec_noop boolean_swap) (print_integer boolean_empty integer_yank exec_s_when_autoconstructing () () ()) ())
Zero cases best errors: [1 1 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 221 126 325 126 125 950 325 125 325)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (221 221 126 325 126 125 950 325 125 325)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (exec_do*count () in4 integer_lt in1 print_integer in1 exec_yank exec_y (boolean_empty) exec_rot (exec_noop boolean_swap) (print_integer boolean_empty integer_yank exec_s_when_autoconstructing () () ()) ())
Errors: [1 1 0 1 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 16
Size: 25
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 7.131
Median total errors in population: 7
Error averages by case: (0.779 0.779 0.874 0.675 0.874 0.875 0.05 0.675 0.875 0.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.227
Average program size in population (points): 42.904
Average percent parens in population: 0.278
Minimum age in population: 11.84375
Maximum age in population: 17.2890625
Average age in population: 14.82073828125
Median age in population: 14.859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6069781
--- Timings ---
Current time: 1559314380062 milliseconds
Total Time:          35.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.6 seconds, 60.9%
Fitness Testing:      8.7 seconds, 24.5%
Report:               5.1 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 88                 
Correct output: 1                   | Program output: 76                 
Correct output: 31                  | Program output: 49                 
Correct output: 1                   | Program output: 114                
Correct output: 4                   | Program output: 5                  
Correct output: 2                   | Program output: 65                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 12                 
Correct output: 12                  | Program output: 91                 
Correct output: 1                   | Program output: 83                 
Correct output: 11                  | Program output: 59                 
Correct output: 16                  | Program output: 89                 
Correct output: 34                  | Program output: 50                 
Correct output: 6                   | Program output: 87                 
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 71                 
Correct output: -92                 | Program output: 1-20               
Correct output: -57                 | Program output: 97                 
Correct output: -86                 | Program output: 60                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: 29                 
Correct output: -87                 | Program output: -33                
Correct output: -95                 | Program output: 91                 
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 54                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -73                
Correct output: -83                 | Program output: 49                 
Correct output: -84                 | Program output: -19                
Correct output: -40                 | Program output: 81                 
Correct output: -82                 | Program output: 18                 
Correct output: -61                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: 42                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 5                  
Correct output: -97                 | Program output: 4-97               
Correct output: -90                 | Program output: 76                 
Correct output: -94                 | Program output: -9                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 60                 
Correct output: -15                 | Program output: 72                 
Correct output: -3                  | Program output: 100                
Correct output: -84                 | Program output: 50                 
Correct output: -17                 | Program output: 89                 
Correct output: -89                 | Program output: -27                
Correct output: -5                  | Program output: 0                  
Correct output: -47                 | Program output: 41                 
Correct output: -89                 | Program output: -49                
Correct output: -83                 | Program output: 45                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -48                
Correct output: -66                 | Program output: 55                 
Correct output: -73                 | Program output: 2                  
Correct output: -88                 | Program output: -1                 
Correct output: -97                 | Program output: 55                 
Correct output: -43                 | Program output: 65                 
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 57                 
Correct output: -97                 | Program output: 84                 
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: 7                  
Correct output: -70                 | Program output: 98                 
Correct output: -75                 | Program output: 63                 
Correct output: -94                 | Program output: 90                 
Correct output: -1                  | Program output: 13                 
Correct output: -80                 | Program output: 67                 
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: 24                 
Correct output: -99                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_do*count () in4 integer_lt in1 print_integer in1 exec_yank exec_y (boolean_empty) exec_rot (exec_noop boolean_swap) (print_integer boolean_empty integer_yank exec_s_when_autoconstructing () () ()) ())
Lexicase best errors: [1 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 25
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_do*count () in4 integer_lt in1 print_integer in1 exec_yank exec_y (boolean_empty) exec_rot (exec_noop boolean_swap) (print_integer boolean_empty integer_yank exec_s_when_autoconstructing () () ()) ())
Zero cases best errors: [1 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 25
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 419 420 419 427 312 419 419 8 959)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (219 419 420 419 427 312 419 419 8 959)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty})
Best program: (exec_do*count () in4 integer_lt in1 print_integer in1 exec_yank exec_y (boolean_empty) exec_rot (exec_noop boolean_swap) (print_integer boolean_empty integer_dup_items exec_while (integer_empty)) ())
Errors: [1 0 0 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 17
Size: 24
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 5.979
Median total errors in population: 8
Error averages by case: (0.781 0.581 0.58 0.581 0.573 0.688 0.581 0.581 0.992 0.041)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.765
Average program size in population (points): 37.725
Average percent parens in population: 0.301
Minimum age in population: 14.01171875
Maximum age in population: 18.3837890625
Average age in population: 16.2460595703125
Median age in population: 16.2958984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 274
Genome diversity (% unique genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 285
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6722116
--- Timings ---
Current time: 1559314383578 milliseconds
Total Time:          38.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.8 seconds, 61.0%
Fitness Testing:      9.4 seconds, 24.2%
Report:               5.6 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_boolean_113} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_973} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty})
Lexicase best program: (integer_inc in4 boolean_invert_first_then_and tag_boolean_113 exec_s (in3 exec_y_when_autoconstructing (print_integer exec_k_when_autoconstructing (boolean_eq boolean_eq tag_boolean_973) (integer_dup_items exec_dup_times (integer_empty)))) () ())
Lexicase best errors: [0 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 23
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_boolean_113} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_973} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty})
Zero cases best program: (integer_inc in4 boolean_invert_first_then_and tag_boolean_113 exec_s (in3 exec_y_when_autoconstructing (print_integer exec_k_when_autoconstructing (boolean_eq boolean_eq tag_boolean_973) (integer_dup_items exec_dup_times (integer_empty)))) () ())
Zero cases best errors: [0 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 23
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (114 126 114 114 126 101 126 101 615 114)
Population mean number of elite cases: 1.65
Count of perfect (error zero) individuals by case: (114 126 114 114 126 101 126 101 615 114)
Population mean number of perfect (error zero) cases: 1.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_973} {:close 0, :instruction integer_dup_items})
Best program: (integer_inc in4 boolean_invert_first_then_and integer_sub exec_s (in3 exec_y_when_autoconstructing (print_integer exec_k_when_autoconstructing (boolean_eq boolean_eq tag_boolean_973) (integer_dup_items))) () ())
Errors: [0 1 0 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 13
Size: 20
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 8.349
Median total errors in population: 9
Error averages by case: (0.886 0.874 0.886 0.886 0.874 0.899 0.874 0.899 0.385 0.886)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.683
Average program size in population (points): 31.839
Average percent parens in population: 0.330
Minimum age in population: 15.162109375
Maximum age in population: 19.62255859375
Average age in population: 17.7178173828125
Median age in population: 17.7451171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 313
Genome diversity (% unique genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 337
Syntactic diversity (% unique Push programs):	 0.449
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 7570830
--- Timings ---
Current time: 1559314386534 milliseconds
Total Time:          42.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.6 seconds, 60.5%
Fitness Testing:     10.4 seconds, 24.5%
Report:               6.2 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 63                 
Correct output: -85                 | Program output: 44                 
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 48                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 66                 
Correct output: 18                  | Program output: 43                 
Correct output: 6                   | Program output: 72                 
Correct output: 10                  | Program output: 89                 
Correct output: 2                   | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 94                 
Correct output: 23                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: 20                 
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: 22                 
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: 91                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -12                
Correct output: -80                 | Program output: -21                
Correct output: -66                 | Program output: 89                 
Correct output: -83                 | Program output: 43                 
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 46                 
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: 68                 
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -35                
Correct output: -77                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: 93                 
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: 48                 
Correct output: -90                 | Program output: 75                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -64                
Correct output: -88                 | Program output: -60                
Correct output: -42                 | Program output: 85                 
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: 32                 
Correct output: -89                 | Program output: 40                 
Correct output: -76                 | Program output: 14                 
Correct output: -68                 | Program output: 82                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_dup_items integer_pop integer_pop exec_dup_items boolean_swap integer_gte boolean_shove integer_rot integer_swap integer_add in2 print_integer integer_sub integer_shove integer_sub integer_min exec_do*while (integer_lte integer_fromboolean integer_rot) exec_flush integer_swap exec_do*count () exec_empty integer_stackdepth exec_rot (integer_pop integer_yank integer_gte integer_flush boolean_xor) (boolean_pop) (integer_pop) exec_y (exec_noop integer_dup_times exec_pop (boolean_xor boolean_invert_first_then_and boolean_rot integer_max boolean_rot boolean_dup exec_y_when_autoconstructing () exec_k (exec_k_when_autoconstructing (integer_min boolean_or) (boolean_stackdepth)) ())))
Lexicase best errors: [0 1 1 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 62
Percent parens: 0.210
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_dup_items integer_pop integer_pop exec_dup_items boolean_swap integer_gte boolean_shove integer_rot integer_swap integer_add in2 print_integer integer_sub integer_shove integer_sub integer_min exec_do*while (integer_lte integer_fromboolean integer_rot) exec_flush integer_swap exec_do*count () exec_empty integer_stackdepth exec_rot (integer_pop integer_yank integer_gte integer_flush boolean_xor) (boolean_pop) (integer_pop) exec_y (exec_noop integer_dup_times exec_pop (boolean_xor boolean_invert_first_then_and boolean_rot integer_max boolean_rot boolean_dup exec_y_when_autoconstructing () exec_k (exec_k_when_autoconstructing (integer_min boolean_or) (boolean_stackdepth)) ())))
Zero cases best errors: [0 1 1 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 62
Percent parens: 0.210
--- Lexicase Population Statistics ---
Count of elite individuals by case: (183 371 89 300 939 301 183 89 183 371)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (183 371 89 300 939 301 183 89 183 371)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (exec_noop boolean_yankdup in2 exec_y_when_autoconstructing (print_integer exec_k_when_autoconstructing (print_integer boolean_empty integer_yank exec_s_when_autoconstructing () () ()) ()))
Errors: [0 1 1 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 10
Size: 17
Percent parens: 0.412
--- Population Statistics ---
Average total errors in population: 6.991
Median total errors in population: 7
Error averages by case: (0.817 0.629 0.911 0.7 0.061 0.699 0.817 0.911 0.817 0.629)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.215
Average program size in population (points): 37.108
Average percent parens in population: 0.302
Minimum age in population: 16.330078125
Maximum age in population: 21.181884765625
Average age in population: 19.39926171875
Median age in population: 19.463134765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 8146715
--- Timings ---
Current time: 1559314389470 milliseconds
Total Time:          45.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.7 seconds, 61.3%
Fitness Testing:     11.0 seconds, 24.4%
Report:               6.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 63                 
Correct output: -85                 | Program output: 44                 
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 48                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 66                 
Correct output: 18                  | Program output: 43                 
Correct output: 6                   | Program output: 72                 
Correct output: 10                  | Program output: 89                 
Correct output: 2                   | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 94                 
Correct output: 23                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: 20                 
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: 22                 
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: 91                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -12                
Correct output: -80                 | Program output: -21                
Correct output: -66                 | Program output: 89                 
Correct output: -83                 | Program output: 43                 
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 46                 
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: 68                 
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -35                
Correct output: -77                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: 93                 
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: 48                 
Correct output: -90                 | Program output: 75                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -64                
Correct output: -88                 | Program output: -60                
Correct output: -42                 | Program output: 85                 
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: 32                 
Correct output: -89                 | Program output: 40                 
Correct output: -76                 | Program output: 14                 
Correct output: -68                 | Program output: 82                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_boolean_160} {:close 1, :instruction integer_swap})
Lexicase best program: (boolean_not integer_dup_items integer_swap exec_yankdup integer_max integer_flush exec_k_when_autoconstructing (boolean_stackdepth) (in2 print_integer) boolean_stackdepth integer_mult exec_k_when_autoconstructing (exec_dup_times (boolean_eq boolean_yankdup boolean_pop integer_fromboolean) integer_inc exec_do*times (boolean_invert_second_then_and exec_s_when_autoconstructing (tag_boolean_160 integer_swap) () ())) ())
Lexicase best errors: [1 1 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 34
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_boolean_160} {:close 1, :instruction integer_swap})
Zero cases best program: (boolean_not integer_dup_items integer_swap exec_yankdup integer_max integer_flush exec_k_when_autoconstructing (boolean_stackdepth) (in2 print_integer) boolean_stackdepth integer_mult exec_k_when_autoconstructing (exec_dup_times (boolean_eq boolean_yankdup boolean_pop integer_fromboolean) integer_inc exec_do*times (boolean_invert_second_then_and exec_s_when_autoconstructing (tag_boolean_160 integer_swap) () ())) ())
Zero cases best errors: [1 1 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 34
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (204 207 299 207 204 207 204 299 299 300)
Population mean number of elite cases: 2.43
Count of perfect (error zero) individuals by case: (204 207 299 207 204 207 204 299 299 300)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_523} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_integer_13} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_mod})
Best program: (integer_mod boolean_frominteger exec_while (tagged_523 integer_swap) integer_sub exec_stackdepth integer_flush exec_dup_items exec_yank integer_gte exec_k (exec_pop (in3 integer_lt exec_do*count (exec_swap (integer_stackdepth) () exec_noop boolean_dup_times print_boolean integer_mod integer_swap boolean_flush integer_sub boolean_frominteger tag_integer_13) boolean_and in3) in2 integer_div boolean_yankdup exec_do*range (print_integer integer_inc boolean_yankdup exec_dup (boolean_yank integer_swap integer_div exec_while () exec_empty boolean_flush integer_dup integer_inc) boolean_and exec_swap (exec_y_when_autoconstructing (integer_lt integer_swap integer_pop)) (exec_do*while (integer_shove) exec_do*range (integer_mod)))) ())
Errors: [1 1 0 1 1 1 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 55
Size: 71
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 7.57
Median total errors in population: 7
Error averages by case: (0.796 0.793 0.701 0.793 0.796 0.793 0.796 0.701 0.701 0.7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.496
Average program size in population (points): 34.589
Average percent parens in population: 0.299
Minimum age in population: 17.630859375
Maximum age in population: 22.552001953125
Average age in population: 20.84958264160156
Median age in population: 20.90777587890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 8750060
--- Timings ---
Current time: 1559314392527 milliseconds
Total Time:          48.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.8 seconds, 61.9%
Fitness Testing:     11.7 seconds, 24.3%
Report:               6.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_boolean_113} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_973} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_inc in4 boolean_invert_first_then_and tag_boolean_113 exec_s (in3 exec_y_when_autoconstructing (print_integer exec_k_when_autoconstructing (boolean_eq boolean_eq tag_boolean_973) (integer_dup_items exec_dup_times (exec_y_when_autoconstructing ())))) () ())
Lexicase best errors: [1 1 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 24
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_boolean_113} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_973} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_inc in4 boolean_invert_first_then_and tag_boolean_113 exec_s (in3 exec_y_when_autoconstructing (print_integer exec_k_when_autoconstructing (boolean_eq boolean_eq tag_boolean_973) (integer_dup_items exec_dup_times (exec_y_when_autoconstructing ())))) () ())
Zero cases best errors: [1 1 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 24
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (143 278 307 362 308 2 307 2 307 279)
Population mean number of elite cases: 2.30
Count of perfect (error zero) individuals by case: (143 278 307 362 308 2 307 2 307 279)
Population mean number of perfect (error zero) cases: 2.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_973} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_990} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop})
Best program: (integer_inc in4 boolean_shove integer_sub exec_s (in3 exec_y_when_autoconstructing (print_integer exec_k_when_autoconstructing (boolean_eq boolean_eq tag_boolean_973) (integer_div exec_dup_times (integer_empty) integer_dup tag_boolean_990 exec_do*times (integer_gte integer_shove) exec_eq integer_shove) exec_flush integer_yank boolean_dup boolean_yankdup boolean_pop)) () ())
Errors: [1 1 0 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 27
Size: 36
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.705
Median total errors in population: 8
Error averages by case: (0.857 0.722 0.693 0.638 0.692 0.998 0.693 0.998 0.693 0.721)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.359
Average program size in population (points): 33.73
Average percent parens in population: 0.283
Minimum age in population: 18.630859375
Maximum age in population: 24.0386962890625
Average age in population: 22.35185852050781
Median age in population: 22.41537475585938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 9288444
--- Timings ---
Current time: 1559314395681 milliseconds
Total Time:          51.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.1 seconds, 62.5%
Fitness Testing:     12.3 seconds, 24.0%
Report:               6.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 88                 
Correct output: 1                   | Program output: 76                 
Correct output: 31                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 5                  
Correct output: 2                   | Program output: 65                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 12                 
Correct output: 12                  | Program output: 91                 
Correct output: 1                   | Program output: 83                 
Correct output: 11                  | Program output: 59                 
Correct output: 16                  | Program output: 89                 
Correct output: 34                  | Program output: 50                 
Correct output: 6                   | Program output: 87                 
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 71                 
Correct output: -92                 | Program output: 1                  
Correct output: -57                 | Program output: 97                 
Correct output: -86                 | Program output: 60                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: 29                 
Correct output: -87                 | Program output: -33                
Correct output: -95                 | Program output: 91                 
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 54                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -73                
Correct output: -83                 | Program output: 49                 
Correct output: -84                 | Program output: -19                
Correct output: -40                 | Program output: 81                 
Correct output: -82                 | Program output: 18                 
Correct output: -61                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: 42                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 5                  
Correct output: -97                 | Program output: 4                  
Correct output: -90                 | Program output: 76                 
Correct output: -94                 | Program output: -9                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 60                 
Correct output: -15                 | Program output: 72                 
Correct output: -3                  | Program output: 100                
Correct output: -84                 | Program output: 50                 
Correct output: -17                 | Program output: 89                 
Correct output: -89                 | Program output: -27                
Correct output: -5                  | Program output: 0                  
Correct output: -47                 | Program output: 41                 
Correct output: -89                 | Program output: -49                
Correct output: -83                 | Program output: 45                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -48                
Correct output: -66                 | Program output: 55                 
Correct output: -73                 | Program output: 2                  
Correct output: -88                 | Program output: -1                 
Correct output: -97                 | Program output: 55                 
Correct output: -43                 | Program output: 65                 
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 57                 
Correct output: -97                 | Program output: 84                 
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: 7                  
Correct output: -70                 | Program output: 98                 
Correct output: -75                 | Program output: 63                 
Correct output: -94                 | Program output: 90                 
Correct output: -1                  | Program output: 13                 
Correct output: -80                 | Program output: 67                 
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: 24                 
Correct output: -99                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_do*count () in4 integer_lt in1 print_integer in1 exec_yank exec_y (boolean_empty) exec_rot (in1 print_integer) (boolean_empty integer_yank exec_s_when_autoconstructing () () ()) ())
Lexicase best errors: [1 0 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_do*count () in4 integer_lt in1 print_integer in1 exec_yank exec_y (boolean_empty) exec_rot (in1 print_integer) (boolean_empty integer_yank exec_s_when_autoconstructing () () ()) ())
Zero cases best errors: [1 0 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (390 352 942 93 93 840 254 200 388 254)
Population mean number of elite cases: 3.81
Count of perfect (error zero) individuals by case: (390 352 942 93 93 840 254 200 388 254)
Population mean number of perfect (error zero) cases: 3.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (exec_do*count () in4 integer_lt in1 print_integer boolean_dup_times exec_yank exec_y (boolean_empty) exec_rot (exec_noop boolean_swap) (print_integer boolean_empty integer_yank exec_s_when_autoconstructing () () ()) ())
Errors: [1 0 0 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 16
Size: 25
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 6.194
Median total errors in population: 6
Error averages by case: (0.61 0.648 0.058 0.907 0.907 0.16 0.746 0.8 0.612 0.746)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.073
Average program size in population (points): 31.789
Average percent parens in population: 0.315
Minimum age in population: 19.630859375
Maximum age in population: 25.71307373046875
Average age in population: 23.93540594482422
Median age in population: 24.02670288085938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.547
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 9765773
--- Timings ---
Current time: 1559314399177 milliseconds
Total Time:          54.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.4 seconds, 63.1%
Fitness Testing:     12.9 seconds, 23.6%
Report:               7.1 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: 26                 
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 58                 
Correct output: 1                   | Program output: 68                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 87                 
Correct output: 19                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 65                 
Correct output: 10                  | Program output: 92                 
Correct output: 2                   | Program output: 9                  
Correct output: 12                  | Program output: 62                 
Correct output: 1                   | Program output: 96                 
Correct output: 11                  | Program output: 71                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 67                 
Correct output: 6                   | Program output: 20                 
Correct output: 60                  | Program output: 87                 
Correct output: 23                  | Program output: 92                 
Correct output: 47                  | Program output: 57                 
Correct output: -92                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -86                 | Program output: -5                 
Correct output: -93                 | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: 38                 
Correct output: 12                  | Program output: 22                 
Correct output: -64                 | Program output: 72                 
Correct output: -77                 | Program output: -9                 
Correct output: -83                 | Program output: -17                
Correct output: -84                 | Program output: 38                 
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -16                
Correct output: -61                 | Program output: 53                 
Correct output: -80                 | Program output: 43                 
Correct output: -66                 | Program output: -44                
Correct output: -83                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 76                 
Correct output: -94                 | Program output: -34                
Correct output: -81                 | Program output: -67                
Correct output: -46                 | Program output: -35                
Correct output: -15                 | Program output: 70                 
Correct output: -3                  | Program output: 11                 
Correct output: -84                 | Program output: -57                
Correct output: -17                 | Program output: 18                 
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: 89                 
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: 20                 
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 95                 
Correct output: -97                 | Program output: 30                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: 86                 
Correct output: -62                 | Program output: 16                 
Correct output: -41                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: 47                 
Correct output: -41                 | Program output: 19                 
Correct output: -88                 | Program output: 24                 
Correct output: -88                 | Program output: 73                 
Correct output: -42                 | Program output: 6                  
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -68                
Correct output: -94                 | Program output: 72                 
Correct output: -1                  | Program output: 11                 
Correct output: -80                 | Program output: 91                 
Correct output: -52                 | Program output: 22                 
Correct output: -89                 | Program output: 97                 
Correct output: -76                 | Program output: -67                
Correct output: -68                 | Program output: 77                 
Correct output: -99                 | Program output: 79                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (integer_inc in4 boolean_invert_first_then_and integer_sub exec_s (print_integer boolean_empty integer_yank exec_s_when_autoconstructing () () ()) () ())
Lexicase best errors: [1 1 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 16
Percent parens: 0.438
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (integer_inc in4 boolean_invert_first_then_and integer_sub exec_s (print_integer boolean_empty integer_yank exec_s_when_autoconstructing () () ()) () ())
Zero cases best errors: [1 1 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 16
Percent parens: 0.438
--- Lexicase Population Statistics ---
Count of elite individuals by case: (246 343 121 234 121 234 234 121 121 246)
Population mean number of elite cases: 2.02
Count of perfect (error zero) individuals by case: (246 343 121 234 121 234 234 121 121 246)
Population mean number of perfect (error zero) cases: 2.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_919} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_990} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_shove})
Best program: (integer_inc in4 boolean_invert_first_then_and integer_sub exec_s (in3 boolean_dup_items print_integer exec_k_when_autoconstructing (boolean_eq boolean_eq tag_boolean_919) (integer_dup_items exec_dup_times (exec_rot () (integer_dup tag_boolean_990 exec_k_when_autoconstructing (integer_shove) ()) ()))) () ())
Errors: [1 1 0 1 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 19
Size: 31
Percent parens: 0.387
--- Population Statistics ---
Average total errors in population: 7.979
Median total errors in population: 8
Error averages by case: (0.754 0.657 0.879 0.766 0.879 0.766 0.766 0.879 0.879 0.754)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.837
Average program size in population (points): 30.985
Average percent parens in population: 0.302
Minimum age in population: 22.93115234375
Maximum age in population: 27.10134887695312
Average age in population: 25.42866386413574
Median age in population: 25.52833557128906
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 10259683
--- Timings ---
Current time: 1559314402171 milliseconds
Total Time:          57.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.6 seconds, 63.3%
Fitness Testing:     13.5 seconds, 23.2%
Report:               7.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 63                 
Correct output: -85                 | Program output: 44                 
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 48                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 66                 
Correct output: 18                  | Program output: 43                 
Correct output: 6                   | Program output: 72                 
Correct output: 10                  | Program output: 89                 
Correct output: 2                   | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 94                 
Correct output: 23                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: 20                 
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: 22                 
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: 91                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -12                
Correct output: -80                 | Program output: -21                
Correct output: -66                 | Program output: 89                 
Correct output: -83                 | Program output: 43                 
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 46                 
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: 68                 
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -35                
Correct output: -77                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: 93                 
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: 48                 
Correct output: -90                 | Program output: 75                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -64                
Correct output: -88                 | Program output: -60                
Correct output: -42                 | Program output: 85                 
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: 32                 
Correct output: -89                 | Program output: 40                 
Correct output: -76                 | Program output: 14                 
Correct output: -68                 | Program output: 82                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_mod integer_pop integer_pop exec_dup_items boolean_swap integer_inc boolean_shove integer_rot integer_swap integer_add in2 print_integer integer_sub integer_shove integer_yank integer_min exec_do*while (integer_stackdepth integer_rot) exec_flush integer_mod integer_mod exec_flush integer_dup_items exec_eq exec_empty boolean_shove integer_dup_times integer_mult print_newline boolean_or exec_k_when_autoconstructing () ())
Lexicase best errors: [1 0 1 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.111
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_mod integer_pop integer_pop exec_dup_items boolean_swap integer_inc boolean_shove integer_rot integer_swap integer_add in2 print_integer integer_sub integer_shove integer_yank integer_min exec_do*while (integer_stackdepth integer_rot) exec_flush integer_mod integer_mod exec_flush integer_dup_items exec_eq exec_empty boolean_shove integer_dup_times integer_mult print_newline boolean_or exec_k_when_autoconstructing () ())
Zero cases best errors: [1 0 1 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (368 932 368 180 302 301 180 302 181 85)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (368 932 368 180 302 301 180 302 181 85)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tag_boolean_990} {:close 0, :instruction exec_do*times} {:close 0, :instruction 55} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_empty})
Best program: (integer_inc in4 integer_lte integer_sub exec_s (in3 integer_flush exec_k_when_autoconstructing (boolean_stackdepth) (in2 print_integer) boolean_stackdepth integer_mult exec_k_when_autoconstructing (exec_dup_times (tag_boolean_990 exec_do*times (55 exec_swap (boolean_and integer_lt integer_swap) (exec_do*count () integer_rot integer_stackdepth exec_rot (integer_pop integer_yank integer_gte integer_flush boolean_empty) () ())))) ()) () ())
Errors: [1 0 1 1 0 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 47
Percent parens: 0.340
--- Population Statistics ---
Average total errors in population: 6.801
Median total errors in population: 7
Error averages by case: (0.632 0.068 0.632 0.82 0.698 0.699 0.82 0.698 0.819 0.915)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.865
Average program size in population (points): 31.311
Average percent parens in population: 0.311
Minimum age in population: 23.99267578125
Maximum age in population: 28.95941162109375
Average age in population: 26.90289746856689
Median age in population: 27.0087776184082
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 10572181
--- Timings ---
Current time: 1559314404937 milliseconds
Total Time:          60.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.9 seconds, 64.0%
Fitness Testing:     13.8 seconds, 22.8%
Report:               7.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 63                 
Correct output: -85                 | Program output: 44                 
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 48                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 66                 
Correct output: 18                  | Program output: 43                 
Correct output: 6                   | Program output: 72                 
Correct output: 10                  | Program output: 89                 
Correct output: 2                   | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 94                 
Correct output: 23                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: 20                 
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: 22                 
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: 91                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -12                
Correct output: -80                 | Program output: -21                
Correct output: -66                 | Program output: 89                 
Correct output: -83                 | Program output: 43                 
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 46                 
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: 68                 
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -35                
Correct output: -77                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: 93                 
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: 48                 
Correct output: -90                 | Program output: 75                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -64                
Correct output: -88                 | Program output: -60                
Correct output: -42                 | Program output: 85                 
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: 32                 
Correct output: -89                 | Program output: 40                 
Correct output: -76                 | Program output: 14                 
Correct output: -68                 | Program output: 82                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction tag_exec_489} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop})
Lexicase best program: (exec_do*count () in4 integer_lt in1 print_integer in1 exec_yank exec_y (boolean_empty) integer_yankdup in2 boolean_pop integer_dup tag_exec_489 () integer_gte boolean_pop)
Lexicase best errors: [1 1 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction tag_exec_489} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop})
Zero cases best program: (exec_do*count () in4 integer_lt in1 print_integer in1 exec_yank exec_y (boolean_empty) integer_yankdup in2 boolean_pop integer_dup tag_exec_489 () integer_gte boolean_pop)
Zero cases best errors: [1 1 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (324 309 230 964 309 332 102 309 101 229)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (324 309 230 964 309 332 102 309 101 229)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_boolean_160} {:close 1, :instruction integer_swap})
Best program: (boolean_not integer_dup_items integer_swap exec_yankdup integer_max integer_flush exec_k_when_autoconstructing (boolean_stackdepth in2 print_integer boolean_stackdepth integer_mult exec_k_when_autoconstructing (exec_dup_times (boolean_dup boolean_yankdup boolean_pop exec_do*range () integer_inc integer_div boolean_invert_second_then_and exec_s_when_autoconstructing (tag_boolean_160 integer_swap) () ())) ()) ())
Errors: [1 0 1 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 24
Size: 34
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 6.791
Median total errors in population: 6
Error averages by case: (0.676 0.691 0.77 0.036 0.691 0.668 0.898 0.691 0.899 0.771)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.265
Average program size in population (points): 31.647
Average percent parens in population: 0.303
Minimum age in population: 24.99267578125
Maximum age in population: 30.17749404907227
Average age in population: 28.34357633972168
Median age in population: 28.38665008544922
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 10926490
--- Timings ---
Current time: 1559314407653 milliseconds
Total Time:          63.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.0 seconds, 64.7%
Fitness Testing:     14.2 seconds, 22.4%
Report:               8.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 63                 
Correct output: -85                 | Program output: 44                 
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 48                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 66                 
Correct output: 18                  | Program output: 43                 
Correct output: 6                   | Program output: 72                 
Correct output: 10                  | Program output: 89                 
Correct output: 2                   | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 94                 
Correct output: 23                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: 20                 
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: 22                 
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: 91                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -12                
Correct output: -80                 | Program output: -21                
Correct output: -66                 | Program output: 89                 
Correct output: -83                 | Program output: 43                 
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 46                 
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: 68                 
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -35                
Correct output: -77                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: 93                 
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: 48                 
Correct output: -90                 | Program output: 75                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -64                
Correct output: -88                 | Program output: -60                
Correct output: -42                 | Program output: 85                 
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: 32                 
Correct output: -89                 | Program output: 40                 
Correct output: -76                 | Program output: 14                 
Correct output: -68                 | Program output: 82                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_shove})
Lexicase best program: (integer_inc in4 boolean_invert_first_then_and integer_sub exec_noop in2 boolean_pop integer_dup print_integer exec_do*count (exec_eq integer_shove))
Lexicase best errors: [0 0 1 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 14
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_shove})
Zero cases best program: (integer_inc in4 boolean_invert_first_then_and integer_sub exec_noop in2 boolean_pop integer_dup print_integer exec_do*count (exec_eq integer_shove))
Zero cases best errors: [0 0 1 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 14
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (325 325 94 240 325 286 325 325 94 94)
Population mean number of elite cases: 2.43
Count of perfect (error zero) individuals by case: (325 325 94 240 325 286 325 325 94 94)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_990} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1})
Best program: (boolean_not integer_dup_items integer_swap exec_yankdup integer_max integer_flush exec_k_when_autoconstructing (boolean_stackdepth) (in2 print_integer boolean_stackdepth integer_mult exec_k_when_autoconstructing (exec_dup_times (boolean_dup) integer_shove boolean_pop integer_dup tag_boolean_990 exec_k_when_autoconstructing (integer_shove) (exec_swap (boolean_pop in1) ())) ()))
Errors: [0 0 1 1 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 24
Size: 34
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.567
Median total errors in population: 9
Error averages by case: (0.675 0.675 0.906 0.76 0.675 0.714 0.675 0.675 0.906 0.906)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.359
Average program size in population (points): 29.254
Average percent parens in population: 0.312
Minimum age in population: 26.99462890625
Maximum age in population: 31.69733619689941
Average age in population: 29.86245819091797
Median age in population: 29.9302864074707
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 11314840
--- Timings ---
Current time: 1559314410430 milliseconds
Total Time:          66.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.1 seconds, 65.2%
Fitness Testing:     14.7 seconds, 22.2%
Report:               8.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items exec_swap (exec_when (exec_rot (exec_noop) () ())) ())
Lexicase best errors: [1 0 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 17
Percent parens: 0.412
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items exec_swap (exec_when (exec_rot (exec_noop) () ())) ())
Zero cases best errors: [1 0 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 17
Percent parens: 0.412
--- Lexicase Population Statistics ---
Count of elite individuals by case: (77 378 302 849 91 470 302 470 91 91)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (77 378 302 849 91 470 302 470 91 91)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction tag_integer_187} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot})
Best program: (integer_rot in3 print_integer integer_gte exec_yank integer_dup_items in2 exec_y (exec_y_when_autoconstructing (exec_noop boolean_dup_times exec_dup_items boolean_shove exec_y (boolean_xor tag_integer_187) tag_integer_829 exec_flush in4) boolean_yank exec_dup_items boolean_and exec_while (integer_lt integer_dup_items) integer_max boolean_rot exec_while (integer_fromboolean) exec_when (exec_dup (boolean_swap exec_dup () exec_yankdup integer_sub)) boolean_xor exec_do*count (integer_yankdup boolean_rot)))
Errors: [1 0 0 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 39
Size: 49
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 6.879
Median total errors in population: 7
Error averages by case: (0.923 0.622 0.698 0.151 0.909 0.53 0.698 0.53 0.909 0.909)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.378
Average program size in population (points): 32.463
Average percent parens in population: 0.282
Minimum age in population: 28.1707763671875
Maximum age in population: 33.25634002685547
Average age in population: 31.3739988079071
Median age in population: 31.43191194534302
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 11656209
--- Timings ---
Current time: 1559314413813 milliseconds
Total Time:          68.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.3 seconds, 65.7%
Fitness Testing:     15.1 seconds, 21.9%
Report:               8.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 63                 
Correct output: -85                 | Program output: 44                 
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 48                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 66                 
Correct output: 18                  | Program output: 43                 
Correct output: 6                   | Program output: 72                 
Correct output: 10                  | Program output: 89                 
Correct output: 2                   | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 94                 
Correct output: 23                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: 20                 
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: 22                 
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: 91                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -12                
Correct output: -80                 | Program output: -21                
Correct output: -66                 | Program output: 89                 
Correct output: -83                 | Program output: 43                 
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 46                 
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: 68                 
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -35                
Correct output: -77                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: 93                 
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: 48                 
Correct output: -90                 | Program output: 75                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -64                
Correct output: -88                 | Program output: -60                
Correct output: -42                 | Program output: 85                 
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: 32                 
Correct output: -89                 | Program output: 40                 
Correct output: -76                 | Program output: 14                 
Correct output: -68                 | Program output: 82                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_990} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items tag_boolean_990 exec_do*times (exec_do*range (integer_shove) exec_swap () (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_swap (boolean_pop in1 in2) (boolean_invert_first_then_and)) () ())))
Lexicase best errors: [1 0 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_990} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items tag_boolean_990 exec_do*times (exec_do*range (integer_shove) exec_swap () (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_swap (boolean_pop in1 in2) (boolean_invert_first_then_and)) () ())))
Zero cases best errors: [1 0 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (230 305 951 304 276 228 141 949 675 276)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (230 305 951 304 276 228 141 949 675 276)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing})
Best program: (integer_mod integer_pop integer_pop exec_dup_items boolean_swap integer_inc boolean_shove integer_rot integer_swap integer_add in2 print_integer integer_sub integer_shove integer_yank integer_min exec_do*while (integer_stackdepth integer_rot) exec_flush integer_mod integer_mod exec_dup_times (integer_dup_items exec_eq exec_empty boolean_shove integer_dup_times integer_mult print_newline exec_do*while (exec_k_when_autoconstructing () ())))
Errors: [0 1 0 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 32
Size: 38
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 5.665
Median total errors in population: 5
Error averages by case: (0.77 0.695 0.049 0.696 0.724 0.772 0.859 0.051 0.325 0.724)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.375
Average program size in population (points): 30.687
Average percent parens in population: 0.311
Minimum age in population: 30.31362915039062
Maximum age in population: 34.79395198822021
Average age in population: 32.96062019348145
Median age in population: 33.0049741268158
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 12026060
--- Timings ---
Current time: 1559314416351 milliseconds
Total Time:          72.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.2 seconds, 65.5%
Fitness Testing:     15.5 seconds, 21.5%
Report:               9.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 63                 
Correct output: -85                 | Program output: 44                 
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 48                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 66                 
Correct output: 18                  | Program output: 43                 
Correct output: 6                   | Program output: 72                 
Correct output: 10                  | Program output: 89                 
Correct output: 2                   | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 94                 
Correct output: 23                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: 20                 
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: 22                 
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: 91                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -12                
Correct output: -80                 | Program output: -21                
Correct output: -66                 | Program output: 89                 
Correct output: -83                 | Program output: 43                 
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 46                 
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: 68                 
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -35                
Correct output: -77                 | Program output: -20                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: 93                 
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: 48                 
Correct output: -90                 | Program output: 75                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -64                
Correct output: -88                 | Program output: -60                
Correct output: -42                 | Program output: 85                 
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: 32                 
Correct output: -89                 | Program output: 40                 
Correct output: -76                 | Program output: 14                 
Correct output: -68                 | Program output: 82                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_mod integer_pop integer_pop exec_dup_items boolean_swap integer_inc boolean_shove integer_rot integer_swap integer_add in2 print_integer integer_sub integer_shove integer_yank integer_min exec_do*while (integer_stackdepth integer_rot) exec_flush integer_mod integer_mod exec_dup_times (integer_dup_items exec_eq exec_empty boolean_shove integer_dup_times integer_mult print_newline exec_do*while (exec_k_when_autoconstructing () ())))
Lexicase best errors: [0 1 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_mod integer_pop integer_pop exec_dup_items boolean_swap integer_inc boolean_shove integer_rot integer_swap integer_add in2 print_integer integer_sub integer_shove integer_yank integer_min exec_do*while (integer_stackdepth integer_rot) exec_flush integer_mod integer_mod exec_dup_times (integer_dup_items exec_eq exec_empty boolean_shove integer_dup_times integer_mult print_newline exec_do*while (exec_k_when_autoconstructing () ())))
Zero cases best errors: [0 1 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (275 288 275 431 275 275 144 707 143 288)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (275 288 275 431 275 275 144 707 143 288)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 1, :instruction print_integer})
Best program: (exec_do*count () in4 integer_lt in2 print_integer)
Errors: [0 1 0 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 5
Size: 7
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.899
Median total errors in population: 6
Error averages by case: (0.725 0.712 0.725 0.569 0.725 0.725 0.856 0.293 0.857 0.712)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.152
Average program size in population (points): 30.178
Average percent parens in population: 0.306
Minimum age in population: 31.31362915039062
Maximum age in population: 36.40024352073669
Average age in population: 34.4162886660099
Median age in population: 34.48747682571411
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 12402600
--- Timings ---
Current time: 1559314419345 milliseconds
Total Time:          75.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.7 seconds, 66.1%
Fitness Testing:     16.0 seconds, 21.2%
Report:               9.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_973} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_990} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction in2})
Lexicase best program: (integer_inc in4 boolean_shove integer_sub exec_s (in3 exec_y_when_autoconstructing (print_integer boolean_eq tag_boolean_973) integer_dup_items exec_dup_times (integer_empty) integer_dup tag_boolean_990 exec_do*times (integer_gte in2)) () ())
Lexicase best errors: [0 1 1 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_973} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_990} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction in2})
Zero cases best program: (integer_inc in4 boolean_shove integer_sub exec_s (in3 exec_y_when_autoconstructing (print_integer boolean_eq tag_boolean_973) integer_dup_items exec_dup_times (integer_empty) integer_dup tag_boolean_990 exec_do*times (integer_gte in2)) () ())
Zero cases best errors: [0 1 1 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (245 445 447 249 245 4 245 696 245 4)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (245 445 447 249 245 4 245 696 245 4)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_919} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_rot})
Best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items exec_swap (boolean_frominteger boolean_flush print_integer exec_k_when_autoconstructing (boolean_eq boolean_eq tag_boolean_919) (integer_dup_items exec_dup_times (exec_rot () () ()))) ())
Errors: [0 1 1 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 17
Size: 26
Percent parens: 0.346
--- Population Statistics ---
Average total errors in population: 7.175
Median total errors in population: 7
Error averages by case: (0.755 0.555 0.553 0.751 0.755 0.996 0.755 0.304 0.755 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.553
Average program size in population (points): 29.873
Average percent parens in population: 0.275
Minimum age in population: 32.41142654418945
Maximum age in population: 37.78115594387054
Average age in population: 35.83867972803116
Median age in population: 35.95534932613373
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 12842024
--- Timings ---
Current time: 1559314422360 milliseconds
Total Time:          78.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.0 seconds, 66.6%
Fitness Testing:     16.5 seconds, 21.1%
Report:               9.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_973} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_990})
Lexicase best program: (integer_swap in4 integer_inc exec_do*range (boolean_invert_first_then_and) integer_sub exec_s (in3 exec_y_when_autoconstructing (print_integer exec_k_when_autoconstructing (boolean_eq boolean_eq tag_boolean_973) (integer_dup_items exec_dup_times (integer_empty) integer_dup tag_boolean_990))) () ())
Lexicase best errors: [1 0 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 28
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_973} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_990})
Zero cases best program: (integer_swap in4 integer_inc exec_do*range (boolean_invert_first_then_and) integer_sub exec_s (in3 exec_y_when_autoconstructing (print_integer exec_k_when_autoconstructing (boolean_eq boolean_eq tag_boolean_973) (integer_dup_items exec_dup_times (integer_empty) integer_dup tag_boolean_990))) () ())
Zero cases best errors: [1 0 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 28
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 933 172 372 898 766 372 372 132 172)
Population mean number of elite cases: 4.33
Count of perfect (error zero) individuals by case: (138 933 172 372 898 766 372 372 132 172)
Population mean number of perfect (error zero) cases: 4.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush})
Best program: (exec_do*count () in4 integer_lt integer_mod in3 print_integer integer_gte integer_mult exec_do*count () exec_rot (integer_sub boolean_flush boolean_flush exec_shove (integer_gte exec_y_when_autoconstructing (exec_flush))) () ())
Errors: [1 0 1 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 17
Size: 25
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 5.673
Median total errors in population: 5
Error averages by case: (0.862 0.067 0.828 0.628 0.102 0.234 0.628 0.628 0.868 0.828)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.689
Average program size in population (points): 30.573
Average percent parens in population: 0.286
Minimum age in population: 33.46011352539062
Maximum age in population: 39.36415004730225
Average age in population: 37.4439733222127
Median age in population: 37.48726543784142
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 13271461
--- Timings ---
Current time: 1559314425160 milliseconds
Total Time:          80.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.0 seconds, 66.9%
Fitness Testing:     16.9 seconds, 21.0%
Report:               9.7 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_boolean_156} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_flush})
Lexicase best program: (integer_inc in4 boolean_invert_first_then_and tag_boolean_156 exec_s (in3 exec_y_when_autoconstructing (print_integer exec_k_when_autoconstructing (boolean_eq boolean_eq integer_mult integer_dup_items) (exec_rot (integer_sub boolean_flush boolean_flush exec_shove (integer_gte exec_y_when_autoconstructing (exec_flush exec_shove (integer_pop boolean_swap integer_flush)))) () ()))) () ())
Lexicase best errors: [0 1 1 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 38
Percent parens: 0.342
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_boolean_156} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_flush})
Zero cases best program: (integer_inc in4 boolean_invert_first_then_and tag_boolean_156 exec_s (in3 exec_y_when_autoconstructing (print_integer exec_k_when_autoconstructing (boolean_eq boolean_eq integer_mult integer_dup_items) (exec_rot (integer_sub boolean_flush boolean_flush exec_shove (integer_gte exec_y_when_autoconstructing (exec_flush exec_shove (integer_pop boolean_swap integer_flush)))) () ()))) () ())
Zero cases best errors: [0 1 1 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 38
Percent parens: 0.342
--- Lexicase Population Statistics ---
Count of elite individuals by case: (437 155 1000 1000 155 1000 1000 950 436 1000)
Population mean number of elite cases: 7.13
Count of perfect (error zero) individuals by case: (437 155 0 0 155 0 0 950 436 0)
Population mean number of perfect (error zero) cases: 2.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush})
Best program: (exec_do*count () exec_dup_items integer_lt integer_mod in3 print_integer integer_gte integer_mult integer_dup_items exec_rot (integer_sub boolean_flush boolean_flush exec_shove (integer_gte exec_y_when_autoconstructing (exec_flush))) () ())
Errors: [0 1 1 1 1 1 1 0 0 1]
Total: 7
Mean: 0.7
Genome size: 17
Size: 24
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 7.867
Median total errors in population: 7
Error averages by case: (0.563 0.845 1.0 1.0 0.845 1.0 1.0 0.05 0.564 1.0)
Error minima by case: (0 0 1 1 0 1 1 0 0 1)
Average genome size in population (length): 20.143
Average program size in population (points): 28.63
Average percent parens in population: 0.290
Minimum age in population: 36.12143802642822
Maximum age in population: 41.15699398517609
Average age in population: 39.09222198823094
Median age in population: 39.14493942260742
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.497
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.478
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 13696819
--- Timings ---
Current time: 1559314427907 milliseconds
Total Time:          83.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.1 seconds, 67.1%
Fitness Testing:     17.4 seconds, 20.8%
Report:              10.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_boolean_113} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_inc in4 boolean_invert_first_then_and tag_boolean_113 exec_s (in3 exec_y_when_autoconstructing (print_integer) exec_k_when_autoconstructing (exec_k (in2) (exec_y (exec_y_when_autoconstructing (exec_noop exec_s (exec_dup_items boolean_shove exec_y (boolean_and tag_integer_335) tag_integer_829 exec_flush in4) (boolean_yank exec_dup_items boolean_and exec_while (integer_lte)) ())))) ()) () ())
Lexicase best errors: [1 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_boolean_113} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_inc in4 boolean_invert_first_then_and tag_boolean_113 exec_s (in3 exec_y_when_autoconstructing (print_integer) exec_k_when_autoconstructing (exec_k (in2) (exec_y (exec_y_when_autoconstructing (exec_noop exec_s (exec_dup_items boolean_shove exec_y (boolean_and tag_integer_335) tag_integer_829 exec_flush in4) (boolean_yank exec_dup_items boolean_and exec_while (integer_lte)) ())))) ()) () ())
Zero cases best errors: [1 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 477 477 953 477 1 477 1 1 1)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (0 477 477 953 477 1 477 1 1 1)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush})
Best program: (exec_do*count () exec_dup_items integer_lt integer_mod in3 print_integer integer_gte exec_y_when_autoconstructing (exec_do*times () exec_rot (integer_sub boolean_flush boolean_flush) () ()))
Errors: [1 0 0 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 13
Size: 20
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 7.135
Median total errors in population: 9
Error averages by case: (1.0 0.523 0.523 0.047 0.523 0.999 0.523 0.999 0.999 0.999)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.801
Average program size in population (points): 28.413
Average percent parens in population: 0.302
Minimum age in population: 37.36754083633423
Maximum age in population: 42.63320776820183
Average age in population: 40.48279364110529
Median age in population: 40.55566645413637
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.532
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 14296160
--- Timings ---
Current time: 1559314430688 milliseconds
Total Time:          86.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.1 seconds, 67.2%
Fitness Testing:     18.1 seconds, 20.9%
Report:              10.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items exec_swap (boolean_frominteger boolean_flush integer_dec exec_shove (integer_yank exec_y_when_autoconstructing ())) ())
Lexicase best errors: [1 1 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 18
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items exec_swap (boolean_frominteger boolean_flush integer_dec exec_shove (integer_yank exec_y_when_autoconstructing ())) ())
Zero cases best errors: [1 1 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 18
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 449 506 1 1000 449 449 506 506)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (1 1 449 506 1 0 449 449 506 506)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop})
Best program: (boolean_not integer_dup_items integer_swap exec_yankdup integer_max integer_rot in3 print_integer integer_gte exec_yank integer_dup_items in2 exec_y (exec_y_when_autoconstructing (exec_noop)))
Errors: [1 1 1 0 1 1 1 1 0 0]
Total: 7
Mean: 0.7
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.132
Median total errors in population: 7
Error averages by case: (0.999 0.999 0.551 0.494 0.999 1.0 0.551 0.551 0.494 0.494)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 22.641
Average program size in population (points): 31.539
Average percent parens in population: 0.282
Minimum age in population: 39.00185531377792
Maximum age in population: 43.77680953592062
Average age in population: 42.29800461837649
Median age in population: 42.22919884696603
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 325
Genome diversity (% unique genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 336
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.002
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 15007223
--- Timings ---
Current time: 1559314433992 milliseconds
Total Time:          89.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.1 seconds, 67.2%
Fitness Testing:     18.9 seconds, 21.1%
Report:              10.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: 26                 
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 58                 
Correct output: 1                   | Program output: 68                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 87                 
Correct output: 19                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 65                 
Correct output: 10                  | Program output: 92                 
Correct output: 2                   | Program output: 9                  
Correct output: 12                  | Program output: 62                 
Correct output: 1                   | Program output: 96                 
Correct output: 11                  | Program output: 71                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 67                 
Correct output: 6                   | Program output: 20                 
Correct output: 60                  | Program output: 87                 
Correct output: 23                  | Program output: 92                 
Correct output: 47                  | Program output: 57                 
Correct output: -92                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -86                 | Program output: -5                 
Correct output: -93                 | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: 38                 
Correct output: 12                  | Program output: 22                 
Correct output: -64                 | Program output: 72                 
Correct output: -77                 | Program output: -9                 
Correct output: -83                 | Program output: -17                
Correct output: -84                 | Program output: 38                 
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -16                
Correct output: -61                 | Program output: 53                 
Correct output: -80                 | Program output: 43                 
Correct output: -66                 | Program output: -44                
Correct output: -83                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 76                 
Correct output: -94                 | Program output: -34                
Correct output: -81                 | Program output: -67                
Correct output: -46                 | Program output: -35                
Correct output: -15                 | Program output: 70                 
Correct output: -3                  | Program output: 11                 
Correct output: -84                 | Program output: -57                
Correct output: -17                 | Program output: 18                 
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: 89                 
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: 20                 
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 95                 
Correct output: -97                 | Program output: 30                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: 86                 
Correct output: -62                 | Program output: 16                 
Correct output: -41                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: 47                 
Correct output: -41                 | Program output: 19                 
Correct output: -88                 | Program output: 24                 
Correct output: -88                 | Program output: 73                 
Correct output: -42                 | Program output: 6                  
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -68                
Correct output: -94                 | Program output: 72                 
Correct output: -1                  | Program output: 11                 
Correct output: -80                 | Program output: 91                 
Correct output: -52                 | Program output: 22                 
Correct output: -89                 | Program output: 97                 
Correct output: -76                 | Program output: -67                
Correct output: -68                 | Program output: 77                 
Correct output: -99                 | Program output: 79                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_inc in4 boolean_shove integer_sub print_integer in1 exec_yank exec_y (boolean_rot) exec_rot (exec_do*times (boolean_shove exec_y (boolean_and tag_integer_335) tag_integer_829 exec_flush in4) boolean_yank exec_dup_items boolean_and exec_while (integer_lte)) () ())
Lexicase best errors: [0 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_inc in4 boolean_shove integer_sub print_integer in1 exec_yank exec_y (boolean_rot) exec_rot (exec_do*times (boolean_shove exec_y (boolean_and tag_integer_335) tag_integer_829 exec_flush in4) boolean_yank exec_dup_items boolean_and exec_while (integer_lte)) () ())
Zero cases best errors: [0 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (311 1000 311 311 1000 311 329 311 965 325)
Population mean number of elite cases: 5.17
Count of perfect (error zero) individuals by case: (311 0 311 311 0 311 329 311 965 325)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 2, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Best program: (integer_inc in4 boolean_shove integer_sub print_integer in1 exec_yank exec_y (boolean_rot) exec_rot (exec_do*times (boolean_shove exec_y (boolean_and tag_integer_335)) tag_integer_829 exec_flush in4) (boolean_yank exec_dup_items boolean_and exec_while (integer_lte)) ())
Errors: [0 1 0 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 23
Size: 31
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.826
Median total errors in population: 8
Error averages by case: (0.689 1.0 0.689 0.689 1.0 0.689 0.671 0.689 0.035 0.675)
Error minima by case: (0 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 21.285
Average program size in population (points): 30.437
Average percent parens in population: 0.302
Minimum age in population: 40.69187924265862
Maximum age in population: 45.32163553312421
Average age in population: 43.69395226577669
Median age in population: 43.83820356801152
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 252
Genome diversity (% unique genomes):	 0.473
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 259
Syntactic diversity (% unique Push programs):	 0.443
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 15825468
--- Timings ---
Current time: 1559314437155 milliseconds
Total Time:          92.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.7 seconds, 66.7%
Fitness Testing:     19.8 seconds, 21.4%
Report:              10.9 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: 26                 
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 58                 
Correct output: 1                   | Program output: 68                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 87                 
Correct output: 19                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 65                 
Correct output: 10                  | Program output: 92                 
Correct output: 2                   | Program output: 9                  
Correct output: 12                  | Program output: 62                 
Correct output: 1                   | Program output: 96                 
Correct output: 11                  | Program output: 71                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 67                 
Correct output: 6                   | Program output: 20                 
Correct output: 60                  | Program output: 87                 
Correct output: 23                  | Program output: 92                 
Correct output: 47                  | Program output: 57                 
Correct output: -92                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -86                 | Program output: -5                 
Correct output: -93                 | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: 38                 
Correct output: 12                  | Program output: 22                 
Correct output: -64                 | Program output: 72                 
Correct output: -77                 | Program output: -9                 
Correct output: -83                 | Program output: -17                
Correct output: -84                 | Program output: 38                 
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -16                
Correct output: -61                 | Program output: 53                 
Correct output: -80                 | Program output: 43                 
Correct output: -66                 | Program output: -44                
Correct output: -83                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 76                 
Correct output: -94                 | Program output: -34                
Correct output: -81                 | Program output: -67                
Correct output: -46                 | Program output: -35                
Correct output: -15                 | Program output: 70                 
Correct output: -3                  | Program output: 11                 
Correct output: -84                 | Program output: -57                
Correct output: -17                 | Program output: 18                 
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: 89                 
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: 20                 
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 95                 
Correct output: -97                 | Program output: 30                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: 86                 
Correct output: -62                 | Program output: 16                 
Correct output: -41                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: 47                 
Correct output: -41                 | Program output: 19                 
Correct output: -88                 | Program output: 24                 
Correct output: -88                 | Program output: 73                 
Correct output: -42                 | Program output: 6                  
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -68                
Correct output: -94                 | Program output: 72                 
Correct output: -1                  | Program output: 11                 
Correct output: -80                 | Program output: 91                 
Correct output: -52                 | Program output: 22                 
Correct output: -89                 | Program output: 97                 
Correct output: -76                 | Program output: -67                
Correct output: -68                 | Program output: 77                 
Correct output: -99                 | Program output: 79                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_inc in4 boolean_shove integer_sub print_integer in1 in4 boolean_yank exec_dup_items boolean_and exec_while (integer_lte))
Lexicase best errors: [0 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 14
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_inc in4 boolean_shove integer_sub print_integer in1 in4 boolean_yank exec_dup_items boolean_and exec_while (integer_lte))
Zero cases best errors: [0 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 14
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (678 949 1000 1000 677 135 677 677 676 677)
Population mean number of elite cases: 7.15
Count of perfect (error zero) individuals by case: (678 949 0 0 677 135 677 677 676 677)
Population mean number of perfect (error zero) cases: 5.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Best program: (integer_inc in4 boolean_shove integer_sub print_integer in1 exec_yank exec_y (boolean_rot) exec_rot (exec_do*times (boolean_shove exec_y (in2 tag_integer_335) tag_integer_829 exec_flush in4) boolean_yank exec_dup_items boolean_and exec_while (integer_lte)) () ())
Errors: [0 0 1 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 23
Size: 31
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 4.854
Median total errors in population: 3
Error averages by case: (0.322 0.051 1.0 1.0 0.323 0.865 0.323 0.323 0.324 0.323)
Error minima by case: (0 0 1 1 0 0 0 0 0 0)
Average genome size in population (length): 22.032
Average program size in population (points): 30.429
Average percent parens in population: 0.276
Minimum age in population: 42.29430794715881
Maximum age in population: 46.8036846164614
Average age in population: 45.31173536433093
Median age in population: 45.41596695035696
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 229
Genome diversity (% unique genomes):	 0.515
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 259
Syntactic diversity (% unique Push programs):	 0.477
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 16759599
--- Timings ---
Current time: 1559314440726 milliseconds
Total Time:          96.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.7 seconds, 66.3%
Fitness Testing:     20.8 seconds, 21.6%
Report:              11.5 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction tag_integer_187} {:close 0, :instruction tag_integer_829} {:close 1, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while})
Lexicase best program: (integer_inc integer_rot in3 print_integer integer_gte exec_yank integer_dup_items in2 exec_y () exec_do*times (exec_noop boolean_dup_times exec_dup_items exec_stackdepth exec_y (boolean_xor tag_integer_187) tag_integer_829 exec_flush) in4 boolean_yank exec_dup_items boolean_and exec_while (integer_lt integer_dup_items) integer_max boolean_rot exec_while ())
Lexicase best errors: [0 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction tag_integer_187} {:close 0, :instruction tag_integer_829} {:close 1, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while})
Zero cases best program: (integer_inc integer_rot in3 print_integer integer_gte exec_yank integer_dup_items in2 exec_y () exec_do*times (exec_noop boolean_dup_times exec_dup_items exec_stackdepth exec_y (boolean_xor tag_integer_187) tag_integer_829 exec_flush) in4 boolean_yank exec_dup_items boolean_and exec_while (integer_lt integer_dup_items) integer_max boolean_rot exec_while ())
Zero cases best errors: [0 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (957 125 124 832 831 124 1000 1000 956 1)
Population mean number of elite cases: 5.95
Count of perfect (error zero) individuals by case: (957 125 124 832 831 124 0 0 956 1)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction -48} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_990} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Best program: (-48 in3 print_integer integer_gte integer_mult integer_dup_items tag_boolean_990 exec_do*times (exec_do*range (integer_eq) exec_swap () (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_swap (boolean_pop in1 in2) (exec_while (integer_lte))) () ())))
Errors: [0 0 0 1 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 19
Size: 30
Percent parens: 0.367
--- Population Statistics ---
Average total errors in population: 6.05
Median total errors in population: 6
Error averages by case: (0.043 0.875 0.876 0.168 0.169 0.876 1.0 1.0 0.044 0.999)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 22.891
Average program size in population (points): 31.145
Average percent parens in population: 0.264
Minimum age in population: 43.29430794715881
Maximum age in population: 48.64380675461143
Average age in population: 46.79077446659375
Median age in population: 46.88359820190817
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 191
Genome diversity (% unique genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 214
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 17697660
--- Timings ---
Current time: 1559314443722 milliseconds
Total Time:          99.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.5 seconds, 65.8%
Fitness Testing:     21.8 seconds, 21.9%
Report:              12.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 88                 
Correct output: 1                   | Program output: 76                 
Correct output: 31                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 5                  
Correct output: 2                   | Program output: 65                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 12                 
Correct output: 12                  | Program output: 91                 
Correct output: 1                   | Program output: 83                 
Correct output: 11                  | Program output: 59                 
Correct output: 16                  | Program output: 89                 
Correct output: 34                  | Program output: 50                 
Correct output: 6                   | Program output: 87                 
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 71                 
Correct output: -92                 | Program output: 1                  
Correct output: -57                 | Program output: 97                 
Correct output: -86                 | Program output: 60                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: 29                 
Correct output: -87                 | Program output: -33                
Correct output: -95                 | Program output: 91                 
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 54                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -73                
Correct output: -83                 | Program output: 49                 
Correct output: -84                 | Program output: -19                
Correct output: -40                 | Program output: 81                 
Correct output: -82                 | Program output: 18                 
Correct output: -61                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: 42                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 5                  
Correct output: -97                 | Program output: 4                  
Correct output: -90                 | Program output: 76                 
Correct output: -94                 | Program output: -9                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 60                 
Correct output: -15                 | Program output: 72                 
Correct output: -3                  | Program output: 100                
Correct output: -84                 | Program output: 50                 
Correct output: -17                 | Program output: 89                 
Correct output: -89                 | Program output: -27                
Correct output: -5                  | Program output: 0                  
Correct output: -47                 | Program output: 41                 
Correct output: -89                 | Program output: -49                
Correct output: -83                 | Program output: 45                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -48                
Correct output: -66                 | Program output: 55                 
Correct output: -73                 | Program output: 2                  
Correct output: -88                 | Program output: -1                 
Correct output: -97                 | Program output: 55                 
Correct output: -43                 | Program output: 65                 
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 57                 
Correct output: -97                 | Program output: 84                 
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: 7                  
Correct output: -70                 | Program output: 98                 
Correct output: -75                 | Program output: 63                 
Correct output: -94                 | Program output: 90                 
Correct output: -1                  | Program output: 13                 
Correct output: -80                 | Program output: 67                 
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: 24                 
Correct output: -99                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_inc in4 boolean_shove in1 print_integer in1 exec_yank exec_y (boolean_rot) exec_rot (integer_add boolean_shove exec_y (boolean_and tag_integer_335) tag_integer_829 exec_flush in4) (boolean_yank exec_dup_items boolean_and exec_while (integer_lte)) ())
Lexicase best errors: [1 0 1 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 30
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_inc in4 boolean_shove in1 print_integer in1 exec_yank exec_y (boolean_rot) exec_rot (integer_add boolean_shove exec_y (boolean_and tag_integer_335) tag_integer_829 exec_flush in4) (boolean_yank exec_dup_items boolean_and exec_while (integer_lte)) ())
Zero cases best errors: [1 0 1 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 30
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 369 401 401 369 195 369 1000 402 196)
Population mean number of elite cases: 4.70
Count of perfect (error zero) individuals by case: (0 369 401 401 369 195 369 0 402 196)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Best program: (integer_inc in4 boolean_shove in1 print_integer in1 exec_yank exec_y (boolean_rot) exec_rot (integer_add boolean_shove exec_y (boolean_and tag_integer_335) tag_integer_829 exec_flush in4) (boolean_yank exec_dup_items boolean_and exec_while (integer_lte)) ())
Errors: [1 0 1 1 0 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.298
Median total errors in population: 7
Error averages by case: (1.0 0.631 0.599 0.599 0.631 0.805 0.631 1.0 0.598 0.804)
Error minima by case: (1 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 22.697
Average program size in population (points): 31.101
Average percent parens in population: 0.270
Minimum age in population: 44.29430794715881
Maximum age in population: 50.16906680725515
Average age in population: 48.25943544096407
Median age in population: 48.34753599902615
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 257
Genome diversity (% unique genomes):	 0.47
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 262
Syntactic diversity (% unique Push programs):	 0.448
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 18486755
--- Timings ---
Current time: 1559314446695 milliseconds
Total Time:         102.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.0 seconds, 65.7%
Fitness Testing:     22.7 seconds, 22.2%
Report:              12.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 88                 
Correct output: 1                   | Program output: 76                 
Correct output: 31                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 5                  
Correct output: 2                   | Program output: 65                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 12                 
Correct output: 12                  | Program output: 91                 
Correct output: 1                   | Program output: 83                 
Correct output: 11                  | Program output: 59                 
Correct output: 16                  | Program output: 89                 
Correct output: 34                  | Program output: 50                 
Correct output: 6                   | Program output: 87                 
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 71                 
Correct output: -92                 | Program output: 1                  
Correct output: -57                 | Program output: 97                 
Correct output: -86                 | Program output: 60                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: 29                 
Correct output: -87                 | Program output: -33                
Correct output: -95                 | Program output: 91                 
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 54                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -73                
Correct output: -83                 | Program output: 49                 
Correct output: -84                 | Program output: -19                
Correct output: -40                 | Program output: 81                 
Correct output: -82                 | Program output: 18                 
Correct output: -61                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: 42                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 5                  
Correct output: -97                 | Program output: 4                  
Correct output: -90                 | Program output: 76                 
Correct output: -94                 | Program output: -9                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 60                 
Correct output: -15                 | Program output: 72                 
Correct output: -3                  | Program output: 100                
Correct output: -84                 | Program output: 50                 
Correct output: -17                 | Program output: 89                 
Correct output: -89                 | Program output: -27                
Correct output: -5                  | Program output: 0                  
Correct output: -47                 | Program output: 41                 
Correct output: -89                 | Program output: -49                
Correct output: -83                 | Program output: 45                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -48                
Correct output: -66                 | Program output: 55                 
Correct output: -73                 | Program output: 2                  
Correct output: -88                 | Program output: -1                 
Correct output: -97                 | Program output: 55                 
Correct output: -43                 | Program output: 65                 
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 57                 
Correct output: -97                 | Program output: 84                 
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: 7                  
Correct output: -70                 | Program output: 98                 
Correct output: -75                 | Program output: 63                 
Correct output: -94                 | Program output: 90                 
Correct output: -1                  | Program output: 13                 
Correct output: -80                 | Program output: 67                 
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: 24                 
Correct output: -99                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_inc in4 boolean_shove in1 print_integer in1 exec_yank exec_y (boolean_rot) exec_rot (integer_add boolean_shove exec_y (boolean_and tag_integer_335) tag_integer_829 exec_flush in4) (boolean_yank exec_dup_items boolean_and exec_while (integer_lte)) ())
Lexicase best errors: [0 1 1 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 30
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_inc in4 boolean_shove in1 print_integer in1 exec_yank exec_y (boolean_rot) exec_rot (integer_add boolean_shove exec_y (boolean_and tag_integer_335) tag_integer_829 exec_flush in4) (boolean_yank exec_dup_items boolean_and exec_while (integer_lte)) ())
Zero cases best errors: [0 1 1 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 30
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (377 220 220 1000 377 220 359 377 1000 359)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (377 220 220 0 377 220 359 377 0 359)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Best program: (integer_inc in4 boolean_shove in1 print_integer in1 exec_yank exec_y (boolean_rot) exec_rot (integer_add boolean_shove exec_y (boolean_and tag_integer_335) tag_integer_829 exec_flush in4) (boolean_yank exec_dup_items boolean_and exec_while (integer_lte)) ())
Errors: [0 1 1 1 0 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.491
Median total errors in population: 7
Error averages by case: (0.623 0.78 0.78 1.0 0.623 0.78 0.641 0.623 1.0 0.641)
Error minima by case: (0 0 0 1 0 0 0 0 1 0)
Average genome size in population (length): 22.586
Average program size in population (points): 30.858
Average percent parens in population: 0.268
Minimum age in population: 45.29430794715881
Maximum age in population: 51.49822769127786
Average age in population: 49.73349252258008
Median age in population: 49.84353166073561
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 189
Genome diversity (% unique genomes):	 0.567
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 197
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 19301511
--- Timings ---
Current time: 1559314450063 milliseconds
Total Time:         105.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.9 seconds, 65.3%
Fitness Testing:     23.6 seconds, 22.4%
Report:              12.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 88                 
Correct output: 1                   | Program output: 76                 
Correct output: 31                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 5                  
Correct output: 2                   | Program output: 65                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 12                 
Correct output: 12                  | Program output: 91                 
Correct output: 1                   | Program output: 83                 
Correct output: 11                  | Program output: 59                 
Correct output: 16                  | Program output: 89                 
Correct output: 34                  | Program output: 50                 
Correct output: 6                   | Program output: 87                 
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 71                 
Correct output: -92                 | Program output: 1                  
Correct output: -57                 | Program output: 97                 
Correct output: -86                 | Program output: 60                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: 29                 
Correct output: -87                 | Program output: -33                
Correct output: -95                 | Program output: 91                 
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 54                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -73                
Correct output: -83                 | Program output: 49                 
Correct output: -84                 | Program output: -19                
Correct output: -40                 | Program output: 81                 
Correct output: -82                 | Program output: 18                 
Correct output: -61                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: 42                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 5                  
Correct output: -97                 | Program output: 4                  
Correct output: -90                 | Program output: 76                 
Correct output: -94                 | Program output: -9                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 60                 
Correct output: -15                 | Program output: 72                 
Correct output: -3                  | Program output: 100                
Correct output: -84                 | Program output: 50                 
Correct output: -17                 | Program output: 89                 
Correct output: -89                 | Program output: -27                
Correct output: -5                  | Program output: 0                  
Correct output: -47                 | Program output: 41                 
Correct output: -89                 | Program output: -49                
Correct output: -83                 | Program output: 45                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -48                
Correct output: -66                 | Program output: 55                 
Correct output: -73                 | Program output: 2                  
Correct output: -88                 | Program output: -1                 
Correct output: -97                 | Program output: 55                 
Correct output: -43                 | Program output: 65                 
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 57                 
Correct output: -97                 | Program output: 84                 
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: 7                  
Correct output: -70                 | Program output: 98                 
Correct output: -75                 | Program output: 63                 
Correct output: -94                 | Program output: 90                 
Correct output: -1                  | Program output: 13                 
Correct output: -80                 | Program output: 67                 
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: 24                 
Correct output: -99                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_inc in4 boolean_shove in1 print_integer in1 exec_yank exec_y (boolean_rot) exec_rot (integer_add boolean_shove exec_y (boolean_and tag_integer_335) in1) (exec_yank exec_y (boolean_rot) exec_rot (integer_add boolean_shove exec_y (boolean_and tag_integer_335) tag_integer_829 exec_flush boolean_yank exec_dup_items boolean_and exec_while (integer_lte)) () ()) ())
Lexicase best errors: [1 1 1 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 44
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_inc in4 boolean_shove in1 print_integer in1 exec_yank exec_y (boolean_rot) exec_rot (integer_add boolean_shove exec_y (boolean_and tag_integer_335) in1) (exec_yank exec_y (boolean_rot) exec_rot (integer_add boolean_shove exec_y (boolean_and tag_integer_335) tag_integer_829 exec_flush boolean_yank exec_dup_items boolean_and exec_while (integer_lte)) () ()) ())
Zero cases best errors: [1 1 1 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 44
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 358 752 393 393 1000 207 958 1000)
Population mean number of elite cases: 7.06
Count of perfect (error zero) individuals by case: (0 0 358 752 393 393 0 207 958 0)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Best program: (integer_inc in4 boolean_stackdepth in1 print_integer in1 exec_yank exec_y (boolean_rot) exec_rot (integer_add boolean_shove exec_y (exec_k_when_autoconstructing (tag_integer_335) (tag_integer_829 exec_flush in4) boolean_yank exec_dup_items boolean_and exec_while (integer_lte))) () ())
Errors: [1 1 1 0 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 32
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 6.939
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.642 0.248 0.607 0.607 1.0 0.793 0.042 1.0)
Error minima by case: (1 1 0 0 0 0 1 0 0 1)
Average genome size in population (length): 22.313
Average program size in population (points): 30.217
Average percent parens in population: 0.261
Minimum age in population: 47.30947223678231
Maximum age in population: 53.04098223464098
Average age in population: 51.1851427933207
Median age in population: 51.25315603392664
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 20191386
--- Timings ---
Current time: 1559314453525 milliseconds
Total Time:         108.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.8 seconds, 65.0%
Fitness Testing:     24.6 seconds, 22.6%
Report:              13.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_990} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items tag_boolean_990 exec_do*times (exec_do*range (integer_shove) exec_swap () (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_swap () (boolean_pop in1 in2) boolean_invert_first_then_and) () ())))
Lexicase best errors: [0 1 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_990} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items tag_boolean_990 exec_do*times (exec_do*range (integer_shove) exec_swap () (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_swap () (boolean_pop in1 in2) boolean_invert_first_then_and) () ())))
Zero cases best errors: [0 1 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 229 229 1000 207 207 1000 207 228 207)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (207 229 229 0 207 207 0 207 228 207)
Population mean number of perfect (error zero) cases: 1.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction tag_integer_347} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_eq})
Best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items in2 exec_y (exec_y_when_autoconstructing (exec_rot (boolean_dup_times exec_dup_items boolean_shove exec_y (boolean_xor tag_integer_347) tag_integer_829 exec_flush in4) (integer_dup exec_dup_items boolean_and exec_while (integer_lt integer_dup_items) integer_max integer_eq) ())))
Errors: [0 1 1 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 35
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 8.279
Median total errors in population: 10
Error averages by case: (0.793 0.771 0.771 1.0 0.793 0.793 1.0 0.793 0.772 0.793)
Error minima by case: (0 0 0 1 0 0 1 0 0 0)
Average genome size in population (length): 22.3
Average program size in population (points): 30.085
Average percent parens in population: 0.257
Minimum age in population: 49.20534199848771
Maximum age in population: 54.71451644797344
Average age in population: 52.66815091160993
Median age in population: 52.7202327097184
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 145
Genome diversity (% unique genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 21082759
--- Timings ---
Current time: 1559314457290 milliseconds
Total Time:         112.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.8 seconds, 64.7%
Fitness Testing:     25.6 seconds, 22.7%
Report:              14.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 3, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times})
Lexicase best program: (integer_shove integer_dup_items integer_swap boolean_swap integer_inc in4 exec_shove () integer_sub exec_s (in3 exec_y_when_autoconstructing (print_integer exec_k_when_autoconstructing (integer_mult exec_k_when_autoconstructing (exec_dup_times ()) ()) ())) () ())
Lexicase best errors: [1 0 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.407
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 3, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times})
Zero cases best program: (integer_shove integer_dup_items integer_swap boolean_swap integer_inc in4 exec_shove () integer_sub exec_s (in3 exec_y_when_autoconstructing (print_integer exec_k_when_autoconstructing (integer_mult exec_k_when_autoconstructing (exec_dup_times ()) ()) ())) () ())
Zero cases best errors: [1 0 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.407
--- Lexicase Population Statistics ---
Count of elite individuals by case: (383 566 383 567 566 1000 566 382 949 1)
Population mean number of elite cases: 5.36
Count of perfect (error zero) individuals by case: (383 566 383 567 566 0 566 382 949 1)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction tag_integer_347} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items})
Best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items in2 exec_y (exec_y_when_autoconstructing (exec_noop boolean_dup_times boolean_dup_times exec_dup_items boolean_xor tag_integer_347) tag_integer_829 exec_flush in4) integer_dup exec_dup_items)
Errors: [1 0 1 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 20
Size: 23
Percent parens: 0.130
--- Population Statistics ---
Average total errors in population: 5.637
Median total errors in population: 5
Error averages by case: (0.617 0.434 0.617 0.433 0.434 1.0 0.434 0.618 0.051 0.999)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 21.646
Average program size in population (points): 30.499
Average percent parens in population: 0.287
Minimum age in population: 50.20534199848771
Maximum age in population: 56.1499804869527
Average age in population: 54.10940232418975
Median age in population: 54.19668878086668
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 21762634
--- Timings ---
Current time: 1559314459949 milliseconds
Total Time:         115.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.5 seconds, 64.4%
Fitness Testing:     26.3 seconds, 22.8%
Report:              14.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction tag_integer_347} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_eq})
Lexicase best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items in2 exec_y (exec_y_when_autoconstructing (exec_rot (boolean_dup_times exec_dup_items boolean_shove exec_y (boolean_xor tag_integer_347) tag_integer_829 exec_flush in4) (integer_dup exec_dup_items boolean_and exec_while (integer_lt integer_dup_items) integer_max integer_eq) ())))
Lexicase best errors: [1 0 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction tag_integer_347} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_eq})
Zero cases best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items in2 exec_y (exec_y_when_autoconstructing (exec_rot (boolean_dup_times exec_dup_items boolean_shove exec_y (boolean_xor tag_integer_347) tag_integer_829 exec_flush in4) (integer_dup exec_dup_items boolean_and exec_while (integer_lt integer_dup_items) integer_max integer_eq) ())))
Zero cases best errors: [1 0 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 461 342 1000 952 1000 954 342 1000 460)
Population mean number of elite cases: 7.51
Count of perfect (error zero) individuals by case: (0 461 342 0 952 0 954 342 0 460)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 1, :instruction tag_integer_347} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_eq})
Best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items in2 exec_y (exec_y_when_autoconstructing (exec_rot (boolean_dup_times exec_dup_items boolean_shove exec_y (boolean_xor tag_integer_347) tag_integer_829 exec_flush in4) (integer_dup exec_dup_items boolean_and exec_while (integer_lt integer_dup_items) integer_max integer_eq) ())))
Errors: [1 0 1 1 0 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 27
Size: 35
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 6.489
Median total errors in population: 6
Error averages by case: (1.0 0.539 0.658 1.0 0.048 1.0 0.046 0.658 1.0 0.54)
Error minima by case: (1 0 0 1 0 1 0 0 1 0)
Average genome size in population (length): 22.155
Average program size in population (points): 31.292
Average percent parens in population: 0.288
Minimum age in population: 51.20534199848771
Maximum age in population: 57.7009121497249
Average age in population: 55.69653684571164
Median age in population: 55.85996056348085
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 22392325
--- Timings ---
Current time: 1559314463306 milliseconds
Total Time:         118.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.4 seconds, 64.5%
Fitness Testing:     27.0 seconds, 22.8%
Report:              14.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: 26                 
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 58                 
Correct output: 1                   | Program output: 68                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 87                 
Correct output: 19                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 65                 
Correct output: 10                  | Program output: 92                 
Correct output: 2                   | Program output: 9                  
Correct output: 12                  | Program output: 62                 
Correct output: 1                   | Program output: 96                 
Correct output: 11                  | Program output: 71                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 67                 
Correct output: 6                   | Program output: 20                 
Correct output: 60                  | Program output: 87                 
Correct output: 23                  | Program output: 92                 
Correct output: 47                  | Program output: 57                 
Correct output: -92                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -86                 | Program output: -5                 
Correct output: -93                 | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: 38                 
Correct output: 12                  | Program output: 22                 
Correct output: -64                 | Program output: 72                 
Correct output: -77                 | Program output: -9                 
Correct output: -83                 | Program output: -17                
Correct output: -84                 | Program output: 38                 
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -16                
Correct output: -61                 | Program output: 53                 
Correct output: -80                 | Program output: 43                 
Correct output: -66                 | Program output: -44                
Correct output: -83                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 76                 
Correct output: -94                 | Program output: -34                
Correct output: -81                 | Program output: -67                
Correct output: -46                 | Program output: -35                
Correct output: -15                 | Program output: 70                 
Correct output: -3                  | Program output: 11                 
Correct output: -84                 | Program output: -57                
Correct output: -17                 | Program output: 18                 
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: 89                 
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: 20                 
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 95                 
Correct output: -97                 | Program output: 30                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: 86                 
Correct output: -62                 | Program output: 16                 
Correct output: -41                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: 47                 
Correct output: -41                 | Program output: 19                 
Correct output: -88                 | Program output: 24                 
Correct output: -88                 | Program output: 73                 
Correct output: -42                 | Program output: 6                  
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -68                
Correct output: -94                 | Program output: 72                 
Correct output: -1                  | Program output: 11                 
Correct output: -80                 | Program output: 91                 
Correct output: -52                 | Program output: 22                 
Correct output: -89                 | Program output: 97                 
Correct output: -76                 | Program output: -67                
Correct output: -68                 | Program output: 77                 
Correct output: -99                 | Program output: 79                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_inc in4 boolean_shove integer_sub print_integer in1 exec_yank exec_y (boolean_rot) exec_rot (exec_noop boolean_shove exec_y (boolean_rot tag_integer_335) tag_integer_829 exec_flush in4) (boolean_yank exec_dup_items boolean_and) ())
Lexicase best errors: [1 1 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_inc in4 boolean_shove integer_sub print_integer in1 exec_yank exec_y (boolean_rot) exec_rot (exec_noop boolean_shove exec_y (boolean_rot tag_integer_335) tag_integer_829 exec_flush in4) (boolean_yank exec_dup_items boolean_and) ())
Zero cases best errors: [1 1 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 505 1000 1000 974 1000 1000 469 1000 469)
Population mean number of elite cases: 7.42
Count of perfect (error zero) individuals by case: (2 505 0 0 974 0 0 469 0 469)
Population mean number of perfect (error zero) cases: 2.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Best program: (boolean_shove in4 boolean_shove integer_sub print_integer in1 exec_yank exec_y (boolean_rot) exec_rot (exec_do*times (exec_yankdup exec_y (boolean_and tag_integer_335) tag_integer_829 exec_flush in4) boolean_yank exec_dup_items integer_max exec_while (integer_lte)) () ())
Errors: [1 1 1 1 0 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 23
Size: 31
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.581
Median total errors in population: 8
Error averages by case: (0.998 0.495 1.0 1.0 0.026 1.0 1.0 0.531 1.0 0.531)
Error minima by case: (0 0 1 1 0 1 1 0 1 0)
Average genome size in population (length): 21.603
Average program size in population (points): 30.21
Average percent parens in population: 0.280
Minimum age in population: 53.46164798364043
Maximum age in population: 58.97537872572138
Average age in population: 57.07589390264129
Median age in population: 57.18205881060567
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 23131338
--- Timings ---
Current time: 1559314466537 milliseconds
Total Time:         121.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.2 seconds, 64.2%
Fitness Testing:     27.9 seconds, 22.9%
Report:              15.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 88                 
Correct output: 1                   | Program output: 76                 
Correct output: 31                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 5                  
Correct output: 2                   | Program output: 65                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 12                 
Correct output: 12                  | Program output: 91                 
Correct output: 1                   | Program output: 83                 
Correct output: 11                  | Program output: 59                 
Correct output: 16                  | Program output: 89                 
Correct output: 34                  | Program output: 50                 
Correct output: 6                   | Program output: 87                 
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 71                 
Correct output: -92                 | Program output: 1                  
Correct output: -57                 | Program output: 97                 
Correct output: -86                 | Program output: 60                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: 29                 
Correct output: -87                 | Program output: -33                
Correct output: -95                 | Program output: 91                 
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 54                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -73                
Correct output: -83                 | Program output: 49                 
Correct output: -84                 | Program output: -19                
Correct output: -40                 | Program output: 81                 
Correct output: -82                 | Program output: 18                 
Correct output: -61                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: 42                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 5                  
Correct output: -97                 | Program output: 4                  
Correct output: -90                 | Program output: 76                 
Correct output: -94                 | Program output: -9                 
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 60                 
Correct output: -15                 | Program output: 72                 
Correct output: -3                  | Program output: 100                
Correct output: -84                 | Program output: 50                 
Correct output: -17                 | Program output: 89                 
Correct output: -89                 | Program output: -27                
Correct output: -5                  | Program output: 0                  
Correct output: -47                 | Program output: 41                 
Correct output: -89                 | Program output: -49                
Correct output: -83                 | Program output: 45                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -48                
Correct output: -66                 | Program output: 55                 
Correct output: -73                 | Program output: 2                  
Correct output: -88                 | Program output: -1                 
Correct output: -97                 | Program output: 55                 
Correct output: -43                 | Program output: 65                 
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 57                 
Correct output: -97                 | Program output: 84                 
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: 7                  
Correct output: -70                 | Program output: 98                 
Correct output: -75                 | Program output: 63                 
Correct output: -94                 | Program output: 90                 
Correct output: -1                  | Program output: 13                 
Correct output: -80                 | Program output: 67                 
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: 24                 
Correct output: -99                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (in1) integer_gt exec_y (boolean_rot) exec_rot (exec_do*times (boolean_shove exec_y (boolean_and tag_integer_335) exec_noop boolean_swap) print_integer boolean_empty exec_s_when_autoconstructing () (exec_s_when_autoconstructing () () ()) ()) () ())
Lexicase best errors: [0 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 39
Percent parens: 0.410
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (in1) integer_gt exec_y (boolean_rot) exec_rot (exec_do*times (boolean_shove exec_y (boolean_and tag_integer_335) exec_noop boolean_swap) print_integer boolean_empty exec_s_when_autoconstructing () (exec_s_when_autoconstructing () () ()) ()) () ())
Zero cases best errors: [0 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 39
Percent parens: 0.410
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 242 784 1 242 1000 535 539 1000 172)
Population mean number of elite cases: 4.52
Count of perfect (error zero) individuals by case: (1 242 784 1 242 0 535 539 0 172)
Population mean number of perfect (error zero) cases: 2.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (in1) integer_gt exec_y (boolean_rot) exec_rot (exec_do*times (boolean_shove exec_y (boolean_and tag_integer_335) exec_noop boolean_swap) print_integer boolean_empty exec_s_when_autoconstructing () (exec_s_when_autoconstructing () () ()) ()) () ())
Errors: [0 1 0 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 23
Size: 39
Percent parens: 0.410
--- Population Statistics ---
Average total errors in population: 7.484
Median total errors in population: 7
Error averages by case: (0.999 0.758 0.216 0.999 0.758 1.0 0.465 0.461 1.0 0.828)
Error minima by case: (0 0 0 0 0 1 0 0 1 0)
Average genome size in population (length): 21.578
Average program size in population (points): 30.47
Average percent parens in population: 0.287
Minimum age in population: 55.4534821632551
Maximum age in population: 60.69809914352663
Average age in population: 58.54869872730155
Median age in population: 58.59568741305338
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 23988358
--- Timings ---
Current time: 1559314469714 milliseconds
Total Time:         125.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.9 seconds, 63.9%
Fitness Testing:     28.8 seconds, 23.0%
Report:              16.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_rot in3 print_integer integer_gte integer_mult integer_inc in2 exec_y (exec_y_when_autoconstructing (exec_noop exec_y (boolean_rot) exec_rot (exec_do*times (print_integer) in1) (exec_yank exec_dup_items boolean_rot) (exec_rot (exec_do*times (boolean_shove exec_y (boolean_and tag_integer_335) tag_integer_829 boolean_yank exec_dup_times (boolean_pop))) () ()))))
Lexicase best errors: [0 0 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_rot in3 print_integer integer_gte integer_mult integer_inc in2 exec_y (exec_y_when_autoconstructing (exec_noop exec_y (boolean_rot) exec_rot (exec_do*times (print_integer) in1) (exec_yank exec_dup_items boolean_rot) (exec_rot (exec_do*times (boolean_shove exec_y (boolean_and tag_integer_335) tag_integer_829 boolean_yank exec_dup_times (boolean_pop))) () ()))))
Zero cases best errors: [0 0 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (264 658 1 273 264 273 1 656 393 929)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (264 658 1 273 264 273 1 656 393 929)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte})
Best program: (integer_rot integer_rot in3 print_integer integer_gte boolean_flush exec_y (exec_shove () boolean_yank exec_y_when_autoconstructing (exec_flush exec_noop) exec_s_when_autoconstructing (exec_y (boolean_and tag_integer_335) boolean_and tag_integer_335) (tag_integer_829 exec_flush boolean_dup) (boolean_yank exec_dup_items boolean_and boolean_or integer_lte)))
Errors: [0 0 1 1 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 26
Size: 34
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.288
Median total errors in population: 6
Error averages by case: (0.736 0.342 0.999 0.727 0.736 0.727 0.999 0.344 0.607 0.071)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.45
Average program size in population (points): 34.354
Average percent parens in population: 0.337
Minimum age in population: 57.05529038037639
Maximum age in population: 61.88368199149409
Average age in population: 60.3504466440487
Median age in population: 60.34840367038123
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 290
Genome diversity (% unique genomes):	 0.557
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 290
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 24872798
--- Timings ---
Current time: 1559314472724 milliseconds
Total Time:         128.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.8 seconds, 63.6%
Fitness Testing:     29.8 seconds, 23.2%
Report:              16.8 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items in2 exec_y (exec_y_when_autoconstructing (integer_fromboolean exec_y (boolean_empty integer_yank exec_s_when_autoconstructing () () ()))))
Lexicase best errors: [0 0 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items in2 exec_y (exec_y_when_autoconstructing (integer_fromboolean exec_y (boolean_empty integer_yank exec_s_when_autoconstructing () () ()))))
Zero cases best errors: [0 0 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (355 751 380 177 220 355 204 355 955 220)
Population mean number of elite cases: 3.97
Count of perfect (error zero) individuals by case: (355 751 380 177 220 355 204 355 955 220)
Population mean number of perfect (error zero) cases: 3.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_integer_335} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (integer_inc boolean_swap boolean_invert_first_then_and boolean_pop exec_s (in3 exec_y_when_autoconstructing (print_integer exec_do*while (print_integer) in1) integer_gt exec_y (boolean_rot) exec_rot (exec_do*times (boolean_shove exec_y (boolean_and tag_integer_335) exec_noop boolean_swap) print_integer boolean_empty exec_s_when_autoconstructing () (exec_s_when_autoconstructing () () ()) ()) () ()) () ())
Errors: [0 0 1 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 44
Percent parens: 0.409
--- Population Statistics ---
Average total errors in population: 6.028
Median total errors in population: 6
Error averages by case: (0.645 0.249 0.62 0.823 0.78 0.645 0.796 0.645 0.045 0.78)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.149
Average program size in population (points): 30.295
Average percent parens in population: 0.333
Minimum age in population: 58.22813135031174
Maximum age in population: 63.71469389597041
Average age in population: 61.80195957309891
Median age in population: 61.81132113201602
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 183
Genome diversity (% unique genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 186
Syntactic diversity (% unique Push programs):	 0.503
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 25525785
--- Timings ---
Current time: 1559314476358 milliseconds
Total Time:         131.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.1 seconds, 63.8%
Fitness Testing:     30.5 seconds, 23.2%
Report:              17.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 5                  
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: -33                
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: 42                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: -49                
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 2                  
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 57                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: 7                  
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Lexicase best errors: [0 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 22
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Zero cases best errors: [0 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 22
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (136 197 197 348 947 680 267 197 348 136)
Population mean number of elite cases: 3.45
Count of perfect (error zero) individuals by case: (136 197 197 348 947 680 267 197 348 136)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Errors: [0 0 0 1 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 14
Size: 22
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 6.547
Median total errors in population: 6
Error averages by case: (0.864 0.803 0.803 0.652 0.053 0.32 0.733 0.803 0.652 0.864)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.504
Average program size in population (points): 30.617
Average percent parens in population: 0.328
Minimum age in population: 59.22813135031174
Maximum age in population: 64.9901498078616
Average age in population: 63.25860848196578
Median age in population: 63.33333855998308
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 26227170
--- Timings ---
Current time: 1559314480036 milliseconds
Total Time:         135.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.8 seconds, 63.9%
Fitness Testing:     31.3 seconds, 23.1%
Report:              17.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 5                  
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: -33                
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: 42                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: -49                
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 2                  
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 57                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: 7                  
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Lexicase best errors: [0 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 22
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Zero cases best errors: [0 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 22
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (579 242 575 128 574 128 573 577 576 242)
Population mean number of elite cases: 4.19
Count of perfect (error zero) individuals by case: (579 242 575 128 574 128 573 577 576 242)
Population mean number of perfect (error zero) cases: 4.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Errors: [0 1 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 14
Size: 22
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 5.806
Median total errors in population: 4
Error averages by case: (0.421 0.758 0.425 0.872 0.426 0.872 0.427 0.423 0.424 0.758)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.395
Average program size in population (points): 24.585
Average percent parens in population: 0.336
Minimum age in population: 62.13500105765252
Maximum age in population: 66.46536086756055
Average age in population: 65.04105469050597
Median age in population: 64.98658832278261
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 526
Genome diversity (% unique genomes):	 0.382
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 537
Syntactic diversity (% unique Push programs):	 0.369
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 26627239
--- Timings ---
Current time: 1559314482866 milliseconds
Total Time:         138.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.0 seconds, 64.2%
Fitness Testing:     31.8 seconds, 22.9%
Report:              17.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 58                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 65                 
Correct output: 10                  | Program output: 89                 
Correct output: 2                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 20                 
Correct output: 60                  | Program output: 87                 
Correct output: 23                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: -20                
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: 20                 
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: 72                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -12                
Correct output: -80                 | Program output: -21                
Correct output: -66                 | Program output: -44                
Correct output: -83                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -67                
Correct output: -46                 | Program output: -35                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: -57                
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: 86                 
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -64                
Correct output: -88                 | Program output: -60                
Correct output: -42                 | Program output: 6                  
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: 22                 
Correct output: -89                 | Program output: 40                 
Correct output: -76                 | Program output: -67                
Correct output: -68                 | Program output: 77                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 boolean_invert_first_then_and integer_min)) () ()))
Lexicase best errors: [1 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 22
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 boolean_invert_first_then_and integer_min)) () ()))
Zero cases best errors: [1 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 22
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 467 467 427 467 467 425 591 951 591)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (175 467 467 427 467 467 425 591 951 591)
Population mean number of perfect (error zero) cases: 5.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (in2 integer_min)) () ()))
Errors: [1 0 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 12
Size: 20
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 4.972
Median total errors in population: 5
Error averages by case: (0.825 0.533 0.533 0.573 0.533 0.533 0.575 0.409 0.049 0.409)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.27
Average program size in population (points): 23.577
Average percent parens in population: 0.354
Minimum age in population: 63.31035811497895
Maximum age in population: 67.97784371419368
Average age in population: 66.81798871456245
Median age in population: 66.68036330824543
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 236
Genome diversity (% unique genomes):	 0.309
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 242
Syntactic diversity (% unique Push programs):	 0.293
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 26919365
--- Timings ---
Current time: 1559314485185 milliseconds
Total Time:         141.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.8 seconds, 64.4%
Fitness Testing:     32.1 seconds, 22.8%
Report:              17.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 58                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 65                 
Correct output: 10                  | Program output: 89                 
Correct output: 2                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 20                 
Correct output: 60                  | Program output: 87                 
Correct output: 23                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: -20                
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: 20                 
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: 72                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -12                
Correct output: -80                 | Program output: -21                
Correct output: -66                 | Program output: -44                
Correct output: -83                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -67                
Correct output: -46                 | Program output: -35                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: -57                
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: 86                 
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -64                
Correct output: -88                 | Program output: -60                
Correct output: -42                 | Program output: 6                  
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: 22                 
Correct output: -89                 | Program output: 40                 
Correct output: -76                 | Program output: -67                
Correct output: -68                 | Program output: 77                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (in2 integer_min)) () ()))
Lexicase best errors: [0 1 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 20
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (in2 integer_min)) () ()))
Zero cases best errors: [0 1 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 20
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (690 84 692 84 514 470 960 690 514 690)
Population mean number of elite cases: 5.39
Count of perfect (error zero) individuals by case: (690 84 692 84 514 470 960 690 514 690)
Population mean number of perfect (error zero) cases: 5.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (in2 integer_min)) () ()))
Errors: [0 1 0 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 12
Size: 20
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 4.612
Median total errors in population: 4
Error averages by case: (0.31 0.916 0.308 0.916 0.486 0.53 0.04 0.31 0.486 0.31)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.105
Average program size in population (points): 22.331
Average percent parens in population: 0.369
Minimum age in population: 66.06885965641914
Maximum age in population: 69.68036330824543
Average age in population: 68.35110103783472
Median age in population: 68.43447782084476
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 131
Genome diversity (% unique genomes):	 0.296
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.273
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 27154679
--- Timings ---
Current time: 1559314487469 milliseconds
Total Time:         143.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.6 seconds, 64.7%
Fitness Testing:     32.4 seconds, 22.6%
Report:              18.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 5                  
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: -33                
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: 42                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: -49                
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 2                  
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 57                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: 7                  
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Lexicase best errors: [0 0 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 22
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Zero cases best errors: [0 0 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 22
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 519 206 206 946 514 206 282 282 518)
Population mean number of elite cases: 3.96
Count of perfect (error zero) individuals by case: (283 519 206 206 946 514 206 282 282 518)
Population mean number of perfect (error zero) cases: 3.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Errors: [0 0 1 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 14
Size: 22
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 6.038
Median total errors in population: 6
Error averages by case: (0.717 0.481 0.794 0.794 0.054 0.486 0.794 0.718 0.718 0.482)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.882
Average program size in population (points): 23.177
Average percent parens in population: 0.361
Minimum age in population: 67.06885965641914
Maximum age in population: 71.42998091692036
Average age in population: 69.77888231775299
Median age in population: 69.8838558418941
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 147
Genome diversity (% unique genomes):	 0.35
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.32
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 27438048
--- Timings ---
Current time: 1559314490007 milliseconds
Total Time:         145.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.7 seconds, 64.9%
Fitness Testing:     32.8 seconds, 22.5%
Report:              18.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 5                  
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: -33                
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: 42                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: -49                
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 2                  
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 57                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: 7                  
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_lt} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_eq})
Lexicase best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items in2 exec_y (exec_y_when_autoconstructing (exec_noop boolean_dup_times boolean_dup_times exec_dup_items boolean_xor exec_stackdepth) tag_integer_829 exec_flush in4) integer_dup exec_dup_items integer_yankdup exec_while (integer_lt) integer_dup_items integer_max integer_eq)
Lexicase best errors: [0 0 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.133
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_lt} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_eq})
Zero cases best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items in2 exec_y (exec_y_when_autoconstructing (exec_noop boolean_dup_times boolean_dup_times exec_dup_items boolean_xor exec_stackdepth) tag_integer_829 exec_flush in4) integer_dup exec_dup_items integer_yankdup exec_while (integer_lt) integer_dup_items integer_max integer_eq)
Zero cases best errors: [0 0 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (843 940 623 554 553 29 941 280 280 280)
Population mean number of elite cases: 5.32
Count of perfect (error zero) individuals by case: (843 940 623 554 553 29 941 280 280 280)
Population mean number of perfect (error zero) cases: 5.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Errors: [0 0 0 0 0 1 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 14
Size: 22
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 4.677
Median total errors in population: 4
Error averages by case: (0.157 0.06 0.377 0.446 0.447 0.971 0.059 0.72 0.72 0.72)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.76
Average program size in population (points): 23.643
Average percent parens in population: 0.333
Minimum age in population: 68.06885965641914
Maximum age in population: 73.26676264587245
Average age in population: 71.18238184069205
Median age in population: 71.24733746657724
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 323
Genome diversity (% unique genomes):	 0.34
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 341
Syntactic diversity (% unique Push programs):	 0.32
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 27808381
--- Timings ---
Current time: 1559314492477 milliseconds
Total Time:         148.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        96.5 seconds, 65.1%
Fitness Testing:     33.2 seconds, 22.4%
Report:              18.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 58                 
Correct output: 1                   | Program output: 68                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 65                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 9                  
Correct output: 12                  | Program output: 62                 
Correct output: 1                   | Program output: 83                 
Correct output: 11                  | Program output: 59                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 50                 
Correct output: 6                   | Program output: 20                 
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 57                 
Correct output: -92                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -86                 | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -73                
Correct output: -83                 | Program output: -17                
Correct output: -84                 | Program output: -19                
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -16                
Correct output: -61                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 76                 
Correct output: -94                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -35                
Correct output: -15                 | Program output: 70                 
Correct output: -3                  | Program output: 11                 
Correct output: -84                 | Program output: -57                
Correct output: -17                 | Program output: 18                 
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: 0                  
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: 20                 
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -1                 
Correct output: -97                 | Program output: 30                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: 47                 
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: 6                  
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -68                
Correct output: -94                 | Program output: 72                 
Correct output: -1                  | Program output: 11                 
Correct output: -80                 | Program output: 67                 
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: 24                 
Correct output: -99                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc in4 integer_inc exec_rot () (print_integer) (exec_swap (exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()) ()))
Lexicase best errors: [1 0 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 22
Percent parens: 0.455
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc in4 integer_inc exec_rot () (print_integer) (exec_swap (exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()) ()))
Zero cases best errors: [1 0 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 22
Percent parens: 0.455
--- Lexicase Population Statistics ---
Count of elite individuals by case: (416 288 297 944 932 416 289 415 425 291)
Population mean number of elite cases: 4.71
Count of perfect (error zero) individuals by case: (416 288 297 944 932 416 289 415 425 291)
Population mean number of perfect (error zero) cases: 4.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min})
Best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 boolean_dup integer_min)) () ()))
Errors: [1 0 0 0 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 14
Size: 22
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 5.287
Median total errors in population: 5
Error averages by case: (0.584 0.712 0.703 0.056 0.068 0.584 0.711 0.585 0.575 0.709)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.878
Average program size in population (points): 23.713
Average percent parens in population: 0.332
Minimum age in population: 69.81438455148452
Maximum age in population: 74.58604017765488
Average age in population: 72.64310618434963
Median age in population: 72.7215199521984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.379
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.358
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 28152671
--- Timings ---
Current time: 1559314494835 milliseconds
Total Time:         150.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        98.3 seconds, 65.3%
Fitness Testing:     33.6 seconds, 22.3%
Report:              18.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 67                 
Correct output: 1                   | Program output: 28                 
Correct output: 4                   | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 46                 
Correct output: 18                  | Program output: 30                 
Correct output: 6                   | Program output: 23                 
Correct output: 10                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 72                 
Correct output: 16                  | Program output: 34                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 72                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -86                 | Program output: -11                
Correct output: -87                 | Program output: -62                
Correct output: -95                 | Program output: 80                 
Correct output: -8                  | Program output: 25                 
Correct output: 12                  | Program output: 28                 
Correct output: -64                 | Program output: -5                 
Correct output: -77                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: 70                 
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: 73                 
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: 21                 
Correct output: -89                 | Program output: -15                
Correct output: -97                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: 21                 
Correct output: -81                 | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 87                 
Correct output: -89                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: 73                 
Correct output: -89                 | Program output: -20                
Correct output: -83                 | Program output: -6                 
Correct output: -81                 | Program output: -77                
Correct output: -77                 | Program output: 46                 
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: 21                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: 42                 
Correct output: -59                 | Program output: 90                 
Correct output: -62                 | Program output: 89                 
Correct output: -41                 | Program output: 41                 
Correct output: -90                 | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: 37                 
Correct output: -88                 | Program output: -69                
Correct output: -88                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -41                
Correct output: -75                 | Program output: 95                 
Correct output: -94                 | Program output: 77                 
Correct output: -1                  | Program output: 91                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 87                 
Correct output: -89                 | Program output: 89                 
Correct output: -76                 | Program output: -5                 
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_990} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items tag_boolean_990 exec_do*times (exec_do*range (integer_shove) exec_swap () (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_swap (exec_while (integer_lte)) ()) () ())))
Lexicase best errors: [1 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.407
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_990} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_rot in3 print_integer integer_gte integer_mult integer_dup_items tag_boolean_990 exec_do*times (exec_do*range (integer_shove) exec_swap () (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_swap (exec_while (integer_lte)) ()) () ())))
Zero cases best errors: [1 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.407
--- Lexicase Population Statistics ---
Count of elite individuals by case: (516 351 352 352 955 352 320 351 515 515)
Population mean number of elite cases: 4.58
Count of perfect (error zero) individuals by case: (516 351 352 352 955 352 320 351 515 515)
Population mean number of perfect (error zero) cases: 4.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 2, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction tag_integer_829} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while})
Best program: (integer_rot in3 print_integer integer_gte integer_mult integer_inc in2 exec_y (exec_y_when_autoconstructing (exec_noop boolean_dup_times exec_dup_items integer_lte) exec_y (boolean_empty exec_rot () (tag_integer_829 exec_flush in4) (boolean_yank integer_gte boolean_and) exec_while (integer_lt integer_dup_items) integer_max boolean_rot exec_while ())))
Errors: [1 0 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 5.421
Median total errors in population: 5
Error averages by case: (0.484 0.649 0.648 0.648 0.045 0.648 0.68 0.649 0.485 0.485)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.674
Average program size in population (points): 23.609
Average percent parens in population: 0.335
Minimum age in population: 70.81438455148452
Maximum age in population: 76.13717518231435
Average age in population: 74.21968700984299
Median age in population: 74.31191070028989
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 217
Genome diversity (% unique genomes):	 0.399
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 218
Syntactic diversity (% unique Push programs):	 0.372
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 28467318
--- Timings ---
Current time: 1559314497256 milliseconds
Total Time:         153.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.2 seconds, 65.5%
Fitness Testing:     34.0 seconds, 22.2%
Report:              18.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 5                  
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: -33                
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: 42                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: -49                
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 2                  
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 57                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: 7                  
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 22
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 22
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (389 391 385 389 389 934 934 529 529 391)
Population mean number of elite cases: 5.26
Count of perfect (error zero) individuals by case: (389 391 385 389 389 934 934 529 529 391)
Population mean number of perfect (error zero) cases: 5.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 14
Size: 22
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 4.74
Median total errors in population: 6
Error averages by case: (0.611 0.609 0.615 0.611 0.611 0.066 0.066 0.471 0.471 0.609)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.405
Average program size in population (points): 24.177
Average percent parens in population: 0.318
Minimum age in population: 71.81438455148452
Maximum age in population: 77.5118437752523
Average age in population: 75.51553226391057
Median age in population: 75.62709048434223
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.44
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 28847151
--- Timings ---
Current time: 1559314499827 milliseconds
Total Time:         155.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       102.1 seconds, 65.6%
Fitness Testing:     34.5 seconds, 22.1%
Report:              18.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 5                  
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: -33                
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: 42                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: -49                
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 2                  
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 57                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: 7                  
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Lexicase best errors: [0 1 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 22
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Zero cases best errors: [0 1 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 22
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (657 250 650 929 654 250 655 250 647 25)
Population mean number of elite cases: 4.97
Count of perfect (error zero) individuals by case: (657 250 650 929 654 250 655 250 647 25)
Population mean number of perfect (error zero) cases: 4.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (integer_max in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Errors: [0 1 0 0 0 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 14
Size: 22
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 5.033
Median total errors in population: 4
Error averages by case: (0.343 0.75 0.35 0.071 0.346 0.75 0.345 0.75 0.353 0.975)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.225
Average program size in population (points): 23.075
Average percent parens in population: 0.338
Minimum age in population: 73.48172016284764
Maximum age in population: 79.1603016961494
Average age in population: 77.01601863899482
Median age in population: 77.09226129233117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 248
Genome diversity (% unique genomes):	 0.415
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 280
Syntactic diversity (% unique Push programs):	 0.386
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 29132325
--- Timings ---
Current time: 1559314502166 milliseconds
Total Time:         157.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       103.9 seconds, 65.8%
Fitness Testing:     34.8 seconds, 22.0%
Report:              19.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 5                  
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: -33                
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: 42                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: -49                
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 2                  
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 57                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: 7                  
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc in4 integer_inc boolean_eq integer_dup_times exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Lexicase best errors: [0 0 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 22
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc in4 integer_inc boolean_eq integer_dup_times exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Zero cases best errors: [0 0 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 22
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (418 417 317 271 417 519 271 419 519 926)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (418 417 317 271 417 519 271 419 519 926)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (integer_inc in4 integer_inc exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Errors: [0 0 1 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 12
Size: 20
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 5.506
Median total errors in population: 5
Error averages by case: (0.582 0.583 0.683 0.729 0.583 0.481 0.729 0.581 0.481 0.074)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.339
Average program size in population (points): 23.138
Average percent parens in population: 0.335
Minimum age in population: 75.044202663054
Maximum age in population: 80.59330531411248
Average age in population: 78.40623184830957
Median age in population: 78.46429287860542
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.442
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.409
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 29431495
--- Timings ---
Current time: 1559314504480 milliseconds
Total Time:         160.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       105.7 seconds, 66.0%
Fitness Testing:     35.2 seconds, 22.0%
Report:              19.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 78                 
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: 83                 
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 66                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 5                  
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 51                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 37                 
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -82                
Correct output: -87                 | Program output: -33                
Correct output: -95                 | Program output: -86                
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: 79                 
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -59                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: 42                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -72                
Correct output: -97                 | Program output: -24                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: 47                 
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -24                
Correct output: -89                 | Program output: -49                
Correct output: -83                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: 2                  
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: 32                 
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 57                 
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: 7                  
Correct output: -70                 | Program output: 95                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_min})
Lexicase best program: (integer_inc integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Lexicase best errors: [1 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 23
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_min})
Zero cases best program: (integer_inc integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Zero cases best errors: [1 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 23
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (130 568 650 499 566 130 958 649 652 567)
Population mean number of elite cases: 5.37
Count of perfect (error zero) individuals by case: (130 568 650 499 566 130 958 649 652 567)
Population mean number of perfect (error zero) cases: 5.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 in2 integer_min)) () ()))
Errors: [1 0 0 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 14
Size: 22
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 4.631
Median total errors in population: 5
Error averages by case: (0.87 0.432 0.35 0.501 0.434 0.87 0.042 0.351 0.348 0.433)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.044
Average program size in population (points): 21.563
Average percent parens in population: 0.344
Minimum age in population: 76.57254658185968
Maximum age in population: 81.96727761214888
Average age in population: 79.79645898506001
Median age in population: 79.88268703810293
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 164
Genome diversity (% unique genomes):	 0.285
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.26
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 29629412
--- Timings ---
Current time: 1559314506894 milliseconds
Total Time:         162.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       107.7 seconds, 66.2%
Fitness Testing:     35.4 seconds, 21.8%
Report:              19.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 59                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 14                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 18                 
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -1                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -68                
Correct output: -94                 | Program output: 72                 
Correct output: -1                  | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min})
Lexicase best program: (integer_rot in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_do*range (boolean_pop in1 exec_dup (integer_min))))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 20
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min})
Zero cases best program: (integer_rot in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_do*range (boolean_pop in1 exec_dup (integer_min))))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 20
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (911 953 260 595 259 259 959 938 604 381)
Population mean number of elite cases: 6.12
Count of perfect (error zero) individuals by case: (911 953 260 595 259 259 959 938 604 381)
Population mean number of perfect (error zero) cases: 6.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min})
Best program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 18
Size: 27
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 3.881
Median total errors in population: 4
Error averages by case: (0.089 0.047 0.74 0.405 0.741 0.741 0.041 0.062 0.396 0.619)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.481
Average program size in population (points): 21.095
Average percent parens in population: 0.309
Minimum age in population: 77.57254658185968
Maximum age in population: 83.11767807384014
Average age in population: 81.1783109703149
Median age in population: 81.25966093805899
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 166
Genome diversity (% unique genomes):	 0.335
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.301
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 29812412
--- Timings ---
Current time: 1559314509146 milliseconds
Total Time:         164.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       109.5 seconds, 66.4%
Fitness Testing:     35.7 seconds, 21.6%
Report:              19.6 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 59                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 14                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 18                 
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -1                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -68                
Correct output: -94                 | Program output: 72                 
Correct output: -1                  | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 27
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 27
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (559 557 799 799 799 576 557 569 372 369)
Population mean number of elite cases: 5.96
Count of perfect (error zero) individuals by case: (559 557 799 799 799 576 557 569 372 369)
Population mean number of perfect (error zero) cases: 5.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min})
Best program: (integer_rot in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_do*range (boolean_pop in1 exec_dup (integer_min))))
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 14
Size: 20
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 4.044
Median total errors in population: 5
Error averages by case: (0.441 0.443 0.201 0.201 0.201 0.424 0.443 0.431 0.628 0.631)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.24
Average program size in population (points): 22.549
Average percent parens in population: 0.320
Minimum age in population: 80.46348776041962
Maximum age in population: 84.40956793345175
Average age in population: 82.81638814332509
Median age in population: 82.78446110335913
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 232
Genome diversity (% unique genomes):	 0.289
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 237
Syntactic diversity (% unique Push programs):	 0.27
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 30067991
--- Timings ---
Current time: 1559314511506 milliseconds
Total Time:         167.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       111.4 seconds, 66.6%
Fitness Testing:     36.0 seconds, 21.5%
Report:              19.8 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 58                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 65                 
Correct output: 10                  | Program output: 89                 
Correct output: 2                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 20                 
Correct output: 60                  | Program output: 87                 
Correct output: 23                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: -20                
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: 20                 
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: 72                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -12                
Correct output: -80                 | Program output: -21                
Correct output: -66                 | Program output: -44                
Correct output: -83                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -67                
Correct output: -46                 | Program output: -35                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: -57                
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: 86                 
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -64                
Correct output: -88                 | Program output: -60                
Correct output: -42                 | Program output: 6                  
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: 22                 
Correct output: -89                 | Program output: 40                 
Correct output: -76                 | Program output: -67                
Correct output: -68                 | Program output: 77                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_min})
Lexicase best program: (integer_rot in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (boolean_and boolean_pop in2 integer_min) () ()))
Lexicase best errors: [0 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 21
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_min})
Zero cases best program: (integer_rot in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (boolean_and boolean_pop in2 integer_min) () ()))
Zero cases best errors: [0 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 21
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (689 389 389 653 605 690 646 391 391 696)
Population mean number of elite cases: 5.54
Count of perfect (error zero) individuals by case: (689 389 389 653 605 690 646 391 391 696)
Population mean number of perfect (error zero) cases: 5.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min})
Best program: (integer_inc in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_flush exec_s_when_autoconstructing (exec_do*range (boolean_pop boolean_dup_times in2 integer_min)) () ()))
Errors: [0 0 0 1 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 14
Size: 22
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 4.461
Median total errors in population: 4
Error averages by case: (0.311 0.611 0.611 0.347 0.395 0.31 0.354 0.609 0.609 0.304)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.211
Average program size in population (points): 22.213
Average percent parens in population: 0.310
Minimum age in population: 81.87187679195019
Maximum age in population: 85.89172443143987
Average age in population: 84.29477987487167
Median age in population: 84.38288615212531
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 229
Genome diversity (% unique genomes):	 0.286
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 238
Syntactic diversity (% unique Push programs):	 0.258
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 30303430
--- Timings ---
Current time: 1559314513811 milliseconds
Total Time:         169.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       113.3 seconds, 66.8%
Fitness Testing:     36.3 seconds, 21.4%
Report:              19.9 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 96                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -5                 
Correct output: -96                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 58                 
Correct output: 1                   | Program output: 28                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 48                 
Correct output: 19                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 65                 
Correct output: 10                  | Program output: 89                 
Correct output: 2                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 20                 
Correct output: 60                  | Program output: 87                 
Correct output: 23                  | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: -92                 | Program output: -20                
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -48                
Correct output: -93                 | Program output: 20                 
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -64                 | Program output: 72                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -59                
Correct output: -61                 | Program output: -12                
Correct output: -80                 | Program output: -21                
Correct output: -66                 | Program output: -44                
Correct output: -83                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -67                
Correct output: -46                 | Program output: -35                
Correct output: -15                 | Program output: -15                
Correct output: -3                  | Program output: -3                 
Correct output: -84                 | Program output: -57                
Correct output: -17                 | Program output: -17                
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: 86                 
Correct output: -62                 | Program output: -62                
Correct output: -41                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -31                
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -64                
Correct output: -88                 | Program output: -60                
Correct output: -42                 | Program output: 6                  
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -1                  | Program output: -1                 
Correct output: -80                 | Program output: -69                
Correct output: -52                 | Program output: 22                 
Correct output: -89                 | Program output: 40                 
Correct output: -76                 | Program output: -67                
Correct output: -68                 | Program output: 77                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_min})
Lexicase best program: (integer_rot in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (boolean_and boolean_pop in2 integer_min) () ()))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 21
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_min})
Zero cases best program: (integer_rot in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (boolean_and boolean_pop in2 integer_min) () ()))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 21
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (634 622 369 467 624 955 634 634 622 915)
Population mean number of elite cases: 6.48
Count of perfect (error zero) individuals by case: (634 622 369 467 624 955 634 634 622 915)
Population mean number of perfect (error zero) cases: 6.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_min})
Best program: (integer_rot in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (boolean_and boolean_pop in2 integer_min) () ()))
Errors: [0 0 1 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 14
Size: 21
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 3.524
Median total errors in population: 3
Error averages by case: (0.366 0.378 0.631 0.533 0.376 0.045 0.366 0.366 0.378 0.085)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.622
Average program size in population (points): 21.285
Average percent parens in population: 0.308
Minimum age in population: 82.87187679195019
Maximum age in population: 87.54784154580827
Average age in population: 85.75057902825088
Median age in population: 85.8315792035801
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.327
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.294
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 30505094
--- Timings ---
Current time: 1559314516007 milliseconds
Total Time:         171.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       115.1 seconds, 67.0%
Fitness Testing:     36.5 seconds, 21.3%
Report:              20.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 59                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 14                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 18                 
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -1                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -68                
Correct output: -94                 | Program output: 72                 
Correct output: -1                  | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 27
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 27
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (627 389 371 400 388 376 628 371 950 398)
Population mean number of elite cases: 4.90
Count of perfect (error zero) individuals by case: (627 389 371 400 388 376 628 371 950 398)
Population mean number of perfect (error zero) cases: 4.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min})
Best program: (integer_rot in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_do*range (boolean_pop in1 exec_dup (integer_min))))
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 14
Size: 20
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 5.102
Median total errors in population: 6
Error averages by case: (0.373 0.611 0.629 0.6 0.612 0.624 0.372 0.629 0.05 0.602)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.805
Average program size in population (points): 21.887
Average percent parens in population: 0.319
Minimum age in population: 84.33680243519795
Maximum age in population: 88.99844702091508
Average age in population: 87.2625205614826
Median age in population: 87.2931386295424
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.356
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.323
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 30721957
--- Timings ---
Current time: 1559314518277 milliseconds
Total Time:         174.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       116.9 seconds, 67.2%
Fitness Testing:     36.8 seconds, 21.1%
Report:              20.3 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 205
Test mean error for best: 0.20500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 59                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 14                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 18                 
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -1                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -68                
Correct output: -94                 | Program output: 72                 
Correct output: -1                  | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min})
Lexicase best program: (integer_rot in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_do*range (boolean_pop in1 exec_dup (integer_min))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 20
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min})
Zero cases best program: (integer_rot in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_do*range (boolean_pop in1 exec_dup (integer_min))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 20
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (607 607 698 910 956 708 937 613 455 613)
Population mean number of elite cases: 7.10
Count of perfect (error zero) individuals by case: (607 607 698 910 956 708 937 613 455 613)
Population mean number of perfect (error zero) cases: 7.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min})
Best program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 18
Size: 27
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 2.896
Median total errors in population: 3
Error averages by case: (0.393 0.393 0.302 0.09 0.044 0.292 0.063 0.387 0.545 0.387)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.064
Average program size in population (points): 21.938
Average percent parens in population: 0.307
Minimum age in population: 85.93656316631883
Maximum age in population: 90.7074644471439
Average age in population: 88.79327130203612
Median age in population: 88.86081914014466
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.305
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 181
Syntactic diversity (% unique Push programs):	 0.271
Total error diversity:				 0.01
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 30949652
--- Timings ---
Current time: 1559314520594 milliseconds
Total Time:         176.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       118.7 seconds, 67.3%
Fitness Testing:     37.1 seconds, 21.0%
Report:              20.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 59
Successful program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 27


Auto-simplifying with starting size: 27
step: 0
program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 500
program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 1000
program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 1500
program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 2000
program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 2500
program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 3000
program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 3500
program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 4000
program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 4500
program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 5000
program: (integer_inc in4 boolean_eq in4 in3 in4 integer_inc in4 boolean_shove exec_rot () (print_integer) (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_do*range (boolean_pop in1 exec_dup (integer_min))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 205
Test mean error for best: 0.20500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 85                  | Program output: 85                 
Correct output: -49                 | Program output: -49                
Correct output: 40                  | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -46                
Correct output: 78                  | Program output: 78                 
Correct output: -41                 | Program output: -41                
Correct output: 14                  | Program output: 14                 
Correct output: 81                  | Program output: 81                 
Correct output: 61                  | Program output: 61                 
Correct output: 51                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 18                 
Correct output: 1                   | Program output: 30                 
Correct output: 11                  | Program output: 59                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: 60                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 47                  | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 14                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -8                  | Program output: -8                 
Correct output: 12                  | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -82                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -66                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -15                 | Program output: 20                 
Correct output: -3                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 18                 
Correct output: -89                 | Program output: -89                
Correct output: -5                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: 8                  
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -1                 
Correct output: -97                 | Program output: -8                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -62                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -68                
Correct output: -94                 | Program output: 72                 
Correct output: -1                  | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -84                
;;******************************
