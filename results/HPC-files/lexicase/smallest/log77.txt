Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-4 -58 -4 -4] -58] [[0 0 80 0] 0] [[6 6 6 57] 6] [[-74 -74 -74 -55] -74] [[-29 -80 -80 -80] -80] [[89 -98 89 89] -98] [[-52 -2 -2 -2] -52] [[24 24 24 53] 24] [[20 91 91 91] 20] [[-57 -57 -11 -57] -57] [(26 26 26 26) 26] [(-15 -15 -15 -15) -15] [(54 54 54 54) 54] [(76 76 76 76) 76] [(61 61 61 61) 61] [(26 0 91 2) 0] [(16 22 43 95) 16] [(97 65 50 44) 44] [(89 24 84 52) 24] [(83 79 55 95) 55] [(75 31 37 2) 2] [(89 9 55 46) 9] [(54 22 81 72) 22] [(45 5 99 95) 5] [(27 90 51 54) 27] [(60 55 92 100) 55] [(82 82 5 49) 5] [(66 44 65 98) 44] [(88 30 39 56) 30] [(26 43 78 8) 8] [(41 88 93 41) 41] [(37 22 37 66) 22] [(64 42 1 88) 1] [(46 33 13 87) 13] [(26 90 72 54) 26] [(-37 -63 37 -95) -95] [(41 -79 90 53) -79] [(16 32 91 37) 16] [(1 -12 -67 -27) -67] [(24 38 -84 -65) -84] [(-25 59 -16 41) -25] [(33 29 -20 -8) -20] [(7 -95 -2 -80) -95] [(-86 -91 15 -68) -91] [(-51 8 -7 -31) -51] [(100 39 -3 10) -3] [(35 63 -96 31) -96] [(-9 10 26 22) -9] [(67 -12 27 12) -12] [(-17 46 9 -11) -17] [(17 53 72 -82) -82] [(-8 -78 -6 -100) -100] [(88 90 3 4) 3] [(-71 -36 -83 47) -83] [(-81 -74 -90 -88) -90] [(-90 7 -28 64) -90] [(-25 -55 -28 -27) -55] [(-77 84 -18 40) -77] [(-98 -93 20 -61) -98] [(17 -86 -37 -70) -86] [(-53 11 35 5) -53] [(3 -28 89 76) -28] [(-26 61 -46 -30) -46] [(-68 -80 -98 -96) -98] [(-72 -84 10 77) -84] [(13 20 48 39) 13] [(-91 67 -79 -37) -91] [(-98 -14 -21 10) -98] [(89 -27 98 -63) -63] [(-30 79 12 -5) -30] [(85 19 19 -51) -51] [(-27 39 -17 -87) -87] [(-81 -13 100 87) -81] [(98 90 -46 81) -46] [(-32 19 -4 58) -32] [(-84 0 -60 -4) -84] [(-64 -75 -18 96) -75] [(14 0 -58 -57) -58] [(18 -46 48 45) -46] [(78 76 65 -93) -93] [(-62 66 -8 67) -62] [(31 24 21 36) 21] [(34 -83 -32 7) -83] [(-44 69 99 91) -44] [(-99 1 30 36) -99] [(-42 -28 56 -99) -99] [(-24 -33 -87 -29) -87] [(-23 -1 -48 -2) -48] [(-8 -46 -1 97) -46] [(-14 -64 -19 -80) -80] [(13 -72 34 -98) -98] [(-64 -83 45 -60) -83] [(62 -95 98 69) -95] [(39 -24 -81 -23) -81] [(7 94 -68 -86) -86])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-4 -58 -4 -4] -58]
Train Case:   6 | Input/Output: [[0 0 80 0] 0]
Train Case:   7 | Input/Output: [[6 6 6 57] 6]
Train Case:   8 | Input/Output: [[-74 -74 -74 -55] -74]
Train Case:   9 | Input/Output: [[-29 -80 -80 -80] -80]
Train Case:  10 | Input/Output: [[89 -98 89 89] -98]
Train Case:  11 | Input/Output: [[-52 -2 -2 -2] -52]
Train Case:  12 | Input/Output: [[24 24 24 53] 24]
Train Case:  13 | Input/Output: [[20 91 91 91] 20]
Train Case:  14 | Input/Output: [[-57 -57 -11 -57] -57]
Train Case:  15 | Input/Output: [(26 26 26 26) 26]
Train Case:  16 | Input/Output: [(-15 -15 -15 -15) -15]
Train Case:  17 | Input/Output: [(54 54 54 54) 54]
Train Case:  18 | Input/Output: [(76 76 76 76) 76]
Train Case:  19 | Input/Output: [(61 61 61 61) 61]
Train Case:  20 | Input/Output: [(26 0 91 2) 0]
Train Case:  21 | Input/Output: [(16 22 43 95) 16]
Train Case:  22 | Input/Output: [(97 65 50 44) 44]
Train Case:  23 | Input/Output: [(89 24 84 52) 24]
Train Case:  24 | Input/Output: [(83 79 55 95) 55]
Train Case:  25 | Input/Output: [(75 31 37 2) 2]
Train Case:  26 | Input/Output: [(89 9 55 46) 9]
Train Case:  27 | Input/Output: [(54 22 81 72) 22]
Train Case:  28 | Input/Output: [(45 5 99 95) 5]
Train Case:  29 | Input/Output: [(27 90 51 54) 27]
Train Case:  30 | Input/Output: [(60 55 92 100) 55]
Train Case:  31 | Input/Output: [(82 82 5 49) 5]
Train Case:  32 | Input/Output: [(66 44 65 98) 44]
Train Case:  33 | Input/Output: [(88 30 39 56) 30]
Train Case:  34 | Input/Output: [(26 43 78 8) 8]
Train Case:  35 | Input/Output: [(41 88 93 41) 41]
Train Case:  36 | Input/Output: [(37 22 37 66) 22]
Train Case:  37 | Input/Output: [(64 42 1 88) 1]
Train Case:  38 | Input/Output: [(46 33 13 87) 13]
Train Case:  39 | Input/Output: [(26 90 72 54) 26]
Train Case:  40 | Input/Output: [(-37 -63 37 -95) -95]
Train Case:  41 | Input/Output: [(41 -79 90 53) -79]
Train Case:  42 | Input/Output: [(16 32 91 37) 16]
Train Case:  43 | Input/Output: [(1 -12 -67 -27) -67]
Train Case:  44 | Input/Output: [(24 38 -84 -65) -84]
Train Case:  45 | Input/Output: [(-25 59 -16 41) -25]
Train Case:  46 | Input/Output: [(33 29 -20 -8) -20]
Train Case:  47 | Input/Output: [(7 -95 -2 -80) -95]
Train Case:  48 | Input/Output: [(-86 -91 15 -68) -91]
Train Case:  49 | Input/Output: [(-51 8 -7 -31) -51]
Train Case:  50 | Input/Output: [(100 39 -3 10) -3]
Train Case:  51 | Input/Output: [(35 63 -96 31) -96]
Train Case:  52 | Input/Output: [(-9 10 26 22) -9]
Train Case:  53 | Input/Output: [(67 -12 27 12) -12]
Train Case:  54 | Input/Output: [(-17 46 9 -11) -17]
Train Case:  55 | Input/Output: [(17 53 72 -82) -82]
Train Case:  56 | Input/Output: [(-8 -78 -6 -100) -100]
Train Case:  57 | Input/Output: [(88 90 3 4) 3]
Train Case:  58 | Input/Output: [(-71 -36 -83 47) -83]
Train Case:  59 | Input/Output: [(-81 -74 -90 -88) -90]
Train Case:  60 | Input/Output: [(-90 7 -28 64) -90]
Train Case:  61 | Input/Output: [(-25 -55 -28 -27) -55]
Train Case:  62 | Input/Output: [(-77 84 -18 40) -77]
Train Case:  63 | Input/Output: [(-98 -93 20 -61) -98]
Train Case:  64 | Input/Output: [(17 -86 -37 -70) -86]
Train Case:  65 | Input/Output: [(-53 11 35 5) -53]
Train Case:  66 | Input/Output: [(3 -28 89 76) -28]
Train Case:  67 | Input/Output: [(-26 61 -46 -30) -46]
Train Case:  68 | Input/Output: [(-68 -80 -98 -96) -98]
Train Case:  69 | Input/Output: [(-72 -84 10 77) -84]
Train Case:  70 | Input/Output: [(13 20 48 39) 13]
Train Case:  71 | Input/Output: [(-91 67 -79 -37) -91]
Train Case:  72 | Input/Output: [(-98 -14 -21 10) -98]
Train Case:  73 | Input/Output: [(89 -27 98 -63) -63]
Train Case:  74 | Input/Output: [(-30 79 12 -5) -30]
Train Case:  75 | Input/Output: [(85 19 19 -51) -51]
Train Case:  76 | Input/Output: [(-27 39 -17 -87) -87]
Train Case:  77 | Input/Output: [(-81 -13 100 87) -81]
Train Case:  78 | Input/Output: [(98 90 -46 81) -46]
Train Case:  79 | Input/Output: [(-32 19 -4 58) -32]
Train Case:  80 | Input/Output: [(-84 0 -60 -4) -84]
Train Case:  81 | Input/Output: [(-64 -75 -18 96) -75]
Train Case:  82 | Input/Output: [(14 0 -58 -57) -58]
Train Case:  83 | Input/Output: [(18 -46 48 45) -46]
Train Case:  84 | Input/Output: [(78 76 65 -93) -93]
Train Case:  85 | Input/Output: [(-62 66 -8 67) -62]
Train Case:  86 | Input/Output: [(31 24 21 36) 21]
Train Case:  87 | Input/Output: [(34 -83 -32 7) -83]
Train Case:  88 | Input/Output: [(-44 69 99 91) -44]
Train Case:  89 | Input/Output: [(-99 1 30 36) -99]
Train Case:  90 | Input/Output: [(-42 -28 56 -99) -99]
Train Case:  91 | Input/Output: [(-24 -33 -87 -29) -87]
Train Case:  92 | Input/Output: [(-23 -1 -48 -2) -48]
Train Case:  93 | Input/Output: [(-8 -46 -1 97) -46]
Train Case:  94 | Input/Output: [(-14 -64 -19 -80) -80]
Train Case:  95 | Input/Output: [(13 -72 34 -98) -98]
Train Case:  96 | Input/Output: [(-64 -83 45 -60) -83]
Train Case:  97 | Input/Output: [(62 -95 98 69) -95]
Train Case:  98 | Input/Output: [(39 -24 -81 -23) -81]
Train Case:  99 | Input/Output: [(7 94 -68 -86) -86]
Test Case:   0 | Input/Output: [[15 15 -50 15] -50]
Test Case:   1 | Input/Output: [[-8 -8 -8 58] -8]
Test Case:   2 | Input/Output: [[-92 -92 -92 69] -92]
Test Case:   3 | Input/Output: [[-85 -98 -98 -98] -98]
Test Case:   4 | Input/Output: [[-50 -50 -50 100] -50]
Test Case:   5 | Input/Output: [[-13 -13 -13 -24] -24]
Test Case:   6 | Input/Output: [[2 2 -23 2] -23]
Test Case:   7 | Input/Output: [[8 -48 8 8] -48]
Test Case:   8 | Input/Output: [[-9 19 -9 -9] -9]
Test Case:   9 | Input/Output: [[72 72 17 72] 17]
Test Case:  10 | Input/Output: [[91 91 36 91] 36]
Test Case:  11 | Input/Output: [[-98 -72 -98 -98] -98]
Test Case:  12 | Input/Output: [[-94 -94 95 -94] -94]
Test Case:  13 | Input/Output: [[-91 34 34 34] -91]
Test Case:  14 | Input/Output: [[20 80 20 20] 20]
Test Case:  15 | Input/Output: [[-81 -81 -87 -81] -87]
Test Case:  16 | Input/Output: [[81 81 81 -32] -32]
Test Case:  17 | Input/Output: [[-58 -94 -58 -58] -94]
Test Case:  18 | Input/Output: [[40 40 40 12] 12]
Test Case:  19 | Input/Output: [[10 -92 -92 -92] -92]
Test Case:  20 | Input/Output: [[9 9 75 9] 9]
Test Case:  21 | Input/Output: [[50 50 50 63] 50]
Test Case:  22 | Input/Output: [[17 37 17 17] 17]
Test Case:  23 | Input/Output: [[22 22 22 -10] -10]
Test Case:  24 | Input/Output: [[-80 -26 -26 -26] -80]
Test Case:  25 | Input/Output: [[29 -82 29 29] -82]
Test Case:  26 | Input/Output: [[-4 -4 -4 -20] -20]
Test Case:  27 | Input/Output: [[55 55 2 55] 2]
Test Case:  28 | Input/Output: [[11 11 11 44] 11]
Test Case:  29 | Input/Output: [[0 0 40 0] 0]
Test Case:  30 | Input/Output: [[-74 -74 -74 -73] -74]
Test Case:  31 | Input/Output: [[-42 55 55 55] -42]
Test Case:  32 | Input/Output: [[-22 -22 -22 -22] -22]
Test Case:  33 | Input/Output: [[84 84 84 25] 25]
Test Case:  34 | Input/Output: [[-55 -55 -55 -97] -97]
Test Case:  35 | Input/Output: [[-10 95 -10 -10] -10]
Test Case:  36 | Input/Output: [[-47 -47 -92 -47] -92]
Test Case:  37 | Input/Output: [[-35 -35 81 -35] -35]
Test Case:  38 | Input/Output: [[88 88 88 12] 12]
Test Case:  39 | Input/Output: [[63 63 63 42] 42]
Test Case:  40 | Input/Output: [[-42 -22 -22 -22] -42]
Test Case:  41 | Input/Output: [[47 47 -47 47] -47]
Test Case:  42 | Input/Output: [[54 54 54 -15] -15]
Test Case:  43 | Input/Output: [[67 67 57 67] 57]
Test Case:  44 | Input/Output: [[-5 -5 -10 -5] -10]
Test Case:  45 | Input/Output: [[-1 -82 -1 -1] -82]
Test Case:  46 | Input/Output: [[23 23 72 23] 23]
Test Case:  47 | Input/Output: [[-38 -38 38 -38] -38]
Test Case:  48 | Input/Output: [[-86 -86 45 -86] -86]
Test Case:  49 | Input/Output: [[53 53 53 -31] -31]
Test Case:  50 | Input/Output: [[51 81 81 81] 51]
Test Case:  51 | Input/Output: [[21 21 21 45] 21]
Test Case:  52 | Input/Output: [[93 -80 -80 -80] -80]
Test Case:  53 | Input/Output: [[-50 -36 -36 -36] -50]
Test Case:  54 | Input/Output: [[93 98 93 93] 93]
Test Case:  55 | Input/Output: [[17 17 17 -81] -81]
Test Case:  56 | Input/Output: [[-40 -40 -40 -53] -53]
Test Case:  57 | Input/Output: [[11 -6 11 11] -6]
Test Case:  58 | Input/Output: [[28 28 91 28] 28]
Test Case:  59 | Input/Output: [[89 -61 -61 -61] -61]
Test Case:  60 | Input/Output: [[63 63 85 63] 63]
Test Case:  61 | Input/Output: [[-93 -42 -42 -42] -93]
Test Case:  62 | Input/Output: [[-58 -58 -58 44] -58]
Test Case:  63 | Input/Output: [[31 31 -79 31] -79]
Test Case:  64 | Input/Output: [[27 -44 27 27] -44]
Test Case:  65 | Input/Output: [[-32 -32 -32 -39] -39]
Test Case:  66 | Input/Output: [[-50 -50 -24 -50] -50]
Test Case:  67 | Input/Output: [[69 51 51 51] 51]
Test Case:  68 | Input/Output: [[-43 36 36 36] -43]
Test Case:  69 | Input/Output: [[-4 -4 -4 85] -4]
Test Case:  70 | Input/Output: [[13 26 26 26] 13]
Test Case:  71 | Input/Output: [[-17 -17 48 -17] -17]
Test Case:  72 | Input/Output: [[1 1 15 1] 1]
Test Case:  73 | Input/Output: [[-10 18 -10 -10] -10]
Test Case:  74 | Input/Output: [[36 36 -75 36] -75]
Test Case:  75 | Input/Output: [[72 72 72 -67] -67]
Test Case:  76 | Input/Output: [[6 17 17 17] 6]
Test Case:  77 | Input/Output: [[5 5 35 5] 5]
Test Case:  78 | Input/Output: [[-76 -30 -76 -76] -76]
Test Case:  79 | Input/Output: [[92 7 92 92] 7]
Test Case:  80 | Input/Output: [[74 74 -90 74] -90]
Test Case:  81 | Input/Output: [[-83 -11 -11 -11] -83]
Test Case:  82 | Input/Output: [[-54 -54 -54 -86] -86]
Test Case:  83 | Input/Output: [[-20 22 22 22] -20]
Test Case:  84 | Input/Output: [[-98 78 78 78] -98]
Test Case:  85 | Input/Output: [[10 10 3 10] 3]
Test Case:  86 | Input/Output: [[76 -62 -62 -62] -62]
Test Case:  87 | Input/Output: [[84 84 -93 84] -93]
Test Case:  88 | Input/Output: [[64 64 -10 64] -10]
Test Case:  89 | Input/Output: [[-88 87 87 87] -88]
Test Case:  90 | Input/Output: [[57 41 57 57] 41]
Test Case:  91 | Input/Output: [[31 -96 -96 -96] -96]
Test Case:  92 | Input/Output: [[13 13 13 -3] -3]
Test Case:  93 | Input/Output: [[74 74 95 74] 74]
Test Case:  94 | Input/Output: [[37 5 37 37] 5]
Test Case:  95 | Input/Output: [[-70 -70 -77 -70] -77]
Test Case:  96 | Input/Output: [[17 -23 17 17] -23]
Test Case:  97 | Input/Output: [[87 27 27 27] 27]
Test Case:  98 | Input/Output: [[50 50 50 -16] -16]
Test Case:  99 | Input/Output: [[-3 -3 90 -3] -3]
Test Case: 100 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 101 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 102 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 103 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 104 | Input/Output: [(27 27 27 27) 27]
Test Case: 105 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 106 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 107 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 108 | Input/Output: [(78 78 78 78) 78]
Test Case: 109 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 110 | Input/Output: [(82 82 82 82) 82]
Test Case: 111 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 112 | Input/Output: [(86 86 86 86) 86]
Test Case: 113 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 114 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 115 | Input/Output: [(11 11 11 11) 11]
Test Case: 116 | Input/Output: [(28 28 28 28) 28]
Test Case: 117 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 118 | Input/Output: [(76 76 76 76) 76]
Test Case: 119 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 120 | Input/Output: [(71 71 71 71) 71]
Test Case: 121 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 122 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 123 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 124 | Input/Output: [(36 36 36 36) 36]
Test Case: 125 | Input/Output: [(24 24 24 24) 24]
Test Case: 126 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 127 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 128 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 129 | Input/Output: [(78 78 78 78) 78]
Test Case: 130 | Input/Output: [(51 51 51 51) 51]
Test Case: 131 | Input/Output: [(39 39 39 39) 39]
Test Case: 132 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 133 | Input/Output: [(27 27 27 27) 27]
Test Case: 134 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 135 | Input/Output: [(27 27 27 27) 27]
Test Case: 136 | Input/Output: [(12 12 12 12) 12]
Test Case: 137 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 138 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 139 | Input/Output: [(74 74 74 74) 74]
Test Case: 140 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 141 | Input/Output: [(55 55 55 55) 55]
Test Case: 142 | Input/Output: [(88 88 88 88) 88]
Test Case: 143 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 144 | Input/Output: [(84 84 84 84) 84]
Test Case: 145 | Input/Output: [(1 1 1 1) 1]
Test Case: 146 | Input/Output: [(83 83 83 83) 83]
Test Case: 147 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 148 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 149 | Input/Output: [(20 20 20 20) 20]
Test Case: 150 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 151 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 152 | Input/Output: [(92 92 92 92) 92]
Test Case: 153 | Input/Output: [(63 63 63 63) 63]
Test Case: 154 | Input/Output: [(38 38 38 38) 38]
Test Case: 155 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 156 | Input/Output: [(8 8 8 8) 8]
Test Case: 157 | Input/Output: [(64 64 64 64) 64]
Test Case: 158 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 159 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 160 | Input/Output: [(86 86 86 86) 86]
Test Case: 161 | Input/Output: [(87 87 87 87) 87]
Test Case: 162 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 163 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 164 | Input/Output: [(2 2 2 2) 2]
Test Case: 165 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 166 | Input/Output: [(36 36 36 36) 36]
Test Case: 167 | Input/Output: [(4 4 4 4) 4]
Test Case: 168 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 169 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 170 | Input/Output: [(78 78 78 78) 78]
Test Case: 171 | Input/Output: [(59 59 59 59) 59]
Test Case: 172 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 173 | Input/Output: [(91 91 91 91) 91]
Test Case: 174 | Input/Output: [(12 12 12 12) 12]
Test Case: 175 | Input/Output: [(38 38 38 38) 38]
Test Case: 176 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 177 | Input/Output: [(1 1 1 1) 1]
Test Case: 178 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 179 | Input/Output: [(7 7 7 7) 7]
Test Case: 180 | Input/Output: [(6 6 6 6) 6]
Test Case: 181 | Input/Output: [(41 41 41 41) 41]
Test Case: 182 | Input/Output: [(98 98 98 98) 98]
Test Case: 183 | Input/Output: [(83 83 83 83) 83]
Test Case: 184 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 185 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 186 | Input/Output: [(91 91 91 91) 91]
Test Case: 187 | Input/Output: [(50 50 50 50) 50]
Test Case: 188 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 189 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 190 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 191 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 192 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 193 | Input/Output: [(81 81 81 81) 81]
Test Case: 194 | Input/Output: [(52 52 52 52) 52]
Test Case: 195 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 196 | Input/Output: [(48 48 48 48) 48]
Test Case: 197 | Input/Output: [(67 67 67 67) 67]
Test Case: 198 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 199 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 200 | Input/Output: [(75 31 97 85) 31]
Test Case: 201 | Input/Output: [(37 55 42 45) 37]
Test Case: 202 | Input/Output: [(81 24 17 65) 17]
Test Case: 203 | Input/Output: [(49 11 3 86) 3]
Test Case: 204 | Input/Output: [(60 60 7 48) 7]
Test Case: 205 | Input/Output: [(73 5 90 5) 5]
Test Case: 206 | Input/Output: [(16 34 93 51) 16]
Test Case: 207 | Input/Output: [(29 70 52 49) 29]
Test Case: 208 | Input/Output: [(81 1 73 70) 1]
Test Case: 209 | Input/Output: [(73 36 61 31) 31]
Test Case: 210 | Input/Output: [(86 15 45 90) 15]
Test Case: 211 | Input/Output: [(9 82 7 36) 7]
Test Case: 212 | Input/Output: [(79 39 92 90) 39]
Test Case: 213 | Input/Output: [(35 86 97 36) 35]
Test Case: 214 | Input/Output: [(88 86 67 35) 35]
Test Case: 215 | Input/Output: [(74 36 98 84) 36]
Test Case: 216 | Input/Output: [(95 74 7 34) 7]
Test Case: 217 | Input/Output: [(57 6 8 11) 6]
Test Case: 218 | Input/Output: [(77 27 80 24) 24]
Test Case: 219 | Input/Output: [(94 54 69 47) 47]
Test Case: 220 | Input/Output: [(68 15 26 25) 15]
Test Case: 221 | Input/Output: [(81 88 23 68) 23]
Test Case: 222 | Input/Output: [(14 38 23 87) 14]
Test Case: 223 | Input/Output: [(44 83 88 55) 44]
Test Case: 224 | Input/Output: [(98 56 48 44) 44]
Test Case: 225 | Input/Output: [(87 65 56 24) 24]
Test Case: 226 | Input/Output: [(81 48 100 79) 48]
Test Case: 227 | Input/Output: [(60 99 63 65) 60]
Test Case: 228 | Input/Output: [(4 49 60 22) 4]
Test Case: 229 | Input/Output: [(27 47 72 17) 17]
Test Case: 230 | Input/Output: [(26 63 31 32) 26]
Test Case: 231 | Input/Output: [(18 98 71 42) 18]
Test Case: 232 | Input/Output: [(57 40 35 23) 23]
Test Case: 233 | Input/Output: [(90 10 1 20) 1]
Test Case: 234 | Input/Output: [(82 25 50 93) 25]
Test Case: 235 | Input/Output: [(48 34 38 52) 34]
Test Case: 236 | Input/Output: [(96 42 2 14) 2]
Test Case: 237 | Input/Output: [(27 2 42 18) 2]
Test Case: 238 | Input/Output: [(44 4 60 45) 4]
Test Case: 239 | Input/Output: [(5 44 51 54) 5]
Test Case: 240 | Input/Output: [(29 94 62 86) 29]
Test Case: 241 | Input/Output: [(74 35 80 43) 35]
Test Case: 242 | Input/Output: [(77 83 29 21) 21]
Test Case: 243 | Input/Output: [(99 29 71 45) 29]
Test Case: 244 | Input/Output: [(53 2 22 18) 2]
Test Case: 245 | Input/Output: [(94 83 95 63) 63]
Test Case: 246 | Input/Output: [(82 99 79 77) 77]
Test Case: 247 | Input/Output: [(93 62 86 15) 15]
Test Case: 248 | Input/Output: [(81 64 97 48) 48]
Test Case: 249 | Input/Output: [(75 52 23 46) 23]
Test Case: 250 | Input/Output: [(31 29 56 99) 29]
Test Case: 251 | Input/Output: [(12 8 35 47) 8]
Test Case: 252 | Input/Output: [(19 69 56 23) 19]
Test Case: 253 | Input/Output: [(84 42 8 70) 8]
Test Case: 254 | Input/Output: [(56 10 93 1) 1]
Test Case: 255 | Input/Output: [(33 14 44 87) 14]
Test Case: 256 | Input/Output: [(8 77 81 57) 8]
Test Case: 257 | Input/Output: [(13 49 23 22) 13]
Test Case: 258 | Input/Output: [(0 34 68 96) 0]
Test Case: 259 | Input/Output: [(84 45 55 17) 17]
Test Case: 260 | Input/Output: [(96 62 28 69) 28]
Test Case: 261 | Input/Output: [(25 100 18 1) 1]
Test Case: 262 | Input/Output: [(57 77 23 60) 23]
Test Case: 263 | Input/Output: [(39 6 26 63) 6]
Test Case: 264 | Input/Output: [(79 19 64 41) 19]
Test Case: 265 | Input/Output: [(6 5 38 62) 5]
Test Case: 266 | Input/Output: [(16 24 42 46) 16]
Test Case: 267 | Input/Output: [(73 36 46 67) 36]
Test Case: 268 | Input/Output: [(32 2 89 41) 2]
Test Case: 269 | Input/Output: [(14 54 53 77) 14]
Test Case: 270 | Input/Output: [(81 28 62 83) 28]
Test Case: 271 | Input/Output: [(78 1 32 79) 1]
Test Case: 272 | Input/Output: [(100 98 26 32) 26]
Test Case: 273 | Input/Output: [(27 69 75 98) 27]
Test Case: 274 | Input/Output: [(69 58 80 16) 16]
Test Case: 275 | Input/Output: [(63 87 79 97) 63]
Test Case: 276 | Input/Output: [(19 16 92 0) 0]
Test Case: 277 | Input/Output: [(18 6 1 6) 1]
Test Case: 278 | Input/Output: [(8 40 67 1) 1]
Test Case: 279 | Input/Output: [(57 17 69 31) 17]
Test Case: 280 | Input/Output: [(24 70 92 31) 24]
Test Case: 281 | Input/Output: [(46 90 95 21) 21]
Test Case: 282 | Input/Output: [(20 3 64 42) 3]
Test Case: 283 | Input/Output: [(31 66 52 49) 31]
Test Case: 284 | Input/Output: [(49 31 98 82) 31]
Test Case: 285 | Input/Output: [(36 17 18 51) 17]
Test Case: 286 | Input/Output: [(59 73 74 87) 59]
Test Case: 287 | Input/Output: [(7 37 15 62) 7]
Test Case: 288 | Input/Output: [(45 67 3 58) 3]
Test Case: 289 | Input/Output: [(48 100 50 97) 48]
Test Case: 290 | Input/Output: [(87 73 34 14) 14]
Test Case: 291 | Input/Output: [(84 55 95 37) 37]
Test Case: 292 | Input/Output: [(8 100 53 30) 8]
Test Case: 293 | Input/Output: [(90 83 81 99) 81]
Test Case: 294 | Input/Output: [(10 92 8 75) 8]
Test Case: 295 | Input/Output: [(27 10 64 32) 10]
Test Case: 296 | Input/Output: [(55 47 31 48) 31]
Test Case: 297 | Input/Output: [(24 50 100 16) 16]
Test Case: 298 | Input/Output: [(19 83 75 10) 10]
Test Case: 299 | Input/Output: [(83 29 97 49) 29]
Test Case: 300 | Input/Output: [(88 49 1 62) 1]
Test Case: 301 | Input/Output: [(67 25 60 37) 25]
Test Case: 302 | Input/Output: [(12 87 34 70) 12]
Test Case: 303 | Input/Output: [(60 57 96 27) 27]
Test Case: 304 | Input/Output: [(79 19 91 49) 19]
Test Case: 305 | Input/Output: [(9 90 32 85) 9]
Test Case: 306 | Input/Output: [(70 8 73 69) 8]
Test Case: 307 | Input/Output: [(42 1 2 35) 1]
Test Case: 308 | Input/Output: [(77 10 46 76) 10]
Test Case: 309 | Input/Output: [(50 24 38 26) 24]
Test Case: 310 | Input/Output: [(56 14 34 13) 13]
Test Case: 311 | Input/Output: [(59 55 58 9) 9]
Test Case: 312 | Input/Output: [(42 41 87 57) 41]
Test Case: 313 | Input/Output: [(37 53 99 5) 5]
Test Case: 314 | Input/Output: [(24 68 71 77) 24]
Test Case: 315 | Input/Output: [(71 77 89 38) 38]
Test Case: 316 | Input/Output: [(56 82 90 26) 26]
Test Case: 317 | Input/Output: [(89 44 50 98) 44]
Test Case: 318 | Input/Output: [(1 62 93 88) 1]
Test Case: 319 | Input/Output: [(20 75 66 53) 20]
Test Case: 320 | Input/Output: [(45 0 72 95) 0]
Test Case: 321 | Input/Output: [(79 16 24 65) 16]
Test Case: 322 | Input/Output: [(29 41 63 29) 29]
Test Case: 323 | Input/Output: [(36 61 52 41) 36]
Test Case: 324 | Input/Output: [(38 52 53 23) 23]
Test Case: 325 | Input/Output: [(23 28 9 83) 9]
Test Case: 326 | Input/Output: [(4 29 90 85) 4]
Test Case: 327 | Input/Output: [(70 68 89 17) 17]
Test Case: 328 | Input/Output: [(26 69 18 39) 18]
Test Case: 329 | Input/Output: [(16 43 40 31) 16]
Test Case: 330 | Input/Output: [(66 17 68 72) 17]
Test Case: 331 | Input/Output: [(66 17 57 81) 17]
Test Case: 332 | Input/Output: [(3 43 78 6) 3]
Test Case: 333 | Input/Output: [(86 23 12 88) 12]
Test Case: 334 | Input/Output: [(17 22 33 66) 17]
Test Case: 335 | Input/Output: [(52 27 47 59) 27]
Test Case: 336 | Input/Output: [(81 6 5 85) 5]
Test Case: 337 | Input/Output: [(63 31 23 21) 21]
Test Case: 338 | Input/Output: [(42 33 21 43) 21]
Test Case: 339 | Input/Output: [(93 64 90 89) 64]
Test Case: 340 | Input/Output: [(26 87 19 100) 19]
Test Case: 341 | Input/Output: [(72 23 37 90) 23]
Test Case: 342 | Input/Output: [(42 13 28 5) 5]
Test Case: 343 | Input/Output: [(34 86 87 84) 34]
Test Case: 344 | Input/Output: [(80 35 37 49) 35]
Test Case: 345 | Input/Output: [(73 23 15 87) 15]
Test Case: 346 | Input/Output: [(46 19 68 41) 19]
Test Case: 347 | Input/Output: [(4 49 50 42) 4]
Test Case: 348 | Input/Output: [(78 50 55 49) 49]
Test Case: 349 | Input/Output: [(73 6 64 40) 6]
Test Case: 350 | Input/Output: [(56 77 66 4) 4]
Test Case: 351 | Input/Output: [(34 59 56 94) 34]
Test Case: 352 | Input/Output: [(19 73 28 58) 19]
Test Case: 353 | Input/Output: [(70 4 15 44) 4]
Test Case: 354 | Input/Output: [(56 91 16 94) 16]
Test Case: 355 | Input/Output: [(92 95 86 27) 27]
Test Case: 356 | Input/Output: [(36 30 79 82) 30]
Test Case: 357 | Input/Output: [(57 8 32 28) 8]
Test Case: 358 | Input/Output: [(62 19 100 84) 19]
Test Case: 359 | Input/Output: [(70 39 84 11) 11]
Test Case: 360 | Input/Output: [(91 31 34 19) 19]
Test Case: 361 | Input/Output: [(53 3 37 10) 3]
Test Case: 362 | Input/Output: [(54 54 1 37) 1]
Test Case: 363 | Input/Output: [(0 87 51 35) 0]
Test Case: 364 | Input/Output: [(59 37 8 55) 8]
Test Case: 365 | Input/Output: [(45 96 98 73) 45]
Test Case: 366 | Input/Output: [(20 2 80 77) 2]
Test Case: 367 | Input/Output: [(98 75 9 90) 9]
Test Case: 368 | Input/Output: [(69 57 74 80) 57]
Test Case: 369 | Input/Output: [(21 92 35 79) 21]
Test Case: 370 | Input/Output: [(58 29 21 38) 21]
Test Case: 371 | Input/Output: [(45 41 70 36) 36]
Test Case: 372 | Input/Output: [(25 14 87 13) 13]
Test Case: 373 | Input/Output: [(70 10 89 8) 8]
Test Case: 374 | Input/Output: [(39 38 75 47) 38]
Test Case: 375 | Input/Output: [(85 23 99 94) 23]
Test Case: 376 | Input/Output: [(94 27 65 88) 27]
Test Case: 377 | Input/Output: [(47 11 33 96) 11]
Test Case: 378 | Input/Output: [(20 11 3 52) 3]
Test Case: 379 | Input/Output: [(47 83 28 5) 5]
Test Case: 380 | Input/Output: [(27 35 100 88) 27]
Test Case: 381 | Input/Output: [(52 24 100 37) 24]
Test Case: 382 | Input/Output: [(66 34 10 22) 10]
Test Case: 383 | Input/Output: [(91 75 57 85) 57]
Test Case: 384 | Input/Output: [(75 22 56 37) 22]
Test Case: 385 | Input/Output: [(95 26 87 36) 26]
Test Case: 386 | Input/Output: [(63 56 40 88) 40]
Test Case: 387 | Input/Output: [(10 3 51 27) 3]
Test Case: 388 | Input/Output: [(14 90 46 93) 14]
Test Case: 389 | Input/Output: [(47 97 75 63) 47]
Test Case: 390 | Input/Output: [(61 32 37 45) 32]
Test Case: 391 | Input/Output: [(86 71 87 73) 71]
Test Case: 392 | Input/Output: [(68 0 20 98) 0]
Test Case: 393 | Input/Output: [(97 91 22 55) 22]
Test Case: 394 | Input/Output: [(80 57 70 83) 57]
Test Case: 395 | Input/Output: [(66 86 66 60) 60]
Test Case: 396 | Input/Output: [(69 95 98 1) 1]
Test Case: 397 | Input/Output: [(69 67 91 100) 67]
Test Case: 398 | Input/Output: [(27 59 92 49) 27]
Test Case: 399 | Input/Output: [(43 56 48 24) 24]
Test Case: 400 | Input/Output: [(12 11 20 -51) -51]
Test Case: 401 | Input/Output: [(80 -48 -35 -20) -48]
Test Case: 402 | Input/Output: [(-43 91 -11 -91) -91]
Test Case: 403 | Input/Output: [(74 -36 -95 -95) -95]
Test Case: 404 | Input/Output: [(-9 7 -76 38) -76]
Test Case: 405 | Input/Output: [(-85 -52 -100 -48) -100]
Test Case: 406 | Input/Output: [(-79 71 -89 76) -89]
Test Case: 407 | Input/Output: [(-52 87 90 -10) -52]
Test Case: 408 | Input/Output: [(13 81 -13 -62) -62]
Test Case: 409 | Input/Output: [(38 42 -28 11) -28]
Test Case: 410 | Input/Output: [(-71 -41 5 2) -71]
Test Case: 411 | Input/Output: [(51 18 68 -93) -93]
Test Case: 412 | Input/Output: [(94 21 9 45) 9]
Test Case: 413 | Input/Output: [(-11 88 81 -14) -14]
Test Case: 414 | Input/Output: [(49 25 -87 36) -87]
Test Case: 415 | Input/Output: [(-17 -47 4 7) -47]
Test Case: 416 | Input/Output: [(-91 -30 -23 47) -91]
Test Case: 417 | Input/Output: [(59 -71 38 34) -71]
Test Case: 418 | Input/Output: [(94 51 -3 42) -3]
Test Case: 419 | Input/Output: [(40 -86 95 31) -86]
Test Case: 420 | Input/Output: [(43 -100 -5 20) -100]
Test Case: 421 | Input/Output: [(-32 -99 -32 7) -99]
Test Case: 422 | Input/Output: [(94 21 33 -35) -35]
Test Case: 423 | Input/Output: [(-44 19 -33 -84) -84]
Test Case: 424 | Input/Output: [(38 -30 93 -21) -30]
Test Case: 425 | Input/Output: [(14 1 -32 -5) -32]
Test Case: 426 | Input/Output: [(14 63 -79 11) -79]
Test Case: 427 | Input/Output: [(-49 -69 15 14) -69]
Test Case: 428 | Input/Output: [(29 -54 -35 87) -54]
Test Case: 429 | Input/Output: [(43 93 -92 -40) -92]
Test Case: 430 | Input/Output: [(67 -93 -3 -76) -93]
Test Case: 431 | Input/Output: [(-89 -6 -64 60) -89]
Test Case: 432 | Input/Output: [(25 -17 78 22) -17]
Test Case: 433 | Input/Output: [(73 94 5 6) 5]
Test Case: 434 | Input/Output: [(-93 -79 -38 32) -93]
Test Case: 435 | Input/Output: [(3 48 44 96) 3]
Test Case: 436 | Input/Output: [(-7 38 -52 -35) -52]
Test Case: 437 | Input/Output: [(-9 70 -63 29) -63]
Test Case: 438 | Input/Output: [(-4 34 56 -72) -72]
Test Case: 439 | Input/Output: [(94 -58 39 20) -58]
Test Case: 440 | Input/Output: [(28 -97 15 -72) -97]
Test Case: 441 | Input/Output: [(31 -80 91 -7) -80]
Test Case: 442 | Input/Output: [(91 -80 -40 74) -80]
Test Case: 443 | Input/Output: [(-66 87 -86 85) -86]
Test Case: 444 | Input/Output: [(-57 68 -9 -31) -57]
Test Case: 445 | Input/Output: [(70 12 68 15) 12]
Test Case: 446 | Input/Output: [(-59 -5 4 35) -59]
Test Case: 447 | Input/Output: [(-11 -66 74 -4) -66]
Test Case: 448 | Input/Output: [(47 -16 76 -17) -17]
Test Case: 449 | Input/Output: [(32 -72 -39 38) -72]
Test Case: 450 | Input/Output: [(22 -4 -36 -69) -69]
Test Case: 451 | Input/Output: [(98 -40 20 -18) -40]
Test Case: 452 | Input/Output: [(34 58 8 -74) -74]
Test Case: 453 | Input/Output: [(-18 -10 -41 60) -41]
Test Case: 454 | Input/Output: [(29 90 26 90) 26]
Test Case: 455 | Input/Output: [(83 -33 66 91) -33]
Test Case: 456 | Input/Output: [(60 -37 65 65) -37]
Test Case: 457 | Input/Output: [(-68 -78 -57 -20) -78]
Test Case: 458 | Input/Output: [(13 -4 38 66) -4]
Test Case: 459 | Input/Output: [(60 -68 -87 21) -87]
Test Case: 460 | Input/Output: [(-51 -31 -83 63) -83]
Test Case: 461 | Input/Output: [(81 -54 -8 54) -54]
Test Case: 462 | Input/Output: [(-73 -27 42 23) -73]
Test Case: 463 | Input/Output: [(-4 37 59 51) -4]
Test Case: 464 | Input/Output: [(73 46 62 -41) -41]
Test Case: 465 | Input/Output: [(-11 -49 -88 18) -88]
Test Case: 466 | Input/Output: [(-97 -73 -28 91) -97]
Test Case: 467 | Input/Output: [(-36 87 -50 74) -50]
Test Case: 468 | Input/Output: [(-63 16 48 97) -63]
Test Case: 469 | Input/Output: [(66 72 53 39) 39]
Test Case: 470 | Input/Output: [(74 59 94 86) 59]
Test Case: 471 | Input/Output: [(63 -19 57 -61) -61]
Test Case: 472 | Input/Output: [(40 7 30 99) 7]
Test Case: 473 | Input/Output: [(-28 60 -84 -49) -84]
Test Case: 474 | Input/Output: [(0 23 28 83) 0]
Test Case: 475 | Input/Output: [(92 31 -3 76) -3]
Test Case: 476 | Input/Output: [(-71 80 42 -53) -71]
Test Case: 477 | Input/Output: [(15 72 -25 -87) -87]
Test Case: 478 | Input/Output: [(6 82 -91 52) -91]
Test Case: 479 | Input/Output: [(19 25 -66 51) -66]
Test Case: 480 | Input/Output: [(-35 -40 -56 -81) -81]
Test Case: 481 | Input/Output: [(49 72 89 -72) -72]
Test Case: 482 | Input/Output: [(-64 47 -27 41) -64]
Test Case: 483 | Input/Output: [(-94 -92 -72 -49) -94]
Test Case: 484 | Input/Output: [(-74 22 -77 -24) -77]
Test Case: 485 | Input/Output: [(-43 -91 -95 -46) -95]
Test Case: 486 | Input/Output: [(-57 33 -95 -11) -95]
Test Case: 487 | Input/Output: [(-7 -50 -91 94) -91]
Test Case: 488 | Input/Output: [(78 -2 55 -64) -64]
Test Case: 489 | Input/Output: [(-37 -47 -17 -61) -61]
Test Case: 490 | Input/Output: [(46 64 -1 -62) -62]
Test Case: 491 | Input/Output: [(26 69 9 -98) -98]
Test Case: 492 | Input/Output: [(14 -9 23 44) -9]
Test Case: 493 | Input/Output: [(52 95 -4 42) -4]
Test Case: 494 | Input/Output: [(-54 41 -41 -72) -72]
Test Case: 495 | Input/Output: [(-85 -83 31 -40) -85]
Test Case: 496 | Input/Output: [(86 -12 -52 95) -52]
Test Case: 497 | Input/Output: [(-41 12 -79 -25) -79]
Test Case: 498 | Input/Output: [(-89 -64 -72 95) -89]
Test Case: 499 | Input/Output: [(-56 11 66 -7) -56]
Test Case: 500 | Input/Output: [(23 95 16 -33) -33]
Test Case: 501 | Input/Output: [(100 73 -73 -48) -73]
Test Case: 502 | Input/Output: [(-33 90 71 -6) -33]
Test Case: 503 | Input/Output: [(-34 -29 -84 -52) -84]
Test Case: 504 | Input/Output: [(-33 2 46 -45) -45]
Test Case: 505 | Input/Output: [(37 92 -44 38) -44]
Test Case: 506 | Input/Output: [(-80 -67 -39 44) -80]
Test Case: 507 | Input/Output: [(-39 -26 -20 -45) -45]
Test Case: 508 | Input/Output: [(39 -90 -36 -17) -90]
Test Case: 509 | Input/Output: [(-61 -19 -99 51) -99]
Test Case: 510 | Input/Output: [(66 92 -63 -12) -63]
Test Case: 511 | Input/Output: [(26 75 19 10) 10]
Test Case: 512 | Input/Output: [(23 -12 -58 -23) -58]
Test Case: 513 | Input/Output: [(9 64 29 -8) -8]
Test Case: 514 | Input/Output: [(15 86 -93 88) -93]
Test Case: 515 | Input/Output: [(-83 7 -7 -42) -83]
Test Case: 516 | Input/Output: [(70 -27 -12 -26) -27]
Test Case: 517 | Input/Output: [(-49 58 5 -58) -58]
Test Case: 518 | Input/Output: [(77 -80 -58 -42) -80]
Test Case: 519 | Input/Output: [(3 -51 -82 9) -82]
Test Case: 520 | Input/Output: [(-77 -98 69 -82) -98]
Test Case: 521 | Input/Output: [(-38 -65 86 80) -65]
Test Case: 522 | Input/Output: [(57 24 69 98) 24]
Test Case: 523 | Input/Output: [(46 32 45 -21) -21]
Test Case: 524 | Input/Output: [(-23 -15 100 -47) -47]
Test Case: 525 | Input/Output: [(-38 76 -1 25) -38]
Test Case: 526 | Input/Output: [(17 -91 -30 48) -91]
Test Case: 527 | Input/Output: [(60 -12 -13 100) -13]
Test Case: 528 | Input/Output: [(-34 72 80 22) -34]
Test Case: 529 | Input/Output: [(79 7 -90 93) -90]
Test Case: 530 | Input/Output: [(70 -60 81 -52) -60]
Test Case: 531 | Input/Output: [(-24 61 43 26) -24]
Test Case: 532 | Input/Output: [(43 -80 -62 -36) -80]
Test Case: 533 | Input/Output: [(-24 -98 11 60) -98]
Test Case: 534 | Input/Output: [(-74 -61 -37 83) -74]
Test Case: 535 | Input/Output: [(22 28 95 90) 22]
Test Case: 536 | Input/Output: [(99 35 29 -34) -34]
Test Case: 537 | Input/Output: [(-94 -57 -82 82) -94]
Test Case: 538 | Input/Output: [(-75 -60 -80 -69) -80]
Test Case: 539 | Input/Output: [(40 -38 -40 -93) -93]
Test Case: 540 | Input/Output: [(85 28 5 -17) -17]
Test Case: 541 | Input/Output: [(-28 77 -1 -56) -56]
Test Case: 542 | Input/Output: [(51 -90 -83 6) -90]
Test Case: 543 | Input/Output: [(38 -71 -26 -27) -71]
Test Case: 544 | Input/Output: [(29 -49 85 -25) -49]
Test Case: 545 | Input/Output: [(86 99 -64 26) -64]
Test Case: 546 | Input/Output: [(-85 16 30 96) -85]
Test Case: 547 | Input/Output: [(41 -17 23 -80) -80]
Test Case: 548 | Input/Output: [(-7 63 -99 -15) -99]
Test Case: 549 | Input/Output: [(-13 88 47 67) -13]
Test Case: 550 | Input/Output: [(46 60 -69 42) -69]
Test Case: 551 | Input/Output: [(62 37 99 26) 26]
Test Case: 552 | Input/Output: [(89 -74 90 68) -74]
Test Case: 553 | Input/Output: [(60 -20 -54 -33) -54]
Test Case: 554 | Input/Output: [(32 71 58 -12) -12]
Test Case: 555 | Input/Output: [(71 -44 93 82) -44]
Test Case: 556 | Input/Output: [(86 2 61 18) 2]
Test Case: 557 | Input/Output: [(-23 -71 13 -81) -81]
Test Case: 558 | Input/Output: [(81 100 -55 -62) -62]
Test Case: 559 | Input/Output: [(-65 31 -7 31) -65]
Test Case: 560 | Input/Output: [(-90 -29 -52 76) -90]
Test Case: 561 | Input/Output: [(67 -80 -72 -72) -80]
Test Case: 562 | Input/Output: [(66 61 33 57) 33]
Test Case: 563 | Input/Output: [(77 78 2 -38) -38]
Test Case: 564 | Input/Output: [(47 -57 -86 30) -86]
Test Case: 565 | Input/Output: [(17 12 28 81) 12]
Test Case: 566 | Input/Output: [(-97 -96 95 -19) -97]
Test Case: 567 | Input/Output: [(66 30 -19 -38) -38]
Test Case: 568 | Input/Output: [(79 -3 -59 -94) -94]
Test Case: 569 | Input/Output: [(-23 92 -2 51) -23]
Test Case: 570 | Input/Output: [(87 11 -23 34) -23]
Test Case: 571 | Input/Output: [(-38 40 77 76) -38]
Test Case: 572 | Input/Output: [(-81 -28 -71 73) -81]
Test Case: 573 | Input/Output: [(19 43 -52 -59) -59]
Test Case: 574 | Input/Output: [(68 83 -85 21) -85]
Test Case: 575 | Input/Output: [(-37 -33 26 76) -37]
Test Case: 576 | Input/Output: [(41 -24 -55 -4) -55]
Test Case: 577 | Input/Output: [(-69 -4 42 44) -69]
Test Case: 578 | Input/Output: [(54 1 97 37) 1]
Test Case: 579 | Input/Output: [(5 -95 26 -100) -100]
Test Case: 580 | Input/Output: [(51 -30 7 25) -30]
Test Case: 581 | Input/Output: [(-8 -64 32 -56) -64]
Test Case: 582 | Input/Output: [(-60 72 27 47) -60]
Test Case: 583 | Input/Output: [(-39 -48 -55 -33) -55]
Test Case: 584 | Input/Output: [(-31 -84 39 -93) -93]
Test Case: 585 | Input/Output: [(60 -77 45 4) -77]
Test Case: 586 | Input/Output: [(-63 78 -95 92) -95]
Test Case: 587 | Input/Output: [(25 24 60 18) 18]
Test Case: 588 | Input/Output: [(-92 24 14 76) -92]
Test Case: 589 | Input/Output: [(69 -59 40 92) -59]
Test Case: 590 | Input/Output: [(-75 -51 -53 86) -75]
Test Case: 591 | Input/Output: [(-86 56 -21 76) -86]
Test Case: 592 | Input/Output: [(72 72 84 -15) -15]
Test Case: 593 | Input/Output: [(-68 40 25 -40) -68]
Test Case: 594 | Input/Output: [(-69 -19 -85 26) -85]
Test Case: 595 | Input/Output: [(-27 78 6 26) -27]
Test Case: 596 | Input/Output: [(-14 -77 -47 -35) -77]
Test Case: 597 | Input/Output: [(-20 31 -53 76) -53]
Test Case: 598 | Input/Output: [(-98 -85 86 32) -98]
Test Case: 599 | Input/Output: [(40 -73 46 -31) -73]
Test Case: 600 | Input/Output: [(41 -73 -98 58) -98]
Test Case: 601 | Input/Output: [(39 77 66 97) 39]
Test Case: 602 | Input/Output: [(30 22 11 -53) -53]
Test Case: 603 | Input/Output: [(93 11 42 40) 11]
Test Case: 604 | Input/Output: [(-46 47 52 -7) -46]
Test Case: 605 | Input/Output: [(-8 -44 32 52) -44]
Test Case: 606 | Input/Output: [(-48 41 87 71) -48]
Test Case: 607 | Input/Output: [(70 -87 76 -66) -87]
Test Case: 608 | Input/Output: [(-38 -21 98 19) -38]
Test Case: 609 | Input/Output: [(-44 87 41 -68) -68]
Test Case: 610 | Input/Output: [(1 -10 66 -62) -62]
Test Case: 611 | Input/Output: [(-21 -71 96 -23) -71]
Test Case: 612 | Input/Output: [(43 -4 -67 -32) -67]
Test Case: 613 | Input/Output: [(-6 42 13 -69) -69]
Test Case: 614 | Input/Output: [(78 44 43 53) 43]
Test Case: 615 | Input/Output: [(56 -34 91 -75) -75]
Test Case: 616 | Input/Output: [(16 86 -67 -63) -67]
Test Case: 617 | Input/Output: [(20 42 64 -47) -47]
Test Case: 618 | Input/Output: [(80 85 -52 -60) -60]
Test Case: 619 | Input/Output: [(21 -81 47 -37) -81]
Test Case: 620 | Input/Output: [(65 75 52 -15) -15]
Test Case: 621 | Input/Output: [(-52 -21 54 -58) -58]
Test Case: 622 | Input/Output: [(77 -24 -42 -23) -42]
Test Case: 623 | Input/Output: [(14 29 23 90) 14]
Test Case: 624 | Input/Output: [(-9 -11 -65 -25) -65]
Test Case: 625 | Input/Output: [(-42 -14 -55 -11) -55]
Test Case: 626 | Input/Output: [(9 49 -2 13) -2]
Test Case: 627 | Input/Output: [(-90 89 97 -82) -90]
Test Case: 628 | Input/Output: [(-34 -32 -66 -8) -66]
Test Case: 629 | Input/Output: [(28 -72 -78 69) -78]
Test Case: 630 | Input/Output: [(93 -32 11 68) -32]
Test Case: 631 | Input/Output: [(31 7 -15 -92) -92]
Test Case: 632 | Input/Output: [(-37 -28 9 -36) -37]
Test Case: 633 | Input/Output: [(-66 92 -55 98) -66]
Test Case: 634 | Input/Output: [(78 -66 -51 -21) -66]
Test Case: 635 | Input/Output: [(-37 3 -87 -84) -87]
Test Case: 636 | Input/Output: [(3 90 -24 98) -24]
Test Case: 637 | Input/Output: [(-65 30 26 52) -65]
Test Case: 638 | Input/Output: [(-10 99 91 -19) -19]
Test Case: 639 | Input/Output: [(63 30 -14 48) -14]
Test Case: 640 | Input/Output: [(92 -93 82 23) -93]
Test Case: 641 | Input/Output: [(-84 -35 10 93) -84]
Test Case: 642 | Input/Output: [(-76 -14 -44 -41) -76]
Test Case: 643 | Input/Output: [(-9 -66 -52 94) -66]
Test Case: 644 | Input/Output: [(74 -45 25 25) -45]
Test Case: 645 | Input/Output: [(-78 65 74 -29) -78]
Test Case: 646 | Input/Output: [(11 -87 -73 42) -87]
Test Case: 647 | Input/Output: [(-9 -59 -16 -83) -83]
Test Case: 648 | Input/Output: [(-28 -9 12 55) -28]
Test Case: 649 | Input/Output: [(82 29 -86 -80) -86]
Test Case: 650 | Input/Output: [(-22 -92 -81 -20) -92]
Test Case: 651 | Input/Output: [(96 -78 -43 66) -78]
Test Case: 652 | Input/Output: [(-8 3 42 -61) -61]
Test Case: 653 | Input/Output: [(-96 -44 89 35) -96]
Test Case: 654 | Input/Output: [(92 -94 -83 38) -94]
Test Case: 655 | Input/Output: [(93 99 -35 47) -35]
Test Case: 656 | Input/Output: [(-29 -55 -94 37) -94]
Test Case: 657 | Input/Output: [(-37 -74 -59 -3) -74]
Test Case: 658 | Input/Output: [(-36 -67 5 84) -67]
Test Case: 659 | Input/Output: [(49 -97 -27 -83) -97]
Test Case: 660 | Input/Output: [(33 -37 74 -64) -64]
Test Case: 661 | Input/Output: [(26 -5 -37 53) -37]
Test Case: 662 | Input/Output: [(-45 -7 -95 -71) -95]
Test Case: 663 | Input/Output: [(-35 90 7 -90) -90]
Test Case: 664 | Input/Output: [(22 86 95 -25) -25]
Test Case: 665 | Input/Output: [(98 -18 82 -32) -32]
Test Case: 666 | Input/Output: [(-54 39 -100 -1) -100]
Test Case: 667 | Input/Output: [(12 -55 20 -53) -55]
Test Case: 668 | Input/Output: [(-56 -63 -31 -63) -63]
Test Case: 669 | Input/Output: [(-100 11 95 88) -100]
Test Case: 670 | Input/Output: [(-23 32 42 -52) -52]
Test Case: 671 | Input/Output: [(-36 -11 -40 -40) -40]
Test Case: 672 | Input/Output: [(47 -89 12 -28) -89]
Test Case: 673 | Input/Output: [(54 75 -63 82) -63]
Test Case: 674 | Input/Output: [(37 -99 64 31) -99]
Test Case: 675 | Input/Output: [(-45 5 -66 -77) -77]
Test Case: 676 | Input/Output: [(43 10 31 -96) -96]
Test Case: 677 | Input/Output: [(-16 33 3 -90) -90]
Test Case: 678 | Input/Output: [(-56 -39 -66 1) -66]
Test Case: 679 | Input/Output: [(49 45 -22 48) -22]
Test Case: 680 | Input/Output: [(-78 -90 -34 90) -90]
Test Case: 681 | Input/Output: [(46 89 93 -15) -15]
Test Case: 682 | Input/Output: [(-15 27 17 16) -15]
Test Case: 683 | Input/Output: [(65 26 -80 -71) -80]
Test Case: 684 | Input/Output: [(-64 88 7 75) -64]
Test Case: 685 | Input/Output: [(2 -25 -80 39) -80]
Test Case: 686 | Input/Output: [(0 -80 10 72) -80]
Test Case: 687 | Input/Output: [(-73 31 87 23) -73]
Test Case: 688 | Input/Output: [(8 -86 -9 -98) -98]
Test Case: 689 | Input/Output: [(26 -29 27 -29) -29]
Test Case: 690 | Input/Output: [(95 93 -8 24) -8]
Test Case: 691 | Input/Output: [(-18 31 42 -80) -80]
Test Case: 692 | Input/Output: [(-12 -36 -44 -56) -56]
Test Case: 693 | Input/Output: [(-50 -63 82 4) -63]
Test Case: 694 | Input/Output: [(-20 -66 -7 3) -66]
Test Case: 695 | Input/Output: [(77 38 26 41) 26]
Test Case: 696 | Input/Output: [(97 -6 14 28) -6]
Test Case: 697 | Input/Output: [(3 -29 -20 -28) -29]
Test Case: 698 | Input/Output: [(42 46 94 -17) -17]
Test Case: 699 | Input/Output: [(-68 -19 -13 -1) -68]
Test Case: 700 | Input/Output: [(15 81 -58 29) -58]
Test Case: 701 | Input/Output: [(13 -58 -95 90) -95]
Test Case: 702 | Input/Output: [(-43 88 79 -71) -71]
Test Case: 703 | Input/Output: [(90 -14 64 29) -14]
Test Case: 704 | Input/Output: [(-39 -66 19 72) -66]
Test Case: 705 | Input/Output: [(-12 66 -55 -21) -55]
Test Case: 706 | Input/Output: [(70 61 14 12) 12]
Test Case: 707 | Input/Output: [(-75 -44 -30 -61) -75]
Test Case: 708 | Input/Output: [(-86 -52 74 -99) -99]
Test Case: 709 | Input/Output: [(-25 -92 -27 -7) -92]
Test Case: 710 | Input/Output: [(-100 -93 58 -76) -100]
Test Case: 711 | Input/Output: [(72 -1 9 -53) -53]
Test Case: 712 | Input/Output: [(80 -34 -23 40) -34]
Test Case: 713 | Input/Output: [(0 61 -98 22) -98]
Test Case: 714 | Input/Output: [(61 47 79 87) 47]
Test Case: 715 | Input/Output: [(12 -62 -89 -39) -89]
Test Case: 716 | Input/Output: [(6 -25 -31 -93) -93]
Test Case: 717 | Input/Output: [(47 -48 -23 -98) -98]
Test Case: 718 | Input/Output: [(-39 33 -58 35) -58]
Test Case: 719 | Input/Output: [(77 -44 41 73) -44]
Test Case: 720 | Input/Output: [(-10 -91 88 -89) -91]
Test Case: 721 | Input/Output: [(33 5 -78 66) -78]
Test Case: 722 | Input/Output: [(-82 -67 62 -6) -82]
Test Case: 723 | Input/Output: [(55 -3 -25 -47) -47]
Test Case: 724 | Input/Output: [(-20 -43 78 63) -43]
Test Case: 725 | Input/Output: [(-80 -45 -87 20) -87]
Test Case: 726 | Input/Output: [(-2 4 36 -76) -76]
Test Case: 727 | Input/Output: [(85 -37 76 -21) -37]
Test Case: 728 | Input/Output: [(71 73 -26 67) -26]
Test Case: 729 | Input/Output: [(44 57 84 15) 15]
Test Case: 730 | Input/Output: [(-54 -19 44 48) -54]
Test Case: 731 | Input/Output: [(-82 69 62 -44) -82]
Test Case: 732 | Input/Output: [(-33 93 49 -85) -85]
Test Case: 733 | Input/Output: [(50 46 -49 38) -49]
Test Case: 734 | Input/Output: [(28 -74 -80 -46) -80]
Test Case: 735 | Input/Output: [(-100 33 -30 -20) -100]
Test Case: 736 | Input/Output: [(-77 18 90 13) -77]
Test Case: 737 | Input/Output: [(-92 -62 -71 48) -92]
Test Case: 738 | Input/Output: [(58 59 16 52) 16]
Test Case: 739 | Input/Output: [(-67 -74 56 75) -74]
Test Case: 740 | Input/Output: [(-13 19 74 98) -13]
Test Case: 741 | Input/Output: [(-69 -14 -15 -35) -69]
Test Case: 742 | Input/Output: [(-72 -65 37 -74) -74]
Test Case: 743 | Input/Output: [(-89 -57 -25 66) -89]
Test Case: 744 | Input/Output: [(11 -6 61 44) -6]
Test Case: 745 | Input/Output: [(-57 65 -97 -20) -97]
Test Case: 746 | Input/Output: [(14 -15 -50 -9) -50]
Test Case: 747 | Input/Output: [(87 -3 -34 55) -34]
Test Case: 748 | Input/Output: [(-80 -42 -85 -95) -95]
Test Case: 749 | Input/Output: [(-20 40 -2 66) -20]
Test Case: 750 | Input/Output: [(-42 50 71 -72) -72]
Test Case: 751 | Input/Output: [(-28 74 82 -98) -98]
Test Case: 752 | Input/Output: [(71 -53 -43 -99) -99]
Test Case: 753 | Input/Output: [(93 63 -68 97) -68]
Test Case: 754 | Input/Output: [(-48 41 -51 -84) -84]
Test Case: 755 | Input/Output: [(46 85 66 -25) -25]
Test Case: 756 | Input/Output: [(34 -78 -21 24) -78]
Test Case: 757 | Input/Output: [(-100 13 77 16) -100]
Test Case: 758 | Input/Output: [(7 -44 -64 51) -64]
Test Case: 759 | Input/Output: [(-17 60 42 -36) -36]
Test Case: 760 | Input/Output: [(53 -71 -38 -37) -71]
Test Case: 761 | Input/Output: [(-77 90 72 32) -77]
Test Case: 762 | Input/Output: [(67 -25 4 -66) -66]
Test Case: 763 | Input/Output: [(-12 45 -68 -52) -68]
Test Case: 764 | Input/Output: [(32 71 39 -22) -22]
Test Case: 765 | Input/Output: [(22 41 -48 -5) -48]
Test Case: 766 | Input/Output: [(-15 87 19 83) -15]
Test Case: 767 | Input/Output: [(65 22 26 -95) -95]
Test Case: 768 | Input/Output: [(-12 -50 66 60) -50]
Test Case: 769 | Input/Output: [(96 69 -22 66) -22]
Test Case: 770 | Input/Output: [(-13 -26 18 -64) -64]
Test Case: 771 | Input/Output: [(76 100 55 -6) -6]
Test Case: 772 | Input/Output: [(67 -100 54 -57) -100]
Test Case: 773 | Input/Output: [(92 84 -46 -7) -46]
Test Case: 774 | Input/Output: [(-76 -15 3 -84) -84]
Test Case: 775 | Input/Output: [(-97 24 -72 -6) -97]
Test Case: 776 | Input/Output: [(92 15 -58 -18) -58]
Test Case: 777 | Input/Output: [(27 -70 -97 82) -97]
Test Case: 778 | Input/Output: [(-59 33 -83 -84) -84]
Test Case: 779 | Input/Output: [(-71 35 6 64) -71]
Test Case: 780 | Input/Output: [(-26 10 -1 -62) -62]
Test Case: 781 | Input/Output: [(32 95 -15 -71) -71]
Test Case: 782 | Input/Output: [(24 -49 30 -75) -75]
Test Case: 783 | Input/Output: [(55 95 3 72) 3]
Test Case: 784 | Input/Output: [(-90 -10 66 65) -90]
Test Case: 785 | Input/Output: [(-10 17 -68 -18) -68]
Test Case: 786 | Input/Output: [(-53 72 73 -56) -56]
Test Case: 787 | Input/Output: [(-90 99 55 -69) -90]
Test Case: 788 | Input/Output: [(-5 -35 -47 -95) -95]
Test Case: 789 | Input/Output: [(18 0 6 9) 0]
Test Case: 790 | Input/Output: [(-64 31 0 -40) -64]
Test Case: 791 | Input/Output: [(-89 34 -4 49) -89]
Test Case: 792 | Input/Output: [(-43 -1 69 62) -43]
Test Case: 793 | Input/Output: [(95 -42 55 40) -42]
Test Case: 794 | Input/Output: [(-8 18 35 67) -8]
Test Case: 795 | Input/Output: [(0 92 65 54) 0]
Test Case: 796 | Input/Output: [(-17 -20 -95 84) -95]
Test Case: 797 | Input/Output: [(-44 7 30 11) -44]
Test Case: 798 | Input/Output: [(-56 -85 61 -51) -85]
Test Case: 799 | Input/Output: [(-90 -47 50 -8) -90]
Test Case: 800 | Input/Output: [(-96 -10 55 73) -96]
Test Case: 801 | Input/Output: [(45 58 73 -19) -19]
Test Case: 802 | Input/Output: [(64 -11 6 -94) -94]
Test Case: 803 | Input/Output: [(-75 -75 51 40) -75]
Test Case: 804 | Input/Output: [(-20 -26 -49 13) -49]
Test Case: 805 | Input/Output: [(89 -7 -24 24) -24]
Test Case: 806 | Input/Output: [(85 76 -68 39) -68]
Test Case: 807 | Input/Output: [(-8 -8 28 -37) -37]
Test Case: 808 | Input/Output: [(73 80 -49 64) -49]
Test Case: 809 | Input/Output: [(27 75 -95 51) -95]
Test Case: 810 | Input/Output: [(-52 28 71 94) -52]
Test Case: 811 | Input/Output: [(13 -63 80 99) -63]
Test Case: 812 | Input/Output: [(90 -31 73 87) -31]
Test Case: 813 | Input/Output: [(58 2 58 94) 2]
Test Case: 814 | Input/Output: [(-84 0 8 -94) -94]
Test Case: 815 | Input/Output: [(-99 -94 -75 -63) -99]
Test Case: 816 | Input/Output: [(-49 -81 39 -54) -81]
Test Case: 817 | Input/Output: [(-48 -33 -55 -12) -55]
Test Case: 818 | Input/Output: [(-77 20 -81 -51) -81]
Test Case: 819 | Input/Output: [(-7 -97 -87 -46) -97]
Test Case: 820 | Input/Output: [(3 62 -18 18) -18]
Test Case: 821 | Input/Output: [(-26 53 57 -26) -26]
Test Case: 822 | Input/Output: [(-73 -31 -47 62) -73]
Test Case: 823 | Input/Output: [(65 77 83 13) 13]
Test Case: 824 | Input/Output: [(-64 -59 29 0) -64]
Test Case: 825 | Input/Output: [(-61 -72 -43 -52) -72]
Test Case: 826 | Input/Output: [(-63 -79 -1 10) -79]
Test Case: 827 | Input/Output: [(-19 -4 -72 -39) -72]
Test Case: 828 | Input/Output: [(-4 25 84 -90) -90]
Test Case: 829 | Input/Output: [(54 54 24 95) 24]
Test Case: 830 | Input/Output: [(-25 18 55 -69) -69]
Test Case: 831 | Input/Output: [(10 30 100 24) 10]
Test Case: 832 | Input/Output: [(7 -50 -49 -48) -50]
Test Case: 833 | Input/Output: [(-15 -74 81 29) -74]
Test Case: 834 | Input/Output: [(-10 -26 12 56) -26]
Test Case: 835 | Input/Output: [(30 -48 68 -100) -100]
Test Case: 836 | Input/Output: [(-4 36 -74 15) -74]
Test Case: 837 | Input/Output: [(97 -95 -10 34) -95]
Test Case: 838 | Input/Output: [(-70 31 -76 -34) -76]
Test Case: 839 | Input/Output: [(-12 -20 16 -88) -88]
Test Case: 840 | Input/Output: [(11 -16 30 -57) -57]
Test Case: 841 | Input/Output: [(9 -88 22 -59) -88]
Test Case: 842 | Input/Output: [(97 -46 -51 60) -51]
Test Case: 843 | Input/Output: [(-38 41 25 25) -38]
Test Case: 844 | Input/Output: [(-69 92 -22 -72) -72]
Test Case: 845 | Input/Output: [(-45 -52 -9 -63) -63]
Test Case: 846 | Input/Output: [(-91 -93 -80 -11) -93]
Test Case: 847 | Input/Output: [(95 91 -16 -52) -52]
Test Case: 848 | Input/Output: [(81 77 89 59) 59]
Test Case: 849 | Input/Output: [(-23 58 -42 -49) -49]
Test Case: 850 | Input/Output: [(27 33 -59 -21) -59]
Test Case: 851 | Input/Output: [(84 7 21 24) 7]
Test Case: 852 | Input/Output: [(-60 88 15 59) -60]
Test Case: 853 | Input/Output: [(-69 40 -88 10) -88]
Test Case: 854 | Input/Output: [(50 73 -54 -38) -54]
Test Case: 855 | Input/Output: [(-7 76 50 35) -7]
Test Case: 856 | Input/Output: [(94 -76 88 61) -76]
Test Case: 857 | Input/Output: [(-100 -22 -62 66) -100]
Test Case: 858 | Input/Output: [(-89 -7 27 -41) -89]
Test Case: 859 | Input/Output: [(-4 44 1 -90) -90]
Test Case: 860 | Input/Output: [(38 -81 42 29) -81]
Test Case: 861 | Input/Output: [(7 34 -81 -36) -81]
Test Case: 862 | Input/Output: [(47 38 63 -44) -44]
Test Case: 863 | Input/Output: [(5 86 30 5) 5]
Test Case: 864 | Input/Output: [(45 5 -81 71) -81]
Test Case: 865 | Input/Output: [(-64 -23 77 -77) -77]
Test Case: 866 | Input/Output: [(-54 78 1 -95) -95]
Test Case: 867 | Input/Output: [(-3 -2 96 40) -3]
Test Case: 868 | Input/Output: [(95 -38 -17 -79) -79]
Test Case: 869 | Input/Output: [(-96 -42 -32 82) -96]
Test Case: 870 | Input/Output: [(3 87 66 94) 3]
Test Case: 871 | Input/Output: [(-64 94 24 50) -64]
Test Case: 872 | Input/Output: [(58 33 -2 -31) -31]
Test Case: 873 | Input/Output: [(-5 -6 -77 -35) -77]
Test Case: 874 | Input/Output: [(72 -61 42 82) -61]
Test Case: 875 | Input/Output: [(16 13 -22 10) -22]
Test Case: 876 | Input/Output: [(-60 -17 97 -37) -60]
Test Case: 877 | Input/Output: [(-48 57 -80 -68) -80]
Test Case: 878 | Input/Output: [(9 -71 -85 -21) -85]
Test Case: 879 | Input/Output: [(94 -9 -86 -77) -86]
Test Case: 880 | Input/Output: [(16 23 57 -9) -9]
Test Case: 881 | Input/Output: [(86 -42 25 -20) -42]
Test Case: 882 | Input/Output: [(-74 67 -19 -84) -84]
Test Case: 883 | Input/Output: [(5 -17 -87 98) -87]
Test Case: 884 | Input/Output: [(-4 -38 74 84) -38]
Test Case: 885 | Input/Output: [(79 -63 16 70) -63]
Test Case: 886 | Input/Output: [(73 -60 44 7) -60]
Test Case: 887 | Input/Output: [(-43 8 -99 100) -99]
Test Case: 888 | Input/Output: [(-91 -31 30 6) -91]
Test Case: 889 | Input/Output: [(17 45 79 57) 17]
Test Case: 890 | Input/Output: [(49 -35 48 -91) -91]
Test Case: 891 | Input/Output: [(-60 -89 -40 19) -89]
Test Case: 892 | Input/Output: [(-41 76 64 11) -41]
Test Case: 893 | Input/Output: [(25 59 44 38) 25]
Test Case: 894 | Input/Output: [(64 -97 71 17) -97]
Test Case: 895 | Input/Output: [(45 -72 -31 -96) -96]
Test Case: 896 | Input/Output: [(36 -56 74 50) -56]
Test Case: 897 | Input/Output: [(-30 31 -70 76) -70]
Test Case: 898 | Input/Output: [(-86 -11 -63 -29) -86]
Test Case: 899 | Input/Output: [(-30 -47 -59 22) -59]
Test Case: 900 | Input/Output: [(-66 59 -29 -41) -66]
Test Case: 901 | Input/Output: [(-65 -48 -61 31) -65]
Test Case: 902 | Input/Output: [(41 60 -23 98) -23]
Test Case: 903 | Input/Output: [(84 44 -64 61) -64]
Test Case: 904 | Input/Output: [(-81 -33 -3 -77) -81]
Test Case: 905 | Input/Output: [(39 -9 -42 64) -42]
Test Case: 906 | Input/Output: [(-23 62 93 -56) -56]
Test Case: 907 | Input/Output: [(-58 88 2 68) -58]
Test Case: 908 | Input/Output: [(-76 -74 34 56) -76]
Test Case: 909 | Input/Output: [(-75 -61 -82 71) -82]
Test Case: 910 | Input/Output: [(-82 -86 -37 52) -86]
Test Case: 911 | Input/Output: [(90 -3 66 11) -3]
Test Case: 912 | Input/Output: [(-36 -29 -28 32) -36]
Test Case: 913 | Input/Output: [(92 -89 55 -89) -89]
Test Case: 914 | Input/Output: [(-7 62 -59 -27) -59]
Test Case: 915 | Input/Output: [(46 -7 19 -63) -63]
Test Case: 916 | Input/Output: [(45 24 27 -78) -78]
Test Case: 917 | Input/Output: [(96 91 38 -11) -11]
Test Case: 918 | Input/Output: [(75 -60 83 76) -60]
Test Case: 919 | Input/Output: [(35 92 -89 82) -89]
Test Case: 920 | Input/Output: [(64 67 -77 -54) -77]
Test Case: 921 | Input/Output: [(-88 -72 65 -63) -88]
Test Case: 922 | Input/Output: [(37 3 22 46) 3]
Test Case: 923 | Input/Output: [(23 1 -75 57) -75]
Test Case: 924 | Input/Output: [(-21 -36 -68 77) -68]
Test Case: 925 | Input/Output: [(34 -19 99 4) -19]
Test Case: 926 | Input/Output: [(-10 18 -70 85) -70]
Test Case: 927 | Input/Output: [(-69 -88 -18 -5) -88]
Test Case: 928 | Input/Output: [(21 38 -57 -81) -81]
Test Case: 929 | Input/Output: [(96 -70 -70 25) -70]
Test Case: 930 | Input/Output: [(47 50 70 -44) -44]
Test Case: 931 | Input/Output: [(-75 -90 17 -44) -90]
Test Case: 932 | Input/Output: [(13 100 94 98) 13]
Test Case: 933 | Input/Output: [(10 9 45 -90) -90]
Test Case: 934 | Input/Output: [(-7 -98 83 67) -98]
Test Case: 935 | Input/Output: [(86 85 54 -91) -91]
Test Case: 936 | Input/Output: [(72 67 -76 -81) -81]
Test Case: 937 | Input/Output: [(-10 -15 -29 -86) -86]
Test Case: 938 | Input/Output: [(-56 68 -27 89) -56]
Test Case: 939 | Input/Output: [(-63 12 -14 -78) -78]
Test Case: 940 | Input/Output: [(-39 0 -97 -76) -97]
Test Case: 941 | Input/Output: [(28 -50 60 98) -50]
Test Case: 942 | Input/Output: [(-93 82 38 46) -93]
Test Case: 943 | Input/Output: [(71 -76 5 -66) -76]
Test Case: 944 | Input/Output: [(12 87 -38 89) -38]
Test Case: 945 | Input/Output: [(90 -67 -72 65) -72]
Test Case: 946 | Input/Output: [(-78 -75 -16 41) -78]
Test Case: 947 | Input/Output: [(77 -86 83 63) -86]
Test Case: 948 | Input/Output: [(-62 -84 7 68) -84]
Test Case: 949 | Input/Output: [(55 60 92 84) 55]
Test Case: 950 | Input/Output: [(-33 -79 80 -3) -79]
Test Case: 951 | Input/Output: [(-2 -56 44 -49) -56]
Test Case: 952 | Input/Output: [(49 -2 -59 85) -59]
Test Case: 953 | Input/Output: [(65 66 87 94) 65]
Test Case: 954 | Input/Output: [(-71 45 67 -67) -71]
Test Case: 955 | Input/Output: [(36 -78 47 69) -78]
Test Case: 956 | Input/Output: [(93 -66 -46 -13) -66]
Test Case: 957 | Input/Output: [(-27 -18 12 -90) -90]
Test Case: 958 | Input/Output: [(58 14 -74 98) -74]
Test Case: 959 | Input/Output: [(-52 11 24 -53) -53]
Test Case: 960 | Input/Output: [(-94 -2 85 -5) -94]
Test Case: 961 | Input/Output: [(-1 69 -79 -55) -79]
Test Case: 962 | Input/Output: [(-2 18 18 -44) -44]
Test Case: 963 | Input/Output: [(-86 68 54 -5) -86]
Test Case: 964 | Input/Output: [(90 41 93 -5) -5]
Test Case: 965 | Input/Output: [(-17 -82 10 -35) -82]
Test Case: 966 | Input/Output: [(-69 -49 80 -56) -69]
Test Case: 967 | Input/Output: [(80 4 42 50) 4]
Test Case: 968 | Input/Output: [(-44 -77 62 -100) -100]
Test Case: 969 | Input/Output: [(-43 -56 -29 -17) -56]
Test Case: 970 | Input/Output: [(20 -1 -44 19) -44]
Test Case: 971 | Input/Output: [(-56 -57 10 -64) -64]
Test Case: 972 | Input/Output: [(-30 -60 -26 64) -60]
Test Case: 973 | Input/Output: [(-63 -37 -74 -41) -74]
Test Case: 974 | Input/Output: [(60 -36 -2 -7) -36]
Test Case: 975 | Input/Output: [(-25 9 -78 66) -78]
Test Case: 976 | Input/Output: [(-60 -99 82 20) -99]
Test Case: 977 | Input/Output: [(89 54 76 85) 54]
Test Case: 978 | Input/Output: [(69 3 -80 52) -80]
Test Case: 979 | Input/Output: [(96 -64 90 47) -64]
Test Case: 980 | Input/Output: [(72 53 -37 60) -37]
Test Case: 981 | Input/Output: [(77 39 51 80) 39]
Test Case: 982 | Input/Output: [(94 37 -34 -30) -34]
Test Case: 983 | Input/Output: [(16 -25 63 -56) -56]
Test Case: 984 | Input/Output: [(62 -3 -82 52) -82]
Test Case: 985 | Input/Output: [(76 5 -57 -30) -57]
Test Case: 986 | Input/Output: [(-88 -81 -59 -92) -92]
Test Case: 987 | Input/Output: [(72 -43 -81 -99) -99]
Test Case: 988 | Input/Output: [(51 -5 53 22) -5]
Test Case: 989 | Input/Output: [(-82 30 89 25) -82]
Test Case: 990 | Input/Output: [(-64 -77 -53 95) -77]
Test Case: 991 | Input/Output: [(22 -4 -44 -58) -58]
Test Case: 992 | Input/Output: [(70 -55 62 19) -55]
Test Case: 993 | Input/Output: [(48 -40 47 40) -40]
Test Case: 994 | Input/Output: [(-85 5 -38 -57) -85]
Test Case: 995 | Input/Output: [(32 -11 -67 -8) -67]
Test Case: 996 | Input/Output: [(73 -38 -43 38) -43]
Test Case: 997 | Input/Output: [(-73 23 -94 89) -94]
Test Case: 998 | Input/Output: [(97 42 45 17) 17]
Test Case: 999 | Input/Output: [(22 63 16 69) 16]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 48 -8 61 74 62 -87 -33 65 65 -6 102 11 78 92 9 10
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-4 -58 -4 -4] -58] [[0 0 80 0] 0] [[6 6 6 57] 6] [[-74 -74 -74 -55] -74] [[-29 -80 -80 -80] -80] [[89 -98 89 89] -98] [[-52 -2 -2 -2] -52] [[24 24 24 53] 24] [[20 91 91 91] 20] [[-57 -57 -11 -57] -57] [(26 26 26 26) 26] [(-15 -15 -15 -15) -15] [(54 54 54 54) 54] [(76 76 76 76) 76] [(61 61 61 61) 61] [(26 0 91 2) 0] [(16 22 43 95) 16] [(97 65 50 44) 44] [(89 24 84 52) 24] [(83 79 55 95) 55] [(75 31 37 2) 2] [(89 9 55 46) 9] [(54 22 81 72) 22] [(45 5 99 95) 5] [(27 90 51 54) 27] [(60 55 92 100) 55] [(82 82 5 49) 5] [(66 44 65 98) 44] [(88 30 39 56) 30] [(26 43 78 8) 8] [(41 88 93 41) 41] [(37 22 37 66) 22] [(64 42 1 88) 1] [(46 33 13 87) 13] [(26 90 72 54) 26] [(-37 -63 37 -95) -95] [(41 -79 90 53) -79] [(16 32 91 37) 16] [(1 -12 -67 -27) -67] [(24 38 -84 -65) -84] [(-25 59 -16 41) -25] [(33 29 -20 -8) -20] [(7 -95 -2 -80) -95] [(-86 -91 15 -68) -91] [(-51 8 -7 -31) -51] [(100 39 -3 10) -3] [(35 63 -96 31) -96] [(-9 10 26 22) -9] [(67 -12 27 12) -12] [(-17 46 9 -11) -17] [(17 53 72 -82) -82] [(-8 -78 -6 -100) -100] [(88 90 3 4) 3] [(-71 -36 -83 47) -83] [(-81 -74 -90 -88) -90] [(-90 7 -28 64) -90] [(-25 -55 -28 -27) -55] [(-77 84 -18 40) -77] [(-98 -93 20 -61) -98] [(17 -86 -37 -70) -86] [(-53 11 35 5) -53] [(3 -28 89 76) -28] [(-26 61 -46 -30) -46] [(-68 -80 -98 -96) -98] [(-72 -84 10 77) -84] [(13 20 48 39) 13] [(-91 67 -79 -37) -91] [(-98 -14 -21 10) -98] [(89 -27 98 -63) -63] [(-30 79 12 -5) -30] [(85 19 19 -51) -51] [(-27 39 -17 -87) -87] [(-81 -13 100 87) -81] [(98 90 -46 81) -46] [(-32 19 -4 58) -32] [(-84 0 -60 -4) -84] [(-64 -75 -18 96) -75] [(14 0 -58 -57) -58] [(18 -46 48 45) -46] [(78 76 65 -93) -93] [(-62 66 -8 67) -62] [(31 24 21 36) 21] [(34 -83 -32 7) -83] [(-44 69 99 91) -44] [(-99 1 30 36) -99] [(-42 -28 56 -99) -99] [(-24 -33 -87 -29) -87] [(-23 -1 -48 -2) -48] [(-8 -46 -1 97) -46] [(-14 -64 -19 -80) -80] [(13 -72 34 -98) -98] [(-64 -83 45 -60) -83] [(62 -95 98 69) -95] [(39 -24 -81 -23) -81] [(7 94 -68 -86) -86])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 90                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 90                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 38                 
Correct output: -25                 | Program output: 59                 
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: 8                  
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 63                 
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 46                 
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 90                 
Correct output: -83                 | Program output: -36                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: 84                 
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 11                 
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: 61                 
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: 67                 
Correct output: -98                 | Program output: -14                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: 79                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: 39                 
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: 19                 
Correct output: -84                 | Program output: 0                  
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: 66                 
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -1                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_stackdepth integer_lt exec_k_when_autoconstructing () (exec_pop ()) exec_s_when_autoconstructing (integer_gt integer_add) (integer_div integer_yankdup boolean_stackdepth) (boolean_dup_items integer_shove boolean_not in1 print_integer) integer_eq integer_stackdepth integer_add exec_empty boolean_or boolean_rot integer_min boolean_and boolean_stackdepth integer_yank exec_when (in3 in1) boolean_and boolean_yankdup exec_rot (boolean_yankdup integer_shove boolean_dup boolean_dup_times integer_gte exec_rot (exec_do*while (exec_swap (exec_y () boolean_invert_second_then_and integer_sub exec_k (in2 integer_dec boolean_xor integer_stackdepth) ()) ())) () ()) () ())
Lexicase best errors: [0 0 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 67
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_stackdepth integer_lt exec_k_when_autoconstructing () (exec_pop ()) exec_s_when_autoconstructing (integer_gt integer_add) (integer_div integer_yankdup boolean_stackdepth) (boolean_dup_items integer_shove boolean_not in1 print_integer) integer_eq integer_stackdepth integer_add exec_empty boolean_or boolean_rot integer_min boolean_and boolean_stackdepth integer_yank exec_when (in3 in1) boolean_and boolean_yankdup exec_rot (boolean_yankdup integer_shove boolean_dup boolean_dup_times integer_gte exec_rot (exec_do*while (exec_swap (exec_y () boolean_invert_second_then_and integer_sub exec_k (in2 integer_dec boolean_xor integer_stackdepth) ()) ())) () ()) () ())
Zero cases best errors: [0 0 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 67
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 10 3 3 1 1 3 4 3 4)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (11 10 3 3 1 1 3 4 3 4)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lte})
Best program: (boolean_dup_items exec_noop exec_stackdepth integer_yank integer_swap integer_yank exec_shove () exec_if (in2 print_integer exec_yank) (integer_lte))
Errors: [0 0 0 1 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 12
Size: 16
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 9.957
Median total errors in population: 10
Error averages by case: (0.989 0.99 0.997 0.997 0.999 0.999 0.997 0.996 0.997 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.96
Average program size in population (points): 69.025
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 471730
--- Timings ---
Current time: 1559314649438 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.6%
Reproduction:         0.8 seconds, 32.6%
Fitness Testing:      1.5 seconds, 62.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 90                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 90                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 38                 
Correct output: -25                 | Program output: 59                 
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: 8                  
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 63                 
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 46                 
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 90                 
Correct output: -83                 | Program output: -36                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: 84                 
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 11                 
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: 61                 
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: 67                 
Correct output: -98                 | Program output: -14                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: 79                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: 39                 
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: 19                 
Correct output: -84                 | Program output: 0                  
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: 66                 
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -1                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Lexicase best program: (integer_flush integer_flush exec_yankdup exec_do*count () exec_if () (boolean_dup_items) integer_sub integer_eq boolean_swap integer_shove exec_rot (exec_noop integer_flush exec_noop boolean_frominteger exec_noop exec_yankdup) () (integer_max in2 print_integer integer_shove integer_gte in4 integer_sub) exec_y (in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 integer_swap boolean_stackdepth boolean_yank exec_empty integer_empty boolean_dup_times boolean_shove boolean_empty))) () ())
Lexicase best errors: [0 1 1 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 61
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Zero cases best program: (integer_flush integer_flush exec_yankdup exec_do*count () exec_if () (boolean_dup_items) integer_sub integer_eq boolean_swap integer_shove exec_rot (exec_noop integer_flush exec_noop boolean_frominteger exec_noop exec_yankdup) () (integer_max in2 print_integer integer_shove integer_gte in4 integer_sub) exec_y (in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 integer_swap boolean_stackdepth boolean_yank exec_empty integer_empty boolean_dup_times boolean_shove boolean_empty))) () ())
Zero cases best errors: [0 1 1 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 61
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (545 1 171 373 317 316 316 374 1 373)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (545 1 171 373 317 316 316 374 1 373)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lte})
Best program: (boolean_dup_items exec_noop exec_stackdepth integer_yank integer_swap integer_yank exec_shove () exec_if (in2 print_integer exec_yank) (integer_lte))
Errors: [0 1 1 0 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 12
Size: 16
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.213
Median total errors in population: 7
Error averages by case: (0.455 0.999 0.829 0.627 0.683 0.684 0.684 0.626 0.999 0.627)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.755
Average program size in population (points): 53.924
Average percent parens in population: 0.292
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.513
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.483
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.465
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 968747
--- Timings ---
Current time: 1559314651789 milliseconds
Total Time:           4.9 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         2.3 seconds, 47.2%
Fitness Testing:      2.1 seconds, 43.4%
Report:               0.4 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 408
Test mean error for best: 0.40800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 72                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -16                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -7                 
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 9                  
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -18                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 11                 
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: -79                
Correct output: -98                 | Program output: -21                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: 12                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -17                
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -4                 
Correct output: -84                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -8                 
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Lexicase best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 boolean_swap exec_stackdepth integer_dup_items integer_min exec_k_when_autoconstructing () (boolean_pop) boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 integer_sub) exec_yank in1 boolean_stackdepth in3) (exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 integer_swap boolean_stackdepth boolean_yank exec_empty integer_empty boolean_dup_times boolean_shove boolean_empty))) () ()))
Lexicase best errors: [0 1 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Zero cases best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 boolean_swap exec_stackdepth integer_dup_items integer_min exec_k_when_autoconstructing () (boolean_pop) boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 integer_sub) exec_yank in1 boolean_stackdepth in3) (exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 integer_swap boolean_stackdepth boolean_yank exec_empty integer_empty boolean_dup_times boolean_shove boolean_empty))) () ()))
Zero cases best errors: [0 1 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 213 313 622 255 213 213 255 94 93)
Population mean number of elite cases: 2.53
Count of perfect (error zero) individuals by case: (255 213 313 622 255 213 213 255 94 93)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 boolean_swap exec_stackdepth integer_dup_items integer_min exec_k_when_autoconstructing () (boolean_pop) boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 integer_sub) exec_yank in1 boolean_stackdepth in3) (exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 integer_swap boolean_stackdepth boolean_yank exec_empty integer_empty boolean_dup_times boolean_shove boolean_empty))) () ()))
Errors: [0 1 0 0 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 44
Size: 59
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 7.474
Median total errors in population: 7
Error averages by case: (0.745 0.787 0.687 0.378 0.745 0.787 0.787 0.745 0.906 0.907)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.658
Average program size in population (points): 64.871
Average percent parens in population: 0.289
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.155
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1445333
--- Timings ---
Current time: 1559314655042 milliseconds
Total Time:           8.1 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.8 seconds, 58.5%
Fitness Testing:      2.7 seconds, 32.9%
Report:               0.6 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 408
Test mean error for best: 0.40800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 72                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -16                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -7                 
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 9                  
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -18                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 11                 
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: -79                
Correct output: -98                 | Program output: -21                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: 12                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -17                
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -4                 
Correct output: -84                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -8                 
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Lexicase best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 boolean_swap exec_stackdepth integer_dup_items integer_min exec_k_when_autoconstructing () (boolean_pop) boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 integer_sub) exec_yank in1 boolean_stackdepth in3) (exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 integer_swap boolean_stackdepth boolean_yank exec_empty integer_empty boolean_dup_times boolean_shove boolean_empty))) () ()))
Lexicase best errors: [0 1 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Zero cases best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 boolean_swap exec_stackdepth integer_dup_items integer_min exec_k_when_autoconstructing () (boolean_pop) boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 integer_sub) exec_yank in1 boolean_stackdepth in3) (exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 integer_swap boolean_stackdepth boolean_yank exec_empty integer_empty boolean_dup_times boolean_shove boolean_empty))) () ()))
Zero cases best errors: [0 1 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (390 301 301 389 301 390 390 385 173 175)
Population mean number of elite cases: 3.19
Count of perfect (error zero) individuals by case: (390 301 301 389 301 390 390 385 173 175)
Population mean number of perfect (error zero) cases: 3.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 boolean_swap exec_stackdepth integer_dup_items integer_min exec_k_when_autoconstructing () (boolean_pop) boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 integer_sub) exec_yank in1 boolean_stackdepth in3) (exec_rot (exec_if () (boolean_not integer_shove integer_pop) exec_dup (integer_gt exec_dup_times () in4 integer_swap boolean_stackdepth boolean_yank exec_empty integer_empty boolean_dup_times boolean_shove boolean_empty)) () ()))
Errors: [0 1 1 0 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 44
Size: 58
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 6.805
Median total errors in population: 7
Error averages by case: (0.61 0.699 0.699 0.611 0.699 0.61 0.61 0.615 0.827 0.825)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.64
Average program size in population (points): 59.915
Average percent parens in population: 0.285
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.509
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 211
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1772361
--- Timings ---
Current time: 1559314658023 milliseconds
Total Time:          11.1 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         7.1 seconds, 64.1%
Fitness Testing:      3.0 seconds, 27.3%
Report:               0.8 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 408
Test mean error for best: 0.40800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 72                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -16                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -7                 
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 9                  
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -18                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 11                 
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: -79                
Correct output: -98                 | Program output: -21                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: 12                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -17                
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -4                 
Correct output: -84                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -8                 
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 2, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Lexicase best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 boolean_swap exec_stackdepth integer_dup_items integer_min exec_k_when_autoconstructing () () boolean_pop boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 integer_sub) exec_yank in1 boolean_stackdepth in3) (exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 integer_swap boolean_stackdepth boolean_yank exec_empty integer_empty boolean_dup_times boolean_shove boolean_empty))) () ()))
Lexicase best errors: [1 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 59
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 2, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Zero cases best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 boolean_swap exec_stackdepth integer_dup_items integer_min exec_k_when_autoconstructing () () boolean_pop boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 integer_sub) exec_yank in1 boolean_stackdepth in3) (exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 integer_swap boolean_stackdepth boolean_yank exec_empty integer_empty boolean_dup_times boolean_shove boolean_empty))) () ()))
Zero cases best errors: [1 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 59
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (177 228 464 879 460 880 460 463 698 467)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (177 228 464 879 460 880 460 463 698 467)
Population mean number of perfect (error zero) cases: 5.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 boolean_swap exec_stackdepth integer_dup_items integer_min exec_k_when_autoconstructing () (boolean_pop) boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 integer_sub) exec_yank in1 boolean_stackdepth in3) (exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 integer_swap boolean_stackdepth boolean_yank exec_empty integer_empty boolean_dup_times boolean_shove boolean_empty)))) () ()))
Errors: [1 1 0 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 47
Size: 64
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 4.824
Median total errors in population: 6
Error averages by case: (0.823 0.772 0.536 0.121 0.54 0.12 0.54 0.537 0.302 0.533)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.352
Average program size in population (points): 59.556
Average percent parens in population: 0.287
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.968625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2093981
--- Timings ---
Current time: 1559314661429 milliseconds
Total Time:          14.5 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:        10.0 seconds, 68.5%
Fitness Testing:      3.4 seconds, 23.3%
Report:               1.1 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 408
Test mean error for best: 0.40800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 72                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -16                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -7                 
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 9                  
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -18                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 11                 
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: -79                
Correct output: -98                 | Program output: -21                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: 12                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -17                
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -4                 
Correct output: -84                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -8                 
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_16})
Lexicase best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 boolean_swap exec_stackdepth integer_dup_items integer_min exec_k_when_autoconstructing () (boolean_pop) boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 integer_sub) exec_yank in1 boolean_stackdepth in3) (exec_rot (exec_if (boolean_not integer_shove exec_y_when_autoconstructing () integer_dup exec_rot (print_integer) (exec_do*times (exec_s_when_autoconstructing () (tag_integer_16) ())) ()) ()) () ()))
Lexicase best errors: [0 0 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 58
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_16})
Zero cases best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 boolean_swap exec_stackdepth integer_dup_items integer_min exec_k_when_autoconstructing () (boolean_pop) boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 integer_sub) exec_yank in1 boolean_stackdepth in3) (exec_rot (exec_if (boolean_not integer_shove exec_y_when_autoconstructing () integer_dup exec_rot (print_integer) (exec_do*times (exec_s_when_autoconstructing () (tag_integer_16) ())) ()) ()) () ()))
Zero cases best errors: [0 0 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 58
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (658 889 97 97 641 658 131 131 651 95)
Population mean number of elite cases: 4.05
Count of perfect (error zero) individuals by case: (658 889 97 97 641 658 131 131 651 95)
Population mean number of perfect (error zero) cases: 4.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 boolean_swap exec_stackdepth integer_dup_items integer_min exec_k_when_autoconstructing () (boolean_pop) boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 integer_sub) exec_yank in1 boolean_stackdepth in3) (exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 integer_swap boolean_stackdepth boolean_yank exec_empty integer_empty boolean_dup_times boolean_shove boolean_empty))) () ()))
Errors: [0 0 1 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 44
Size: 59
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 5.952
Median total errors in population: 5
Error averages by case: (0.342 0.111 0.903 0.903 0.359 0.342 0.869 0.869 0.349 0.905)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.709
Average program size in population (points): 59.013
Average percent parens in population: 0.275
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.4595
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 124
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2355729
--- Timings ---
Current time: 1559314663756 milliseconds
Total Time:          16.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        11.8 seconds, 69.8%
Fitness Testing:      3.7 seconds, 21.7%
Report:               1.3 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 24                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Lexicase best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in1 boolean_swap exec_stackdepth integer_dup_items integer_min exec_k_when_autoconstructing () (boolean_pop) boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 integer_sub) exec_yank in1 boolean_stackdepth in3) (exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 integer_swap boolean_stackdepth boolean_yank exec_empty integer_empty boolean_dup_times boolean_shove boolean_empty))) () ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 59
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Zero cases best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in1 boolean_swap exec_stackdepth integer_dup_items integer_min exec_k_when_autoconstructing () (boolean_pop) boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 integer_sub) exec_yank in1 boolean_stackdepth in3) (exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 integer_swap boolean_stackdepth boolean_yank exec_empty integer_empty boolean_dup_times boolean_shove boolean_empty))) () ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 59
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (596 250 250 596 590 349 590 249 250 288)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (596 250 250 596 590 349 590 249 250 288)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in1 boolean_swap exec_stackdepth integer_dup_items integer_min exec_k_when_autoconstructing () (boolean_pop) boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 integer_sub) exec_yank in1 boolean_stackdepth in3) (exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 integer_swap boolean_stackdepth boolean_yank exec_empty integer_empty boolean_dup_times boolean_shove boolean_empty))) () ()))
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 44
Size: 59
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 5.992
Median total errors in population: 5
Error averages by case: (0.404 0.75 0.75 0.404 0.41 0.651 0.41 0.751 0.75 0.712)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.627
Average program size in population (points): 57.674
Average percent parens in population: 0.296
Minimum age in population: 6.5
Maximum age in population: 10.875
Average age in population: 9.00196875
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.009
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2588511
--- Timings ---
Current time: 1559314666064 milliseconds
Total Time:          19.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        13.6 seconds, 71.0%
Fitness Testing:      3.9 seconds, 20.4%
Report:               1.5 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 54                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 49                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 54                 
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -27                
Correct output: -84                 | Program output: -65                
Correct output: -25                 | Program output: 41                 
Correct output: -20                 | Program output: -8                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -31                
Correct output: -3                  | Program output: 10                 
Correct output: -96                 | Program output: 31                 
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 4                  
Correct output: -83                 | Program output: -36                
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: 40                 
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 5                  
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -30                
Correct output: -98                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: -37                
Correct output: -98                 | Program output: -14                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -5                 
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: 81                 
Correct output: -32                 | Program output: 19                 
Correct output: -84                 | Program output: -4                 
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 66                 
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -2                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Lexicase best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in1 integer_min exec_k_when_autoconstructing () (boolean_pop) boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ())
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 65
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Zero cases best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in1 integer_min exec_k_when_autoconstructing () (boolean_pop) boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ())
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 65
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (148 818 820 148 84 819 687 84 819 84)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (148 818 820 148 84 819 687 84 819 84)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction 12} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in4 boolean_swap exec_stackdepth integer_dup_items integer_min exec_k_when_autoconstructing () (boolean_pop) boolean_yank print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 boolean_eq boolean_swap exec_rot (boolean_eq 12 exec_shove (integer_pop exec_s_when_autoconstructing (exec_do*times (in4 exec_rot (print_integer) (exec_do*times (exec_s_when_autoconstructing () (integer_empty boolean_dup_times boolean_shove boolean_empty) ())) ())) () ())) () ())) ())
Errors: [1 0 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 40
Size: 62
Percent parens: 0.355
--- Population Statistics ---
Average total errors in population: 5.489
Median total errors in population: 5
Error averages by case: (0.852 0.182 0.18 0.852 0.916 0.181 0.313 0.916 0.181 0.916)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.768
Average program size in population (points): 58.521
Average percent parens in population: 0.269
Minimum age in population: 7.5
Maximum age in population: 12.265625
Average age in population: 10.53525
Median age in population: 10.671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 212
Genome diversity (% unique genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 229
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2773305
--- Timings ---
Current time: 1559314668508 milliseconds
Total Time:          21.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.7 seconds, 72.4%
Fitness Testing:      4.1 seconds, 19.0%
Report:               1.7 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 191
Test mean error for best: 0.19100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 54                 
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -16                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -31                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -18                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 5                  
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: -79                
Correct output: -98                 | Program output: -21                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -5                 
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -4                 
Correct output: -84                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Lexicase best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in4 integer_min exec_k_when_autoconstructing () (boolean_pop) exec_s (print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 68
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Zero cases best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in4 integer_min exec_k_when_autoconstructing () (boolean_pop) exec_s (print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 68
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (891 457 459 940 926 458 457 457 459 457)
Population mean number of elite cases: 5.96
Count of perfect (error zero) individuals by case: (891 457 459 940 926 458 457 457 459 457)
Population mean number of perfect (error zero) cases: 5.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_empty})
Best program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in4 integer_min exec_k_when_autoconstructing () (boolean_pop) exec_s (print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 44
Size: 68
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 4.039
Median total errors in population: 4
Error averages by case: (0.109 0.543 0.541 0.06 0.074 0.542 0.543 0.543 0.541 0.543)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.994
Average program size in population (points): 63.443
Average percent parens in population: 0.338
Minimum age in population: 11.3125
Maximum age in population: 13.6875
Average age in population: 12.4753125
Median age in population: 12.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 277
Genome diversity (% unique genomes):	 0.453
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 286
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.01
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2968795
--- Timings ---
Current time: 1559314670833 milliseconds
Total Time:          23.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        17.5 seconds, 73.2%
Fitness Testing:      4.3 seconds, 18.1%
Report:               2.0 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 8
Successful program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in4 integer_min exec_k_when_autoconstructing () (boolean_pop) exec_s (print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 68


Auto-simplifying with starting size: 68
step: 0
program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in4 integer_min exec_k_when_autoconstructing () (boolean_pop) exec_s (print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 500
program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in4 integer_min exec_k_when_autoconstructing () (boolean_pop) exec_s (print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 1000
program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in4 integer_min exec_k_when_autoconstructing () (boolean_pop) exec_s (print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 1500
program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in4 integer_min exec_k_when_autoconstructing () (boolean_pop) exec_s (print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 2000
program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in4 integer_min exec_k_when_autoconstructing () (boolean_pop) exec_s (print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 2500
program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in4 integer_min exec_k_when_autoconstructing () (boolean_pop) exec_s (print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 3000
program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in4 integer_min exec_k_when_autoconstructing () (boolean_pop) exec_s (print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 3500
program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in4 integer_min exec_k_when_autoconstructing () (boolean_pop) exec_s (print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 4000
program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in4 integer_min exec_k_when_autoconstructing () (boolean_pop) exec_s (print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 4500
program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in4 integer_min exec_k_when_autoconstructing () (boolean_pop) exec_s (print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 5000
program: (exec_dup_times () integer_min boolean_empty integer_pop in2 in3 exec_s_when_autoconstructing () (exec_stackdepth) (integer_dup_items integer_min) exec_k_when_autoconstructing () (boolean_pop) boolean_yank in4 integer_min exec_k_when_autoconstructing () (boolean_pop) exec_s (print_integer exec_k (exec_flush print_exec (in2 boolean_swap boolean_shove integer_gte in4 exec_y_when_autoconstructing () exec_yank in1 boolean_stackdepth in3) exec_rot (exec_if () (boolean_not integer_shove exec_y_when_autoconstructing () exec_dup (integer_gt exec_dup_times () in4 boolean_dup_times boolean_shove boolean_empty))) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 191
Test mean error for best: 0.19100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 54                 
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -16                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -31                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -18                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 5                  
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: -79                
Correct output: -98                 | Program output: -21                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -5                 
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -4                 
Correct output: -84                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
;;******************************
