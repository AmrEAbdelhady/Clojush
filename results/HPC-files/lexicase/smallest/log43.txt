Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[41 41 -37 41] -37] [[-66 24 24 24] -66] [[-99 -99 -4 -99] -99] [[-19 24 -19 -19] -19] [[66 66 66 66] 66] [[86 84 86 86] 84] [[-9 -9 -93 -9] -93] [[-46 -46 -34 -46] -46] [[-74 -57 -57 -57] -74] [[-91 -91 -91 99] -91] [(38 38 38 38) 38] [(-70 -70 -70 -70) -70] [(-15 -15 -15 -15) -15] [(-88 -88 -88 -88) -88] [(-44 -44 -44 -44) -44] [(11 90 46 39) 11] [(81 8 13 40) 8] [(100 30 50 99) 30] [(80 27 28 87) 27] [(95 6 51 37) 6] [(86 9 27 89) 9] [(35 12 13 87) 12] [(15 49 100 16) 15] [(80 4 56 36) 4] [(83 62 34 80) 34] [(46 3 29 68) 3] [(80 36 14 97) 14] [(91 31 96 1) 1] [(54 34 50 79) 34] [(56 62 24 57) 24] [(67 36 76 13) 13] [(47 22 85 88) 22] [(85 90 90 91) 85] [(46 5 49 89) 5] [(15 99 65 43) 15] [(56 99 -30 -79) -79] [(52 -94 100 -4) -94] [(-98 -43 21 2) -98] [(6 13 62 79) 6] [(47 -72 -32 68) -72] [(-25 20 -80 13) -80] [(14 -17 -34 -40) -40] [(53 63 -92 52) -92] [(-65 -89 71 -6) -89] [(46 7 30 -64) -64] [(57 100 -77 100) -77] [(11 -34 23 -99) -99] [(96 -86 12 -51) -86] [(-90 95 -14 54) -90] [(45 -7 -3 79) -7] [(-82 17 7 75) -82] [(-73 -37 26 49) -73] [(-23 13 -53 18) -53] [(-91 18 58 37) -91] [(3 99 4 55) 3] [(83 -89 98 -88) -89] [(-30 -36 38 -28) -36] [(3 -34 -78 75) -78] [(27 4 59 -22) -22] [(-69 -90 -79 26) -90] [(85 92 18 16) 16] [(9 -57 -47 -15) -57] [(-5 59 62 -72) -72] [(-22 3 73 -26) -26] [(32 37 -84 17) -84] [(4 85 -53 16) -53] [(-28 91 -59 -67) -67] [(-39 -23 59 -7) -39] [(-62 -58 -36 87) -62] [(39 46 92 20) 20] [(15 7 5 -75) -75] [(-21 89 0 -52) -52] [(-89 -39 -47 48) -89] [(49 -24 -35 74) -35] [(6 92 54 -37) -37] [(85 90 30 -72) -72] [(-88 51 -9 -66) -88] [(-60 -98 -78 42) -98] [(21 71 89 -53) -53] [(-68 -72 -22 -73) -73] [(61 -53 -59 -21) -59] [(35 -66 87 16) -66] [(-76 30 88 -88) -88] [(-19 -90 55 31) -90] [(-91 -89 -93 56) -93] [(-48 -97 74 -28) -97] [(-33 48 10 36) -33] [(28 58 35 -94) -94] [(71 22 18 1) 1] [(81 35 -56 -31) -56] [(-44 67 -39 90) -44] [(-66 -43 -75 37) -75] [(-47 44 84 -31) -47] [(-60 -90 -7 19) -90] [(81 86 38 -12) -12])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[41 41 -37 41] -37]
Train Case:   6 | Input/Output: [[-66 24 24 24] -66]
Train Case:   7 | Input/Output: [[-99 -99 -4 -99] -99]
Train Case:   8 | Input/Output: [[-19 24 -19 -19] -19]
Train Case:   9 | Input/Output: [[66 66 66 66] 66]
Train Case:  10 | Input/Output: [[86 84 86 86] 84]
Train Case:  11 | Input/Output: [[-9 -9 -93 -9] -93]
Train Case:  12 | Input/Output: [[-46 -46 -34 -46] -46]
Train Case:  13 | Input/Output: [[-74 -57 -57 -57] -74]
Train Case:  14 | Input/Output: [[-91 -91 -91 99] -91]
Train Case:  15 | Input/Output: [(38 38 38 38) 38]
Train Case:  16 | Input/Output: [(-70 -70 -70 -70) -70]
Train Case:  17 | Input/Output: [(-15 -15 -15 -15) -15]
Train Case:  18 | Input/Output: [(-88 -88 -88 -88) -88]
Train Case:  19 | Input/Output: [(-44 -44 -44 -44) -44]
Train Case:  20 | Input/Output: [(11 90 46 39) 11]
Train Case:  21 | Input/Output: [(81 8 13 40) 8]
Train Case:  22 | Input/Output: [(100 30 50 99) 30]
Train Case:  23 | Input/Output: [(80 27 28 87) 27]
Train Case:  24 | Input/Output: [(95 6 51 37) 6]
Train Case:  25 | Input/Output: [(86 9 27 89) 9]
Train Case:  26 | Input/Output: [(35 12 13 87) 12]
Train Case:  27 | Input/Output: [(15 49 100 16) 15]
Train Case:  28 | Input/Output: [(80 4 56 36) 4]
Train Case:  29 | Input/Output: [(83 62 34 80) 34]
Train Case:  30 | Input/Output: [(46 3 29 68) 3]
Train Case:  31 | Input/Output: [(80 36 14 97) 14]
Train Case:  32 | Input/Output: [(91 31 96 1) 1]
Train Case:  33 | Input/Output: [(54 34 50 79) 34]
Train Case:  34 | Input/Output: [(56 62 24 57) 24]
Train Case:  35 | Input/Output: [(67 36 76 13) 13]
Train Case:  36 | Input/Output: [(47 22 85 88) 22]
Train Case:  37 | Input/Output: [(85 90 90 91) 85]
Train Case:  38 | Input/Output: [(46 5 49 89) 5]
Train Case:  39 | Input/Output: [(15 99 65 43) 15]
Train Case:  40 | Input/Output: [(56 99 -30 -79) -79]
Train Case:  41 | Input/Output: [(52 -94 100 -4) -94]
Train Case:  42 | Input/Output: [(-98 -43 21 2) -98]
Train Case:  43 | Input/Output: [(6 13 62 79) 6]
Train Case:  44 | Input/Output: [(47 -72 -32 68) -72]
Train Case:  45 | Input/Output: [(-25 20 -80 13) -80]
Train Case:  46 | Input/Output: [(14 -17 -34 -40) -40]
Train Case:  47 | Input/Output: [(53 63 -92 52) -92]
Train Case:  48 | Input/Output: [(-65 -89 71 -6) -89]
Train Case:  49 | Input/Output: [(46 7 30 -64) -64]
Train Case:  50 | Input/Output: [(57 100 -77 100) -77]
Train Case:  51 | Input/Output: [(11 -34 23 -99) -99]
Train Case:  52 | Input/Output: [(96 -86 12 -51) -86]
Train Case:  53 | Input/Output: [(-90 95 -14 54) -90]
Train Case:  54 | Input/Output: [(45 -7 -3 79) -7]
Train Case:  55 | Input/Output: [(-82 17 7 75) -82]
Train Case:  56 | Input/Output: [(-73 -37 26 49) -73]
Train Case:  57 | Input/Output: [(-23 13 -53 18) -53]
Train Case:  58 | Input/Output: [(-91 18 58 37) -91]
Train Case:  59 | Input/Output: [(3 99 4 55) 3]
Train Case:  60 | Input/Output: [(83 -89 98 -88) -89]
Train Case:  61 | Input/Output: [(-30 -36 38 -28) -36]
Train Case:  62 | Input/Output: [(3 -34 -78 75) -78]
Train Case:  63 | Input/Output: [(27 4 59 -22) -22]
Train Case:  64 | Input/Output: [(-69 -90 -79 26) -90]
Train Case:  65 | Input/Output: [(85 92 18 16) 16]
Train Case:  66 | Input/Output: [(9 -57 -47 -15) -57]
Train Case:  67 | Input/Output: [(-5 59 62 -72) -72]
Train Case:  68 | Input/Output: [(-22 3 73 -26) -26]
Train Case:  69 | Input/Output: [(32 37 -84 17) -84]
Train Case:  70 | Input/Output: [(4 85 -53 16) -53]
Train Case:  71 | Input/Output: [(-28 91 -59 -67) -67]
Train Case:  72 | Input/Output: [(-39 -23 59 -7) -39]
Train Case:  73 | Input/Output: [(-62 -58 -36 87) -62]
Train Case:  74 | Input/Output: [(39 46 92 20) 20]
Train Case:  75 | Input/Output: [(15 7 5 -75) -75]
Train Case:  76 | Input/Output: [(-21 89 0 -52) -52]
Train Case:  77 | Input/Output: [(-89 -39 -47 48) -89]
Train Case:  78 | Input/Output: [(49 -24 -35 74) -35]
Train Case:  79 | Input/Output: [(6 92 54 -37) -37]
Train Case:  80 | Input/Output: [(85 90 30 -72) -72]
Train Case:  81 | Input/Output: [(-88 51 -9 -66) -88]
Train Case:  82 | Input/Output: [(-60 -98 -78 42) -98]
Train Case:  83 | Input/Output: [(21 71 89 -53) -53]
Train Case:  84 | Input/Output: [(-68 -72 -22 -73) -73]
Train Case:  85 | Input/Output: [(61 -53 -59 -21) -59]
Train Case:  86 | Input/Output: [(35 -66 87 16) -66]
Train Case:  87 | Input/Output: [(-76 30 88 -88) -88]
Train Case:  88 | Input/Output: [(-19 -90 55 31) -90]
Train Case:  89 | Input/Output: [(-91 -89 -93 56) -93]
Train Case:  90 | Input/Output: [(-48 -97 74 -28) -97]
Train Case:  91 | Input/Output: [(-33 48 10 36) -33]
Train Case:  92 | Input/Output: [(28 58 35 -94) -94]
Train Case:  93 | Input/Output: [(71 22 18 1) 1]
Train Case:  94 | Input/Output: [(81 35 -56 -31) -56]
Train Case:  95 | Input/Output: [(-44 67 -39 90) -44]
Train Case:  96 | Input/Output: [(-66 -43 -75 37) -75]
Train Case:  97 | Input/Output: [(-47 44 84 -31) -47]
Train Case:  98 | Input/Output: [(-60 -90 -7 19) -90]
Train Case:  99 | Input/Output: [(81 86 38 -12) -12]
Test Case:   0 | Input/Output: [[39 42 42 42] 39]
Test Case:   1 | Input/Output: [[-36 -38 -36 -36] -38]
Test Case:   2 | Input/Output: [[-76 -76 -9 -76] -76]
Test Case:   3 | Input/Output: [[-31 -31 -31 -70] -70]
Test Case:   4 | Input/Output: [[51 43 43 43] 43]
Test Case:   5 | Input/Output: [[-33 -33 -33 66] -33]
Test Case:   6 | Input/Output: [[20 -81 -81 -81] -81]
Test Case:   7 | Input/Output: [[68 68 60 68] 60]
Test Case:   8 | Input/Output: [[85 77 85 85] 77]
Test Case:   9 | Input/Output: [[44 44 44 75] 44]
Test Case:  10 | Input/Output: [[54 -83 54 54] -83]
Test Case:  11 | Input/Output: [[-95 -95 -95 -94] -95]
Test Case:  12 | Input/Output: [[-25 -25 25 -25] -25]
Test Case:  13 | Input/Output: [[-59 -100 -59 -59] -100]
Test Case:  14 | Input/Output: [[-55 -55 -71 -55] -71]
Test Case:  15 | Input/Output: [[-15 31 31 31] -15]
Test Case:  16 | Input/Output: [[-81 -52 -81 -81] -81]
Test Case:  17 | Input/Output: [[-52 -52 -36 -52] -52]
Test Case:  18 | Input/Output: [[67 67 67 -16] -16]
Test Case:  19 | Input/Output: [[-23 -23 -1 -23] -23]
Test Case:  20 | Input/Output: [[-54 -54 -54 3] -54]
Test Case:  21 | Input/Output: [[-18 -18 -21 -18] -21]
Test Case:  22 | Input/Output: [[23 23 23 -51] -51]
Test Case:  23 | Input/Output: [[43 43 43 -79] -79]
Test Case:  24 | Input/Output: [[8 -25 -25 -25] -25]
Test Case:  25 | Input/Output: [[-39 -39 -39 23] -39]
Test Case:  26 | Input/Output: [[57 57 -48 57] -48]
Test Case:  27 | Input/Output: [[-4 30 30 30] -4]
Test Case:  28 | Input/Output: [[-40 7 7 7] -40]
Test Case:  29 | Input/Output: [[61 33 33 33] 33]
Test Case:  30 | Input/Output: [[-55 -55 63 -55] -55]
Test Case:  31 | Input/Output: [[26 26 -98 26] -98]
Test Case:  32 | Input/Output: [[57 -5 57 57] -5]
Test Case:  33 | Input/Output: [[-10 -10 -53 -10] -53]
Test Case:  34 | Input/Output: [[13 13 46 13] 13]
Test Case:  35 | Input/Output: [[-21 -21 -21 -39] -39]
Test Case:  36 | Input/Output: [[-75 34 34 34] -75]
Test Case:  37 | Input/Output: [[-60 -60 34 -60] -60]
Test Case:  38 | Input/Output: [[-10 -84 -10 -10] -84]
Test Case:  39 | Input/Output: [[-98 40 -98 -98] -98]
Test Case:  40 | Input/Output: [[38 -80 38 38] -80]
Test Case:  41 | Input/Output: [[40 -100 40 40] -100]
Test Case:  42 | Input/Output: [[-18 -18 -9 -18] -18]
Test Case:  43 | Input/Output: [[-44 -77 -44 -44] -77]
Test Case:  44 | Input/Output: [[-18 -18 -4 -18] -18]
Test Case:  45 | Input/Output: [[27 94 27 27] 27]
Test Case:  46 | Input/Output: [[-43 -43 2 -43] -43]
Test Case:  47 | Input/Output: [[-13 90 -13 -13] -13]
Test Case:  48 | Input/Output: [[86 19 86 86] 19]
Test Case:  49 | Input/Output: [[-76 -13 -76 -76] -76]
Test Case:  50 | Input/Output: [[94 -9 -9 -9] -9]
Test Case:  51 | Input/Output: [[31 31 31 -93] -93]
Test Case:  52 | Input/Output: [[-8 -35 -35 -35] -35]
Test Case:  53 | Input/Output: [[-69 32 32 32] -69]
Test Case:  54 | Input/Output: [[-2 91 -2 -2] -2]
Test Case:  55 | Input/Output: [[90 90 90 -83] -83]
Test Case:  56 | Input/Output: [[27 2 27 27] 2]
Test Case:  57 | Input/Output: [[-80 -74 -80 -80] -80]
Test Case:  58 | Input/Output: [[-51 59 -51 -51] -51]
Test Case:  59 | Input/Output: [[-16 -56 -16 -16] -56]
Test Case:  60 | Input/Output: [[-26 82 82 82] -26]
Test Case:  61 | Input/Output: [[4 48 4 4] 4]
Test Case:  62 | Input/Output: [[-85 -85 -94 -85] -94]
Test Case:  63 | Input/Output: [[-21 -51 -51 -51] -51]
Test Case:  64 | Input/Output: [[93 -82 -82 -82] -82]
Test Case:  65 | Input/Output: [[-23 -21 -23 -23] -23]
Test Case:  66 | Input/Output: [[77 -59 -59 -59] -59]
Test Case:  67 | Input/Output: [[-38 32 -38 -38] -38]
Test Case:  68 | Input/Output: [[73 -45 73 73] -45]
Test Case:  69 | Input/Output: [[-59 -59 -26 -59] -59]
Test Case:  70 | Input/Output: [[42 42 77 42] 42]
Test Case:  71 | Input/Output: [[39 -11 -11 -11] -11]
Test Case:  72 | Input/Output: [[63 97 63 63] 63]
Test Case:  73 | Input/Output: [[-18 -18 -18 -46] -46]
Test Case:  74 | Input/Output: [[75 75 -42 75] -42]
Test Case:  75 | Input/Output: [[16 16 16 27] 16]
Test Case:  76 | Input/Output: [[-27 -27 8 -27] -27]
Test Case:  77 | Input/Output: [[83 83 83 0] 0]
Test Case:  78 | Input/Output: [[2 -52 2 2] -52]
Test Case:  79 | Input/Output: [[-58 89 89 89] -58]
Test Case:  80 | Input/Output: [[-46 46 -46 -46] -46]
Test Case:  81 | Input/Output: [[-51 30 30 30] -51]
Test Case:  82 | Input/Output: [[-89 -89 -41 -89] -89]
Test Case:  83 | Input/Output: [[-14 -14 44 -14] -14]
Test Case:  84 | Input/Output: [[-68 -96 -68 -68] -96]
Test Case:  85 | Input/Output: [[5 81 81 81] 5]
Test Case:  86 | Input/Output: [[81 81 81 79] 79]
Test Case:  87 | Input/Output: [[-77 -77 -77 -16] -77]
Test Case:  88 | Input/Output: [[-94 -94 29 -94] -94]
Test Case:  89 | Input/Output: [[-25 -25 -25 -71] -71]
Test Case:  90 | Input/Output: [[8 8 -83 8] -83]
Test Case:  91 | Input/Output: [[-11 -20 -20 -20] -20]
Test Case:  92 | Input/Output: [[-73 56 56 56] -73]
Test Case:  93 | Input/Output: [[22 5 22 22] 5]
Test Case:  94 | Input/Output: [[-57 78 -57 -57] -57]
Test Case:  95 | Input/Output: [[41 77 41 41] 41]
Test Case:  96 | Input/Output: [[-73 -73 -73 9] -73]
Test Case:  97 | Input/Output: [[-45 -45 -45 -37] -45]
Test Case:  98 | Input/Output: [[-98 3 -98 -98] -98]
Test Case:  99 | Input/Output: [[-98 -98 -98 68] -98]
Test Case: 100 | Input/Output: [(56 56 56 56) 56]
Test Case: 101 | Input/Output: [(27 27 27 27) 27]
Test Case: 102 | Input/Output: [(87 87 87 87) 87]
Test Case: 103 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 104 | Input/Output: [(41 41 41 41) 41]
Test Case: 105 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 106 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 107 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 108 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 109 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 110 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 111 | Input/Output: [(20 20 20 20) 20]
Test Case: 112 | Input/Output: [(33 33 33 33) 33]
Test Case: 113 | Input/Output: [(91 91 91 91) 91]
Test Case: 114 | Input/Output: [(51 51 51 51) 51]
Test Case: 115 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 116 | Input/Output: [(11 11 11 11) 11]
Test Case: 117 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 118 | Input/Output: [(48 48 48 48) 48]
Test Case: 119 | Input/Output: [(18 18 18 18) 18]
Test Case: 120 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 121 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 122 | Input/Output: [(38 38 38 38) 38]
Test Case: 123 | Input/Output: [(98 98 98 98) 98]
Test Case: 124 | Input/Output: [(62 62 62 62) 62]
Test Case: 125 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 126 | Input/Output: [(20 20 20 20) 20]
Test Case: 127 | Input/Output: [(63 63 63 63) 63]
Test Case: 128 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 129 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 130 | Input/Output: [(59 59 59 59) 59]
Test Case: 131 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 132 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 133 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 134 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 135 | Input/Output: [(28 28 28 28) 28]
Test Case: 136 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 137 | Input/Output: [(72 72 72 72) 72]
Test Case: 138 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 139 | Input/Output: [(46 46 46 46) 46]
Test Case: 140 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 141 | Input/Output: [(58 58 58 58) 58]
Test Case: 142 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 143 | Input/Output: [(1 1 1 1) 1]
Test Case: 144 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 145 | Input/Output: [(42 42 42 42) 42]
Test Case: 146 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 147 | Input/Output: [(88 88 88 88) 88]
Test Case: 148 | Input/Output: [(99 99 99 99) 99]
Test Case: 149 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 150 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 151 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 152 | Input/Output: [(25 25 25 25) 25]
Test Case: 153 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 154 | Input/Output: [(6 6 6 6) 6]
Test Case: 155 | Input/Output: [(11 11 11 11) 11]
Test Case: 156 | Input/Output: [(30 30 30 30) 30]
Test Case: 157 | Input/Output: [(70 70 70 70) 70]
Test Case: 158 | Input/Output: [(39 39 39 39) 39]
Test Case: 159 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 160 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 161 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 162 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 163 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 164 | Input/Output: [(7 7 7 7) 7]
Test Case: 165 | Input/Output: [(43 43 43 43) 43]
Test Case: 166 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 167 | Input/Output: [(12 12 12 12) 12]
Test Case: 168 | Input/Output: [(83 83 83 83) 83]
Test Case: 169 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 170 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 171 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 172 | Input/Output: [(4 4 4 4) 4]
Test Case: 173 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 174 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 175 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 176 | Input/Output: [(69 69 69 69) 69]
Test Case: 177 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 178 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 179 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 180 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 181 | Input/Output: [(48 48 48 48) 48]
Test Case: 182 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 183 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 184 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 185 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 186 | Input/Output: [(23 23 23 23) 23]
Test Case: 187 | Input/Output: [(17 17 17 17) 17]
Test Case: 188 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 189 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 190 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 191 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 192 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 193 | Input/Output: [(12 12 12 12) 12]
Test Case: 194 | Input/Output: [(14 14 14 14) 14]
Test Case: 195 | Input/Output: [(86 86 86 86) 86]
Test Case: 196 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 197 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 198 | Input/Output: [(14 14 14 14) 14]
Test Case: 199 | Input/Output: [(73 73 73 73) 73]
Test Case: 200 | Input/Output: [(51 46 12 46) 12]
Test Case: 201 | Input/Output: [(46 59 11 86) 11]
Test Case: 202 | Input/Output: [(90 46 15 89) 15]
Test Case: 203 | Input/Output: [(21 47 47 25) 21]
Test Case: 204 | Input/Output: [(39 75 43 1) 1]
Test Case: 205 | Input/Output: [(99 20 89 0) 0]
Test Case: 206 | Input/Output: [(15 18 80 89) 15]
Test Case: 207 | Input/Output: [(14 21 14 6) 6]
Test Case: 208 | Input/Output: [(23 41 66 72) 23]
Test Case: 209 | Input/Output: [(39 95 97 60) 39]
Test Case: 210 | Input/Output: [(36 38 76 56) 36]
Test Case: 211 | Input/Output: [(95 41 96 45) 41]
Test Case: 212 | Input/Output: [(16 33 52 78) 16]
Test Case: 213 | Input/Output: [(7 99 27 59) 7]
Test Case: 214 | Input/Output: [(94 88 63 79) 63]
Test Case: 215 | Input/Output: [(14 50 95 48) 14]
Test Case: 216 | Input/Output: [(4 98 43 29) 4]
Test Case: 217 | Input/Output: [(74 61 44 97) 44]
Test Case: 218 | Input/Output: [(67 42 50 34) 34]
Test Case: 219 | Input/Output: [(40 46 30 40) 30]
Test Case: 220 | Input/Output: [(86 34 24 54) 24]
Test Case: 221 | Input/Output: [(91 63 19 37) 19]
Test Case: 222 | Input/Output: [(46 85 60 71) 46]
Test Case: 223 | Input/Output: [(5 88 77 1) 1]
Test Case: 224 | Input/Output: [(60 93 68 17) 17]
Test Case: 225 | Input/Output: [(9 3 15 36) 3]
Test Case: 226 | Input/Output: [(55 67 93 70) 55]
Test Case: 227 | Input/Output: [(6 68 68 58) 6]
Test Case: 228 | Input/Output: [(72 83 44 93) 44]
Test Case: 229 | Input/Output: [(14 77 38 76) 14]
Test Case: 230 | Input/Output: [(11 73 27 14) 11]
Test Case: 231 | Input/Output: [(13 13 56 70) 13]
Test Case: 232 | Input/Output: [(15 39 56 11) 11]
Test Case: 233 | Input/Output: [(16 3 14 75) 3]
Test Case: 234 | Input/Output: [(14 54 26 43) 14]
Test Case: 235 | Input/Output: [(25 63 81 28) 25]
Test Case: 236 | Input/Output: [(42 6 83 35) 6]
Test Case: 237 | Input/Output: [(87 25 73 16) 16]
Test Case: 238 | Input/Output: [(85 16 37 33) 16]
Test Case: 239 | Input/Output: [(58 31 15 90) 15]
Test Case: 240 | Input/Output: [(97 28 69 14) 14]
Test Case: 241 | Input/Output: [(2 77 16 55) 2]
Test Case: 242 | Input/Output: [(34 48 2 52) 2]
Test Case: 243 | Input/Output: [(91 61 4 95) 4]
Test Case: 244 | Input/Output: [(8 72 17 75) 8]
Test Case: 245 | Input/Output: [(52 16 99 63) 16]
Test Case: 246 | Input/Output: [(92 19 39 89) 19]
Test Case: 247 | Input/Output: [(11 0 3 56) 0]
Test Case: 248 | Input/Output: [(46 36 74 28) 28]
Test Case: 249 | Input/Output: [(60 99 48 0) 0]
Test Case: 250 | Input/Output: [(1 29 47 80) 1]
Test Case: 251 | Input/Output: [(0 22 11 75) 0]
Test Case: 252 | Input/Output: [(37 96 78 48) 37]
Test Case: 253 | Input/Output: [(70 71 44 69) 44]
Test Case: 254 | Input/Output: [(31 72 47 5) 5]
Test Case: 255 | Input/Output: [(56 64 5 96) 5]
Test Case: 256 | Input/Output: [(37 10 74 47) 10]
Test Case: 257 | Input/Output: [(11 49 75 29) 11]
Test Case: 258 | Input/Output: [(59 71 79 74) 59]
Test Case: 259 | Input/Output: [(59 20 17 69) 17]
Test Case: 260 | Input/Output: [(85 69 80 94) 69]
Test Case: 261 | Input/Output: [(92 50 34 0) 0]
Test Case: 262 | Input/Output: [(27 78 93 55) 27]
Test Case: 263 | Input/Output: [(90 87 63 37) 37]
Test Case: 264 | Input/Output: [(55 74 58 8) 8]
Test Case: 265 | Input/Output: [(47 38 3 83) 3]
Test Case: 266 | Input/Output: [(92 2 82 84) 2]
Test Case: 267 | Input/Output: [(2 75 64 3) 2]
Test Case: 268 | Input/Output: [(46 36 12 92) 12]
Test Case: 269 | Input/Output: [(94 58 59 37) 37]
Test Case: 270 | Input/Output: [(72 49 12 18) 12]
Test Case: 271 | Input/Output: [(59 85 34 77) 34]
Test Case: 272 | Input/Output: [(70 11 82 58) 11]
Test Case: 273 | Input/Output: [(94 44 31 57) 31]
Test Case: 274 | Input/Output: [(65 36 26 61) 26]
Test Case: 275 | Input/Output: [(74 4 85 26) 4]
Test Case: 276 | Input/Output: [(63 76 60 38) 38]
Test Case: 277 | Input/Output: [(20 83 29 96) 20]
Test Case: 278 | Input/Output: [(89 71 83 32) 32]
Test Case: 279 | Input/Output: [(8 91 22 91) 8]
Test Case: 280 | Input/Output: [(5 85 70 32) 5]
Test Case: 281 | Input/Output: [(78 35 84 87) 35]
Test Case: 282 | Input/Output: [(48 61 99 46) 46]
Test Case: 283 | Input/Output: [(51 31 36 40) 31]
Test Case: 284 | Input/Output: [(12 79 31 69) 12]
Test Case: 285 | Input/Output: [(69 67 30 11) 11]
Test Case: 286 | Input/Output: [(5 12 74 80) 5]
Test Case: 287 | Input/Output: [(1 82 34 63) 1]
Test Case: 288 | Input/Output: [(3 21 69 29) 3]
Test Case: 289 | Input/Output: [(36 68 0 29) 0]
Test Case: 290 | Input/Output: [(67 85 47 75) 47]
Test Case: 291 | Input/Output: [(11 11 5 80) 5]
Test Case: 292 | Input/Output: [(37 31 28 4) 4]
Test Case: 293 | Input/Output: [(85 23 70 38) 23]
Test Case: 294 | Input/Output: [(7 72 9 7) 7]
Test Case: 295 | Input/Output: [(2 46 27 21) 2]
Test Case: 296 | Input/Output: [(47 56 36 25) 25]
Test Case: 297 | Input/Output: [(98 9 86 81) 9]
Test Case: 298 | Input/Output: [(82 18 88 11) 11]
Test Case: 299 | Input/Output: [(64 63 24 48) 24]
Test Case: 300 | Input/Output: [(49 55 36 76) 36]
Test Case: 301 | Input/Output: [(84 98 27 64) 27]
Test Case: 302 | Input/Output: [(55 41 54 92) 41]
Test Case: 303 | Input/Output: [(38 60 0 69) 0]
Test Case: 304 | Input/Output: [(15 22 82 11) 11]
Test Case: 305 | Input/Output: [(92 43 96 84) 43]
Test Case: 306 | Input/Output: [(59 40 61 32) 32]
Test Case: 307 | Input/Output: [(27 67 11 9) 9]
Test Case: 308 | Input/Output: [(26 78 42 42) 26]
Test Case: 309 | Input/Output: [(39 58 8 66) 8]
Test Case: 310 | Input/Output: [(99 78 35 55) 35]
Test Case: 311 | Input/Output: [(60 30 36 2) 2]
Test Case: 312 | Input/Output: [(54 51 70 93) 51]
Test Case: 313 | Input/Output: [(86 8 87 92) 8]
Test Case: 314 | Input/Output: [(78 20 89 68) 20]
Test Case: 315 | Input/Output: [(55 56 22 51) 22]
Test Case: 316 | Input/Output: [(99 26 54 35) 26]
Test Case: 317 | Input/Output: [(23 10 60 59) 10]
Test Case: 318 | Input/Output: [(53 74 80 95) 53]
Test Case: 319 | Input/Output: [(55 91 1 52) 1]
Test Case: 320 | Input/Output: [(85 48 24 9) 9]
Test Case: 321 | Input/Output: [(11 94 0 55) 0]
Test Case: 322 | Input/Output: [(50 56 83 80) 50]
Test Case: 323 | Input/Output: [(19 11 93 73) 11]
Test Case: 324 | Input/Output: [(49 96 25 21) 21]
Test Case: 325 | Input/Output: [(28 68 77 36) 28]
Test Case: 326 | Input/Output: [(68 80 0 7) 0]
Test Case: 327 | Input/Output: [(15 52 41 88) 15]
Test Case: 328 | Input/Output: [(87 87 93 38) 38]
Test Case: 329 | Input/Output: [(36 14 6 89) 6]
Test Case: 330 | Input/Output: [(2 77 47 53) 2]
Test Case: 331 | Input/Output: [(45 85 41 72) 41]
Test Case: 332 | Input/Output: [(53 36 8 79) 8]
Test Case: 333 | Input/Output: [(81 98 43 94) 43]
Test Case: 334 | Input/Output: [(47 33 94 2) 2]
Test Case: 335 | Input/Output: [(70 4 31 87) 4]
Test Case: 336 | Input/Output: [(6 44 33 50) 6]
Test Case: 337 | Input/Output: [(76 36 13 61) 13]
Test Case: 338 | Input/Output: [(91 29 4 27) 4]
Test Case: 339 | Input/Output: [(72 98 51 69) 51]
Test Case: 340 | Input/Output: [(1 18 3 23) 1]
Test Case: 341 | Input/Output: [(24 82 53 44) 24]
Test Case: 342 | Input/Output: [(35 76 2 24) 2]
Test Case: 343 | Input/Output: [(29 49 32 74) 29]
Test Case: 344 | Input/Output: [(69 2 25 20) 2]
Test Case: 345 | Input/Output: [(23 61 81 5) 5]
Test Case: 346 | Input/Output: [(75 67 56 85) 56]
Test Case: 347 | Input/Output: [(81 50 73 32) 32]
Test Case: 348 | Input/Output: [(29 68 76 90) 29]
Test Case: 349 | Input/Output: [(92 18 65 29) 18]
Test Case: 350 | Input/Output: [(12 82 13 13) 12]
Test Case: 351 | Input/Output: [(37 79 16 93) 16]
Test Case: 352 | Input/Output: [(80 32 71 8) 8]
Test Case: 353 | Input/Output: [(72 29 10 31) 10]
Test Case: 354 | Input/Output: [(20 28 38 54) 20]
Test Case: 355 | Input/Output: [(49 1 26 67) 1]
Test Case: 356 | Input/Output: [(83 49 65 94) 49]
Test Case: 357 | Input/Output: [(9 82 15 7) 7]
Test Case: 358 | Input/Output: [(52 71 19 54) 19]
Test Case: 359 | Input/Output: [(63 68 48 18) 18]
Test Case: 360 | Input/Output: [(57 4 14 94) 4]
Test Case: 361 | Input/Output: [(73 57 69 12) 12]
Test Case: 362 | Input/Output: [(22 4 2 81) 2]
Test Case: 363 | Input/Output: [(18 23 34 13) 13]
Test Case: 364 | Input/Output: [(84 64 65 48) 48]
Test Case: 365 | Input/Output: [(19 90 95 96) 19]
Test Case: 366 | Input/Output: [(92 46 75 55) 46]
Test Case: 367 | Input/Output: [(83 48 99 35) 35]
Test Case: 368 | Input/Output: [(56 67 74 90) 56]
Test Case: 369 | Input/Output: [(91 15 60 98) 15]
Test Case: 370 | Input/Output: [(41 78 79 11) 11]
Test Case: 371 | Input/Output: [(64 0 79 28) 0]
Test Case: 372 | Input/Output: [(54 63 11 43) 11]
Test Case: 373 | Input/Output: [(53 16 82 80) 16]
Test Case: 374 | Input/Output: [(9 85 64 2) 2]
Test Case: 375 | Input/Output: [(48 70 59 3) 3]
Test Case: 376 | Input/Output: [(26 54 19 28) 19]
Test Case: 377 | Input/Output: [(59 76 22 17) 17]
Test Case: 378 | Input/Output: [(70 65 75 27) 27]
Test Case: 379 | Input/Output: [(3 10 3 44) 3]
Test Case: 380 | Input/Output: [(41 60 80 54) 41]
Test Case: 381 | Input/Output: [(2 34 83 12) 2]
Test Case: 382 | Input/Output: [(13 59 89 56) 13]
Test Case: 383 | Input/Output: [(73 32 56 39) 32]
Test Case: 384 | Input/Output: [(22 65 48 36) 22]
Test Case: 385 | Input/Output: [(18 87 48 87) 18]
Test Case: 386 | Input/Output: [(31 79 65 70) 31]
Test Case: 387 | Input/Output: [(72 37 55 76) 37]
Test Case: 388 | Input/Output: [(48 6 1 56) 1]
Test Case: 389 | Input/Output: [(99 90 13 95) 13]
Test Case: 390 | Input/Output: [(20 92 79 41) 20]
Test Case: 391 | Input/Output: [(48 56 36 95) 36]
Test Case: 392 | Input/Output: [(67 44 47 3) 3]
Test Case: 393 | Input/Output: [(8 17 38 92) 8]
Test Case: 394 | Input/Output: [(27 99 30 37) 27]
Test Case: 395 | Input/Output: [(73 12 31 9) 9]
Test Case: 396 | Input/Output: [(86 82 48 59) 48]
Test Case: 397 | Input/Output: [(76 78 88 61) 61]
Test Case: 398 | Input/Output: [(26 62 0 56) 0]
Test Case: 399 | Input/Output: [(89 36 10 77) 10]
Test Case: 400 | Input/Output: [(-99 -75 -52 51) -99]
Test Case: 401 | Input/Output: [(17 -63 7 51) -63]
Test Case: 402 | Input/Output: [(-27 -17 34 -74) -74]
Test Case: 403 | Input/Output: [(53 59 91 68) 53]
Test Case: 404 | Input/Output: [(33 19 91 27) 19]
Test Case: 405 | Input/Output: [(43 -97 5 -89) -97]
Test Case: 406 | Input/Output: [(-12 -98 74 10) -98]
Test Case: 407 | Input/Output: [(-98 22 95 -72) -98]
Test Case: 408 | Input/Output: [(-91 32 34 99) -91]
Test Case: 409 | Input/Output: [(-7 23 -1 -76) -76]
Test Case: 410 | Input/Output: [(45 76 -12 5) -12]
Test Case: 411 | Input/Output: [(-27 -36 6 89) -36]
Test Case: 412 | Input/Output: [(15 -30 89 -15) -30]
Test Case: 413 | Input/Output: [(-72 33 -32 -60) -72]
Test Case: 414 | Input/Output: [(93 -26 -80 83) -80]
Test Case: 415 | Input/Output: [(-45 54 64 37) -45]
Test Case: 416 | Input/Output: [(-20 -57 -85 -42) -85]
Test Case: 417 | Input/Output: [(92 -26 25 59) -26]
Test Case: 418 | Input/Output: [(-87 -44 49 49) -87]
Test Case: 419 | Input/Output: [(-2 56 -13 -93) -93]
Test Case: 420 | Input/Output: [(71 98 81 -64) -64]
Test Case: 421 | Input/Output: [(4 31 -5 -79) -79]
Test Case: 422 | Input/Output: [(94 -65 -14 -31) -65]
Test Case: 423 | Input/Output: [(25 -36 -69 19) -69]
Test Case: 424 | Input/Output: [(-41 -29 66 46) -41]
Test Case: 425 | Input/Output: [(-86 59 -73 -32) -86]
Test Case: 426 | Input/Output: [(-92 8 -20 68) -92]
Test Case: 427 | Input/Output: [(55 3 -49 -9) -49]
Test Case: 428 | Input/Output: [(-5 -76 58 -21) -76]
Test Case: 429 | Input/Output: [(49 82 -34 -66) -66]
Test Case: 430 | Input/Output: [(47 84 -6 0) -6]
Test Case: 431 | Input/Output: [(-16 67 58 -20) -20]
Test Case: 432 | Input/Output: [(79 34 -22 54) -22]
Test Case: 433 | Input/Output: [(-7 -44 -40 -70) -70]
Test Case: 434 | Input/Output: [(36 32 -63 -67) -67]
Test Case: 435 | Input/Output: [(80 -22 55 -98) -98]
Test Case: 436 | Input/Output: [(-33 47 62 -80) -80]
Test Case: 437 | Input/Output: [(90 20 50 -38) -38]
Test Case: 438 | Input/Output: [(-2 92 72 -14) -14]
Test Case: 439 | Input/Output: [(-45 -70 -87 -54) -87]
Test Case: 440 | Input/Output: [(39 97 14 45) 14]
Test Case: 441 | Input/Output: [(89 93 74 -1) -1]
Test Case: 442 | Input/Output: [(-31 95 37 -59) -59]
Test Case: 443 | Input/Output: [(-53 25 15 78) -53]
Test Case: 444 | Input/Output: [(96 3 -38 48) -38]
Test Case: 445 | Input/Output: [(56 69 -100 86) -100]
Test Case: 446 | Input/Output: [(-13 94 95 -3) -13]
Test Case: 447 | Input/Output: [(-34 -94 10 -76) -94]
Test Case: 448 | Input/Output: [(63 62 13 16) 13]
Test Case: 449 | Input/Output: [(-88 -100 -86 46) -100]
Test Case: 450 | Input/Output: [(-10 1 -97 -84) -97]
Test Case: 451 | Input/Output: [(-73 -90 -55 43) -90]
Test Case: 452 | Input/Output: [(-74 97 -100 23) -100]
Test Case: 453 | Input/Output: [(78 80 65 -62) -62]
Test Case: 454 | Input/Output: [(-36 -2 87 83) -36]
Test Case: 455 | Input/Output: [(-69 16 86 -20) -69]
Test Case: 456 | Input/Output: [(-26 -86 39 95) -86]
Test Case: 457 | Input/Output: [(-46 69 42 63) -46]
Test Case: 458 | Input/Output: [(31 49 31 52) 31]
Test Case: 459 | Input/Output: [(6 -60 -14 -13) -60]
Test Case: 460 | Input/Output: [(16 -33 -68 22) -68]
Test Case: 461 | Input/Output: [(-93 90 -84 7) -93]
Test Case: 462 | Input/Output: [(-45 -85 -40 -65) -85]
Test Case: 463 | Input/Output: [(-12 -79 40 -64) -79]
Test Case: 464 | Input/Output: [(-9 -85 91 68) -85]
Test Case: 465 | Input/Output: [(91 -77 -92 34) -92]
Test Case: 466 | Input/Output: [(78 -64 -59 -19) -64]
Test Case: 467 | Input/Output: [(54 -53 63 12) -53]
Test Case: 468 | Input/Output: [(-61 -4 2 35) -61]
Test Case: 469 | Input/Output: [(-88 15 -94 -84) -94]
Test Case: 470 | Input/Output: [(24 69 65 33) 24]
Test Case: 471 | Input/Output: [(8 77 -9 30) -9]
Test Case: 472 | Input/Output: [(51 78 16 35) 16]
Test Case: 473 | Input/Output: [(44 40 -39 76) -39]
Test Case: 474 | Input/Output: [(-34 90 71 78) -34]
Test Case: 475 | Input/Output: [(38 83 -95 -25) -95]
Test Case: 476 | Input/Output: [(61 6 -63 42) -63]
Test Case: 477 | Input/Output: [(-29 -11 -45 91) -45]
Test Case: 478 | Input/Output: [(-48 -32 -82 97) -82]
Test Case: 479 | Input/Output: [(-21 10 70 -1) -21]
Test Case: 480 | Input/Output: [(-98 46 3 9) -98]
Test Case: 481 | Input/Output: [(50 -95 -18 -17) -95]
Test Case: 482 | Input/Output: [(29 65 -40 -69) -69]
Test Case: 483 | Input/Output: [(39 -68 41 98) -68]
Test Case: 484 | Input/Output: [(74 23 -82 18) -82]
Test Case: 485 | Input/Output: [(81 31 70 -94) -94]
Test Case: 486 | Input/Output: [(-25 -74 27 5) -74]
Test Case: 487 | Input/Output: [(31 -65 80 74) -65]
Test Case: 488 | Input/Output: [(34 25 46 24) 24]
Test Case: 489 | Input/Output: [(-9 -28 53 44) -28]
Test Case: 490 | Input/Output: [(-10 76 39 -83) -83]
Test Case: 491 | Input/Output: [(-65 -59 56 -46) -65]
Test Case: 492 | Input/Output: [(48 -99 -2 51) -99]
Test Case: 493 | Input/Output: [(5 -14 61 -100) -100]
Test Case: 494 | Input/Output: [(47 37 -47 28) -47]
Test Case: 495 | Input/Output: [(-56 25 82 92) -56]
Test Case: 496 | Input/Output: [(-75 -72 60 71) -75]
Test Case: 497 | Input/Output: [(3 68 -87 -29) -87]
Test Case: 498 | Input/Output: [(-17 -41 -93 -6) -93]
Test Case: 499 | Input/Output: [(-25 25 -68 39) -68]
Test Case: 500 | Input/Output: [(80 -21 39 -65) -65]
Test Case: 501 | Input/Output: [(11 70 -38 -68) -68]
Test Case: 502 | Input/Output: [(72 65 92 -99) -99]
Test Case: 503 | Input/Output: [(17 -61 -68 12) -68]
Test Case: 504 | Input/Output: [(-86 24 -87 94) -87]
Test Case: 505 | Input/Output: [(65 -65 100 85) -65]
Test Case: 506 | Input/Output: [(-82 -96 -13 -96) -96]
Test Case: 507 | Input/Output: [(-8 97 1 54) -8]
Test Case: 508 | Input/Output: [(-9 -70 -84 -52) -84]
Test Case: 509 | Input/Output: [(-5 -99 23 -34) -99]
Test Case: 510 | Input/Output: [(-39 11 48 -66) -66]
Test Case: 511 | Input/Output: [(79 -36 -58 3) -58]
Test Case: 512 | Input/Output: [(-84 -39 -76 -47) -84]
Test Case: 513 | Input/Output: [(-41 -14 -26 37) -41]
Test Case: 514 | Input/Output: [(10 -100 1 78) -100]
Test Case: 515 | Input/Output: [(-86 -4 0 46) -86]
Test Case: 516 | Input/Output: [(-72 28 -99 -71) -99]
Test Case: 517 | Input/Output: [(65 -48 -58 54) -58]
Test Case: 518 | Input/Output: [(-89 83 7 -29) -89]
Test Case: 519 | Input/Output: [(-36 7 98 -36) -36]
Test Case: 520 | Input/Output: [(68 7 -6 7) -6]
Test Case: 521 | Input/Output: [(-9 87 94 -17) -17]
Test Case: 522 | Input/Output: [(61 11 15 -17) -17]
Test Case: 523 | Input/Output: [(-47 17 -29 -82) -82]
Test Case: 524 | Input/Output: [(3 -74 -58 78) -74]
Test Case: 525 | Input/Output: [(-82 45 4 46) -82]
Test Case: 526 | Input/Output: [(46 -91 4 -15) -91]
Test Case: 527 | Input/Output: [(-100 -1 45 -73) -100]
Test Case: 528 | Input/Output: [(21 60 65 -78) -78]
Test Case: 529 | Input/Output: [(-96 20 -89 -51) -96]
Test Case: 530 | Input/Output: [(2 85 -68 95) -68]
Test Case: 531 | Input/Output: [(-18 79 7 -6) -18]
Test Case: 532 | Input/Output: [(20 46 87 -95) -95]
Test Case: 533 | Input/Output: [(-36 8 58 -74) -74]
Test Case: 534 | Input/Output: [(-82 2 -48 52) -82]
Test Case: 535 | Input/Output: [(-26 -41 -63 -76) -76]
Test Case: 536 | Input/Output: [(77 -2 56 -73) -73]
Test Case: 537 | Input/Output: [(11 53 9 -10) -10]
Test Case: 538 | Input/Output: [(70 -92 31 -15) -92]
Test Case: 539 | Input/Output: [(73 -10 26 95) -10]
Test Case: 540 | Input/Output: [(-75 0 -31 32) -75]
Test Case: 541 | Input/Output: [(26 80 -85 -17) -85]
Test Case: 542 | Input/Output: [(7 63 -94 -15) -94]
Test Case: 543 | Input/Output: [(6 96 50 87) 6]
Test Case: 544 | Input/Output: [(22 100 -19 -60) -60]
Test Case: 545 | Input/Output: [(-66 -83 -3 -41) -83]
Test Case: 546 | Input/Output: [(-96 37 -78 14) -96]
Test Case: 547 | Input/Output: [(13 -96 -36 -91) -96]
Test Case: 548 | Input/Output: [(-1 -77 61 30) -77]
Test Case: 549 | Input/Output: [(-60 12 -62 -1) -62]
Test Case: 550 | Input/Output: [(50 -43 -5 -13) -43]
Test Case: 551 | Input/Output: [(14 27 86 35) 14]
Test Case: 552 | Input/Output: [(99 -53 -13 -73) -73]
Test Case: 553 | Input/Output: [(48 -28 -75 41) -75]
Test Case: 554 | Input/Output: [(26 -61 36 81) -61]
Test Case: 555 | Input/Output: [(43 88 44 -54) -54]
Test Case: 556 | Input/Output: [(29 69 -53 31) -53]
Test Case: 557 | Input/Output: [(-42 -6 41 64) -42]
Test Case: 558 | Input/Output: [(32 7 18 99) 7]
Test Case: 559 | Input/Output: [(75 89 9 74) 9]
Test Case: 560 | Input/Output: [(81 46 29 62) 29]
Test Case: 561 | Input/Output: [(-50 -84 88 -96) -96]
Test Case: 562 | Input/Output: [(-46 -89 1 -68) -89]
Test Case: 563 | Input/Output: [(-94 -100 -72 -13) -100]
Test Case: 564 | Input/Output: [(28 39 -38 36) -38]
Test Case: 565 | Input/Output: [(100 46 -42 -86) -86]
Test Case: 566 | Input/Output: [(-39 30 92 30) -39]
Test Case: 567 | Input/Output: [(-1 96 -13 7) -13]
Test Case: 568 | Input/Output: [(-76 -44 7 37) -76]
Test Case: 569 | Input/Output: [(45 -70 26 -88) -88]
Test Case: 570 | Input/Output: [(-39 6 39 -30) -39]
Test Case: 571 | Input/Output: [(0 -54 -21 17) -54]
Test Case: 572 | Input/Output: [(10 74 -10 90) -10]
Test Case: 573 | Input/Output: [(8 54 30 -76) -76]
Test Case: 574 | Input/Output: [(78 -89 60 62) -89]
Test Case: 575 | Input/Output: [(100 47 3 100) 3]
Test Case: 576 | Input/Output: [(-3 -73 14 55) -73]
Test Case: 577 | Input/Output: [(-8 -49 53 32) -49]
Test Case: 578 | Input/Output: [(95 67 -66 -83) -83]
Test Case: 579 | Input/Output: [(-79 -37 -2 -86) -86]
Test Case: 580 | Input/Output: [(-66 -100 55 33) -100]
Test Case: 581 | Input/Output: [(74 11 -1 -12) -12]
Test Case: 582 | Input/Output: [(80 76 -32 -93) -93]
Test Case: 583 | Input/Output: [(-94 -10 6 17) -94]
Test Case: 584 | Input/Output: [(75 37 -37 -68) -68]
Test Case: 585 | Input/Output: [(23 45 57 57) 23]
Test Case: 586 | Input/Output: [(63 -78 81 98) -78]
Test Case: 587 | Input/Output: [(-19 6 20 78) -19]
Test Case: 588 | Input/Output: [(42 23 61 -24) -24]
Test Case: 589 | Input/Output: [(14 37 29 74) 14]
Test Case: 590 | Input/Output: [(3 -71 22 88) -71]
Test Case: 591 | Input/Output: [(44 -46 61 1) -46]
Test Case: 592 | Input/Output: [(-80 89 97 94) -80]
Test Case: 593 | Input/Output: [(59 31 87 57) 31]
Test Case: 594 | Input/Output: [(-63 -35 -71 -35) -71]
Test Case: 595 | Input/Output: [(-92 64 -9 -74) -92]
Test Case: 596 | Input/Output: [(-61 32 100 22) -61]
Test Case: 597 | Input/Output: [(-45 96 6 -41) -45]
Test Case: 598 | Input/Output: [(86 -46 -52 78) -52]
Test Case: 599 | Input/Output: [(75 -90 90 -91) -91]
Test Case: 600 | Input/Output: [(6 -41 -80 -2) -80]
Test Case: 601 | Input/Output: [(16 71 -15 22) -15]
Test Case: 602 | Input/Output: [(69 77 28 66) 28]
Test Case: 603 | Input/Output: [(0 85 -75 86) -75]
Test Case: 604 | Input/Output: [(-24 -85 57 -64) -85]
Test Case: 605 | Input/Output: [(30 -22 70 89) -22]
Test Case: 606 | Input/Output: [(-97 -78 91 9) -97]
Test Case: 607 | Input/Output: [(48 -76 40 -12) -76]
Test Case: 608 | Input/Output: [(-26 -19 -20 41) -26]
Test Case: 609 | Input/Output: [(0 -31 42 58) -31]
Test Case: 610 | Input/Output: [(-17 -47 21 96) -47]
Test Case: 611 | Input/Output: [(36 -91 55 -28) -91]
Test Case: 612 | Input/Output: [(27 -39 15 60) -39]
Test Case: 613 | Input/Output: [(44 -43 73 -1) -43]
Test Case: 614 | Input/Output: [(-22 81 92 81) -22]
Test Case: 615 | Input/Output: [(30 -64 -40 54) -64]
Test Case: 616 | Input/Output: [(-75 -72 43 -75) -75]
Test Case: 617 | Input/Output: [(-36 58 44 31) -36]
Test Case: 618 | Input/Output: [(33 -42 -19 81) -42]
Test Case: 619 | Input/Output: [(-28 72 -89 -27) -89]
Test Case: 620 | Input/Output: [(21 34 42 41) 21]
Test Case: 621 | Input/Output: [(-10 40 87 60) -10]
Test Case: 622 | Input/Output: [(59 96 -18 24) -18]
Test Case: 623 | Input/Output: [(-7 -38 97 69) -38]
Test Case: 624 | Input/Output: [(73 59 -51 87) -51]
Test Case: 625 | Input/Output: [(-22 91 -74 41) -74]
Test Case: 626 | Input/Output: [(85 -71 -27 -61) -71]
Test Case: 627 | Input/Output: [(-35 93 56 30) -35]
Test Case: 628 | Input/Output: [(88 77 71 -74) -74]
Test Case: 629 | Input/Output: [(39 12 -88 89) -88]
Test Case: 630 | Input/Output: [(24 -34 96 -70) -70]
Test Case: 631 | Input/Output: [(2 25 14 90) 2]
Test Case: 632 | Input/Output: [(42 -10 68 -53) -53]
Test Case: 633 | Input/Output: [(-69 88 0 2) -69]
Test Case: 634 | Input/Output: [(-25 -63 1 -46) -63]
Test Case: 635 | Input/Output: [(-88 -1 -50 67) -88]
Test Case: 636 | Input/Output: [(-63 24 -51 -25) -63]
Test Case: 637 | Input/Output: [(35 -73 19 -93) -93]
Test Case: 638 | Input/Output: [(16 -80 -79 -22) -80]
Test Case: 639 | Input/Output: [(-54 -78 85 -1) -78]
Test Case: 640 | Input/Output: [(-53 51 88 -5) -53]
Test Case: 641 | Input/Output: [(-12 -80 -23 -81) -81]
Test Case: 642 | Input/Output: [(65 5 11 -14) -14]
Test Case: 643 | Input/Output: [(-9 65 -72 89) -72]
Test Case: 644 | Input/Output: [(-41 49 34 -4) -41]
Test Case: 645 | Input/Output: [(-89 26 94 98) -89]
Test Case: 646 | Input/Output: [(-83 -64 25 -50) -83]
Test Case: 647 | Input/Output: [(84 87 -93 2) -93]
Test Case: 648 | Input/Output: [(-30 4 28 59) -30]
Test Case: 649 | Input/Output: [(68 -100 45 -7) -100]
Test Case: 650 | Input/Output: [(-6 -57 79 -97) -97]
Test Case: 651 | Input/Output: [(-53 13 89 65) -53]
Test Case: 652 | Input/Output: [(-46 -16 -81 76) -81]
Test Case: 653 | Input/Output: [(-46 -8 98 85) -46]
Test Case: 654 | Input/Output: [(-50 -19 26 -76) -76]
Test Case: 655 | Input/Output: [(-92 10 -34 -90) -92]
Test Case: 656 | Input/Output: [(81 31 -79 79) -79]
Test Case: 657 | Input/Output: [(-58 -66 -52 -63) -66]
Test Case: 658 | Input/Output: [(-46 -9 0 -71) -71]
Test Case: 659 | Input/Output: [(-83 4 6 9) -83]
Test Case: 660 | Input/Output: [(76 -47 -67 -8) -67]
Test Case: 661 | Input/Output: [(-17 22 -19 -10) -19]
Test Case: 662 | Input/Output: [(18 -51 -72 95) -72]
Test Case: 663 | Input/Output: [(93 -59 -54 26) -59]
Test Case: 664 | Input/Output: [(-90 78 -53 10) -90]
Test Case: 665 | Input/Output: [(-65 17 46 22) -65]
Test Case: 666 | Input/Output: [(5 3 -46 25) -46]
Test Case: 667 | Input/Output: [(86 29 15 -12) -12]
Test Case: 668 | Input/Output: [(-9 53 -77 100) -77]
Test Case: 669 | Input/Output: [(-3 -64 27 -62) -64]
Test Case: 670 | Input/Output: [(30 -95 6 75) -95]
Test Case: 671 | Input/Output: [(23 57 98 74) 23]
Test Case: 672 | Input/Output: [(1 80 23 78) 1]
Test Case: 673 | Input/Output: [(-37 52 90 -63) -63]
Test Case: 674 | Input/Output: [(-65 -87 -50 29) -87]
Test Case: 675 | Input/Output: [(-60 39 54 -1) -60]
Test Case: 676 | Input/Output: [(-55 30 64 27) -55]
Test Case: 677 | Input/Output: [(3 58 79 47) 3]
Test Case: 678 | Input/Output: [(-35 84 -34 99) -35]
Test Case: 679 | Input/Output: [(67 5 -70 32) -70]
Test Case: 680 | Input/Output: [(13 -33 85 -40) -40]
Test Case: 681 | Input/Output: [(-54 -73 -16 -39) -73]
Test Case: 682 | Input/Output: [(-44 90 -1 -90) -90]
Test Case: 683 | Input/Output: [(-1 83 -98 24) -98]
Test Case: 684 | Input/Output: [(56 -68 83 12) -68]
Test Case: 685 | Input/Output: [(95 65 32 57) 32]
Test Case: 686 | Input/Output: [(14 58 -30 -78) -78]
Test Case: 687 | Input/Output: [(31 -16 10 -50) -50]
Test Case: 688 | Input/Output: [(76 -22 68 -72) -72]
Test Case: 689 | Input/Output: [(-56 -94 -41 -81) -94]
Test Case: 690 | Input/Output: [(-68 55 45 -38) -68]
Test Case: 691 | Input/Output: [(48 43 -3 87) -3]
Test Case: 692 | Input/Output: [(-52 -39 66 -3) -52]
Test Case: 693 | Input/Output: [(-5 74 -15 37) -15]
Test Case: 694 | Input/Output: [(-35 3 -10 75) -35]
Test Case: 695 | Input/Output: [(87 -69 1 59) -69]
Test Case: 696 | Input/Output: [(-82 -65 6 91) -82]
Test Case: 697 | Input/Output: [(62 85 -46 43) -46]
Test Case: 698 | Input/Output: [(-70 -7 -35 -71) -71]
Test Case: 699 | Input/Output: [(80 22 -51 5) -51]
Test Case: 700 | Input/Output: [(-10 -18 -34 -33) -34]
Test Case: 701 | Input/Output: [(16 87 95 85) 16]
Test Case: 702 | Input/Output: [(-46 18 20 8) -46]
Test Case: 703 | Input/Output: [(86 -93 74 89) -93]
Test Case: 704 | Input/Output: [(76 -5 -92 15) -92]
Test Case: 705 | Input/Output: [(81 -11 42 -100) -100]
Test Case: 706 | Input/Output: [(4 11 71 -81) -81]
Test Case: 707 | Input/Output: [(26 -95 99 -26) -95]
Test Case: 708 | Input/Output: [(22 13 -8 -7) -8]
Test Case: 709 | Input/Output: [(46 44 -3 26) -3]
Test Case: 710 | Input/Output: [(52 -66 80 3) -66]
Test Case: 711 | Input/Output: [(59 60 -80 -67) -80]
Test Case: 712 | Input/Output: [(-35 -21 -5 82) -35]
Test Case: 713 | Input/Output: [(37 46 -3 69) -3]
Test Case: 714 | Input/Output: [(30 93 58 -53) -53]
Test Case: 715 | Input/Output: [(-26 -100 -18 6) -100]
Test Case: 716 | Input/Output: [(-93 -61 -67 35) -93]
Test Case: 717 | Input/Output: [(62 55 -14 92) -14]
Test Case: 718 | Input/Output: [(-12 53 -93 13) -93]
Test Case: 719 | Input/Output: [(-36 75 68 -22) -36]
Test Case: 720 | Input/Output: [(58 43 82 -65) -65]
Test Case: 721 | Input/Output: [(12 70 98 19) 12]
Test Case: 722 | Input/Output: [(-60 59 63 64) -60]
Test Case: 723 | Input/Output: [(-33 42 17 25) -33]
Test Case: 724 | Input/Output: [(-51 19 -64 35) -64]
Test Case: 725 | Input/Output: [(-75 -85 -26 -95) -95]
Test Case: 726 | Input/Output: [(-15 29 -17 -38) -38]
Test Case: 727 | Input/Output: [(-38 -55 76 -80) -80]
Test Case: 728 | Input/Output: [(40 -61 87 -41) -61]
Test Case: 729 | Input/Output: [(-14 -39 7 -63) -63]
Test Case: 730 | Input/Output: [(20 92 -30 0) -30]
Test Case: 731 | Input/Output: [(8 -81 90 -100) -100]
Test Case: 732 | Input/Output: [(48 41 10 79) 10]
Test Case: 733 | Input/Output: [(39 -83 -75 60) -83]
Test Case: 734 | Input/Output: [(-46 -49 -44 31) -49]
Test Case: 735 | Input/Output: [(-90 -22 41 -11) -90]
Test Case: 736 | Input/Output: [(-12 100 -31 93) -31]
Test Case: 737 | Input/Output: [(-29 46 53 -44) -44]
Test Case: 738 | Input/Output: [(-85 -18 73 75) -85]
Test Case: 739 | Input/Output: [(-59 -38 -73 -51) -73]
Test Case: 740 | Input/Output: [(-78 93 -8 -36) -78]
Test Case: 741 | Input/Output: [(-48 -83 -11 -29) -83]
Test Case: 742 | Input/Output: [(-3 -87 92 47) -87]
Test Case: 743 | Input/Output: [(-23 84 44 -22) -23]
Test Case: 744 | Input/Output: [(6 -68 5 -81) -81]
Test Case: 745 | Input/Output: [(-35 -96 -78 -42) -96]
Test Case: 746 | Input/Output: [(-46 -72 -52 -64) -72]
Test Case: 747 | Input/Output: [(63 -68 58 24) -68]
Test Case: 748 | Input/Output: [(-35 -43 -1 90) -43]
Test Case: 749 | Input/Output: [(32 -33 34 43) -33]
Test Case: 750 | Input/Output: [(-42 100 -41 -84) -84]
Test Case: 751 | Input/Output: [(68 6 66 96) 6]
Test Case: 752 | Input/Output: [(82 -60 -46 90) -60]
Test Case: 753 | Input/Output: [(-37 14 1 -80) -80]
Test Case: 754 | Input/Output: [(37 -85 -26 -11) -85]
Test Case: 755 | Input/Output: [(29 63 -11 -57) -57]
Test Case: 756 | Input/Output: [(66 -73 -6 -64) -73]
Test Case: 757 | Input/Output: [(99 -84 54 43) -84]
Test Case: 758 | Input/Output: [(96 -78 91 8) -78]
Test Case: 759 | Input/Output: [(99 79 31 -45) -45]
Test Case: 760 | Input/Output: [(69 31 52 -90) -90]
Test Case: 761 | Input/Output: [(99 39 40 22) 22]
Test Case: 762 | Input/Output: [(78 -85 40 -76) -85]
Test Case: 763 | Input/Output: [(3 -53 -67 -1) -67]
Test Case: 764 | Input/Output: [(-47 85 100 -4) -47]
Test Case: 765 | Input/Output: [(20 -48 32 -69) -69]
Test Case: 766 | Input/Output: [(38 -22 13 37) -22]
Test Case: 767 | Input/Output: [(-5 54 76 14) -5]
Test Case: 768 | Input/Output: [(-34 -94 -36 -37) -94]
Test Case: 769 | Input/Output: [(-15 -32 54 -40) -40]
Test Case: 770 | Input/Output: [(75 7 -4 95) -4]
Test Case: 771 | Input/Output: [(-42 -8 14 1) -42]
Test Case: 772 | Input/Output: [(80 -20 99 30) -20]
Test Case: 773 | Input/Output: [(-96 50 -2 26) -96]
Test Case: 774 | Input/Output: [(56 -100 -5 -80) -100]
Test Case: 775 | Input/Output: [(-26 21 77 100) -26]
Test Case: 776 | Input/Output: [(83 95 82 -28) -28]
Test Case: 777 | Input/Output: [(-14 45 67 7) -14]
Test Case: 778 | Input/Output: [(-79 28 98 17) -79]
Test Case: 779 | Input/Output: [(58 -90 67 37) -90]
Test Case: 780 | Input/Output: [(24 -29 -20 20) -29]
Test Case: 781 | Input/Output: [(-87 19 -1 37) -87]
Test Case: 782 | Input/Output: [(-52 82 -85 -67) -85]
Test Case: 783 | Input/Output: [(0 -94 -46 21) -94]
Test Case: 784 | Input/Output: [(-12 -25 -12 19) -25]
Test Case: 785 | Input/Output: [(73 -53 -72 -30) -72]
Test Case: 786 | Input/Output: [(100 16 99 -51) -51]
Test Case: 787 | Input/Output: [(-50 -75 38 37) -75]
Test Case: 788 | Input/Output: [(-40 92 25 -59) -59]
Test Case: 789 | Input/Output: [(-31 -75 91 0) -75]
Test Case: 790 | Input/Output: [(-47 -65 60 -37) -65]
Test Case: 791 | Input/Output: [(52 67 -38 -63) -63]
Test Case: 792 | Input/Output: [(8 96 -53 -36) -53]
Test Case: 793 | Input/Output: [(55 -93 -63 -36) -93]
Test Case: 794 | Input/Output: [(72 7 -69 17) -69]
Test Case: 795 | Input/Output: [(96 96 -85 73) -85]
Test Case: 796 | Input/Output: [(-38 -21 85 10) -38]
Test Case: 797 | Input/Output: [(18 -21 -92 8) -92]
Test Case: 798 | Input/Output: [(74 -9 40 -77) -77]
Test Case: 799 | Input/Output: [(5 -41 8 59) -41]
Test Case: 800 | Input/Output: [(-54 44 54 -13) -54]
Test Case: 801 | Input/Output: [(-71 25 -74 88) -74]
Test Case: 802 | Input/Output: [(60 44 -24 -73) -73]
Test Case: 803 | Input/Output: [(10 4 -49 52) -49]
Test Case: 804 | Input/Output: [(8 -89 63 77) -89]
Test Case: 805 | Input/Output: [(-80 77 -56 -49) -80]
Test Case: 806 | Input/Output: [(-66 2 -4 -97) -97]
Test Case: 807 | Input/Output: [(73 -81 -32 83) -81]
Test Case: 808 | Input/Output: [(-57 -92 24 -24) -92]
Test Case: 809 | Input/Output: [(16 -58 13 5) -58]
Test Case: 810 | Input/Output: [(-96 61 -40 79) -96]
Test Case: 811 | Input/Output: [(-71 -11 -21 -48) -71]
Test Case: 812 | Input/Output: [(-71 19 30 40) -71]
Test Case: 813 | Input/Output: [(99 9 -23 93) -23]
Test Case: 814 | Input/Output: [(-15 -67 -57 -37) -67]
Test Case: 815 | Input/Output: [(77 23 95 -69) -69]
Test Case: 816 | Input/Output: [(-66 -1 95 -19) -66]
Test Case: 817 | Input/Output: [(59 5 -16 -64) -64]
Test Case: 818 | Input/Output: [(95 4 -89 18) -89]
Test Case: 819 | Input/Output: [(27 6 37 -22) -22]
Test Case: 820 | Input/Output: [(-31 76 68 42) -31]
Test Case: 821 | Input/Output: [(75 50 -15 -72) -72]
Test Case: 822 | Input/Output: [(-38 12 -2 7) -38]
Test Case: 823 | Input/Output: [(-83 -11 60 45) -83]
Test Case: 824 | Input/Output: [(99 -68 98 5) -68]
Test Case: 825 | Input/Output: [(14 63 -39 22) -39]
Test Case: 826 | Input/Output: [(-45 52 6 -41) -45]
Test Case: 827 | Input/Output: [(76 59 -88 82) -88]
Test Case: 828 | Input/Output: [(-58 92 -27 -95) -95]
Test Case: 829 | Input/Output: [(89 -18 88 51) -18]
Test Case: 830 | Input/Output: [(-38 -96 96 81) -96]
Test Case: 831 | Input/Output: [(-93 -32 71 58) -93]
Test Case: 832 | Input/Output: [(-87 86 -82 55) -87]
Test Case: 833 | Input/Output: [(57 -88 -44 52) -88]
Test Case: 834 | Input/Output: [(1 -79 -33 32) -79]
Test Case: 835 | Input/Output: [(20 -100 32 -9) -100]
Test Case: 836 | Input/Output: [(46 11 -55 72) -55]
Test Case: 837 | Input/Output: [(100 -44 52 92) -44]
Test Case: 838 | Input/Output: [(64 -7 -88 -47) -88]
Test Case: 839 | Input/Output: [(81 -90 43 -9) -90]
Test Case: 840 | Input/Output: [(56 56 -9 50) -9]
Test Case: 841 | Input/Output: [(10 17 52 88) 10]
Test Case: 842 | Input/Output: [(-74 -45 -3 -1) -74]
Test Case: 843 | Input/Output: [(-55 -64 49 -41) -64]
Test Case: 844 | Input/Output: [(-30 -50 40 53) -50]
Test Case: 845 | Input/Output: [(18 40 54 5) 5]
Test Case: 846 | Input/Output: [(57 -46 -92 87) -92]
Test Case: 847 | Input/Output: [(-2 -96 -92 -98) -98]
Test Case: 848 | Input/Output: [(16 34 -75 -28) -75]
Test Case: 849 | Input/Output: [(-65 76 -32 83) -65]
Test Case: 850 | Input/Output: [(82 12 73 20) 12]
Test Case: 851 | Input/Output: [(-11 -89 96 32) -89]
Test Case: 852 | Input/Output: [(-43 22 -76 97) -76]
Test Case: 853 | Input/Output: [(-30 28 -53 -17) -53]
Test Case: 854 | Input/Output: [(-46 72 20 -95) -95]
Test Case: 855 | Input/Output: [(55 -56 -98 17) -98]
Test Case: 856 | Input/Output: [(23 86 -62 100) -62]
Test Case: 857 | Input/Output: [(-31 -31 -73 -2) -73]
Test Case: 858 | Input/Output: [(-32 70 -100 67) -100]
Test Case: 859 | Input/Output: [(-20 -76 89 -69) -76]
Test Case: 860 | Input/Output: [(-92 13 0 -18) -92]
Test Case: 861 | Input/Output: [(65 78 -37 -38) -38]
Test Case: 862 | Input/Output: [(-81 -28 47 45) -81]
Test Case: 863 | Input/Output: [(99 44 5 -96) -96]
Test Case: 864 | Input/Output: [(18 -51 78 86) -51]
Test Case: 865 | Input/Output: [(-80 19 72 -60) -80]
Test Case: 866 | Input/Output: [(9 -14 31 76) -14]
Test Case: 867 | Input/Output: [(-49 -77 -83 -26) -83]
Test Case: 868 | Input/Output: [(-15 37 -21 -30) -30]
Test Case: 869 | Input/Output: [(-83 -46 52 -96) -96]
Test Case: 870 | Input/Output: [(91 -56 -74 -2) -74]
Test Case: 871 | Input/Output: [(96 -81 68 -91) -91]
Test Case: 872 | Input/Output: [(42 34 60 1) 1]
Test Case: 873 | Input/Output: [(-69 83 99 86) -69]
Test Case: 874 | Input/Output: [(-44 -97 66 33) -97]
Test Case: 875 | Input/Output: [(-90 -56 47 -68) -90]
Test Case: 876 | Input/Output: [(-94 67 -33 -42) -94]
Test Case: 877 | Input/Output: [(35 100 48 -36) -36]
Test Case: 878 | Input/Output: [(-100 -18 -17 -35) -100]
Test Case: 879 | Input/Output: [(99 10 72 -76) -76]
Test Case: 880 | Input/Output: [(-84 44 -62 -37) -84]
Test Case: 881 | Input/Output: [(83 90 21 33) 21]
Test Case: 882 | Input/Output: [(43 -36 -1 46) -36]
Test Case: 883 | Input/Output: [(-2 -18 49 51) -18]
Test Case: 884 | Input/Output: [(-20 -34 -60 36) -60]
Test Case: 885 | Input/Output: [(64 -72 -41 44) -72]
Test Case: 886 | Input/Output: [(29 8 -5 -93) -93]
Test Case: 887 | Input/Output: [(94 32 -96 -43) -96]
Test Case: 888 | Input/Output: [(60 47 20 84) 20]
Test Case: 889 | Input/Output: [(-99 12 -62 -8) -99]
Test Case: 890 | Input/Output: [(100 -81 2 -100) -100]
Test Case: 891 | Input/Output: [(-83 2 20 -13) -83]
Test Case: 892 | Input/Output: [(-17 46 46 -84) -84]
Test Case: 893 | Input/Output: [(-67 -46 -2 -85) -85]
Test Case: 894 | Input/Output: [(2 99 10 48) 2]
Test Case: 895 | Input/Output: [(-70 -92 -87 -28) -92]
Test Case: 896 | Input/Output: [(-43 92 -18 -86) -86]
Test Case: 897 | Input/Output: [(-8 47 -96 46) -96]
Test Case: 898 | Input/Output: [(-52 79 44 -90) -90]
Test Case: 899 | Input/Output: [(-60 -87 52 6) -87]
Test Case: 900 | Input/Output: [(64 5 76 -92) -92]
Test Case: 901 | Input/Output: [(14 12 38 -61) -61]
Test Case: 902 | Input/Output: [(73 -62 27 4) -62]
Test Case: 903 | Input/Output: [(38 85 -34 54) -34]
Test Case: 904 | Input/Output: [(81 -45 52 72) -45]
Test Case: 905 | Input/Output: [(-24 13 -72 -82) -82]
Test Case: 906 | Input/Output: [(-90 -83 -83 25) -90]
Test Case: 907 | Input/Output: [(83 -46 6 -86) -86]
Test Case: 908 | Input/Output: [(0 -32 2 -79) -79]
Test Case: 909 | Input/Output: [(28 16 -31 95) -31]
Test Case: 910 | Input/Output: [(59 88 6 31) 6]
Test Case: 911 | Input/Output: [(92 -38 -47 -93) -93]
Test Case: 912 | Input/Output: [(87 -22 6 -37) -37]
Test Case: 913 | Input/Output: [(27 -13 90 -72) -72]
Test Case: 914 | Input/Output: [(-74 -82 -4 -8) -82]
Test Case: 915 | Input/Output: [(-59 100 53 -53) -59]
Test Case: 916 | Input/Output: [(56 35 -90 74) -90]
Test Case: 917 | Input/Output: [(-61 57 -50 14) -61]
Test Case: 918 | Input/Output: [(99 83 -19 16) -19]
Test Case: 919 | Input/Output: [(58 80 83 85) 58]
Test Case: 920 | Input/Output: [(81 27 -72 13) -72]
Test Case: 921 | Input/Output: [(-82 19 -27 -90) -90]
Test Case: 922 | Input/Output: [(49 -17 76 -14) -17]
Test Case: 923 | Input/Output: [(-1 49 6 36) -1]
Test Case: 924 | Input/Output: [(-18 43 -56 -49) -56]
Test Case: 925 | Input/Output: [(93 32 -2 -87) -87]
Test Case: 926 | Input/Output: [(-3 -91 51 43) -91]
Test Case: 927 | Input/Output: [(68 -82 -6 28) -82]
Test Case: 928 | Input/Output: [(8 81 22 72) 8]
Test Case: 929 | Input/Output: [(-80 12 34 -71) -80]
Test Case: 930 | Input/Output: [(-62 -47 1 20) -62]
Test Case: 931 | Input/Output: [(-99 -71 -4 -50) -99]
Test Case: 932 | Input/Output: [(-31 -79 11 -41) -79]
Test Case: 933 | Input/Output: [(13 75 -25 17) -25]
Test Case: 934 | Input/Output: [(-91 79 -81 83) -91]
Test Case: 935 | Input/Output: [(24 -65 -27 53) -65]
Test Case: 936 | Input/Output: [(-9 -2 -59 16) -59]
Test Case: 937 | Input/Output: [(-11 63 -81 93) -81]
Test Case: 938 | Input/Output: [(-5 3 -69 -66) -69]
Test Case: 939 | Input/Output: [(-24 -89 87 41) -89]
Test Case: 940 | Input/Output: [(-98 -17 77 66) -98]
Test Case: 941 | Input/Output: [(16 -97 -87 -76) -97]
Test Case: 942 | Input/Output: [(-28 29 -11 -94) -94]
Test Case: 943 | Input/Output: [(96 33 84 -55) -55]
Test Case: 944 | Input/Output: [(19 75 -52 10) -52]
Test Case: 945 | Input/Output: [(31 -59 -54 -32) -59]
Test Case: 946 | Input/Output: [(-82 -18 -67 83) -82]
Test Case: 947 | Input/Output: [(29 85 42 41) 29]
Test Case: 948 | Input/Output: [(-67 -80 -30 -37) -80]
Test Case: 949 | Input/Output: [(53 -23 57 4) -23]
Test Case: 950 | Input/Output: [(6 68 -72 75) -72]
Test Case: 951 | Input/Output: [(73 -32 -73 -33) -73]
Test Case: 952 | Input/Output: [(31 49 60 -69) -69]
Test Case: 953 | Input/Output: [(17 -10 35 -93) -93]
Test Case: 954 | Input/Output: [(-68 84 -48 -100) -100]
Test Case: 955 | Input/Output: [(13 22 47 47) 13]
Test Case: 956 | Input/Output: [(46 -12 -11 -79) -79]
Test Case: 957 | Input/Output: [(-30 -62 -11 -60) -62]
Test Case: 958 | Input/Output: [(-70 -57 -53 -59) -70]
Test Case: 959 | Input/Output: [(81 -73 -90 -72) -90]
Test Case: 960 | Input/Output: [(-20 44 22 -46) -46]
Test Case: 961 | Input/Output: [(20 100 59 -32) -32]
Test Case: 962 | Input/Output: [(-88 77 -5 36) -88]
Test Case: 963 | Input/Output: [(-74 -87 -72 -38) -87]
Test Case: 964 | Input/Output: [(-58 68 -63 92) -63]
Test Case: 965 | Input/Output: [(53 -70 69 12) -70]
Test Case: 966 | Input/Output: [(26 3 -75 89) -75]
Test Case: 967 | Input/Output: [(-59 74 -54 74) -59]
Test Case: 968 | Input/Output: [(-2 12 98 75) -2]
Test Case: 969 | Input/Output: [(43 -18 24 -48) -48]
Test Case: 970 | Input/Output: [(-76 90 -32 94) -76]
Test Case: 971 | Input/Output: [(82 55 -86 -48) -86]
Test Case: 972 | Input/Output: [(24 19 -7 59) -7]
Test Case: 973 | Input/Output: [(90 88 40 -81) -81]
Test Case: 974 | Input/Output: [(-96 53 59 43) -96]
Test Case: 975 | Input/Output: [(7 49 -100 -50) -100]
Test Case: 976 | Input/Output: [(-67 42 44 -30) -67]
Test Case: 977 | Input/Output: [(34 -48 93 76) -48]
Test Case: 978 | Input/Output: [(61 -82 95 2) -82]
Test Case: 979 | Input/Output: [(-59 -24 -80 -39) -80]
Test Case: 980 | Input/Output: [(-5 -52 -79 -53) -79]
Test Case: 981 | Input/Output: [(57 -92 91 45) -92]
Test Case: 982 | Input/Output: [(-22 -81 -77 20) -81]
Test Case: 983 | Input/Output: [(9 38 -7 -96) -96]
Test Case: 984 | Input/Output: [(-63 -78 96 46) -78]
Test Case: 985 | Input/Output: [(77 61 43 -26) -26]
Test Case: 986 | Input/Output: [(61 -51 37 -73) -73]
Test Case: 987 | Input/Output: [(3 1 -63 70) -63]
Test Case: 988 | Input/Output: [(-22 -93 96 78) -93]
Test Case: 989 | Input/Output: [(-49 -12 1 -88) -88]
Test Case: 990 | Input/Output: [(-100 97 -69 -29) -100]
Test Case: 991 | Input/Output: [(32 67 29 1) 1]
Test Case: 992 | Input/Output: [(0 69 -54 61) -54]
Test Case: 993 | Input/Output: [(65 49 -82 -50) -82]
Test Case: 994 | Input/Output: [(3 -96 16 -46) -96]
Test Case: 995 | Input/Output: [(35 -54 -52 -48) -54]
Test Case: 996 | Input/Output: [(8 -44 -87 92) -87]
Test Case: 997 | Input/Output: [(-24 6 72 49) -24]
Test Case: 998 | Input/Output: [(-35 30 82 6) -35]
Test Case: 999 | Input/Output: [(-20 96 -25 -96) -96]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = -51 102 -18 96 15 -30 20 100 9 40 -44 91 -66 -88 27 44
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[41 41 -37 41] -37] [[-66 24 24 24] -66] [[-99 -99 -4 -99] -99] [[-19 24 -19 -19] -19] [[66 66 66 66] 66] [[86 84 86 86] 84] [[-9 -9 -93 -9] -93] [[-46 -46 -34 -46] -46] [[-74 -57 -57 -57] -74] [[-91 -91 -91 99] -91] [(38 38 38 38) 38] [(-70 -70 -70 -70) -70] [(-15 -15 -15 -15) -15] [(-88 -88 -88 -88) -88] [(-44 -44 -44 -44) -44] [(11 90 46 39) 11] [(81 8 13 40) 8] [(100 30 50 99) 30] [(80 27 28 87) 27] [(95 6 51 37) 6] [(86 9 27 89) 9] [(35 12 13 87) 12] [(15 49 100 16) 15] [(80 4 56 36) 4] [(83 62 34 80) 34] [(46 3 29 68) 3] [(80 36 14 97) 14] [(91 31 96 1) 1] [(54 34 50 79) 34] [(56 62 24 57) 24] [(67 36 76 13) 13] [(47 22 85 88) 22] [(85 90 90 91) 85] [(46 5 49 89) 5] [(15 99 65 43) 15] [(56 99 -30 -79) -79] [(52 -94 100 -4) -94] [(-98 -43 21 2) -98] [(6 13 62 79) 6] [(47 -72 -32 68) -72] [(-25 20 -80 13) -80] [(14 -17 -34 -40) -40] [(53 63 -92 52) -92] [(-65 -89 71 -6) -89] [(46 7 30 -64) -64] [(57 100 -77 100) -77] [(11 -34 23 -99) -99] [(96 -86 12 -51) -86] [(-90 95 -14 54) -90] [(45 -7 -3 79) -7] [(-82 17 7 75) -82] [(-73 -37 26 49) -73] [(-23 13 -53 18) -53] [(-91 18 58 37) -91] [(3 99 4 55) 3] [(83 -89 98 -88) -89] [(-30 -36 38 -28) -36] [(3 -34 -78 75) -78] [(27 4 59 -22) -22] [(-69 -90 -79 26) -90] [(85 92 18 16) 16] [(9 -57 -47 -15) -57] [(-5 59 62 -72) -72] [(-22 3 73 -26) -26] [(32 37 -84 17) -84] [(4 85 -53 16) -53] [(-28 91 -59 -67) -67] [(-39 -23 59 -7) -39] [(-62 -58 -36 87) -62] [(39 46 92 20) 20] [(15 7 5 -75) -75] [(-21 89 0 -52) -52] [(-89 -39 -47 48) -89] [(49 -24 -35 74) -35] [(6 92 54 -37) -37] [(85 90 30 -72) -72] [(-88 51 -9 -66) -88] [(-60 -98 -78 42) -98] [(21 71 89 -53) -53] [(-68 -72 -22 -73) -73] [(61 -53 -59 -21) -59] [(35 -66 87 16) -66] [(-76 30 88 -88) -88] [(-19 -90 55 31) -90] [(-91 -89 -93 56) -93] [(-48 -97 74 -28) -97] [(-33 48 10 36) -33] [(28 58 35 -94) -94] [(71 22 18 1) 1] [(81 35 -56 -31) -56] [(-44 67 -39 90) -44] [(-66 -43 -75 37) -75] [(-47 44 84 -31) -47] [(-60 -90 -7 19) -90] [(81 86 38 -12) -12])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: 41                 
Correct output: -66                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
Correct output: -19                 | Program output: -19                
Correct output: 66                  | Program output: 66                 
Correct output: 84                  | Program output: 86                 
Correct output: -93                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -57                
Correct output: -91                 | Program output: 99                 
Correct output: 38                  | Program output: 38                 
Correct output: -70                 | Program output: -70                
Correct output: -15                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -44                
Correct output: 11                  | Program output: 39                 
Correct output: 8                   | Program output: 40                 
Correct output: 30                  | Program output: 99                 
Correct output: 27                  | Program output: 87                 
Correct output: 6                   | Program output: 37                 
Correct output: 9                   | Program output: 89                 
Correct output: 12                  | Program output: 87                 
Correct output: 15                  | Program output: 16                 
Correct output: 4                   | Program output: 36                 
Correct output: 34                  | Program output: 80                 
Correct output: 3                   | Program output: 68                 
Correct output: 14                  | Program output: 97                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 79                 
Correct output: 24                  | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 22                  | Program output: 88                 
Correct output: 85                  | Program output: 91                 
Correct output: 5                   | Program output: 89                 
Correct output: 15                  | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -4                 
Correct output: -98                 | Program output: 2                  
Correct output: 6                   | Program output: 79                 
Correct output: -72                 | Program output: 68                 
Correct output: -80                 | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: 52                 
Correct output: -89                 | Program output: -6                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: 100                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -51                
Correct output: -90                 | Program output: 54                 
Correct output: -7                  | Program output: 79                 
Correct output: -82                 | Program output: 75                 
Correct output: -73                 | Program output: 49                 
Correct output: -53                 | Program output: 18                 
Correct output: -91                 | Program output: 37                 
Correct output: 3                   | Program output: 55                 
Correct output: -89                 | Program output: -88                
Correct output: -36                 | Program output: -28                
Correct output: -78                 | Program output: 75                 
Correct output: -22                 | Program output: -22                
Correct output: -90                 | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: -57                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -84                 | Program output: 17                 
Correct output: -53                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -7                 
Correct output: -62                 | Program output: 87                 
Correct output: 20                  | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: 48                 
Correct output: -35                 | Program output: 74                 
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: -66                
Correct output: -98                 | Program output: 42                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -21                
Correct output: -66                 | Program output: 16                 
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: 31                 
Correct output: -93                 | Program output: 56                 
Correct output: -97                 | Program output: -28                
Correct output: -33                 | Program output: 36                 
Correct output: -94                 | Program output: -94                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -31                
Correct output: -44                 | Program output: 90                 
Correct output: -75                 | Program output: 37                 
Correct output: -47                 | Program output: -31                
Correct output: -90                 | Program output: 19                 
Correct output: -12                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Lexicase best program: (integer_mult integer_stackdepth boolean_dup exec_dup (boolean_pop boolean_stackdepth) integer_eq integer_dup integer_stackdepth boolean_shove integer_lte integer_dup_items in4 integer_dup_times print_integer exec_do*while (exec_eq) integer_stackdepth exec_if () (integer_yank in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_dup_items boolean_empty boolean_or exec_swap () (boolean_not)) exec_shove () integer_lte) (boolean_pop) print_integer boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_s () (integer_dup_times exec_if () ()) ()))
Lexicase best errors: [0 1 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 74
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Zero cases best program: (integer_mult integer_stackdepth boolean_dup exec_dup (boolean_pop boolean_stackdepth) integer_eq integer_dup integer_stackdepth boolean_shove integer_lte integer_dup_items in4 integer_dup_times print_integer exec_do*while (exec_eq) integer_stackdepth exec_if () (integer_yank in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_dup_items boolean_empty boolean_or exec_swap () (boolean_not)) exec_shove () integer_lte) (boolean_pop) print_integer boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_s () (integer_dup_times exec_if () ()) ()))
Zero cases best errors: [0 1 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 74
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 2 2 11 1000 2 2 2 2)
Population mean number of elite cases: 1.03
Count of perfect (error zero) individuals by case: (2 2 2 2 11 0 2 2 2 2)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_805} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction tagged_52} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 65} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_integer})
Best program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt integer_lt boolean_yank boolean_rot tagged_805 exec_stackdepth integer_fromboolean) (exec_s () (exec_dup () exec_s () (exec_when (print_boolean) boolean_invert_second_then_and exec_y_when_autoconstructing (integer_gte boolean_invert_second_then_and) exec_stackdepth exec_y_when_autoconstructing (boolean_or integer_dup_times exec_s (exec_k (integer_dup) (exec_shove (boolean_invert_first_then_and exec_do*while (integer_inc) tagged_52) exec_do*times (exec_do*range (integer_add) exec_while (exec_noop boolean_yank integer_fromboolean) exec_yankdup) boolean_dup_items integer_sub exec_while (boolean_pop integer_dup_times 65) exec_s_when_autoconstructing (integer_stackdepth integer_add exec_dup_items boolean_shove) (integer_gte integer_yank) (integer_gt integer_fromboolean) exec_pop (integer_min exec_do*count () integer_dup boolean_not in4 boolean_dup integer_gt) boolean_and) exec_yank exec_noop boolean_shove print_integer) () ())) ()) ())) () ())
Errors: [0 1 0 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 70
Size: 103
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 9.973
Median total errors in population: 10
Error averages by case: (0.998 0.998 0.998 0.998 0.989 1.0 0.998 0.998 0.998 0.998)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 50.87
Average program size in population (points): 69.595
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 469625
--- Timings ---
Current time: 1559314448026 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.8 seconds, 30.8%
Fitness Testing:      1.7 seconds, 65.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -66                 | Program output: 24                 
Correct output: -99                 | Program output: -4                 
Correct output: -19                 | Program output: -19                
Correct output: 66                  | Program output: 66                 
Correct output: 84                  | Program output: 86                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -34                
Correct output: -74                 | Program output: -57                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 38                 
Correct output: -70                 | Program output: -70                
Correct output: -15                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -44                
Correct output: 11                  | Program output: 46                 
Correct output: 8                   | Program output: 13                 
Correct output: 30                  | Program output: 50                 
Correct output: 27                  | Program output: 28                 
Correct output: 6                   | Program output: 51                 
Correct output: 9                   | Program output: 27                 
Correct output: 12                  | Program output: 13                 
Correct output: 15                  | Program output: 100                
Correct output: 4                   | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 29                 
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 96                 
Correct output: 34                  | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 13                  | Program output: 76                 
Correct output: 22                  | Program output: 85                 
Correct output: 85                  | Program output: 90                 
Correct output: 5                   | Program output: 49                 
Correct output: 15                  | Program output: 65                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: 100                
Correct output: -98                 | Program output: 21                 
Correct output: 6                   | Program output: 62                 
Correct output: -72                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: 71                 
Correct output: -64                 | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 23                 
Correct output: -86                 | Program output: 12                 
Correct output: -90                 | Program output: -14                
Correct output: -7                  | Program output: -3                 
Correct output: -82                 | Program output: 7                  
Correct output: -73                 | Program output: 26                 
Correct output: -53                 | Program output: -53                
Correct output: -91                 | Program output: 58                 
Correct output: 3                   | Program output: 4                  
Correct output: -89                 | Program output: 98                 
Correct output: -36                 | Program output: 38                 
Correct output: -78                 | Program output: -78                
Correct output: -22                 | Program output: 59                 
Correct output: -90                 | Program output: -79                
Correct output: 16                  | Program output: 18                 
Correct output: -57                 | Program output: -47                
Correct output: -72                 | Program output: 62                 
Correct output: -26                 | Program output: 73                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -53                
Correct output: -67                 | Program output: -59                
Correct output: -39                 | Program output: 59                 
Correct output: -62                 | Program output: -36                
Correct output: 20                  | Program output: 92                 
Correct output: -75                 | Program output: 5                  
Correct output: -52                 | Program output: 0                  
Correct output: -89                 | Program output: -47                
Correct output: -35                 | Program output: -35                
Correct output: -37                 | Program output: 54                 
Correct output: -72                 | Program output: 30                 
Correct output: -88                 | Program output: -9                 
Correct output: -98                 | Program output: -78                
Correct output: -53                 | Program output: 89                 
Correct output: -73                 | Program output: -22                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 87                 
Correct output: -88                 | Program output: 88                 
Correct output: -90                 | Program output: 55                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 74                 
Correct output: -33                 | Program output: 10                 
Correct output: -94                 | Program output: 35                 
Correct output: 1                   | Program output: 18                 
Correct output: -56                 | Program output: -56                
Correct output: -44                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -47                 | Program output: 84                 
Correct output: -90                 | Program output: -7                 
Correct output: -12                 | Program output: 38                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_293} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 2, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when})
Lexicase best program: (tagged_293 exec_yankdup boolean_yankdup in3 print_integer integer_flush boolean_flush exec_dup_items boolean_and boolean_yank exec_do*while (boolean_stackdepth) boolean_rot exec_flush integer_max boolean_pop exec_shove () integer_gte exec_do*count (integer_dup_items integer_eq integer_rot exec_empty exec_pop (boolean_eq) boolean_dup) integer_flush exec_dup_times (in4) integer_lte boolean_invert_first_then_and boolean_pop exec_when (boolean_shove exec_eq boolean_xor boolean_or) boolean_invert_second_then_and exec_flush boolean_xor print_newline integer_shove exec_y (print_integer exec_stackdepth integer_min integer_dup_items boolean_rot) boolean_rot exec_do*while () exec_while (in4 integer_add in3) exec_eq boolean_dup integer_dup_items exec_do*count (boolean_frominteger integer_add) exec_rot (boolean_invert_first_then_and boolean_shove exec_do*range (boolean_rot) exec_yankdup) (integer_empty integer_rot boolean_not integer_sub boolean_or boolean_dup_times exec_rot (integer_yankdup) (boolean_shove integer_eq exec_yankdup boolean_and boolean_swap exec_rot () (exec_while (integer_flush integer_eq) integer_mod boolean_eq exec_s_when_autoconstructing (in1 exec_stackdepth integer_gt exec_when ()) () ()) ()) ()) ())
Lexicase best errors: [1 1 1 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 116
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_293} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 2, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when})
Zero cases best program: (tagged_293 exec_yankdup boolean_yankdup in3 print_integer integer_flush boolean_flush exec_dup_items boolean_and boolean_yank exec_do*while (boolean_stackdepth) boolean_rot exec_flush integer_max boolean_pop exec_shove () integer_gte exec_do*count (integer_dup_items integer_eq integer_rot exec_empty exec_pop (boolean_eq) boolean_dup) integer_flush exec_dup_times (in4) integer_lte boolean_invert_first_then_and boolean_pop exec_when (boolean_shove exec_eq boolean_xor boolean_or) boolean_invert_second_then_and exec_flush boolean_xor print_newline integer_shove exec_y (print_integer exec_stackdepth integer_min integer_dup_items boolean_rot) boolean_rot exec_do*while () exec_while (in4 integer_add in3) exec_eq boolean_dup integer_dup_items exec_do*count (boolean_frominteger integer_add) exec_rot (boolean_invert_first_then_and boolean_shove exec_do*range (boolean_rot) exec_yankdup) (integer_empty integer_rot boolean_not integer_sub boolean_or boolean_dup_times exec_rot (integer_yankdup) (boolean_shove integer_eq exec_yankdup boolean_and boolean_swap exec_rot () (exec_while (integer_flush integer_eq) integer_mod boolean_eq exec_s_when_autoconstructing (in1 exec_stackdepth integer_gt exec_when ()) () ()) ()) ()) ())
Zero cases best errors: [1 1 1 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 116
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 329 3 1000 273 613 1000 1000)
Population mean number of elite cases: 7.22
Count of perfect (error zero) individuals by case: (0 0 0 329 3 0 273 613 0 0)
Population mean number of perfect (error zero) cases: 1.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_293} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 2, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when})
Best program: (tagged_293 exec_yankdup boolean_yankdup in3 print_integer integer_flush boolean_flush exec_dup_items boolean_and boolean_yank exec_do*while (boolean_stackdepth) boolean_rot exec_flush integer_max boolean_pop exec_shove () integer_gte exec_do*count (integer_dup_items integer_eq integer_rot exec_empty exec_pop (boolean_eq) boolean_dup) integer_flush exec_dup_times (in4) integer_lte boolean_invert_first_then_and boolean_pop exec_when (boolean_shove exec_eq boolean_xor boolean_or) boolean_invert_second_then_and exec_flush boolean_xor print_newline integer_shove exec_y (print_integer exec_stackdepth integer_min integer_dup_items boolean_rot) boolean_rot exec_do*while () exec_while (in4 integer_add in3) exec_eq boolean_dup integer_dup_items exec_do*count (boolean_frominteger integer_add) exec_rot (boolean_invert_first_then_and boolean_shove exec_do*range (boolean_rot) exec_yankdup) (integer_empty integer_rot boolean_not) (integer_sub boolean_or) boolean_dup_times exec_rot (integer_yankdup) (boolean_shove integer_eq exec_yankdup boolean_and boolean_swap exec_rot () (exec_while (integer_flush integer_eq) integer_mod boolean_eq exec_s_when_autoconstructing (in1 exec_stackdepth integer_gt exec_when ()) () ()) ()) ())
Errors: [1 1 1 1 1 1 0 0 1 1]
Total: 8
Mean: 0.8
Genome size: 90
Size: 116
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 8.782
Median total errors in population: 8
Error averages by case: (1.0 1.0 1.0 0.671 0.997 1.0 0.727 0.387 1.0 1.0)
Error minima by case: (1 1 1 0 0 1 0 0 1 1)
Average genome size in population (length): 71.838
Average program size in population (points): 97.664
Average percent parens in population: 0.263
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.517
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.003
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 974588
--- Timings ---
Current time: 1559314450489 milliseconds
Total Time:           5.5 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.4 seconds, 43.3%
Fitness Testing:      2.3 seconds, 42.5%
Report:               0.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: 41                 
Correct output: -66                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
Correct output: -19                 | Program output: -19                
Correct output: 66                  | Program output: 66                 
Correct output: 84                  | Program output: 86                 
Correct output: -93                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -57                
Correct output: -91                 | Program output: 99                 
Correct output: 38                  | Program output: 38                 
Correct output: -70                 | Program output: -70                
Correct output: -15                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -44                
Correct output: 11                  | Program output: 39                 
Correct output: 8                   | Program output: 40                 
Correct output: 30                  | Program output: 99                 
Correct output: 27                  | Program output: 87                 
Correct output: 6                   | Program output: 37                 
Correct output: 9                   | Program output: 89                 
Correct output: 12                  | Program output: 87                 
Correct output: 15                  | Program output: 16                 
Correct output: 4                   | Program output: 36                 
Correct output: 34                  | Program output: 80                 
Correct output: 3                   | Program output: 68                 
Correct output: 14                  | Program output: 97                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 79                 
Correct output: 24                  | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 22                  | Program output: 88                 
Correct output: 85                  | Program output: 91                 
Correct output: 5                   | Program output: 89                 
Correct output: 15                  | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -4                 
Correct output: -98                 | Program output: 2                  
Correct output: 6                   | Program output: 79                 
Correct output: -72                 | Program output: 68                 
Correct output: -80                 | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: 52                 
Correct output: -89                 | Program output: -6                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: 100                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -51                
Correct output: -90                 | Program output: 54                 
Correct output: -7                  | Program output: 79                 
Correct output: -82                 | Program output: 75                 
Correct output: -73                 | Program output: 49                 
Correct output: -53                 | Program output: 18                 
Correct output: -91                 | Program output: 37                 
Correct output: 3                   | Program output: 55                 
Correct output: -89                 | Program output: -88                
Correct output: -36                 | Program output: -28                
Correct output: -78                 | Program output: 75                 
Correct output: -22                 | Program output: -22                
Correct output: -90                 | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: -57                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -84                 | Program output: 17                 
Correct output: -53                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -7                 
Correct output: -62                 | Program output: 87                 
Correct output: 20                  | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: 48                 
Correct output: -35                 | Program output: 74                 
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: -66                
Correct output: -98                 | Program output: 42                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -21                
Correct output: -66                 | Program output: 16                 
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: 31                 
Correct output: -93                 | Program output: 56                 
Correct output: -97                 | Program output: -28                
Correct output: -33                 | Program output: 36                 
Correct output: -94                 | Program output: -94                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -31                
Correct output: -44                 | Program output: 90                 
Correct output: -75                 | Program output: 37                 
Correct output: -47                 | Program output: -31                
Correct output: -90                 | Program output: 19                 
Correct output: -12                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Lexicase best program: (integer_mult integer_stackdepth boolean_dup exec_dup (boolean_pop boolean_stackdepth) integer_eq integer_dup integer_stackdepth exec_s_when_autoconstructing (integer_lte integer_dup_items in4 integer_dup_times) (print_integer exec_do*while (exec_eq) integer_stackdepth exec_if () (integer_yank in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_dup_items boolean_empty boolean_or exec_swap () (boolean_not)) exec_shove () integer_lte) (boolean_pop) print_integer boolean_frominteger boolean_frominteger boolean_eq) (boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_s () (integer_dup_times exec_if () ()) ())))
Lexicase best errors: [1 1 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 77
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Zero cases best program: (integer_mult integer_stackdepth boolean_dup exec_dup (boolean_pop boolean_stackdepth) integer_eq integer_dup integer_stackdepth exec_s_when_autoconstructing (integer_lte integer_dup_items in4 integer_dup_times) (print_integer exec_do*while (exec_eq) integer_stackdepth exec_if () (integer_yank in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_dup_items boolean_empty boolean_or exec_swap () (boolean_not)) exec_shove () integer_lte) (boolean_pop) print_integer boolean_frominteger boolean_frominteger boolean_eq) (boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_s () (integer_dup_times exec_if () ()) ())))
Zero cases best errors: [1 1 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 77
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (324 1 261 1000 261 1000 1 318 261 3)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (324 1 261 0 261 0 1 318 261 3)
Population mean number of perfect (error zero) cases: 1.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Best program: (integer_mult integer_stackdepth boolean_dup exec_dup (boolean_pop boolean_stackdepth) integer_eq integer_dup integer_stackdepth boolean_shove integer_lte integer_dup_items in4 integer_dup_times print_integer exec_do*while (exec_eq) integer_stackdepth exec_if () (integer_yank in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_dup_items boolean_empty boolean_or exec_swap () (boolean_not)) exec_shove () integer_lte) (boolean_pop) print_integer boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_s () (integer_dup_times exec_if () ()) ()))
Errors: [1 1 0 1 0 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 55
Size: 74
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 8.57
Median total errors in population: 8
Error averages by case: (0.676 0.999 0.739 1.0 0.739 1.0 0.999 0.682 0.739 0.997)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 73.963
Average program size in population (points): 100.543
Average percent parens in population: 0.261
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.045
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1402499
--- Timings ---
Current time: 1559314453489 milliseconds
Total Time:           8.3 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.4 seconds, 53.1%
Fitness Testing:      2.8 seconds, 33.6%
Report:               1.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: 41                 
Correct output: -66                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
Correct output: -19                 | Program output: -19                
Correct output: 66                  | Program output: 66                 
Correct output: 84                  | Program output: 86                 
Correct output: -93                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -57                
Correct output: -91                 | Program output: 99                 
Correct output: 38                  | Program output: 38                 
Correct output: -70                 | Program output: -70                
Correct output: -15                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -44                
Correct output: 11                  | Program output: 39                 
Correct output: 8                   | Program output: 40                 
Correct output: 30                  | Program output: 99                 
Correct output: 27                  | Program output: 87                 
Correct output: 6                   | Program output: 37                 
Correct output: 9                   | Program output: 89                 
Correct output: 12                  | Program output: 87                 
Correct output: 15                  | Program output: 16                 
Correct output: 4                   | Program output: 36                 
Correct output: 34                  | Program output: 80                 
Correct output: 3                   | Program output: 68                 
Correct output: 14                  | Program output: 97                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 79                 
Correct output: 24                  | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 22                  | Program output: 88                 
Correct output: 85                  | Program output: 91                 
Correct output: 5                   | Program output: 89                 
Correct output: 15                  | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -4                 
Correct output: -98                 | Program output: 2                  
Correct output: 6                   | Program output: 79                 
Correct output: -72                 | Program output: 68                 
Correct output: -80                 | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: 52                 
Correct output: -89                 | Program output: -6                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: 100                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -51                
Correct output: -90                 | Program output: 54                 
Correct output: -7                  | Program output: 79                 
Correct output: -82                 | Program output: 75                 
Correct output: -73                 | Program output: 49                 
Correct output: -53                 | Program output: 18                 
Correct output: -91                 | Program output: 37                 
Correct output: 3                   | Program output: 55                 
Correct output: -89                 | Program output: -88                
Correct output: -36                 | Program output: -28                
Correct output: -78                 | Program output: 75                 
Correct output: -22                 | Program output: -22                
Correct output: -90                 | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: -57                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -84                 | Program output: 17                 
Correct output: -53                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -7                 
Correct output: -62                 | Program output: 87                 
Correct output: 20                  | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: 48                 
Correct output: -35                 | Program output: 74                 
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: -66                
Correct output: -98                 | Program output: 42                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -21                
Correct output: -66                 | Program output: 16                 
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: 31                 
Correct output: -93                 | Program output: 56                 
Correct output: -97                 | Program output: -28                
Correct output: -33                 | Program output: 36                 
Correct output: -94                 | Program output: -94                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -31                
Correct output: -44                 | Program output: 90                 
Correct output: -75                 | Program output: 37                 
Correct output: -47                 | Program output: -31                
Correct output: -90                 | Program output: 19                 
Correct output: -12                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Lexicase best program: (integer_mult integer_stackdepth boolean_dup exec_dup (boolean_pop boolean_stackdepth) integer_eq integer_dup integer_stackdepth boolean_shove integer_lte integer_dup_items in4 integer_dup_times print_integer exec_do*while (exec_eq) integer_stackdepth exec_if () (integer_yank in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_dup_items boolean_empty boolean_or exec_swap () (boolean_not)) exec_shove () integer_lte) (boolean_pop) print_integer boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_s () (integer_dup_times exec_if () ()) ()))
Lexicase best errors: [0 0 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 74
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Zero cases best program: (integer_mult integer_stackdepth boolean_dup exec_dup (boolean_pop boolean_stackdepth) integer_eq integer_dup integer_stackdepth boolean_shove integer_lte integer_dup_items in4 integer_dup_times print_integer exec_do*while (exec_eq) integer_stackdepth exec_if () (integer_yank in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_dup_items boolean_empty boolean_or exec_swap () (boolean_not)) exec_shove () integer_lte) (boolean_pop) print_integer boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_s () (integer_dup_times exec_if () ()) ()))
Zero cases best errors: [0 0 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 74
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 253 1000 235 253 253 1000 1000 1000 224)
Population mean number of elite cases: 5.47
Count of perfect (error zero) individuals by case: (255 253 0 235 253 253 0 0 0 224)
Population mean number of perfect (error zero) cases: 1.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Best program: (integer_mult integer_stackdepth boolean_dup exec_dup (boolean_pop boolean_stackdepth) integer_eq integer_dup integer_stackdepth boolean_shove integer_lte integer_dup_items in4 integer_dup_times print_integer exec_do*while (exec_eq) integer_stackdepth exec_if () (integer_yank in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_dup_items boolean_empty boolean_or exec_swap () (boolean_not)) exec_shove () integer_lte) (boolean_pop) print_integer boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_s () (integer_dup_times exec_if () ()) ()))
Errors: [0 0 1 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 55
Size: 74
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 8.527
Median total errors in population: 10
Error averages by case: (0.745 0.747 1.0 0.765 0.747 0.747 1.0 1.0 1.0 0.776)
Error minima by case: (0 0 1 0 0 0 1 1 1 0)
Average genome size in population (length): 67.473
Average program size in population (points): 92.577
Average percent parens in population: 0.271
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.5655
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1851580
--- Timings ---
Current time: 1559314456556 milliseconds
Total Time:          11.4 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.5 seconds, 57.0%
Fitness Testing:      3.2 seconds, 28.5%
Report:               1.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: 41                 
Correct output: -66                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
Correct output: -19                 | Program output: -19                
Correct output: 66                  | Program output: 66                 
Correct output: 84                  | Program output: 86                 
Correct output: -93                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -57                
Correct output: -91                 | Program output: 99                 
Correct output: 38                  | Program output: 38                 
Correct output: -70                 | Program output: -70                
Correct output: -15                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -44                
Correct output: 11                  | Program output: 39                 
Correct output: 8                   | Program output: 40                 
Correct output: 30                  | Program output: 99                 
Correct output: 27                  | Program output: 87                 
Correct output: 6                   | Program output: 37                 
Correct output: 9                   | Program output: 89                 
Correct output: 12                  | Program output: 87                 
Correct output: 15                  | Program output: 16                 
Correct output: 4                   | Program output: 36                 
Correct output: 34                  | Program output: 80                 
Correct output: 3                   | Program output: 68                 
Correct output: 14                  | Program output: 97                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 79                 
Correct output: 24                  | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 22                  | Program output: 88                 
Correct output: 85                  | Program output: 91                 
Correct output: 5                   | Program output: 89                 
Correct output: 15                  | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -4                 
Correct output: -98                 | Program output: 2                  
Correct output: 6                   | Program output: 79                 
Correct output: -72                 | Program output: 68                 
Correct output: -80                 | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: 52                 
Correct output: -89                 | Program output: -6                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: 100                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -51                
Correct output: -90                 | Program output: 54                 
Correct output: -7                  | Program output: 79                 
Correct output: -82                 | Program output: 75                 
Correct output: -73                 | Program output: 49                 
Correct output: -53                 | Program output: 18                 
Correct output: -91                 | Program output: 37                 
Correct output: 3                   | Program output: 55                 
Correct output: -89                 | Program output: -88                
Correct output: -36                 | Program output: -28                
Correct output: -78                 | Program output: 75                 
Correct output: -22                 | Program output: -22                
Correct output: -90                 | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: -57                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -84                 | Program output: 17                 
Correct output: -53                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -7                 
Correct output: -62                 | Program output: 87                 
Correct output: 20                  | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: 48                 
Correct output: -35                 | Program output: 74                 
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: -66                
Correct output: -98                 | Program output: 42                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -21                
Correct output: -66                 | Program output: 16                 
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: 31                 
Correct output: -93                 | Program output: 56                 
Correct output: -97                 | Program output: -28                
Correct output: -33                 | Program output: 36                 
Correct output: -94                 | Program output: -94                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -31                
Correct output: -44                 | Program output: 90                 
Correct output: -75                 | Program output: 37                 
Correct output: -47                 | Program output: -31                
Correct output: -90                 | Program output: 19                 
Correct output: -12                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Lexicase best program: (integer_mult integer_stackdepth boolean_dup exec_dup (boolean_pop boolean_stackdepth) integer_eq integer_dup integer_stackdepth boolean_shove integer_lte integer_dup_items in4 integer_dup_times print_integer exec_do*while (exec_eq) integer_stackdepth exec_if () (integer_yank in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_dup_items boolean_empty boolean_or exec_swap () (boolean_not)) exec_shove () integer_lte) (boolean_pop) print_integer boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_s () (integer_dup_times exec_if () ()) ()))
Lexicase best errors: [1 1 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 74
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Zero cases best program: (integer_mult integer_stackdepth boolean_dup exec_dup (boolean_pop boolean_stackdepth) integer_eq integer_dup integer_stackdepth boolean_shove integer_lte integer_dup_items in4 integer_dup_times print_integer exec_do*while (exec_eq) integer_stackdepth exec_if () (integer_yank in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_dup_items boolean_empty boolean_or exec_swap () (boolean_not)) exec_shove () integer_lte) (boolean_pop) print_integer boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_s () (integer_dup_times exec_if () ()) ()))
Zero cases best errors: [1 1 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 74
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 503 797 1000 506 506 806 1000)
Population mean number of elite cases: 8.12
Count of perfect (error zero) individuals by case: (0 0 0 503 797 0 506 506 806 0)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_805} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction tagged_52} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Best program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt integer_lt boolean_yank boolean_rot tagged_805 exec_stackdepth integer_fromboolean) (exec_s () (exec_dup () exec_s () (exec_when (print_boolean) boolean_invert_second_then_and exec_y_when_autoconstructing (integer_gte boolean_invert_second_then_and) exec_stackdepth exec_y_when_autoconstructing (boolean_or integer_dup_times exec_s (exec_k (integer_dup) (exec_shove (boolean_invert_first_then_and exec_do*while (integer_inc) tagged_52) exec_do*times (exec_do*range (integer_add) exec_while (exec_swap () (boolean_not)) exec_shove () integer_lte) boolean_pop) print_integer boolean_frominteger boolean_frominteger boolean_eq) (boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_s () (integer_dup_times exec_if () ()) ())) ())) ()) ())) () ())
Errors: [1 1 1 0 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 56
Size: 93
Percent parens: 0.398
--- Population Statistics ---
Average total errors in population: 6.882
Median total errors in population: 6
Error averages by case: (1.0 1.0 1.0 0.497 0.203 1.0 0.494 0.494 0.194 1.0)
Error minima by case: (1 1 1 0 0 1 0 0 0 1)
Average genome size in population (length): 66.117
Average program size in population (points): 88.914
Average percent parens in population: 0.255
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 6.02675
Median age in population: 6.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2338200
--- Timings ---
Current time: 1559314459714 milliseconds
Total Time:          14.5 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.6 seconds, 59.5%
Fitness Testing:      3.7 seconds, 25.5%
Report:               2.1 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 803
Test mean error for best: 0.80300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 20                 
Correct output: -44                 | Program output: 20                 
Correct output: -99                 | Program output: 20                 
Correct output: -22                 | Program output: 20                 
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: 41                 
Correct output: -66                 | Program output: 20                 
Correct output: -99                 | Program output: 20                 
Correct output: -19                 | Program output: 20                 
Correct output: 66                  | Program output: 66                 
Correct output: 84                  | Program output: 84                 
Correct output: -93                 | Program output: 20                 
Correct output: -46                 | Program output: 20                 
Correct output: -74                 | Program output: 20                 
Correct output: -91                 | Program output: 20                 
Correct output: 38                  | Program output: 38                 
Correct output: -70                 | Program output: 20                 
Correct output: -15                 | Program output: 20                 
Correct output: -88                 | Program output: 20                 
Correct output: -44                 | Program output: 20                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 30                  | Program output: 30                 
Correct output: 27                  | Program output: 27                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 15                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 14                  | Program output: 36                 
Correct output: 1                   | Program output: 31                 
Correct output: 34                  | Program output: 34                 
Correct output: 24                  | Program output: 62                 
Correct output: 13                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 85                  | Program output: 90                 
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 99                 
Correct output: -79                 | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: 20                 
Correct output: 6                   | Program output: 13                 
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: 20                 
Correct output: -40                 | Program output: -17                
Correct output: -92                 | Program output: 63                 
Correct output: -89                 | Program output: 20                 
Correct output: -64                 | Program output: 7                  
Correct output: -77                 | Program output: 100                
Correct output: -99                 | Program output: -34                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: 20                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: 20                 
Correct output: -73                 | Program output: 20                 
Correct output: -53                 | Program output: 20                 
Correct output: -91                 | Program output: 20                 
Correct output: 3                   | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: 20                 
Correct output: -78                 | Program output: -34                
Correct output: -22                 | Program output: 4                  
Correct output: -90                 | Program output: 20                 
Correct output: 16                  | Program output: 92                 
Correct output: -57                 | Program output: -57                
Correct output: -72                 | Program output: 20                 
Correct output: -26                 | Program output: 20                 
Correct output: -84                 | Program output: 37                 
Correct output: -53                 | Program output: 85                 
Correct output: -67                 | Program output: 20                 
Correct output: -39                 | Program output: 20                 
Correct output: -62                 | Program output: 20                 
Correct output: 20                  | Program output: 46                 
Correct output: -75                 | Program output: 7                  
Correct output: -52                 | Program output: 20                 
Correct output: -89                 | Program output: 20                 
Correct output: -35                 | Program output: -24                
Correct output: -37                 | Program output: 92                 
Correct output: -72                 | Program output: 90                 
Correct output: -88                 | Program output: 20                 
Correct output: -98                 | Program output: 20                 
Correct output: -53                 | Program output: 71                 
Correct output: -73                 | Program output: 20                 
Correct output: -59                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: 20                 
Correct output: -90                 | Program output: 20                 
Correct output: -93                 | Program output: 20                 
Correct output: -97                 | Program output: 20                 
Correct output: -33                 | Program output: 20                 
Correct output: -94                 | Program output: 58                 
Correct output: 1                   | Program output: 22                 
Correct output: -56                 | Program output: 35                 
Correct output: -44                 | Program output: 20                 
Correct output: -75                 | Program output: 20                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 20                 
Correct output: -12                 | Program output: 86                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 1, :instruction in1})
Lexicase best program: (integer_mult integer_stackdepth boolean_dup boolean_shove integer_lte integer_dup_items boolean_flush integer_dup_times print_integer exec_do*while (exec_eq) integer_stackdepth exec_if (integer_yank) (in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_dup_items boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2) integer_lt integer_lte integer_sub boolean_empty boolean_frominteger integer_shove exec_empty integer_sub boolean_swap integer_dup_items boolean_eq exec_s_when_autoconstructing (in2 exec_do*range ()) (exec_k_when_autoconstructing (boolean_shove boolean_eq integer_mod exec_eq in1) ()) ())
Lexicase best errors: [0 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 71
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 1, :instruction in1})
Zero cases best program: (integer_mult integer_stackdepth boolean_dup boolean_shove integer_lte integer_dup_items boolean_flush integer_dup_times print_integer exec_do*while (exec_eq) integer_stackdepth exec_if (integer_yank) (in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_dup_items boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2) integer_lt integer_lte integer_sub boolean_empty boolean_frominteger integer_shove exec_empty integer_sub boolean_swap integer_dup_items boolean_eq exec_s_when_autoconstructing (in2 exec_do*range ()) (exec_k_when_autoconstructing (boolean_shove boolean_eq integer_mod exec_eq in1) ()) ())
Zero cases best errors: [0 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 71
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 789 1 788 2 1000 1000 1 1000 1)
Population mean number of elite cases: 4.58
Count of perfect (error zero) individuals by case: (1 789 1 788 2 0 0 1 0 1)
Population mean number of perfect (error zero) cases: 1.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 1, :instruction in1})
Best program: (integer_mult integer_stackdepth boolean_dup boolean_shove integer_lte integer_dup_items boolean_flush integer_dup_times print_integer exec_do*while (exec_eq) integer_stackdepth exec_if (integer_yank) (in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_dup_items boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2) integer_lt integer_lte integer_sub boolean_empty boolean_frominteger integer_shove exec_empty integer_sub boolean_swap integer_dup_items boolean_eq exec_s_when_autoconstructing (in2 exec_do*range ()) (exec_k_when_autoconstructing (boolean_shove boolean_eq integer_mod exec_eq in1) ()) ())
Errors: [0 1 0 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 55
Size: 71
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 8.417
Median total errors in population: 8
Error averages by case: (0.999 0.211 0.999 0.212 0.998 1.0 1.0 0.999 1.0 0.999)
Error minima by case: (0 0 0 0 0 1 1 0 1 0)
Average genome size in population (length): 61.496
Average program size in population (points): 83.739
Average percent parens in population: 0.263
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.499125
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2964252
--- Timings ---
Current time: 1559314462838 milliseconds
Total Time:          17.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.7 seconds, 60.6%
Fitness Testing:      4.2 seconds, 23.9%
Report:               2.6 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: 41                 
Correct output: -66                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
Correct output: -19                 | Program output: 24                 
Correct output: 66                  | Program output: 66                 
Correct output: 84                  | Program output: 84                 
Correct output: -93                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -57                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 38                 
Correct output: -70                 | Program output: -70                
Correct output: -15                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -44                
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 30                  | Program output: 30                 
Correct output: 27                  | Program output: 27                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 15                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 14                  | Program output: 36                 
Correct output: 1                   | Program output: 31                 
Correct output: 34                  | Program output: 34                 
Correct output: 24                  | Program output: 62                 
Correct output: 13                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 85                  | Program output: 90                 
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 99                 
Correct output: -79                 | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -43                
Correct output: 6                   | Program output: 13                 
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: 20                 
Correct output: -40                 | Program output: -17                
Correct output: -92                 | Program output: 63                 
Correct output: -89                 | Program output: -89                
Correct output: -64                 | Program output: 7                  
Correct output: -77                 | Program output: 100                
Correct output: -99                 | Program output: -34                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: 95                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: 17                 
Correct output: -73                 | Program output: -37                
Correct output: -53                 | Program output: 13                 
Correct output: -91                 | Program output: 18                 
Correct output: 3                   | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -34                
Correct output: -22                 | Program output: 4                  
Correct output: -90                 | Program output: -90                
Correct output: 16                  | Program output: 92                 
Correct output: -57                 | Program output: -57                
Correct output: -72                 | Program output: 59                 
Correct output: -26                 | Program output: 3                  
Correct output: -84                 | Program output: 37                 
Correct output: -53                 | Program output: 85                 
Correct output: -67                 | Program output: 91                 
Correct output: -39                 | Program output: -23                
Correct output: -62                 | Program output: -58                
Correct output: 20                  | Program output: 46                 
Correct output: -75                 | Program output: 7                  
Correct output: -52                 | Program output: 89                 
Correct output: -89                 | Program output: -39                
Correct output: -35                 | Program output: -24                
Correct output: -37                 | Program output: 92                 
Correct output: -72                 | Program output: 90                 
Correct output: -88                 | Program output: 51                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: 71                 
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: 30                 
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: 48                 
Correct output: -94                 | Program output: 58                 
Correct output: 1                   | Program output: 22                 
Correct output: -56                 | Program output: 35                 
Correct output: -44                 | Program output: 67                 
Correct output: -75                 | Program output: -43                
Correct output: -47                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -12                 | Program output: 86                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_805} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 1, :instruction in1})
Lexicase best program: (integer_mult integer_stackdepth boolean_dup boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt integer_lt boolean_yank boolean_rot tagged_805 exec_stackdepth integer_fromboolean) (exec_s () (exec_dup () exec_s () (exec_when (print_boolean) boolean_invert_second_then_and exec_y_when_autoconstructing (integer_gte boolean_invert_second_then_and) exec_stackdepth exec_y_when_autoconstructing (boolean_or integer_dup_times exec_s (exec_k (boolean_not) ()) (print_integer) (in2)) integer_lt integer_lte integer_sub boolean_empty) (boolean_frominteger) integer_shove exec_empty integer_sub boolean_swap integer_dup_items boolean_eq exec_s_when_autoconstructing (in2 exec_do*range ()) (exec_k_when_autoconstructing (boolean_shove boolean_eq integer_mod exec_eq in1) ()) ()) ())) () ())
Lexicase best errors: [1 0 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 82
Percent parens: 0.341
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_805} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 1, :instruction in1})
Zero cases best program: (integer_mult integer_stackdepth boolean_dup boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt integer_lt boolean_yank boolean_rot tagged_805 exec_stackdepth integer_fromboolean) (exec_s () (exec_dup () exec_s () (exec_when (print_boolean) boolean_invert_second_then_and exec_y_when_autoconstructing (integer_gte boolean_invert_second_then_and) exec_stackdepth exec_y_when_autoconstructing (boolean_or integer_dup_times exec_s (exec_k (boolean_not) ()) (print_integer) (in2)) integer_lt integer_lte integer_sub boolean_empty) (boolean_frominteger) integer_shove exec_empty integer_sub boolean_swap integer_dup_items boolean_eq exec_s_when_autoconstructing (in2 exec_do*range ()) (exec_k_when_autoconstructing (boolean_shove boolean_eq integer_mod exec_eq in1) ()) ()) ())) () ())
Zero cases best errors: [1 0 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 82
Percent parens: 0.341
--- Lexicase Population Statistics ---
Count of elite individuals by case: (147 405 402 171 8 318 403 145 326 720)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (147 405 402 171 8 318 403 145 326 720)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Best program: (integer_mult integer_stackdepth boolean_dup exec_dup (boolean_pop boolean_stackdepth) integer_eq integer_dup integer_stackdepth boolean_shove integer_lte boolean_dup_times integer_max integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_dup_items boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2) integer_lt exec_swap () (boolean_not) integer_shove integer_lte exec_empty print_integer boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_if () ())
Errors: [1 0 0 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 47
Size: 61
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 6.955
Median total errors in population: 6
Error averages by case: (0.853 0.595 0.598 0.829 0.992 0.682 0.597 0.855 0.674 0.28)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.609
Average program size in population (points): 83.176
Average percent parens in population: 0.253
Minimum age in population: 6.75
Maximum age in population: 10.6875
Average age in population: 9.13309375
Median age in population: 9.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 219
Genome diversity (% unique genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 230
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3549106
--- Timings ---
Current time: 1559314465314 milliseconds
Total Time:          20.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.2 seconds, 60.5%
Fitness Testing:      4.8 seconds, 23.6%
Report:               3.1 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: 41                 
Correct output: -66                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
Correct output: -19                 | Program output: -19                
Correct output: 66                  | Program output: 66                 
Correct output: 84                  | Program output: 86                 
Correct output: -93                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -57                
Correct output: -91                 | Program output: 99                 
Correct output: 38                  | Program output: 38                 
Correct output: -70                 | Program output: -70                
Correct output: -15                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -44                
Correct output: 11                  | Program output: 39                 
Correct output: 8                   | Program output: 40                 
Correct output: 30                  | Program output: 99                 
Correct output: 27                  | Program output: 87                 
Correct output: 6                   | Program output: 37                 
Correct output: 9                   | Program output: 89                 
Correct output: 12                  | Program output: 87                 
Correct output: 15                  | Program output: 16                 
Correct output: 4                   | Program output: 36                 
Correct output: 34                  | Program output: 80                 
Correct output: 3                   | Program output: 68                 
Correct output: 14                  | Program output: 97                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 79                 
Correct output: 24                  | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 22                  | Program output: 88                 
Correct output: 85                  | Program output: 91                 
Correct output: 5                   | Program output: 89                 
Correct output: 15                  | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -4                 
Correct output: -98                 | Program output: 2                  
Correct output: 6                   | Program output: 79                 
Correct output: -72                 | Program output: 68                 
Correct output: -80                 | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: 52                 
Correct output: -89                 | Program output: -6                 
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: 100                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -51                
Correct output: -90                 | Program output: 54                 
Correct output: -7                  | Program output: 79                 
Correct output: -82                 | Program output: 75                 
Correct output: -73                 | Program output: 49                 
Correct output: -53                 | Program output: 18                 
Correct output: -91                 | Program output: 37                 
Correct output: 3                   | Program output: 55                 
Correct output: -89                 | Program output: -88                
Correct output: -36                 | Program output: -28                
Correct output: -78                 | Program output: 75                 
Correct output: -22                 | Program output: -22                
Correct output: -90                 | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: -57                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -84                 | Program output: 17                 
Correct output: -53                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -7                 
Correct output: -62                 | Program output: 87                 
Correct output: 20                  | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: 48                 
Correct output: -35                 | Program output: 74                 
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: -66                
Correct output: -98                 | Program output: 42                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -21                
Correct output: -66                 | Program output: 16                 
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: 31                 
Correct output: -93                 | Program output: 56                 
Correct output: -97                 | Program output: -28                
Correct output: -33                 | Program output: 36                 
Correct output: -94                 | Program output: -94                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -31                
Correct output: -44                 | Program output: 90                 
Correct output: -75                 | Program output: 37                 
Correct output: -47                 | Program output: -31                
Correct output: -90                 | Program output: 19                 
Correct output: -12                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_k} {:close 1, :instruction exec_y} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction in4})
Lexicase best program: (integer_yankdup boolean_dup exec_dup (boolean_pop boolean_stackdepth) integer_eq integer_dup integer_stackdepth boolean_shove integer_lte integer_dup_items in4 integer_dup_times print_integer exec_do*while (exec_eq) integer_stackdepth exec_if () (integer_yank in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth exec_while (exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_dup_items boolean_empty boolean_or exec_swap () (boolean_not)) boolean_or exec_swap () (boolean_not)) (exec_shove () integer_lte) boolean_pop) print_integer boolean_frominteger boolean_frominteger boolean_eq integer_eq integer_add in3 exec_eq boolean_dup integer_dup_items integer_sub boolean_swap integer_dup_items boolean_eq exec_s_when_autoconstructing (boolean_dup exec_do*range ()) (exec_k_when_autoconstructing (boolean_shove boolean_eq integer_mod exec_eq boolean_frominteger) (exec_k () (exec_y () exec_stackdepth) integer_add exec_y_when_autoconstructing (integer_inc in1 boolean_not in4))) ())
Lexicase best errors: [0 1 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 101
Percent parens: 0.248
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_k} {:close 1, :instruction exec_y} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction in4})
Zero cases best program: (integer_yankdup boolean_dup exec_dup (boolean_pop boolean_stackdepth) integer_eq integer_dup integer_stackdepth boolean_shove integer_lte integer_dup_items in4 integer_dup_times print_integer exec_do*while (exec_eq) integer_stackdepth exec_if () (integer_yank in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth exec_while (exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_dup_items boolean_empty boolean_or exec_swap () (boolean_not)) boolean_or exec_swap () (boolean_not)) (exec_shove () integer_lte) boolean_pop) print_integer boolean_frominteger boolean_frominteger boolean_eq integer_eq integer_add in3 exec_eq boolean_dup integer_dup_items integer_sub boolean_swap integer_dup_items boolean_eq exec_s_when_autoconstructing (boolean_dup exec_do*range ()) (exec_k_when_autoconstructing (boolean_shove boolean_eq integer_mod exec_eq boolean_frominteger) (exec_k () (exec_y () exec_stackdepth) integer_add exec_y_when_autoconstructing (integer_inc in1 boolean_not in4))) ())
Zero cases best errors: [0 1 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 101
Percent parens: 0.248
--- Lexicase Population Statistics ---
Count of elite individuals by case: (134 215 131 1 398 214 131 398 131 395)
Population mean number of elite cases: 2.15
Count of perfect (error zero) individuals by case: (134 215 131 1 398 214 131 398 131 395)
Population mean number of perfect (error zero) cases: 2.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_805} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction tagged_52} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 65} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_integer})
Best program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt integer_lt boolean_yank boolean_rot tagged_805 exec_stackdepth integer_fromboolean) (exec_s () (exec_dup () exec_s () (exec_when (print_boolean) boolean_invert_second_then_and exec_y_when_autoconstructing (integer_gte boolean_invert_second_then_and) exec_stackdepth exec_y_when_autoconstructing (boolean_or integer_dup_times exec_s (exec_k (integer_dup) (exec_shove (boolean_invert_first_then_and exec_do*while (integer_inc) tagged_52) exec_do*times (exec_do*range (integer_add) exec_while (exec_noop boolean_yank integer_fromboolean) exec_yankdup) boolean_dup_items integer_sub exec_while (boolean_pop integer_dup_times 65) exec_s_when_autoconstructing (integer_stackdepth integer_add exec_dup_items boolean_shove) (integer_gte integer_yank) (integer_gt integer_fromboolean) exec_pop (integer_min exec_do*count () integer_dup_items boolean_not in4 boolean_dup integer_gt) boolean_and) exec_yank exec_noop boolean_shove print_integer) () ())) ()) ())) () ())
Errors: [0 1 0 1 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 70
Size: 103
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 7.852
Median total errors in population: 7
Error averages by case: (0.866 0.785 0.869 0.999 0.602 0.786 0.869 0.602 0.869 0.605)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.168
Average program size in population (points): 86.801
Average percent parens in population: 0.278
Minimum age in population: 7.75
Maximum age in population: 12.25
Average age in population: 10.622921875
Median age in population: 10.703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.715
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4145415
--- Timings ---
Current time: 1559314468273 milliseconds
Total Time:          23.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.1 seconds, 61.1%
Fitness Testing:      5.3 seconds, 22.9%
Report:               3.6 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: 41                 
Correct output: -66                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
Correct output: -19                 | Program output: -19                
Correct output: 66                  | Program output: 66                 
Correct output: 84                  | Program output: 84                 
Correct output: -93                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -57                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 38                 
Correct output: -70                 | Program output: -70                
Correct output: -15                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -44                
Correct output: 11                  | Program output: 39                 
Correct output: 8                   | Program output: 8                  
Correct output: 30                  | Program output: 30                 
Correct output: 27                  | Program output: 27                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 15                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 14                  | Program output: 36                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 24                  | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 22                  | Program output: 22                 
Correct output: 85                  | Program output: 90                 
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -43                
Correct output: 6                   | Program output: 13                 
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: 52                 
Correct output: -89                 | Program output: -89                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: 100                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: 54                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: 17                 
Correct output: -73                 | Program output: -37                
Correct output: -53                 | Program output: 13                 
Correct output: -91                 | Program output: 18                 
Correct output: 3                   | Program output: 55                 
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -34                
Correct output: -22                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: 16                  | Program output: 16                 
Correct output: -57                 | Program output: -57                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -84                 | Program output: 17                 
Correct output: -53                 | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -23                
Correct output: -62                 | Program output: -58                
Correct output: 20                  | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -39                
Correct output: -35                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -89                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: 36                 
Correct output: -94                 | Program output: -94                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -31                
Correct output: -44                 | Program output: 67                 
Correct output: -75                 | Program output: -43                
Correct output: -47                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -12                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Lexicase best program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not)) (integer_shove) (integer_lte) exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_if () ())
Lexicase best errors: [0 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 64
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Zero cases best program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not)) (integer_shove) (integer_lte) exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_if () ())
Zero cases best errors: [0 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 64
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 80 242 678 82 108 325 762 550 250)
Population mean number of elite cases: 3.09
Count of perfect (error zero) individuals by case: (12 80 242 678 82 108 325 762 550 250)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Best program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not)) (integer_shove) (integer_lte) exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_if () ())
Errors: [0 1 0 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 45
Size: 64
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 6.911
Median total errors in population: 6
Error averages by case: (0.988 0.92 0.758 0.322 0.918 0.892 0.675 0.238 0.45 0.75)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.702
Average program size in population (points): 80.745
Average percent parens in population: 0.282
Minimum age in population: 9.625
Maximum age in population: 13.921875
Average age in population: 12.196046875
Median age in population: 12.2734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.699
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4789903
--- Timings ---
Current time: 1559314471536 milliseconds
Total Time:          26.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.0 seconds, 61.4%
Fitness Testing:      5.8 seconds, 22.4%
Report:               4.1 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -66                 | Program output: 24                 
Correct output: -99                 | Program output: -4                 
Correct output: -19                 | Program output: -19                
Correct output: 66                  | Program output: 66                 
Correct output: 84                  | Program output: 86                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -34                
Correct output: -74                 | Program output: -57                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 38                 
Correct output: -70                 | Program output: -70                
Correct output: -15                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -44                
Correct output: 11                  | Program output: 46                 
Correct output: 8                   | Program output: 13                 
Correct output: 30                  | Program output: 50                 
Correct output: 27                  | Program output: 28                 
Correct output: 6                   | Program output: 51                 
Correct output: 9                   | Program output: 27                 
Correct output: 12                  | Program output: 13                 
Correct output: 15                  | Program output: 100                
Correct output: 4                   | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 29                 
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 96                 
Correct output: 34                  | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 13                  | Program output: 76                 
Correct output: 22                  | Program output: 85                 
Correct output: 85                  | Program output: 90                 
Correct output: 5                   | Program output: 49                 
Correct output: 15                  | Program output: 65                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: 100                
Correct output: -98                 | Program output: 21                 
Correct output: 6                   | Program output: 62                 
Correct output: -72                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: 71                 
Correct output: -64                 | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 23                 
Correct output: -86                 | Program output: 12                 
Correct output: -90                 | Program output: -14                
Correct output: -7                  | Program output: -3                 
Correct output: -82                 | Program output: 7                  
Correct output: -73                 | Program output: 26                 
Correct output: -53                 | Program output: -53                
Correct output: -91                 | Program output: 58                 
Correct output: 3                   | Program output: 4                  
Correct output: -89                 | Program output: 98                 
Correct output: -36                 | Program output: 38                 
Correct output: -78                 | Program output: -78                
Correct output: -22                 | Program output: 59                 
Correct output: -90                 | Program output: -79                
Correct output: 16                  | Program output: 18                 
Correct output: -57                 | Program output: -47                
Correct output: -72                 | Program output: 62                 
Correct output: -26                 | Program output: 73                 
Correct output: -84                 | Program output: -84                
Correct output: -53                 | Program output: -53                
Correct output: -67                 | Program output: -59                
Correct output: -39                 | Program output: 59                 
Correct output: -62                 | Program output: -36                
Correct output: 20                  | Program output: 92                 
Correct output: -75                 | Program output: 5                  
Correct output: -52                 | Program output: 0                  
Correct output: -89                 | Program output: -47                
Correct output: -35                 | Program output: -35                
Correct output: -37                 | Program output: 54                 
Correct output: -72                 | Program output: 30                 
Correct output: -88                 | Program output: -9                 
Correct output: -98                 | Program output: -78                
Correct output: -53                 | Program output: 89                 
Correct output: -73                 | Program output: -22                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 87                 
Correct output: -88                 | Program output: 88                 
Correct output: -90                 | Program output: 55                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 74                 
Correct output: -33                 | Program output: 10                 
Correct output: -94                 | Program output: 35                 
Correct output: 1                   | Program output: 18                 
Correct output: -56                 | Program output: -56                
Correct output: -44                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -47                 | Program output: 84                 
Correct output: -90                 | Program output: -7                 
Correct output: -12                 | Program output: 38                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_805} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction tag_exec_887} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_div} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 2, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_209} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_168})
Lexicase best program: (integer_mult integer_stackdepth boolean_dup boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt integer_lt boolean_yank boolean_rot tagged_805 exec_stackdepth integer_fromboolean) (exec_s () (exec_dup () exec_s () (exec_when (print_boolean) boolean_invert_second_then_and exec_y_when_autoconstructing (integer_gte boolean_invert_second_then_and) exec_stackdepth exec_y_when_autoconstructing (boolean_or integer_dup_times exec_s (exec_k (integer_dup) (exec_shove (integer_dup_items in4 integer_dup_times) print_integer exec_do*while (exec_eq) integer_stackdepth exec_if () (integer_yank in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth integer_dup exec_s () (boolean_not) (tag_exec_887 (integer_shove integer_div) integer_eq) exec_empty integer_max integer_yank exec_when (exec_do*range (integer_mod boolean_dup)) integer_yankdup) boolean_pop integer_yankdup) (boolean_and) (exec_while (exec_do*while () exec_do*count (integer_dup_times) integer_eq exec_k_when_autoconstructing (boolean_and boolean_and boolean_shove integer_empty boolean_swap) () boolean_invert_second_then_and) boolean_rot boolean_dup) integer_lt boolean_swap exec_yankdup boolean_pop tag_integer_209 boolean_dup integer_rot in3 print_integer) tagged_168) ()) ())) () ())
Lexicase best errors: [0 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 127
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_805} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction tag_exec_887} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_div} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 2, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_209} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_168})
Zero cases best program: (integer_mult integer_stackdepth boolean_dup boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt integer_lt boolean_yank boolean_rot tagged_805 exec_stackdepth integer_fromboolean) (exec_s () (exec_dup () exec_s () (exec_when (print_boolean) boolean_invert_second_then_and exec_y_when_autoconstructing (integer_gte boolean_invert_second_then_and) exec_stackdepth exec_y_when_autoconstructing (boolean_or integer_dup_times exec_s (exec_k (integer_dup) (exec_shove (integer_dup_items in4 integer_dup_times) print_integer exec_do*while (exec_eq) integer_stackdepth exec_if () (integer_yank in4 integer_stackdepth) exec_noop integer_flush boolean_dup_times exec_stackdepth integer_dup exec_s () (boolean_not) (tag_exec_887 (integer_shove integer_div) integer_eq) exec_empty integer_max integer_yank exec_when (exec_do*range (integer_mod boolean_dup)) integer_yankdup) boolean_pop integer_yankdup) (boolean_and) (exec_while (exec_do*while () exec_do*count (integer_dup_times) integer_eq exec_k_when_autoconstructing (boolean_and boolean_and boolean_shove integer_empty boolean_swap) () boolean_invert_second_then_and) boolean_rot boolean_dup) integer_lt boolean_swap exec_yankdup boolean_pop tag_integer_209 boolean_dup integer_rot in3 print_integer) tagged_168) ()) ())) () ())
Zero cases best errors: [0 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 127
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (704 144 13 143 592 144 142 773 142 772)
Population mean number of elite cases: 3.57
Count of perfect (error zero) individuals by case: (704 144 13 143 592 144 142 773 142 772)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_805} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction tagged_52} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_k} {:close 1, :instruction exec_y} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction in4})
Best program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_dup_times) (exec_dup (boolean_rot integer_add exec_stackdepth tagged_805 exec_stackdepth boolean_invert_second_then_and) exec_stackdepth exec_y_when_autoconstructing (boolean_or integer_dup_times exec_s (exec_k (integer_dup) (exec_shove (boolean_invert_first_then_and exec_do*while (integer_inc) tagged_52) exec_do*times (exec_do*range (integer_add) exec_while (exec_swap () (boolean_not)) boolean_or exec_swap () (boolean_not)) exec_shove () integer_lte) boolean_pop) (print_integer boolean_frominteger boolean_frominteger boolean_eq) (boolean_stackdepth integer_add in3) exec_eq boolean_dup integer_dup_items integer_sub boolean_swap integer_dup_items boolean_eq exec_s_when_autoconstructing (boolean_dup exec_do*range ()) (exec_k_when_autoconstructing (boolean_shove boolean_eq integer_mod exec_eq boolean_frominteger) (exec_k () (exec_y () exec_stackdepth) integer_add exec_y_when_autoconstructing (boolean_yank in1 boolean_not in4))) ()))) () ())
Errors: [0 0 1 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 72
Size: 106
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 6.431
Median total errors in population: 6
Error averages by case: (0.296 0.856 0.987 0.857 0.408 0.856 0.858 0.227 0.858 0.228)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.948
Average program size in population (points): 78.992
Average percent parens in population: 0.303
Minimum age in population: 11.6484375
Maximum age in population: 15.7109375
Average age in population: 14.692171875
Median age in population: 14.7109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 303
Genome diversity (% unique genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 311
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5750248
--- Timings ---
Current time: 1559314474667 milliseconds
Total Time:          29.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.9 seconds, 60.6%
Fitness Testing:      6.6 seconds, 22.3%
Report:               4.9 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 402
Test mean error for best: 0.40200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: 41                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -19                 | Program output: -19                
Correct output: 66                  | Program output: 66                 
Correct output: 84                  | Program output: 86                 
Correct output: -93                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 38                 
Correct output: -70                 | Program output: -70                
Correct output: -15                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -44                
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 40                 
Correct output: 30                  | Program output: 99                 
Correct output: 27                  | Program output: 80                 
Correct output: 6                   | Program output: 37                 
Correct output: 9                   | Program output: 86                 
Correct output: 12                  | Program output: 35                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 36                 
Correct output: 34                  | Program output: 80                 
Correct output: 3                   | Program output: 46                 
Correct output: 14                  | Program output: 80                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 54                 
Correct output: 24                  | Program output: 56                 
Correct output: 13                  | Program output: 13                 
Correct output: 22                  | Program output: 47                 
Correct output: 85                  | Program output: 85                 
Correct output: 5                   | Program output: 46                 
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -4                 
Correct output: -98                 | Program output: -98                
Correct output: 6                   | Program output: 6                  
Correct output: -72                 | Program output: 47                 
Correct output: -80                 | Program output: -25                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: 52                 
Correct output: -89                 | Program output: -89                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: 57                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -51                
Correct output: -90                 | Program output: -90                
Correct output: -7                  | Program output: 45                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: 3                   | Program output: 3                  
Correct output: -89                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: 3                  
Correct output: -22                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: 16                  | Program output: 16                 
Correct output: -57                 | Program output: -15                
Correct output: -72                 | Program output: -5                 
Correct output: -26                 | Program output: -22                
Correct output: -84                 | Program output: 17                 
Correct output: -53                 | Program output: 4                  
Correct output: -67                 | Program output: -28                
Correct output: -39                 | Program output: -39                
Correct output: -62                 | Program output: -62                
Correct output: 20                  | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: -52                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: 49                 
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -21                
Correct output: -66                 | Program output: 16                 
Correct output: -88                 | Program output: -76                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -94                 | Program output: -94                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -31                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -66                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -12                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Lexicase best program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or exec_swap (boolean_not) () print_integer)) (in2)) integer_lt exec_swap () (boolean_not)) (integer_shove) (integer_lte) exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq) integer_fromboolean integer_dup_times exec_if () ())
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 65
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Zero cases best program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or exec_swap (boolean_not) () print_integer)) (in2)) integer_lt exec_swap () (boolean_not)) (integer_shove) (integer_lte) exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq) integer_fromboolean integer_dup_times exec_if () ())
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 65
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (307 163 298 325 100 150 220 296 149 151)
Population mean number of elite cases: 2.16
Count of perfect (error zero) individuals by case: (307 163 298 325 100 150 220 296 149 151)
Population mean number of perfect (error zero) cases: 2.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 1, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Best program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4) (exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not)) (integer_shove) integer_lte exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_if () ())
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 46
Size: 65
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 7.841
Median total errors in population: 10
Error averages by case: (0.693 0.837 0.702 0.675 0.9 0.85 0.78 0.704 0.851 0.849)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.712
Average program size in population (points): 89.896
Average percent parens in population: 0.302
Minimum age in population: 12.6484375
Maximum age in population: 17.2578125
Average age in population: 15.79327734375
Median age in population: 15.7958984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.009
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6510564
--- Timings ---
Current time: 1559314477847 milliseconds
Total Time:          32.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.8 seconds, 60.8%
Fitness Testing:      7.2 seconds, 22.1%
Report:               5.4 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 210
Test mean error for best: 0.21000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: 41                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -19                 | Program output: -19                
Correct output: 66                  | Program output: 66                 
Correct output: 84                  | Program output: 84                 
Correct output: -93                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 38                 
Correct output: -70                 | Program output: -70                
Correct output: -15                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -44                
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 30                  | Program output: 30                 
Correct output: 27                  | Program output: 27                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 14                  | Program output: 36                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 24                  | Program output: 56                 
Correct output: 13                  | Program output: 13                 
Correct output: 22                  | Program output: 22                 
Correct output: 85                  | Program output: 85                 
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -98                
Correct output: 6                   | Program output: 6                  
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -25                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: 52                 
Correct output: -89                 | Program output: -89                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: 57                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: 3                   | Program output: 3                  
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -34                
Correct output: -22                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: 16                  | Program output: 16                 
Correct output: -57                 | Program output: -57                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -84                 | Program output: 17                 
Correct output: -53                 | Program output: 4                  
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: -62                 | Program output: -62                
Correct output: 20                  | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -94                 | Program output: -94                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -31                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -66                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -12                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt integer_yankdup) (boolean_not) (integer_shove) boolean_not print_integer in2 integer_lt exec_swap () (boolean_not) integer_shove exec_swap () (boolean_not) integer_shove integer_lte exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times)
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 92
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt integer_yankdup) (boolean_not) (integer_shove) boolean_not print_integer in2 integer_lt exec_swap () (boolean_not) integer_shove exec_swap () (boolean_not) integer_shove integer_lte exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times)
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 92
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (607 644 828 644 1 638 1 478 861 692)
Population mean number of elite cases: 5.39
Count of perfect (error zero) individuals by case: (607 644 828 644 1 638 1 478 861 692)
Population mean number of perfect (error zero) cases: 5.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Best program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt) (exec_swap () (boolean_not) integer_shove) (integer_lte) exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean integer_dup_times exec_empty) in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_if () ())
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 62
Size: 83
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 4.606
Median total errors in population: 3
Error averages by case: (0.393 0.356 0.172 0.356 0.999 0.362 0.999 0.522 0.139 0.308)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.563
Average program size in population (points): 71.232
Average percent parens in population: 0.279
Minimum age in population: 15.56640625
Maximum age in population: 18.8623046875
Average age in population: 17.7301640625
Median age in population: 17.7109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.009
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7300550
--- Timings ---
Current time: 1559314481160 milliseconds
Total Time:          35.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.7 seconds, 60.8%
Fitness Testing:      7.9 seconds, 22.1%
Report:               6.0 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 210
Test mean error for best: 0.21000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: 41                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -19                 | Program output: -19                
Correct output: 66                  | Program output: 66                 
Correct output: 84                  | Program output: 84                 
Correct output: -93                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 38                 
Correct output: -70                 | Program output: -70                
Correct output: -15                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -44                
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 30                  | Program output: 30                 
Correct output: 27                  | Program output: 27                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 14                  | Program output: 36                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 24                  | Program output: 56                 
Correct output: 13                  | Program output: 13                 
Correct output: 22                  | Program output: 22                 
Correct output: 85                  | Program output: 85                 
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -98                
Correct output: 6                   | Program output: 6                  
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -25                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: 52                 
Correct output: -89                 | Program output: -89                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: 57                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: 3                   | Program output: 3                  
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -34                
Correct output: -22                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: 16                  | Program output: 16                 
Correct output: -57                 | Program output: -57                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -84                 | Program output: 17                 
Correct output: -53                 | Program output: 4                  
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: -62                 | Program output: -62                
Correct output: 20                  | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -94                 | Program output: -94                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -31                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -66                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -12                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_min integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not) integer_shove) (integer_lte) (exec_empty) in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 71
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 in1 integer_yank boolean_dup_times boolean_flush exec_when (integer_min integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not) integer_shove) (integer_lte) (exec_empty) in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 71
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (534 582 538 541 560 534 542 536 542 548)
Population mean number of elite cases: 5.46
Count of perfect (error zero) individuals by case: (534 582 538 541 560 534 542 536 542 548)
Population mean number of perfect (error zero) cases: 5.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_217} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 3, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 2, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if})
Best program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 exec_noop boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not) integer_shove) (integer_lte) (exec_empty) in4 boolean_frominteger boolean_frominteger boolean_eq exec_pop (boolean_not) integer_shove integer_lte exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_while () integer_dup_times exec_if () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 71
Size: 94
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 4.543
Median total errors in population: 3
Error averages by case: (0.466 0.418 0.462 0.459 0.44 0.466 0.458 0.464 0.458 0.452)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.038
Average program size in population (points): 83.775
Average percent parens in population: 0.262
Minimum age in population: 18.5
Maximum age in population: 20.7109375
Average age in population: 19.601435546875
Median age in population: 19.7109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.011
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 8284514
--- Timings ---
Current time: 1559314484683 milliseconds
Total Time:          39.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.5 seconds, 60.1%
Fitness Testing:      8.6 seconds, 22.0%
Report:               6.9 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 12
Successful program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 exec_noop boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not) integer_shove) (integer_lte) (exec_empty) in4 boolean_frominteger boolean_frominteger boolean_eq exec_pop (boolean_not) integer_shove integer_lte exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_while () integer_dup_times exec_if () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 94


Auto-simplifying with starting size: 94
step: 0
program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 exec_noop boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not) integer_shove) (integer_lte) (exec_empty) in4 boolean_frominteger boolean_frominteger boolean_eq exec_pop (boolean_not) integer_shove integer_lte exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_while () integer_dup_times exec_if () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 500
program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 exec_noop boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not) integer_shove) (integer_lte) (exec_empty) in4 boolean_frominteger boolean_frominteger boolean_eq exec_pop (boolean_not) integer_shove integer_lte exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_while () integer_dup_times exec_if () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 1000
program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 exec_noop boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not) integer_shove) (integer_lte) (exec_empty) in4 boolean_frominteger boolean_frominteger boolean_eq exec_pop (boolean_not) integer_shove integer_lte exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_while () integer_dup_times exec_if () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 1500
program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 exec_noop boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not) integer_shove) (integer_lte) (exec_empty) in4 boolean_frominteger boolean_frominteger boolean_eq exec_pop (boolean_not) integer_shove integer_lte exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_while () integer_dup_times exec_if () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 2000
program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 exec_noop boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not) integer_shove) (integer_lte) (exec_empty) in4 boolean_frominteger boolean_frominteger boolean_eq exec_pop (boolean_not) integer_shove integer_lte exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_while () integer_dup_times exec_if () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 2500
program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 exec_noop boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not) integer_shove) (integer_lte) (exec_empty) in4 boolean_frominteger boolean_frominteger boolean_eq exec_pop (boolean_not) integer_shove integer_lte exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_while () integer_dup_times exec_if () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 3000
program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 exec_noop boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not) integer_shove) (integer_lte) (exec_empty) in4 boolean_frominteger boolean_frominteger boolean_eq exec_pop (boolean_not) integer_shove integer_lte exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_while () integer_dup_times exec_if () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 3500
program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 exec_noop boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not) integer_shove) (integer_lte) (exec_empty) in4 boolean_frominteger boolean_frominteger boolean_eq exec_pop (boolean_not) integer_shove integer_lte exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_while () integer_dup_times exec_if () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 4000
program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 exec_noop boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not) integer_shove) (integer_lte) (exec_empty) in4 boolean_frominteger boolean_frominteger boolean_eq exec_pop (boolean_not) integer_shove integer_lte exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_while () integer_dup_times exec_if () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 4500
program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 exec_noop boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not) integer_shove) (integer_lte) (exec_empty) in4 boolean_frominteger boolean_frominteger boolean_eq exec_pop (boolean_not) integer_shove integer_lte exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_while () integer_dup_times exec_if () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 5000
program: (boolean_xor boolean_frominteger tag_boolean_217 exec_rot (in4 exec_rot () (integer_lt exec_stackdepth integer_lte boolean_dup_times) (integer_max integer_dup exec_s (boolean_not) (in1 in1 exec_noop boolean_dup_times boolean_flush exec_when (integer_min boolean_empty boolean_or integer_min boolean_empty boolean_or exec_swap (boolean_not) ()) print_integer) (in2)) integer_lt exec_swap () (boolean_not) integer_shove) (integer_lte) (exec_empty) in4 boolean_frominteger boolean_frominteger boolean_eq exec_pop (boolean_not) integer_shove integer_lte exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq integer_fromboolean) integer_dup_times exec_empty in4 boolean_frominteger boolean_frominteger boolean_eq boolean_stackdepth exec_do*times (exec_pop (boolean_and in3) integer_eq exec_while () integer_dup_times exec_if () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 210
Test mean error for best: 0.21000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: 41                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -19                 | Program output: -19                
Correct output: 66                  | Program output: 66                 
Correct output: 84                  | Program output: 84                 
Correct output: -93                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 38                 
Correct output: -70                 | Program output: -70                
Correct output: -15                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -44                
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 30                  | Program output: 30                 
Correct output: 27                  | Program output: 27                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 14                  | Program output: 36                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 24                  | Program output: 56                 
Correct output: 13                  | Program output: 13                 
Correct output: 22                  | Program output: 22                 
Correct output: 85                  | Program output: 85                 
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -98                
Correct output: 6                   | Program output: 6                  
Correct output: -72                 | Program output: -72                
Correct output: -80                 | Program output: -25                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: 52                 
Correct output: -89                 | Program output: -89                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: 57                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: 3                   | Program output: 3                  
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -34                
Correct output: -22                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: 16                  | Program output: 16                 
Correct output: -57                 | Program output: -57                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -84                 | Program output: 17                 
Correct output: -53                 | Program output: 4                  
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: -62                 | Program output: -62                
Correct output: 20                  | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -94                 | Program output: -94                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -31                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -66                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -12                 | Program output: -12                
;;******************************
